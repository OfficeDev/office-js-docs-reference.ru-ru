### YamlMime:UniversalReference
items:
  - uid: word.Word.Body
    summary: |-
      <span data-ttu-id="0b75d-101">Представляет содержимое документа или раздела.</span><span class="sxs-lookup"><span data-stu-id="0b75d-101">Represents the body of a document or a section.</span></span>

      <span data-ttu-id="0b75d-102">\[[Набор API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="0b75d-102">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: Word.Body
    fullName: Word.Body
    langs:
      - typeScript
    type: class
    extends:
      - 'OfficeExtension.ClientObject '
    package: word
    children:
      - word.Word.Body.clear
      - word.Word.Body.contentControls
      - word.Word.Body.context
      - word.Word.Body.font
      - word.Word.Body.getHtml
      - word.Word.Body.getOoxml
      - word.Word.Body.inlinePictures
      - word.Word.Body.insertBreak
      - word.Word.Body.insertBreak_1
      - word.Word.Body.insertContentControl
      - word.Word.Body.insertFileFromBase64
      - word.Word.Body.insertFileFromBase64_1
      - word.Word.Body.insertHtml
      - word.Word.Body.insertHtml_1
      - word.Word.Body.insertOoxml
      - word.Word.Body.insertOoxml_1
      - word.Word.Body.insertParagraph
      - word.Word.Body.insertParagraph_1
      - word.Word.Body.insertText
      - word.Word.Body.insertText_1
      - word.Word.Body.load
      - word.Word.Body.load_1
      - word.Word.Body.load_2
      - word.Word.Body.paragraphs
      - word.Word.Body.parentContentControl
      - word.Word.Body.search
      - word.Word.Body.select
      - word.Word.Body.select_1
      - word.Word.Body.set
      - word.Word.Body.set_1
      - word.Word.Body.style
      - word.Word.Body.text
      - word.Word.Body.toJSON
      - word.Word.Body.track
      - word.Word.Body.untrack
  - uid: word.Word.Body.clear
    summary: |-
      <span data-ttu-id="0b75d-103">Очищает объект содержимого.</span><span class="sxs-lookup"><span data-stu-id="0b75d-103">Clears the contents of the body object.</span></span> <span data-ttu-id="0b75d-104">Пользователь может отменить операцию для очищенного содержимого.</span><span class="sxs-lookup"><span data-stu-id="0b75d-104">The user can perform the undo operation on the cleared content.</span></span>

      <span data-ttu-id="0b75d-105">\[[Набор API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="0b75d-105">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: clear()
    fullName: clear()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'clear(): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a><span data-ttu-id="0b75d-106">Примеры</span><span class="sxs-lookup"><span data-stu-id="0b75d-106">Examples</span></span>

          ```javascript
          // Run a batch operation against the Word object model.
          Word.run(function (context) {

              // Create a proxy object for the document body.
              var body = context.document.body;

              // Queue a commmand to clear the contents of the body.
              body.clear();

              // Synchronize the document state by executing the queued commands,
              // and return a promise to indicate task completion.
              return context.sync().then(function () {
                  console.log('Cleared the body contents.');
              });
          })
          .catch(function (error) {
              console.log("Error: " + JSON.stringify(error));
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });

          // The Silly stories add-in sample shows how the 
          // clear method can be used to clear the contents of a document.
          // https://aka.ms/sillystorywordaddin
          ```
  - uid: word.Word.Body.contentControls
    summary: |-
      <span data-ttu-id="0b75d-107">Возвращает коллекцию объектов элемента управления содержимым "форматированный текст" в тексте.</span><span class="sxs-lookup"><span data-stu-id="0b75d-107">Gets the collection of rich text content control objects in the body.</span></span> <span data-ttu-id="0b75d-108">Только для чтения.</span><span class="sxs-lookup"><span data-stu-id="0b75d-108">Read-only.</span></span>

      <span data-ttu-id="0b75d-109">\[[Набор API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="0b75d-109">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: contentControls
    fullName: contentControls
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly contentControls: Word.ContentControlCollection;'
      return:
        type:
          - word.Word.ContentControlCollection
  - uid: word.Word.Body.context
    summary: '<span data-ttu-id="0b75d-110">Контекст запроса, связанный с объектом.</span><span class="sxs-lookup"><span data-stu-id="0b75d-110">The request context associated with the object.</span></span> <span data-ttu-id="0b75d-111">Это подсоединяет процесс надстройки к процессу ведущего приложения Office.</span><span class="sxs-lookup"><span data-stu-id="0b75d-111">This connects the add-in''s process to the Office host application''s process.</span></span>'
    name: context
    fullName: context
    langs:
      - typeScript
    type: property
    syntax:
      content: 'context: RequestContext;'
      return:
        type:
          - word.Word.RequestContext
  - uid: word.Word.Body.font
    summary: |-
      <span data-ttu-id="0b75d-112">Получает формат текста, указанный для содержимого документа или раздела.</span><span class="sxs-lookup"><span data-stu-id="0b75d-112">Gets the text format of the body.</span></span> <span data-ttu-id="0b75d-113">Используйте этот параметр для получения и задания имени шрифта, размера, цвета и других свойств.</span><span class="sxs-lookup"><span data-stu-id="0b75d-113">Use this to get and set font name, size, color and other properties.</span></span> <span data-ttu-id="0b75d-114">Только для чтения.</span><span class="sxs-lookup"><span data-stu-id="0b75d-114">Read-only.</span></span>

      <span data-ttu-id="0b75d-115">\[[Набор API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="0b75d-115">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: font
    fullName: font
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly font: Word.Font;'
      return:
        type:
          - word.Word.Font
        description: |-


          #### <a name="examples"></a><span data-ttu-id="0b75d-116">Примеры</span><span class="sxs-lookup"><span data-stu-id="0b75d-116">Examples</span></span>

          ```javascript
          // Get the style and the font size, font name, and font color properties on the body object.
          // Run a batch operation against the Word object model.
          Word.run(function (context) {

              // Create a proxy object for the document body.
              var body = context.document.body;

              // Queue a commmand to load font and style information for the document body.
              context.load(body, 'font/size, font/name, font/color, style');

              // Synchronize the document state by executing the queued commands,
              // and return a promise to indicate task completion.
              return context.sync().then(function () {
                  // Show the results of the load method. Here we show the
                  // property values on the body object.
                  var results = 'Font size: ' + body.font.size +
                                '; Font name: ' + body.font.name +
                                '; Font color: ' + body.font.color +
                                '; Body style: ' + body.style;

                  console.log(results);
              });
          })
          .catch(function (error) {
              console.log('Error: ' + JSON.stringify(error));
              if (error instanceof OfficeExtension.Error) {
                  console.log('Debug info: ' + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: word.Word.Body.getHtml
    summary: |-
      <span data-ttu-id="0b75d-117">Возвращает HTML-представление объекта Body.</span><span class="sxs-lookup"><span data-stu-id="0b75d-117">Gets an HTML representation of the body object.</span></span> <span data-ttu-id="0b75d-118">При отображении на веб-странице или в средстве просмотра HTML форматирование будет близким, но не точным, соответствующим формату документа.</span><span class="sxs-lookup"><span data-stu-id="0b75d-118">When rendered in a web page or HTML viewer, the formatting will be a close, but not exact, match to the formatting of the document.</span></span> <span data-ttu-id="0b75d-119">Этот метод не возвращает точно такой же HTML-код для одного и того же документа на различных платформах (Windows, Mac и т. д.).</span><span class="sxs-lookup"><span data-stu-id="0b75d-119">This method does not return the exact same HTML for the same document on different platforms (Windows, Mac, etc.).</span></span> <span data-ttu-id="0b75d-120">Если вам нужна точная точность или согласованность на различных платформах `Body.getOoxml()` , используйте и преобразуйте возвращенный XML в HTML.</span><span class="sxs-lookup"><span data-stu-id="0b75d-120">If you need exact fidelity, or consistency across platforms, use `Body.getOoxml()` and convert the returned XML to HTML.</span></span>

      <span data-ttu-id="0b75d-121">\[[Набор API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="0b75d-121">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: getHtml()
    fullName: getHtml()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getHtml(): OfficeExtension.ClientResult<string>;'
      return:
        type:
          - OfficeExtension.ClientResult<string>
        description: |-


          #### <a name="examples"></a><span data-ttu-id="0b75d-122">Примеры</span><span class="sxs-lookup"><span data-stu-id="0b75d-122">Examples</span></span>

          ```javascript
          // Run a batch operation against the Word object model.
          Word.run(function (context) {

              // Create a proxy object for the document body.
              var body = context.document.body;

              // Queue a commmand to get the HTML contents of the body.
              var bodyHTML = body.getHtml();

              // Synchronize the document state by executing the queued commands,
              // and return a promise to indicate task completion.
              return context.sync().then(function () {
                  console.log("Body HTML contents: " + bodyHTML.value);
              });
          })
          .catch(function (error) {
              console.log("Error: " + JSON.stringify(error));
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: word.Word.Body.getOoxml
    summary: |-
      <span data-ttu-id="0b75d-123">Возвращает OOXML-представление (Office Open XML) объекта содержимого.</span><span class="sxs-lookup"><span data-stu-id="0b75d-123">Gets the OOXML (Office Open XML) representation of the body object.</span></span>

      <span data-ttu-id="0b75d-124">\[[Набор API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="0b75d-124">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: getOoxml()
    fullName: getOoxml()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getOoxml(): OfficeExtension.ClientResult<string>;'
      return:
        type:
          - OfficeExtension.ClientResult<string>
        description: |-


          #### <a name="examples"></a><span data-ttu-id="0b75d-125">Примеры</span><span class="sxs-lookup"><span data-stu-id="0b75d-125">Examples</span></span>

          ```javascript
          // Run a batch operation against the Word object model.
          Word.run(function (context) {

              // Create a proxy object for the document body.
              var body = context.document.body;

              // Queue a commmand to get the OOXML contents of the body.
              var bodyOOXML = body.getOoxml();

              // Synchronize the document state by executing the queued commands,
              // and return a promise to indicate task completion.
              return context.sync().then(function () {
                  console.log("Body OOXML contents: " + bodyOOXML.value);
              });
          })
          .catch(function (error) {
              console.log("Error: " + JSON.stringify(error));
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: word.Word.Body.inlinePictures
    summary: |-
      <span data-ttu-id="0b75d-126">Получает коллекцию объектов коллекцию inlinepicture в тексте.</span><span class="sxs-lookup"><span data-stu-id="0b75d-126">Gets the collection of InlinePicture objects in the body.</span></span> <span data-ttu-id="0b75d-127">Коллекция не содержит плавающие рисунки.</span><span class="sxs-lookup"><span data-stu-id="0b75d-127">The collection does not include floating images.</span></span> <span data-ttu-id="0b75d-128">Только для чтения.</span><span class="sxs-lookup"><span data-stu-id="0b75d-128">Read-only.</span></span>

      <span data-ttu-id="0b75d-129">\[[Набор API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="0b75d-129">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: inlinePictures
    fullName: inlinePictures
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly inlinePictures: Word.InlinePictureCollection;'
      return:
        type:
          - word.Word.InlinePictureCollection
  - uid: word.Word.Body.insertBreak
    summary: |-
      <span data-ttu-id="0b75d-130">Вставляет разрыв в указанном расположении в основном документе.</span><span class="sxs-lookup"><span data-stu-id="0b75d-130">Inserts a break at the specified location in the main document.</span></span> <span data-ttu-id="0b75d-131">Возможные значения InsertLocation: Start или End.</span><span class="sxs-lookup"><span data-stu-id="0b75d-131">The insertLocation value can be 'Start' or 'End'.</span></span>

      <span data-ttu-id="0b75d-132">\[[Набор API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="0b75d-132">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: 'insertBreak(breakType, insertLocation)'
    fullName: 'insertBreak(breakType, insertLocation)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertBreak(breakType: Word.BreakType, insertLocation: Word.InsertLocation): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a><span data-ttu-id="0b75d-133">Примеры</span><span class="sxs-lookup"><span data-stu-id="0b75d-133">Examples</span></span>

          ```javascript
          // Run a batch operation against the Word object model.
          Word.run(function (ctx) {

              // Create a proxy object for the document body.
              var body = ctx.document.body;

              // Queue a commmand to insert a page break at the start of the document body.
              body.insertBreak(Word.BreakType.page, Word.InsertLocation.start);

              // Synchronize the document state by executing the queued commands,
              // and return a promise to indicate task completion.
              return ctx.sync().then(function () {
                  console.log('Added a page break at the start of the document body.');
              });
          })
          .catch(function (error) {
              console.log("Error: " + JSON.stringify(error));
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: breakType
          description: '<span data-ttu-id="0b75d-134">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="0b75d-134">Required.</span></span> <span data-ttu-id="0b75d-135">Тип разрыва, который необходимо добавить в содержимое.</span><span class="sxs-lookup"><span data-stu-id="0b75d-135">The break type to add to the body.</span></span>'
          type:
            - word.Word.BreakType
        - id: insertLocation
          description: '<span data-ttu-id="0b75d-136">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="0b75d-136">Required.</span></span> <span data-ttu-id="0b75d-137">Возможные значения: Start и End.</span><span class="sxs-lookup"><span data-stu-id="0b75d-137">The value can be ''Start'' or ''End''.</span></span>'
          type:
            - word.Word.InsertLocation
  - uid: word.Word.Body.insertBreak_1
    summary: |-
      <span data-ttu-id="0b75d-138">Вставляет разрыв в указанном расположении в основном документе.</span><span class="sxs-lookup"><span data-stu-id="0b75d-138">Inserts a break at the specified location in the main document.</span></span> <span data-ttu-id="0b75d-139">Возможные значения InsertLocation: Start или End.</span><span class="sxs-lookup"><span data-stu-id="0b75d-139">The insertLocation value can be 'Start' or 'End'.</span></span>

      <span data-ttu-id="0b75d-140">\[[Набор API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="0b75d-140">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: 'insertBreak(breakTypeString, insertLocation)'
    fullName: 'insertBreak(breakTypeString, insertLocation)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertBreak(breakTypeString: "Page" | "Next" | "SectionNext" | "SectionContinuous" | "SectionEven" | "SectionOdd" | "Line", insertLocation: "Before" | "After" | "Start" | "End" | "Replace"): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: breakTypeString
          description: '<span data-ttu-id="0b75d-141">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="0b75d-141">Required.</span></span> <span data-ttu-id="0b75d-142">Тип разрыва, который необходимо добавить в содержимое.</span><span class="sxs-lookup"><span data-stu-id="0b75d-142">The break type to add to the body.</span></span>'
          type:
            - '"Page" | "Next" | "SectionNext" | "SectionContinuous" | "SectionEven" | "SectionOdd" | "Line"'
        - id: insertLocation
          description: '<span data-ttu-id="0b75d-143">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="0b75d-143">Required.</span></span> <span data-ttu-id="0b75d-144">Возможные значения: Start и End.</span><span class="sxs-lookup"><span data-stu-id="0b75d-144">The value can be ''Start'' or ''End''.</span></span>'
          type:
            - '"Before" | "After" | "Start" | "End" | "Replace"'
  - uid: word.Word.Body.insertContentControl
    summary: |-
      <span data-ttu-id="0b75d-145">Включает объект содержимого в элемент управления форматированным текстом.</span><span class="sxs-lookup"><span data-stu-id="0b75d-145">Wraps the body object with a Rich Text content control.</span></span>

      <span data-ttu-id="0b75d-146">\[[Набор API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="0b75d-146">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: insertContentControl()
    fullName: insertContentControl()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertContentControl(): Word.ContentControl;'
      return:
        type:
          - word.Word.ContentControl
        description: |-


          #### <a name="examples"></a><span data-ttu-id="0b75d-147">Примеры</span><span class="sxs-lookup"><span data-stu-id="0b75d-147">Examples</span></span>

          ```javascript
          // Run a batch operation against the Word object model.
          Word.run(function (context) {

              // Create a proxy object for the document body.
              var body = context.document.body;

              // Queue a commmand to wrap the body in a content control.
              body.insertContentControl();

              // Synchronize the document state by executing the queued commands,
              // and return a promise to indicate task completion.
              return context.sync().then(function () {
                  console.log('Wrapped the body in a content control.');
              });
          })
          .catch(function (error) {
              console.log('Error: ' + JSON.stringify(error));
              if (error instanceof OfficeExtension.Error) {
                  console.log('Debug info: ' + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: word.Word.Body.insertFileFromBase64
    summary: |-
      <span data-ttu-id="0b75d-148">Вставляет документ в содержимое в заданном расположении.</span><span class="sxs-lookup"><span data-stu-id="0b75d-148">Inserts a document into the body at the specified location.</span></span> <span data-ttu-id="0b75d-149">Возможные значения insertLocation: Replace, Start и End.</span><span class="sxs-lookup"><span data-stu-id="0b75d-149">The insertLocation value can be 'Replace', 'Start', or 'End'.</span></span>

      <span data-ttu-id="0b75d-150">\[[Набор API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="0b75d-150">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: 'insertFileFromBase64(base64File, insertLocation)'
    fullName: 'insertFileFromBase64(base64File, insertLocation)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertFileFromBase64(base64File: string, insertLocation: Word.InsertLocation): Word.Range;'
      return:
        type:
          - word.Word.Range
        description: |-


          #### <a name="examples"></a><span data-ttu-id="0b75d-151">Примеры</span><span class="sxs-lookup"><span data-stu-id="0b75d-151">Examples</span></span>

          ```javascript
          // Run a batch operation against the Word object model.
          Word.run(function (context) {

              // Create a proxy object for the document body.
              var body = context.document.body;

              // Queue a commmand to insert base64 encoded .docx at the beginning of the content body.
              // You will need to implement getBase64() to pass in a string of a base64 encoded docx file.
              body.insertFileFromBase64(getBase64(), Word.InsertLocation.start);

              // Synchronize the document state by executing the queued commands,
              // and return a promise to indicate task completion.
              return context.sync().then(function () {
                  console.log('Added base64 encoded text to the beginning of the document body.');
              });
          })
          .catch(function (error) {
              console.log('Error: ' + JSON.stringify(error));
              if (error instanceof OfficeExtension.Error) {
                  console.log('Debug info: ' + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: base64File
          description: <span data-ttu-id="0b75d-152">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="0b75d-152">Required.</span></span> <span data-ttu-id="0b75d-153">Содержимое docx файлов в кодировке Base64.</span><span class="sxs-lookup"><span data-stu-id="0b75d-153">The base64 encoded content of a .docx file.</span></span>
          type:
            - string
        - id: insertLocation
          description: '<span data-ttu-id="0b75d-154">Обязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="0b75d-154">Required.</span></span> <span data-ttu-id="0b75d-155">Возможные значения: Replace, Start или End.</span><span class="sxs-lookup"><span data-stu-id="0b75d-155">The value can be ''Replace'', ''Start'', or ''End''.</span></span>'
          type:
            - word.Word.InsertLocation
  - uid: word.Word.Body.insertFileFromBase64_1
    summary: |-
      <span data-ttu-id="0b75d-156">Вставляет документ в содержимое в заданном расположении.</span><span class="sxs-lookup"><span data-stu-id="0b75d-156">Inserts a document into the body at the specified location.</span></span> <span data-ttu-id="0b75d-157">Возможные значения insertLocation: Replace, Start и End.</span><span class="sxs-lookup"><span data-stu-id="0b75d-157">The insertLocation value can be 'Replace', 'Start', or 'End'.</span></span>

      <span data-ttu-id="0b75d-158">\[[Набор API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="0b75d-158">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: 'insertFileFromBase64(base64File, insertLocationString)'
    fullName: 'insertFileFromBase64(base64File, insertLocationString)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertFileFromBase64(base64File: string, insertLocationString: "Before" | "After" | "Start" | "End" | "Replace"): Word.Range;'
      return:
        type:
          - word.Word.Range
        description: ''
      parameters:
        - id: base64File
          description: <span data-ttu-id="0b75d-159">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="0b75d-159">Required.</span></span> <span data-ttu-id="0b75d-160">Содержимое docx файлов в кодировке Base64.</span><span class="sxs-lookup"><span data-stu-id="0b75d-160">The base64 encoded content of a .docx file.</span></span>
          type:
            - string
        - id: insertLocationString
          description: '<span data-ttu-id="0b75d-161">Обязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="0b75d-161">Required.</span></span> <span data-ttu-id="0b75d-162">Возможные значения: Replace, Start или End.</span><span class="sxs-lookup"><span data-stu-id="0b75d-162">The value can be ''Replace'', ''Start'', or ''End''.</span></span>'
          type:
            - '"Before" | "After" | "Start" | "End" | "Replace"'
  - uid: word.Word.Body.insertHtml
    summary: |-
      <span data-ttu-id="0b75d-163">Вставляет HTML-код в указанном расположении.</span><span class="sxs-lookup"><span data-stu-id="0b75d-163">Inserts HTML at the specified location.</span></span> <span data-ttu-id="0b75d-164">Возможные значения insertLocation: Replace, Start и End.</span><span class="sxs-lookup"><span data-stu-id="0b75d-164">The insertLocation value can be 'Replace', 'Start', or 'End'.</span></span>

      <span data-ttu-id="0b75d-165">\[[Набор API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="0b75d-165">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: 'insertHtml(html, insertLocation)'
    fullName: 'insertHtml(html, insertLocation)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertHtml(html: string, insertLocation: Word.InsertLocation): Word.Range;'
      return:
        type:
          - word.Word.Range
        description: |-


          #### <a name="examples"></a><span data-ttu-id="0b75d-166">Примеры</span><span class="sxs-lookup"><span data-stu-id="0b75d-166">Examples</span></span>

          ```javascript
          // Run a batch operation against the Word object model.
          Word.run(function (context) {

              // Create a proxy object for the document body.
              var body = context.document.body;

              // Queue a commmand to insert HTML in to the beginning of the body.
              body.insertHtml(
                  '<strong>This is text inserted with body.insertHtml()</strong>', Word.InsertLocation.start);

              // Synchronize the document state by executing the queued commands,
              // and return a promise to indicate task completion.
              return context.sync().then(function () {
                  console.log('HTML added to the beginning of the document body.');
              });
          })
          .catch(function (error) {
              console.log('Error: ' + JSON.stringify(error));
              if (error instanceof OfficeExtension.Error) {
                  console.log('Debug info: ' + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: html
          description: '<span data-ttu-id="0b75d-167">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="0b75d-167">Required.</span></span> <span data-ttu-id="0b75d-168">HTML-код, который необходимо вставить в документ.</span><span class="sxs-lookup"><span data-stu-id="0b75d-168">The HTML to be inserted in the document.</span></span>'
          type:
            - string
        - id: insertLocation
          description: '<span data-ttu-id="0b75d-169">Обязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="0b75d-169">Required.</span></span> <span data-ttu-id="0b75d-170">Возможные значения: Replace, Start или End.</span><span class="sxs-lookup"><span data-stu-id="0b75d-170">The value can be ''Replace'', ''Start'', or ''End''.</span></span>'
          type:
            - word.Word.InsertLocation
  - uid: word.Word.Body.insertHtml_1
    summary: |-
      <span data-ttu-id="0b75d-171">Вставляет HTML-код в указанном расположении.</span><span class="sxs-lookup"><span data-stu-id="0b75d-171">Inserts HTML at the specified location.</span></span> <span data-ttu-id="0b75d-172">Возможные значения insertLocation: Replace, Start и End.</span><span class="sxs-lookup"><span data-stu-id="0b75d-172">The insertLocation value can be 'Replace', 'Start', or 'End'.</span></span>

      <span data-ttu-id="0b75d-173">\[[Набор API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="0b75d-173">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: 'insertHtml(html, insertLocationString)'
    fullName: 'insertHtml(html, insertLocationString)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertHtml(html: string, insertLocationString: "Before" | "After" | "Start" | "End" | "Replace"): Word.Range;'
      return:
        type:
          - word.Word.Range
        description: ''
      parameters:
        - id: html
          description: '<span data-ttu-id="0b75d-174">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="0b75d-174">Required.</span></span> <span data-ttu-id="0b75d-175">HTML-код, который необходимо вставить в документ.</span><span class="sxs-lookup"><span data-stu-id="0b75d-175">The HTML to be inserted in the document.</span></span>'
          type:
            - string
        - id: insertLocationString
          description: '<span data-ttu-id="0b75d-176">Обязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="0b75d-176">Required.</span></span> <span data-ttu-id="0b75d-177">Возможные значения: Replace, Start или End.</span><span class="sxs-lookup"><span data-stu-id="0b75d-177">The value can be ''Replace'', ''Start'', or ''End''.</span></span>'
          type:
            - '"Before" | "After" | "Start" | "End" | "Replace"'
  - uid: word.Word.Body.insertOoxml
    summary: |-
      <span data-ttu-id="0b75d-178">Вставляет OOXML-код в указанном расположении.</span><span class="sxs-lookup"><span data-stu-id="0b75d-178">Inserts OOXML at the specified location.</span></span> <span data-ttu-id="0b75d-179">Возможные значения insertLocation: Replace, Start и End.</span><span class="sxs-lookup"><span data-stu-id="0b75d-179">The insertLocation value can be 'Replace', 'Start', or 'End'.</span></span>

      <span data-ttu-id="0b75d-180">\[[Набор API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="0b75d-180">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: 'insertOoxml(ooxml, insertLocation)'
    fullName: 'insertOoxml(ooxml, insertLocation)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertOoxml(ooxml: string, insertLocation: Word.InsertLocation): Word.Range;'
      return:
        type:
          - word.Word.Range
        description: ''
      parameters:
        - id: ooxml
          description: <span data-ttu-id="0b75d-181">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="0b75d-181">Required.</span></span> <span data-ttu-id="0b75d-182">Вставляемый OOXML-код.</span><span class="sxs-lookup"><span data-stu-id="0b75d-182">The OOXML to be inserted.</span></span>
          type:
            - string
        - id: insertLocation
          description: '<span data-ttu-id="0b75d-183">Обязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="0b75d-183">Required.</span></span> <span data-ttu-id="0b75d-184">Возможные значения: Replace, Start или End.</span><span class="sxs-lookup"><span data-stu-id="0b75d-184">The value can be ''Replace'', ''Start'', or ''End''.</span></span>'
          type:
            - word.Word.InsertLocation
  - uid: word.Word.Body.insertOoxml_1
    summary: |-
      <span data-ttu-id="0b75d-185">Вставляет OOXML-код в указанном расположении.</span><span class="sxs-lookup"><span data-stu-id="0b75d-185">Inserts OOXML at the specified location.</span></span> <span data-ttu-id="0b75d-186">Возможные значения insertLocation: Replace, Start и End.</span><span class="sxs-lookup"><span data-stu-id="0b75d-186">The insertLocation value can be 'Replace', 'Start', or 'End'.</span></span>

      <span data-ttu-id="0b75d-187">\[[Набор API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="0b75d-187">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: 'insertOoxml(ooxml, insertLocationString)'
    fullName: 'insertOoxml(ooxml, insertLocationString)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertOoxml(ooxml: string, insertLocationString: "Before" | "After" | "Start" | "End" | "Replace"): Word.Range;'
      return:
        type:
          - word.Word.Range
        description: ''
      parameters:
        - id: ooxml
          description: <span data-ttu-id="0b75d-188">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="0b75d-188">Required.</span></span> <span data-ttu-id="0b75d-189">Вставляемый OOXML-код.</span><span class="sxs-lookup"><span data-stu-id="0b75d-189">The OOXML to be inserted.</span></span>
          type:
            - string
        - id: insertLocationString
          description: '<span data-ttu-id="0b75d-190">Обязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="0b75d-190">Required.</span></span> <span data-ttu-id="0b75d-191">Возможные значения: Replace, Start или End.</span><span class="sxs-lookup"><span data-stu-id="0b75d-191">The value can be ''Replace'', ''Start'', or ''End''.</span></span>'
          type:
            - '"Before" | "After" | "Start" | "End" | "Replace"'
  - uid: word.Word.Body.insertParagraph
    summary: |-
      <span data-ttu-id="0b75d-192">Вставляет абзац в указанном расположении.</span><span class="sxs-lookup"><span data-stu-id="0b75d-192">Inserts a paragraph at the specified location.</span></span> <span data-ttu-id="0b75d-193">Возможные значения insertLocation: Start и End.</span><span class="sxs-lookup"><span data-stu-id="0b75d-193">The insertLocation value can be 'Start' or 'End'.</span></span>

      <span data-ttu-id="0b75d-194">\[[Набор API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="0b75d-194">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: 'insertParagraph(paragraphText, insertLocation)'
    fullName: 'insertParagraph(paragraphText, insertLocation)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertParagraph(paragraphText: string, insertLocation: Word.InsertLocation): Word.Paragraph;'
      return:
        type:
          - word.Word.Paragraph
        description: |-


          #### <a name="examples"></a><span data-ttu-id="0b75d-195">Примеры</span><span class="sxs-lookup"><span data-stu-id="0b75d-195">Examples</span></span>

          ```javascript
          // Run a batch operation against the Word object model.
          Word.run(function (context) {

              // Create a proxy object for the document body.
              var body = context.document.body;

              // Queue a commmand to insert the paragraph at the end of the document body.
              body.insertParagraph('Content of a new paragraph', Word.InsertLocation.end);

              // Synchronize the document state by executing the queued commands,
              // and return a promise to indicate task completion.
              return context.sync().then(function () {
                  console.log('Paragraph added at the end of the document body.');
              });
          })
          .catch(function (error) {
              console.log('Error: ' + JSON.stringify(error));
              if (error instanceof OfficeExtension.Error) {
                  console.log('Debug info: ' + JSON.stringify(error.debugInfo));
              }
          });

          // The Word-Add-in-DocumentAssembly sample shows how you can use the insertParagraph method to assemble a document.
          // https://github.com/OfficeDev/Word-Add-in-DocumentAssembly
          ```
          ```typescript
          await Word.run(async (context) => {
              let paragraph = context.document.body.insertParagraph("Timeline", "End");
              paragraph.style = "Heading 2";
              let paragraph2 = context.document.body.insertParagraph("The Services shall commence on July 31, 2015, and shall continue through July 29, 2015.", "End");
              paragraph2.style = "Normal";
              let paragraph3 = context.document.body.insertParagraph("Project Costs by Phase", "End");
              paragraph3.style = "Heading 2";
              // Note a content control with the title of "ProjectCosts" is added. Content will be replaced later.
              let paragraph4 = context.document.body.insertParagraph("<Add Project Costs Here>", "End");
              paragraph4.style = "Normal";
              paragraph4.font.highlightColor = "#FFFF00";
              let contentControl = paragraph4.insertContentControl();
              contentControl.title = "ProjectCosts";
              let paragraph5 = context.document.body.insertParagraph("Project Team", "End");
              paragraph5.style = "Heading 2";
              paragraph5.font.highlightColor = "#FFFFFF";
              let paragraph6 = context.document.body.insertParagraph("Terms of Work", "End");
              paragraph6.style = "Heading 1";
              let paragraph7 = context.document.body.insertParagraph("Contractor shall provide the Services and Deliverable(s) as follows:", "End");
              paragraph7.style = "Normal";
              let paragraph8 = context.document.body.insertParagraph("Out-of-Pocket Expenses / Invoice Procedures", "End");
              paragraph8.style = "Heading 2";
              let paragraph9 = context.document.body.insertParagraph("Client will be invoiced monthly for the consulting services and T&L expenses. Standard Contractor invoicing is assumed to be acceptable. Invoices are due upon receipt. client will be invoiced all costs associated with out-of-pocket expenses (including, without limitation, costs and expenses associated with meals, lodging, local transportation and any other applicable business expenses) listed on the invoice as a separate line item. Reimbursement for out-of-pocket expenses in connection with performance of this SOW, when authorized and up to the limits set forth in this SOW, shall be in accordance with Client's then-current published policies governing travel and associated business expenses, which information shall be provided by the Client Project Manager.", "End");
              paragraph9.style = "Normal";
              // Insert a page break at the end of the document.
              context.document.body.insertBreak("Page", "End");

              await context.sync();
          });
          ```
      parameters:
        - id: paragraphText
          description: '<span data-ttu-id="0b75d-196">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="0b75d-196">Required.</span></span> <span data-ttu-id="0b75d-197">Текст абзаца, который необходимо вставить.</span><span class="sxs-lookup"><span data-stu-id="0b75d-197">The paragraph text to be inserted.</span></span>'
          type:
            - string
        - id: insertLocation
          description: '<span data-ttu-id="0b75d-198">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="0b75d-198">Required.</span></span> <span data-ttu-id="0b75d-199">Возможные значения: Start и End.</span><span class="sxs-lookup"><span data-stu-id="0b75d-199">The value can be ''Start'' or ''End''.</span></span>'
          type:
            - word.Word.InsertLocation
  - uid: word.Word.Body.insertParagraph_1
    summary: |-
      <span data-ttu-id="0b75d-200">Вставляет абзац в указанном расположении.</span><span class="sxs-lookup"><span data-stu-id="0b75d-200">Inserts a paragraph at the specified location.</span></span> <span data-ttu-id="0b75d-201">Возможные значения insertLocation: Start и End.</span><span class="sxs-lookup"><span data-stu-id="0b75d-201">The insertLocation value can be 'Start' or 'End'.</span></span>

      <span data-ttu-id="0b75d-202">\[[Набор API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="0b75d-202">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: 'insertParagraph(paragraphText, insertLocationString)'
    fullName: 'insertParagraph(paragraphText, insertLocationString)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertParagraph(paragraphText: string, insertLocationString: "Before" | "After" | "Start" | "End" | "Replace"): Word.Paragraph;'
      return:
        type:
          - word.Word.Paragraph
        description: ''
      parameters:
        - id: paragraphText
          description: '<span data-ttu-id="0b75d-203">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="0b75d-203">Required.</span></span> <span data-ttu-id="0b75d-204">Текст абзаца, который необходимо вставить.</span><span class="sxs-lookup"><span data-stu-id="0b75d-204">The paragraph text to be inserted.</span></span>'
          type:
            - string
        - id: insertLocationString
          description: '<span data-ttu-id="0b75d-205">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="0b75d-205">Required.</span></span> <span data-ttu-id="0b75d-206">Возможные значения: Start и End.</span><span class="sxs-lookup"><span data-stu-id="0b75d-206">The value can be ''Start'' or ''End''.</span></span>'
          type:
            - '"Before" | "After" | "Start" | "End" | "Replace"'
  - uid: word.Word.Body.insertText
    summary: |-
      <span data-ttu-id="0b75d-207">Вставляет текст в содержимое в заданном расположении.</span><span class="sxs-lookup"><span data-stu-id="0b75d-207">Inserts text into the body at the specified location.</span></span> <span data-ttu-id="0b75d-208">Возможные значения insertLocation: Replace, Start и End.</span><span class="sxs-lookup"><span data-stu-id="0b75d-208">The insertLocation value can be 'Replace', 'Start', or 'End'.</span></span>

      <span data-ttu-id="0b75d-209">\[[Набор API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="0b75d-209">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: 'insertText(text, insertLocation)'
    fullName: 'insertText(text, insertLocation)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertText(text: string, insertLocation: Word.InsertLocation): Word.Range;'
      return:
        type:
          - word.Word.Range
        description: |-


          #### <a name="examples"></a><span data-ttu-id="0b75d-210">Примеры</span><span class="sxs-lookup"><span data-stu-id="0b75d-210">Examples</span></span>

          ```javascript
          // Run a batch operation against the Word object model.
          Word.run(function (context) {

              // Create a proxy object for the document body.
              var body = context.document.body;

              // Queue a commmand to insert text in to the beginning of the body.
              body.insertText('This is text inserted with body.insertText()', Word.InsertLocation.start);

              // Synchronize the document state by executing the queued commands,
              // and return a promise to indicate task completion.
              return context.sync().then(function () {
                  console.log('Text added to the beginning of the document body.');
              });
          })
          .catch(function (error) {
              console.log('Error: ' + JSON.stringify(error));
              if (error instanceof OfficeExtension.Error) {
                  console.log('Debug info: ' + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: text
          description: '<span data-ttu-id="0b75d-211">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="0b75d-211">Required.</span></span> <span data-ttu-id="0b75d-212">Текст, который необходимо вставить.</span><span class="sxs-lookup"><span data-stu-id="0b75d-212">Text to be inserted.</span></span>'
          type:
            - string
        - id: insertLocation
          description: '<span data-ttu-id="0b75d-213">Обязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="0b75d-213">Required.</span></span> <span data-ttu-id="0b75d-214">Возможные значения: Replace, Start или End.</span><span class="sxs-lookup"><span data-stu-id="0b75d-214">The value can be ''Replace'', ''Start'', or ''End''.</span></span>'
          type:
            - word.Word.InsertLocation
  - uid: word.Word.Body.insertText_1
    summary: |-
      <span data-ttu-id="0b75d-215">Вставляет текст в содержимое в заданном расположении.</span><span class="sxs-lookup"><span data-stu-id="0b75d-215">Inserts text into the body at the specified location.</span></span> <span data-ttu-id="0b75d-216">Возможные значения insertLocation: Replace, Start и End.</span><span class="sxs-lookup"><span data-stu-id="0b75d-216">The insertLocation value can be 'Replace', 'Start', or 'End'.</span></span>

      <span data-ttu-id="0b75d-217">\[[Набор API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="0b75d-217">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: 'insertText(text, insertLocationString)'
    fullName: 'insertText(text, insertLocationString)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertText(text: string, insertLocationString: "Before" | "After" | "Start" | "End" | "Replace"): Word.Range;'
      return:
        type:
          - word.Word.Range
        description: ''
      parameters:
        - id: text
          description: '<span data-ttu-id="0b75d-218">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="0b75d-218">Required.</span></span> <span data-ttu-id="0b75d-219">Текст, который необходимо вставить.</span><span class="sxs-lookup"><span data-stu-id="0b75d-219">Text to be inserted.</span></span>'
          type:
            - string
        - id: insertLocationString
          description: '<span data-ttu-id="0b75d-220">Обязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="0b75d-220">Required.</span></span> <span data-ttu-id="0b75d-221">Возможные значения: Replace, Start или End.</span><span class="sxs-lookup"><span data-stu-id="0b75d-221">The value can be ''Replace'', ''Start'', or ''End''.</span></span>'
          type:
            - '"Before" | "After" | "Start" | "End" | "Replace"'
  - uid: word.Word.Body.load
    summary: <span data-ttu-id="0b75d-222">Добавляет в очередь команду для загрузки указанных свойств объекта.</span><span class="sxs-lookup"><span data-stu-id="0b75d-222">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="0b75d-223">Перед чтением свойств необходимо вызвать метод context.sync().</span><span class="sxs-lookup"><span data-stu-id="0b75d-223">You must call "context.sync()" before reading the properties.</span></span>
    remarks: |-
      <span data-ttu-id="0b75d-224">В дополнение к этой подписи этот метод имеет следующие подписи:</span><span class="sxs-lookup"><span data-stu-id="0b75d-224">In addition to this signature, this method has the following signatures:</span></span>

      <span data-ttu-id="0b75d-225">`load(option?: string | string[]): Word.Body`-WHERE — это строка с разделителями-запятыми или массив строк, указывающий свойства для загрузки.</span><span class="sxs-lookup"><span data-stu-id="0b75d-225">`load(option?: string | string[]): Word.Body` - Where option is a comma-delimited string or an array of strings that specify the properties to load.</span></span>

      <span data-ttu-id="0b75d-226">`load(option?: { select?: string; expand?: string; }): Word.Body`-WHERE. Select — это строка с разделителями-запятыми, указывающая свойства для загрузки и параметры. Expand — это строка с разделителями-запятыми, указывающая свойства навигации для загрузки.</span><span class="sxs-lookup"><span data-stu-id="0b75d-226">`load(option?: { select?: string; expand?: string; }): Word.Body` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.</span></span>

      <span data-ttu-id="0b75d-227">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Word.Body`— Доступно только для типов коллекций.</span><span class="sxs-lookup"><span data-stu-id="0b75d-227">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Word.Body` - Only available on collection types.</span></span> <span data-ttu-id="0b75d-228">Он аналогичен предыдущей подписи.</span><span class="sxs-lookup"><span data-stu-id="0b75d-228">It is similar to the preceding signature.</span></span> <span data-ttu-id="0b75d-229">Option. Top указывает максимальное количество элементов коллекции, которые можно включить в результат.</span><span class="sxs-lookup"><span data-stu-id="0b75d-229">Option.top specifies the maximum number of collection items that can be included in the result.</span></span> <span data-ttu-id="0b75d-230">Option. skip указывает количество элементов, которые будут пропущены и не включены в результат.</span><span class="sxs-lookup"><span data-stu-id="0b75d-230">Option.skip specifies the number of items that are to be skipped and not included in the result.</span></span> <span data-ttu-id="0b75d-231">Если указан параметр Option. Top, результирующий набор начнется после пропуска указанного числа элементов.</span><span class="sxs-lookup"><span data-stu-id="0b75d-231">If option.top is specified, the result set will start after skipping the specified number of items.</span></span>
    name: load(option)
    fullName: load(option)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(option?: Word.Interfaces.BodyLoadOptions): Word.Body;'
      return:
        type:
          - word.Word.Body
        description: ''
      parameters:
        - id: option
          description: ''
          type:
            - word.Word.Interfaces.BodyLoadOptions
  - uid: word.Word.Body.load_1
    summary: <span data-ttu-id="0b75d-232">Добавляет в очередь команду для загрузки указанных свойств объекта.</span><span class="sxs-lookup"><span data-stu-id="0b75d-232">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="0b75d-233">Перед чтением свойств `context.sync()` необходимо вызвать метод.</span><span class="sxs-lookup"><span data-stu-id="0b75d-233">You must call `context.sync()` before reading the properties.</span></span>
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): Word.Body;'
      return:
        type:
          - word.Word.Body
        description: ''
      parameters:
        - id: propertyNames
          description: '<span data-ttu-id="0b75d-234">Строка, разделенная запятыми, или массив строк, указывающий свойства для загрузки.</span><span class="sxs-lookup"><span data-stu-id="0b75d-234">A comma-delimited string or an array of strings that specify the properties to load.</span></span>'
          type:
            - 'string | string[]'
  - uid: word.Word.Body.load_2
    summary: <span data-ttu-id="0b75d-235">Добавляет в очередь команду для загрузки указанных свойств объекта.</span><span class="sxs-lookup"><span data-stu-id="0b75d-235">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="0b75d-236">Перед чтением свойств `context.sync()` необходимо вызвать метод.</span><span class="sxs-lookup"><span data-stu-id="0b75d-236">You must call `context.sync()` before reading the properties.</span></span>
    name: load(propertyNamesAndPaths)
    fullName: load(propertyNamesAndPaths)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNamesAndPaths?: { select?: string; expand?: string; }): Word.Body;'
      return:
        type:
          - word.Word.Body
        description: ''
      parameters:
        - id: propertyNamesAndPaths
          description: '<span data-ttu-id="0b75d-237">Где Пропертинамесандпасс. Select — это строка с разделителями-запятыми, задающая свойства для загрузки, и Пропертинамесандпасс. Expand — это строка с разделителями-запятыми, указывающая свойства навигации для загрузки.</span><span class="sxs-lookup"><span data-stu-id="0b75d-237">Where propertyNamesAndPaths.select is a comma-delimited string that specifies the properties to load, and propertyNamesAndPaths.expand is a comma-delimited string that specifies the navigation properties to load.</span></span>'
          type:
            - '{ select?: string; expand?: string; }'
  - uid: word.Word.Body.paragraphs
    summary: |-
      <span data-ttu-id="0b75d-238">Возвращает коллекцию объектов абзаца в тексте.</span><span class="sxs-lookup"><span data-stu-id="0b75d-238">Gets the collection of paragraph objects in the body.</span></span> <span data-ttu-id="0b75d-239">Только для чтения.</span><span class="sxs-lookup"><span data-stu-id="0b75d-239">Read-only.</span></span>

      <span data-ttu-id="0b75d-240">\[[Набор API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="0b75d-240">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: paragraphs
    fullName: paragraphs
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly paragraphs: Word.ParagraphCollection;'
      return:
        type:
          - word.Word.ParagraphCollection
        description: |-


          #### <a name="examples"></a><span data-ttu-id="0b75d-241">Примеры</span><span class="sxs-lookup"><span data-stu-id="0b75d-241">Examples</span></span>

          ```typescript
          await Word.run(async (context) => {
            let paragraphs = context.document.body.paragraphs;
            paragraphs.load("text");
            await context.sync();

            let text = [];
            paragraphs.items.forEach((item) => {
              let paragraph = item.text.trim();
              if (paragraph) {
                paragraph.split(" ").forEach((term) => {
                  let currentTerm = term.trim();
                  if (currentTerm) {
                    text.push(currentTerm);
                  }
                });
              }
            });

            let makeTextDistinct = new Set(text);
            let distinctText = Array.from(makeTextDistinct);
            let allSearchResults = [];

            for (let i = 0; i < distinctText.length; i++) {
              let results = context.document.body.search(distinctText[i], { matchCase: true, matchWholeWord: true });
              results.load("text");

              // Map search term with its results.
              let correlatedResults = {
                searchTerm: distinctText[i],
                hits: results
              };

              allSearchResults.push(correlatedResults);
            }

            await context.sync();

            // Display counts.
            allSearchResults.forEach((result) => {
              let length = result.hits.items.length;

              console.log("Search term: " + result.searchTerm + " => Count: " + length);
            });
          });
          ```
  - uid: word.Word.Body.parentContentControl
    summary: |-
      <span data-ttu-id="0b75d-242">Получает элемент управления содержимым, содержащий документ или раздел.</span><span class="sxs-lookup"><span data-stu-id="0b75d-242">Gets the content control that contains the body.</span></span> <span data-ttu-id="0b75d-243">Вызывается, если родительский элемент управления содержимым отсутствует.</span><span class="sxs-lookup"><span data-stu-id="0b75d-243">Throws if there isn't a parent content control.</span></span> <span data-ttu-id="0b75d-244">Только для чтения.</span><span class="sxs-lookup"><span data-stu-id="0b75d-244">Read-only.</span></span>

      <span data-ttu-id="0b75d-245">\[[Набор API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="0b75d-245">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: parentContentControl
    fullName: parentContentControl
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly parentContentControl: Word.ContentControl;'
      return:
        type:
          - word.Word.ContentControl
  - uid: word.Word.Body.search
    summary: |-
      <span data-ttu-id="0b75d-246">Выполняет поиск с указанным SearchOptions в области объекта Body.</span><span class="sxs-lookup"><span data-stu-id="0b75d-246">Performs a search with the specified SearchOptions on the scope of the body object.</span></span> <span data-ttu-id="0b75d-247">Результат поиска — это коллекция объектов диапазона.</span><span class="sxs-lookup"><span data-stu-id="0b75d-247">The search results are a collection of range objects.</span></span>

      <span data-ttu-id="0b75d-248">\[[Набор API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="0b75d-248">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: 'search(searchText, searchOptions)'
    fullName: 'search(searchText, searchOptions)'
    langs:
      - typeScript
    type: method
    syntax:
      content: |-
        search(searchText: string, searchOptions?: Word.SearchOptions | {
                    ignorePunct?: boolean;
                    ignoreSpace?: boolean;
                    matchCase?: boolean;
                    matchPrefix?: boolean;
                    matchSuffix?: boolean;
                    matchWholeWord?: boolean;
                    matchWildcards?: boolean;
                }): Word.RangeCollection;
      return:
        type:
          - word.Word.RangeCollection
        description: |-


          #### <a name="examples"></a><span data-ttu-id="0b75d-249">Примеры</span><span class="sxs-lookup"><span data-stu-id="0b75d-249">Examples</span></span>

          ```javascript
          // Run a batch operation against the Word object model.
          Word.run(function (context) {

              // Create a proxy object for the document body.
              var body = context.document.body;

              // Queue a commmand to search the document.
              var searchResults = context.document.body.search('video', {matchCase: false});

              // Queue a commmand to load the results.
              context.load(searchResults, 'text, font');

              // Synchronize the document state by executing the queued commands,
              // and return a promise to indicate task completion.
              return context.sync().then(function () {
                  var results = 'Found count: ' + searchResults.items.length +
                                '; we highlighted the results.';

                  // Queue a command to change the font for each found item.
                  for (var i = 0; i < searchResults.items.length; i++) {
                    searchResults.items[i].font.color = '#FF0000'    // Change color to Red
                    searchResults.items[i].font.highlightColor = '#FFFF00';
                    searchResults.items[i].font.bold = true;
                  }

                  // Synchronize the document state by executing the queued commands,
                  // and return a promise to indicate task completion.
                  return context.sync().then(function () {
                      console.log(results);
                  });
              });
          })
          .catch(function (error) {
              console.log('Error: ' + JSON.stringify(error));
              if (error instanceof OfficeExtension.Error) {
                  console.log('Debug info: ' + JSON.stringify(error.debugInfo));
              }
          });

          // The Word-Add-in-DocumentAssembly sample provides another example of how to search a document.
          // https://github.com/OfficeDev/Word-Add-in-DocumentAssembly
          ```
          ```typescript
          await Word.run(async (context) => {
            let results = context.document.body.search("Online");
            results.load("length");

            await context.sync();

            // Let's traverse the search results... and highlight...
            for (let i = 0; i < results.items.length; i++) {
              results.items[i].font.highlightColor = "yellow";
            }

            await context.sync();
          });
          ```
          ```typescript
          await Word.run(async (context) => {
            // Check out how wildcard expression are built, also use the second parameter of the search method to include search modes
            // (i.e. use wildcards).
            let results = context.document.body.search("$*.[0-9][0-9]", { matchWildcards: true });
            results.load("length");

            await context.sync();

            // Let's traverse the search results... and highlight...
            for (let i = 0; i < results.items.length; i++) {
              results.items[i].font.highlightColor = "red";
              results.items[i].font.color = "white";
            }

            await context.sync();
          });
          ```
          ```typescript
          await Word.run(async (context) => {
            let paragraphs = context.document.body.paragraphs;
            paragraphs.load("text");
            await context.sync();

            let text = [];
            paragraphs.items.forEach((item) => {
              let paragraph = item.text.trim();
              if (paragraph) {
                paragraph.split(" ").forEach((term) => {
                  let currentTerm = term.trim();
                  if (currentTerm) {
                    text.push(currentTerm);
                  }
                });
              }
            });

            let makeTextDistinct = new Set(text);
            let distinctText = Array.from(makeTextDistinct);
            let allSearchResults = [];

            for (let i = 0; i < distinctText.length; i++) {
              let results = context.document.body.search(distinctText[i], { matchCase: true, matchWholeWord: true });
              results.load("text");

              // Map search term with its results.
              let correlatedResults = {
                searchTerm: distinctText[i],
                hits: results
              };

              allSearchResults.push(correlatedResults);
            }

            await context.sync();

            // Display counts.
            allSearchResults.forEach((result) => {
              let length = result.hits.items.length;

              console.log("Search term: " + result.searchTerm + " => Count: " + length);
            });
          });
          ```
      parameters:
        - id: searchText
          description: <span data-ttu-id="0b75d-250">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="0b75d-250">Required.</span></span> <span data-ttu-id="0b75d-251">Текст для поиска.</span><span class="sxs-lookup"><span data-stu-id="0b75d-251">The search text.</span></span> <span data-ttu-id="0b75d-252">Может быть не более 255 символов.</span><span class="sxs-lookup"><span data-stu-id="0b75d-252">Can be a maximum of 255 characters.</span></span>
          type:
            - string
        - id: searchOptions
          description: <span data-ttu-id="0b75d-253">Необязательно.</span><span class="sxs-lookup"><span data-stu-id="0b75d-253">Optional.</span></span> <span data-ttu-id="0b75d-254">Параметры поиска.</span><span class="sxs-lookup"><span data-stu-id="0b75d-254">Options for the search.</span></span>
          type:
            - |-
              Word.SearchOptions | {
                          ignorePunct?: boolean;
                          ignoreSpace?: boolean;
                          matchCase?: boolean;
                          matchPrefix?: boolean;
                          matchSuffix?: boolean;
                          matchWholeWord?: boolean;
                          matchWildcards?: boolean;
                      }
  - uid: word.Word.Body.select
    summary: |-
      <span data-ttu-id="0b75d-255">Выбирает содержимое и переходит к нему в пользовательском интерфейсе Word.</span><span class="sxs-lookup"><span data-stu-id="0b75d-255">Selects the body and navigates the Word UI to it.</span></span>

      <span data-ttu-id="0b75d-256">\[[Набор API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="0b75d-256">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: select(selectionMode)
    fullName: select(selectionMode)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'select(selectionMode?: Word.SelectionMode): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a><span data-ttu-id="0b75d-257">Примеры</span><span class="sxs-lookup"><span data-stu-id="0b75d-257">Examples</span></span>

          ```javascript
          // Run a batch operation against the Word object model.
          Word.run(function (context) {

              // Create a proxy object for the document body.
              var body = context.document.body;

              // Queue a commmand to select the document body. The Word UI will
              // move to the selected document body.
              body.select();

              // Synchronize the document state by executing the queued commands,
              // and return a promise to indicate task completion.
              return context.sync().then(function () {
                  console.log('Selected the document body.');
              });
          })
          .catch(function (error) {
              console.log('Error: ' + JSON.stringify(error));
              if (error instanceof OfficeExtension.Error) {
                  console.log('Debug info: ' + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: selectionMode
          description: '<span data-ttu-id="0b75d-258">Необязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="0b75d-258">Optional.</span></span> <span data-ttu-id="0b75d-259">Возможные режимы выбора: Select, Start и End.</span><span class="sxs-lookup"><span data-stu-id="0b75d-259">The selection mode can be ''Select'', ''Start'', or ''End''.</span></span> <span data-ttu-id="0b75d-260">Значение по умолчанию — Select.</span><span class="sxs-lookup"><span data-stu-id="0b75d-260">''Select'' is the default.</span></span>'
          type:
            - word.Word.SelectionMode
  - uid: word.Word.Body.select_1
    summary: |-
      <span data-ttu-id="0b75d-261">Выбирает содержимое и переходит к нему в пользовательском интерфейсе Word.</span><span class="sxs-lookup"><span data-stu-id="0b75d-261">Selects the body and navigates the Word UI to it.</span></span>

      <span data-ttu-id="0b75d-262">\[[Набор API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="0b75d-262">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: select(selectionModeString)
    fullName: select(selectionModeString)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'select(selectionModeString?: "Select" | "Start" | "End"): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: selectionModeString
          description: '<span data-ttu-id="0b75d-263">Необязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="0b75d-263">Optional.</span></span> <span data-ttu-id="0b75d-264">Возможные режимы выбора: Select, Start и End.</span><span class="sxs-lookup"><span data-stu-id="0b75d-264">The selection mode can be ''Select'', ''Start'', or ''End''.</span></span> <span data-ttu-id="0b75d-265">Значение по умолчанию — Select.</span><span class="sxs-lookup"><span data-stu-id="0b75d-265">''Select'' is the default.</span></span>'
          type:
            - '"Select" | "Start" | "End"'
  - uid: word.Word.Body.set
    summary: '<span data-ttu-id="0b75d-266">Задает одновременно несколько свойств объекта.</span><span class="sxs-lookup"><span data-stu-id="0b75d-266">Sets multiple properties of an object at the same time.</span></span> <span data-ttu-id="0b75d-267">Можно передать либо простой объект с соответствующими свойствами, либо другой объект API того же типа.</span><span class="sxs-lookup"><span data-stu-id="0b75d-267">You can pass either a plain object with the appropriate properties, or another API object of the same type.</span></span>'
    remarks: |-
      <span data-ttu-id="0b75d-268">Этот метод имеет следующую дополнительную подпись:</span><span class="sxs-lookup"><span data-stu-id="0b75d-268">This method has the following additional signature:</span></span>

      `set(properties: Word.Body): void`
    name: 'set(properties, options)'
    fullName: 'set(properties, options)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'set(properties: Interfaces.BodyUpdateData, options?: OfficeExtension.UpdateOptions): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: properties
          description: '<span data-ttu-id="0b75d-269">Объект JavaScript со свойствами, которые структурированы исоморфикалли к свойствам объекта, для которого вызывается метод.</span><span class="sxs-lookup"><span data-stu-id="0b75d-269">A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.</span></span>'
          type:
            - Interfaces.BodyUpdateData
        - id: options
          description: '<span data-ttu-id="0b75d-270">Предоставляет возможность подавлять ошибки, если объект Properties пытается задать любые свойства, предназначенные только для чтения.</span><span class="sxs-lookup"><span data-stu-id="0b75d-270">Provides an option to suppress errors if the properties object tries to set any read-only properties.</span></span>'
          type:
            - OfficeExtension.UpdateOptions
  - uid: word.Word.Body.set_1
    summary: '<span data-ttu-id="0b75d-271">Задает одновременно несколько свойств объекта на основе существующего загруженного объекта.</span><span class="sxs-lookup"><span data-stu-id="0b75d-271">Sets multiple properties on the object at the same time, based on an existing loaded object.</span></span>'
    name: set(properties)
    fullName: set(properties)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'set(properties: Word.Body): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: properties
          description: ''
          type:
            - word.Word.Body
  - uid: word.Word.Body.style
    summary: |-
      <span data-ttu-id="0b75d-p155">Возвращает или задает имя стиля для основного текста. Используйте это свойство для пользовательских стилей и локализованных имен стилей. Чтобы использовать встроенные стили, поддерживающие несколько языковых стандартов, применяйте свойство styleBuiltIn.</span><span class="sxs-lookup"><span data-stu-id="0b75d-p155">Gets or sets the style name for the body. Use this property for custom styles and localized style names. To use the built-in styles that are portable between locales, see the "styleBuiltIn" property.</span></span>

      <span data-ttu-id="0b75d-275">\[[Набор API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="0b75d-275">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: style
    fullName: style
    langs:
      - typeScript
    type: property
    syntax:
      content: 'style: string;'
      return:
        type:
          - string
  - uid: word.Word.Body.text
    summary: |-
      <span data-ttu-id="0b75d-276">Возвращает текст содержимого.</span><span class="sxs-lookup"><span data-stu-id="0b75d-276">Gets the text of the body.</span></span> <span data-ttu-id="0b75d-277">Для вставки текста используется метод insertText.</span><span class="sxs-lookup"><span data-stu-id="0b75d-277">Use the insertText method to insert text.</span></span> <span data-ttu-id="0b75d-278">Только для чтения.</span><span class="sxs-lookup"><span data-stu-id="0b75d-278">Read-only.</span></span>

      <span data-ttu-id="0b75d-279">\[[Набор API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="0b75d-279">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: text
    fullName: text
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly text: string;'
      return:
        type:
          - string
        description: |-


          #### <a name="examples"></a><span data-ttu-id="0b75d-280">Примеры</span><span class="sxs-lookup"><span data-stu-id="0b75d-280">Examples</span></span>

          ```javascript
          // Get the text property on the body object
          // Run a batch operation against the Word object model.
          Word.run(function (context) {

              // Create a proxy object for the document body.
              var body = context.document.body;

              // Queue a commmand to load the text in document body.
              context.load(body, 'text');

              // Synchronize the document state by executing the queued commands,
              // and return a promise to indicate task completion.
              return context.sync().then(function () {
                  console.log("Body contents: " + body.text);
              });
          })
          .catch(function (error) {
              console.log("Error: " + JSON.stringify(error));
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: word.Word.Body.toJSON
    summary: '<span data-ttu-id="0b75d-281">Переопределяет метод `toJSON()` JavaScript для предоставления более удобного вывода при передаче объекта API`JSON.stringify()`</span><span class="sxs-lookup"><span data-stu-id="0b75d-281">Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`</span></span><!-- --><span data-ttu-id="0b75d-282">.</span><span class="sxs-lookup"><span data-stu-id="0b75d-282"></span></span> <span data-ttu-id="0b75d-283">(`JSON.stringify`</span><span class="sxs-lookup"><span data-stu-id="0b75d-283"></span></span><!-- --><span data-ttu-id="0b75d-284">, в свою очередь, вызывает `toJSON` метод объекта, который передается ему.) В то время как исходный объект Word. Body является объектом API, `toJSON` метод возвращает простой объект JavaScript (тип`Word.Interfaces.BodyData`</span><span class="sxs-lookup"><span data-stu-id="0b75d-284">, in turn, calls the `toJSON` method of the object that is passed to it.) Whereas the original Word.Body object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.BodyData`</span></span><!-- --><span data-ttu-id="0b75d-285">), который содержит неполные копии загруженных дочерних свойств из исходного объекта.</span><span class="sxs-lookup"><span data-stu-id="0b75d-285">) that contains shallow copies of any loaded child properties from the original object.</span></span>'
    name: toJSON()
    fullName: toJSON()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON(): Word.Interfaces.BodyData;'
      return:
        type:
          - word.Word.Interfaces.BodyData
        description: ''
  - uid: word.Word.Body.track
    summary: '<span data-ttu-id="0b75d-286">Отслеживает объект для автоматической корректировки с учетом окружающих изменений в документе.</span><span class="sxs-lookup"><span data-stu-id="0b75d-286">Track the object for automatic adjustment based on surrounding changes in the document.</span></span> <span data-ttu-id="0b75d-287">Этот вызов является сокращением для context.trackedObjects.add(thisObject).</span><span class="sxs-lookup"><span data-stu-id="0b75d-287">This call is a shorthand for context.trackedObjects.add(thisObject).</span></span> <span data-ttu-id="0b75d-288">Если этот объект используется в вызовах .sync и вне последовательного выполнения пакета .run с возникновением ошибки InvalidObjectPath при установке свойства или вызове метода для объекта, необходимо было добавить объект в коллекцию отслеживаемых объектов при первоначальном создании объекта.</span><span class="sxs-lookup"><span data-stu-id="0b75d-288">If you are using this object across ".sync" calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you needed to have added the object to the tracked object collection when the object was first created.</span></span>'
    name: track()
    fullName: track()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'track(): Word.Body;'
      return:
        type:
          - word.Word.Body
        description: ''
  - uid: word.Word.Body.untrack
    summary: '<span data-ttu-id="0b75d-289">Освобождает память, связанную с этим объектом, если он ранее отслеживался.</span><span class="sxs-lookup"><span data-stu-id="0b75d-289">Release the memory associated with this object, if it has previously been tracked.</span></span> <span data-ttu-id="0b75d-290">Этот вызов является сокращением для context.trackedObjects.remove(thisObject).</span><span class="sxs-lookup"><span data-stu-id="0b75d-290">This call is shorthand for context.trackedObjects.remove(thisObject).</span></span> <span data-ttu-id="0b75d-291">Наличие большого количества отслеживаемых объектов замедляет ведущее приложение, поэтому не забывайте освобождать любые добавленные объекты после завершения их использования.</span><span class="sxs-lookup"><span data-stu-id="0b75d-291">Having many tracked objects slows down the host application, so please remember to free any objects you add, once you''re done using them.</span></span> <span data-ttu-id="0b75d-292">Перед фактическим освобождением памяти потребуется вызвать метод context.sync().</span><span class="sxs-lookup"><span data-stu-id="0b75d-292">You will need to call "context.sync()" before the memory release takes effect.</span></span>'
    name: untrack()
    fullName: untrack()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'untrack(): Word.Body;'
      return:
        type:
          - word.Word.Body
        description: ''