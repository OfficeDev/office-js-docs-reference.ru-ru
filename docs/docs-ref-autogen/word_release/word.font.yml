### YamlMime:UniversalReference
items:
  - uid: word_release.Word.Font
    summary: |-
      Представляет шрифт.

      \[[Набор API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: Word.Font
    fullName: Word.Font
    langs:
      - typeScript
    type: class
    extends:
      - office.OfficeExtension.ClientObject
    package: word_release
    children:
      - word_release.Word.Font.bold
      - word_release.Word.Font.color
      - word_release.Word.Font.context
      - word_release.Word.Font.doubleStrikeThrough
      - word_release.Word.Font.highlightColor
      - word_release.Word.Font.italic
      - word_release.Word.Font.load
      - word_release.Word.Font.load_1
      - word_release.Word.Font.load_2
      - word_release.Word.Font.name
      - word_release.Word.Font.set
      - word_release.Word.Font.set_1
      - word_release.Word.Font.size
      - word_release.Word.Font.strikeThrough
      - word_release.Word.Font.subscript
      - word_release.Word.Font.superscript
      - word_release.Word.Font.toJSON
      - word_release.Word.Font.track
      - word_release.Word.Font.underline
      - word_release.Word.Font.untrack
  - uid: word_release.Word.Font.bold
    summary: |-
      Возвращает или задает значение, указывающее, является ли шрифт полужирным. Задайте значение true, чтобы отформатировать шрифт как полужирный, в противном случае — задайте значение false.

      \[[Набор API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: bold
    fullName: bold
    langs:
      - typeScript
    type: property
    syntax:
      content: 'bold: boolean;'
      return:
        type:
          - boolean
  - uid: word_release.Word.Font.color
    summary: |-
      Возвращает или задает цвет для указанного шрифта. Вы можете указать значение в формате "\#RRGGBB" или имя цвета.

      \[[Набор API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: color
    fullName: color
    langs:
      - typeScript
    type: property
    syntax:
      content: 'color: string;'
      return:
        type:
          - string
  - uid: word_release.Word.Font.context
    summary: 'Контекст запроса, связанный с объектом. Это подсоединяет процесс надстройки к процессу ведущего приложения Office.'
    name: context
    fullName: context
    langs:
      - typeScript
    type: property
    syntax:
      content: 'context: RequestContext;'
      return:
        type:
          - RequestContext
  - uid: word_release.Word.Font.doubleStrikeThrough
    summary: |-
      Получает или задает значение, указывающее, имеет ли шрифт двойное зачеркивание. Задайте значение true, чтобы использовать двойное зачеркивание, в противном случае задайте значение false.

      \[[Набор API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: doubleStrikeThrough
    fullName: doubleStrikeThrough
    langs:
      - typeScript
    type: property
    syntax:
      content: 'doubleStrikeThrough: boolean;'
      return:
        type:
          - boolean
  - uid: word_release.Word.Font.highlightColor
    summary: |-
      Получает или задает цвет выделения. Чтобы задать его, используйте значение либо в формате "\#RRGGBB", либо в имени цвета. Чтобы удалить цвет выделения, задайте для него значение null. Возвращаемый цвет выделения может быть указан в формате\#"RRGGBB", пустой строке для смешанных цветов выделения или NULL без цвета выделения.

      **Note**: в Office на рабочем столе Windows доступны только цвета выделения по умолчанию. Это "желтый", "Травяный", "бирюзовый", "розовый", "голубой", "красный", "Даркблуе", "голубой", "зеленый", "Сиреневый", "Даркред", "", "серый", "Лигхтграй" и "Black" Когда надстройка работает в Office на рабочем столе Windows, любой другой цвет при применении к шрифту преобразуется в ближайший цвет.

      \[[Набор API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: highlightColor
    fullName: highlightColor
    langs:
      - typeScript
    type: property
    syntax:
      content: 'highlightColor: string;'
      return:
        type:
          - string
  - uid: word_release.Word.Font.italic
    summary: |-
      Возвращает или задает значение, указывающее, является ли шрифт курсивным. Задайте значение true, если шрифт является курсивом, в противном случае — задайте значение false.

      \[[Набор API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: italic
    fullName: italic
    langs:
      - typeScript
    type: property
    syntax:
      content: 'italic: boolean;'
      return:
        type:
          - boolean
  - uid: word_release.Word.Font.load
    summary: Добавляет в очередь команду для загрузки указанных свойств объекта. Перед чтением свойств необходимо вызвать метод context.sync().
    remarks: |-
      В дополнение к этой подписи этот метод имеет следующие подписи:

      `load(option?: string | string[]): Word.Font`-WHERE — это строка с разделителями-запятыми или массив строк, указывающий свойства для загрузки.

      `load(option?: { select?: string; expand?: string; }): Word.Font`-WHERE. Select — это строка с разделителями-запятыми, указывающая свойства для загрузки и параметры. Expand — это строка с разделителями-запятыми, указывающая свойства навигации для загрузки.

      `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Word.Font`— Доступно только для типов коллекций. Он аналогичен предыдущей подписи. Option. Top указывает максимальное количество элементов коллекции, которые можно включить в результат. Option. skip указывает количество элементов, которые будут пропущены и не включены в результат. Если указан параметр Option. Top, результирующий набор начнется после пропуска указанного числа элементов.

      #### <a name="examples"></a>Примеры

      ```javascript
      // Change the font name
      // Run a batch operation against the Word object model.
      Word.run(function (context) {

          // Create a range proxy object for the current selection.
          var selection = context.document.getSelection();

          // Queue a commmand to change the current selection's font name.
          selection.font.name = 'Arial';

          // Synchronize the document state by executing the queued commands,
          // and return a promise to indicate task completion.
          return context.sync().then(function () {
              console.log('The font name has changed.');
          });
      })
      .catch(function (error) {
          console.log('Error: ' + JSON.stringify(error));
          if (error instanceof OfficeExtension.Error) {
              console.log('Debug info: ' + JSON.stringify(error.debugInfo));
          }
      });
      ```
      ```javascript
      // Change the font color
      // Run a batch operation against the Word object model.
      Word.run(function (context) {

          // Create a range proxy object for the current selection.
          var selection = context.document.getSelection();

          // Queue a commmand to change the font color of the current selection.
          selection.font.color = 'blue';

          // Synchronize the document state by executing the queued commands,
          // and return a promise to indicate task completion.
          return context.sync().then(function () {
              console.log('The font color of the selection has been changed.');
          });
      })
      .catch(function (error) {
          console.log('Error: ' + JSON.stringify(error));
          if (error instanceof OfficeExtension.Error) {
              console.log('Debug info: ' + JSON.stringify(error.debugInfo));
          }
      });
      ```
      ```javascript
      // Change the font size
      // Run a batch operation against the Word object model.
      Word.run(function (context) {

          // Create a range proxy object for the current selection.
          var selection = context.document.getSelection();

          // Queue a commmand to change the current selection's font size.
          selection.font.size = 20;

          // Synchronize the document state by executing the queued commands,
          // and return a promise to indicate task completion.
          return context.sync().then(function () {
              console.log('The font size has changed.');
          });
      })
      .catch(function (error) {
          console.log('Error: ' + JSON.stringify(error));
          if (error instanceof OfficeExtension.Error) {
              console.log('Debug info: ' + JSON.stringify(error.debugInfo));
          }
      });
      ```
      ```javascript
      // Highlight selected text
      // Run a batch operation against the Word object model.
      Word.run(function (context) {

          // Create a range proxy object for the current selection.
          var selection = context.document.getSelection();

          // Queue a commmand to highlight the current selection.
          selection.font.highlightColor = '#FFFF00'; // Yellow

          // Synchronize the document state by executing the queued commands,
          // and return a promise to indicate task completion.
          return context.sync().then(function () {
              console.log('The selection has been highlighted.');
          });
      })
      .catch(function (error) {
          console.log('Error: ' + JSON.stringify(error));
          if (error instanceof OfficeExtension.Error) {
              console.log('Debug info: ' + JSON.stringify(error.debugInfo));
          }
      });
      ```
      ```javascript
      // Bold format text
      // Run a batch operation against the Word object model.
      Word.run(function (context) {

          // Create a range proxy object for the current selection.
          var selection = context.document.getSelection();

          // Queue a commmand to make the current selection bold.
          selection.font.bold = true;

          // Synchronize the document state by executing the queued commands,
          // and return a promise to indicate task completion.
          return context.sync().then(function () {
              console.log('The selection is now bold.');
          });
      })
      .catch(function (error) {
          console.log('Error: ' + JSON.stringify(error));
          if (error instanceof OfficeExtension.Error) {
              console.log('Debug info: ' + JSON.stringify(error.debugInfo));
          }
      });
      ```
      ```javascript
      // Underline format text
      // Run a batch operation against the Word object model.
      Word.run(function (context) {

          // Create a range proxy object for the current selection.
          var selection = context.document.getSelection();

          // Queue a commmand to underline the current selection.
          selection.font.underline = Word.UnderlineType.single;

          // Synchronize the document state by executing the queued commands,
          // and return a promise to indicate task completion.
          return context.sync().then(function () {
              console.log('The selection now has an underline style.');
          });
      })
      .catch(function (error) {
          console.log('Error: ' + JSON.stringify(error));
          if (error instanceof OfficeExtension.Error) {
              console.log('Debug info: ' + JSON.stringify(error.debugInfo));
          }
      });
      ```
      ```javascript
      // Strike format text
      // Run a batch operation against the Word object model.
      Word.run(function (context) {

          // Create a range proxy object for the current selection.
          var selection = context.document.getSelection();

          // Queue a commmand to strikethrough the font of the current selection.
          selection.font.strikeThrough = true;

          // Synchronize the document state by executing the queued commands,
          // and return a promise to indicate task completion.
          return context.sync().then(function () {
              console.log('The selection now has a strikethrough.');
          });
      })
      .catch(function (error) {
          console.log('Error: ' + JSON.stringify(error));
          if (error instanceof OfficeExtension.Error) {
              console.log('Debug info: ' + JSON.stringify(error.debugInfo));
          }
      });
      ```
    name: load(option)
    fullName: load(option)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(option?: Word.Interfaces.FontLoadOptions): Word.Font;'
      return:
        type:
          - word.Word.Font
        description: ''
      parameters:
        - id: option
          description: ''
          type:
            - word.Word.Interfaces.FontLoadOptions
  - uid: word_release.Word.Font.load_1
    summary: Добавляет в очередь команду для загрузки указанных свойств объекта. Перед чтением свойств `context.sync()` необходимо вызвать метод.
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): Word.Font;'
      return:
        type:
          - word.Word.Font
        description: ''
      parameters:
        - id: propertyNames
          description: 'Строка, разделенная запятыми, или массив строк, указывающий свойства для загрузки.'
          type:
            - 'string | string[]'
  - uid: word_release.Word.Font.load_2
    summary: Добавляет в очередь команду для загрузки указанных свойств объекта. Перед чтением свойств `context.sync()` необходимо вызвать метод.
    name: load(propertyNamesAndPaths)
    fullName: load(propertyNamesAndPaths)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNamesAndPaths?: { select?: string; expand?: string; }): Word.Font;'
      return:
        type:
          - word.Word.Font
        description: ''
      parameters:
        - id: propertyNamesAndPaths
          description: 'Где Пропертинамесандпасс. Select — это строка с разделителями-запятыми, задающая свойства для загрузки, и Пропертинамесандпасс. Expand — это строка с разделителями-запятыми, указывающая свойства навигации для загрузки.'
          type:
            - '{ select?: string; expand?: string; }'
  - uid: word_release.Word.Font.name
    summary: |-
      Получает или задает значение, представляющее имя шрифта.

      \[[Набор API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: name
    fullName: name
    langs:
      - typeScript
    type: property
    syntax:
      content: 'name: string;'
      return:
        type:
          - string
  - uid: word_release.Word.Font.set
    summary: 'Задает одновременно несколько свойств объекта. Можно передать либо простой объект с соответствующими свойствами, либо другой объект API того же типа.'
    remarks: |-
      Этот метод имеет следующую дополнительную подпись:

      `set(properties: Word.Font): void`
    name: 'set(properties, options)'
    fullName: 'set(properties, options)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'set(properties: Interfaces.FontUpdateData, options?: OfficeExtension.UpdateOptions): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: properties
          description: 'Объект JavaScript со свойствами, которые структурированы исоморфикалли к свойствам объекта, для которого вызывается метод.'
          type:
            - Interfaces.FontUpdateData
        - id: options
          description: 'Предоставляет возможность подавлять ошибки, если объект Properties пытается задать любые свойства, предназначенные только для чтения.'
          type:
            - office.OfficeExtension.UpdateOptions
  - uid: word_release.Word.Font.set_1
    summary: Задает одновременно несколько свойств объекта на основе существующего загруженного объекта.
    name: set(properties)
    fullName: set(properties)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'set(properties: Word.Font): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: properties
          description: ''
          type:
            - word.Word.Font
  - uid: word_release.Word.Font.size
    summary: |-
      Получает или задает значение, представляющее размер шрифта в пунктах.

      \[[Набор API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: size
    fullName: size
    langs:
      - typeScript
    type: property
    syntax:
      content: 'size: number;'
      return:
        type:
          - number
  - uid: word_release.Word.Font.strikeThrough
    summary: |-
      Получает или задает значение, указывающее, имеет ли шрифт зачеркивание. Задайте значение true, если зачеркивание используется, в противном случае — задайте значение false.

      \[[Набор API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: strikeThrough
    fullName: strikeThrough
    langs:
      - typeScript
    type: property
    syntax:
      content: 'strikeThrough: boolean;'
      return:
        type:
          - boolean
  - uid: word_release.Word.Font.subscript
    summary: |-
      Возвращает или задает значение, указывающее, является ли шрифт подстрочным. Задайте значение true, если шрифт является подстрочным, в противном случае — задайте значение false.

      \[[Набор API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: subscript
    fullName: subscript
    langs:
      - typeScript
    type: property
    syntax:
      content: 'subscript: boolean;'
      return:
        type:
          - boolean
  - uid: word_release.Word.Font.superscript
    summary: |-
      Возвращает или задает значение, указывающее, является ли шрифт надстрочным. Задайте значение true, если шрифт является надстрочным, в противном случае — задайте значение false.

      \[[Набор API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: superscript
    fullName: superscript
    langs:
      - typeScript
    type: property
    syntax:
      content: 'superscript: boolean;'
      return:
        type:
          - boolean
  - uid: word_release.Word.Font.toJSON
    summary: 'Переопределяет метод `toJSON()` JavaScript для предоставления более удобного вывода при передаче объекта API`JSON.stringify()`<!-- -->. (`JSON.stringify`<!-- -->, в свою очередь, вызывает `toJSON` метод объекта, который передается ему.) В то время как исходный объект Word. Font — это объект API, `toJSON` метод возвращает простой объект JavaScript (тип`Word.Interfaces.FontData`<!-- -->), который содержит неполные копии загруженных дочерних свойств из исходного объекта.'
    name: toJSON()
    fullName: toJSON()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON(): Word.Interfaces.FontData;'
      return:
        type:
          - word.Word.Interfaces.FontData
        description: ''
  - uid: word_release.Word.Font.track
    summary: 'Отслеживает объект для автоматической корректировки с учетом окружающих изменений в документе. Этот вызов является сокращением для context.trackedObjects.add(thisObject). Если этот объект используется в вызовах .sync и вне последовательного выполнения пакета .run с возникновением ошибки InvalidObjectPath при установке свойства или вызове метода для объекта, необходимо было добавить объект в коллекцию отслеживаемых объектов при первоначальном создании объекта.'
    name: track()
    fullName: track()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'track(): Word.Font;'
      return:
        type:
          - word.Word.Font
        description: ''
  - uid: word_release.Word.Font.underline
    summary: |-
      Возвращает или задает значение, указывающее тип подчеркивания шрифта. "None", если шрифт не является подчеркиванием.

      \[[Набор API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: underline
    fullName: underline
    langs:
      - typeScript
    type: property
    syntax:
      content: 'underline: Word.UnderlineType | "Mixed" | "None" | "Hidden" | "DotLine" | "Single" | "Word" | "Double" | "Thick" | "Dotted" | "DottedHeavy" | "DashLine" | "DashLineHeavy" | "DashLineLong" | "DashLineLongHeavy" | "DotDashLine" | "DotDashLineHeavy" | "TwoDotDashLine" | "TwoDotDashLineHeavy" | "Wave" | "WaveHeavy" | "WaveDouble";'
      return:
        type:
          - Word.UnderlineType | "Mixed" | "None" | "Hidden" | "DotLine" | "Single" | "Word" | "Double" | "Thick" | "Dotted" | "DottedHeavy" | "DashLine" | "DashLineHeavy" | "DashLineLong" | "DashLineLongHeavy" | "DotDashLine" | "DotDashLineHeavy" | "TwoDotDashLine" | "TwoDotDashLineHeavy" | "Wave" | "WaveHeavy" | "WaveDouble"
  - uid: word_release.Word.Font.untrack
    summary: 'Освобождает память, связанную с этим объектом, если он ранее отслеживался. Этот вызов является сокращением для context.trackedObjects.remove(thisObject). Наличие большого количества отслеживаемых объектов замедляет ведущее приложение, поэтому не забывайте освобождать любые добавленные объекты после завершения их использования. Перед фактическим освобождением памяти потребуется вызвать метод context.sync().'
    name: untrack()
    fullName: untrack()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'untrack(): Word.Font;'
      return:
        type:
          - word.Word.Font
        description: ''