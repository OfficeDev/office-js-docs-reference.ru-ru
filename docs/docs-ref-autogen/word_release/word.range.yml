### YamlMime:UniversalReference
items:
  - uid: word_release.Word.Range
    summary: |-
      Представляет непрерывную область в документе.

      \[[Набор API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: Word.Range
    fullName: Word.Range
    langs:
      - typeScript
    type: class
    extends:
      - office.OfficeExtension.ClientObject
    package: word_release
    children:
      - word_release.Word.Range.clear
      - word_release.Word.Range.compareLocationWith
      - word_release.Word.Range.contentControls
      - word_release.Word.Range.context
      - word_release.Word.Range.delete
      - word_release.Word.Range.expandTo
      - word_release.Word.Range.expandToOrNullObject
      - word_release.Word.Range.font
      - word_release.Word.Range.getHtml
      - word_release.Word.Range.getHyperlinkRanges
      - word_release.Word.Range.getNextTextRange
      - word_release.Word.Range.getNextTextRangeOrNullObject
      - word_release.Word.Range.getOoxml
      - word_release.Word.Range.getRange
      - word_release.Word.Range.getRange_1
      - word_release.Word.Range.getTextRanges
      - word_release.Word.Range.hyperlink
      - word_release.Word.Range.inlinePictures
      - word_release.Word.Range.insertBreak
      - word_release.Word.Range.insertBreak_1
      - word_release.Word.Range.insertContentControl
      - word_release.Word.Range.insertFileFromBase64
      - word_release.Word.Range.insertFileFromBase64_1
      - word_release.Word.Range.insertHtml
      - word_release.Word.Range.insertHtml_1
      - word_release.Word.Range.insertInlinePictureFromBase64
      - word_release.Word.Range.insertInlinePictureFromBase64_1
      - word_release.Word.Range.insertOoxml
      - word_release.Word.Range.insertOoxml_1
      - word_release.Word.Range.insertParagraph
      - word_release.Word.Range.insertParagraph_1
      - word_release.Word.Range.insertTable
      - word_release.Word.Range.insertTable_1
      - word_release.Word.Range.insertText
      - word_release.Word.Range.insertText_1
      - word_release.Word.Range.intersectWith
      - word_release.Word.Range.intersectWithOrNullObject
      - word_release.Word.Range.isEmpty
      - word_release.Word.Range.lists
      - word_release.Word.Range.load
      - word_release.Word.Range.load_1
      - word_release.Word.Range.load_2
      - word_release.Word.Range.paragraphs
      - word_release.Word.Range.parentBody
      - word_release.Word.Range.parentContentControl
      - word_release.Word.Range.parentContentControlOrNullObject
      - word_release.Word.Range.parentTable
      - word_release.Word.Range.parentTableCell
      - word_release.Word.Range.parentTableCellOrNullObject
      - word_release.Word.Range.parentTableOrNullObject
      - word_release.Word.Range.search
      - word_release.Word.Range.select
      - word_release.Word.Range.select_1
      - word_release.Word.Range.set
      - word_release.Word.Range.set_1
      - word_release.Word.Range.split
      - word_release.Word.Range.style
      - word_release.Word.Range.styleBuiltIn
      - word_release.Word.Range.tables
      - word_release.Word.Range.text
      - word_release.Word.Range.toJSON
      - word_release.Word.Range.track
      - word_release.Word.Range.untrack
  - uid: word_release.Word.Range.clear
    summary: |-
      Очищает содержимое объекта диапазона. Пользователь может отменить операцию для очищенного содержимого.

      \[[Набор API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: clear()
    fullName: clear()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'clear(): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a>Примеры

          ```javascript
          // Run a batch operation against the Word object model.
          Word.run(function (context) {

              // Queue a command to get the current selection and then
              // create a proxy range object with the results.
              var range = context.document.getSelection();

              // Queue a commmand to clear the contents of the proxy range object.
              range.clear();

              // Synchronize the document state by executing the queued commands,
              // and return a promise to indicate task completion.
              return context.sync().then(function () {
                  console.log('Cleared the selection (range object)');
              });
          })
          .catch(function (error) {
              console.log('Error: ' + JSON.stringify(error));
              if (error instanceof OfficeExtension.Error) {
                  console.log('Debug info: ' + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: word_release.Word.Range.compareLocationWith
    summary: |-
      Сравнивает расположение данного диапазона с расположением другого диапазона.

      \[[Набор API: WordApi 1,3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: compareLocationWith(range)
    fullName: compareLocationWith(range)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'compareLocationWith(range: Word.Range): OfficeExtension.ClientResult<Word.LocationRelation>;'
      return:
        type:
          - OfficeExtension.ClientResult<Word.LocationRelation>
        description: ''
      parameters:
        - id: range
          description: 'Обязательно. Диапазон, сравниваемый с этим диапазоном.'
          type:
            - Word.Range
  - uid: word_release.Word.Range.contentControls
    summary: |-
      Получает коллекцию объектов элементов управления содержимым в диапазоне. Только для чтения.

      \[[Набор API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: contentControls
    fullName: contentControls
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly contentControls: Word.ContentControlCollection;'
      return:
        type:
          - word.Word.ContentControlCollection
  - uid: word_release.Word.Range.context
    summary: 'Контекст запроса, связанный с объектом. Это подсоединяет процесс надстройки к процессу ведущего приложения Office.'
    name: context
    fullName: context
    langs:
      - typeScript
    type: property
    syntax:
      content: 'context: RequestContext;'
      return:
        type:
          - RequestContext
  - uid: word_release.Word.Range.delete
    summary: |-
      Удаляет диапазон и его содержимое из документа.

      \[[Набор API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: delete()
    fullName: delete()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'delete(): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a>Примеры

          ```javascript
          // Run a batch operation against the Word object model.
          Word.run(function (context) {

              // Queue a command to get the current selection and then
              // create a proxy range object with the results.
              var range = context.document.getSelection();

              // Queue a commmand to delete the range object.
              range.delete();

              // Synchronize the document state by executing the queued commands,
              // and return a promise to indicate task completion.
              return context.sync().then(function () {
                  console.log('Deleted the selection (range object)');
              });
          })
          .catch(function (error) {
              console.log('Error: ' + JSON.stringify(error));
              if (error instanceof OfficeExtension.Error) {
                  console.log('Debug info: ' + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: word_release.Word.Range.expandTo
    summary: |-
      Возвращает новый диапазон, который простирается в том или ином направлении от данного диапазона и перекрывает другой диапазон. Данный диапазон не меняется. Вызывается, если два диапазона не имеют объединения.

      \[[Набор API: WordApi 1,3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: expandTo(range)
    fullName: expandTo(range)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'expandTo(range: Word.Range): Word.Range;'
      return:
        type:
          - Word.Range
        description: ''
      parameters:
        - id: range
          description: Обязательно. Другой диапазон.
          type:
            - Word.Range
  - uid: word_release.Word.Range.expandToOrNullObject
    summary: |-
      Возвращает новый диапазон, который простирается в том или ином направлении от данного диапазона и перекрывает другой диапазон. Данный диапазон не меняется. Возвращает нулевой объект, если два диапазона не имеют объединения.

      \[[Набор API: WordApi 1,3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: expandToOrNullObject(range)
    fullName: expandToOrNullObject(range)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'expandToOrNullObject(range: Word.Range): Word.Range;'
      return:
        type:
          - Word.Range
        description: ''
      parameters:
        - id: range
          description: Обязательно. Другой диапазон.
          type:
            - Word.Range
  - uid: word_release.Word.Range.font
    summary: |-
      Возвращает формат текста диапазона. Используйте это свойство, чтобы получать и задавать имея, размер, цвет и другие свойства шрифта. Только для чтения.

      \[[Набор API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: font
    fullName: font
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly font: Word.Font;'
      return:
        type:
          - word.Word.Font
  - uid: word_release.Word.Range.getHtml
    summary: |-
      Возвращает HTML-представление объекта Range. При отображении на веб-странице или в средстве просмотра HTML форматирование будет близким, но не точным, соответствующим для форматирования документа. Этот метод не возвращает точно такой же HTML-код для одного и того же документа на различных платформах (Windows, Mac, Word Online и т. д.). Если вам нужна точная точность или согласованность на различных платформах `Range.getOoxml()` , используйте и преобразуйте возвращенный XML в HTML.

      \[[Набор API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: getHtml()
    fullName: getHtml()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getHtml(): OfficeExtension.ClientResult<string>;'
      return:
        type:
          - OfficeExtension.ClientResult<string>
        description: |-


          #### <a name="examples"></a>Примеры

          ```javascript
          // Run a batch operation against the Word object model.
          Word.run(function (context) {

              // Queue a command to get the current selection and then
              // create a proxy range object with the results.
              var range = context.document.getSelection();

              // Queue a commmand to get the HTML of the current selection.
              var html = range.getHtml();

              // Synchronize the document state by executing the queued commands,
              // and return a promise to indicate task completion.
              return context.sync().then(function () {
                  console.log('The HTML read from the document was: ' + html.value);
              });
          })
          .catch(function (error) {
              console.log('Error: ' + JSON.stringify(error));
              if (error instanceof OfficeExtension.Error) {
                  console.log('Debug info: ' + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: word_release.Word.Range.getHyperlinkRanges
    summary: |-
      Возвращает дочерние диапазоны гиперссылок в данном диапазоне.

      \[[Набор API: WordApi 1,3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: getHyperlinkRanges()
    fullName: getHyperlinkRanges()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getHyperlinkRanges(): Word.RangeCollection;'
      return:
        type:
          - Word.RangeCollection
        description: ''
  - uid: word_release.Word.Range.getNextTextRange
    summary: |-
      Получает следующий диапазон текста с использованием знаков препинания и/или других конечных меток. Вызывается, если этот диапазон текста является последним.

      \[[Набор API: WordApi 1,3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: 'getNextTextRange(endingMarks, trimSpacing)'
    fullName: 'getNextTextRange(endingMarks, trimSpacing)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getNextTextRange(endingMarks: string[], trimSpacing?: boolean): Word.Range;'
      return:
        type:
          - Word.Range
        description: ''
      parameters:
        - id: endingMarks
          description: Обязательно. Знаки пунктуации и/или другие закрывающие метки в виде массива строк.
          type:
            - 'string[]'
        - id: trimSpacing
          description: 'Необязательно. Указывает, следует ли обрезать символы интервалов (пробелы, знаки табуляции, разрывы столбцов и конечные знаки абзаца) из начала и конца возвращаемого диапазона. Значение по умолчанию — false, что указывает на то, что в начале и конце диапазона содержатся символы пробелов.'
          type:
            - boolean
  - uid: word_release.Word.Range.getNextTextRangeOrNullObject
    summary: |-
      Получает следующий диапазон текста с использованием знаков препинания и/или других конечных меток. Возвращает нулевой объект, если этот диапазон текста является последним.

      \[[Набор API: WordApi 1,3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: 'getNextTextRangeOrNullObject(endingMarks, trimSpacing)'
    fullName: 'getNextTextRangeOrNullObject(endingMarks, trimSpacing)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getNextTextRangeOrNullObject(endingMarks: string[], trimSpacing?: boolean): Word.Range;'
      return:
        type:
          - Word.Range
        description: ''
      parameters:
        - id: endingMarks
          description: Обязательно. Знаки пунктуации и/или другие закрывающие метки в виде массива строк.
          type:
            - 'string[]'
        - id: trimSpacing
          description: 'Необязательно. Указывает, следует ли обрезать символы интервалов (пробелы, знаки табуляции, разрывы столбцов и конечные знаки абзаца) из начала и конца возвращаемого диапазона. Значение по умолчанию — false, что указывает на то, что в начале и конце диапазона содержатся символы пробелов.'
          type:
            - boolean
  - uid: word_release.Word.Range.getOoxml
    summary: |-
      Возвращает OOXML-представление объекта диапазона.

      \[[Набор API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: getOoxml()
    fullName: getOoxml()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getOoxml(): OfficeExtension.ClientResult<string>;'
      return:
        type:
          - OfficeExtension.ClientResult<string>
        description: |-


          #### <a name="examples"></a>Примеры

          ```javascript
          // Run a batch operation against the Word object model.
          Word.run(function (context) {

              // Queue a command to get the current selection and then
              // create a proxy range object with the results.
              var range = context.document.getSelection();

              // Queue a commmand to get the OOXML of the current selection.
              var ooxml = range.getOoxml();

              // Synchronize the document state by executing the queued commands,
              // and return a promise to indicate task completion.
              return context.sync().then(function () {
                  console.log('The OOXML read from the document was:  ' + ooxml.value);
              });
          })
          .catch(function (error) {
              console.log('Error: ' + JSON.stringify(error));
              if (error instanceof OfficeExtension.Error) {
                  console.log('Debug info: ' + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: word_release.Word.Range.getRange
    summary: |-
      Клонирует диапазон либо получает его начальную или конечную точку в виде нового диапазона.

      \[[Набор API: WordApi 1,3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: getRange(rangeLocation)
    fullName: getRange(rangeLocation)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getRange(rangeLocation?: Word.RangeLocation): Word.Range;'
      return:
        type:
          - Word.Range
        description: ''
      parameters:
        - id: rangeLocation
          description: 'Необязательно. Допустимые значения: "целое", "начало", "конец", "после" или "содержимое".'
          type:
            - word.Word.RangeLocation
  - uid: word_release.Word.Range.getRange_1
    summary: |-
      Клонирует диапазон либо получает его начальную или конечную точку в виде нового диапазона.

      \[[Набор API: WordApi 1,3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: getRange(rangeLocationString)
    fullName: getRange(rangeLocationString)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getRange(rangeLocationString?: "Whole" | "Start" | "End" | "Before" | "After" | "Content"): Word.Range;'
      return:
        type:
          - Word.Range
        description: ''
      parameters:
        - id: rangeLocationString
          description: 'Необязательно. Допустимые значения: "целое", "начало", "конец", "после" или "содержимое".'
          type:
            - '"Whole" | "Start" | "End" | "Before" | "After" | "Content"'
  - uid: word_release.Word.Range.getTextRanges
    summary: |-
      Возвращает дочерние диапазоны текста в диапазоне с помощью знаков препинания и/или других конечных меток.

      \[[Набор API: WordApi 1,3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: 'getTextRanges(endingMarks, trimSpacing)'
    fullName: 'getTextRanges(endingMarks, trimSpacing)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getTextRanges(endingMarks: string[], trimSpacing?: boolean): Word.RangeCollection;'
      return:
        type:
          - Word.RangeCollection
        description: |-


          #### <a name="examples"></a>Примеры

          ```typescript
          await Word.run(async (context) => {
            // Gets the complete sentence (as range) associated with the insertion point.
            let sentences = context.document
              .getSelection()
              .getTextRanges(["."] /* Using the "." as delimiter */, false /*means without trimming spaces*/);
            sentences.load("$none");
            await context.sync();

            // Expands the range to the end of the paragraph to get all the complete sentences.
            let sentencesToTheEndOfParagraph = sentences.items[0]
              .getRange()
              .expandTo(
                context.document
                  .getSelection()
                  .paragraphs.getFirst()
                  .getRange("End")
              )
              .getTextRanges(["."], false /* Don't trim spaces*/);
            sentencesToTheEndOfParagraph.load("text");
            await context.sync();

            for (let i = 0; i < sentencesToTheEndOfParagraph.items.length; i++) {
              console.log(sentencesToTheEndOfParagraph.items[i].text);
            }
          });
          ```
      parameters:
        - id: endingMarks
          description: Обязательно. Знаки пунктуации и/или другие закрывающие метки в виде массива строк.
          type:
            - 'string[]'
        - id: trimSpacing
          description: 'Необязательно. Указывает, следует ли обрезать символы интервалов (пробелы, знаки табуляции, разрывы столбцов и конечные знаки абзаца) от начала и конца диапазонов, возвращаемых в коллекции Range. Значение по умолчанию — false, которое указывает, что пробелы в начале и конце диапазонов включаются в коллекцию Range.'
          type:
            - boolean
  - uid: word_release.Word.Range.hyperlink
    summary: |-
      Возвращает первую гиперссылку в диапазоне или задает для него гиперссылку. При добавлении в диапазон новой гиперссылки из него удаляются все имеющиеся гиперссылки. Используйте '\#', чтобы отделить адрес от части необязательного расположения.

      \[[Набор API: WordApi 1,3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: hyperlink
    fullName: hyperlink
    langs:
      - typeScript
    type: property
    syntax:
      content: 'hyperlink: string;'
      return:
        type:
          - string
  - uid: word_release.Word.Range.inlinePictures
    summary: |-
      Возвращает коллекцию объектов встроенных рисунков в диапазоне. Только для чтения.

      \[[Набор API: WordApi 1,2](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: inlinePictures
    fullName: inlinePictures
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly inlinePictures: Word.InlinePictureCollection;'
      return:
        type:
          - word.Word.InlinePictureCollection
  - uid: word_release.Word.Range.insertBreak
    summary: |-
      Вставляет разрыв в указанном расположении в основном документе. Возможные значения insertLocation: Before и After.

      \[[Набор API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: 'insertBreak(breakType, insertLocation)'
    fullName: 'insertBreak(breakType, insertLocation)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertBreak(breakType: Word.BreakType, insertLocation: Word.InsertLocation): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: breakType
          description: 'Обязательно. Тип разрыва, который требуется добавить.'
          type:
            - word.Word.BreakType
        - id: insertLocation
          description: 'Обязательный параметр. Возможные значения: Before и After.'
          type:
            - Word.InsertLocation
  - uid: word_release.Word.Range.insertBreak_1
    summary: |-
      Вставляет разрыв в указанном расположении в основном документе. Возможные значения insertLocation: Before и After.

      \[[Набор API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: 'insertBreak(breakTypeString, insertLocation)'
    fullName: 'insertBreak(breakTypeString, insertLocation)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertBreak(breakTypeString: "Page" | "Next" | "SectionNext" | "SectionContinuous" | "SectionEven" | "SectionOdd" | "Line", insertLocation: "Before" | "After" | "Start" | "End" | "Replace"): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a>Примеры

          ```javascript
          // Run a batch operation against the Word object model.
          Word.run(function (context) {

              // Queue a command to get the current selection and then
              // create a proxy range object with the results.
              var range = context.document.getSelection();

              // Queue a commmand to insert a page break after the selected text.
              range.insertBreak('page', 'After');

              // Synchronize the document state by executing the queued commands,
              // and return a promise to indicate task completion.
              return context.sync().then(function () {
                  console.log('Inserted a page break after the selected text.');
              });
          })
          .catch(function (error) {
              console.log('Error: ' + JSON.stringify(error));
              if (error instanceof OfficeExtension.Error) {
                  console.log('Debug info: ' + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: breakTypeString
          description: 'Обязательно. Тип разрыва, который требуется добавить.'
          type:
            - '"Page" | "Next" | "SectionNext" | "SectionContinuous" | "SectionEven" | "SectionOdd" | "Line"'
        - id: insertLocation
          description: 'Обязательный параметр. Возможные значения: Before и After.'
          type:
            - '"Before" | "After" | "Start" | "End" | "Replace"'
  - uid: word_release.Word.Range.insertContentControl
    summary: |-
      Включает объект диапазона в элемент управления содержимым форматированного текста.

      \[[Набор API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: insertContentControl()
    fullName: insertContentControl()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertContentControl(): Word.ContentControl;'
      return:
        type:
          - word.Word.ContentControl
        description: |-


          #### <a name="examples"></a>Примеры

          ```javascript
          // Run a batch operation against the Word object model.
          Word.run(function (context) {

              // Queue a command to get the current selection and then
              // create a proxy range object with the results.
              var range = context.document.getSelection();

              // Queue a commmand to insert a content control around the selected text,
              // and create a proxy content control object. We'll update the properties
              // on the content control.
              var myContentControl = range.insertContentControl();
              myContentControl.tag = "Customer-Address";
              myContentControl.title = "Enter Customer Address Here:";
              myContentControl.style = "Normal";
              myContentControl.insertText("One Microsoft Way, Redmond, WA 98052", 'Replace');
              myContentControl.cannotEdit = true;

              // Synchronize the document state by executing the queued commands,
              // and return a promise to indicate task completion.
              return context.sync().then(function () {
                  console.log('Wrapped a content control around the selected text.');
              });
          })
          .catch(function (error) {
              console.log('Error: ' + JSON.stringify(error));
              if (error instanceof OfficeExtension.Error) {
                  console.log('Debug info: ' + JSON.stringify(error.debugInfo));
              }
          });
          ```
          ```typescript
          await Word.run(async (context) => {
              let results = context.document.body.search("Contractor");
              results.load("font/bold");

              // Check to make sure these content controls haven't been added yet.
              let customerContentControls = context.document.contentControls.getByTag("customer");
              customerContentControls.load("text");
              await context.sync();

            if (customerContentControls.items.length === 0) {
              for (var i = 0; i < results.items.length; i++) { 
                  results.items[i].font.bold = true;
                  var cc = results.items[i].insertContentControl();
                  cc.tag = "customer";  // This value is used in the next step of this sample.
                  cc.title = "Customer Name " + i;
              }
            }
              await context.sync();
          });
          ```
  - uid: word_release.Word.Range.insertFileFromBase64
    summary: |-
      Вставляет документ в указанном расположении. Значение insertLocation может быть "Replace", "Start", "End", "Before" или "After".

      \[[Набор API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: 'insertFileFromBase64(base64File, insertLocation)'
    fullName: 'insertFileFromBase64(base64File, insertLocation)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertFileFromBase64(base64File: string, insertLocation: Word.InsertLocation): Word.Range;'
      return:
        type:
          - Word.Range
        description: |-


          #### <a name="examples"></a>Примеры

          ```javascript
          // Run a batch operation against the Word object model.
          Word.run(function (context) {

              // Queue a command to get the current selection and then
              // create a proxy range object with the results.
              var range = context.document.getSelection();

              // Queue a commmand to insert base64 encoded .docx at the beginning of the range.
              // You'll need to implement getBase64() to make this work.
              range.insertFileFromBase64(getBase64(), Word.InsertLocation.start);

              // Synchronize the document state by executing the queued commands,
              // and return a promise to indicate task completion.
              return context.sync().then(function () {
                  console.log('Added base64 encoded text to the beginning of the range.');
              });
          })
          .catch(function (error) {
              console.log('Error: ' + JSON.stringify(error));
              if (error instanceof OfficeExtension.Error) {
                  console.log('Debug info: ' + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: base64File
          description: Обязательно. Содержимое docx файлов в кодировке Base64.
          type:
            - string
        - id: insertLocation
          description: 'Обязательно. Возможные значения: "замена", "начало", "конец", "до" или "после".'
          type:
            - Word.InsertLocation
  - uid: word_release.Word.Range.insertFileFromBase64_1
    summary: |-
      Вставляет документ в указанном расположении. Значение insertLocation может быть "Replace", "Start", "End", "Before" или "After".

      \[[Набор API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: 'insertFileFromBase64(base64File, insertLocationString)'
    fullName: 'insertFileFromBase64(base64File, insertLocationString)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertFileFromBase64(base64File: string, insertLocationString: "Before" | "After" | "Start" | "End" | "Replace"): Word.Range;'
      return:
        type:
          - Word.Range
        description: ''
      parameters:
        - id: base64File
          description: Обязательно. Содержимое docx файлов в кодировке Base64.
          type:
            - string
        - id: insertLocationString
          description: 'Обязательно. Возможные значения: "замена", "начало", "конец", "до" или "после".'
          type:
            - '"Before" | "After" | "Start" | "End" | "Replace"'
  - uid: word_release.Word.Range.insertHtml
    summary: |-
      Вставляет HTML-код в указанном расположении. Значение insertLocation может быть "Replace", "Start", "End", "Before" или "After".

      \[[Набор API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: 'insertHtml(html, insertLocation)'
    fullName: 'insertHtml(html, insertLocation)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertHtml(html: string, insertLocation: Word.InsertLocation): Word.Range;'
      return:
        type:
          - Word.Range
        description: |-


          #### <a name="examples"></a>Примеры

          ```javascript
          // Run a batch operation against the Word object model.
          Word.run(function (context) {

              // Queue a command to get the current selection and then
              // create a proxy range object with the results.
              var range = context.document.getSelection();

              // Queue a commmand to insert HTML in to the beginning of the range.
              range.insertHtml('<strong>This is text inserted with range.insertHtml()</strong>', Word.InsertLocation.start);

              // Synchronize the document state by executing the queued commands,
              // and return a promise to indicate task completion.
              return context.sync().then(function () {
                  console.log('HTML added to the beginning of the range.');
              });
          })
          .catch(function (error) {
              console.log('Error: ' + JSON.stringify(error));
              if (error instanceof OfficeExtension.Error) {
                  console.log('Debug info: ' + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: html
          description: 'Обязательно. HTML-код, который необходимо вставить.'
          type:
            - string
        - id: insertLocation
          description: 'Обязательно. Возможные значения: "замена", "начало", "конец", "до" или "после".'
          type:
            - Word.InsertLocation
  - uid: word_release.Word.Range.insertHtml_1
    summary: |-
      Вставляет HTML-код в указанном расположении. Значение insertLocation может быть "Replace", "Start", "End", "Before" или "After".

      \[[Набор API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: 'insertHtml(html, insertLocationString)'
    fullName: 'insertHtml(html, insertLocationString)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertHtml(html: string, insertLocationString: "Before" | "After" | "Start" | "End" | "Replace"): Word.Range;'
      return:
        type:
          - Word.Range
        description: ''
      parameters:
        - id: html
          description: 'Обязательно. HTML-код, который необходимо вставить.'
          type:
            - string
        - id: insertLocationString
          description: 'Обязательно. Возможные значения: "замена", "начало", "конец", "до" или "после".'
          type:
            - '"Before" | "After" | "Start" | "End" | "Replace"'
  - uid: word_release.Word.Range.insertInlinePictureFromBase64
    summary: |-
      Вставляет рисунок в указанном расположении. Значение insertLocation может быть "Replace", "Start", "End", "Before" или "After".

      \[[Набор API: WordApi 1,2](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: 'insertInlinePictureFromBase64(base64EncodedImage, insertLocation)'
    fullName: 'insertInlinePictureFromBase64(base64EncodedImage, insertLocation)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertInlinePictureFromBase64(base64EncodedImage: string, insertLocation: Word.InsertLocation): Word.InlinePicture;'
      return:
        type:
          - word.Word.InlinePicture
        description: ''
      parameters:
        - id: base64EncodedImage
          description: Обязательно. Вставленное изображение в кодировке Base64.
          type:
            - string
        - id: insertLocation
          description: 'Обязательно. Возможные значения: "замена", "начало", "конец", "до" или "после".'
          type:
            - Word.InsertLocation
  - uid: word_release.Word.Range.insertInlinePictureFromBase64_1
    summary: |-
      Вставляет рисунок в указанном расположении. Значение insertLocation может быть "Replace", "Start", "End", "Before" или "After".

      \[[Набор API: WordApi 1,2](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: 'insertInlinePictureFromBase64(base64EncodedImage, insertLocationString)'
    fullName: 'insertInlinePictureFromBase64(base64EncodedImage, insertLocationString)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertInlinePictureFromBase64(base64EncodedImage: string, insertLocationString: "Before" | "After" | "Start" | "End" | "Replace"): Word.InlinePicture;'
      return:
        type:
          - word.Word.InlinePicture
        description: ''
      parameters:
        - id: base64EncodedImage
          description: Обязательно. Вставленное изображение в кодировке Base64.
          type:
            - string
        - id: insertLocationString
          description: 'Обязательно. Возможные значения: "замена", "начало", "конец", "до" или "после".'
          type:
            - '"Before" | "After" | "Start" | "End" | "Replace"'
  - uid: word_release.Word.Range.insertOoxml
    summary: |-
      Вставляет OOXML-код в указанном расположении. Значение insertLocation может быть "Replace", "Start", "End", "Before" или "After".

      \[[Набор API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: 'insertOoxml(ooxml, insertLocation)'
    fullName: 'insertOoxml(ooxml, insertLocation)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertOoxml(ooxml: string, insertLocation: Word.InsertLocation): Word.Range;'
      return:
        type:
          - Word.Range
        description: |-


          #### <a name="examples"></a>Примеры

          ```javascript
          // Run a batch operation against the Word object model.
          Word.run(function (context) {

              // Queue a command to get the current selection and then
              // create a proxy range object with the results.
              var range = context.document.getSelection();

              // Queue a commmand to insert OOXML in to the beginning of the range.
              range.insertOoxml("<pkg:package xmlns:pkg='http://schemas.microsoft.com/office/2006/xmlPackage'><pkg:part pkg:name='/_rels/.rels' pkg:contentType='application/vnd.openxmlformats-package.relationships+xml' pkg:padding='512'><pkg:xmlData><Relationships xmlns='http://schemas.openxmlformats.org/package/2006/relationships'><Relationship Id='rId1' Type='http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument' Target='word/document.xml'/></Relationships></pkg:xmlData></pkg:part><pkg:part pkg:name='/word/document.xml' pkg:contentType='application/vnd.openxmlformats-officedocument.wordprocessingml.document.main+xml'><pkg:xmlData><w:document xmlns:w='http://schemas.openxmlformats.org/wordprocessingml/2006/main' ><w:body><w:p><w:pPr><w:spacing w:before='360' w:after='0' w:line='480' w:lineRule='auto'/><w:rPr><w:color w:val='70AD47' w:themeColor='accent6'/><w:sz w:val='28'/></w:rPr></w:pPr><w:r><w:rPr><w:color w:val='70AD47' w:themeColor='accent6'/><w:sz w:val='28'/></w:rPr><w:t>This text has formatting directly applied to achieve its font size, color, line spacing, and paragraph spacing.</w:t></w:r></w:p></w:body></w:document></pkg:xmlData></pkg:part></pkg:package>", Word.InsertLocation.start);

              // Synchronize the document state by executing the queued commands,
              // and return a promise to indicate task completion.
              return context.sync().then(function () {
                  console.log('OOXML added to the beginning of the range.');
              });
          })
          .catch(function (error) {
              console.log('Error: ' + JSON.stringify(error));
              if (error instanceof OfficeExtension.Error) {
                  console.log('Debug info: ' + JSON.stringify(error.debugInfo));
              }
          });

          // Read "Create better add-ins for Word with Office Open XML" for guidance on working with OOXML.
          // https://docs.microsoft.com/office/dev/add-ins/word/create-better-add-ins-for-word-with-office-open-xml
          ```
      parameters:
        - id: ooxml
          description: Обязательно. Вставляемый OOXML-код.
          type:
            - string
        - id: insertLocation
          description: 'Обязательно. Возможные значения: "замена", "начало", "конец", "до" или "после".'
          type:
            - Word.InsertLocation
  - uid: word_release.Word.Range.insertOoxml_1
    summary: |-
      Вставляет OOXML-код в указанном расположении. Значение insertLocation может быть "Replace", "Start", "End", "Before" или "After".

      \[[Набор API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: 'insertOoxml(ooxml, insertLocationString)'
    fullName: 'insertOoxml(ooxml, insertLocationString)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertOoxml(ooxml: string, insertLocationString: "Before" | "After" | "Start" | "End" | "Replace"): Word.Range;'
      return:
        type:
          - Word.Range
        description: ''
      parameters:
        - id: ooxml
          description: Обязательно. Вставляемый OOXML-код.
          type:
            - string
        - id: insertLocationString
          description: 'Обязательно. Возможные значения: "замена", "начало", "конец", "до" или "после".'
          type:
            - '"Before" | "After" | "Start" | "End" | "Replace"'
  - uid: word_release.Word.Range.insertParagraph
    summary: |-
      Вставляет абзац в указанном расположении. Возможные значения InsertLocation: Before и After.

      \[[Набор API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: 'insertParagraph(paragraphText, insertLocation)'
    fullName: 'insertParagraph(paragraphText, insertLocation)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertParagraph(paragraphText: string, insertLocation: Word.InsertLocation): Word.Paragraph;'
      return:
        type:
          - Word.Paragraph
        description: |-


          #### <a name="examples"></a>Примеры

          ```javascript
          // Run a batch operation against the Word object model.
          Word.run(function (context) {

              // Queue a command to get the current selection and then
              // create a proxy range object with the results.
              var range = context.document.getSelection();

              // Queue a commmand to insert the paragraph after the range.
              range.insertParagraph('Content of a new paragraph', Word.InsertLocation.after);

              // Synchronize the document state by executing the queued commands,
              // and return a promise to indicate task completion.
              return context.sync().then(function () {
                  console.log('Paragraph added to the end of the range.');
              });
          })
          .catch(function (error) {
              console.log('Error: ' + JSON.stringify(error));
              if (error instanceof OfficeExtension.Error) {
                  console.log('Debug info: ' + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: paragraphText
          description: 'Обязательный параметр. Текст абзаца, который необходимо вставить.'
          type:
            - string
        - id: insertLocation
          description: 'Обязательно. Возможные значения: Before и After.'
          type:
            - Word.InsertLocation
  - uid: word_release.Word.Range.insertParagraph_1
    summary: |-
      Вставляет абзац в указанном расположении. Возможные значения InsertLocation: Before и After.

      \[[Набор API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: 'insertParagraph(paragraphText, insertLocationString)'
    fullName: 'insertParagraph(paragraphText, insertLocationString)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertParagraph(paragraphText: string, insertLocationString: "Before" | "After" | "Start" | "End" | "Replace"): Word.Paragraph;'
      return:
        type:
          - Word.Paragraph
        description: ''
      parameters:
        - id: paragraphText
          description: 'Обязательный параметр. Текст абзаца, который необходимо вставить.'
          type:
            - string
        - id: insertLocationString
          description: 'Обязательно. Возможные значения: Before и After.'
          type:
            - '"Before" | "After" | "Start" | "End" | "Replace"'
  - uid: word_release.Word.Range.insertTable
    summary: |-
      Вставляет таблицу с указанным количеством строк и столбцов. Возможные значения InsertLocation: Before и After.

      \[[Набор API: WordApi 1,3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: 'insertTable(rowCount, columnCount, insertLocation, values)'
    fullName: 'insertTable(rowCount, columnCount, insertLocation, values)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertTable(rowCount: number, columnCount: number, insertLocation: Word.InsertLocation, values?: string[][]): Word.Table;'
      return:
        type:
          - Word.Table
        description: ''
      parameters:
        - id: rowCount
          description: Обязательно. Количество строк в таблице.
          type:
            - number
        - id: columnCount
          description: Обязательный. Количество столбцов в таблице.
          type:
            - number
        - id: insertLocation
          description: 'Обязательно. Возможные значения: Before и After.'
          type:
            - Word.InsertLocation
        - id: values
          description: 'Необязательный двухмерный массив. Ячейки заполняются, если в массиве указаны соответствующие строки.'
          type:
            - 'string[][]'
  - uid: word_release.Word.Range.insertTable_1
    summary: |-
      Вставляет таблицу с указанным количеством строк и столбцов. Возможные значения InsertLocation: Before и After.

      \[[Набор API: WordApi 1,3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: 'insertTable(rowCount, columnCount, insertLocationString, values)'
    fullName: 'insertTable(rowCount, columnCount, insertLocationString, values)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertTable(rowCount: number, columnCount: number, insertLocationString: "Before" | "After" | "Start" | "End" | "Replace", values?: string[][]): Word.Table;'
      return:
        type:
          - Word.Table
        description: ''
      parameters:
        - id: rowCount
          description: Обязательно. Количество строк в таблице.
          type:
            - number
        - id: columnCount
          description: Обязательный. Количество столбцов в таблице.
          type:
            - number
        - id: insertLocationString
          description: 'Обязательно. Возможные значения: Before и After.'
          type:
            - '"Before" | "After" | "Start" | "End" | "Replace"'
        - id: values
          description: 'Необязательный двухмерный массив. Ячейки заполняются, если в массиве указаны соответствующие строки.'
          type:
            - 'string[][]'
  - uid: word_release.Word.Range.insertText
    summary: |-
      Вставляет текст в заданном расположении. Значение insertLocation может быть "Replace", "Start", "End", "Before" или "After".

      \[[Набор API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: 'insertText(text, insertLocation)'
    fullName: 'insertText(text, insertLocation)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertText(text: string, insertLocation: Word.InsertLocation): Word.Range;'
      return:
        type:
          - Word.Range
        description: |-


          #### <a name="examples"></a>Примеры

          ```javascript
          // Run a batch operation against the Word object model.
          Word.run(function (context) {

              // Queue a command to get the current selection and then
              // create a proxy range object with the results.
              var range = context.document.getSelection();

              // Queue a commmand to insert the paragraph at the end of the range.
              range.insertText('New text inserted into the range.', Word.InsertLocation.end);

              // Synchronize the document state by executing the queued commands,
              // and return a promise to indicate task completion.
              return context.sync().then(function () {
                  console.log('Text added to the end of the range.');
              });
          })
          .catch(function (error) {
              console.log('Error: ' + JSON.stringify(error));
              if (error instanceof OfficeExtension.Error) {
                  console.log('Debug info: ' + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: text
          description: 'Обязательно. Текст, который необходимо вставить.'
          type:
            - string
        - id: insertLocation
          description: 'Обязательно. Возможные значения: "замена", "начало", "конец", "до" или "после".'
          type:
            - Word.InsertLocation
  - uid: word_release.Word.Range.insertText_1
    summary: |-
      Вставляет текст в заданном расположении. Значение insertLocation может быть "Replace", "Start", "End", "Before" или "After".

      \[[Набор API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: 'insertText(text, insertLocationString)'
    fullName: 'insertText(text, insertLocationString)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertText(text: string, insertLocationString: "Before" | "After" | "Start" | "End" | "Replace"): Word.Range;'
      return:
        type:
          - Word.Range
        description: ''
      parameters:
        - id: text
          description: 'Обязательно. Текст, который необходимо вставить.'
          type:
            - string
        - id: insertLocationString
          description: 'Обязательно. Возможные значения: "замена", "начало", "конец", "до" или "после".'
          type:
            - '"Before" | "After" | "Start" | "End" | "Replace"'
  - uid: word_release.Word.Range.intersectWith
    summary: |-
      Возвращает новый диапазон, представляющий собой пересечение данного диапазона с другим. Данный диапазон не меняется. Вызывается, если два диапазона не перекрываются или не являются смежными.

      \[[Набор API: WordApi 1,3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: intersectWith(range)
    fullName: intersectWith(range)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'intersectWith(range: Word.Range): Word.Range;'
      return:
        type:
          - Word.Range
        description: ''
      parameters:
        - id: range
          description: Обязательно. Другой диапазон.
          type:
            - Word.Range
  - uid: word_release.Word.Range.intersectWithOrNullObject
    summary: |-
      Возвращает новый диапазон, представляющий собой пересечение данного диапазона с другим. Данный диапазон не меняется. Возвращает нулевой объект, если два диапазона не перекрываются или не являются смежными.

      \[[Набор API: WordApi 1,3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: intersectWithOrNullObject(range)
    fullName: intersectWithOrNullObject(range)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'intersectWithOrNullObject(range: Word.Range): Word.Range;'
      return:
        type:
          - Word.Range
        description: ''
      parameters:
        - id: range
          description: Обязательно. Другой диапазон.
          type:
            - Word.Range
  - uid: word_release.Word.Range.isEmpty
    summary: |-
      Проверяет, является ли длина диапазона нулевой. Только для чтения.

      \[[Набор API: WordApi 1,3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: isEmpty
    fullName: isEmpty
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly isEmpty: boolean;'
      return:
        type:
          - boolean
  - uid: word_release.Word.Range.lists
    summary: |-
      Возвращает коллекцию объектов списков в диапазоне. Только для чтения.

      \[[Набор API: WordApi 1,3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: lists
    fullName: lists
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly lists: Word.ListCollection;'
      return:
        type:
          - word.Word.ListCollection
  - uid: word_release.Word.Range.load
    summary: Добавляет в очередь команду для загрузки указанных свойств объекта. Перед чтением свойств необходимо вызвать метод context.sync().
    remarks: |-
      В дополнение к этой подписи этот метод имеет следующие подписи:

      `load(option?: string | string[]): Word.Range`-WHERE — это строка с разделителями-запятыми или массив строк, указывающий свойства для загрузки.

      `load(option?: { select?: string; expand?: string; }): Word.Range`-WHERE. Select — это строка с разделителями-запятыми, указывающая свойства для загрузки и параметры. Expand — это строка с разделителями-запятыми, указывающая свойства навигации для загрузки.

      `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Word.Range`— Доступно только для типов коллекций. Он аналогичен предыдущей подписи. Option. Top указывает максимальное количество элементов коллекции, которые можно включить в результат. Option. skip указывает количество элементов, которые будут пропущены и не включены в результат. Если указан параметр Option. Top, результирующий набор начнется после пропуска указанного числа элементов.
    name: load(option)
    fullName: load(option)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(option?: Word.Interfaces.RangeLoadOptions): Word.Range;'
      return:
        type:
          - Word.Range
        description: ''
      parameters:
        - id: option
          description: ''
          type:
            - Word.Interfaces.RangeLoadOptions
  - uid: word_release.Word.Range.load_1
    summary: Добавляет в очередь команду для загрузки указанных свойств объекта. Перед чтением свойств `context.sync()` необходимо вызвать метод.
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): Word.Range;'
      return:
        type:
          - Word.Range
        description: ''
      parameters:
        - id: propertyNames
          description: 'Строка, разделенная запятыми, или массив строк, указывающий свойства для загрузки.'
          type:
            - 'string | string[]'
  - uid: word_release.Word.Range.load_2
    summary: Добавляет в очередь команду для загрузки указанных свойств объекта. Перед чтением свойств `context.sync()` необходимо вызвать метод.
    name: load(propertyNamesAndPaths)
    fullName: load(propertyNamesAndPaths)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNamesAndPaths?: { select?: string; expand?: string; }): Word.Range;'
      return:
        type:
          - Word.Range
        description: ''
      parameters:
        - id: propertyNamesAndPaths
          description: 'Где Пропертинамесандпасс. Select — это строка с разделителями-запятыми, задающая свойства для загрузки, и Пропертинамесандпасс. Expand — это строка с разделителями-запятыми, указывающая свойства навигации для загрузки.'
          type:
            - '{ select?: string; expand?: string; }'
  - uid: word_release.Word.Range.paragraphs
    summary: |-
      Возвращает коллекцию объектов абзаца в диапазоне. Только для чтения.

      \[[Набор API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: paragraphs
    fullName: paragraphs
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly paragraphs: Word.ParagraphCollection;'
      return:
        type:
          - Word.ParagraphCollection
  - uid: word_release.Word.Range.parentBody
    summary: |-
      Возвращает родительский текст диапазона. Только для чтения.

      \[[Набор API: WordApi 1,3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: parentBody
    fullName: parentBody
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly parentBody: Word.Body;'
      return:
        type:
          - Word.Body
  - uid: word_release.Word.Range.parentContentControl
    summary: |-
      Возвращает элемент управления содержимым, содержащий диапазон. Вызывается, если родительский элемент управления содержимым отсутствует. Только для чтения.

      \[[Набор API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: parentContentControl
    fullName: parentContentControl
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly parentContentControl: Word.ContentControl;'
      return:
        type:
          - word.Word.ContentControl
  - uid: word_release.Word.Range.parentContentControlOrNullObject
    summary: |-
      Возвращает элемент управления содержимым, содержащий диапазон. Возвращает нулевой объект, если родительский элемент управления содержимым отсутствует. Только для чтения.

      \[[Набор API: WordApi 1,3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: parentContentControlOrNullObject
    fullName: parentContentControlOrNullObject
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly parentContentControlOrNullObject: Word.ContentControl;'
      return:
        type:
          - word.Word.ContentControl
  - uid: word_release.Word.Range.parentTable
    summary: |-
      Возвращает таблицу, содержащую диапазон. Вызывается, если он не включен в таблицу. Только для чтения.

      \[[Набор API: WordApi 1,3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: parentTable
    fullName: parentTable
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly parentTable: Word.Table;'
      return:
        type:
          - Word.Table
  - uid: word_release.Word.Range.parentTableCell
    summary: |-
      Возвращает ячейку таблицы, содержащую диапазон. Создает исключение, если оно не находится в ячейке таблицы. Только для чтения.

      \[[Набор API: WordApi 1,3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: parentTableCell
    fullName: parentTableCell
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly parentTableCell: Word.TableCell;'
      return:
        type:
          - Word.TableCell
  - uid: word_release.Word.Range.parentTableCellOrNullObject
    summary: |-
      Возвращает ячейку таблицы, содержащую диапазон. Если он находится не в ячейке таблицы, возвращается пустой объект. Только для чтения.

      \[[Набор API: WordApi 1,3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: parentTableCellOrNullObject
    fullName: parentTableCellOrNullObject
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly parentTableCellOrNullObject: Word.TableCell;'
      return:
        type:
          - Word.TableCell
  - uid: word_release.Word.Range.parentTableOrNullObject
    summary: |-
      Возвращает таблицу, содержащую диапазон. Если она находится не в таблице, возвращается пустой объект. Только для чтения.

      \[[Набор API: WordApi 1,3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: parentTableOrNullObject
    fullName: parentTableOrNullObject
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly parentTableOrNullObject: Word.Table;'
      return:
        type:
          - Word.Table
  - uid: word_release.Word.Range.search
    summary: |-
      Выполняет поиск с указанным SearchOptions в области объекта Range. Результат поиска — это коллекция объектов диапазона.

      \[[Набор API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: 'search(searchText, searchOptions)'
    fullName: 'search(searchText, searchOptions)'
    langs:
      - typeScript
    type: method
    syntax:
      content: |-
        search(searchText: string, searchOptions?: Word.SearchOptions | {
                    ignorePunct?: boolean;
                    ignoreSpace?: boolean;
                    matchCase?: boolean;
                    matchPrefix?: boolean;
                    matchSuffix?: boolean;
                    matchWholeWord?: boolean;
                    matchWildcards?: boolean;
                }): Word.RangeCollection;
      return:
        type:
          - Word.RangeCollection
        description: ''
      parameters:
        - id: searchText
          description: Обязательный параметр. Текст для поиска.
          type:
            - string
        - id: searchOptions
          description: Необязательно. Параметры поиска.
          type:
            - |-
              Word.SearchOptions | {
                          ignorePunct?: boolean;
                          ignoreSpace?: boolean;
                          matchCase?: boolean;
                          matchPrefix?: boolean;
                          matchSuffix?: boolean;
                          matchWholeWord?: boolean;
                          matchWildcards?: boolean;
                      }
  - uid: word_release.Word.Range.select
    summary: |-
      Выбор диапазона и переход к нему в пользовательском интерфейсе Word.

      \[[Набор API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: select(selectionMode)
    fullName: select(selectionMode)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'select(selectionMode?: Word.SelectionMode): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a>Примеры

          ```javascript
          // Run a batch operation against the Word object model.
          Word.run(function (context) {

              // Queue a command to get the current selection and then
              // create a proxy range object with the results.
              var range = context.document.getSelection();

              // Queue a commmand to insert HTML in to the beginning of the range.
              range.insertHtml('<strong>This is text inserted with range.insertHtml()</strong>', Word.InsertLocation.start);

              // Queue a command to select the HTML that was inserted.
              range.select();

              // Synchronize the document state by executing the queued commands,
              // and return a promise to indicate task completion.
              return context.sync().then(function () {
                  console.log('Selected the range.');
              });
          })
          .catch(function (error) {
              console.log('Error: ' + JSON.stringify(error));
              if (error instanceof OfficeExtension.Error) {
                  console.log('Debug info: ' + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: selectionMode
          description: 'Необязательный параметр. Возможные режимы выбора: Select, Start и End. Значение по умолчанию — Select.'
          type:
            - Word.SelectionMode
  - uid: word_release.Word.Range.select_1
    summary: |-
      Выбор диапазона и переход к нему в пользовательском интерфейсе Word.

      \[[Набор API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: select(selectionModeString)
    fullName: select(selectionModeString)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'select(selectionModeString?: "Select" | "Start" | "End"): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: selectionModeString
          description: 'Необязательный параметр. Возможные режимы выбора: Select, Start и End. Значение по умолчанию — Select.'
          type:
            - '"Select" | "Start" | "End"'
  - uid: word_release.Word.Range.set
    summary: 'Задает одновременно несколько свойств объекта. Можно передать либо простой объект с соответствующими свойствами, либо другой объект API того же типа.'
    remarks: |-
      Этот метод имеет следующую дополнительную подпись:

      `set(properties: Word.Range): void`
    name: 'set(properties, options)'
    fullName: 'set(properties, options)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'set(properties: Interfaces.RangeUpdateData, options?: OfficeExtension.UpdateOptions): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: properties
          description: 'Объект JavaScript со свойствами, которые структурированы исоморфикалли к свойствам объекта, для которого вызывается метод.'
          type:
            - Interfaces.RangeUpdateData
        - id: options
          description: 'Предоставляет возможность подавлять ошибки, если объект Properties пытается задать любые свойства, предназначенные только для чтения.'
          type:
            - office.OfficeExtension.UpdateOptions
  - uid: word_release.Word.Range.set_1
    summary: Задает одновременно несколько свойств объекта на основе существующего загруженного объекта.
    name: set(properties)
    fullName: set(properties)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'set(properties: Word.Range): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: properties
          description: ''
          type:
            - Word.Range
  - uid: word_release.Word.Range.split
    summary: |-
      Разделяет диапазон на дочерние диапазоны с помощью разделителей.

      \[[Набор API: WordApi 1,3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: 'split(delimiters, multiParagraphs, trimDelimiters, trimSpacing)'
    fullName: 'split(delimiters, multiParagraphs, trimDelimiters, trimSpacing)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'split(delimiters: string[], multiParagraphs?: boolean, trimDelimiters?: boolean, trimSpacing?: boolean): Word.RangeCollection;'
      return:
        type:
          - Word.RangeCollection
        description: ''
      parameters:
        - id: delimiters
          description: Обязательно. Разделители в виде массива строк.
          type:
            - 'string[]'
        - id: multiParagraphs
          description: 'Необязательно. Указывает, может ли возвращенный дочерний диапазон охватывать несколько абзацев. Значение по умолчанию — false, которое указывает, что границы абзацев также используются в качестве разделителей.'
          type:
            - boolean
        - id: trimDelimiters
          description: 'Необязательно. Указывает, следует ли отрезать разделители от диапазонов в коллекции Range. Значение по умолчанию — false, которое указывает, что разделители включены в диапазоны, возвращаемые в коллекции Range.'
          type:
            - boolean
        - id: trimSpacing
          description: 'Необязательно. Указывает, следует ли обрезать символы интервалов (пробелы, знаки табуляции, разрывы столбцов и конечные знаки абзаца) от начала и конца диапазонов, возвращаемых в коллекции Range. Значение по умолчанию — false, которое указывает, что пробелы в начале и конце диапазонов включаются в коллекцию Range.'
          type:
            - boolean
  - uid: word_release.Word.Range.style
    summary: |-
      Получает или задает имя стиля для диапазона. Используйте это свойство для пользовательских стилей и локализованных имен стилей. Чтобы использовать встроенные стили, поддерживающие несколько языковых стандартов, применяйте свойство styleBuiltIn.

      \[[Набор API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: style
    fullName: style
    langs:
      - typeScript
    type: property
    syntax:
      content: 'style: string;'
      return:
        type:
          - string
  - uid: word_release.Word.Range.styleBuiltIn
    summary: |-
      Возвращает или задает имя встроенного стиля диапазона. Используйте это свойство для встроенных стилей, поддерживающих несколько языковых стандартов. Чтобы использовать пользовательские стили или локализованные имена стилей, применяйте свойство style.

      \[[Набор API: WordApi 1,3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: styleBuiltIn
    fullName: styleBuiltIn
    langs:
      - typeScript
    type: property
    syntax:
      content: 'styleBuiltIn: Word.Style | "Other" | "Normal" | "Heading1" | "Heading2" | "Heading3" | "Heading4" | "Heading5" | "Heading6" | "Heading7" | "Heading8" | "Heading9" | "Toc1" | "Toc2" | "Toc3" | "Toc4" | "Toc5" | "Toc6" | "Toc7" | "Toc8" | "Toc9" | "FootnoteText" | "Header" | "Footer" | "Caption" | "FootnoteReference" | "EndnoteReference" | "EndnoteText" | "Title" | "Subtitle" | "Hyperlink" | "Strong" | "Emphasis" | "NoSpacing" | "ListParagraph" | "Quote" | "IntenseQuote" | "SubtleEmphasis" | "IntenseEmphasis" | "SubtleReference" | "IntenseReference" | "BookTitle" | "Bibliography" | "TocHeading" | "TableGrid" | "PlainTable1" | "PlainTable2" | "PlainTable3" | "PlainTable4" | "PlainTable5" | "TableGridLight" | "GridTable1Light" | "GridTable1Light_Accent1" | "GridTable1Light_Accent2" | "GridTable1Light_Accent3" | "GridTable1Light_Accent4" | "GridTable1Light_Accent5" | "GridTable1Light_Accent6" | "GridTable2" | "GridTable2_Accent1" | "GridTable2_Accent2" | "GridTable2_Accent3" | "GridTable2_Accent4" | "GridTable2_Accent5" | "GridTable2_Accent6" | "GridTable3" | "GridTable3_Accent1" | "GridTable3_Accent2" | "GridTable3_Accent3" | "GridTable3_Accent4" | "GridTable3_Accent5" | "GridTable3_Accent6" | "GridTable4" | "GridTable4_Accent1" | "GridTable4_Accent2" | "GridTable4_Accent3" | "GridTable4_Accent4" | "GridTable4_Accent5" | "GridTable4_Accent6" | "GridTable5Dark" | "GridTable5Dark_Accent1" | "GridTable5Dark_Accent2" | "GridTable5Dark_Accent3" | "GridTable5Dark_Accent4" | "GridTable5Dark_Accent5" | "GridTable5Dark_Accent6" | "GridTable6Colorful" | "GridTable6Colorful_Accent1" | "GridTable6Colorful_Accent2" | "GridTable6Colorful_Accent3" | "GridTable6Colorful_Accent4" | "GridTable6Colorful_Accent5" | "GridTable6Colorful_Accent6" | "GridTable7Colorful" | "GridTable7Colorful_Accent1" | "GridTable7Colorful_Accent2" | "GridTable7Colorful_Accent3" | "GridTable7Colorful_Accent4" | "GridTable7Colorful_Accent5" | "GridTable7Colorful_Accent6" | "ListTable1Light" | "ListTable1Light_Accent1" | "ListTable1Light_Accent2" | "ListTable1Light_Accent3" | "ListTable1Light_Accent4" | "ListTable1Light_Accent5" | "ListTable1Light_Accent6" | "ListTable2" | "ListTable2_Accent1" | "ListTable2_Accent2" | "ListTable2_Accent3" | "ListTable2_Accent4" | "ListTable2_Accent5" | "ListTable2_Accent6" | "ListTable3" | "ListTable3_Accent1" | "ListTable3_Accent2" | "ListTable3_Accent3" | "ListTable3_Accent4" | "ListTable3_Accent5" | "ListTable3_Accent6" | "ListTable4" | "ListTable4_Accent1" | "ListTable4_Accent2" | "ListTable4_Accent3" | "ListTable4_Accent4" | "ListTable4_Accent5" | "ListTable4_Accent6" | "ListTable5Dark" | "ListTable5Dark_Accent1" | "ListTable5Dark_Accent2" | "ListTable5Dark_Accent3" | "ListTable5Dark_Accent4" | "ListTable5Dark_Accent5" | "ListTable5Dark_Accent6" | "ListTable6Colorful" | "ListTable6Colorful_Accent1" | "ListTable6Colorful_Accent2" | "ListTable6Colorful_Accent3" | "ListTable6Colorful_Accent4" | "ListTable6Colorful_Accent5" | "ListTable6Colorful_Accent6" | "ListTable7Colorful" | "ListTable7Colorful_Accent1" | "ListTable7Colorful_Accent2" | "ListTable7Colorful_Accent3" | "ListTable7Colorful_Accent4" | "ListTable7Colorful_Accent5" | "ListTable7Colorful_Accent6";'
      return:
        type:
          - Word.Style | "Other" | "Normal" | "Heading1" | "Heading2" | "Heading3" | "Heading4" | "Heading5" | "Heading6" | "Heading7" | "Heading8" | "Heading9" | "Toc1" | "Toc2" | "Toc3" | "Toc4" | "Toc5" | "Toc6" | "Toc7" | "Toc8" | "Toc9" | "FootnoteText" | "Header" | "Footer" | "Caption" | "FootnoteReference" | "EndnoteReference" | "EndnoteText" | "Title" | "Subtitle" | "Hyperlink" | "Strong" | "Emphasis" | "NoSpacing" | "ListParagraph" | "Quote" | "IntenseQuote" | "SubtleEmphasis" | "IntenseEmphasis" | "SubtleReference" | "IntenseReference" | "BookTitle" | "Bibliography" | "TocHeading" | "TableGrid" | "PlainTable1" | "PlainTable2" | "PlainTable3" | "PlainTable4" | "PlainTable5" | "TableGridLight" | "GridTable1Light" | "GridTable1Light_Accent1" | "GridTable1Light_Accent2" | "GridTable1Light_Accent3" | "GridTable1Light_Accent4" | "GridTable1Light_Accent5" | "GridTable1Light_Accent6" | "GridTable2" | "GridTable2_Accent1" | "GridTable2_Accent2" | "GridTable2_Accent3" | "GridTable2_Accent4" | "GridTable2_Accent5" | "GridTable2_Accent6" | "GridTable3" | "GridTable3_Accent1" | "GridTable3_Accent2" | "GridTable3_Accent3" | "GridTable3_Accent4" | "GridTable3_Accent5" | "GridTable3_Accent6" | "GridTable4" | "GridTable4_Accent1" | "GridTable4_Accent2" | "GridTable4_Accent3" | "GridTable4_Accent4" | "GridTable4_Accent5" | "GridTable4_Accent6" | "GridTable5Dark" | "GridTable5Dark_Accent1" | "GridTable5Dark_Accent2" | "GridTable5Dark_Accent3" | "GridTable5Dark_Accent4" | "GridTable5Dark_Accent5" | "GridTable5Dark_Accent6" | "GridTable6Colorful" | "GridTable6Colorful_Accent1" | "GridTable6Colorful_Accent2" | "GridTable6Colorful_Accent3" | "GridTable6Colorful_Accent4" | "GridTable6Colorful_Accent5" | "GridTable6Colorful_Accent6" | "GridTable7Colorful" | "GridTable7Colorful_Accent1" | "GridTable7Colorful_Accent2" | "GridTable7Colorful_Accent3" | "GridTable7Colorful_Accent4" | "GridTable7Colorful_Accent5" | "GridTable7Colorful_Accent6" | "ListTable1Light" | "ListTable1Light_Accent1" | "ListTable1Light_Accent2" | "ListTable1Light_Accent3" | "ListTable1Light_Accent4" | "ListTable1Light_Accent5" | "ListTable1Light_Accent6" | "ListTable2" | "ListTable2_Accent1" | "ListTable2_Accent2" | "ListTable2_Accent3" | "ListTable2_Accent4" | "ListTable2_Accent5" | "ListTable2_Accent6" | "ListTable3" | "ListTable3_Accent1" | "ListTable3_Accent2" | "ListTable3_Accent3" | "ListTable3_Accent4" | "ListTable3_Accent5" | "ListTable3_Accent6" | "ListTable4" | "ListTable4_Accent1" | "ListTable4_Accent2" | "ListTable4_Accent3" | "ListTable4_Accent4" | "ListTable4_Accent5" | "ListTable4_Accent6" | "ListTable5Dark" | "ListTable5Dark_Accent1" | "ListTable5Dark_Accent2" | "ListTable5Dark_Accent3" | "ListTable5Dark_Accent4" | "ListTable5Dark_Accent5" | "ListTable5Dark_Accent6" | "ListTable6Colorful" | "ListTable6Colorful_Accent1" | "ListTable6Colorful_Accent2" | "ListTable6Colorful_Accent3" | "ListTable6Colorful_Accent4" | "ListTable6Colorful_Accent5" | "ListTable6Colorful_Accent6" | "ListTable7Colorful" | "ListTable7Colorful_Accent1" | "ListTable7Colorful_Accent2" | "ListTable7Colorful_Accent3" | "ListTable7Colorful_Accent4" | "ListTable7Colorful_Accent5" | "ListTable7Colorful_Accent6"
  - uid: word_release.Word.Range.tables
    summary: |-
      Возвращает коллекцию объектов таблиц в диапазоне. Только для чтения.

      \[[Набор API: WordApi 1,3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: tables
    fullName: tables
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly tables: Word.TableCollection;'
      return:
        type:
          - Word.TableCollection
  - uid: word_release.Word.Range.text
    summary: |-
      Возвращает текст диапазона. Только для чтения.

      \[[Набор API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: text
    fullName: text
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly text: string;'
      return:
        type:
          - string
  - uid: word_release.Word.Range.toJSON
    summary: 'Переопределяет метод `toJSON()` JavaScript для предоставления более удобного вывода при передаче объекта API`JSON.stringify()`<!-- -->. (`JSON.stringify`<!-- -->, в свою очередь, вызывает `toJSON` метод объекта, который передается ему.) В то время как исходный объект Word. Range — это объект API, `toJSON` метод возвращает простой объект JavaScript (тип`Word.Interfaces.RangeData`<!-- -->), который содержит неполные копии загруженных дочерних свойств из исходного объекта.'
    name: toJSON()
    fullName: toJSON()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON(): Word.Interfaces.RangeData;'
      return:
        type:
          - Word.Interfaces.RangeData
        description: ''
  - uid: word_release.Word.Range.track
    summary: 'Отслеживает объект для автоматической корректировки с учетом окружающих изменений в документе. Этот вызов является сокращением для context.trackedObjects.add(thisObject). Если этот объект используется в вызовах .sync и вне последовательного выполнения пакета .run с возникновением ошибки InvalidObjectPath при установке свойства или вызове метода для объекта, необходимо было добавить объект в коллекцию отслеживаемых объектов при первоначальном создании объекта.'
    name: track()
    fullName: track()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'track(): Word.Range;'
      return:
        type:
          - Word.Range
        description: ''
  - uid: word_release.Word.Range.untrack
    summary: 'Освобождает память, связанную с этим объектом, если он ранее отслеживался. Этот вызов является сокращением для context.trackedObjects.remove(thisObject). Наличие большого количества отслеживаемых объектов замедляет ведущее приложение, поэтому не забывайте освобождать любые добавленные объекты после завершения их использования. Перед фактическим освобождением памяти потребуется вызвать метод context.sync().'
    name: untrack()
    fullName: untrack()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'untrack(): Word.Range;'
      return:
        type:
          - Word.Range
        description: ''