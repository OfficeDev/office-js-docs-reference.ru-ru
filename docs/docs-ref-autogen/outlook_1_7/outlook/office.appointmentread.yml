### YamlMime:UniversalReference
items:
  - uid: Outlook.Office.AppointmentRead
    summary: |-
      Режим участников встречи [Office. Context. Mailbox. Item](xref:Outlook.Office.Item)<!-- -->.

      **Важно!** это внутренний объект Outlook, который не предоставляется напрямую через существующие интерфейсы. Этот режим следует рассматривать как режим Office. Context. Mailbox. Item. Для получения дополнительных сведений обратитесь к странице [объектной модели](https://docs.microsoft.com/office/dev/add-ins/reference/objectmodel/requirement-set-1.7/office.context.mailbox.item) .
    name: Office.AppointmentRead
    fullName: Office.AppointmentRead
    langs:
      - typeScript
    type: interface
    extends:
      - Outlook.Office.Appointment
      - Outlook.Office.ItemRead
    package: Outlook
    children:
      - Outlook.Office.AppointmentRead.addHandlerAsync
      - Outlook.Office.AppointmentRead.addHandlerAsync_1
      - Outlook.Office.AppointmentRead.displayReplyAllForm
      - Outlook.Office.AppointmentRead.displayReplyForm
      - Outlook.Office.AppointmentRead.getEntities
      - Outlook.Office.AppointmentRead.getEntitiesByType
      - Outlook.Office.AppointmentRead.getFilteredEntitiesByName
      - Outlook.Office.AppointmentRead.getRegExMatches
      - Outlook.Office.AppointmentRead.getRegExMatchesByName
      - Outlook.Office.AppointmentRead.getSelectedEntities
      - Outlook.Office.AppointmentRead.getSelectedRegExMatches
      - Outlook.Office.AppointmentRead.loadCustomPropertiesAsync
      - Outlook.Office.AppointmentRead.removeHandlerAsync
      - Outlook.Office.AppointmentRead.removeHandlerAsync_1
      - Outlook.Office.AppointmentRead.attachments
      - Outlook.Office.AppointmentRead.body
      - Outlook.Office.AppointmentRead.dateTimeCreated
      - Outlook.Office.AppointmentRead.dateTimeModified
      - Outlook.Office.AppointmentRead.end
      - Outlook.Office.AppointmentRead.itemClass
      - Outlook.Office.AppointmentRead.itemId
      - Outlook.Office.AppointmentRead.itemType
      - Outlook.Office.AppointmentRead.location
      - Outlook.Office.AppointmentRead.normalizedSubject
      - Outlook.Office.AppointmentRead.notificationMessages
      - Outlook.Office.AppointmentRead.optionalAttendees
      - Outlook.Office.AppointmentRead.organizer
      - Outlook.Office.AppointmentRead.recurrence
      - Outlook.Office.AppointmentRead.requiredAttendees
      - Outlook.Office.AppointmentRead.seriesId
      - Outlook.Office.AppointmentRead.start
      - Outlook.Office.AppointmentRead.subject
  - uid: Outlook.Office.AppointmentRead.addHandlerAsync
    summary: |-
      Добавляет обработчик для поддерживаемого события. **Note**: события доступны только в области задач.

      В настоящее время поддерживаются типы событий`Office.EventType.AppointmentTimeChanged`<!-- -->, `Office.EventType.RecipientsChanged`<!-- -->, а`Office.EventType.RecurrenceChanged`<!-- -->.

      \[[Набор API: Mailbox 1,7](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      ** [Минимальный уровень](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->разрешений**: ReadItem

      ** [Соответствующий режим](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->Outlook**: участник встречи
    name: 'addHandlerAsync(eventType, handler, options, callback)'
    fullName: 'addHandlerAsync(eventType, handler, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addHandlerAsync(eventType: Office.EventType | string, handler: any, options?: Office.AsyncContextOptions, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: eventType
          description: 'Событие, которое должно вызвать обработчик.'
          type:
            - Office.EventType | string
        - id: handler
          description: 'Функция для обработки события. Функция должна принимать один параметр, представляющий собой объектный литерал. Свойство Type для параметра будет сопоставляться с параметром eventType, переданному в addHandlerAsync.'
          type:
            - any
        - id: options
          description: 'Необязательно. Объектный литерал, содержащий одно или несколько из указанных ниже свойств. asyncContext: разработчики могут предоставить любой объект, к которому необходимо получить доступ, в методе обратного вызова.'
          type:
            - Office.AsyncContextOptions
        - id: callback
          description: 'Необязательно. После выполнения метода функция, переданная в параметре callback, вызывается с помощью одного параметра asyncResult, который является объектом Office. AsyncResult.'
          type:
            - '(asyncResult: Office.AsyncResult<void>) => void'
  - uid: Outlook.Office.AppointmentRead.addHandlerAsync_1
    summary: |-
      Добавляет обработчик для поддерживаемого события. **Note**: события доступны только в области задач.

      В настоящее время поддерживаются типы событий`Office.EventType.AppointmentTimeChanged`<!-- -->, `Office.EventType.RecipientsChanged`<!-- -->, а`Office.EventType.RecurrenceChanged`<!-- -->.

      \[[Набор API: Mailbox 1,7](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      ** [Минимальный уровень](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->разрешений**: ReadItem

      ** [Соответствующий режим](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->Outlook**: участник встречи
    name: 'addHandlerAsync(eventType, handler, callback)'
    fullName: 'addHandlerAsync(eventType, handler, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addHandlerAsync(eventType: Office.EventType | string, handler: any, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: eventType
          description: 'Событие, которое должно вызвать обработчик.'
          type:
            - Office.EventType | string
        - id: handler
          description: 'Функция для обработки события. Функция должна принимать один параметр, представляющий собой объектный литерал. Свойство Type для параметра будет сопоставляться с параметром eventType, переданному в addHandlerAsync.'
          type:
            - any
        - id: callback
          description: 'Необязательно. После выполнения метода функция, переданная в параметре callback, вызывается с помощью одного параметра asyncResult, который является объектом Office. AsyncResult.'
          type:
            - '(asyncResult: Office.AsyncResult<void>) => void'
  - uid: Outlook.Office.AppointmentRead.displayReplyAllForm
    summary: |-
      Отображает форму ответа, включающую отправителя и всех получателей выбранного сообщения или организатора и всех участников выбранной встречи.

      В Outlook в Интернете форма ответа отображается в виде всплывающей формы в представлении из трех столбцов и всплывающей формы в представлении с 2 или 1 столбца.

      Если любой строковый параметр превышает их пределы, displayReplyAllForm создает исключение.

      Если вложения указаны в параметре Формдата. вложения, Outlook в Интернете и на настольных клиентах пытаются скачать все вложения и присоединить их к форме ответа. Если какие-либо вложения добавить не удается, в форме отображается сообщение об ошибке. Если сообщения об ошибках не предусмотрены, то они не отображаются.

      **Note**: Этот метод не поддерживается в Outlook на iOS или Android.

      \[[Набор API: Mailbox 1,0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      ** [Минимальный уровень](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->разрешений**: ReadItem

      ** [Соответствующий режим](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->Outlook**: участник встречи

      #### <a name="examples"></a>Примеры

      ```javascript
      // The following code passes a string to the `displayReplyAllForm` function.
      Office.context.mailbox.item.displayReplyAllForm('hello there');
      Office.context.mailbox.item.displayReplyAllForm('<b>hello there</b>');

      // Reply with an empty body.
      Office.context.mailbox.item.displayReplyAllForm({});

      // Reply with just a body.
      Office.context.mailbox.item.displayReplyAllForm(
      {
      'htmlBody' : 'hi'
      });

      // Reply with a body and a file attachment.
      Office.context.mailbox.item.displayReplyAllForm(
      {
          'htmlBody' : 'hi',
          'attachments' :
          [
              {
              'type' : Office.MailboxEnums.AttachmentType.File,
              'name' : 'squirrel.png',
              'url' : 'http://i.imgur.com/sRgTlGR.jpg'
              }
          ]
      });

      // Reply with a body and an item attachment.
      Office.context.mailbox.item.displayReplyAllForm(
      {
          'htmlBody' : 'hi',
          'attachments' :
          [
              {
              'type' : 'item',
              'name' : 'rand',
              'itemId' : Office.context.mailbox.item.itemId
              }
          ]
      });

      // Reply with a body, file attachment, item attachment, and a callback.
      Office.context.mailbox.item.displayReplyAllForm(
      {
          'htmlBody' : 'hi',
          'attachments' :
          [
              {
                  'type' : Office.MailboxEnums.AttachmentType.File,
                  'name' : 'squirrel.png',
                  'url' : 'http://i.imgur.com/sRgTlGR.jpg'
              },
              {
                  'type' : 'item',
                  'name' : 'rand',
                  'itemId' : Office.context.mailbox.item.itemId
              }
          ],
          'callback' : function(asyncResult)
          {
              console.log(asyncResult.value);
          }
      });
      ```
    name: 'displayReplyAllForm(formData, callback)'
    fullName: 'displayReplyAllForm(formData, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'displayReplyAllForm(formData: string | ReplyFormData, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: formData
          description: 'Строка, содержащая текст и HTML-код, представляющие собой основной текст формы ответа. Строка ограничена 32 КБ или объектом [Office. реплиформдата](xref:Outlook.Office.ReplyFormData) , который содержит данные текста или вложений, а также функцию обратного вызова.'
          type:
            - string | ReplyFormData
        - id: callback
          description: 'Необязательно. После выполнения метода функция, переданная в параметре callback, вызывается с помощью одного параметра asyncResult, который является объектом Office. AsyncResult.'
          type:
            - '(asyncResult: Office.AsyncResult<void>) => void'
  - uid: Outlook.Office.AppointmentRead.displayReplyForm
    summary: |-
      Отображает форму ответа, включающую только отправителя выбранного сообщения или организатора выбранной встречи.

      В Outlook в Интернете форма ответа отображается в виде всплывающей формы в представлении из трех столбцов и всплывающей формы в представлении с 2 или 1 столбца.

      Если любой строковый параметр превышает их пределы, displayReplyForm создает исключение.

      Если вложения указаны в параметре Формдата. вложения, Outlook в Интернете и на настольных клиентах пытаются скачать все вложения и присоединить их к форме ответа. Если какие-либо вложения добавить не удается, в форме отображается сообщение об ошибке. Если сообщения об ошибках не предусмотрены, то они не отображаются.

      **Note**: Этот метод не поддерживается в Outlook на iOS или Android.

      \[[Набор API: Mailbox 1,0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      ** [Минимальный уровень](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->разрешений**: ReadItem

      ** [Соответствующий режим](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->Outlook**: участник встречи

      #### <a name="examples"></a>Примеры

      ```javascript
      // The following code passes a string to the `displayReplyForm` function.
      Office.context.mailbox.item.displayReplyForm('hello there');
      Office.context.mailbox.item.displayReplyForm('<b>hello there</b>');

      // Reply with an empty body.
      Office.context.mailbox.item.displayReplyForm({});

      // Reply with just a body.
      Office.context.mailbox.item.displayReplyForm(
      {
          'htmlBody' : 'hi'
      });

      // Reply with a body and a file attachment.
      Office.context.mailbox.item.displayReplyForm(
      {
          'htmlBody' : 'hi',
          'attachments' :
          [
              {
                  'type' : Office.MailboxEnums.AttachmentType.File,
                  'name' : 'squirrel.png',
                  'url' : 'http://i.imgur.com/sRgTlGR.jpg'
              }
          ]
      });

      // Reply with a body and an item attachment.
      Office.context.mailbox.item.displayReplyForm(
      {
          'htmlBody' : 'hi',
          'attachments' :
          [
              {
                  'type' : 'item',
                  'name' : 'rand',
                  'itemId' : Office.context.mailbox.item.itemId
              }
          ]
      });

      // Reply with a body, file attachment, item attachment, and a callback.
      Office.context.mailbox.item.displayReplyForm(
      {
          'htmlBody' : 'hi',
          'attachments' :
          [
              {
                  'type' : Office.MailboxEnums.AttachmentType.File,
                  'name' : 'squirrel.png',
                  'url' : 'http://i.imgur.com/sRgTlGR.jpg'
              },
              {
                  'type' : 'item',
                  'name' : 'rand',
                  'itemId' : Office.context.mailbox.item.itemId
              }
          ],
          'callback' : function(asyncResult)
          {
              console.log(asyncResult.value);
          }
      });
      ```
    name: 'displayReplyForm(formData, callback)'
    fullName: 'displayReplyForm(formData, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'displayReplyForm(formData: string | ReplyFormData, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: formData
          description: 'Строка, содержащая текст и HTML-код, представляющие собой основной текст формы ответа. Строка ограничена 32 КБ или объектом [Office. реплиформдата](xref:Outlook.Office.ReplyFormData) , который содержит данные текста или вложений, а также функцию обратного вызова.'
          type:
            - string | ReplyFormData
        - id: callback
          description: 'Необязательно. После выполнения метода функция, переданная в параметре callback, вызывается с помощью одного параметра asyncResult, который является объектом Office. AsyncResult.'
          type:
            - '(asyncResult: Office.AsyncResult<void>) => void'
  - uid: Outlook.Office.AppointmentRead.getEntities
    summary: |-
      Получает сущности, обнаруженные в теле выбранного элемента.

      **Note**: Этот метод не поддерживается в Outlook на iOS или Android.

      \[[Набор API: Mailbox 1,0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      ** [Минимальный уровень](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->разрешений**: ReadItem

      ** [Соответствующий режим](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->Outlook**: участник встречи

      #### <a name="examples"></a>Примеры

      ```javascript
      // The following example accesses the contacts entities in the current item's body.

      var contacts = Office.context.mailbox.item.getEntities().contacts;
      ```
    name: getEntities()
    fullName: getEntities()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getEntities(): Entities;'
      return:
        type:
          - Outlook.Office.Entities
        description: ''
  - uid: Outlook.Office.AppointmentRead.getEntitiesByType
    summary: |-
      Получает массив всех сущностей указанного типа, обнаруженных в теле выбранного элемента.

      **Note**: Этот метод не поддерживается в Outlook на iOS или Android.

      \[[Набор API: Mailbox 1,0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: "** [Минимальный уровень](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->разрешений**: ограниченный\n\n** [Соответствующий режим](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->Outlook**: участник встречи\n\nХотя минимальный уровень разрешений для использования этого метода\_— Restricted, для некоторых типов сущностей требуется доступ на уровне ReadItem, как указано в приведенной ниже таблице.\n\n<table> <tr> <th>Значение entityType</th> <th>Тип объектов в возвращаемом массиве</th> <th>Необходимый уровень разрешений</th> </tr> <tr> <td>Address</td> <td>String</td> <td>Restricted</td> </tr> <tr> <td>Контакт</td> <td>Контакт</td> <td>ReadItem</td> </tr> <tr> <td>EmailAddress</td> <td>String</td> <td>ReadItem</td> </tr> <tr> <td>MeetingSuggestion</td> <td>MeetingSuggestion</td> <td>ReadItem</td> </tr> <tr> <td>PhoneNumber</td> <td>PhoneNumber</td> <td>Restricted</td> </tr> <tr> <td>TaskSuggestion</td> <td>TaskSuggestion</td> <td>ReadItem</td> </tr> <tr> <td>URL-адрес</td> <td>String</td> <td>Restricted</td> </tr> </table>\n\n#### <a name=\"examples\"></a>Примеры\n\n```javascript\n// The following example shows how to access an array of strings that represent\n// postal addresses in the current item's body.\n\n// The initialize function is required for all apps.\nOffice.initialize = function () {\n    // Checks for the DOM to load using the jQuery ready function.\n    $(document).ready(function () {\n        // After the DOM is loaded, app-specific code can run.\n        var item = Office.context.mailbox.item;\n        // Get an array of strings that represent postal addresses in the current item's body.\n        var addresses = item.getEntitiesByType(Office.MailboxEnums.EntityType.Address);\n        // Continue processing the array of addresses.\n    });\n};\n```"
    name: getEntitiesByType(entityType)
    fullName: getEntitiesByType(entityType)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getEntitiesByType(entityType: MailboxEnums.EntityType | string): (string | Contact | MeetingSuggestion | PhoneNumber | TaskSuggestion)[];'
      return:
        type:
          - '(string | Contact | MeetingSuggestion | PhoneNumber | TaskSuggestion)[]'
        description: 'Если значение, переданное в entityType, не является допустимым членом перечисления EntityType, метод возвращает значение null. Если в теле элемента отсутствуют сущности указанного типа, метод возвращает пустой массив. В противном случае тип объектов в возвращаемом массиве зависит от типа сущности, запрошенной в параметре entityType.'
      parameters:
        - id: entityType
          description: Одно из значений перечисления EntityType.
          type:
            - MailboxEnums.EntityType | string
  - uid: Outlook.Office.AppointmentRead.getFilteredEntitiesByName
    summary: |-
      Возвращает известные сущности в выбранном элементе, которые проходят через именованный фильтр, определяемый в XML-файле манифеста.

      Метод getFilteredEntitiesByName возвращает сущности, соответствующие регулярному выражению, которое определяется в элементе правила ItemHasKnownEntity в XML-файле манифеста, с использованием указанного значения элемента FilterName.

      **Note**: Этот метод не поддерживается в Outlook на iOS или Android.

      \[[Набор API: Mailbox 1,0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      ** [Минимальный уровень](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->разрешений**: ReadItem

      ** [Соответствующий режим](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->Outlook**: участник встречи
    name: getFilteredEntitiesByName(name)
    fullName: getFilteredEntitiesByName(name)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getFilteredEntitiesByName(name: string): (string | Contact | MeetingSuggestion | PhoneNumber | TaskSuggestion)[];'
      return:
        type:
          - '(string | Contact | MeetingSuggestion | PhoneNumber | TaskSuggestion)[]'
        description: 'Если в манифесте отсутствует элемент ItemHasKnownEntity со значением элемента FilterName, которое соответствует параметру Name, метод возвращает значение null. Если параметр name имеет значение, соответствующее элементу ItemHasKnownEntity в манифесте, но в текущем элементе нет сущностей, которые совпадают, метод возвращает пустой массив.'
      parameters:
        - id: name
          description: 'Имя элемента правила ItemHasKnownEntity, определяющее фильтр для сравнения.'
          type:
            - string
  - uid: Outlook.Office.AppointmentRead.getRegExMatches
    summary: |-
      Возвращает строковые значения в выбранном элементе, которые соответствуют регулярным выражениям, определенным в XML-файле манифеста.

      Метод getRegExMatches возвращает строки, которые соответствуют регулярным выражениям, определенным в каждом элементе правила ItemHasRegularExpressionMatch или ItemHasKnownEntity в XML-файле манифеста. Для правила ItemHasRegularExpressionMatch соответствующая строка должна содержаться в свойстве элемента, указанного этим правилом. Простой тип PropertyName определяет поддерживаемые свойства.

      Если вы указываете правило ItemHasRegularExpressionMatch для свойства текста элемента, регулярное выражение должно дальше фильтровать текст, вместо того чтобы пытаться вернуть весь текст элемента. Использование регулярного выражения типа .* для получения всего текста элемента не всегда приносит ожидаемые результаты. Вместо этого используйте метод Body. Async для получения всего текста.

      **Note**: Этот метод не поддерживается в Outlook на iOS или Android.

      \[[Набор API: Mailbox 1,0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      ** [Минимальный уровень](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->разрешений**: ReadItem

      ** [Соответствующий режим](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->Outlook**: участник встречи

      #### <a name="examples"></a>Примеры

      ```javascript
      // Consider an add-in manifest has the following `Rule` element:
      //<Rule xsi:type="RuleCollection" Mode="And">
      //  <Rule xsi:type="ItemIs" FormType="Read" ItemType="Message" />
      //  <Rule xsi:type="RuleCollection" Mode="Or">
      //    <Rule xsi:type="ItemHasRegularExpressionMatch" RegExName="fruits" RegExValue="apple|banana|coconut" PropertyName="BodyAsPlaintext" IgnoreCase="true" />
      //    <Rule xsi:type="ItemHasRegularExpressionMatch" RegExName="veggies" RegExValue="tomato|onion|spinach|broccoli" PropertyName="BodyAsPlaintext" IgnoreCase="true" />
      //  </Rule>
      //</Rule>

      // The object returned from `getRegExMatches` would have two properties: `fruits` and `veggies`.
      //{
      //'fruits': ['apple','banana','Banana','coconut'],
      //'veggies': ['tomato','onion','spinach','broccoli']
      //}

      // The following example shows how to access the array of
      // matches for the regular expression rule elements `fruits`
      // and `veggies`, which are specified in the manifest.
      var allMatches = Office.context.mailbox.item.getRegExMatches();
      var fruits = allMatches.fruits;
      var veggies = allMatches.veggies;
      ```
    name: getRegExMatches()
    fullName: getRegExMatches()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getRegExMatches(): any;'
      return:
        type:
          - any
        description: 'Объект, содержащий массив строк, которые соответствуют регулярным выражениям, определяемым в XML-файле манифеста. Имя каждого массива равно соответствующему значению атрибута RegExName соответствующего правила ItemHasRegularExpressionMatch или атрибута FilterName соответствующего правила ItemHasKnownEntity.'
  - uid: Outlook.Office.AppointmentRead.getRegExMatchesByName
    summary: |-
      Возвращает строковые значения в выбранном элементе, которые соответствуют именованному регулярному выражению, определенному в XML-файле манифеста.

      Метод getRegExMatchesByName возвращает строки, соответствующие регулярному выражению, определяемому в элементе правила ItemHasRegularExpressionMatch в XML-файле манифеста, с заданным значением элемента RegExName.

      Если вы указываете правило ItemHasRegularExpressionMatch для свойства текста элемента, регулярное выражение должно дальше фильтровать текст, вместо того чтобы пытаться вернуть весь текст элемента. Использование регулярного выражения типа .* для получения всего текста элемента не всегда приносит ожидаемые результаты.

      **Note**: Этот метод не поддерживается в Outlook на iOS или Android.

      \[[Набор API: Mailbox 1,0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      ** [Минимальный уровень](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->разрешений**: ReadItem

      ** [Соответствующий режим](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->Outlook**: участник встречи

      #### <a name="examples"></a>Примеры

      ```javascript
      // Consider an add-in manifest has the following `Rule` element:
      //<Rule xsi:type="RuleCollection" Mode="And">
      //  <Rule xsi:type="ItemIs" FormType="Read" ItemType="Message" />
      //  <Rule xsi:type="RuleCollection" Mode="Or">
      //    <Rule xsi:type="ItemHasRegularExpressionMatch" RegExName="fruits" RegExValue="apple|banana|coconut" PropertyName="BodyAsPlaintext" IgnoreCase="true" />
      //    <Rule xsi:type="ItemHasRegularExpressionMatch" RegExName="veggies" RegExValue="tomato|onion|spinach|broccoli" PropertyName="BodyAsPlaintext" IgnoreCase="true" />
      //  </Rule>
      //</Rule>

      // The object returned from `getRegExMatches` would have two properties: `fruits` and `veggies`.
      //{
      //'fruits': ['apple','banana','Banana','coconut'],
      //'veggies': ['tomato','onion','spinach','broccoli']
      //}

      var fruits = Office.context.mailbox.item.getRegExMatchesByName("fruits");
      var veggies = Office.context.mailbox.item.getRegExMatchesByName("veggies");
      ```
    name: getRegExMatchesByName(name)
    fullName: getRegExMatchesByName(name)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getRegExMatchesByName(name: string): string[];'
      return:
        type:
          - 'string[]'
        description: 'Массив строк, соответствующих регулярному выражению, определяемому в XML-файле манифеста.'
      parameters:
        - id: name
          description: 'Имя элемента правила ItemHasRegularExpressionMatch, определяющее фильтр для сравнения.'
          type:
            - string
  - uid: Outlook.Office.AppointmentRead.getSelectedEntities
    summary: |-
      Возвращает сущности, найденные в выделенном совпадении, выбранном пользователем. Выделенные совпадения применяются к контекстным надстройкам.

      **Note**: Этот метод не поддерживается в Outlook на iOS или Android.

      \[[Набор API: Mailbox 1,6](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      ** [Минимальный уровень](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->разрешений**: ReadItem

      ** [Соответствующий режим](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->Outlook**: участник встречи

      #### <a name="examples"></a>Примеры

      ```javascript
      // The following example accesses the addresses entities in the highlighted
      // match selected by the user.
      var addresses = Office.context.mailbox.item.getSelectedEntities().addresses;
      ```
    name: getSelectedEntities()
    fullName: getSelectedEntities()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getSelectedEntities(): Entities;'
      return:
        type:
          - Outlook.Office.Entities
        description: ''
  - uid: Outlook.Office.AppointmentRead.getSelectedRegExMatches
    summary: |-
      Возвращает строковые значения в выделенном совпадении, которые соответствуют регулярным выражениям, определенным в XML-файле манифеста. Выделенные совпадения применяются к контекстным надстройкам.

      Метод Жетселектедрежексматчес возвращает строки, которые совпадают с регулярным выражением, определенным в каждом элементе Rule ItemHasRegularExpressionMatch или ItemHasKnownEntity в XML-файле манифеста. Для правила ItemHasRegularExpressionMatch соответствующая строка должна содержаться в свойстве элемента, указанного этим правилом. Простой тип PropertyName определяет поддерживаемые свойства.

      Если вы указываете правило ItemHasRegularExpressionMatch для свойства текста элемента, регулярное выражение должно дальше фильтровать текст, вместо того чтобы пытаться вернуть весь текст элемента. Использование регулярного выражения типа .* для получения всего текста элемента не всегда приносит ожидаемые результаты. Вместо этого используйте метод Body. Async для получения всего текста.

      **Note**: Этот метод не поддерживается в Outlook на iOS или Android.

      \[[Набор API: Mailbox 1,6](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      ** [Минимальный уровень](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->разрешений**: ReadItem

      ** [Соответствующий режим](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->Outlook**: участник встречи

      #### <a name="examples"></a>Примеры

      ```javascript
      // The following example shows how to access the array of matches for the
      // regular expression rule elements `fruits` and `veggies`, which are
      // specified in the manifest.
      var selectedMatches = Office.context.mailbox.item.getSelectedRegExMatches();
      var fruits = selectedMatches.fruits;
      var veggies = selectedMatches.veggies;
      ```
    name: getSelectedRegExMatches()
    fullName: getSelectedRegExMatches()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getSelectedRegExMatches(): any;'
      return:
        type:
          - any
        description: 'Объект, содержащий массив строк, которые соответствуют регулярным выражениям, определяемым в XML-файле манифеста. Имя каждого массива равно соответствующему значению атрибута RegExName соответствующего правила ItemHasRegularExpressionMatch или атрибута FilterName соответствующего правила ItemHasKnownEntity.'
  - uid: Outlook.Office.AppointmentRead.loadCustomPropertiesAsync
    summary: |-
      Асинхронно загружает настраиваемые свойства для надстройки для выбранного элемента.

      Настраиваемые свойства сохраняются в виде пар "ключ-значение" для каждого приложения и каждого элемента. Этот метод возвращает объект CustomProperties в обратном вызове, который предоставляет методы для доступа к настраиваемым свойствам, относящимся к текущему элементу и текущей надстройке. Настраиваемые свойства не шифруются для элемента, поэтому этот способ хранения не является безопасным.

      Настраиваемые свойства предоставляются в виде объекта CustomProperties в свойстве asyncResult. Value. Этот объект позволяет получить, задать и удалить настраиваемые свойства для элемента, а также сохранить изменения, внесенные в набор настраиваемых свойств, на сервере.

      \[[Набор API: Mailbox 1,0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      ** [Минимальный уровень](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->разрешений**: ReadItem

      ** [Соответствующий режим](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->Outlook**: участник встречи
    name: 'loadCustomPropertiesAsync(callback, userContext)'
    fullName: 'loadCustomPropertiesAsync(callback, userContext)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'loadCustomPropertiesAsync(callback: (asyncResult: Office.AsyncResult<CustomProperties>) => void, userContext?: any): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: callback
          description: 'После выполнения метода функция, переданная в параметре callback, вызывается с помощью одного параметра типа Office. AsyncResult.'
          type:
            - '(asyncResult: Office.AsyncResult<CustomProperties>) => void'
        - id: userContext
          description: 'Необязательно. Разработчики могут указать любой объект, к которому необходимо получить доступ, в функции обратного вызова. Доступ к этому объекту можно получить с помощью свойства asyncResult. asyncContext в функции обратного вызова.'
          type:
            - any
  - uid: Outlook.Office.AppointmentRead.removeHandlerAsync
    summary: |-
      Удаляет обработчиков для поддерживаемого типа события. **Note**: события доступны только в области задач.

      В настоящее время поддерживаются типы событий`Office.EventType.AppointmentTimeChanged`<!-- -->, `Office.EventType.RecipientsChanged`<!-- -->, а`Office.EventType.RecurrenceChanged`<!-- -->.

      \[[Набор API: Mailbox 1,7](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      ** [Минимальный уровень](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->разрешений**: ReadItem

      ** [Соответствующий режим](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->Outlook**: участник встречи
    name: 'removeHandlerAsync(eventType, options, callback)'
    fullName: 'removeHandlerAsync(eventType, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'removeHandlerAsync(eventType: Office.EventType | string, options?: Office.AsyncContextOptions, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: eventType
          description: 'Событие, которое должно отменить обработчик.'
          type:
            - Office.EventType | string
        - id: options
          description: 'Необязательно. Объектный литерал, содержащий одно или несколько из указанных ниже свойств. asyncContext: разработчики могут предоставить любой объект, к которому необходимо получить доступ, в методе обратного вызова.'
          type:
            - Office.AsyncContextOptions
        - id: callback
          description: 'Необязательно. После выполнения метода функция, переданная в параметре callback, вызывается с помощью одного параметра asyncResult, который является объектом Office. AsyncResult.'
          type:
            - '(asyncResult: Office.AsyncResult<void>) => void'
  - uid: Outlook.Office.AppointmentRead.removeHandlerAsync_1
    summary: |-
      Удаляет обработчиков для поддерживаемого типа события. **Note**: события доступны только в области задач.

      В настоящее время поддерживаются типы событий`Office.EventType.AppointmentTimeChanged`<!-- -->, `Office.EventType.RecipientsChanged`<!-- -->, а`Office.EventType.RecurrenceChanged`<!-- -->.

      \[[Набор API: Mailbox 1,7](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      ** [Минимальный уровень](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->разрешений**: ReadItem

      ** [Соответствующий режим](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->Outlook**: участник встречи
    name: 'removeHandlerAsync(eventType, callback)'
    fullName: 'removeHandlerAsync(eventType, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'removeHandlerAsync(eventType: Office.EventType | string, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: eventType
          description: 'Событие, которое должно отменить обработчик.'
          type:
            - Office.EventType | string
        - id: callback
          description: 'Необязательно. После выполнения метода функция, переданная в параметре callback, вызывается с помощью одного параметра asyncResult, который является объектом Office. AsyncResult.'
          type:
            - '(asyncResult: Office.AsyncResult<void>) => void'
  - uid: Outlook.Office.AppointmentRead.attachments
    summary: |-
      Получает вложения элемента в виде массива.

      \[[Набор API: Mailbox 1,0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      ** [Минимальный уровень](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->разрешений**: ReadItem

      ** [Соответствующий режим](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->Outlook**: участник встречи

      **Замечание**: некоторые типы файлов блокируются в Outlook из-за возможных проблем с безопасностью, поэтому они не возвращаются. Дополнительные сведения см в разделе [заблокированные вложения в Outlook](https://support.office.com/article/Blocked-attachments-in-Outlook-434752E1-02D3-4E90-9124-8B81E49A8519)<!-- -->.

      #### <a name="examples"></a>Примеры

      ```javascript
      // The following code builds an HTML string with details of all attachments on the current item.
      var item = Office.context.mailbox.item;
      var outputString = "";

      if (item.attachments.length > 0) {
          for (i = 0 ; i < item.attachments.length ; i++) {
              var attachment = item.attachments[i];
              outputString += "<BR>" + i + ". Name: ";
              outputString += attachment.name;
              outputString += "<BR>ID: " + attachment.id;
              outputString += "<BR>contentType: " + attachment.contentType;
              outputString += "<BR>size: " + attachment.size;
              outputString += "<BR>attachmentType: " + attachment.attachmentType;
              outputString += "<BR>isInline: " + attachment.isInline;
          }
      }

      console.log(outputString);
      ```
    name: attachments
    fullName: attachments
    langs:
      - typeScript
    type: property
    syntax:
      content: 'attachments: AttachmentDetails[];'
      return:
        type:
          - 'AttachmentDetails[]'
  - uid: Outlook.Office.AppointmentRead.body
    summary: |-
      Получает объект, предоставляющий методы для работы с основным текстом элемента.

      \[[Набор API: Mailbox 1,1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      ** [Минимальный уровень](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->разрешений**: ReadItem

      ** [Соответствующий режим](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->Outlook**: участник встречи

      #### <a name="examples"></a>Примеры

      ```javascript
      // This example gets the body of the item as plain text.
      Office.context.mailbox.item.body.getAsync(
          "text",
          { asyncContext: "This is passed to the callback" },
          function callback(result) {
              // Do something with the result.
          });

      // The following is an example of the result parameter passed to the callback function.
      {
          "value": "TEXT of whole body (including threads below)",
          "status": "succeeded",
          "asyncContext": "This is passed to the callback"
      }
      ```
    name: body
    fullName: body
    langs:
      - typeScript
    type: property
    syntax:
      content: 'body: Body;'
      return:
        type:
          - Outlook.Office.Body
  - uid: Outlook.Office.AppointmentRead.dateTimeCreated
    summary: |-
      Получает дату и время создания элемента.

      \[[Набор API: Mailbox 1,0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      ** [Минимальный уровень](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->разрешений**: ReadItem

      ** [Соответствующий режим](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->Outlook**: участник встречи

      #### <a name="examples"></a>Примеры

      ```javascript
      var dateTimeCreated = Office.context.mailbox.item.dateTimeCreated;
      console.log("Date and time created: " + dateTimeCreated);
      ```
    name: dateTimeCreated
    fullName: dateTimeCreated
    langs:
      - typeScript
    type: property
    syntax:
      content: 'dateTimeCreated: Date;'
      return:
        type:
          - Date
  - uid: Outlook.Office.AppointmentRead.dateTimeModified
    summary: |-
      Получает дату и время последнего изменения элемента.

      \[[Набор API: Mailbox 1,0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      ** [Минимальный уровень](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->разрешений**: ReadItem

      ** [Соответствующий режим](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->Outlook**: участник встречи

      **Примечание**: этот элемент не поддерживается в Outlook на iOS или Android.

      #### <a name="examples"></a>Примеры

      ```javascript
      var dateTimeModified = Office.context.mailbox.item.dateTimeModified;
      console.log("Date and time modified: " + dateTimeModified);
      ```
    name: dateTimeModified
    fullName: dateTimeModified
    langs:
      - typeScript
    type: property
    syntax:
      content: 'dateTimeModified: Date;'
      return:
        type:
          - Date
  - uid: Outlook.Office.AppointmentRead.end
    summary: |-
      Получает дату и время окончания встречи.

      Свойство End — это объект Date, выраженный как значение даты и времени в формате всемирного координированного времени (UTC). С помощью метода convertToLocalClientTime можно преобразовать значение свойства End в локальную дату и время клиента.

      При использовании метода Time. setAsync для задания времени окончания необходимо использовать метод convertToUtcClientTime, чтобы преобразовать местное время в клиенте на время в формате UTC для сервера.

      \[[Набор API: Mailbox 1,0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      ** [Минимальный уровень](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->разрешений**: ReadItem

      ** [Соответствующий режим](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->Outlook**: участник встречи

      #### <a name="examples"></a>Примеры

      ```javascript
      var end = Office.context.mailbox.item.end;
      console.log("Appointment end: " + end);
      ```
    name: end
    fullName: end
    langs:
      - typeScript
    type: property
    syntax:
      content: 'end: Date;'
      return:
        type:
          - Date
  - uid: Outlook.Office.AppointmentRead.itemClass
    summary: |-
      Получает класс элемента веб-служб Exchange для выбранного элемента.

      Можно создавать настраиваемые классы сообщения, расширяющие класс сообщения по умолчанию, например, настраиваемый класс сообщения о встрече IPM.Appointment.Contoso.

      \[[Набор API: Mailbox 1,0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      ** [Минимальный уровень](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->разрешений**: ReadItem

      ** [Соответствующий режим](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->Outlook**: участник встречи

      Свойство itemClass указывает класс сообщения выбранного элемента. Ниже приводятся классы сообщения по умолчанию для элемента сообщения или встречи.

      <table> <tr> <th>Тип</th> <th>Описание</th> <th>Класс элемента</th> </tr> <tr> <td>Элементы встречи</td> <td>Это элементы календаря для класса элемента IPM. Встреча или IPM. Встреча. вхождение.</td> <td>Класс. Встреча, IPM. Встреча. вхождение</td> </tr> <tr> <td>Элементы сообщения</td> <td>Сюда входят сообщения электронной почты с классом сообщения по умолчанию IPM.Note, а также приглашения на собрания, ответы на приглашения и отмены собраний, использующие IPM.Schedule.Meeting в качестве базового класса сообщения.</td> <td>Класс. Обратите внимание, что IPM. Schedule. Meeting. Request, IPM. Schedule. Meeting. unof, IPM. Schedule. Meeting. POS, IPM. Schedule. Meeting. домик, IPM. Запланировать собрание. отменено</td> </tr> </table>

      #### <a name="examples"></a>Примеры

      ```javascript
      var itemClass = Office.context.mailbox.item.itemClass;
      console.log("Item class: " + itemClass);
      ```
    name: itemClass
    fullName: itemClass
    langs:
      - typeScript
    type: property
    syntax:
      content: 'itemClass: string;'
      return:
        type:
          - string
  - uid: Outlook.Office.AppointmentRead.itemId
    summary: |-
      Получает идентификатор элемента веб-служб Exchange для текущего элемента.

      Свойство itemId недоступно в режиме создания. Если требуется идентификатор элемента, метод saveAsync можно использовать для сохранения элемента в хранилище, которое будет возвращать идентификатор элемента в параметре asyncResult. Value в функции обратного вызова.

      **Note**: идентификатор, возвращаемый свойством ItemId, совпадает с идентификатором элемента веб-служб Exchange. Свойство itemId не совпадает с ИДЕНТИФИКАТОРом записи Outlook или ИДЕНТИФИКАТОРом, используемым REST API Outlook. Прежде чем совершать вызовы REST API, используя это значение, его необходимо преобразовать с помощью Office.context.mailbox.convertToRestId. Дополнительные сведения см. в статье [Использование REST API Outlook из надстройки Outlook](https://docs.microsoft.com/outlook/add-ins/use-rest-api#get-the-item-id)<!-- -->.

      \[[Набор API: Mailbox 1,0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      ** [Минимальный уровень](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->разрешений**: ReadItem

      ** [Соответствующий режим](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->Outlook**: участник встречи

      #### <a name="examples"></a>Примеры

      ```javascript
      // The following code checks for the presence of an item
      // identifier. If the `itemId` property returns `null` or
      // `undefined`, it saves the item to the store and gets the
      // item identifier from the asynchronous result.
      var itemId = Office.context.mailbox.item.itemId;
      if (itemId === null || itemId == undefined) {
          Office.context.mailbox.item.saveAsync(function(result) {
              itemId = result.value;
          });
      }
      ```
    name: itemId
    fullName: itemId
    langs:
      - typeScript
    type: property
    syntax:
      content: 'itemId: string;'
      return:
        type:
          - string
  - uid: Outlook.Office.AppointmentRead.itemType
    summary: |-
      Получает тип элемента, который представляет экземпляр.

      Свойство itemType возвращает одно из значений перечисления ItemType, которое указывает, является ли экземпляр объекта Item сообщением или встречей.

      \[[Набор API: Mailbox 1,0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      ** [Минимальный уровень](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->разрешений**: ReadItem

      ** [Соответствующий режим](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->Outlook**: участник встречи

      #### <a name="examples"></a>Примеры

      ```javascript
      if (Office.context.mailbox.item.itemType === Office.MailboxEnums.ItemType.Appointment) {
          // Do something.
      } else {
          // Do something else.
      }
      ```
    name: itemType
    fullName: itemType
    langs:
      - typeScript
    type: property
    syntax:
      content: 'itemType: MailboxEnums.ItemType | string;'
      return:
        type:
          - MailboxEnums.ItemType | string
  - uid: Outlook.Office.AppointmentRead.location
    summary: |-
      Получает место встречи.

      Свойство Location возвращает строку, содержащую сведения о месте встречи.

      \[[Набор API: Mailbox 1,0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      ** [Минимальный уровень](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->разрешений**: ReadItem

      ** [Соответствующий режим](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->Outlook**: участник встречи

      #### <a name="examples"></a>Примеры

      ```javascript
      var location = Office.context.mailbox.item.location;
      console.log("location: " + location);
      ```
    name: location
    fullName: location
    langs:
      - typeScript
    type: property
    syntax:
      content: 'location: string;'
      return:
        type:
          - string
  - uid: Outlook.Office.AppointmentRead.normalizedSubject
    summary: |-
      Получает тему элемента со всеми удаленными префиксами (включая RE: и FWD:).

      Свойство normalizedSubject получает тему элемента со всеми стандартными префиксами (например, RE: и FW:). , добавленные программами электронной почты. Чтобы получить тему элемента с неизменными префиксами, используйте свойство Subject.

      \[[Набор API: Mailbox 1,0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      ** [Минимальный уровень](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->разрешений**: ReadItem

      ** [Соответствующий режим](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->Outlook**: участник встречи

      #### <a name="examples"></a>Примеры

      ```javascript
      var normalizedSubject = Office.context.mailbox.item.normalizedSubject;
      console.log("Normalized subject: " + normalizedSubject);
      ```
    name: normalizedSubject
    fullName: normalizedSubject
    langs:
      - typeScript
    type: property
    syntax:
      content: 'normalizedSubject: string;'
      return:
        type:
          - string
  - uid: Outlook.Office.AppointmentRead.notificationMessages
    summary: |-
      Получает сообщения уведомления для элемента.

      \[[Набор API: Mailbox 1,3](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      ** [Минимальный уровень](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->разрешений**: ReadItem

      ** [Соответствующий режим](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->Outlook**: участник встречи

      #### <a name="examples"></a>Примеры

      ```javascript
      // Get all notifications.
      Office.context.mailbox.item.notificationMessages.getAllAsync(
          function (asyncResult) {
              console.log(JSON.stringify(asyncResult));
          }
      );
      ```
    name: notificationMessages
    fullName: notificationMessages
    langs:
      - typeScript
    type: property
    syntax:
      content: 'notificationMessages: NotificationMessages;'
      return:
        type:
          - Outlook.Office.NotificationMessages
  - uid: Outlook.Office.AppointmentRead.optionalAttendees
    summary: |-
      Предоставляет доступ к необязательным участникам события. Тип объекта и уровень доступа зависят от режима текущего элемента.

      Свойство optionalAttendees возвращает массив, содержащий объект [Office. EmailAddressDetails](xref:Outlook.Office.EmailAddressDetails) для каждого необязательного участника собрания.

      \[[Набор API: Mailbox 1,0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      ** [Минимальный уровень](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->разрешений**: ReadItem

      ** [Соответствующий режим](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->Outlook**: участник встречи

      #### <a name="examples"></a>Примеры

      ```javascript
      var optionalAttendees = Office.context.mailbox.item.optionalAttendees;
      console.log("Optional attendees: " + JSON.stringify(optionalAttendees));
      ```
    name: optionalAttendees
    fullName: optionalAttendees
    langs:
      - typeScript
    type: property
    syntax:
      content: 'optionalAttendees: EmailAddressDetails[];'
      return:
        type:
          - 'EmailAddressDetails[]'
  - uid: Outlook.Office.AppointmentRead.organizer
    summary: |-
      Получает электронный адрес организатора указанного собрания.

      \[[Набор API: Mailbox 1,0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      ** [Минимальный уровень](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->разрешений**: ReadItem

      ** [Соответствующий режим](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->Outlook**: участник встречи

      #### <a name="examples"></a>Примеры

      ```javascript
      var organizerName = Office.context.mailbox.item.organizer.displayName;
      var organizerAddress = Office.context.mailbox.item.organizer.emailAddress;
      console.log("Organizer: " + organizerName + " (" + organizerAddress + ")");
      ```
    name: organizer
    fullName: organizer
    langs:
      - typeScript
    type: property
    syntax:
      content: 'organizer: EmailAddressDetails;'
      return:
        type:
          - Outlook.Office.EmailAddressDetails
  - uid: Outlook.Office.AppointmentRead.recurrence
    summary: |-
      Получает шаблон повторения встречи. Получает шаблон повторения приглашения на собрание.

      Свойство повторение возвращает объект повторения для повторяющихся встреч или приглашений на собрания, если элемент представляет собой серию или экземпляр в ряду. `null`возвращается для отдельных встреч и приглашений на собрание для отдельных встреч.

      **Note**: приглашения на собрания имеют значение itemClass, равное IPM. Schedule. Meeting. Request.

      **Note**: Если объект повторения имеет значение null, это указывает на то, что объект является одной встречей или приглашением на собрание для одной встречи, а не частью ряда.

      \[[Набор API: Mailbox 1,7](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      ** [Минимальный уровень](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->разрешений**: ReadItem

      ** [Соответствующий режим](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->Outlook**: участник встречи

      #### <a name="examples"></a>Примеры

      ```javascript
      var recurrence = Office.context.mailbox.item.recurrence;
      console.log("Recurrence: " + JSON.stringify(recurrence));
      ```
    name: recurrence
    fullName: recurrence
    langs:
      - typeScript
    type: property
    syntax:
      content: 'recurrence: Recurrence;'
      return:
        type:
          - Outlook.Office.Recurrence
  - uid: Outlook.Office.AppointmentRead.requiredAttendees
    summary: |-
      Предоставляет доступ к обязательным участникам события. Тип объекта и уровень доступа зависят от режима текущего элемента.

      Свойство requiredAttendees возвращает массив, содержащий объект [Office. EmailAddressDetails](xref:Outlook.Office.EmailAddressDetails) для каждого обязательного участника собрания.

      \[[Набор API: Mailbox 1,0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      ** [Минимальный уровень](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->разрешений**: ReadItem

      ** [Соответствующий режим](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->Outlook**: участник встречи

      #### <a name="examples"></a>Примеры

      ```javascript
      var requiredAttendees = Office.context.mailbox.item.requiredAttendees;
      console.log("Required attendees: " + JSON.stringify(requiredAttendees));
      ```
    name: requiredAttendees
    fullName: requiredAttendees
    langs:
      - typeScript
    type: property
    syntax:
      content: 'requiredAttendees: EmailAddressDetails[];'
      return:
        type:
          - 'EmailAddressDetails[]'
  - uid: Outlook.Office.AppointmentRead.seriesId
    summary: |-
      Получает идентификатор ряда, к которому принадлежит экземпляр.

      В Outlook в Интернете и на настольных клиентах seriesId возвращает идентификатор веб-служб Exchange (EWS) родительского элемента (ряда), к которому принадлежит этот элемент. Однако в iOS и Android seriesId возвращает идентификатор REST родительского элемента.

      **Note**: идентификатор, возвращаемый свойством seriesId, совпадает с идентификатором элемента веб-служб Exchange. Свойство seriesId не совпадает с идентификаторами Outlook, используемыми в REST API Outlook. Прежде чем совершать вызовы REST API, используя это значение, его необходимо преобразовать с помощью Office.context.mailbox.convertToRestId. Дополнительные сведения см. в статье [Использование REST API Outlook из надстройки Outlook](https://docs.microsoft.com/outlook/add-ins/use-rest-api)<!-- -->.

      Свойство seriesId возвращает значение NULL для элементов, не имеющих родительских элементов, таких как отдельные встречи, элементы ряда или приглашения на собрание, и возвращает значение undefine для любых других элементов, которые не являются приглашениями на собрания.

      \[[Набор API: Mailbox 1,7](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      ** [Минимальный уровень](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->разрешений**: ReadItem

      ** [Соответствующий режим](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->Outlook**: участник встречи

      #### <a name="examples"></a>Примеры

      ```javascript
      var seriesId = Office.context.mailbox.item.seriesId;

      // The seriesId property returns null for items that do
      // not have parent items (such as single appointments,
      // series items, or meeting requests) and returns
      // undefined for messages that are not meeting requests.
      var isSeriesInstance = (seriesId != null);
      console.log("SeriesId is " + seriesId 
          + " and isSeriesInstance is " + isSeriesInstance);
      ```
    name: seriesId
    fullName: seriesId
    langs:
      - typeScript
    type: property
    syntax:
      content: 'seriesId: string;'
      return:
        type:
          - string
  - uid: Outlook.Office.AppointmentRead.start
    summary: |-
      Получает дату и время начала встречи.

      Свойство Start — это объект Date, выраженный как значение даты и времени в формате UTC. Можно использовать метод convertToLocalClientTime для преобразования значения в локальную дату и время клиента.

      \[[Набор API: Mailbox 1,0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      ** [Минимальный уровень](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->разрешений**: ReadItem

      ** [Соответствующий режим](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->Outlook**: участник встречи

      #### <a name="examples"></a>Примеры

      ```javascript
      var start = Office.context.mailbox.item.start;
      console.log("Appointment start: " + JSON.stringify(start));
      ```
    name: start
    fullName: start
    langs:
      - typeScript
    type: property
    syntax:
      content: 'start: Date;'
      return:
        type:
          - Date
  - uid: Outlook.Office.AppointmentRead.subject
    summary: |-
      Получает описание, которое отображается в поле subject элемента.

      Свойство Subject Возвращает или задает всю тему элемента, как это было отправлено сервером электронной почты.

      Свойство Subject возвращает строку. Используйте свойство normalizedSubject, чтобы получить тему за вычетом всех начальных префиксов, таких как RE: и FW:.

      \[[Набор API: Mailbox 1,0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      ** [Минимальный уровень](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->разрешений**: ReadItem

      ** [Соответствующий режим](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->Outlook**: участник встречи

      #### <a name="examples"></a>Примеры

      ```javascript
      // The following JavaScript code example shows how to access the
      // `subject` property of the current item in Outlook.

      // The initialize function is required for all apps.
      Office.initialize = function () {
          // Checks for the DOM to load using the jQuery ready function.
          $(document).ready(function () {
              // After the DOM is loaded, app-specific code can run.
              var item = Office.context.mailbox.item;
              var subject = item.subject;
              // Continue with processing the subject of the
              // current item, which can be a message or appointment.
          });
      };
      ```
    name: subject
    fullName: subject
    langs:
      - typeScript
    type: property
    syntax:
      content: 'subject: string;'
      return:
        type:
          - string