### YamlMime:UniversalReference
items:
  - uid: 'outlook!Office.MessageCompose:interface'
    summary: |-
      Режим создания сообщения для [Office. Context. Mailbox. Item](xref:outlook!Office.Item:interface)<!-- -->.

      **Важно!** это внутренний объект Outlook, который не предоставляется напрямую через существующие интерфейсы. Вы должны рассматривать этот режим как`Office.context.mailbox.item`<!-- -->. Для получения дополнительных сведений обратитесь к странице [объектной модели](https://docs.microsoft.com/office/dev/add-ins/reference/objectmodel/requirement-set-1.7/office.context.mailbox.item) .

      Родительские интерфейсы:

      - [итемкомпосе](xref:outlook!Office.ItemCompose:interface)

      - [Сообщение](xref:outlook!Office.Message:interface)
    name: Office.MessageCompose
    fullName: Office.MessageCompose
    langs:
      - typeScript
    type: interface
    extends:
      - 'outlook!Office.Message:interface'
      - 'outlook!Office.ItemCompose:interface'
    package: outlook!
    children:
      - 'outlook!Office.MessageCompose#addFileAttachmentAsync:member(1)'
      - 'outlook!Office.MessageCompose#addFileAttachmentAsync:member(2)'
      - 'outlook!Office.MessageCompose#addHandlerAsync:member(1)'
      - 'outlook!Office.MessageCompose#addHandlerAsync:member(2)'
      - 'outlook!Office.MessageCompose#addItemAttachmentAsync:member(1)'
      - 'outlook!Office.MessageCompose#addItemAttachmentAsync:member(2)'
      - 'outlook!Office.MessageCompose#bcc:member'
      - 'outlook!Office.MessageCompose#body:member'
      - 'outlook!Office.MessageCompose#cc:member'
      - 'outlook!Office.MessageCompose#close:member(1)'
      - 'outlook!Office.MessageCompose#conversationId:member'
      - 'outlook!Office.MessageCompose#from:member'
      - 'outlook!Office.MessageCompose#getSelectedDataAsync:member(1)'
      - 'outlook!Office.MessageCompose#getSelectedDataAsync:member(2)'
      - 'outlook!Office.MessageCompose#itemType:member'
      - 'outlook!Office.MessageCompose#loadCustomPropertiesAsync:member(1)'
      - 'outlook!Office.MessageCompose#notificationMessages:member'
      - 'outlook!Office.MessageCompose#removeAttachmentAsync:member(1)'
      - 'outlook!Office.MessageCompose#removeAttachmentAsync:member(2)'
      - 'outlook!Office.MessageCompose#removeHandlerAsync:member(1)'
      - 'outlook!Office.MessageCompose#removeHandlerAsync:member(2)'
      - 'outlook!Office.MessageCompose#saveAsync:member(1)'
      - 'outlook!Office.MessageCompose#saveAsync:member(2)'
      - 'outlook!Office.MessageCompose#seriesId:member'
      - 'outlook!Office.MessageCompose#setSelectedDataAsync:member(1)'
      - 'outlook!Office.MessageCompose#setSelectedDataAsync:member(2)'
      - 'outlook!Office.MessageCompose#subject:member'
      - 'outlook!Office.MessageCompose#to:member'
  - uid: 'outlook!Office.MessageCompose#addFileAttachmentAsync:member(1)'
    summary: |-
      Добавляет файл в сообщение или встречу в качестве вложения.

      Метод `addFileAttachmentAsync` передает файл по указанному универсальному коду ресурса (URI) и вкладывает его в элемент в форме создания.

      Идентификатор можно использовать с методом `removeAttachmentAsync`, чтобы удалить вложение, добавленное во время текущего сеанса.

      **Важно!** в последних сборках Outlook в Windows возникла ошибка, которая ошибочно добавляет `Authorization: Bearer` заголовок к этому действию (независимо от того, используется ли этот API или пользовательский интерфейс Outlook). Чтобы обойти эту проблему, вы можете попробовать использовать API `addFileAttachmentFromBase64` , который появился в наборе требований 1,8.

      \[[Набор API: Mailbox 1,1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      ** [Минимальный уровень](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->разрешений**:`ReadWriteItem`

      ** [Соответствующий режим](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->Outlook**: создание сообщения

      **Ошибки**:

      - `AttachmentSizeExceeded`<!-- -->: Вложение больше, чем разрешено.

      - `FileTypeNotSupported`<!-- -->: Вложение имеет недопустимое расширение.

      - `NumberOfAttachmentsExceeded`<!-- -->: Сообщение или встреча содержит слишком много вложений.

      #### <a name="examples"></a>Примеры

      ```javascript
      function callback(result) {
          if (result.error) {
              console.log(result.error);
          } else {
              console.log("Attachment added");
          }
      }

      function addAttachment() {
          // The values in asyncContext can be accessed in the callback.
          var options = { 'asyncContext': { var1: 1, var2: 2 } };

          var attachmentURL = "https://contoso.com/rtm/icon.png";
          Office.context.mailbox.item.addFileAttachmentAsync(attachmentURL, attachmentURL, options, callback);
      }
      ```
      ```javascript
      // The following example adds an image file as an inline attachment and
      // references the attachment in the message body.
      Office.context.mailbox.item.addFileAttachmentAsync(
          "http://i.imgur.com/WJXklif.png",
          "cute_bird.png",
          {
              isInline: true
          },
          function (asyncResult) {
              Office.context.mailbox.item.body.setAsync(
                  "<p>Here's a cute bird!</p><img src='cid:cute_bird.png'>",
                  {
                      "coercionType": "html"
                  },
                  function (asyncResult) {
                      // Do something here.
                  });
          });
      ```
      ```javascript
      var attachmentUrl = $("#attachmentUrl").val();
      Office.context.mailbox.item.addFileAttachmentAsync(
          attachmentUrl,
          getFileName(attachmentUrl),
          { "asyncContext" : { var1: 1, var2: true } },
          function(result) { console.log(result); });
      ```
    name: 'addFileAttachmentAsync(uri, attachmentName, options, callback)'
    fullName: 'addFileAttachmentAsync(uri, attachmentName, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addFileAttachmentAsync(uri: string, attachmentName: string, options?: Office.AsyncContextOptions & { isInline: boolean }, callback?: (asyncResult: Office.AsyncResult<string>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: uri
          description: "Универсальный код ресурса (URI), представляющий расположение файла, который нужно вложить в сообщение или встречу. Максимальная длина\_— 2048 символов."
          type:
            - string
        - id: attachmentName
          description: "Имя вложения, которое отображается при передаче вложения. Максимальная длина\_— 255 символов."
          type:
            - string
        - id: options
          description: 'Необязательно. Объектный литерал, содержащий одно или несколько из указанных ниже свойств. `asyncContext`<!-- -->: Разработчики могут предоставить любой объект, к которому необходимо получить доступ, в методе обратного вызова. `isInline`<!-- -->: При значении true указывает, что вложение будет отображаться встроенным в тексте сообщения и не должно отображаться в списке вложений.'
          type:
            - 'outlook!Office.MessageCompose#addFileAttachmentAsync~0:complex'
        - id: callback
          description: 'Необязательно. После выполнения метода функция, переданная в `callback` параметре, вызывается с помощью одного параметра типа`Office.AsyncResult`<!-- -->. После успешного выполнения идентификатор вложения будет представлен в свойстве `asyncResult.value`. Если добавить вложение не удастся, объект `asyncResult` будет содержать объект `Error` с описанием ошибки.'
          type:
            - 'outlook!Office.MessageCompose#addFileAttachmentAsync~1:complex'
  - uid: 'outlook!Office.MessageCompose#addFileAttachmentAsync:member(2)'
    summary: |-
      Добавляет файл в сообщение или встречу в качестве вложения.

      Метод `addFileAttachmentAsync` передает файл по указанному универсальному коду ресурса (URI) и вкладывает его в элемент в форме создания.

      Идентификатор можно использовать с методом `removeAttachmentAsync`, чтобы удалить вложение, добавленное во время текущего сеанса.

      **Важно!** в последних сборках Outlook в Windows возникла ошибка, которая ошибочно добавляет `Authorization: Bearer` заголовок к этому действию (независимо от того, используется ли этот API или пользовательский интерфейс Outlook). Чтобы обойти эту проблему, вы можете попробовать использовать API `addFileAttachmentFromBase64` , который появился в наборе требований 1,8.

      \[[Набор API: Mailbox 1,1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      ** [Минимальный уровень](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->разрешений**:`ReadWriteItem`

      ** [Соответствующий режим](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->Outlook**: создание сообщения

      **Ошибки**:

      - `AttachmentSizeExceeded`<!-- -->: Вложение больше, чем разрешено.

      - `FileTypeNotSupported`<!-- -->: Вложение имеет недопустимое расширение.

      - `NumberOfAttachmentsExceeded`<!-- -->: Сообщение или встреча содержит слишком много вложений.
    name: 'addFileAttachmentAsync(uri, attachmentName, callback)'
    fullName: 'addFileAttachmentAsync(uri, attachmentName, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addFileAttachmentAsync(uri: string, attachmentName: string, callback?: (asyncResult: Office.AsyncResult<string>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: uri
          description: "Универсальный код ресурса (URI), представляющий расположение файла, который нужно вложить в сообщение или встречу. Максимальная длина\_— 2048 символов."
          type:
            - string
        - id: attachmentName
          description: "Имя вложения, которое отображается при передаче вложения. Максимальная длина\_— 255 символов."
          type:
            - string
        - id: callback
          description: 'Необязательно. После выполнения метода функция, переданная в параметре callback, вызывается с помощью одного параметра типа`Office.AsyncResult`<!-- -->. После успешного выполнения идентификатор вложения будет представлен в свойстве `asyncResult.value`. Если добавить вложение не удастся, объект `asyncResult` будет содержать объект `Error` с описанием ошибки.'
          type:
            - 'outlook!Office.MessageCompose#addFileAttachmentAsync~2:complex'
  - uid: 'outlook!Office.MessageCompose#addHandlerAsync:member(1)'
    summary: |-
      Добавляет обработчик для поддерживаемого события. **Note**: события доступны только в области задач.

      Чтобы узнать, какие типы событий поддерживаются, `Office.EventType` ознакомьтесь со статьей Подробнее.

      \[[Набор API: Mailbox 1,7](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      ** [Минимальный уровень](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->разрешений**:`ReadItem`

      ** [Соответствующий режим](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->Outlook**: создание сообщения
    name: 'addHandlerAsync(eventType, handler, options, callback)'
    fullName: 'addHandlerAsync(eventType, handler, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addHandlerAsync(eventType: Office.EventType | string, handler: any, options?: Office.AsyncContextOptions, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: eventType
          description: 'Событие, которое должно вызвать обработчик.'
          type:
            - 'outlook!Office.MessageCompose#addHandlerAsync~0:complex'
        - id: handler
          description: 'Функция для обработки события. Функция должна принимать один параметр, представляющий собой объектный литерал. Свойство Type для параметра будет сопоставляться с `eventType` параметром, переданным`addHandlerAsync`<!-- -->.'
          type:
            - any
        - id: options
          description: 'Необязательно. Объектный литерал, содержащий одно или несколько из указанных ниже свойств. `asyncContext`<!-- -->: Разработчики могут предоставить любой объект, к которому необходимо получить доступ, в методе обратного вызова.'
          type:
            - 'outlook!Office.AsyncContextOptions:interface'
        - id: callback
          description: 'Необязательно. После выполнения метода функция, переданная в `callback` параметр, вызывается с помощью одного параметра,`asyncResult`<!-- -->, представляющий собой `Office.AsyncResult` объект.'
          type:
            - 'outlook!Office.MessageCompose#addHandlerAsync~1:complex'
  - uid: 'outlook!Office.MessageCompose#addHandlerAsync:member(2)'
    summary: |-
      Добавляет обработчик для поддерживаемого события. **Note**: события доступны только в области задач.

      Чтобы узнать, какие типы событий поддерживаются, `Office.EventType` ознакомьтесь со статьей Подробнее.

      \[[Набор API: Mailbox 1,7](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      ** [Минимальный уровень](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->разрешений**:`ReadItem`

      ** [Соответствующий режим](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->Outlook**: создание сообщения

      #### <a name="examples"></a>Примеры

      ```javascript
      function myHandlerFunction(eventarg) {
          if (eventarg.attachmentStatus === Office.MailboxEnums.AttachmentStatus.Added) {
              var attachment = eventarg.attachmentDetails;
              console.log("Event Fired and Attachment Added!");
              getAttachmentContentAsync(attachment.id, options, callback);
          }
      }

      Office.context.mailbox.item.addHandlerAsync(Office.EventType.AttachmentsChanged, myHandlerFunction, myCallback);
      ```
    name: 'addHandlerAsync(eventType, handler, callback)'
    fullName: 'addHandlerAsync(eventType, handler, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addHandlerAsync(eventType: Office.EventType | string, handler: any, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: eventType
          description: 'Событие, которое должно вызвать обработчик.'
          type:
            - 'outlook!Office.MessageCompose#addHandlerAsync~2:complex'
        - id: handler
          description: 'Функция для обработки события. Функция должна принимать один параметр, представляющий собой объектный литерал. Свойство Type для параметра будет сопоставляться с `eventType` параметром, переданным`addHandlerAsync`<!-- -->.'
          type:
            - any
        - id: callback
          description: 'Необязательно. После выполнения метода функция, переданная в `callback` параметр, вызывается с помощью одного параметра,`asyncResult`<!-- -->, представляющий собой `Office.AsyncResult` объект.'
          type:
            - 'outlook!Office.MessageCompose#addHandlerAsync~3:complex'
  - uid: 'outlook!Office.MessageCompose#addItemAttachmentAsync:member(1)'
    summary: |-
      Добавляет к сообщению элемент Exchange, например сообщение, в виде вложения.

      С помощью метода `addItemAttachmentAsync` можно в элемент формы создания вложить элемент с указанным идентификатором Exchange. Если указан метод обратного вызова, метод вызывается с помощью одного параметра,`asyncResult`<!-- -->, который содержит либо идентификатор вложения, либо код, указывающий на ошибки, возникшие при присоединении элемента. При необходимости можно использовать параметр options для передачи сведений о состоянии в метод обратного вызова.

      Идентификатор можно использовать с методом `removeAttachmentAsync`, чтобы удалить вложение, добавленное во время текущего сеанса.

      Если ваша надстройка Office выполняется в Outlook в Интернете, метод `addItemAttachmentAsync` обеспечивает вложение элементов в элементы, отличные от редактируемого. Однако это действие не рекомендуется выполнять, так как оно не поддерживается.

      \[[Набор API: Mailbox 1,1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      ** [Минимальный уровень](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->разрешений**:`ReadWriteItem`

      ** [Соответствующий режим](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->Outlook**: создание сообщения

      **Ошибки**:

      - `NumberOfAttachmentsExceeded`<!-- -->: Сообщение или встреча содержит слишком много вложений.

      #### <a name="examples"></a>Примеры

      ```javascript
      // The following example adds an existing Outlook item as an attachment
      // with the name `My Attachment`.
      function callback(result) {
          if (result.error) {
              console.log(result.error);
          } else {
              console.log("Attachment added");
          }
      }

      function addAttachment() {
          // EWS ID of item to attach (shortened for readability).
          var itemId = "AAMkADI1...AAA=";

          // The values in asyncContext can be accessed in the callback.
          var options = { 'asyncContext': { var1: 1, var2: 2 } };

          Office.context.mailbox.item.addItemAttachmentAsync(itemId, "My Attachment", options, callback);
      }
      ```
      ```javascript
      var attachmentItemId = $("#attachmentItemId").val();
      Office.context.mailbox.item.addItemAttachmentAsync(
          attachmentItemId,
          "My attachment",
          { "asyncContext" : { var3: 3, var4: false } },
          function(result) { console.log(result); });
      ```
    name: 'addItemAttachmentAsync(itemId, attachmentName, options, callback)'
    fullName: 'addItemAttachmentAsync(itemId, attachmentName, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addItemAttachmentAsync(itemId: any, attachmentName: string, options?: Office.AsyncContextOptions, callback?: (asyncResult: Office.AsyncResult<string>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: itemId
          description: "Идентификатор Exchange для вкладываемого элемента. Максимальная длина\_— 100 символов."
          type:
            - any
        - id: attachmentName
          description: "Имя вложения, которое отображается при передаче вложения. Максимальная длина\_— 255 символов."
          type:
            - string
        - id: options
          description: 'Необязательно. Объектный литерал, содержащий одно или несколько из указанных ниже свойств. `asyncContext`<!-- -->: Разработчики могут предоставить любой объект, к которому необходимо получить доступ, в методе обратного вызова.'
          type:
            - 'outlook!Office.AsyncContextOptions:interface'
        - id: callback
          description: 'Необязательно. После выполнения метода функция, переданная в `callback` параметре, вызывается с помощью одного параметра типа`Office.AsyncResult`<!-- -->. После успешного выполнения идентификатор вложения будет представлен в свойстве `asyncResult.value`. Если добавить вложение не удастся, объект `asyncResult` будет содержать объект `Error` с описанием ошибки.'
          type:
            - 'outlook!Office.MessageCompose#addItemAttachmentAsync~0:complex'
  - uid: 'outlook!Office.MessageCompose#addItemAttachmentAsync:member(2)'
    summary: |-
      Добавляет к сообщению элемент Exchange, например сообщение, в виде вложения.

      С помощью метода `addItemAttachmentAsync` можно в элемент формы создания вложить элемент с указанным идентификатором Exchange. Если указан метод обратного вызова, метод вызывается с помощью одного параметра,`asyncResult`<!-- -->, который содержит либо идентификатор вложения, либо код, указывающий на ошибки, возникшие при присоединении элемента. При необходимости можно использовать параметр options для передачи сведений о состоянии в метод обратного вызова.

      Идентификатор можно использовать с методом `removeAttachmentAsync`, чтобы удалить вложение, добавленное во время текущего сеанса.

      Если ваша надстройка Office выполняется в Outlook в Интернете, метод `addItemAttachmentAsync` обеспечивает вложение элементов в элементы, отличные от редактируемого. Однако это действие не рекомендуется выполнять, так как оно не поддерживается.

      \[[Набор API: Mailbox 1,1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      ** [Минимальный уровень](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->разрешений**:`ReadWriteItem`

      ** [Соответствующий режим](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->Outlook**: создание сообщения

      **Ошибки**:

      - `NumberOfAttachmentsExceeded`<!-- -->: Сообщение или встреча содержит слишком много вложений.
    name: 'addItemAttachmentAsync(itemId, attachmentName, callback)'
    fullName: 'addItemAttachmentAsync(itemId, attachmentName, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addItemAttachmentAsync(itemId: any, attachmentName: string, callback?: (asyncResult: Office.AsyncResult<string>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: itemId
          description: "Идентификатор Exchange для вкладываемого элемента. Максимальная длина\_— 100 символов."
          type:
            - any
        - id: attachmentName
          description: "Имя вложения, которое отображается при передаче вложения. Максимальная длина\_— 255 символов."
          type:
            - string
        - id: callback
          description: 'Необязательно. После выполнения метода функция, переданная в `callback` параметре, вызывается с помощью одного параметра типа`Office.AsyncResult`<!-- -->. После успешного выполнения идентификатор вложения будет представлен в свойстве `asyncResult.value`. Если добавить вложение не удастся, объект `asyncResult` будет содержать объект `Error` с описанием ошибки.'
          type:
            - 'outlook!Office.MessageCompose#addItemAttachmentAsync~1:complex'
  - uid: 'outlook!Office.MessageCompose#bcc:member'
    summary: "Получает объект, который предоставляет методы для получения или обновления получателей скрытой копии сообщения.\n\nКоллекция может включать не более 100 элементов по умолчанию. Однако для компьютеров с Windows и Mac OS действуют указанные ниже ограничения.\n\n- Максимальное количество элементов — 500.\n\n- Установить ограничение количества элементов на вызов\_— не более 100, общего количества\_— не более 500.\n\n\\[[Набор API: Mailbox 1,1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\\]"
    remarks: |-
      ** [Минимальный уровень](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->разрешений**:`ReadItem`

      ** [Соответствующий режим](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->Outlook**: создание сообщения

      #### <a name="examples"></a>Примеры

      ```javascript
      Office.context.mailbox.item.bcc.setAsync( ['alice@contoso.com', 'bob@contoso.com'] );
      Office.context.mailbox.item.bcc.addAsync( ['jason@contoso.com'] );
      Office.context.mailbox.item.bcc.getAsync(callback);

      function callback(asyncResult) {
          var arrayOfBccRecipients = asyncResult.value;
      }
      ```
      ```javascript
      Office.context.mailbox.item.bcc.getAsync(function(asyncResult) {
        if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
          var msgBcc = asyncResult.value;
          console.log("Message being blind-copied to:");
          for (var i = 0; i < msgBcc.length; i++) {
            console.log(msgBcc[i].displayName + " (" + msgBcc[i].emailAddress + ")");
          }
        } else {
          console.error(asyncResult.error);
        }
      });
      ```
      ```javascript
      var email = $("#emailBcc")
        .val()
        .toString();
      var emailArray = [email];
      Office.context.mailbox.item.bcc.setAsync(emailArray, function(asyncResult) {
        if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
          console.log("Succeeded in setting Bcc field.");
        } else {
          console.error(asyncResult.error);
        }
      });
      ```
    name: bcc
    fullName: bcc
    langs:
      - typeScript
    type: property
    syntax:
      content: 'bcc: Recipients;'
      return:
        type:
          - 'outlook!Office.Recipients:interface'
  - uid: 'outlook!Office.MessageCompose#body:member'
    summary: |-
      Получает объект, предоставляющий методы для работы с основным текстом элемента.

      \[[Набор API: Mailbox 1,1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      ** [Минимальный уровень](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->разрешений**:`ReadItem`

      ** [Соответствующий режим](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->Outlook**: создание сообщения

      #### <a name="examples"></a>Примеры

      ```javascript
      // This example gets the body of the item as plain text.
      Office.context.mailbox.item.body.getAsync(
          "text",
          { asyncContext: "This is passed to the callback" },
          function callback(result) {
              // Do something with the result.
          });

      // The following is an example of the result parameter passed to the callback function.
      {
          "value": "TEXT of whole body (including threads below)",
          "status": "succeeded",
          "asyncContext": "This is passed to the callback"
      }
      ```
    name: body
    fullName: body
    langs:
      - typeScript
    type: property
    syntax:
      content: 'body: Body;'
      return:
        type:
          - 'outlook!Office.Body:interface'
  - uid: 'outlook!Office.MessageCompose#cc:member'
    summary: "Предоставляет доступ к получателям копии сообщения. Тип объекта и уровень доступа зависят от режима текущего элемента.\n\n`cc` Свойство возвращает объект [Recipients](xref:outlook!Office.Recipients:interface) , который предоставляет методы для получения или обновления получателей в строке \"копия\" сообщения. Коллекция может включать не более 100 элементов по умолчанию. Однако для компьютеров с Windows и Mac OS действуют указанные ниже ограничения.\n\n- Максимальное количество элементов — 500.\n\n- Установить ограничение количества элементов на вызов\_— не более 100, общего количества\_— не более 500."
    remarks: |-
      ** [Минимальный уровень](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->разрешений**:`ReadItem`

      ** [Соответствующий режим](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->Outlook**: создание сообщения

      #### <a name="examples"></a>Примеры

      ```javascript
      Office.context.mailbox.item.cc.setAsync( ['alice@contoso.com', 'bob@contoso.com'] );
      Office.context.mailbox.item.cc.addAsync( ['jason@contoso.com'] );
      Office.context.mailbox.item.cc.getAsync(callback);

      function callback(asyncResult) {
          var arrayOfCcRecipients = asyncResult.value;
      }
      ```
      ```javascript
      Office.context.mailbox.item.cc.getAsync(function(asyncResult) {
        if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
          var msgCc = asyncResult.value;
          console.log("Message being copied to:");
          for (var i = 0; i < msgCc.length; i++) {
            console.log(msgCc[i].displayName + " (" + msgCc[i].emailAddress + ")");
          }
        } else {
          console.error(asyncResult.error);
        }
      });
      ```
      ```javascript
      var email = $("#emailCc")
        .val()
        .toString();
      var emailArray = [email];
      Office.context.mailbox.item.cc.setAsync(emailArray, function(asyncResult) {
        if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
          console.log("Succeeded in setting Cc field.");
        } else {
          console.error(asyncResult.error);
        }
      });
      ```
    name: cc
    fullName: cc
    langs:
      - typeScript
    type: property
    syntax:
      content: 'cc: Recipients;'
      return:
        type:
          - 'outlook!Office.Recipients:interface'
  - uid: 'outlook!Office.MessageCompose#close:member(1)'
    summary: |-
      Закрывает текущий элемент, который составляется

      Поведение метода Close зависит от текущего состояния составного элемента. Если элемент содержит несохраненные изменения, клиент предлагает пользователю сохранить, удалить или закрыть действие.

      В клиенте Outlook для настольных ПК, если сообщение является встроенным ответом, метод Close не оказывает никакого действия.

      **Примечание**: в Outlook в Интернете, если элемент является встречей и ранее был сохранен с помощью`saveAsync`<!-- -->, пользователю предлагается сохранить, удалить или отменить, даже если после последнего сохранения элемента не было внесено никаких изменений.

      \[[Набор API: Mailbox 1,3](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      ** [Минимальный уровень](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->разрешений**:`Restricted`

      ** [Соответствующий режим](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->Outlook**: создание сообщения

      #### <a name="examples"></a>Примеры

      ```javascript
      Office.context.mailbox.item.close();
      ```
    name: close()
    fullName: close()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'close(): void;'
      return:
        type:
          - void
        description: ''
  - uid: 'outlook!Office.MessageCompose#conversationId:member'
    summary: |-
      Получает идентификатор разговора по электронной почте, содержащего конкретное сообщение.

      Вы можете получить целочисленное значение этого свойства, если ваше почтовое приложение активируется в формах просмотра или формах создания ответов. Если пользователь изменит тему ответа, после его отправки идентификатор беседы будет изменен, и полученное ранее значение будет недействительным.

      Это свойство имеет значение NULL для нового элемента в форме создания. Свойство `conversationId` вернет значение, если пользователь задаст тему и сохранит элемент.
    remarks: |-
      ** [Минимальный уровень](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->разрешений**:`ReadItem`

      ** [Соответствующий режим](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->Outlook**: создание сообщения

      #### <a name="examples"></a>Примеры

      ```javascript
      var conversationId = Office.context.mailbox.item.conversationId;
      console.log("conversationId: " + conversationId);
      ```
    name: conversationId
    fullName: conversationId
    langs:
      - typeScript
    type: property
    syntax:
      content: 'conversationId: string;'
      return:
        type:
          - string
  - uid: 'outlook!Office.MessageCompose#from:member'
    summary: |-
      Получает электронный адрес отправителя сообщения.

      Свойства `from` и `sender` представляют одно лицо, если сообщение не отправлено представителем. В этом случае `from` свойство представляет владельца, а `sender` свойство представляет делегат.

      `from` Свойство возвращает `From` объект, который предоставляет метод для получения значения From.

      \[[Набор API: Mailbox 1,7](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      ** [Минимальный уровень](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->разрешений**:`ReadItem`

      ** [Соответствующий режим](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->Outlook**: создание сообщения

      #### <a name="examples"></a>Примеры

      ```javascript
      Office.context.mailbox.item.from.getAsync(function(asyncResult) {
        if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
          var msgFrom = asyncResult.value;
          console.log("Message from: " + msgFrom.displayName + " (" + msgFrom.emailAddress + ")");
        } else {
          console.error(asyncResult.error);
        }
      });
      ```
    name: from
    fullName: from
    langs:
      - typeScript
    type: property
    syntax:
      content: 'from: From;'
      return:
        type:
          - 'outlook!Office.From:interface'
  - uid: 'outlook!Office.MessageCompose#getSelectedDataAsync:member(1)'
    summary: |-
      Асинхронно возвращает данные, выбранные в теме или тексте сообщения.

      Если выделенный фрагмент отсутствует, но курсор находится в тексте или теме, метод возвращает пустую строку для выбранных данных. Если выбраны не текст и не тема, метод возвращает ошибку `InvalidSelection`.

      Чтобы получить доступ к выбранным данным из метода обратного вызова, вызовите метод`asyncResult.value.data`<!-- -->. Чтобы получить доступ к исходному свойству, из которого берется объект, вызовите метод`asyncResult.value.sourceProperty`<!-- -->, который может иметь значение `body` или`subject`<!-- -->.

      \[[Набор API: Mailbox 1,2](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      ** [Минимальный уровень](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->разрешений**:`ReadItem`

      ** [Соответствующий режим](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->Outlook**: создание сообщения

      #### <a name="examples"></a>Примеры

      ```javascript
      // Get selected data.
      Office.initialize = function () {
          Office.context.mailbox.item.getSelectedDataAsync(Office.CoercionType.Text, {}, getCallback);
      };

      function getCallback(asyncResult) {
          var text = asyncResult.value.data;
          var prop = asyncResult.value.sourceProperty;

          console.log("Selected text in " + prop + ": " + text);
      }
      ```
    name: 'getSelectedDataAsync(coercionType, options, callback)'
    fullName: 'getSelectedDataAsync(coercionType, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getSelectedDataAsync(coercionType: Office.CoercionType | string, options: Office.AsyncContextOptions, callback: (asyncResult: Office.AsyncResult<any>) => void): void;'
      return:
        type:
          - void
        description: 'Выбранные данные в виде строки с форматом, определенным`coercionType`<!-- -->.'
      parameters:
        - id: coercionType
          description: 'Запрашивает формат данных. Что`Text`<!-- -->метод возвращает обычный текст в виде строки, удаляя все присутствующие HTML-теги. Что`Html`<!-- -->метод возвращает выделенный текст, если он является обычным текстом или HTML-кодом.'
          type:
            - 'outlook!Office.MessageCompose#getSelectedDataAsync~0:complex'
        - id: options
          description: 'Объектный литерал, содержащий одно или несколько из указанных ниже свойств. `asyncContext`<!-- -->: Разработчики могут предоставить любой объект, к которому необходимо получить доступ, в методе обратного вызова.'
          type:
            - 'outlook!Office.AsyncContextOptions:interface'
        - id: callback
          description: 'После выполнения метода функция, переданная в `callback` параметре, вызывается с помощью одного параметра типа`Office.AsyncResult`<!-- -->.'
          type:
            - 'outlook!Office.MessageCompose#getSelectedDataAsync~1:complex'
  - uid: 'outlook!Office.MessageCompose#getSelectedDataAsync:member(2)'
    summary: |-
      Асинхронно возвращает данные, выбранные в теме или тексте сообщения.

      Если выделенный фрагмент отсутствует, но курсор находится в тексте или теме, метод возвращает пустую строку для выбранных данных. Если выбраны не текст и не тема, метод возвращает ошибку `InvalidSelection`.

      Чтобы получить доступ к выбранным данным из метода обратного вызова, вызовите метод`asyncResult.value.data`<!-- -->. Чтобы получить доступ к исходному свойству, из которого берется объект, вызовите метод`asyncResult.value.sourceProperty`<!-- -->, который может иметь значение `body` или`subject`<!-- -->.

      \[[Набор API: Mailbox 1,2](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      ** [Минимальный уровень](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->разрешений**:`ReadItem`

      ** [Соответствующий режим](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->Outlook**: создание сообщения

      #### <a name="examples"></a>Примеры

      ```javascript
      Office.context.mailbox.item.getSelectedDataAsync(Office.CoercionType.Text, function(asyncResult) {
        if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
          var text = asyncResult.value.data;
          var prop = asyncResult.value.sourceProperty;
          console.log("Selected text in " + prop + ": " + text);
        } else {
          console.error(asyncResult.error);
        }
      });
      ```
    name: 'getSelectedDataAsync(coercionType, callback)'
    fullName: 'getSelectedDataAsync(coercionType, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getSelectedDataAsync(coercionType: Office.CoercionType | string, callback: (asyncResult: Office.AsyncResult<any>) => void): void;'
      return:
        type:
          - void
        description: 'Выбранные данные в виде строки с форматом, определенным`coercionType`<!-- -->.'
      parameters:
        - id: coercionType
          description: 'Запрашивает формат данных. Что`Text`<!-- -->метод возвращает обычный текст в виде строки, удаляя все присутствующие HTML-теги. Что`Html`<!-- -->метод возвращает выделенный текст, если он является обычным текстом или HTML-кодом.'
          type:
            - 'outlook!Office.MessageCompose#getSelectedDataAsync~2:complex'
        - id: callback
          description: 'После выполнения метода функция, переданная в `callback` параметре, вызывается с помощью одного параметра типа`Office.AsyncResult`<!-- -->.'
          type:
            - 'outlook!Office.MessageCompose#getSelectedDataAsync~3:complex'
  - uid: 'outlook!Office.MessageCompose#itemType:member'
    summary: |-
      Получает тип элемента, который представляет экземпляр.

      `itemType` Свойство возвращает одно из значений `ItemType` перечисления, которое указывает, является ли экземпляр объекта Item сообщением или встречей.
    remarks: |-
      ** [Минимальный уровень](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->разрешений**:`ReadItem`

      ** [Соответствующий режим](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->Outlook**: создание сообщения

      #### <a name="examples"></a>Примеры

      ```javascript
      console.log(`Item type: ${Office.context.mailbox.item.itemType}`);
      ```
    name: itemType
    fullName: itemType
    langs:
      - typeScript
    type: property
    syntax:
      content: 'itemType: MailboxEnums.ItemType | string;'
      return:
        type:
          - 'outlook!Office.MessageCompose#itemType~0:complex'
  - uid: 'outlook!Office.MessageCompose#loadCustomPropertiesAsync:member(1)'
    summary: |-
      Асинхронно загружает настраиваемые свойства для надстройки для выбранного элемента.

      Настраиваемые свойства сохраняются в виде пар "ключ-значение" для каждого приложения и каждого элемента. Этот метод возвращает объект `CustomProperties` при обратном вызове, который предоставляет методы для доступа к настраиваемым свойствам, характерным для текущего элемента и текущей надстройки. Настраиваемые свойства не шифруются для элемента, поэтому этот способ хранения не является безопасным.

      Настраиваемые свойства предоставляются в виде `CustomProperties` объекта в свойстве asyncResult. Value. Этот объект позволяет получить, задать и удалить настраиваемые свойства для элемента, а также сохранить изменения, внесенные в набор настраиваемых свойств, на сервере.
    remarks: |-
      ** [Минимальный уровень](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->разрешений**:`ReadItem`

      ** [Соответствующий режим](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->Outlook**: создание сообщения

      #### <a name="examples"></a>Примеры

      ```javascript
      // The following example shows how to use the loadCustomPropertiesAsync method
      // to asynchronously load custom properties that are specific to the current item.
      // The example also shows how to use the saveAsync method to save these properties
      // back to the server. After loading the custom properties, the example uses the
      // get method to read the custom property myProp, the set method to write the
      // custom property otherProp, and then finally calls the saveAsync method to save
      // the custom properties.
      Office.initialize = function () {
          // Checks for the DOM to load using the jQuery ready function.
          $(document).ready(function () {
              // After the DOM is loaded, add-in-specific code can run.
              var mailbox = Office.context.mailbox;
              mailbox.item.loadCustomPropertiesAsync(customPropsCallback);
          });
      };

      function customPropsCallback(asyncResult) {
          var customProps = asyncResult.value;
          var myProp = customProps.get("myProp");

          customProps.set("otherProp", "value");
          customProps.saveAsync(saveCallback);
      }

      function saveCallback(asyncResult) {
      }
      ```
      ```javascript
      Office.context.mailbox.item.loadCustomPropertiesAsync(function (result) {
        if (result.status === Office.AsyncResultStatus.Succeeded) {
          console.log("Loaded following custom properties:");
          customProps = result.value;
          var dataKey = Object.keys(customProps)[0];
          var data = customProps[dataKey];
          for (var propertyName in data)
          {
            var propertyValue = data[propertyName];
            console.log(`${propertyName}: ${propertyValue}`);
          }              
        }
        else {
          console.error(`loadCustomPropertiesAsync failed with message ${result.error.message}`);
        }
      });
      ```
    name: 'loadCustomPropertiesAsync(callback, userContext)'
    fullName: 'loadCustomPropertiesAsync(callback, userContext)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'loadCustomPropertiesAsync(callback: (asyncResult: Office.AsyncResult<CustomProperties>) => void, userContext?: any): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: callback
          description: 'После выполнения метода функция, переданная в `callback` параметре, вызывается с помощью одного параметра типа`Office.AsyncResult`<!-- -->.'
          type:
            - 'outlook!Office.MessageCompose#loadCustomPropertiesAsync~0:complex'
        - id: userContext
          description: 'Необязательно. Разработчики могут указать любой объект, к которому необходимо получить доступ, в функции обратного вызова. Доступ к этому объекту можно получить с помощью свойства `asyncResult.asyncContext` в функции обратного вызова.'
          type:
            - any
  - uid: 'outlook!Office.MessageCompose#notificationMessages:member'
    summary: |-
      Получает сообщения уведомления для элемента.

      \[[Набор API: Mailbox 1,3](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      ** [Минимальный уровень](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->разрешений**:`ReadItem`

      ** [Соответствующий режим](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->Outlook**: создание сообщения

      #### <a name="examples"></a>Примеры

      ```javascript
      var id = $("#notificationId").val();
      var details =
        {
          type: "progressIndicator",
          message: "Progress indicator with id = " + id
        };
      Office.context.mailbox.item.notificationMessages.addAsync(id, details, handleResult);
      ```
      ```javascript
      var id = $("#notificationId").val();
      var details =
        {
          type: "informationalMessage",
          message: "Non-persistent informational notification message with id = " + id,
          icon: "icon1",
          persistent: false
        };
      Office.context.mailbox.item.notificationMessages.addAsync(id, details, handleResult);
      ```
      ```javascript
      var id = $("#notificationId").val();
      var details =
        {
          type: "informationalMessage",
          message: "Persistent informational notification message with id = " + id,
          icon: "icon1",
          persistent: true
        };
      Office.context.mailbox.item.notificationMessages.addAsync(id, details, handleResult);
      ```
      ```javascript
      Office.context.mailbox.item.notificationMessages.getAllAsync(handleResult);          
      ```
      ```javascript
      var id = $("#notificationId").val();
      Office.context.mailbox.item.notificationMessages.replaceAsync(
        id,
        {
          type: "informationalMessage",
          message: "Notification message with id = " + id + " has been replaced with an informational message.",
          icon: "icon2",
          persistent: false
        },
        handleResult);
      ```
      ```javascript
      var id = $("#notificationId").val();
      Office.context.mailbox.item.notificationMessages.removeAsync(id, handleResult);
      ```
    name: notificationMessages
    fullName: notificationMessages
    langs:
      - typeScript
    type: property
    syntax:
      content: 'notificationMessages: NotificationMessages;'
      return:
        type:
          - 'outlook!Office.NotificationMessages:interface'
  - uid: 'outlook!Office.MessageCompose#removeAttachmentAsync:member(1)'
    summary: |-
      Удаляет вложение из сообщения или встречи.

      Метод `removeAttachmentAsync` удаляет из элемента вложение с указанным идентификатором. Идентификатор вложения рекомендуется использовать для удаления вложения, только если оно добавлено тем же почтовым приложением в ходе текущего сеанса. В Outlook в Интернете и на мобильных устройствах идентификатор вложения действителен только в течение одного сеанса. Сеанс переходит к моменту, когда пользователь закрывает приложение, или если пользователь начинает создание встроенной формы, затем извлекает форму, чтобы продолжить работу в отдельном окне.

      \[[Набор API: Mailbox 1,1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      ** [Минимальный уровень](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->разрешений**:`ReadWriteItem`

      ** [Соответствующий режим](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->Outlook**: создание сообщения

      **Ошибки**:

      - `InvalidAttachmentId`<!-- -->: Идентификатор вложения не существует.

      #### <a name="examples"></a>Примеры

      ```javascript
      // The following code removes an attachment with an identifier of '0'.
      Office.context.mailbox.item.removeAttachmentAsync(
          '0',
          { asyncContext : null },
          function (asyncResult)
          {
              console.log(asyncResult.status);
          }
      );
      ```
      ```javascript
      Office.context.mailbox.item.removeAttachmentAsync(
          $("#attachmentId").val(),
          { asyncContext : null },
          function(result)
          {
              if (result.status !== Office.AsyncResultStatus.Succeeded) {
                  console.error(`${result.error.message}`);
              } else {
                  console.log(`Attachment removed successfully.`);
              }
          }
      );
      ```
    name: 'removeAttachmentAsync(attachmentId, options, callback)'
    fullName: 'removeAttachmentAsync(attachmentId, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'removeAttachmentAsync(attachmentId: string, options?: Office.AsyncContextOptions, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: attachmentId
          description: Идентификатор удаляемого вложения.
          type:
            - string
        - id: options
          description: 'Необязательно. Объектный литерал, содержащий одно или несколько из указанных ниже свойств. `asyncContext`<!-- -->: Разработчики могут предоставить любой объект, к которому необходимо получить доступ, в методе обратного вызова.'
          type:
            - 'outlook!Office.AsyncContextOptions:interface'
        - id: callback
          description: 'Необязательно. После выполнения метода функция, переданная в `callback` параметре, вызывается с помощью одного параметра типа`Office.AsyncResult`<!-- -->. Если удалить вложение не удается, свойство `asyncResult.error` содержит код ошибки с указанием ее причины.'
          type:
            - 'outlook!Office.MessageCompose#removeAttachmentAsync~0:complex'
  - uid: 'outlook!Office.MessageCompose#removeAttachmentAsync:member(2)'
    summary: |-
      Удаляет вложение из сообщения или встречи.

      Метод `removeAttachmentAsync` удаляет из элемента вложение с указанным идентификатором. Идентификатор вложения рекомендуется использовать для удаления вложения, только если оно добавлено тем же почтовым приложением в ходе текущего сеанса. В Outlook в Интернете и на мобильных устройствах идентификатор вложения действителен только в течение одного сеанса. Сеанс переходит к моменту, когда пользователь закрывает приложение, или если пользователь начинает создание встроенной формы, затем извлекает форму, чтобы продолжить работу в отдельном окне.

      \[[Набор API: Mailbox 1,1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      ** [Минимальный уровень](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->разрешений**:`ReadWriteItem`

      ** [Соответствующий режим](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->Outlook**: создание сообщения

      **Ошибки**:

      - `InvalidAttachmentId`<!-- -->: Идентификатор вложения не существует.
    name: 'removeAttachmentAsync(attachmentId, callback)'
    fullName: 'removeAttachmentAsync(attachmentId, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'removeAttachmentAsync(attachmentId: string, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: attachmentId
          description: Идентификатор удаляемого вложения.
          type:
            - string
        - id: callback
          description: 'Необязательно. После выполнения метода функция, переданная в `callback` параметре, вызывается с помощью одного параметра типа`Office.AsyncResult`<!-- -->. Если удалить вложение не удается, свойство `asyncResult.error` содержит код ошибки с указанием ее причины.'
          type:
            - 'outlook!Office.MessageCompose#removeAttachmentAsync~1:complex'
  - uid: 'outlook!Office.MessageCompose#removeHandlerAsync:member(1)'
    summary: |-
      Удаляет обработчиков для поддерживаемого типа события. **Note**: события доступны только в области задач.

      Чтобы узнать, какие типы событий поддерживаются, `Office.EventType` ознакомьтесь со статьей Подробнее.

      \[[Набор API: Mailbox 1,7](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      ** [Минимальный уровень](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->разрешений**:`ReadItem`

      ** [Соответствующий режим](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->Outlook**: создание сообщения
    name: 'removeHandlerAsync(eventType, options, callback)'
    fullName: 'removeHandlerAsync(eventType, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'removeHandlerAsync(eventType: Office.EventType | string, options?: Office.AsyncContextOptions, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: eventType
          description: 'Событие, которое должно отменить обработчик.'
          type:
            - 'outlook!Office.MessageCompose#removeHandlerAsync~0:complex'
        - id: options
          description: 'Необязательно. Объектный литерал, содержащий одно или несколько из указанных ниже свойств. `asyncContext`<!-- -->: Разработчики могут предоставить любой объект, к которому необходимо получить доступ, в методе обратного вызова.'
          type:
            - 'outlook!Office.AsyncContextOptions:interface'
        - id: callback
          description: 'Необязательно. После выполнения метода функция, переданная в `callback` параметр, вызывается с помощью одного параметра,`asyncResult`<!-- -->, представляющий собой `Office.AsyncResult` объект.'
          type:
            - 'outlook!Office.MessageCompose#removeHandlerAsync~1:complex'
  - uid: 'outlook!Office.MessageCompose#removeHandlerAsync:member(2)'
    summary: |-
      Удаляет обработчиков для поддерживаемого типа события. **Note**: события доступны только в области задач.

      Чтобы узнать, какие типы событий поддерживаются, `Office.EventType` ознакомьтесь со статьей Подробнее.

      \[[Набор API: Mailbox 1,7](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      ** [Минимальный уровень](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->разрешений**:`ReadItem`

      ** [Соответствующий режим](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->Outlook**: создание сообщения
    name: 'removeHandlerAsync(eventType, callback)'
    fullName: 'removeHandlerAsync(eventType, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'removeHandlerAsync(eventType: Office.EventType | string, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: eventType
          description: 'Событие, которое должно отменить обработчик.'
          type:
            - 'outlook!Office.MessageCompose#removeHandlerAsync~2:complex'
        - id: callback
          description: 'Необязательно. После выполнения метода функция, переданная в `callback` параметр, вызывается с помощью одного параметра,`asyncResult`<!-- -->, представляющий собой `Office.AsyncResult` объект.'
          type:
            - 'outlook!Office.MessageCompose#removeHandlerAsync~3:complex'
  - uid: 'outlook!Office.MessageCompose#saveAsync:member(1)'
    summary: |-
      Асинхронно сохраняет элемент.

      При вызове этот метод сохраняет текущее сообщение в виде черновика и возвращает идентификатор элемента с помощью метода обратного вызова. В Outlook в Интернете или интерактивном режиме Outlook этот элемент сохраняется на сервере. В Outlook в режиме кэширования этот элемент сохраняется в локальном кэше.

      Если метод `saveAsync` вызывается для встречи в режиме создания, она сохраняется как обычная встреча в календаре пользователя, а не как черновик. При сохранении новой встречи приглашения не отправляются. При сохранении существующей встречи уведомления отправляются добавленным или удаленным участникам.

      **Note**: Если надстройка вызывает `saveAsync` элемент в режиме создания, чтобы получить идентификатор элемента для использования с EWS или REST API, следует помнить, что в режиме кэширования может потребоваться некоторое время, прежде чем элемент будет фактически синхронизирован с сервером. Пока элемент не будет синхронизирован, использование itemId возвратит ошибку.

      \[[Набор API: Mailbox 1,3](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      ** [Минимальный уровень](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->разрешений**:`ReadWriteItem`

      ** [Соответствующий режим](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->Outlook**: создание сообщения

      **Ошибки**:

      - `InvalidAttachmentId`<!-- -->: Идентификатор вложения не существует.
    name: 'saveAsync(options, callback)'
    fullName: 'saveAsync(options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'saveAsync(options: Office.AsyncContextOptions, callback: (asyncResult: Office.AsyncResult<string>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: options
          description: 'Объектный литерал, содержащий одно или несколько из указанных ниже свойств. `asyncContext`<!-- -->: Разработчики могут предоставить любой объект, к которому необходимо получить доступ, в методе обратного вызова.'
          type:
            - 'outlook!Office.AsyncContextOptions:interface'
        - id: callback
          description: 'После выполнения метода функция, переданная в `callback` параметре, вызывается с помощью одного параметра типа`Office.AsyncResult`<!-- -->.'
          type:
            - 'outlook!Office.MessageCompose#saveAsync~0:complex'
  - uid: 'outlook!Office.MessageCompose#saveAsync:member(2)'
    summary: |-
      Асинхронно сохраняет элемент.

      При вызове этот метод сохраняет текущее сообщение в виде черновика и возвращает идентификатор элемента с помощью метода обратного вызова. В Outlook в Интернете или интерактивном режиме Outlook этот элемент сохраняется на сервере. В Outlook в режиме кэширования этот элемент сохраняется в локальном кэше.

      Если метод `saveAsync` вызывается для встречи в режиме создания, она сохраняется как обычная встреча в календаре пользователя, а не как черновик. При сохранении новой встречи приглашения не отправляются. При сохранении существующей встречи уведомления отправляются добавленным или удаленным участникам.

      **Note**: Если надстройка вызывает `saveAsync` элемент в режиме создания, чтобы получить идентификатор элемента для использования с EWS или REST API, следует помнить, что в режиме кэширования может потребоваться некоторое время, прежде чем элемент будет фактически синхронизирован с сервером. До окончания синхронизации элемента применение параметра `itemId` будет приводить к ошибке.

      \[[Набор API: Mailbox 1,3](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      ** [Минимальный уровень](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->разрешений**:`ReadWriteItem`

      ** [Соответствующий режим](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->Outlook**: создание сообщения

      **Ошибки**:

      - `InvalidAttachmentId`<!-- -->: Идентификатор вложения не существует.

      #### <a name="examples"></a>Примеры

      ```javascript
      Office.context.mailbox.item.saveAsync(
          function callback(result) {
              // Process the result.
          });

      // The following is an example of the
      // `result` parameter passed to the
      // callback function. The `value`
      // property contains the item ID of
      // the item.
      {
          "value": "AAMkADI5...AAA=",
          "status": "succeeded"
      }
      ```
    name: saveAsync(callback)
    fullName: saveAsync(callback)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'saveAsync(callback: (asyncResult: Office.AsyncResult<string>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: callback
          description: 'После выполнения метода функция, переданная в `callback` параметре, вызывается с помощью одного параметра типа`Office.AsyncResult`<!-- -->.'
          type:
            - 'outlook!Office.MessageCompose#saveAsync~1:complex'
  - uid: 'outlook!Office.MessageCompose#seriesId:member'
    summary: |-
      Получает идентификатор ряда, к которому принадлежит экземпляр.

      В Outlook в Интернете и на настольных клиентах `seriesId` возвращается идентификатор веб-служб Exchange (EWS) родительского элемента (ряда), к которому принадлежит этот элемент. Однако в iOS и Android seriesId возвращает идентификатор REST родительского элемента.

      **Note**: идентификатор, возвращаемый `seriesId` свойством, совпадает с идентификатором элемента веб-служб Exchange. `seriesId` Свойство не совпадает с идентификаторами Outlook, используемыми в REST API Outlook. Перед выполнением вызовов API REST, использующих это значение, его необходимо преобразовать с помощью метода`Office.context.mailbox.convertToRestId`<!-- -->. Дополнительные сведения см. в статье [Использование REST API Outlook из надстройки Outlook](https://docs.microsoft.com/office/dev/add-ins/outlook/use-rest-api)<!-- -->.

      `seriesId` Свойство возвращает `null` элементы, у которых нет родительских элементов, таких как одиночные встречи, элементы ряда или приглашения на собрание, `undefined` и возвращаемые для других элементов, не являющиеся приглашениями на собрания.

      \[[Набор API: Mailbox 1,7](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      ** [Минимальный уровень](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->разрешений**:`ReadItem`

      ** [Соответствующий режим](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->Outlook**: создание сообщения

      #### <a name="examples"></a>Примеры

      ```javascript
      var seriesId = Office.context.mailbox.item.seriesId;

      if (seriesId === undefined) {
        console.log("This is a message that's not a meeting request.");
      } else if (seriesId === null) {
        console.log("This is a single appointment, a parent series, or a meeting request for a series or single meeting.");
      } else {
        console.log("This is an instance belonging to series with ID " + seriesId);
      }
      ```
    name: seriesId
    fullName: seriesId
    langs:
      - typeScript
    type: property
    syntax:
      content: 'seriesId: string;'
      return:
        type:
          - string
  - uid: 'outlook!Office.MessageCompose#setSelectedDataAsync:member(1)'
    summary: |-
      Асинхронно вставляет данные в текст или тему сообщения.

      Метод `setSelectedDataAsync` вставляет указанную строку в местоположение курсора в теме или тексте элемента либо, если текст выделен в редакторе, он заменяет выделенный текст. Если курсор находится вне текста или темы элемента, возвращается ошибка. После вставки курсор помещается в конец вставленного содержимого.

      \[[Набор API: Mailbox 1,2](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      ** [Минимальный уровень](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->разрешений**:`ReadWriteItem`

      ** [Соответствующий режим](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->Outlook**: создание сообщения

      **Ошибки**:

      - `InvalidAttachmentId`<!-- -->: Идентификатор вложения не существует.

      #### <a name="examples"></a>Примеры

      ```javascript
      Office.context.mailbox.item.setSelectedDataAsync("<b>Hello World!</b>", { coercionType : "html" });
      ```
    name: 'setSelectedDataAsync(data, options, callback)'
    fullName: 'setSelectedDataAsync(data, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setSelectedDataAsync(data: string, options?: Office.AsyncContextOptions & CoercionTypeOptions, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: data
          description: "Вставляемые данные. Объем данных не должен превышать 1\_000\_000 символов. Если передано больше 1\_000\_000 символов, возвращается исключение `ArgumentOutOfRange`."
          type:
            - string
        - id: options
          description: 'Необязательно. Объектный литерал, содержащий одно или несколько из указанных ниже свойств. `asyncContext`<!-- -->: Разработчики могут предоставить любой объект, к которому необходимо получить доступ, в методе обратного вызова. `coercionType`<!-- -->: Если текст, текущий стиль применяется в Outlook в Интернете и на настольных клиентах. Если поле представляет собой редактор HTML, вставляются только текстовые данные, даже если они имеют формат HTML. Если HTML и поле поддерживает HTML (тема не используется), текущий стиль применяется в Outlook в Интернете, а в Outlook для настольных компьютеров применяется стиль по умолчанию. Если поле является текстовым, возвращается ошибка `InvalidDataFormat`. Если свойство `coercionType` не задано, результат зависит от поля: если поле имеет формат HTML, используется текст в формате HTML, а если поле текстовое, применяется обычный текст.'
          type:
            - 'outlook!Office.MessageCompose#setSelectedDataAsync~0:complex'
        - id: callback
          description: 'Необязательно. После выполнения метода функция, переданная в `callback` параметре, вызывается с помощью одного параметра типа`Office.AsyncResult`<!-- -->.'
          type:
            - 'outlook!Office.MessageCompose#setSelectedDataAsync~1:complex'
  - uid: 'outlook!Office.MessageCompose#setSelectedDataAsync:member(2)'
    summary: |-
      Асинхронно вставляет данные в текст или тему сообщения.

      Метод `setSelectedDataAsync` вставляет указанную строку в местоположение курсора в теме или тексте элемента либо, если текст выделен в редакторе, он заменяет выделенный текст. Если курсор находится вне текста или темы элемента, возвращается ошибка. После вставки курсор помещается в конец вставленного содержимого.

      \[[Набор API: Mailbox 1,2](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      ** [Минимальный уровень](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->разрешений**:`ReadWriteItem`

      ** [Соответствующий режим](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->Outlook**: создание сообщения

      **Ошибки**:

      - `InvalidAttachmentId`<!-- -->: Идентификатор вложения не существует.

      #### <a name="examples"></a>Примеры

      ```javascript
      Office.context.mailbox.item.setSelectedDataAsync("Hello World!");
      ```
      ```javascript
      Office.context.mailbox.item.setSelectedDataAsync("Replaced", function(asyncResult) {
        if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
          console.log("Selected text has been updated successfully.");
        } else {
          console.error(asyncResult.error);
        }
      });
      ```
    name: 'setSelectedDataAsync(data, callback)'
    fullName: 'setSelectedDataAsync(data, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setSelectedDataAsync(data: string, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: data
          description: "Вставляемые данные. Объем данных не должен превышать 1\_000\_000 символов. Если передано больше 1\_000\_000 символов, возвращается исключение `ArgumentOutOfRange`."
          type:
            - string
        - id: callback
          description: 'Необязательно. После выполнения метода функция, переданная в `callback` параметре, вызывается с помощью одного параметра типа`Office.AsyncResult`<!-- -->.'
          type:
            - 'outlook!Office.MessageCompose#setSelectedDataAsync~2:complex'
  - uid: 'outlook!Office.MessageCompose#subject:member'
    summary: |-
      Получает или задает описание, которое отображается в поле темы элемента.

      Свойство `subject` получает или задает всю тему элемента для отправки с почтового сервера.

      Свойство `subject` возвращает объект `Subject`, который предоставляет методы для получения и задания темы.
    remarks: |-
      ** [Минимальный уровень](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->разрешений**:`ReadItem`

      ** [Соответствующий режим](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->Outlook**: создание сообщения

      #### <a name="examples"></a>Примеры

      ```javascript
      Office.context.mailbox.item.subject.getAsync((result) => {
        if (result.status !== Office.AsyncResultStatus.Succeeded) {
          console.error(`Action failed with message ${result.error.message}`);
          return;
        }
        console.log(`Subject: ${result.value}`);
      });
      ```
      ```javascript
      let subject = "Hello World!";
      Office.context.mailbox.item.subject.setAsync(subject, (result) => {
        if (result.status !== Office.AsyncResultStatus.Succeeded) {
          console.error(`Action failed with message ${result.error.message}`);
          return;
        }
        console.log(`Successfully set subject to ${subject}`);
      });
      ```
    name: subject
    fullName: subject
    langs:
      - typeScript
    type: property
    syntax:
      content: 'subject: Subject;'
      return:
        type:
          - 'outlook!Office.Subject:interface'
  - uid: 'outlook!Office.MessageCompose#to:member'
    summary: "Предоставляет доступ к получателям, указанным в строке Кому сообщения. Тип объекта и уровень доступа зависят от режима текущего элемента.\n\nСвойство `to` возвращает объект `Recipients`, предоставляющий методы для получения или обновления получателей, которые указаны в строке Кому сообщения. Коллекция может включать не более 100 элементов по умолчанию. Однако для компьютеров с Windows и Mac OS действуют указанные ниже ограничения.\n\n- Максимальное количество элементов — 500.\n\n- Установить ограничение количества элементов на вызов\_— не более 100, общего количества\_— не более 500."
    remarks: |-
      ** [Минимальный уровень](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->разрешений**:`ReadItem`

      ** [Соответствующий режим](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->Outlook**: создание сообщения

      #### <a name="examples"></a>Примеры

      ```javascript
      Office.context.mailbox.item.to.setAsync( ['alice@contoso.com', 'bob@contoso.com'] );
      Office.context.mailbox.item.to.addAsync( ['jason@contoso.com'] );
      Office.context.mailbox.item.to.getAsync(callback);

      function callback(asyncResult) {
          var arrayOfToRecipients = asyncResult.value;
      }
      ```
      ```javascript
      Office.context.mailbox.item.to.getAsync(function(asyncResult) {
        if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
          var msgTo = asyncResult.value;
          console.log("Message being sent to:");
          for (var i = 0; i < msgTo.length; i++) {
            console.log(msgTo[i].displayName + " (" + msgTo[i].emailAddress + ")");
          }
        } else {
          console.error(asyncResult.error);
        }
      });
      ```
      ```javascript
      var email = $("#emailTo")
        .val()
        .toString();
      var emailArray = [email];
      Office.context.mailbox.item.to.setAsync(emailArray, function(asyncResult) {
        if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
          console.log("Succeeded in setting To field.");
        } else {
          console.error(asyncResult.error);
        }
      });
      ```
    name: to
    fullName: to
    langs:
      - typeScript
    type: property
    syntax:
      content: 'to: Recipients;'
      return:
        type:
          - 'outlook!Office.Recipients:interface'
references:
  - uid: 'outlook!Office.Message:interface'
    name: Message
  - uid: 'outlook!Office.ItemCompose:interface'
    name: ItemCompose
  - uid: 'outlook!Office.MessageCompose#addFileAttachmentAsync~0:complex'
    name: 'Office.AsyncContextOptions & { isInline: boolean }'
    fullName: 'Office.AsyncContextOptions & { isInline: boolean }'
    spec.typeScript:
      - uid: 'outlook!Office.AsyncContextOptions:interface'
        name: Office.AsyncContextOptions
        fullName: Office.AsyncContextOptions
      - name: ' & { isInline: boolean }'
        fullName: ' & { isInline: boolean }'
  - uid: 'outlook!Office.MessageCompose#addFileAttachmentAsync~1:complex'
    name: '(asyncResult: Office.AsyncResult<string>) => void'
    fullName: '(asyncResult: Office.AsyncResult<string>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'outlook!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <string>) => void
        fullName: <string>) => void
  - uid: 'outlook!Office.MessageCompose#addFileAttachmentAsync~2:complex'
    name: '(asyncResult: Office.AsyncResult<string>) => void'
    fullName: '(asyncResult: Office.AsyncResult<string>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'outlook!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <string>) => void
        fullName: <string>) => void
  - uid: 'outlook!Office.MessageCompose#addHandlerAsync~0:complex'
    name: Office.EventType | string
    fullName: Office.EventType | string
    spec.typeScript:
      - uid: 'outlook!Office.EventType:enum'
        name: Office.EventType
        fullName: Office.EventType
      - name: ' | string'
        fullName: ' | string'
  - uid: 'outlook!Office.AsyncContextOptions:interface'
    name: Office.AsyncContextOptions
  - uid: 'outlook!Office.MessageCompose#addHandlerAsync~1:complex'
    name: '(asyncResult: Office.AsyncResult<void>) => void'
    fullName: '(asyncResult: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'outlook!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void
  - uid: 'outlook!Office.MessageCompose#addHandlerAsync~2:complex'
    name: Office.EventType | string
    fullName: Office.EventType | string
    spec.typeScript:
      - uid: 'outlook!Office.EventType:enum'
        name: Office.EventType
        fullName: Office.EventType
      - name: ' | string'
        fullName: ' | string'
  - uid: 'outlook!Office.MessageCompose#addHandlerAsync~3:complex'
    name: '(asyncResult: Office.AsyncResult<void>) => void'
    fullName: '(asyncResult: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'outlook!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void
  - uid: 'outlook!Office.MessageCompose#addItemAttachmentAsync~0:complex'
    name: '(asyncResult: Office.AsyncResult<string>) => void'
    fullName: '(asyncResult: Office.AsyncResult<string>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'outlook!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <string>) => void
        fullName: <string>) => void
  - uid: 'outlook!Office.MessageCompose#addItemAttachmentAsync~1:complex'
    name: '(asyncResult: Office.AsyncResult<string>) => void'
    fullName: '(asyncResult: Office.AsyncResult<string>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'outlook!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <string>) => void
        fullName: <string>) => void
  - uid: 'outlook!Office.Recipients:interface'
    name: Recipients
  - uid: 'outlook!Office.Body:interface'
    name: Body
  - uid: 'outlook!Office.From:interface'
    name: From
  - uid: 'outlook!Office.MessageCompose#getSelectedDataAsync~0:complex'
    name: Office.CoercionType | string
    fullName: Office.CoercionType | string
    spec.typeScript:
      - uid: 'outlook!Office.CoercionType:enum'
        name: Office.CoercionType
        fullName: Office.CoercionType
      - name: ' | string'
        fullName: ' | string'
  - uid: 'outlook!Office.MessageCompose#getSelectedDataAsync~1:complex'
    name: '(asyncResult: Office.AsyncResult<any>) => void'
    fullName: '(asyncResult: Office.AsyncResult<any>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'outlook!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <any>) => void
        fullName: <any>) => void
  - uid: 'outlook!Office.MessageCompose#getSelectedDataAsync~2:complex'
    name: Office.CoercionType | string
    fullName: Office.CoercionType | string
    spec.typeScript:
      - uid: 'outlook!Office.CoercionType:enum'
        name: Office.CoercionType
        fullName: Office.CoercionType
      - name: ' | string'
        fullName: ' | string'
  - uid: 'outlook!Office.MessageCompose#getSelectedDataAsync~3:complex'
    name: '(asyncResult: Office.AsyncResult<any>) => void'
    fullName: '(asyncResult: Office.AsyncResult<any>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'outlook!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <any>) => void
        fullName: <any>) => void
  - uid: 'outlook!Office.MessageCompose#itemType~0:complex'
    name: MailboxEnums.ItemType | string
    fullName: Office.MailboxEnums.ItemType | string
    spec.typeScript:
      - uid: 'outlook!Office.MailboxEnums.ItemType:enum'
        name: MailboxEnums.ItemType
        fullName: Office.MailboxEnums.ItemType
      - name: ' | string'
        fullName: ' | string'
  - uid: 'outlook!Office.MessageCompose#loadCustomPropertiesAsync~0:complex'
    name: '(asyncResult: Office.AsyncResult<CustomProperties>) => void'
    fullName: '(asyncResult: Office.AsyncResult<Office.CustomProperties>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'outlook!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <
        fullName: <
      - uid: 'outlook!Office.CustomProperties:interface'
        name: CustomProperties
        fullName: Office.CustomProperties
      - name: '>) => void'
        fullName: '>) => void'
  - uid: 'outlook!Office.NotificationMessages:interface'
    name: NotificationMessages
  - uid: 'outlook!Office.MessageCompose#removeAttachmentAsync~0:complex'
    name: '(asyncResult: Office.AsyncResult<void>) => void'
    fullName: '(asyncResult: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'outlook!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void
  - uid: 'outlook!Office.MessageCompose#removeAttachmentAsync~1:complex'
    name: '(asyncResult: Office.AsyncResult<void>) => void'
    fullName: '(asyncResult: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'outlook!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void
  - uid: 'outlook!Office.MessageCompose#removeHandlerAsync~0:complex'
    name: Office.EventType | string
    fullName: Office.EventType | string
    spec.typeScript:
      - uid: 'outlook!Office.EventType:enum'
        name: Office.EventType
        fullName: Office.EventType
      - name: ' | string'
        fullName: ' | string'
  - uid: 'outlook!Office.MessageCompose#removeHandlerAsync~1:complex'
    name: '(asyncResult: Office.AsyncResult<void>) => void'
    fullName: '(asyncResult: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'outlook!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void
  - uid: 'outlook!Office.MessageCompose#removeHandlerAsync~2:complex'
    name: Office.EventType | string
    fullName: Office.EventType | string
    spec.typeScript:
      - uid: 'outlook!Office.EventType:enum'
        name: Office.EventType
        fullName: Office.EventType
      - name: ' | string'
        fullName: ' | string'
  - uid: 'outlook!Office.MessageCompose#removeHandlerAsync~3:complex'
    name: '(asyncResult: Office.AsyncResult<void>) => void'
    fullName: '(asyncResult: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'outlook!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void
  - uid: 'outlook!Office.MessageCompose#saveAsync~0:complex'
    name: '(asyncResult: Office.AsyncResult<string>) => void'
    fullName: '(asyncResult: Office.AsyncResult<string>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'outlook!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <string>) => void
        fullName: <string>) => void
  - uid: 'outlook!Office.MessageCompose#saveAsync~1:complex'
    name: '(asyncResult: Office.AsyncResult<string>) => void'
    fullName: '(asyncResult: Office.AsyncResult<string>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'outlook!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <string>) => void
        fullName: <string>) => void
  - uid: 'outlook!Office.MessageCompose#setSelectedDataAsync~0:complex'
    name: Office.AsyncContextOptions & CoercionTypeOptions
    fullName: Office.AsyncContextOptions & Office.CoercionTypeOptions
    spec.typeScript:
      - uid: 'outlook!Office.AsyncContextOptions:interface'
        name: Office.AsyncContextOptions
        fullName: Office.AsyncContextOptions
      - name: ' & '
        fullName: ' & '
      - uid: 'outlook!Office.CoercionTypeOptions:interface'
        name: CoercionTypeOptions
        fullName: Office.CoercionTypeOptions
  - uid: 'outlook!Office.MessageCompose#setSelectedDataAsync~1:complex'
    name: '(asyncResult: Office.AsyncResult<void>) => void'
    fullName: '(asyncResult: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'outlook!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void
  - uid: 'outlook!Office.MessageCompose#setSelectedDataAsync~2:complex'
    name: '(asyncResult: Office.AsyncResult<void>) => void'
    fullName: '(asyncResult: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'outlook!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void
  - uid: 'outlook!Office.Subject:interface'
    name: Subject