### YamlMime:UniversalReference
ms.openlocfilehash: d3e77b3b68afbd88bc11830e88fa552bb1119bcb
ms.sourcegitcommit: 5c1011d5e46e007fd1f7f620d4dff74356dcd029
ms.translationtype: MT
ms.contentlocale: ru-RU
ms.lasthandoff: 03/01/2019
ms.locfileid: "30359032"
items:
- uid: Outlook_1_7.Office.MessageCompose
  summary: >-
    Режим создания сообщения для [Office. Context. Mailbox. Item](xref:Outlook_1_7.Office.Item)<!-- -->.


    **Важно!** это внутренний объект Outlook, который не предоставляется напрямую через существующие интерфейсы. Этот режим следует рассматривать как режим Office. Context. Mailbox. Item. Для получения дополнительных сведений обратитесь к странице [объектНой модели](https://docs.microsoft.com/office/dev/add-ins/reference/objectmodel/requirement-set-1.7/office.context.mailbox.item) .
  name: Office.MessageCompose
  fullName: Office.MessageCompose
  langs:
  - typeScript
  type: interface
  extends:
  - Message
  - 'ItemCompose '
  package: Outlook_1_7
  children:
  - Outlook_1_7.Office.MessageCompose.addFileAttachmentAsync
  - Outlook_1_7.Office.MessageCompose.addFileAttachmentAsync_1
  - Outlook_1_7.Office.MessageCompose.addHandlerAsync
  - Outlook_1_7.Office.MessageCompose.addHandlerAsync_1
  - Outlook_1_7.Office.MessageCompose.addItemAttachmentAsync
  - Outlook_1_7.Office.MessageCompose.addItemAttachmentAsync_1
  - Outlook_1_7.Office.MessageCompose.close
  - Outlook_1_7.Office.MessageCompose.getSelectedDataAsync
  - Outlook_1_7.Office.MessageCompose.getSelectedDataAsync_1
  - Outlook_1_7.Office.MessageCompose.loadCustomPropertiesAsync
  - Outlook_1_7.Office.MessageCompose.removeAttachmentAsync
  - Outlook_1_7.Office.MessageCompose.removeAttachmentAsync_1
  - Outlook_1_7.Office.MessageCompose.removeHandlerAsync
  - Outlook_1_7.Office.MessageCompose.removeHandlerAsync_1
  - Outlook_1_7.Office.MessageCompose.saveAsync
  - Outlook_1_7.Office.MessageCompose.saveAsync_1
  - Outlook_1_7.Office.MessageCompose.setSelectedDataAsync
  - Outlook_1_7.Office.MessageCompose.setSelectedDataAsync_1
  - Outlook_1_7.Office.MessageCompose.bcc
  - Outlook_1_7.Office.MessageCompose.body
  - Outlook_1_7.Office.MessageCompose.cc
  - Outlook_1_7.Office.MessageCompose.conversationId
  - Outlook_1_7.Office.MessageCompose.from
  - Outlook_1_7.Office.MessageCompose.itemType
  - Outlook_1_7.Office.MessageCompose.notificationMessages
  - Outlook_1_7.Office.MessageCompose.seriesId
  - Outlook_1_7.Office.MessageCompose.subject
  - Outlook_1_7.Office.MessageCompose.to
- uid: Outlook_1_7.Office.MessageCompose.addFileAttachmentAsync
  summary: >-
    Добавляет файл в сообщение или встречу в качестве вложения.


    Метод addFileAttachmentAsync передает файл по указанному универсальному коду ресурса (URI) и вкладывает его в элемент в форме создания.


    Идентификатор можно последовательно использовать с методом removeAttachmentAsync, чтобы удалить вложение, добавленное во время текущего сеанса.


    \[[Набор API: Mailbox 1,1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    <table> <tr><td>[Минимальный уровень разрешений](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadWriteItem</td></tr> <tr><td>[Применимый режим Outlook](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Создание сообщения</td></tr> <tr><td>Ошибки</td><td>Аттачментсизиксцеедед — вложение превышает разрешенное.</td></tr> <tr><td></td><td>Филетипенотсуппортед — вложение имеет недопустимый добавочный номер.</td></tr> <tr><td></td><td>NumberOfAttachmentsExceeded — сообщение или встреча содержит слишком много вложений.</td></tr> </table>

    ####Примеры


    ```javascript

    function callback(result) {
        if (result.error) {
            console.log(result.error);
        } else {
            console.log("Attachment added");
        }
    }


    function addAttachment() {
        // The values in asyncContext can be accessed in the callback.
        var options = { 'asyncContext': { var1: 1, var2: 2 } };

        var attachmentURL = "https://contoso.com/rtm/icon.png";
        Office.context.mailbox.item.addFileAttachmentAsync(attachmentURL, attachmentURL, options, callback);
    }

    ```

    ```javascript

    // The following example adds an image file as an inline attachment and

    // references the attachment in the message body.

    Office.context.mailbox.item.addFileAttachmentAsync(
        "http://i.imgur.com/WJXklif.png",
        "cute_bird.png",
        {
            isInline: true
        },
        function (asyncResult) {
            Office.context.mailbox.item.body.setAsync(
                "<p>Here's a cute bird!</p><img src='cid:cute_bird.png'>",
                {
                    "coercionType": "html"
                },
                function (asyncResult) {
                    // Do something here.
                });
        });
    ```
  name: addFileAttachmentAsync(uri, attachmentName, options, callback)
  fullName: addFileAttachmentAsync(uri, attachmentName, options, callback)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'addFileAttachmentAsync(uri: string, attachmentName: string, options?: Office.AsyncContextOptions & { isInline: boolean }, callback?: (asyncResult: Office.AsyncResult<string>) => void): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: uri
      description: Универсальный код ресурса (URI), представляющий расположение файла, который нужно вложить в сообщение или встречу. Максимальная длина — 2048 символов.
      type:
      - string
    - id: attachmentName
      description: Имя вложения, которое отображается при передаче вложения. Максимальная длина — 255 символов.
      type:
      - string
    - id: options
      description: 'Необязательное свойство. Объектный литерал, содержащий одно или несколько из указанных ниже свойств. asyncContext: разработчики могут предоставить любой объект, к которому необходимо получить доступ, в методе обратного вызова. isInline: при значении true указывает, что вложение будет отображаться встроенным в тексте сообщения и не должно отображаться в списке вложений.'
      type:
      - 'Office.AsyncContextOptions & { isInline: boolean }'
    - id: callback
      description: Необязательное свойство. После выполнения метода функция, переданная в параметре callback, вызывается с помощью одного параметра типа Office. AsyncResult. В случае успешного выполнения идентификатор вложения будет указываться в свойстве asyncResult. Value. Если передать вложение не удается, объект asyncResult будет содержать объект Error с описанием ошибки.
      type:
      - '(asyncResult: Office.AsyncResult<string>) => void'
- uid: Outlook_1_7.Office.MessageCompose.addFileAttachmentAsync_1
  summary: >-
    Добавляет файл в сообщение или встречу в качестве вложения.


    Метод addFileAttachmentAsync передает файл по указанному универсальному коду ресурса (URI) и вкладывает его в элемент в форме создания.


    Идентификатор можно последовательно использовать с методом removeAttachmentAsync, чтобы удалить вложение, добавленное во время текущего сеанса.


    \[[Набор API: Mailbox 1,1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: <table> <tr><td>[Минимальный уровень разрешений](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadWriteItem</td></tr> <tr><td>[Применимый режим Outlook](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Создание сообщения</td></tr> <tr><td>Ошибки</td><td>Аттачментсизиксцеедед — вложение превышает разрешенное.</td></tr> <tr><td></td><td>Филетипенотсуппортед — вложение имеет недопустимый добавочный номер.</td></tr> <tr><td></td><td>NumberOfAttachmentsExceeded — сообщение или встреча содержит слишком много вложений.</td></tr> </table>
  name: addFileAttachmentAsync(uri, attachmentName, callback)
  fullName: addFileAttachmentAsync(uri, attachmentName, callback)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'addFileAttachmentAsync(uri: string, attachmentName: string, callback?: (asyncResult: Office.AsyncResult<string>) => void): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: uri
      description: Универсальный код ресурса (URI), представляющий расположение файла, который нужно вложить в сообщение или встречу. Максимальная длина — 2048 символов.
      type:
      - string
    - id: attachmentName
      description: Имя вложения, которое отображается при передаче вложения. Максимальная длина — 255 символов.
      type:
      - string
    - id: callback
      description: Необязательное свойство. После выполнения метода функция, переданная в параметре callback, вызывается с помощью одного параметра типа Office. AsyncResult. В случае успешного выполнения идентификатор вложения будет указываться в свойстве asyncResult. Value. Если передать вложение не удается, объект asyncResult будет содержать объект Error с описанием ошибки.
      type:
      - '(asyncResult: Office.AsyncResult<string>) => void'
- uid: Outlook_1_7.Office.MessageCompose.addHandlerAsync
  summary: >-
    Добавляет обработчик для поддерживаемого события.


    В настоящее время поддерживаются типы `Office.EventType.AppointmentTimeChanged` <!-- -->событий `Office.EventType.RecipientsChanged` <!-- -->, и `Office.EventType.RecurrenceChanged` <!-- -->.


    \[[Набор API: Mailbox 1,7](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: <table> <tr><td>[Минимальный уровень разрешений](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadItem</td></tr> <tr><td>[Применимый режим Outlook](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Создание сообщения</td></tr> </table>
  name: addHandlerAsync(eventType, handler, options, callback)
  fullName: addHandlerAsync(eventType, handler, options, callback)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'addHandlerAsync(eventType: Office.EventType, handler: any, options?: any, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: eventType
      description: Событие, которое должно вызвать обработчик.
      type:
      - Office.EventType
    - id: handler
      description: Функция для обработки события. Функция должна принимать один параметр, который является литералом объекта. Свойство Type для параметра будет сопоставляться с параметром eventType, переданному в addHandlerAsync.
      type:
      - any
    - id: options
      description: 'Необязательное свойство. Объектный литерал, содержащий одно или несколько из указанных ниже свойств. asyncContext: разработчики могут предоставить любой объект, к которому необходимо получить доступ, в методе обратного вызова.'
      type:
      - any
    - id: callback
      description: Необязательное свойство. После выполнения метода функция, переданная в параметре callback, вызывается с помощью одного параметра asyncResult, который является объектом Office. AsyncResult.
      type:
      - '(asyncResult: Office.AsyncResult<void>) => void'
- uid: Outlook_1_7.Office.MessageCompose.addHandlerAsync_1
  summary: >-
    Добавляет обработчик для поддерживаемого события.


    В настоящее время поддерживаются типы `Office.EventType.AppointmentTimeChanged` <!-- -->событий `Office.EventType.RecipientsChanged` <!-- -->, и `Office.EventType.RecurrenceChanged` <!-- -->.


    \[[Набор API: Mailbox 1,7](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: <table> <tr><td>[Минимальный уровень разрешений](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadItem</td></tr> <tr><td>[Применимый режим Outlook](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Создание сообщения</td></tr> </table>
  name: addHandlerAsync(eventType, handler, callback)
  fullName: addHandlerAsync(eventType, handler, callback)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'addHandlerAsync(eventType: Office.EventType, handler: any, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: eventType
      description: Событие, которое должно вызвать обработчик.
      type:
      - Office.EventType
    - id: handler
      description: Функция для обработки события. Функция должна принимать один параметр, который является литералом объекта. Свойство Type для параметра будет сопоставляться с параметром eventType, переданному в addHandlerAsync.
      type:
      - any
    - id: callback
      description: Необязательное свойство. После выполнения метода функция, переданная в параметре callback, вызывается с помощью одного параметра asyncResult, который является объектом Office. AsyncResult.
      type:
      - '(asyncResult: Office.AsyncResult<void>) => void'
- uid: Outlook_1_7.Office.MessageCompose.addItemAttachmentAsync
  summary: >-
    Добавляет к сообщению элемент Exchange, например сообщение, в виде вложения.


    Метод addItemAttachmentAsync вкладывает элемент с указанным идентификатором Exchange в элемент в форме создания. Если указан метод обратного вызова, этот метод вызывается с помощью параметра asyncResult, который содержит идентификатор вложения или код, указывающий на ошибки, которые произошли при вложении элемента. При необходимости можно использовать параметр options для передачи сведений о состоянии в метод обратного вызова.


    Идентификатор можно последовательно использовать с методом removeAttachmentAsync, чтобы удалить вложение, добавленное во время текущего сеанса.


    Если ваша надстройка Office выполняется в Outlook Web App, метод addItemAttachmentAsync обеспечивает вложение элементов в элементы, отличные от редактируемого. Однако это действие не рекомендуется выполнять, поскольку оно не поддерживается.


    \[[Набор API: Mailbox 1,1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    <table> <tr><td>[Минимальный уровень разрешений](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadWriteItem</td></tr> <tr><td>[Применимый режим Outlook](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Создание сообщения</td></tr> <tr><td>Ошибки</td><td>NumberOfAttachmentsExceeded — сообщение или встреча содержит слишком много вложений.</td></tr> </table>

    ####Примеры


    ```javascript

    // The following example adds an existing Outlook item as an attachment

    // with the name `My Attachment`.

    function callback(result) {
        if (result.error) {
            console.log(result.error);
        } else {
            console.log("Attachment added");
        }
    }


    function addAttachment() {
        // EWS ID of item to attach (shortened for readability).
        var itemId = "AAMkADI1...AAA=";

        // The values in asyncContext can be accessed in the callback.
        var options = { 'asyncContext': { var1: 1, var2: 2 } };

        Office.context.mailbox.item.addItemAttachmentAsync(itemId, "My Attachment", options, callback);
    }

    ```
  name: addItemAttachmentAsync(itemId, attachmentName, options, callback)
  fullName: addItemAttachmentAsync(itemId, attachmentName, options, callback)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'addItemAttachmentAsync(itemId: any, attachmentName: string, options?: Office.AsyncContextOptions, callback?: (asyncResult: Office.AsyncResult<string>) => void): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: itemId
      description: Идентификатор Exchange для вкладываемого элемента. Максимальная длина — 100 символов.
      type:
      - any
    - id: attachmentName
      description: Имя вложения, которое отображается при передаче вложения. Максимальная длина — 255 символов.
      type:
      - string
    - id: options
      description: 'Необязательное свойство. Объектный литерал, содержащий одно или несколько из указанных ниже свойств. asyncContext: разработчики могут предоставить любой объект, к которому необходимо получить доступ, в методе обратного вызова.'
      type:
      - Office.AsyncContextOptions
    - id: callback
      description: Необязательное свойство. После выполнения метода функция, переданная в параметре callback, вызывается с помощью одного параметра типа Office. AsyncResult. В случае успешного выполнения идентификатор вложения будет указываться в свойстве asyncResult. Value. Если добавить вложение не удается, объект asyncResult будет содержать объект Error с описанием ошибки.
      type:
      - '(asyncResult: Office.AsyncResult<string>) => void'
- uid: Outlook_1_7.Office.MessageCompose.addItemAttachmentAsync_1
  summary: >-
    Добавляет к сообщению элемент Exchange, например сообщение, в виде вложения.


    Метод addItemAttachmentAsync вкладывает элемент с указанным идентификатором Exchange в элемент в форме создания. Если указан метод обратного вызова, этот метод вызывается с помощью параметра asyncResult, который содержит идентификатор вложения или код, указывающий на ошибки, которые произошли при вложении элемента. При необходимости можно использовать параметр options для передачи сведений о состоянии в метод обратного вызова.


    Идентификатор можно последовательно использовать с методом removeAttachmentAsync, чтобы удалить вложение, добавленное во время текущего сеанса.


    Если ваша надстройка Office выполняется в Outlook Web App, метод addItemAttachmentAsync обеспечивает вложение элементов в элементы, отличные от редактируемого. Однако это действие не рекомендуется выполнять, поскольку оно не поддерживается.


    \[[Набор API: Mailbox 1,1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: <table> <tr><td>[Минимальный уровень разрешений](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadWriteItem</td></tr> <tr><td>[Применимый режим Outlook](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Создание сообщения</td></tr> <tr><td>Ошибки</td><td>NumberOfAttachmentsExceeded — сообщение или встреча содержит слишком много вложений.</td></tr> </table>
  name: addItemAttachmentAsync(itemId, attachmentName, callback)
  fullName: addItemAttachmentAsync(itemId, attachmentName, callback)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'addItemAttachmentAsync(itemId: any, attachmentName: string, callback?: (asyncResult: Office.AsyncResult<string>) => void): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: itemId
      description: Идентификатор Exchange для вкладываемого элемента. Максимальная длина — 100 символов.
      type:
      - any
    - id: attachmentName
      description: Имя вложения, которое отображается при передаче вложения. Максимальная длина — 255 символов.
      type:
      - string
    - id: callback
      description: Необязательное свойство. После выполнения метода функция, переданная в параметре callback, вызывается с помощью одного параметра типа Office. AsyncResult. В случае успешного выполнения идентификатор вложения будет указываться в свойстве asyncResult. Value. Если добавить вложение не удается, объект asyncResult будет содержать объект Error с описанием ошибки.
      type:
      - '(asyncResult: Office.AsyncResult<string>) => void'
- uid: Outlook_1_7.Office.MessageCompose.close
  summary: >-
    ЗаКрывает текущий элемент, который составляется


    Поведение метода Close зависит от текущего состояния составного элемента. Если элемент содержит несохраненные изменения, клиент предлагает пользователю сохранить, удалить или закрыть действие.


    Если в клиенте Outlook для настольных ПК сообщение представляет собой ответ в тексте, метод close не приносит результатов.


    **Примечание**: в Outlook в Интернете, если элемент является встречей и ранее сохранялся с помощью saveAsync, пользователю предлагается сохранить, удалить или отменить действия даже в том случае, если после последнего сохранения элемента не было внесено никаких изменений.


    \[[Набор API: Mailbox 1,3](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: <table> <tr><td>[Минимальный уровень разрешений](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>С ограничениями</td></tr> <tr><td>[Применимый режим Outlook](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Создание сообщения</td></tr> </table>
  name: close()
  fullName: close()
  langs:
  - typeScript
  type: method
  syntax:
    content: 'close(): void;'
    return:
      type:
      - void
      description: ''
- uid: Outlook_1_7.Office.MessageCompose.getSelectedDataAsync
  summary: >-
    Асинхронно возвращает данные, выбранные в теме или тексте сообщения.


    Если выделенный фрагмент отсутствует, но курсор находится в тексте или теме, метод возвращает значение NULL для выбранных данных. Если выбраны не текст и не тема, метод возвращает ошибку InvalidSelection.


    Чтобы получить доступ к выбранным данным из метода обратного вызова, вызовите asyncResult.value.data. Для доступа к исходному свойству, на основе которого созданы выбранные данные, вызовите параметр asyncResult.value.sourceProperty, который может иметь значение body или subject.


    \[[Набор API: Mailbox 1,2](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    <table> <tr><td>[Минимальный уровень разрешений](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadWriteItem</td></tr> <tr><td>[Применимый режим Outlook](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Создание сообщения</td></tr> </table>

    ####Примеры


    ```javascript

    // Get selected data.

    Office.initialize = function () {
        Office.context.mailbox.item.getSelectedDataAsync(Office.CoercionType.Text, {}, getCallback);
    };


    function getCallback(asyncResult) {
        var text = asyncResult.value.data;
        var prop = asyncResult.value.sourceProperty;

        Office.context.mailbox.item.setSelectedDataAsync('Setting ' + prop + ': ' + text, {}, setCallback);
    }


    function setCallback(asyncResult) {
        // Check for errors.
    }

    ```
  name: getSelectedDataAsync(coercionType, options, callback)
  fullName: getSelectedDataAsync(coercionType, options, callback)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getSelectedDataAsync(coercionType: Office.CoercionType, options: Office.AsyncContextOptions, callback: (asyncResult: Office.AsyncResult<any>) => void): void;'
    return:
      type:
      - void
      description: Выбранные данные в виде строки с форматом, определенным в параметре coercionType.
    parameters:
    - id: coercionType
      description: ЗаПрашивает формат данных. Если текст, метод возвращает обычный текст в виде строки, удаляя все присутствующие HTML-теги. В случае HTML метод возвращает выделенный текст, если он является обычным текстом или HTML-кодом.
      type:
      - Office.CoercionType
    - id: options
      description: 'Объектный литерал, содержащий одно или несколько из указанных ниже свойств. asyncContext: разработчики могут предоставить любой объект, к которому необходимо получить доступ, в методе обратного вызова.'
      type:
      - Office.AsyncContextOptions
    - id: callback
      description: После выполнения метода функция, переданная в параметре callback, вызывается с помощью одного параметра типа Office. AsyncResult.
      type:
      - '(asyncResult: Office.AsyncResult<any>) => void'
- uid: Outlook_1_7.Office.MessageCompose.getSelectedDataAsync_1
  summary: >-
    Асинхронно возвращает данные, выбранные в теме или тексте сообщения.


    Если выделенный фрагмент отсутствует, но курсор находится в тексте или теме, метод возвращает значение NULL для выбранных данных. Если выбраны не текст и не тема, метод возвращает ошибку InvalidSelection.


    Чтобы получить доступ к выбранным данным из метода обратного вызова, вызовите asyncResult.value.data. Для доступа к исходному свойству, на основе которого созданы выбранные данные, вызовите параметр asyncResult.value.sourceProperty, который может иметь значение body или subject.


    \[[Набор API: Mailbox 1,2](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: <table> <tr><td>[Минимальный уровень разрешений](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadWriteItem</td></tr> <tr><td>[Применимый режим Outlook](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Создание сообщения</td></tr> </table>
  name: getSelectedDataAsync(coercionType, callback)
  fullName: getSelectedDataAsync(coercionType, callback)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getSelectedDataAsync(coercionType: Office.CoercionType, callback: (asyncResult: Office.AsyncResult<any>) => void): void;'
    return:
      type:
      - void
      description: Выбранные данные в виде строки с форматом, определенным в параметре coercionType.
    parameters:
    - id: coercionType
      description: ЗаПрашивает формат данных. Если текст, метод возвращает обычный текст в виде строки, удаляя все присутствующие HTML-теги. В случае HTML метод возвращает выделенный текст, если он является обычным текстом или HTML-кодом.
      type:
      - Office.CoercionType
    - id: callback
      description: После выполнения метода функция, переданная в параметре callback, вызывается с помощью одного параметра типа Office. AsyncResult.
      type:
      - '(asyncResult: Office.AsyncResult<any>) => void'
- uid: Outlook_1_7.Office.MessageCompose.loadCustomPropertiesAsync
  summary: >-
    Асинхронно загружает настраиваемые свойства для надстройки для выбранного элемента.


    Настраиваемые свойства сохраняются в виде пар "ключ-значение" для каждого приложения и каждого элемента. Этот метод возвращает объект CustomProperties при обратном вызове, который предоставляет методы для доступа к настраиваемым свойствам, характерным для текущего элемента и текущей надстройки. Настраиваемые свойства не шифруются для элемента, поэтому этот способ хранения не является безопасным.


    Настраиваемые свойства предоставляются в виде объекта CustomProperties в свойстве asyncResult.value. Этот объект позволяет получить, задать и удалить настраиваемые свойства из элемента, а также сохранить изменения, внесенные в настраиваемое свойство, на сервере.


    \[[Набор API: Mailbox 1,0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: <table> <tr><td>[Минимальный уровень разрешений](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadItem</td></tr> <tr><td>[Применимый режим Outlook](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Создание сообщения</td></tr> </table>
  name: loadCustomPropertiesAsync(callback, userContext)
  fullName: loadCustomPropertiesAsync(callback, userContext)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'loadCustomPropertiesAsync(callback: (asyncResult: Office.AsyncResult<CustomProperties>) => void, userContext?: any): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: callback
      description: После выполнения метода функция, переданная в параметре callback, вызывается с помощью одного параметра типа Office. AsyncResult.
      type:
      - '(asyncResult: Office.AsyncResult<CustomProperties>) => void'
    - id: userContext
      description: Необязательное свойство. Разработчики могут указать любой объект, к которому необходимо получить доступ, в функции обратного вызова. Доступ к этому объекту можно получить с помощью свойства asyncResult. asyncContext в функции обратного вызова.
      type:
      - any
- uid: Outlook_1_7.Office.MessageCompose.removeAttachmentAsync
  summary: >-
    Удаляет вложение из сообщения или встречи.


    Метод removeAttachmentAsync удаляет вложение с указанным идентификатором из элемента. Идентификатор вложения рекомендуется использовать для удаления вложения, только если оно добавлено тем же почтовым приложением в ходе текущего сеанса. В Outlook Web App и Outlook Web App для устройств идентификатор вложения действителен только в рамках одного сеанса. Сеанс завершается, когда пользователь закрывает приложение или начинает создавать элемент во встроенной форме, а затем переходит из формы в отдельное окно.


    \[[Набор API: Mailbox 1,1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    <table> <tr><td>[Минимальный уровень разрешений](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadWriteItem</td></tr> <tr><td>[Применимый режим Outlook](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Создание сообщения</td></tr> <tr><td>Ошибки</td><td>Инвалидаттачментид — идентификатор вложения не существует.</td></tr> </table>

    ####Примеры


    ```javascript

    // The following code removes an attachment with an identifier of '0'.

    Office.context.mailbox.item.removeAttachmentAsync(
        '0',
        { asyncContext : null },
        function (asyncResult)
        {
            console.log(asyncResult.status);
        }
    );

    ```
  name: removeAttachmentAsync(attachmentId, options, callback)
  fullName: removeAttachmentAsync(attachmentId, options, callback)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'removeAttachmentAsync(attachmentId: string, options?: Office.AsyncContextOptions, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: attachmentId
      description: Идентификатор удаляемого вложения.
      type:
      - string
    - id: options
      description: 'Необязательное свойство. Объектный литерал, содержащий одно или несколько из указанных ниже свойств. asyncContext: разработчики могут предоставить любой объект, к которому необходимо получить доступ, в методе обратного вызова.'
      type:
      - Office.AsyncContextOptions
    - id: callback
      description: Необязательное свойство. После выполнения метода функция, переданная в параметре callback, вызывается с помощью одного параметра типа Office. AsyncResult. Если не удается удалить вложение, свойство asyncResult. Error будет содержать код ошибки с причиной сбоя.
      type:
      - '(asyncResult: Office.AsyncResult<void>) => void'
- uid: Outlook_1_7.Office.MessageCompose.removeAttachmentAsync_1
  summary: >-
    Удаляет вложение из сообщения или встречи.


    Метод removeAttachmentAsync удаляет вложение с указанным идентификатором из элемента. Идентификатор вложения рекомендуется использовать для удаления вложения, только если оно добавлено тем же почтовым приложением в ходе текущего сеанса. В Outlook Web App и Outlook Web App для устройств идентификатор вложения действителен только в рамках одного сеанса. Сеанс завершается, когда пользователь закрывает приложение или начинает создавать элемент во встроенной форме, а затем переходит из формы в отдельное окно.


    \[[Набор API: Mailbox 1,1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: <table> <tr><td>[Минимальный уровень разрешений](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadWriteItem</td></tr> <tr><td>[Применимый режим Outlook](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Создание сообщения</td></tr> <tr><td>Ошибки</td><td>Инвалидаттачментид — идентификатор вложения не существует.</td></tr> </table>
  name: removeAttachmentAsync(attachmentId, callback)
  fullName: removeAttachmentAsync(attachmentId, callback)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'removeAttachmentAsync(attachmentId: string, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: attachmentId
      description: Идентификатор удаляемого вложения.
      type:
      - string
    - id: callback
      description: Необязательное свойство. После выполнения метода функция, переданная в параметре callback, вызывается с помощью одного параметра типа Office. AsyncResult. Если не удается удалить вложение, свойство asyncResult. Error будет содержать код ошибки с причиной сбоя.
      type:
      - '(asyncResult: Office.AsyncResult<void>) => void'
- uid: Outlook_1_7.Office.MessageCompose.removeHandlerAsync
  summary: >-
    Удаляет обработчиков для поддерживаемого типа события.


    В настоящее время поддерживаются типы `Office.EventType.AppointmentTimeChanged` <!-- -->событий `Office.EventType.RecipientsChanged` <!-- -->, и `Office.EventType.RecurrenceChanged` <!-- -->.


    \[[Набор API: Mailbox 1,7](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: <table> <tr><td>[Минимальный уровень разрешений](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadItem</td></tr> <tr><td>[Применимый режим Outlook](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Создание сообщения</td></tr> </table>
  name: removeHandlerAsync(eventType, options, callback)
  fullName: removeHandlerAsync(eventType, options, callback)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'removeHandlerAsync(eventType: Office.EventType, options?: any, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: eventType
      description: Событие, которое должно отменить обработчик.
      type:
      - Office.EventType
    - id: options
      description: 'Необязательное свойство. Объектный литерал, содержащий одно или несколько из указанных ниже свойств. asyncContext: разработчики могут предоставить любой объект, к которому необходимо получить доступ, в методе обратного вызова.'
      type:
      - any
    - id: callback
      description: Необязательное свойство. После выполнения метода функция, переданная в параметре callback, вызывается с помощью одного параметра asyncResult, который является объектом Office. AsyncResult.
      type:
      - '(asyncResult: Office.AsyncResult<void>) => void'
- uid: Outlook_1_7.Office.MessageCompose.removeHandlerAsync_1
  summary: >-
    Удаляет обработчиков для поддерживаемого типа события.


    В настоящее время поддерживаются типы `Office.EventType.AppointmentTimeChanged` <!-- -->событий `Office.EventType.RecipientsChanged` <!-- -->, и `Office.EventType.RecurrenceChanged` <!-- -->.


    \[[Набор API: Mailbox 1,7](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: <table> <tr><td>[Минимальный уровень разрешений](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadItem</td></tr> <tr><td>[Применимый режим Outlook](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Создание сообщения</td></tr> </table>
  name: removeHandlerAsync(eventType, callback)
  fullName: removeHandlerAsync(eventType, callback)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'removeHandlerAsync(eventType: Office.EventType, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: eventType
      description: Событие, которое должно отменить обработчик.
      type:
      - Office.EventType
    - id: callback
      description: Необязательное свойство. После выполнения метода функция, переданная в параметре callback, вызывается с помощью одного параметра asyncResult, который является объектом Office. AsyncResult.
      type:
      - '(asyncResult: Office.AsyncResult<void>) => void'
- uid: Outlook_1_7.Office.MessageCompose.saveAsync
  summary: >-
    Асинхронно сохраняет элемент.


    При вызове этот метод сохраняет текущее сообщение в виде черновика и возвращает идентификатор элемента с помощью метода обратного вызова. В Outlook Web App или интерактивном режиме Outlook этот элемент сохраняется на сервере. В Outlook в режиме кэширования этот элемент сохраняется в локальном кэше.


    Так как для встреч не задано состояние черновиков, то при вызове saveAsync для встречи в режиме создания элемент будет сохранен как обычная встреча в календаре пользователя. Приглашения для новых встреч, которые еще не были сохранены, не будут отправляться. При сохранении существующей встречи будет отправлено обновление добавленных или удаленных участников.


    **Note**: Если надстройка вызывает saveAsync для элемента в режиме создания, чтобы получить идентификатор itemId для использования с EWS или REST API, помните, что в режиме кэширования может потребоваться некоторое время, прежде чем элемент будет фактически синхронизирован с сервером. Пока элемент не будет синхронизирован, использование itemId возвратит ошибку.


    **Note**: следующие клиенты имеют различные действия для saveAsync в режиме создания:


    - Mac Outlook не поддерживает saveAsync на собрании в режиме создания. При вызове saveAsync на собрании в Mac Outlook будет возвращена ошибка.


    - Outlook в Интернете всегда отправляет приглашение или обновление при вызове saveAsync для встречи в режиме создания.


    \[[Набор API: Mailbox 1,3](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: <table> <tr><td>[Минимальный уровень разрешений](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadWriteItem</td></tr> <tr><td>[Применимый режим Outlook](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Создание сообщения</td></tr> <tr><td>Ошибки</td><td>Инвалидаттачментид — идентификатор вложения не существует.</td></tr> </table>
  name: saveAsync(options, callback)
  fullName: saveAsync(options, callback)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'saveAsync(options: Office.AsyncContextOptions, callback: (asyncResult: Office.AsyncResult<string>) => void): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: options
      description: 'Объектный литерал, содержащий одно или несколько из указанных ниже свойств. asyncContext: разработчики могут предоставить любой объект, к которому необходимо получить доступ, в методе обратного вызова.'
      type:
      - Office.AsyncContextOptions
    - id: callback
      description: После выполнения метода функция, переданная в параметре callback, вызывается с помощью одного параметра типа Office. AsyncResult.
      type:
      - '(asyncResult: Office.AsyncResult<string>) => void'
- uid: Outlook_1_7.Office.MessageCompose.saveAsync_1
  summary: >-
    Асинхронно сохраняет элемент.


    При вызове этот метод сохраняет текущее сообщение в виде черновика и возвращает идентификатор элемента с помощью метода обратного вызова. В Outlook Web App или интерактивном режиме Outlook этот элемент сохраняется на сервере. В Outlook в режиме кэширования этот элемент сохраняется в локальном кэше.


    Так как для встреч не задано состояние черновиков, то при вызове saveAsync для встречи в режиме создания элемент будет сохранен как обычная встреча в календаре пользователя. Приглашения для новых встреч, которые еще не были сохранены, не будут отправляться. При сохранении существующей встречи будет отправлено обновление добавленных или удаленных участников.


    **Note**: Если надстройка вызывает saveAsync для элемента в режиме создания, чтобы получить идентификатор itemId для использования с EWS или REST API, помните, что в режиме кэширования может потребоваться некоторое время, прежде чем элемент будет фактически синхронизирован с сервером. Пока элемент не будет синхронизирован, использование itemId возвратит ошибку.


    **Note**: следующие клиенты имеют различные действия для saveAsync в режиме создания:


    - Mac Outlook не поддерживает saveAsync на собрании в режиме создания. При вызове saveAsync на собрании в Mac Outlook будет возвращена ошибка.


    - Outlook в Интернете всегда отправляет приглашение или обновление при вызове saveAsync для встречи в режиме создания.


    \[[Набор API: Mailbox 1,3](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    <table> <tr><td>[Минимальный уровень разрешений](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadWriteItem</td></tr> <tr><td>[Применимый режим Outlook](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Создание сообщения</td></tr> <tr><td>Ошибки</td><td>Инвалидаттачментид — идентификатор вложения не существует.</td></tr> </table>

    ####Примеры


    ```javascript

    Office.context.mailbox.item.saveAsync(
        function callback(result) {
            // Process the result.
        });

    // The following is an example of the

    // `result` parameter passed to the

    // callback function. The `value`

    // property contains the item ID of

    // the item.

    {
        "value": "AAMkADI5...AAA=",
        "status": "succeeded"
    }

    ```
  name: saveAsync(callback)
  fullName: saveAsync(callback)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'saveAsync(callback: (asyncResult: Office.AsyncResult<string>) => void): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: callback
      description: После выполнения метода функция, переданная в параметре callback, вызывается с помощью одного параметра типа Office. AsyncResult.
      type:
      - '(asyncResult: Office.AsyncResult<string>) => void'
- uid: Outlook_1_7.Office.MessageCompose.setSelectedDataAsync
  summary: >-
    Асинхронно вставляет данные в текст или тему сообщения.


    Метод setSelectedDataAsync Вставляет указанную строку в позицию курсора в теме или тексте элемента, или, если текст выбран в редакторе, он заменяет выделенный текст. Если курсор не находится в поле Body или subject, возвращается ошибка. После вставки курсор помещается в конец вставленного содержимого.


    \[[Набор API: Mailbox 1,2](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    <table> <tr><td>[Минимальный уровень разрешений](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadWriteItem</td></tr> <tr><td>[Применимый режим Outlook](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Создание сообщения</td></tr> <tr><td>Ошибки</td><td>Инвалидаттачментид — идентификатор вложения не существует.</td></tr> </table>

    ####Примеры


    ```javascript

    Office.context.mailbox.item.setSelectedDataAsync("<b>Hello World!</b>", { coercionType : "html" });

    ```
  name: setSelectedDataAsync(data, options, callback)
  fullName: setSelectedDataAsync(data, options, callback)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'setSelectedDataAsync(data: string, options?: Office.AsyncContextOptions & CoercionTypeOptions, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: data
      description: Вставляемые данные. Объем данных не должен превышать 1 000 000 символов. Если передано больше 1 000 000 символов, возвращается исключение ArgumentOutOfRange.
      type:
      - string
    - id: options
      description: 'Необязательное свойство. Объектный литерал, содержащий одно или несколько из указанных ниже свойств. asyncContext: разработчики могут предоставить любой объект, к которому необходимо получить доступ, в методе обратного вызова. coercionType: в случае с текстом текущий стиль применяется в Outlook Web App и Outlook. Если поле представляет собой редактор HTML, вставляются только текстовые данные, даже если они имеют формат HTML. Если HTML и поле поддерживает HTML (тема не задана), текущий стиль применяется в Outlook Web App, а в Outlook применяется стиль по умолчанию. Если поле является текстовым полем, возвращается ошибка Инвалиддатаформат. Если параметр coercionType не задан, результат зависит от поля. Если поле содержит HTML, используется HTML. Если поле текстовое, используется обычный текст.'
      type:
      - Office.AsyncContextOptions & CoercionTypeOptions
    - id: callback
      description: Необязательное свойство. После выполнения метода функция, переданная в параметре callback, вызывается с помощью одного параметра типа Office. AsyncResult.
      type:
      - '(asyncResult: Office.AsyncResult<void>) => void'
- uid: Outlook_1_7.Office.MessageCompose.setSelectedDataAsync_1
  summary: >-
    Асинхронно вставляет данные в текст или тему сообщения.


    Метод setSelectedDataAsync Вставляет указанную строку в позицию курсора в теме или тексте элемента, или, если текст выбран в редакторе, он заменяет выделенный текст. Если курсор не находится в поле Body или subject, возвращается ошибка. После вставки курсор помещается в конец вставленного содержимого.


    \[[Набор API: Mailbox 1,2](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    <table> <tr><td>[Минимальный уровень разрешений](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadWriteItem</td></tr> <tr><td>[Применимый режим Outlook](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Создание сообщения</td></tr> <tr><td>Ошибки</td><td>Инвалидаттачментид — идентификатор вложения не существует.</td></tr> </table>

    ####Примеры


    ```javascript

    Office.context.mailbox.item.setSelectedDataAsync("Hello World!");

    ```
  name: setSelectedDataAsync(data, callback)
  fullName: setSelectedDataAsync(data, callback)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'setSelectedDataAsync(data: string, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: data
      description: Вставляемые данные. Объем данных не должен превышать 1 000 000 символов. Если передано больше 1 000 000 символов, возвращается исключение ArgumentOutOfRange.
      type:
      - string
    - id: callback
      description: Необязательное свойство. После выполнения метода функция, переданная в параметре callback, вызывается с помощью одного параметра типа Office. AsyncResult.
      type:
      - '(asyncResult: Office.AsyncResult<void>) => void'
- uid: Outlook_1_7.Office.MessageCompose.bcc
  summary: >-
    Получает объект, который предоставляет методы для получения или обновления получателей скрытой копии сообщения.


    \[[Набор API: Mailbox 1,1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    <table> <tr><td>[Минимальный уровень разрешений](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadItem</td></tr> <tr><td>[Применимый режим Outlook](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Создание сообщения</td></tr> </table>

    ####Примеры


    ```javascript

    Office.context.mailbox.item.bcc.setAsync( ['alice@contoso.com', 'bob@contoso.com'] );

    Office.context.mailbox.item.bcc.addAsync( ['jason@contoso.com'] );

    Office.context.mailbox.item.bcc.getAsync(callback);


    function callback(asyncResult) {
        var arrayOfBccRecipients = asyncResult.value;
    }

    ```
  name: bcc
  fullName: bcc
  langs:
  - typeScript
  type: property
  syntax:
    content: 'bcc: Recipients;'
    return:
      type:
      - Recipients
- uid: Outlook_1_7.Office.MessageCompose.body
  summary: >-
    Получает объект, предоставляющий методы для работы с основным текстом элемента.


    \[[Набор API: Mailbox 1,1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    <table> <tr><td>[Минимальный уровень разрешений](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadItem</td></tr> <tr><td>[Применимый режим Outlook](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Создание сообщения</td></tr> </table>

    ####Примеры


    ```javascript

    // This example gets the body of the message in plain text.

    Office.context.mailbox.item.body.getAsync(
        "text",
        { asyncContext: "This is passed to the callback" },
        function callback(result) {
            // Do something with the result.
        });

    // The following is an example of the result parameter passed to the callback function.

    {
        "value": "TEXT of whole body (including threads below)",
        "status": "succeeded",
        "asyncContext": "This is passed to the callback"
    }

    ```
  name: body
  fullName: body
  langs:
  - typeScript
  type: property
  syntax:
    content: 'body: Body;'
    return:
      type:
      - Body
- uid: Outlook_1_7.Office.MessageCompose.cc
  summary: >-
    Предоставляет доступ к получателям копии сообщения. Тип объекта и уровень доступа зависят от режима текущего элемента.


    Свойство CC возвращает объект [Office. Recipients](xref:Outlook_1_7.Office.Recipients) , который предоставляет методы для получения или обновления получателей в строке "копия" сообщения.


    \[[Набор API: Mailbox 1,0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    <table> <tr><td>[Минимальный уровень разрешений](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadItem</td></tr> <tr><td>[Применимый режим Outlook](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Создание сообщения</td></tr> </table>

    ####Примеры


    ```javascript

    Office.context.mailbox.item.cc.setAsync( ['alice@contoso.com', 'bob@contoso.com'] );

    Office.context.mailbox.item.cc.addAsync( ['jason@contoso.com'] );

    Office.context.mailbox.item.cc.getAsync(callback);


    function callback(asyncResult) {
        var arrayOfCcRecipients = asyncResult.value;
    }

    ```
  name: cc
  fullName: cc
  langs:
  - typeScript
  type: property
  syntax:
    content: 'cc: Recipients;'
    return:
      type:
      - Recipients
- uid: Outlook_1_7.Office.MessageCompose.conversationId
  summary: >-
    Получает идентификатор разговора по электронной почте, содержащего конкретное сообщение.


    Вы можете получить целочисленное значение этого свойства, если ваше почтовое приложение активируется в формах просмотра или формах создания ответов. Если пользователь изменит тему ответа, после его отправки идентификатор беседы будет изменен, и полученное ранее значение будет недействительным.


    Это свойство имеет значение NULL для нового элемента в форме создания. Если пользователь задаст тему и сохранит элемент, свойство conversationId вернет значение.


    \[[Набор API: Mailbox 1,0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    <table> <tr><td>[Минимальный уровень разрешений](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadItem</td></tr> <tr><td>[Применимый режим Outlook](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Создание сообщения</td></tr> </table>

    ####Примеры


    ```javascript

    var conversationId = Office.context.mailbox.item.conversationId;

    console.log("conversationId: " + conversationId);

    ```
  name: conversationId
  fullName: conversationId
  langs:
  - typeScript
  type: property
  syntax:
    content: 'conversationId: string;'
    return:
      type:
      - string
- uid: Outlook_1_7.Office.MessageCompose.from
  summary: >-
    Получает адрес электронной почты отправителя сообщения.


    Свойства From и Sender представляют одного и того же человека, если сообщение не отправлено представителем. В этом случае свойство From представляет владельца, а свойство sender — делегата.


    Свойство From возвращает объект from, который предоставляет метод для получения значения From.


    \[[Набор API: Mailbox 1,7](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    <table> <tr><td>[Минимальный уровень разрешений](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadItem</td></tr> <tr><td>[Применимый режим Outlook](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Создание сообщения</td></tr> </table>

    ####Примеры


    ```javascript

    Office.context.mailbox.item.from.getAsync(callback);


    function callback(asyncResult) {
        var from = asyncResult.value;
    }

    ```
  name: from
  fullName: from
  langs:
  - typeScript
  type: property
  syntax:
    content: 'from: From;'
    return:
      type:
      - From
- uid: Outlook_1_7.Office.MessageCompose.itemType
  summary: >-
    Получает тип элемента, который представляет экземпляр.


    Свойство itemType возвращает одно из значений перечисления ItemType, которое указывает, является ли экземпляр объекта item сообщением или собранием.


    \[[Набор API: Mailbox 1,0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    <table> <tr><td>[Минимальный уровень разрешений](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadItem</td></tr> <tr><td>[Применимый режим Outlook](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Создание сообщения</td></tr> </table>

    ####Примеры


    ```javascript

    if (Office.context.mailbox.item.itemType === Office.MailboxEnums.ItemType.Message) {
        // Do something.
    } else {
        // Do something else.
    }

    ```
  name: itemType
  fullName: itemType
  langs:
  - typeScript
  type: property
  syntax:
    content: 'itemType: MailboxEnums.ItemType;'
    return:
      type:
      - MailboxEnums.ItemType
- uid: Outlook_1_7.Office.MessageCompose.notificationMessages
  summary: >-
    Получает сообщения уведомления для элемента.


    \[[Набор API: Mailbox 1,3](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    <table> <tr><td>[Минимальный уровень разрешений](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadItem</td></tr> <tr><td>[Применимый режим Outlook](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Создание сообщения</td></tr> </table>

    ####Примеры


    ```javascript

    // Get all notifications.

    Office.context.mailbox.item.notificationMessages.getAllAsync(
        function (asyncResult) {
            console.log(JSON.stringify(asyncResult));
        }
    );

    ```
  name: notificationMessages
  fullName: notificationMessages
  langs:
  - typeScript
  type: property
  syntax:
    content: 'notificationMessages: NotificationMessages;'
    return:
      type:
      - NotificationMessages
- uid: Outlook_1_7.Office.MessageCompose.seriesId
  summary: >-
    Получает идентификатор серии, к которой относится экземпляр.


    В OWA и Outlook seriesId возвращает идентификатор веб-служб Exchange (EWS) родительского элемента (ряда), к которому принадлежит этот элемент. Однако в iOS и Android seriesId возвращает идентификатор REST родительского элемента.


    **Note**: идентификатор, возвращаемый свойством seriesId, совпадает с идентификатором элемента веб-служб Exchange. Свойство seriesId не совпадает с идентификаторами Outlook, используемыми в REST API Outlook. Прежде чем совершать вызовы REST API, используя это значение, его необходимо преобразовать с помощью Office.context.mailbox.convertToRestId. Дополнительные сведения см<!-- -->. в статье [Использование REST API Outlook из надстройки Outlook](https://docs.microsoft.com/outlook/add-ins/use-rest-api).


    Свойство seriesId возвращает значение NULL для элементов, не имеющих родительских элементов, таких как отдельные встречи, элементы ряда или приглашения на собрание, и возвращает значение undefine для любых других элементов, которые не являются приглашениями на собрания.


    \[[Набор API: Mailbox 1,7](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: "<table> <tr><td>[Минимальный уровень разрешений](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadItem</td></tr> <tr><td>[Применимый режим Outlook](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Создание сообщения</td></tr> </table>\n####Примеры\n\n```javascript\nvar seriesId = Office.context.mailbox.item.seriesId;\n\n// The seriesId property returns null for items that do\n// not have parent items (such as single appointments,\n// series items, or meeting requests) and returns\n// undefined for messages that are not meeting requests.\nvar isSeriesInstance = (seriesId != null);\nconsole.log(\"SeriesId is \" + seriesId \n    + \" and isSeriesInstance is \" + isSeriesInstance);\n```"
  name: seriesId
  fullName: seriesId
  langs:
  - typeScript
  type: property
  syntax:
    content: 'seriesId: string;'
    return:
      type:
      - string
- uid: Outlook_1_7.Office.MessageCompose.subject
  summary: >-
    Получает или задает описание, которое отображается в поле темы элемента.


    Свойство subject получает или задает всю тему элемента для отправки с почтового сервера.


    Свойство subject возвращает объект Subject, который предоставляет методы для получения и задания темы.


    \[[Набор API: Mailbox 1,0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    <table> <tr><td>[Минимальный уровень разрешений](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadItem</td></tr> <tr><td>[Применимый режим Outlook](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Создание сообщения</td></tr> </table>

    ####Примеры


    ```javascript

    Office.context.mailbox.item.subject.getAsync(callback);


    function callback(asyncResult) {
        var subject = asyncResult.value;
    }

    ```
  name: subject
  fullName: subject
  langs:
  - typeScript
  type: property
  syntax:
    content: 'subject: Subject;'
    return:
      type:
      - Subject
- uid: Outlook_1_7.Office.MessageCompose.to
  summary: >-
    Предоставляет доступ к получателям, указанным в строке Кому сообщения. Тип объекта и уровень доступа зависят от режима текущего элемента.


    Свойство to возвращает объект Recipients, который предоставляет методы для получения или обновления получателей в строке "Кому" сообщения.


    \[[Набор API: Mailbox 1,0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    <table> <tr><td>[Минимальный уровень разрешений](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadItem</td></tr> <tr><td>[Применимый режим Outlook](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Создание сообщения</td></tr> </table>

    ####Примеры


    ```javascript

    Office.context.mailbox.item.to.setAsync( ['alice@contoso.com', 'bob@contoso.com'] );

    Office.context.mailbox.item.to.addAsync( ['jason@contoso.com'] );

    Office.context.mailbox.item.to.getAsync(callback);


    function callback(asyncResult) {
        var arrayOfToRecipients = asyncResult.value;
    }

    ```
  name: to
  fullName: to
  langs:
  - typeScript
  type: property
  syntax:
    content: 'to: Recipients;'
    return:
      type:
      - Recipients
