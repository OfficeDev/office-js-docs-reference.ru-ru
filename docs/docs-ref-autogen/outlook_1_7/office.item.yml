### YamlMime:UniversalReference
ms.openlocfilehash: 11ed1a8c73b51f1b3e1614723d2a8c76fdfef665
ms.sourcegitcommit: d356f1545c328d4b59ce814fcab8191e4231f1dc
ms.translationtype: MT
ms.contentlocale: ru-RU
ms.lasthandoff: 02/13/2019
ms.locfileid: "29973928"
items:
- uid: Outlook_1_7.Office.Item
  summary: >-
    Пространство имен элемента используется для доступа к выделенный в текущий момент сообщения, приглашения на собрание или встречи. Можно определить тип элемента с помощью `itemType` свойство.


    \[[Набор API-Интерфейсов: почтовый ящик 1.0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    <table><tr><td>[Минимальный уровень разрешений](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>Ограниченный доступ</td></tr>


    <tr><td>[Применимый режим Outlook](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Создание или чтение</td></tr></table>
  name: Office.Item
  fullName: Office.Item
  langs:
  - typeScript
  type: interface
  package: Outlook_1_7
  children:
  - Outlook_1_7.Office.Item.addHandlerAsync
  - Outlook_1_7.Office.Item.addHandlerAsync_1
  - Outlook_1_7.Office.Item.loadCustomPropertiesAsync
  - Outlook_1_7.Office.Item.removeHandlerAsync
  - Outlook_1_7.Office.Item.removeHandlerAsync_1
  - Outlook_1_7.Office.Item.body
  - Outlook_1_7.Office.Item.itemType
  - Outlook_1_7.Office.Item.notificationMessages
  - Outlook_1_7.Office.Item.seriesId
- uid: Outlook_1_7.Office.Item.addHandlerAsync
  summary: >-
    Добавляет обработчик для поддерживаемого события.


    В настоящее время поддерживаемые типы событий, `Office.EventType.AppointmentTimeChanged` <!-- -->, `Office.EventType.RecipientsChanged` <!-- -->, и `Office.EventType.RecurrenceChanged` <!-- -->.


    \[[Набор API-Интерфейсов: почтовый ящик 1.7](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    <table><tr><td>[Минимальный уровень разрешений](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadItem</td></tr>


    <tr><td>[Применимый режим Outlook](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Создание или чтение</td></tr></table>


    В дополнение к этой подпись метода также имеет следующую подпись:


    `addHandlerAsync(eventType: Office.EventType, handler: any, callback?: (result: Office.AsyncResult<void>) => void): void;`
  name: addHandlerAsync(eventType, handler, options, callback)
  fullName: addHandlerAsync(eventType, handler, options, callback)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'addHandlerAsync(eventType: Office.EventType, handler: any, options?: any, callback?: (result: Office.AsyncResult<void>) => void): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: eventType
      description: Событие, которое должно вызвать обработчик.
      type:
      - Office.EventType
    - id: handler
      description: Функция для обработки событий. Функции должны принимать один параметр, который является объектом литерала. Свойство type на параметр будет соответствовать параметру eventType, переданной в addHandlerAsync.
      type:
      - any
    - id: options
      description: 'Необязательное свойство. Объектный литерал, содержащий одно или несколько из указанных ниже свойств. asyncContext: разработчики могут предоставлять любого объекта, их необходимо получить доступ в метод обратного вызова.'
      type:
      - any
    - id: callback
      description: Необязательное свойство. После завершения работы метода, функции, переданной в параметре обратного вызова вызывается с одним параметра asyncResult, который является объектом Office.AsyncResult.
      type:
      - '(result: Office.AsyncResult<void>) => void'
- uid: Outlook_1_7.Office.Item.addHandlerAsync_1
  summary: >-
    Добавляет обработчик для поддерживаемого события.


    В настоящее время поддерживаемые типы событий, `Office.EventType.AppointmentTimeChanged` <!-- -->, `Office.EventType.RecipientsChanged` <!-- -->, и `Office.EventType.RecurrenceChanged` <!-- -->.


    \[[Набор API-Интерфейсов: почтовый ящик 1.7](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    <table><tr><td>[Минимальный уровень разрешений](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadItem</td></tr>


    <tr><td>[Применимый режим Outlook](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Создание или чтение</td></tr></table>

    ####Примеры


    ```javascript

    function myHandlerFunction(eventarg) {
        if (eventarg.attachmentStatus === Office.MailboxEnums.AttachmentStatus.Added) {
            var attachment = eventarg.attachmentDetails;
            console.log("Event Fired and Attachment Added!");
            getAttachmentContentAsync(attachment.id, options, callback);
        }
    }


    Office.context.mailbox.item.addHandlerAsync(Office.EventType.AttachmentsChanged, myHandlerFunction, myCallback);

    ```
  name: addHandlerAsync(eventType, handler, callback)
  fullName: addHandlerAsync(eventType, handler, callback)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'addHandlerAsync(eventType: Office.EventType, handler: any, callback?: (result: Office.AsyncResult<void>) => void): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: eventType
      description: Событие, которое должно вызвать обработчик.
      type:
      - Office.EventType
    - id: handler
      description: Функция для обработки событий. Функции должны принимать один параметр, который является объектом литерала. Свойство type на параметр будет соответствовать параметру eventType, переданной в addHandlerAsync.
      type:
      - any
    - id: callback
      description: Необязательное свойство. После завершения работы метода, функции, переданной в параметре обратного вызова вызывается с одним параметра asyncResult, который является объектом Office.AsyncResult.
      type:
      - '(result: Office.AsyncResult<void>) => void'
- uid: Outlook_1_7.Office.Item.loadCustomPropertiesAsync
  summary: >-
    Асинхронно загружает настраиваемые свойства для надстройки для выбранного элемента.


    Настраиваемые свойства сохраняются в виде пар "ключ-значение" для каждого приложения и каждого элемента. Этот метод возвращает объект CustomProperties при обратном вызове, который предоставляет методы для доступа к настраиваемым свойствам, характерным для текущего элемента и текущей надстройки. Настраиваемые свойства не шифруются для элемента, поэтому этот способ хранения не является безопасным.


    Настраиваемые свойства предоставляются в виде объекта CustomProperties в свойстве asyncResult.value. Этот объект позволяет получить, задать и удалить настраиваемые свойства из элемента, а также сохранить изменения, внесенные в настраиваемое свойство, на сервере.


    \[[Набор API-Интерфейсов: почтовый ящик 1.0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    <table><tr><td>[Минимальный уровень разрешений](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadItem</td></tr>


    <tr><td>[Применимый режим Outlook](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Создание или чтение</td></tr></table>

    ####Примеры


    ```javascript

    // The following example shows how to use the loadCustomPropertiesAsync method

    // to asynchronously load custom properties that are specific to the current item.

    // The example also shows how to use the saveAsync method to save these properties

    // back to the server. After loading the custom properties, the example uses the

    // get method to read the custom property myProp, the set method to write the

    // custom property otherProp, and then finally calls the saveAsync method to save

    // the custom properties.

    Office.initialize = function () {
        // Checks for the DOM to load using the jQuery ready function.
        $(document).ready(function () {
            // After the DOM is loaded, add-in-specific code can run.
            var mailbox = Office.context.mailbox;
            mailbox.item.loadCustomPropertiesAsync(customPropsCallback);
        });
    };


    function customPropsCallback(asyncResult) {
        var customProps = asyncResult.value;
        var myProp = customProps.get("myProp");

        customProps.set("otherProp", "value");
        customProps.saveAsync(saveCallback);
    }


    function saveCallback(asyncResult) {

    }

    ```
  name: loadCustomPropertiesAsync(callback, userContext)
  fullName: loadCustomPropertiesAsync(callback, userContext)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'loadCustomPropertiesAsync(callback: (result: Office.AsyncResult<CustomProperties>) => void, userContext?: any): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: callback
      description: После завершения работы метода, функции, переданной в параметре обратного вызова вызывается с один параметр типа Office.AsyncResult.
      type:
      - '(result: Office.AsyncResult<CustomProperties>) => void'
    - id: userContext
      description: Необязательное свойство. Разработчики могут указать любой объект, к которому необходимо получить доступ, в функции обратного вызова. Этот объект можно получать свойство asyncResult.asyncContext в функции обратного вызова.
      type:
      - any
- uid: Outlook_1_7.Office.Item.removeHandlerAsync
  summary: >-
    Удаляет обработчиков для поддерживаемого типа события.


    В настоящее время поддерживаемые типы событий, `Office.EventType.AppointmentTimeChanged` <!-- -->, `Office.EventType.RecipientsChanged` <!-- -->, и `Office.EventType.RecurrenceChanged` <!-- -->.


    \[[Набор API-Интерфейсов: почтовый ящик 1.7](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    <table><tr><td>[Минимальный уровень разрешений](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadItem</td></tr>


    <tr><td>[Применимый режим Outlook](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Создание или чтение</td></tr></table>


    В дополнение к этой подпись метода также имеет следующую подпись:


    `removeHandlerAsync(eventType: Office.EventType, callback?: (result: Office.AsyncResult<void>) => void): void;`
  name: removeHandlerAsync(eventType, options, callback)
  fullName: removeHandlerAsync(eventType, options, callback)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'removeHandlerAsync(eventType: Office.EventType, options?: any, callback?: (result: Office.AsyncResult<void>) => void): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: eventType
      description: Событие, которое должно отменить обработчик.
      type:
      - Office.EventType
    - id: options
      description: 'Необязательное свойство. Объектный литерал, содержащий одно или несколько из указанных ниже свойств. asyncContext: разработчики могут предоставлять любого объекта, их необходимо получить доступ в метод обратного вызова.'
      type:
      - any
    - id: callback
      description: Необязательное свойство. После завершения работы метода, функции, переданной в параметре обратного вызова вызывается с одним параметра asyncResult, который является объектом Office.AsyncResult.
      type:
      - '(result: Office.AsyncResult<void>) => void'
- uid: Outlook_1_7.Office.Item.removeHandlerAsync_1
  summary: >-
    Удаляет обработчиков для поддерживаемого типа события.


    В настоящее время поддерживаемые типы событий, `Office.EventType.AppointmentTimeChanged` <!-- -->, `Office.EventType.RecipientsChanged` <!-- -->, и `Office.EventType.RecurrenceChanged` <!-- -->.


    \[[Набор API-Интерфейсов: почтовый ящик 1.7](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    <table><tr><td>[Минимальный уровень разрешений](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadItem</td></tr>


    <tr><td>[Применимый режим Outlook](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Создание или чтение</td></tr></table>
  name: removeHandlerAsync(eventType, callback)
  fullName: removeHandlerAsync(eventType, callback)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'removeHandlerAsync(eventType: Office.EventType, callback?: (result: Office.AsyncResult<void>) => void): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: eventType
      description: Событие, которое должно отменить обработчик.
      type:
      - Office.EventType
    - id: callback
      description: Необязательное свойство. После завершения работы метода, функции, переданной в параметре обратного вызова вызывается с одним параметра asyncResult, который является объектом Office.AsyncResult.
      type:
      - '(result: Office.AsyncResult<void>) => void'
- uid: Outlook_1_7.Office.Item.body
  summary: >-
    Получает объект, предоставляющий методы для работы с основным текстом элемента.


    \[[Набор API-Интерфейсов: почтовый ящик 1.1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    <table><tr><td>[Минимальный уровень разрешений](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadItem</td></tr>


    <tr><td>[Применимый режим Outlook](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Создание или чтение</td></tr></table>

    ####Примеры


    ```javascript

    // This example gets the body of the message in plain text.

    Office.context.mailbox.item.body.getAsync(
        "text",
        { asyncContext: "This is passed to the callback" },
        function callback(result) {
            // Do something with the result
        });

    // The following is an example of the result parameter passed to the callback function.

    {
        "value": "TEXT of whole body (including threads below)",
        "status": "succeeded",
        "asyncContext": "This is passed to the callback"
    }

    ```
  name: body
  fullName: body
  langs:
  - typeScript
  type: property
  syntax:
    content: 'body: Body;'
    return:
      type:
      - Body
- uid: Outlook_1_7.Office.Item.itemType
  summary: >-
    Получает тип элемента, который представляет экземпляр.


    Свойство itemType возвращает одно из значений перечисления ItemType, которое указывает, является ли экземпляр объекта item сообщением или собранием.


    \[[Набор API-Интерфейсов: почтовый ящик 1.0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    <table><tr><td>[Минимальный уровень разрешений](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadItem</td></tr>


    <tr><td>[Применимый режим Outlook](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Создание или чтение</td></tr></table>

    ####Примеры


    ```javascript

    if (Office.context.mailbox.item.itemType === Office.MailboxEnums.ItemType.Message) {
        // do something
    } else {
        // do something else
    }

    ```
  name: itemType
  fullName: itemType
  langs:
  - typeScript
  type: property
  syntax:
    content: 'itemType: MailboxEnums.ItemType;'
    return:
      type:
      - MailboxEnums.ItemType
- uid: Outlook_1_7.Office.Item.notificationMessages
  summary: >-
    Получает сообщения уведомления для элемента.


    \[[Набор API-Интерфейсов: почтовый ящик 1.3](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    <table><tr><td>[Минимальный уровень разрешений](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadItem</td></tr>


    <tr><td>[Применимый режим Outlook](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Создание или чтение</td></tr></table>

    ####Примеры


    ```javascript

    // Get all notifications

    Office.context.mailbox.item.notificationMessages.getAllAsync(
        function (asyncResult) {
            console.log(JSON.stringify(asyncResult));
        }
    );

    ```
  name: notificationMessages
  fullName: notificationMessages
  langs:
  - typeScript
  type: property
  syntax:
    content: 'notificationMessages: NotificationMessages;'
    return:
      type:
      - NotificationMessages
- uid: Outlook_1_7.Office.Item.seriesId
  summary: >-
    Получает идентификатор серии, к которой относится экземпляр.


    В OWA и Outlook seriesId возвращает идентификатор веб-служб Exchange (EWS) элемента родительского (ряды), к которому принадлежит этот элемент. Тем не менее iOS и Android seriesId возвращает REST идентификатор родительского элемента.


    **Примечание**: идентификатор, возвращенный свойством seriesId — это то же, что идентификатор элемента веб-служб Exchange. Свойство seriesId не идентичен идентификаторы Outlook, используемые API-Интерфейс REST Outlook. Прежде чем совершать вызовы REST API, используя это значение, его необходимо преобразовать с помощью Office.context.mailbox.convertToRestId. Для получения дополнительных сведений показано [Использование API REST Outlook из надстройки Outlook](https://docs.microsoft.com/outlook/add-ins/use-rest-api)<!-- -->.


    Свойство seriesId возвращает значение null для элементов, которые не имеют родительских элементов, таких как одного встреч, элементы ряда или собрания запрашивает и возвращает значение undefined, для других элементов, которые не являются приглашений на собрания.


    \[[Набор API-Интерфейсов: почтовый ящик 1.7](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    <table><tr><td>[Минимальный уровень разрешений](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadItem</td></tr>


    <tr><td>[Применимый режим Outlook](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Создание или чтение</td></tr></table>

    ####Примеры


    ```javascript

    var seriesId = Office.context.mailbox.item.seriesId;


    // The seriesId property returns null for items that do

    // not have parent items (such as single appointments,

    // series items, or meeting requests) and returns

    // undefined for messages that are not meeting requests.

    var isSeriesInstance = (seriesId != null);

    console.log("SeriesId is " + seriesId + " and isSeriesInstance is " + isSeriesInstance);

    ```
  name: seriesId
  fullName: seriesId
  langs:
  - typeScript
  type: property
  syntax:
    content: 'seriesId: string;'
    return:
      type:
      - string
