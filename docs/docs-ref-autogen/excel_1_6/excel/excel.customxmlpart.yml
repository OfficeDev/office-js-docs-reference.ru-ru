### YamlMime:UniversalReference
items:
  - uid: 'excel!Excel.CustomXmlPart:class'
    summary: |-
      <span data-ttu-id="76edb-101">Представляет настраиваемый объект XML-части в книге.</span><span class="sxs-lookup"><span data-stu-id="76edb-101">Represents a custom XML part object in a workbook.</span></span>

      <span data-ttu-id="76edb-102">\[[Набор API: ExcelApi 1,5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="76edb-102">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: Excel.CustomXmlPart
    fullName: Excel.CustomXmlPart
    langs:
      - typeScript
    type: class
    extends:
      - 'excel!OfficeExtension.ClientObject:class'
    package: excel!
    children:
      - 'excel!Excel.CustomXmlPart#context:member'
      - 'excel!Excel.CustomXmlPart#delete:member(1)'
      - 'excel!Excel.CustomXmlPart#getXml:member(1)'
      - 'excel!Excel.CustomXmlPart#id:member'
      - 'excel!Excel.CustomXmlPart#load:member(1)'
      - 'excel!Excel.CustomXmlPart#load:member(2)'
      - 'excel!Excel.CustomXmlPart#load:member(3)'
      - 'excel!Excel.CustomXmlPart#namespaceUri:member'
      - 'excel!Excel.CustomXmlPart#setXml:member(1)'
      - 'excel!Excel.CustomXmlPart#toJSON:member(1)'
  - uid: 'excel!Excel.CustomXmlPart#context:member'
    summary: '<span data-ttu-id="76edb-103">Контекст запроса, связанный с объектом.</span><span class="sxs-lookup"><span data-stu-id="76edb-103">The request context associated with the object.</span></span> <span data-ttu-id="76edb-104">Это подсоединяет процесс надстройки к процессу ведущего приложения Office.</span><span class="sxs-lookup"><span data-stu-id="76edb-104">This connects the add-in''s process to the Office host application''s process.</span></span>'
    name: context
    fullName: context
    langs:
      - typeScript
    type: property
    syntax:
      content: 'context: RequestContext;'
      return:
        type:
          - 'excel!Excel.RequestContext:class'
  - uid: 'excel!Excel.CustomXmlPart#delete:member(1)'
    summary: |-
      <span data-ttu-id="76edb-105">Удаляет пользовательскую XML-часть.</span><span class="sxs-lookup"><span data-stu-id="76edb-105">Deletes the custom XML part.</span></span>

      <span data-ttu-id="76edb-106">\[[Набор API: ExcelApi 1,5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="76edb-106">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: delete()
    fullName: delete()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'delete(): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a><span data-ttu-id="76edb-107">Примеры</span><span class="sxs-lookup"><span data-stu-id="76edb-107">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const settings = context.workbook.settings;
              const xmlPartIDSetting = settings.getItemOrNullObject("ContosoReviewXmlPartId").load("value");
              await context.sync();

              if (xmlPartIDSetting.value) {   
                  let customXmlPart = context.workbook.customXmlParts.getItem(xmlPartIDSetting.value);
                  const xmlBlob = customXmlPart.getXml();
                  customXmlPart.delete();
                  customXmlPart = context.workbook.customXmlParts.getItemOrNullObject(xmlPartIDSetting.value);

                  await context.sync();

                  if (customXmlPart.isNullObject) {
                      $("#display-xml").text(`The XML part with the id ${xmlPartIDSetting.value} has been deleted.`);

                      // Delete the unneeded setting too.
                      xmlPartIDSetting.delete();            
                  } else {
                      const readableXml = addLineBreaksToXML(xmlBlob.value);
                      const strangeMessage = `This is strange. The XML part with the id ${xmlPartIDSetting.value} has not been deleted:\n${readableXml}`
                      $("#display-xml").text(strangeMessage);
                  }

                  await context.sync();
              }
          });
          ```
  - uid: 'excel!Excel.CustomXmlPart#getXml:member(1)'
    summary: |-
      <span data-ttu-id="76edb-108">Получает полное содержимое пользовательской XML-части.</span><span class="sxs-lookup"><span data-stu-id="76edb-108">Gets the custom XML part's full XML content.</span></span>

      <span data-ttu-id="76edb-109">\[[Набор API: ExcelApi 1,5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="76edb-109">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getXml()
    fullName: getXml()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getXml(): OfficeExtension.ClientResult<string>;'
      return:
        type:
          - 'excel!Excel.CustomXmlPart#getXml~0:complex'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="76edb-110">Примеры</span><span class="sxs-lookup"><span data-stu-id="76edb-110">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              // You must have the xmlns attribute to populate the 
              // CustomXml.namespaceUri property.
              const originalXml = "<Reviewers xmlns='http://schemas.contoso.com/review/1.0'><Reviewer>Juan</Reviewer><Reviewer>Hong</Reviewer><Reviewer>Sally</Reviewer></Reviewers>";
              const customXmlPart = context.workbook.customXmlParts.add(originalXml);
              customXmlPart.load("id");
              const xmlBlob = customXmlPart.getXml();

              await context.sync();

              const readableXml = addLineBreaksToXML(xmlBlob.value);
              $("#display-xml").text(readableXml);

              // Store the XML part's ID in a setting.
              const settings = context.workbook.settings;
              settings.add("ContosoReviewXmlPartId", customXmlPart.id);

              await context.sync();
          });
          ```
  - uid: 'excel!Excel.CustomXmlPart#id:member'
    summary: |-
      <span data-ttu-id="76edb-111">ИДЕНТИФИКАТОР пользовательской XML-части.</span><span class="sxs-lookup"><span data-stu-id="76edb-111">The custom XML part's ID.</span></span> <span data-ttu-id="76edb-112">Только для чтения.</span><span class="sxs-lookup"><span data-stu-id="76edb-112">Read-only.</span></span>

      <span data-ttu-id="76edb-113">\[[Набор API: ExcelApi 1,5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="76edb-113">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: id
    fullName: id
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly id: string;'
      return:
        type:
          - string
        description: |-


          #### <a name="examples"></a><span data-ttu-id="76edb-114">Примеры</span><span class="sxs-lookup"><span data-stu-id="76edb-114">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              // You must have the xmlns attribute to populate the 
              // CustomXml.namespaceUri property.
              const originalXml = "<Reviewers xmlns='http://schemas.contoso.com/review/1.0'><Reviewer>Juan</Reviewer><Reviewer>Hong</Reviewer><Reviewer>Sally</Reviewer></Reviewers>";
              const customXmlPart = context.workbook.customXmlParts.add(originalXml);
              customXmlPart.load("id");
              const xmlBlob = customXmlPart.getXml();

              await context.sync();

              const readableXml = addLineBreaksToXML(xmlBlob.value);
              $("#display-xml").text(readableXml);

              // Store the XML part's ID in a setting.
              const settings = context.workbook.settings;
              settings.add("ContosoReviewXmlPartId", customXmlPart.id);

              await context.sync();
          });
          ```
  - uid: 'excel!Excel.CustomXmlPart#load:member(1)'
    summary: <span data-ttu-id="76edb-115">Добавляет в очередь команду для загрузки указанных свойств объекта.</span><span class="sxs-lookup"><span data-stu-id="76edb-115">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="76edb-116">Перед чтением свойств необходимо вызвать метод context.sync().</span><span class="sxs-lookup"><span data-stu-id="76edb-116">You must call "context.sync()" before reading the properties.</span></span>
    remarks: |-
      <span data-ttu-id="76edb-117">В дополнение к этой подписи этот метод имеет следующие подписи:</span><span class="sxs-lookup"><span data-stu-id="76edb-117">In addition to this signature, this method has the following signatures:</span></span>

      <span data-ttu-id="76edb-118">`load(option?: string | string[]): Excel.CustomXmlPart`-WHERE — это строка с разделителями-запятыми или массив строк, указывающий свойства для загрузки.</span><span class="sxs-lookup"><span data-stu-id="76edb-118">`load(option?: string | string[]): Excel.CustomXmlPart` - Where option is a comma-delimited string or an array of strings that specify the properties to load.</span></span>

      <span data-ttu-id="76edb-119">`load(option?: { select?: string; expand?: string; }): Excel.CustomXmlPart`-WHERE. Select — это строка с разделителями-запятыми, указывающая свойства для загрузки и параметры. Expand — это строка с разделителями-запятыми, указывающая свойства навигации для загрузки.</span><span class="sxs-lookup"><span data-stu-id="76edb-119">`load(option?: { select?: string; expand?: string; }): Excel.CustomXmlPart` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.</span></span>

      <span data-ttu-id="76edb-120">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.CustomXmlPart`— Доступно только для типов коллекций.</span><span class="sxs-lookup"><span data-stu-id="76edb-120">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.CustomXmlPart` - Only available on collection types.</span></span> <span data-ttu-id="76edb-121">Он аналогичен предыдущей подписи.</span><span class="sxs-lookup"><span data-stu-id="76edb-121">It is similar to the preceding signature.</span></span> <span data-ttu-id="76edb-122">Option. Top указывает максимальное количество элементов коллекции, которые можно включить в результат.</span><span class="sxs-lookup"><span data-stu-id="76edb-122">Option.top specifies the maximum number of collection items that can be included in the result.</span></span> <span data-ttu-id="76edb-123">Option. skip указывает количество элементов, которые будут пропущены и не включены в результат.</span><span class="sxs-lookup"><span data-stu-id="76edb-123">Option.skip specifies the number of items that are to be skipped and not included in the result.</span></span> <span data-ttu-id="76edb-124">Если указан параметр Option. Top, результирующий набор начнется после пропуска указанного числа элементов.</span><span class="sxs-lookup"><span data-stu-id="76edb-124">If option.top is specified, the result set will start after skipping the specified number of items.</span></span>
    name: load(option)
    fullName: load(option)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(option?: Excel.Interfaces.CustomXmlPartLoadOptions): Excel.CustomXmlPart;'
      return:
        type:
          - 'excel!Excel.CustomXmlPart:class'
        description: ''
      parameters:
        - id: option
          description: ''
          type:
            - 'excel!Excel.Interfaces.CustomXmlPartLoadOptions:interface'
  - uid: 'excel!Excel.CustomXmlPart#load:member(2)'
    summary: <span data-ttu-id="76edb-125">Добавляет в очередь команду для загрузки указанных свойств объекта.</span><span class="sxs-lookup"><span data-stu-id="76edb-125">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="76edb-126">Перед чтением свойств `context.sync()` необходимо вызвать метод.</span><span class="sxs-lookup"><span data-stu-id="76edb-126">You must call `context.sync()` before reading the properties.</span></span>
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): Excel.CustomXmlPart;'
      return:
        type:
          - 'excel!Excel.CustomXmlPart:class'
        description: ''
      parameters:
        - id: propertyNames
          description: '<span data-ttu-id="76edb-127">Строка, разделенная запятыми, или массив строк, указывающий свойства для загрузки.</span><span class="sxs-lookup"><span data-stu-id="76edb-127">A comma-delimited string or an array of strings that specify the properties to load.</span></span>'
          type:
            - 'string | string[]'
  - uid: 'excel!Excel.CustomXmlPart#load:member(3)'
    summary: <span data-ttu-id="76edb-128">Добавляет в очередь команду для загрузки указанных свойств объекта.</span><span class="sxs-lookup"><span data-stu-id="76edb-128">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="76edb-129">Перед чтением свойств `context.sync()` необходимо вызвать метод.</span><span class="sxs-lookup"><span data-stu-id="76edb-129">You must call `context.sync()` before reading the properties.</span></span>
    name: load(propertyNamesAndPaths)
    fullName: load(propertyNamesAndPaths)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNamesAndPaths?: { select?: string; expand?: string; }): Excel.CustomXmlPart;'
      return:
        type:
          - 'excel!Excel.CustomXmlPart:class'
        description: ''
      parameters:
        - id: propertyNamesAndPaths
          description: '<span data-ttu-id="76edb-130">Где Пропертинамесандпасс. Select — это строка с разделителями-запятыми, задающая свойства для загрузки, и Пропертинамесандпасс. Expand — это строка с разделителями-запятыми, указывающая свойства навигации для загрузки.</span><span class="sxs-lookup"><span data-stu-id="76edb-130">Where propertyNamesAndPaths.select is a comma-delimited string that specifies the properties to load, and propertyNamesAndPaths.expand is a comma-delimited string that specifies the navigation properties to load.</span></span>'
          type:
            - '{ select?: string; expand?: string; }'
  - uid: 'excel!Excel.CustomXmlPart#namespaceUri:member'
    summary: |-
      <span data-ttu-id="76edb-131">URI пространства имен настраиваемой части XML.</span><span class="sxs-lookup"><span data-stu-id="76edb-131">The custom XML part's namespace URI.</span></span> <span data-ttu-id="76edb-132">Только для чтения.</span><span class="sxs-lookup"><span data-stu-id="76edb-132">Read-only.</span></span>

      <span data-ttu-id="76edb-133">\[[Набор API: ExcelApi 1,5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="76edb-133">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: namespaceUri
    fullName: namespaceUri
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly namespaceUri: string;'
      return:
        type:
          - string
  - uid: 'excel!Excel.CustomXmlPart#setXml:member(1)'
    summary: |-
      <span data-ttu-id="76edb-134">Задает полное содержимое пользовательской XML-части.</span><span class="sxs-lookup"><span data-stu-id="76edb-134">Sets the custom XML part's full XML content.</span></span>

      <span data-ttu-id="76edb-135">\[[Набор API: ExcelApi 1,5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="76edb-135">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: setXml(xml)
    fullName: setXml(xml)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setXml(xml: string): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a><span data-ttu-id="76edb-136">Примеры</span><span class="sxs-lookup"><span data-stu-id="76edb-136">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const settings = context.workbook.settings;
              const xmlPartIDSetting = settings.getItemOrNullObject("ContosoReviewXmlPartId").load("value");
              await context.sync();

              if (xmlPartIDSetting.value) {   
                  const customXmlPart = context.workbook.customXmlParts.getItem(xmlPartIDSetting.value);

                  // The setXml method does a whole-for-whole replacement 
                  // of the entire XML.
                  customXmlPart.setXml("<Reviewers xmlns='http://schemas.contoso.com/review/1.0'><Reviewer>John</Reviewer><Reviewer>Hitomi</Reviewer></Reviewers>");
                  const xmlBlob = customXmlPart.getXml();
                  await context.sync();

                  const readableXml = addLineBreaksToXML(xmlBlob.value);
                  $("#display-xml").text(readableXml);
                  await context.sync();
              }
          });
          ```
      parameters:
        - id: xml
          description: <span data-ttu-id="76edb-137">XML-контент части.</span><span class="sxs-lookup"><span data-stu-id="76edb-137">XML content for the part.</span></span>
          type:
            - string
  - uid: 'excel!Excel.CustomXmlPart#toJSON:member(1)'
    summary: '<span data-ttu-id="76edb-138">Переопределяет метод `toJSON()` JavaScript для предоставления более удобного вывода при передаче объекта API`JSON.stringify()`</span><span class="sxs-lookup"><span data-stu-id="76edb-138">Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`</span></span><!-- --><span data-ttu-id="76edb-139">.</span><span class="sxs-lookup"><span data-stu-id="76edb-139"></span></span> <span data-ttu-id="76edb-140">(`JSON.stringify`</span><span class="sxs-lookup"><span data-stu-id="76edb-140"></span></span><!-- --><span data-ttu-id="76edb-141">, в свою очередь, вызывает `toJSON` метод объекта, который передается ему.) В то время как исходный объект Excel. CustomXmlPart — это объект API, `toJSON` метод возвращает простой объект JavaScript (тип`Excel.Interfaces.CustomXmlPartData`</span><span class="sxs-lookup"><span data-stu-id="76edb-141">, in turn, calls the `toJSON` method of the object that is passed to it.) Whereas the original Excel.CustomXmlPart object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.CustomXmlPartData`</span></span><!-- --><span data-ttu-id="76edb-142">), который содержит неполные копии загруженных дочерних свойств из исходного объекта.</span><span class="sxs-lookup"><span data-stu-id="76edb-142">) that contains shallow copies of any loaded child properties from the original object.</span></span>'
    name: toJSON()
    fullName: toJSON()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON(): Excel.Interfaces.CustomXmlPartData;'
      return:
        type:
          - 'excel!Excel.Interfaces.CustomXmlPartData:interface'
        description: ''
references:
  - uid: 'excel!OfficeExtension.ClientObject:class'
    name: OfficeExtension.ClientObject
  - uid: 'excel!Excel.RequestContext:class'
    name: RequestContext
  - uid: 'excel!Excel.CustomXmlPart#getXml~0:complex'
    name: OfficeExtension.ClientResult<string>
    fullName: OfficeExtension.ClientResult<string>
    spec.typeScript:
      - uid: 'excel!OfficeExtension.ClientResult:class'
        name: OfficeExtension.ClientResult
        fullName: OfficeExtension.ClientResult
      - name: <string>
        fullName: <string>
  - uid: 'excel!Excel.CustomXmlPart:class'
    name: Excel.CustomXmlPart
  - uid: 'excel!Excel.Interfaces.CustomXmlPartLoadOptions:interface'
    name: Excel.Interfaces.CustomXmlPartLoadOptions
  - uid: 'excel!Excel.Interfaces.CustomXmlPartData:interface'
    name: Excel.Interfaces.CustomXmlPartData