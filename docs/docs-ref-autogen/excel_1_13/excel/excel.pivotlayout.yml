### YamlMime:TSType
name: Excel.PivotLayout
uid: excel!Excel.PivotLayout:class
package: excel!
fullName: Excel.PivotLayout
summary: >-
  Представляет визуальный макет pivotTable.


  \[[Набор API: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
remarks: ''
isPreview: false
isDeprecated: false
type: class
properties:
- name: altTextDescription
  uid: excel!Excel.PivotLayout#altTextDescription:member
  package: excel!
  fullName: altTextDescription
  summary: >-
    The alt text description of the PivotTable.


    Текст Alt предоставляет альтернативные текстовые представления сведений, содержащихся в PivotTable. Эта информация полезна для людей с нарушениями зрения или когнитивными нарушениями, которые могут не видеть или понимать таблицу. Заголовок может быть прочитано человеку с ограниченными возможностями и используется для определения того, хотят ли они услышать описание контента.


    \[[Набор API: ExcelApi 1.13](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'altTextDescription: string;'
    return:
      type: string
      description: "\n\n#### <a name=\"examples\"></a>Примеры\n\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/38-pivottable/pivottable-pivotlayout.yaml\nawait Excel.run(async (context) => {\n  // Set the alt text for the displayed PivotTable.\n  const pivotTable = context.workbook.pivotTables.getItem(\"Farm Sales\");\n  const pivotLayout = pivotTable.layout;\n\n  pivotLayout.altTextTitle = \"Farm Sales PivotTable\";\n  pivotLayout.altTextDescription = \"A summary of fruit sales. It is pivoted on farm name, and fruit type. The aggregated data is both the sums of crates sold at the farms and the sums of crates sold wholesale.\";\n  console.log(\"Adding alt text. Check the PivotTable settings to see the changes.\");\n\n  await context.sync();\n});\n```"
- name: altTextTitle
  uid: excel!Excel.PivotLayout#altTextTitle:member
  package: excel!
  fullName: altTextTitle
  summary: >-
    The alt text title of the PivotTable.


    Текст Alt предоставляет альтернативные текстовые представления сведений, содержащихся в PivotTable. Эта информация полезна для людей с нарушениями зрения или когнитивными нарушениями, которые могут не видеть или понимать таблицу. Заголовок может быть прочитано человеку с ограниченными возможностями и используется для определения того, хотят ли они услышать описание контента.


    \[[Набор API: ExcelApi 1.13](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'altTextTitle: string;'
    return:
      type: string
- name: autoFormat
  uid: excel!Excel.PivotLayout#autoFormat:member
  package: excel!
  fullName: autoFormat
  summary: >-
    Указывает, будет ли форматирование автоматически отформатировано при обновлении или при перемещении полей.


    \[[Набор API: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'autoFormat: boolean;'
    return:
      type: boolean
- name: context
  uid: excel!Excel.PivotLayout#context:member
  package: excel!
  fullName: context
  summary: Контекст запроса, связанный с объектом. Это связывает процесс надстройки с процессом Office хост-приложения.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'context: RequestContext;'
    return:
      type: <xref uid="excel!Excel.RequestContext:class" />
- name: emptyCellText
  uid: excel!Excel.PivotLayout#emptyCellText:member
  package: excel!
  fullName: emptyCellText
  summary: >-
    Текст, автоматически заполняемый в любую пустую ячейку в PivotTable, если `fillEmptyCells == true`<!-- -->. Обратите внимание, что это значение сохраняется, `fillEmptyCells` если установлено значение `false`<!-- -->и это значение не устанавливает это свойство `true`<!-- -->. По умолчанию это пустая строка.


    \[[Набор API: ExcelApi 1.13](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'emptyCellText: string;'
    return:
      type: string
      description: "\n\n#### <a name=\"examples\"></a>Примеры\n\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/38-pivottable/pivottable-pivotlayout.yaml\nawait Excel.run(async (context) => {\n  // Set a default value for an empty cell in the PivotTable. This doesn't include cells left blank by the layout.\n  const pivotTable = context.workbook.pivotTables.getItem(\"Farm Sales\");\n  const pivotLayout = pivotTable.layout;\n\n  pivotLayout.emptyCellText = \"--\";\n\n  // Set the text alignment to match the rest of the PivotTable.\n  pivotLayout.getDataBodyRange().format.horizontalAlignment = Excel.HorizontalAlignment.right;\n  await context.sync();\n});\n```"
- name: enableFieldList
  uid: excel!Excel.PivotLayout#enableFieldList:member
  package: excel!
  fullName: enableFieldList
  summary: >-
    Указывает, можно ли показывать список полей в пользовательском интерфейсе.


    \[[Набор API: ExcelApi 1.10](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'enableFieldList: boolean;'
    return:
      type: boolean
- name: fillEmptyCells
  uid: excel!Excel.PivotLayout#fillEmptyCells:member
  package: excel!
  fullName: fillEmptyCells
  summary: >-
    Указывает, должны ли пустые ячейки в PivotTable заполняться `emptyCellText`<!-- -->. Значение по умолчанию: `false`<!-- -->. Обратите внимание, что значение `emptyCellText` сохраняется при заданной `false`<!-- -->.


    \[[Набор API: ExcelApi 1.13](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'fillEmptyCells: boolean;'
    return:
      type: boolean
      description: "\n\n#### <a name=\"examples\"></a>Примеры\n\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/38-pivottable/pivottable-pivotlayout.yaml\nawait Excel.run(async (context) => {\n  // Toggle whether empty cells are filled with a default value.\n  const pivotTable = context.workbook.pivotTables.getItem(\"Farm Sales\");\n  const pivotLayout = pivotTable.layout;\n\n  pivotLayout.load(\"fillEmptyCells\");\n  await context.sync();\n\n  let fillToSet = !pivotLayout.fillEmptyCells;\n  console.log(`Filling empty cells? - ${fillToSet}`);\n\n  pivotLayout.fillEmptyCells = fillToSet;\n  await context.sync();\n});\n```"
- name: layoutType
  uid: excel!Excel.PivotLayout#layoutType:member
  package: excel!
  fullName: layoutType
  summary: >-
    Это свойство указывает PivotLayoutType всех полей в сводной таблице. Если поля имеют различные состояния, оно будет иметь значение NULL.


    \[[Набор API: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'layoutType: Excel.PivotLayoutType | "Compact" | "Tabular" | "Outline";'
    return:
      type: <xref uid="excel!Excel.PivotLayoutType:enum" /> | "Compact" | "Tabular" | "Outline"
      description: "\n\n#### <a name=\"examples\"></a>Примеры\n\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/38-pivottable/pivottable-pivotlayout.yaml\nawait Excel.run(async (context) => {\n  // Change the PivotLayout.type to a new type.\n  const pivotTable = context.workbook.worksheets.getActiveWorksheet().pivotTables.getItem(\"Farm Sales\");\n  pivotTable.layout.load(\"layoutType\");\n  await context.sync();\n\n  // Cycle between the three layout types.\n  if (pivotTable.layout.layoutType === \"Compact\") {\n    pivotTable.layout.layoutType = \"Outline\";\n  } else if (pivotTable.layout.layoutType === \"Outline\") {\n    pivotTable.layout.layoutType = \"Tabular\";\n  } else {\n    pivotTable.layout.layoutType = \"Compact\";\n  }\n\n  await context.sync();\n  console.log(\"Pivot layout is now \" + pivotTable.layout.layoutType);\n});\n```"
- name: preserveFormatting
  uid: excel!Excel.PivotLayout#preserveFormatting:member
  package: excel!
  fullName: preserveFormatting
  summary: >-
    Указывает, сохраняется ли форматирование при обновлении или пересчете отчета с помощью операций, таких как развязка, сортировка или изменение элементов поля страниц.


    \[[Набор API: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'preserveFormatting: boolean;'
    return:
      type: boolean
      description: "\n\n#### <a name=\"examples\"></a>Примеры\n\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/38-pivottable/pivottable-pivotlayout.yaml\nawait Excel.run(async (context) => {\n  // Set whether the PivotTable keeps the established format after it is refreshed and recalculated.\n  const pivotTable = context.workbook.pivotTables.getItem(\"Farm Sales\");\n  const pivotLayout = pivotTable.layout;\n\n  pivotLayout.load(\"preserveFormatting\");\n  await context.sync();\n\n  let preserveFormattingToSet = !pivotLayout.preserveFormatting;\n  console.log(`Preserve the formatting PivotTable after a refresh? - ${preserveFormattingToSet}`);\n\n  pivotLayout.preserveFormatting = preserveFormattingToSet;\n  await context.sync();\n});\n```"
- name: showColumnGrandTotals
  uid: excel!Excel.PivotLayout#showColumnGrandTotals:member
  package: excel!
  fullName: showColumnGrandTotals
  summary: >-
    Указывает, показывает ли отчет PivotTable общие итоги для столбцов.


    \[[Набор API: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'showColumnGrandTotals: boolean;'
    return:
      type: boolean
      description: "\n\n#### <a name=\"examples\"></a>Примеры\n\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/38-pivottable/pivottable-pivotlayout.yaml\nawait Excel.run(async (context) => {\n  // Turn the grand totals on and off for the rows and columns.\n  const pivotTable = context.workbook.pivotTables.getItem(\"Farm Sales\");\n  const pivotLayout = pivotTable.layout;\n\n  pivotLayout.load([\"showRowGrandTotals\", \"showColumnGrandTotals\"]);\n  await context.sync();\n\n  let showColumnTotals = !pivotLayout.showColumnGrandTotals;\n  let showRowTotals = !pivotLayout.showRowGrandTotals;\n  console.log(`Show column grand totals? - ${showColumnTotals}`);\n  console.log(`Show row grand totals? - ${showRowTotals}`);\n\n  pivotLayout.showColumnGrandTotals = showColumnTotals;\n  pivotLayout.showRowGrandTotals = showRowTotals;\n\n  await context.sync();\n});\n```"
- name: showFieldHeaders
  uid: excel!Excel.PivotLayout#showFieldHeaders:member
  package: excel!
  fullName: showFieldHeaders
  summary: >-
    Указывает, отображаются ли в pivotTable полевые заголовок (подписи полей и отфильтровываемые выпадения).


    \[[Набор API: ExcelApi 1.13](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'showFieldHeaders: boolean;'
    return:
      type: boolean
      description: "\n\n#### <a name=\"examples\"></a>Примеры\n\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/38-pivottable/pivottable-pivotlayout.yaml\nawait Excel.run(async (context) => {\n  // Turn the field headers on and off for the row and column hierarchies.\n  const pivotTable = context.workbook.pivotTables.getItem(\"Farm Sales\");\n  const pivotLayout = pivotTable.layout;\n  pivotLayout.load(\"showFieldHeaders\");\n  await context.sync();\n\n  let showHeaders = !pivotLayout.showFieldHeaders;\n  console.log(`Show field headers? - ${showHeaders}`);\n  pivotLayout.showFieldHeaders = showHeaders;\n  await context.sync();\n});\n```"
- name: showRowGrandTotals
  uid: excel!Excel.PivotLayout#showRowGrandTotals:member
  package: excel!
  fullName: showRowGrandTotals
  summary: >-
    Указывает, показывает ли отчет PivotTable общие итоги для строк.


    \[[Набор API: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'showRowGrandTotals: boolean;'
    return:
      type: boolean
      description: "\n\n#### <a name=\"examples\"></a>Примеры\n\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/38-pivottable/pivottable-pivotlayout.yaml\nawait Excel.run(async (context) => {\n  // Turn the grand totals on and off for the rows and columns.\n  const pivotTable = context.workbook.pivotTables.getItem(\"Farm Sales\");\n  const pivotLayout = pivotTable.layout;\n\n  pivotLayout.load([\"showRowGrandTotals\", \"showColumnGrandTotals\"]);\n  await context.sync();\n\n  let showColumnTotals = !pivotLayout.showColumnGrandTotals;\n  let showRowTotals = !pivotLayout.showRowGrandTotals;\n  console.log(`Show column grand totals? - ${showColumnTotals}`);\n  console.log(`Show row grand totals? - ${showRowTotals}`);\n\n  pivotLayout.showColumnGrandTotals = showColumnTotals;\n  pivotLayout.showRowGrandTotals = showRowTotals;\n\n  await context.sync();\n});\n```"
- name: subtotalLocation
  uid: excel!Excel.PivotLayout#subtotalLocation:member
  package: excel!
  fullName: subtotalLocation
  summary: >-
    Это свойство указывает все `SubtotalLocationType` поля на PivotTable. Если поля имеют разные состояния, это будет `null`<!-- -->.


    \[[Набор API: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'subtotalLocation: Excel.SubtotalLocationType | "AtTop" | "AtBottom" | "Off";'
    return:
      type: <xref uid="excel!Excel.SubtotalLocationType:enum" /> | "AtTop" | "AtBottom" | "Off"
methods:
- name: displayBlankLineAfterEachItem(display)
  uid: excel!Excel.PivotLayout#displayBlankLineAfterEachItem:member(1)
  package: excel!
  fullName: displayBlankLineAfterEachItem(display)
  summary: >-
    Задает, следует ли отображать пустую строку после каждого элемента. Это устанавливается на глобальном уровне для PivotTable и применяется к отдельным PivotFields. Эта функция переописывает параметр для всех полей в PivotTable на значение `display` параметра.


    \[[Набор API: ExcelApi 1.13](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'displayBlankLineAfterEachItem(display: boolean): void;'
    parameters:
    - id: display
      description: True включает параметр отображения пустой строки. False turns it off.
      type: boolean
    return:
      type: void
      description: "\n\n#### <a name=\"examples\"></a>Примеры\n\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/38-pivottable/pivottable-pivotlayout.yaml\nawait Excel.run(async (context) => {\n  // Add a blank row after each PivotItem in the row hierarchy.\n  const pivotTable = context.workbook.pivotTables.getItem(\"Farm Sales\");\n  const pivotLayout = pivotTable.layout;\n\n  pivotLayout.displayBlankLineAfterEachItem(true);\n  console.log(\"Setting `PivotLayout.displayBlankLineAfterEachItem` to true.\");\n\n  await context.sync();\n});\n```"
- name: getColumnLabelRange()
  uid: excel!Excel.PivotLayout#getColumnLabelRange:member(1)
  package: excel!
  fullName: getColumnLabelRange()
  summary: >-
    Возвращает диапазон, где находятся названия столбцов сводной таблицы.


    \[[Набор API: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getColumnLabelRange(): Excel.Range;'
    return:
      type: <xref uid="excel!Excel.Range:class" />
      description: ''
- name: getDataBodyRange()
  uid: excel!Excel.PivotLayout#getDataBodyRange:member(1)
  package: excel!
  fullName: getDataBodyRange()
  summary: >-
    Возвращает диапазон, где находятся значения данных сводной таблицы.


    \[[Набор API: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getDataBodyRange(): Excel.Range;'
    return:
      type: <xref uid="excel!Excel.Range:class" />
      description: "\n\n#### <a name=\"examples\"></a>Примеры\n\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/38-pivottable/pivottable-filters-and-summaries.yaml\nawait Excel.run(async (context) => {\n    const pivotTable = context.workbook.worksheets.getActiveWorksheet().pivotTables.getItem(\"Farm Sales\");\n\n    // the layout controls the ranges used by the PivotTable\n    const range = pivotTable.layout.getDataBodyRange();\n\n    // get all the data hierarchy totals\n    const grandTotalRange = range.getLastRow();\n    grandTotalRange.load(\"address\");\n    await context.sync();\n    \n    // use the wholesale and farm sale totals to make a final sum\n    const masterTotalRange = context.workbook.worksheets.getActiveWorksheet().getRange(\"B27:C27\");\n    masterTotalRange.formulas = [[\"All Crates\", \"=SUM(\" + grandTotalRange.address + \")\"]];\n    await context.sync();\n});\n```\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/38-pivottable/pivottable-filters-and-summaries.yaml\nawait Excel.run(async (context) => {\n    const pivotTable = context.workbook.worksheets.getActiveWorksheet().pivotTables.getItem(\"Farm Sales\");\n\n    // the layout controls the ranges used by the PivotTable\n    const range = pivotTable.layout.getDataBodyRange();\n\n    // get all the data hierarchy totals\n    const grandTotalRange = range.getLastRow();\n    grandTotalRange.load(\"address\");\n    await context.sync();\n    \n    // use the wholesale and farm sale totals to make a final sum\n    const masterTotalRange = context.workbook.worksheets.getActiveWorksheet().getRange(\"B27:C27\");\n    masterTotalRange.formulas = [[\"All Crates\", \"=SUM(\" + grandTotalRange.address + \")\"]];\n    await context.sync();\n});\n```"
- name: getDataHierarchy(cell)
  uid: excel!Excel.PivotLayout#getDataHierarchy:member(1)
  package: excel!
  fullName: getDataHierarchy(cell)
  summary: >-
    Получает объект DataHierarchy, использующийся для вычисления значения в указанном диапазоне сводной таблицы.


    \[[Набор API: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getDataHierarchy(cell: Range | string): Excel.DataPivotHierarchy;'
    parameters:
    - id: cell
      description: Одна ячейка в теле данных PivotTable.
      type: <xref uid="excel!Excel.Range:class" /> | string
    return:
      type: <xref uid="excel!Excel.DataPivotHierarchy:class" />
      description: Объект DataPivotHierarchy, используемый для вычисления значения в указанной ячейке.
- name: getFilterAxisRange()
  uid: excel!Excel.PivotLayout#getFilterAxisRange:member(1)
  package: excel!
  fullName: getFilterAxisRange()
  summary: >-
    Возвращает диапазон области фильтра сводной таблицы.


    \[[Набор API: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getFilterAxisRange(): Excel.Range;'
    return:
      type: <xref uid="excel!Excel.Range:class" />
      description: ''
- name: getPivotItems(axis, cell)
  uid: excel!Excel.PivotLayout#getPivotItems:member(1)
  package: excel!
  fullName: getPivotItems(axis, cell)
  summary: >-
    Получает объекты PivotItem с оси, образующие значение в указанном диапазоне сводной таблицы.


    \[[Набор API: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getPivotItems(axis: Excel.PivotAxis, cell: Range | string): Excel.PivotItemCollection;'
    parameters:
    - id: axis
      description: Ось, с которой можно получить PivotItems. Должно быть "строка" или "столбец".
      type: <xref uid="excel!Excel.PivotAxis:enum" />
    - id: cell
      description: Одна ячейка в теле данных PivotTable.
      type: <xref uid="excel!Excel.Range:class" /> | string
    return:
      type: <xref uid="excel!Excel.PivotItemCollection:class" />
      description: PivotItemCollection pivotItems, которые используются для вычисления значений в указанной строке.
- name: getPivotItems(axisString, cell)
  uid: excel!Excel.PivotLayout#getPivotItems:member(2)
  package: excel!
  fullName: getPivotItems(axisString, cell)
  summary: >-
    Получает объекты PivotItem с оси, образующие значение в указанном диапазоне сводной таблицы.


    \[[Набор API: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getPivotItems(axisString: "Unknown" | "Row" | "Column" | "Data" | "Filter", cell: Range | string): Excel.PivotItemCollection;'
    parameters:
    - id: axisString
      description: Ось, с которой можно получить PivotItems. Должно быть "строка" или "столбец".
      type: "\"Unknown\" | \"Row\" | \"Column\" | \"Data\" | \"Filter\""
    - id: cell
      description: Одна ячейка в теле данных PivotTable.
      type: <xref uid="excel!Excel.Range:class" /> | string
    return:
      type: <xref uid="excel!Excel.PivotItemCollection:class" />
      description: PivotItemCollection pivotItems, которые используются для вычисления значений в указанной строке.
- name: getRange()
  uid: excel!Excel.PivotLayout#getRange:member(1)
  package: excel!
  fullName: getRange()
  summary: >-
    Возвращает диапазон, в котором существует сводная таблица, за исключением области фильтра.


    \[[Набор API: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getRange(): Excel.Range;'
    return:
      type: <xref uid="excel!Excel.Range:class" />
      description: ''
- name: getRowLabelRange()
  uid: excel!Excel.PivotLayout#getRowLabelRange:member(1)
  package: excel!
  fullName: getRowLabelRange()
  summary: >-
    Возвращает диапазон, где находятся названия строк сводной таблицы.


    \[[Набор API: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getRowLabelRange(): Excel.Range;'
    return:
      type: <xref uid="excel!Excel.Range:class" />
      description: ''
- name: load(options)
  uid: excel!Excel.PivotLayout#load:member(1)
  package: excel!
  fullName: load(options)
  summary: Добавляет в очередь команду для загрузки указанных свойств объекта. Перед чтением свойств требуется вызвать метод `context.sync()`.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'load(options?: Excel.Interfaces.PivotLayoutLoadOptions): Excel.PivotLayout;'
    parameters:
    - id: options
      description: Предоставляет параметры, для которых необходимо загрузить свойства объекта.
      type: <xref uid="excel!Excel.Interfaces.PivotLayoutLoadOptions:interface" />
    return:
      type: <xref uid="excel!Excel.PivotLayout:class" />
      description: ''
- name: load(propertyNames)
  uid: excel!Excel.PivotLayout#load:member(2)
  package: excel!
  fullName: load(propertyNames)
  summary: Добавляет в очередь команду для загрузки указанных свойств объекта. Перед чтением свойств требуется вызвать метод `context.sync()`.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'load(propertyNames?: string | string[]): Excel.PivotLayout;'
    parameters:
    - id: propertyNames
      description: Запятая или массив строк, которые указывают свойства для загрузки.
      type: string | string[]
    return:
      type: <xref uid="excel!Excel.PivotLayout:class" />
      description: ''
- name: load(propertyNamesAndPaths)
  uid: excel!Excel.PivotLayout#load:member(3)
  package: excel!
  fullName: load(propertyNamesAndPaths)
  summary: Добавляет в очередь команду для загрузки указанных свойств объекта. Перед чтением свойств требуется вызвать метод `context.sync()`.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: >-
      load(propertyNamesAndPaths?: {
                  select?: string;
                  expand?: string;
              }): Excel.PivotLayout;
    parameters:
    - id: propertyNamesAndPaths
      description: '`propertyNamesAndPaths.select` является запятой, которая указывает свойства для загрузки, и является строкой, запятой, которая указывает свойства навигации для `propertyNamesAndPaths.expand` загрузки.'
      type: >-
        {
                    select?: string;
                    expand?: string;
                }
    return:
      type: <xref uid="excel!Excel.PivotLayout:class" />
      description: ''
- name: repeatAllItemLabels(repeatLabels)
  uid: excel!Excel.PivotLayout#repeatAllItemLabels:member(1)
  package: excel!
  fullName: repeatAllItemLabels(repeatLabels)
  summary: >-
    Задает параметр "Повторите все метки элементов" во всех полях в PivotTable.


    \[[Набор API: ExcelApi 1.13](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'repeatAllItemLabels(repeatLabels: boolean): void;'
    parameters:
    - id: repeatLabels
      description: True включает параметр отображения повтора меток. False turns it off.
      type: boolean
    return:
      type: void
      description: "\n\n#### <a name=\"examples\"></a>Примеры\n\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/38-pivottable/pivottable-pivotlayout.yaml\nawait Excel.run(async (context) => {\n  // Repeat the PivotItem labels for each row used by another level of the row hierarchy.\n  const pivotTable = context.workbook.pivotTables.getItem(\"Farm Sales\");\n  const pivotLayout = pivotTable.layout;\n\n  pivotLayout.repeatAllItemLabels(true);\n  console.log(\"Setting `PivotLayout.repeatAllItemLabels` to true.\");\n\n  await context.sync();\n});\n```"
- name: set(properties, options)
  uid: excel!Excel.PivotLayout#set:member(1)
  package: excel!
  fullName: set(properties, options)
  summary: Задает несколько свойств объекта одновременно. Можно передать либо обычный объект с соответствующими свойствами, либо другой объект API того же типа.
  remarks: >-
    Этот метод имеет следующую дополнительную подпись:


    `set(properties: Excel.PivotLayout): void`
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'set(properties: Interfaces.PivotLayoutUpdateData, options?: OfficeExtension.UpdateOptions): void;'
    parameters:
    - id: properties
      description: Объект JavaScript со свойствами, структурированными изоморфно, с свойствами объекта, на который вызван метод.
      type: <xref uid="excel!Excel.Interfaces.PivotLayoutUpdateData:interface" />
    - id: options
      description: Предоставляет возможность подавления ошибок, если объект свойств пытается установить любые свойства только для чтения.
      type: <xref uid="office!OfficeExtension.UpdateOptions:interface" />
    return:
      type: void
      description: ''
- name: set(properties)
  uid: excel!Excel.PivotLayout#set:member(2)
  package: excel!
  fullName: set(properties)
  summary: Задает несколько свойств на объекте одновременно на основе существующего загруженного объекта.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'set(properties: Excel.PivotLayout): void;'
    parameters:
    - id: properties
      description: ''
      type: <xref uid="excel!Excel.PivotLayout:class" />
    return:
      type: void
      description: ''
- name: setAutoSortOnCell(cell, sortBy)
  uid: excel!Excel.PivotLayout#setAutoSortOnCell:member(1)
  package: excel!
  fullName: setAutoSortOnCell(cell, sortBy)
  summary: >-
    Задает для сводной таблицы автоматическую сортировку, используя указанную ячейку, чтобы автоматически выбрать все необходимые условия и контекст. Это работает аналогично применению автоматической сортировки из пользовательского интерфейса.


    \[[Набор API: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'setAutoSortOnCell(cell: Range | string, sortBy: Excel.SortBy): void;'
    parameters:
    - id: cell
      description: Одна ячейка, используемая для получения критериев для применения автосорта.
      type: <xref uid="excel!Excel.Range:class" /> | string
    - id: sortBy
      description: Направление сортировки.
      type: <xref uid="excel!Excel.SortBy:enum" />
    return:
      type: void
      description: ''
- name: setAutoSortOnCell(cell, sortByString)
  uid: excel!Excel.PivotLayout#setAutoSortOnCell:member(2)
  package: excel!
  fullName: setAutoSortOnCell(cell, sortByString)
  summary: >-
    Задает для сводной таблицы автоматическую сортировку, используя указанную ячейку, чтобы автоматически выбрать все необходимые условия и контекст. Это работает аналогично применению автоматической сортировки из пользовательского интерфейса.


    \[[Набор API: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'setAutoSortOnCell(cell: Range | string, sortByString: "Ascending" | "Descending"): void;'
    parameters:
    - id: cell
      description: Одна ячейка, используемая для получения критериев для применения автосорта.
      type: <xref uid="excel!Excel.Range:class" /> | string
    - id: sortByString
      description: Направление сортировки.
      type: "\"Ascending\" | \"Descending\""
    return:
      type: void
      description: ''
- name: toJSON()
  uid: excel!Excel.PivotLayout#toJSON:member(1)
  package: excel!
  fullName: toJSON()
  summary: Переопределяет метод JavaScript, чтобы обеспечить более полезный выход, когда объект `toJSON()` API передается `JSON.stringify()`<!-- -->. (`JSON.stringify`<!-- -->, в свою очередь, вызывает метод объекта, который `toJSON` передается ему.) В то время как исходный Excel. Объект PivotLayout — это объект API, метод возвращает простой `toJSON` объект JavaScript (введите как`Excel.Interfaces.PivotLayoutData`<!-- -->), содержащий неглубокие копии любых загруженных свойств ребенка из исходного объекта.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'toJSON(): Excel.Interfaces.PivotLayoutData;'
    return:
      type: <xref uid="excel!Excel.Interfaces.PivotLayoutData:interface" />
      description: ''
extends: <xref uid="office!OfficeExtension.ClientObject:class" />
metadata:
  ms.openlocfilehash: ddbf2bba338d2c6de42e70a63d19af4f8e84cd38
  ms.sourcegitcommit: 418408d346cc899183d6d6a74161ba2ad58bd39d
  ms.translationtype: MT
  ms.contentlocale: ru-RU
  ms.lasthandoff: 07/02/2021
  ms.locfileid: "53278113"
