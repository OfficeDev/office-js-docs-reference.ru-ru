### YamlMime:TSPackage
uid: powerpoint!
name: powerpoint
type: package
summary: ''
classes:
- powerpoint!PowerPoint.Application:class
- powerpoint!PowerPoint.Presentation:class
- powerpoint!PowerPoint.RequestContext:class
- powerpoint!PowerPoint.Slide:class
- powerpoint!PowerPoint.SlideCollection:class
enums:
- powerpoint!PowerPoint.ErrorCodes:enum
- powerpoint!PowerPoint.InsertSlideFormatting:enum
interfaces:
- powerpoint!PowerPoint.InsertSlideOptions:interface
- powerpoint!PowerPoint.Interfaces.CollectionLoadOptions:interface
- powerpoint!PowerPoint.Interfaces.PresentationData:interface
- powerpoint!PowerPoint.Interfaces.PresentationLoadOptions:interface
- powerpoint!PowerPoint.Interfaces.SlideCollectionData:interface
- powerpoint!PowerPoint.Interfaces.SlideCollectionLoadOptions:interface
- powerpoint!PowerPoint.Interfaces.SlideCollectionUpdateData:interface
- powerpoint!PowerPoint.Interfaces.SlideData:interface
- powerpoint!PowerPoint.Interfaces.SlideLoadOptions:interface
functions:
- name: PowerPoint.createPresentation(base64File)
  uid: powerpoint!PowerPoint.createPresentation:function(1)
  package: powerpoint!
  summary: >-
    Создает и открывает новую презентацию. По желанию презентацию можно предварительно заполнить с помощью файла pptx с кодом base64.


    \[[Набор API: PowerPointApi 1.1](/office/dev/add-ins/reference/javascript-api-for-office)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'export function createPresentation(base64File?: string): Promise<void>;'
    parameters:
    - id: base64File
      description: Необязательное свойство. Файл pptx с кодом base64. По умолчанию используется значение NULL.
      type: string
    return:
      type: Promise&lt;void&gt;
      description: "\n\n#### <a name=\"examples\"></a>Примеры\n\n```javascript\nvar myFile = document.getElementById(\"file\");\nvar reader = new FileReader();\n\nreader.onload = function (event) {\n    // strip off the metadata before the base64-encoded string\n    var startIndex = event.target.result.indexOf(\"base64,\");\n    var copyBase64 = event.target.result.substr(startIndex + 7);\n\n    PowerPoint.createPresentation(copyBase64);        \n};\n\n// read in the file as a data URL so we can parse the base64-encoded string\nreader.readAsDataURL(myFile.files[0]);\n```"
- name: PowerPoint.run(batch)
  uid: powerpoint!PowerPoint.run:function(1)
  package: powerpoint!
  summary: Выполняет пакетный скрипт, который выполняет действия в объектной модели PowerPoint с помощью нового RequestContext. Когда обещание будет разрешено, все отслеживаемые объекты, которые были автоматически выделены во время выполнения, будут освобождены.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'export function run<T>(batch: (context: PowerPoint.RequestContext) => OfficeExtension.IPromise<T>): OfficeExtension.IPromise<T>;'
    parameters:
    - id: batch
      description: Функция, которая принимает в RequestContext и возвращает обещание (как правило, только в результате "context.sync()"). Параметр контекста облегчает запросы в приложение PowerPoint. Так как надстройка Office и приложение PowerPoint работают в двух разных процессах, requestContext должен получить доступ к объектной модели PowerPoint из надстройки.
      type: '(context: <xref uid="powerpoint!PowerPoint.RequestContext:class" />) =&gt; <xref uid="office!OfficeExtension.IPromise:type" />&lt;T&gt;'
    return:
      type: <xref uid="office!OfficeExtension.IPromise:type" />&lt;T&gt;
      description: ''
- name: PowerPoint.run(object, batch)
  uid: powerpoint!PowerPoint.run:function(2)
  package: powerpoint!
  summary: Выполняет пакетный скрипт, который выполняет действия в объектной модели PowerPoint с помощью объекта RequestContext ранее созданного объекта API. Когда обещание будет разрешено, все отслеживаемые объекты, которые были автоматически выделены во время выполнения, будут освобождены.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'export function run<T>(object: OfficeExtension.ClientObject, batch: (context: PowerPoint.RequestContext) => OfficeExtension.IPromise<T>): OfficeExtension.IPromise<T>;'
    parameters:
    - id: object
      description: Ранее созданный объект API. Пакет будет использовать тот же Объект RequestContext, что и переданный объект, что означает, что любые изменения, примененные к объекту, будут подбираться с помощью "context.sync()".
      type: <xref uid="office!OfficeExtension.ClientObject:class" />
    - id: batch
      description: Функция, которая принимает в RequestContext и возвращает обещание (как правило, только в результате "context.sync()"). Параметр контекста облегчает запросы в приложение PowerPoint. Так как надстройка Office и приложение PowerPoint работают в двух разных процессах, requestContext должен получить доступ к объектной модели PowerPoint из надстройки.
      type: '(context: <xref uid="powerpoint!PowerPoint.RequestContext:class" />) =&gt; <xref uid="office!OfficeExtension.IPromise:type" />&lt;T&gt;'
    return:
      type: <xref uid="office!OfficeExtension.IPromise:type" />&lt;T&gt;
      description: ''
- name: PowerPoint.run(objects, batch)
  uid: powerpoint!PowerPoint.run:function(3)
  package: powerpoint!
  summary: Выполняет пакетный скрипт, который выполняет действия в объектной модели PowerPoint с помощью объекта RequestContext ранее созданных объектов API.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'export function run<T>(objects: OfficeExtension.ClientObject[], batch: (context: PowerPoint.RequestContext) => OfficeExtension.IPromise<T>): OfficeExtension.IPromise<T>;'
    parameters:
    - id: objects
      description: Массив ранее созданных объектов API. Массив будет проверен, чтобы убедиться, что все объекты имеют одинаковый контекст. Пакет будет использовать этот общий requestContext, что означает, что любые изменения, примененные к этим объектам, будут подбираться с помощью "context.sync()".
      type: <xref uid="office!OfficeExtension.ClientObject:class" />[]
    - id: batch
      description: Функция, которая принимает в RequestContext и возвращает обещание (как правило, только в результате "context.sync()"). Параметр контекста облегчает запросы в приложение PowerPoint. Так как надстройка Office и приложение PowerPoint работают в двух разных процессах, requestContext должен получить доступ к объектной модели PowerPoint из надстройки.
      type: '(context: <xref uid="powerpoint!PowerPoint.RequestContext:class" />) =&gt; <xref uid="office!OfficeExtension.IPromise:type" />&lt;T&gt;'
    return:
      type: <xref uid="office!OfficeExtension.IPromise:type" />&lt;T&gt;
      description: ''
metadata:
  ms.openlocfilehash: f1f21e5b33392f1f87aa0eb1f4fcfa5c155fe0e2
  ms.sourcegitcommit: a8a86cfcaff5ad7dacc653d63502c76b1fedbebe
  ms.translationtype: MT
  ms.contentlocale: ru-RU
  ms.lasthandoff: 03/26/2021
  ms.locfileid: "51306777"
