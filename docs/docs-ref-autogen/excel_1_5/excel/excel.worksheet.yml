### YamlMime:UniversalReference
items:
  - uid: excel.Excel.Worksheet
    summary: "<span data-ttu-id=\"a866e-101\">Лист Excel представляет собой сетку ячеек.</span><span class=\"sxs-lookup\"><span data-stu-id=\"a866e-101\">An Excel worksheet is a grid of cells.</span></span> <span data-ttu-id=\"a866e-102\">Он может содержать данные, таблицы, диаграммы и т.\_д.</span><span class=\"sxs-lookup\"><span data-stu-id=\"a866e-102\">It can contain data, tables, charts, etc.</span></span>\n\n<span data-ttu-id=\"a866e-103\">\\[[Набор API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\\]</span><span class=\"sxs-lookup\"><span data-stu-id=\"a866e-103\">\\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \\]</span></span>"
    name: Excel.Worksheet
    fullName: Excel.Worksheet
    langs:
      - typeScript
    type: class
    extends:
      - 'OfficeExtension.ClientObject '
    package: excel
    children:
      - excel.Excel.Worksheet.activate
      - excel.Excel.Worksheet.charts
      - excel.Excel.Worksheet.context
      - excel.Excel.Worksheet.delete
      - excel.Excel.Worksheet.getCell
      - excel.Excel.Worksheet.getNext
      - excel.Excel.Worksheet.getNextOrNullObject
      - excel.Excel.Worksheet.getPrevious
      - excel.Excel.Worksheet.getPreviousOrNullObject
      - excel.Excel.Worksheet.getRange
      - excel.Excel.Worksheet.getUsedRange
      - excel.Excel.Worksheet.getUsedRangeOrNullObject
      - excel.Excel.Worksheet.id
      - excel.Excel.Worksheet.load
      - excel.Excel.Worksheet.load_1
      - excel.Excel.Worksheet.load_2
      - excel.Excel.Worksheet.name
      - excel.Excel.Worksheet.names
      - excel.Excel.Worksheet.pivotTables
      - excel.Excel.Worksheet.position
      - excel.Excel.Worksheet.protection
      - excel.Excel.Worksheet.set
      - excel.Excel.Worksheet.set_1
      - excel.Excel.Worksheet.tables
      - excel.Excel.Worksheet.toJSON
      - excel.Excel.Worksheet.visibility
  - uid: excel.Excel.Worksheet.activate
    summary: |-
      <span data-ttu-id="a866e-104">Активация листа в пользовательском интерфейсе Excel.</span><span class="sxs-lookup"><span data-stu-id="a866e-104">Activate the worksheet in the Excel UI.</span></span>

      <span data-ttu-id="a866e-105">\[[Набор API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="a866e-105">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: activate()
    fullName: activate()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'activate(): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a><span data-ttu-id="a866e-106">Примеры</span><span class="sxs-lookup"><span data-stu-id="a866e-106">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var wSheetName = 'Sheet1';
              var worksheet = ctx.workbook.worksheets.getItem(wSheetName);
              worksheet.activate();
              return ctx.sync(); 
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: excel.Excel.Worksheet.charts
    summary: |-
      <span data-ttu-id="a866e-107">Возвращает коллекцию диаграмм, имеющихся на листе.</span><span class="sxs-lookup"><span data-stu-id="a866e-107">Returns collection of charts that are part of the worksheet.</span></span> <span data-ttu-id="a866e-108">Только для чтения.</span><span class="sxs-lookup"><span data-stu-id="a866e-108">Read-only.</span></span>

      <span data-ttu-id="a866e-109">\[[Набор API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="a866e-109">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: charts
    fullName: charts
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly charts: Excel.ChartCollection;'
      return:
        type:
          - excel.Excel.ChartCollection
  - uid: excel.Excel.Worksheet.context
    summary: '<span data-ttu-id="a866e-110">Контекст запроса, связанный с объектом.</span><span class="sxs-lookup"><span data-stu-id="a866e-110">The request context associated with the object.</span></span> <span data-ttu-id="a866e-111">Это подсоединяет процесс надстройки к процессу ведущего приложения Office.</span><span class="sxs-lookup"><span data-stu-id="a866e-111">This connects the add-in''s process to the Office host application''s process.</span></span>'
    name: context
    fullName: context
    langs:
      - typeScript
    type: property
    syntax:
      content: 'context: RequestContext;'
      return:
        type:
          - excel.Excel.RequestContext
  - uid: excel.Excel.Worksheet.delete
    summary: |-
      <span data-ttu-id="a866e-112">Удаляет лист из книги.</span><span class="sxs-lookup"><span data-stu-id="a866e-112">Deletes the worksheet from the workbook.</span></span> <span data-ttu-id="a866e-113">Обратите внимание, что если для отображения листа задано значение "Верихидден", операция удаления завершится с помощью GeneralException.</span><span class="sxs-lookup"><span data-stu-id="a866e-113">Note that if the worksheet's visibility is set to "VeryHidden", the delete operation will fail with a GeneralException.</span></span>

      <span data-ttu-id="a866e-114">\[[Набор API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="a866e-114">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: delete()
    fullName: delete()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'delete(): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a><span data-ttu-id="a866e-115">Примеры</span><span class="sxs-lookup"><span data-stu-id="a866e-115">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var wSheetName = 'Sheet1';
              var worksheet = ctx.workbook.worksheets.getItem(wSheetName);
              worksheet.delete();
              return ctx.sync(); 
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: excel.Excel.Worksheet.getCell
    summary: |-
      <span data-ttu-id="a866e-116">Получает объект диапазона, содержащий одну ячейку, по номеру строки и столбца.</span><span class="sxs-lookup"><span data-stu-id="a866e-116">Gets the range object containing the single cell based on row and column numbers.</span></span> <span data-ttu-id="a866e-117">Ячейка может находиться вне границ родительского диапазона, пока она остается в сетке листа.</span><span class="sxs-lookup"><span data-stu-id="a866e-117">The cell can be outside the bounds of its parent range, so long as it stays within the worksheet grid.</span></span>

      <span data-ttu-id="a866e-118">\[[Набор API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="a866e-118">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: 'getCell(row, column)'
    fullName: 'getCell(row, column)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getCell(row: number, column: number): Excel.Range;'
      return:
        type:
          - excel.Excel.Range
        description: |-


          #### <a name="examples"></a><span data-ttu-id="a866e-119">Примеры</span><span class="sxs-lookup"><span data-stu-id="a866e-119">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "A1:F8";
              var worksheet = ctx.workbook.worksheets.getItem(sheetName);
              var cell = worksheet.getCell(0,0);
              cell.load('address');
              return ctx.sync().then(function() {
                  console.log(cell.address);
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: row
          description: '<span data-ttu-id="a866e-120">Номер строки ячейки, которую требуется извлечь.</span><span class="sxs-lookup"><span data-stu-id="a866e-120">The row number of the cell to be retrieved.</span></span> <span data-ttu-id="a866e-121">Используется нулевой индекс.</span><span class="sxs-lookup"><span data-stu-id="a866e-121">Zero-indexed.</span></span>'
          type:
            - number
        - id: column
          description: '<span data-ttu-id="a866e-122">Номер столбца ячейки, которую требуется извлечь.</span><span class="sxs-lookup"><span data-stu-id="a866e-122">the column number of the cell to be retrieved.</span></span> <span data-ttu-id="a866e-123">Используется нулевой индекс.</span><span class="sxs-lookup"><span data-stu-id="a866e-123">Zero-indexed.</span></span>'
          type:
            - number
  - uid: excel.Excel.Worksheet.getNext
    summary: |-
      <span data-ttu-id="a866e-124">Получает лист, следующий по отношению к элементу.</span><span class="sxs-lookup"><span data-stu-id="a866e-124">Gets the worksheet that follows this one.</span></span> <span data-ttu-id="a866e-125">При отсутствии листов, указанных ниже, этот метод вызовет ошибку.</span><span class="sxs-lookup"><span data-stu-id="a866e-125">If there are no worksheets following this one, this method will throw an error.</span></span>

      <span data-ttu-id="a866e-126">\[[Набор API: ExcelApi 1,5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="a866e-126">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getNext(visibleOnly)
    fullName: getNext(visibleOnly)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getNext(visibleOnly?: boolean): Excel.Worksheet;'
      return:
        type:
          - excel.Excel.Worksheet
        description: |-


          #### <a name="examples"></a><span data-ttu-id="a866e-127">Примеры</span><span class="sxs-lookup"><span data-stu-id="a866e-127">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheets = context.workbook.worksheets;

              // We don't want to include the default worksheet that was created
              // when the workbook was created, so our "firstSheet" will be the one
              // after the literal first. Note chaining of navigation methods.
              const firstSheet = sheets.getFirst().getNext();
              const lastSheet = sheets.getLast();
              const firstTaxRateRange = firstSheet.getRange("B2");
              const lastTaxRateRange = lastSheet.getRange("B2");

              firstSheet.load("name");
              lastSheet.load("name");
              firstTaxRateRange.load("text");
              lastTaxRateRange.load("text");

              await context.sync();

              let firstYear = firstSheet.name.substr(5, 4);
              let lastYear = lastSheet.name.substr(5, 4);
              console.log(`Tax Rate change from ${firstYear} to ${lastYear}`, `Tax rate for ${firstYear}: ${firstTaxRateRange.text[0][0]}\nTax rate for ${lastYear}: ${lastTaxRateRange.text[0][0]}`)

              await context.sync();
          });
          ```
      parameters:
        - id: visibleOnly
          description: '<span data-ttu-id="a866e-128">Необязательно.</span><span class="sxs-lookup"><span data-stu-id="a866e-128">Optional.</span></span> <span data-ttu-id="a866e-129">Если задано значение true, учитываются только видимые листы, пропуская все скрытые.</span><span class="sxs-lookup"><span data-stu-id="a866e-129">If true, considers only visible worksheets, skipping over any hidden ones.</span></span>'
          type:
            - boolean
  - uid: excel.Excel.Worksheet.getNextOrNullObject
    summary: |-
      <span data-ttu-id="a866e-130">Получает лист, следующий по отношению к элементу.</span><span class="sxs-lookup"><span data-stu-id="a866e-130">Gets the worksheet that follows this one.</span></span> <span data-ttu-id="a866e-131">Если после этого листа нет ни одного листа, этот метод возвратит нулевой объект.</span><span class="sxs-lookup"><span data-stu-id="a866e-131">If there are no worksheets following this one, this method will return a null object.</span></span>

      <span data-ttu-id="a866e-132">\[[Набор API: ExcelApi 1,5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="a866e-132">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getNextOrNullObject(visibleOnly)
    fullName: getNextOrNullObject(visibleOnly)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getNextOrNullObject(visibleOnly?: boolean): Excel.Worksheet;'
      return:
        type:
          - excel.Excel.Worksheet
        description: ''
      parameters:
        - id: visibleOnly
          description: '<span data-ttu-id="a866e-133">Необязательно.</span><span class="sxs-lookup"><span data-stu-id="a866e-133">Optional.</span></span> <span data-ttu-id="a866e-134">Если задано значение true, учитываются только видимые листы, пропуская все скрытые.</span><span class="sxs-lookup"><span data-stu-id="a866e-134">If true, considers only visible worksheets, skipping over any hidden ones.</span></span>'
          type:
            - boolean
  - uid: excel.Excel.Worksheet.getPrevious
    summary: |-
      <span data-ttu-id="a866e-135">Получает лист, который предшествует этому.</span><span class="sxs-lookup"><span data-stu-id="a866e-135">Gets the worksheet that precedes this one.</span></span> <span data-ttu-id="a866e-136">Если нет предыдущих листов, этот метод выдаст ошибку.</span><span class="sxs-lookup"><span data-stu-id="a866e-136">If there are no previous worksheets, this method will throw an error.</span></span>

      <span data-ttu-id="a866e-137">\[[Набор API: ExcelApi 1,5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="a866e-137">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getPrevious(visibleOnly)
    fullName: getPrevious(visibleOnly)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getPrevious(visibleOnly?: boolean): Excel.Worksheet;'
      return:
        type:
          - excel.Excel.Worksheet
        description: |-


          #### <a name="examples"></a><span data-ttu-id="a866e-138">Примеры</span><span class="sxs-lookup"><span data-stu-id="a866e-138">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheets = context.workbook.worksheets;
              const currentSheet = sheets.getActiveWorksheet();
              const previousYearSheet = currentSheet.getPrevious();
              const currentTaxDueRange = currentSheet.getRange("C2");
              const previousTaxDueRange = previousYearSheet.getRange("C2");

              currentSheet.load("name");
              previousYearSheet.load("name");
              currentTaxDueRange.load("text");
              previousTaxDueRange.load("text");

              await context.sync();

              let currentYear = currentSheet.name.substr(5, 4);
              let previousYear = previousYearSheet.name.substr(5, 4);
              console.log("Two Year Tax Due Comparison", `Tax due for ${currentYear} was ${currentTaxDueRange.text[0][0]}\nTax due for ${previousYear} was ${previousTaxDueRange.text[0][0]}`)

              await context.sync();
          });
          ```
      parameters:
        - id: visibleOnly
          description: '<span data-ttu-id="a866e-139">Необязательно.</span><span class="sxs-lookup"><span data-stu-id="a866e-139">Optional.</span></span> <span data-ttu-id="a866e-140">Если задано значение true, учитываются только видимые листы, пропуская все скрытые.</span><span class="sxs-lookup"><span data-stu-id="a866e-140">If true, considers only visible worksheets, skipping over any hidden ones.</span></span>'
          type:
            - boolean
  - uid: excel.Excel.Worksheet.getPreviousOrNullObject
    summary: |-
      <span data-ttu-id="a866e-141">Получает лист, который предшествует этому.</span><span class="sxs-lookup"><span data-stu-id="a866e-141">Gets the worksheet that precedes this one.</span></span> <span data-ttu-id="a866e-142">Если нет предыдущих листов, этот метод возвратит значение NULL обжет.</span><span class="sxs-lookup"><span data-stu-id="a866e-142">If there are no previous worksheets, this method will return a null objet.</span></span>

      <span data-ttu-id="a866e-143">\[[Набор API: ExcelApi 1,5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="a866e-143">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getPreviousOrNullObject(visibleOnly)
    fullName: getPreviousOrNullObject(visibleOnly)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getPreviousOrNullObject(visibleOnly?: boolean): Excel.Worksheet;'
      return:
        type:
          - excel.Excel.Worksheet
        description: ''
      parameters:
        - id: visibleOnly
          description: '<span data-ttu-id="a866e-144">Необязательно.</span><span class="sxs-lookup"><span data-stu-id="a866e-144">Optional.</span></span> <span data-ttu-id="a866e-145">Если задано значение true, учитываются только видимые листы, пропуская все скрытые.</span><span class="sxs-lookup"><span data-stu-id="a866e-145">If true, considers only visible worksheets, skipping over any hidden ones.</span></span>'
          type:
            - boolean
  - uid: excel.Excel.Worksheet.getRange
    summary: |-
      <span data-ttu-id="a866e-146">Получает объект Range, представляющий отдельный прямоугольный блок ячеек, заданный по адресу или имени.</span><span class="sxs-lookup"><span data-stu-id="a866e-146">Gets the range object, representing a single rectangular block of cells, specified by the address or name.</span></span>

      <span data-ttu-id="a866e-147">\[[Набор API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="a866e-147">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getRange(address)
    fullName: getRange(address)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getRange(address?: string): Excel.Range;'
      return:
        type:
          - excel.Excel.Range
        description: |-


          #### <a name="examples"></a><span data-ttu-id="a866e-148">Примеры</span><span class="sxs-lookup"><span data-stu-id="a866e-148">Examples</span></span>

          ```javascript
          // Below example uses range address to get the range object.
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "A1:F8";
              var worksheet = ctx.workbook.worksheets.getItem(sheetName);
              var range = worksheet.getRange(rangeAddress);
              range.load('cellCount');
              return ctx.sync().then(function() {
                  console.log(range.cellCount);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
          ```javascript
          // Below example uses a named-range to get the range object.
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeName = 'MyRange';
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeName);
              range.load('address');
              return ctx.sync().then(function() {
                  console.log(range.address);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: address
          description: '<span data-ttu-id="a866e-149">Необязательно.</span><span class="sxs-lookup"><span data-stu-id="a866e-149">Optional.</span></span> <span data-ttu-id="a866e-150">Строка, представляющая адрес или имя диапазона.</span><span class="sxs-lookup"><span data-stu-id="a866e-150">The string representing the address or name of the range.</span></span> <span data-ttu-id="a866e-151">Например, "a1: B2".</span><span class="sxs-lookup"><span data-stu-id="a866e-151">For example, "A1:B2".</span></span> <span data-ttu-id="a866e-152">Если аргумент не указан, возвращается весь диапазон листа.</span><span class="sxs-lookup"><span data-stu-id="a866e-152">If not specified, the entire worksheet range is returned.</span></span>'
          type:
            - string
  - uid: excel.Excel.Worksheet.getUsedRange
    summary: |-
      <span data-ttu-id="a866e-153">Используемый диапазон — это наименьший диапазон, включающий в себя все ячейки с определенным значением или форматированием.</span><span class="sxs-lookup"><span data-stu-id="a866e-153">The used range is the smallest range that encompasses any cells that have a value or formatting assigned to them.</span></span> <span data-ttu-id="a866e-154">Если лист пуст, эта функция возвратит верхнюю левую ячейку (то есть *не* выдает ошибку).</span><span class="sxs-lookup"><span data-stu-id="a866e-154">If the entire worksheet is blank, this function will return the top left cell (i.e. it will *not* throw an error).</span></span>

      <span data-ttu-id="a866e-155">\[[Набор API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="a866e-155">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getUsedRange(valuesOnly)
    fullName: getUsedRange(valuesOnly)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getUsedRange(valuesOnly?: boolean): Excel.Range;'
      return:
        type:
          - excel.Excel.Range
        description: |-


          #### <a name="examples"></a><span data-ttu-id="a866e-156">Примеры</span><span class="sxs-lookup"><span data-stu-id="a866e-156">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var wSheetName = 'Sheet1';
              var worksheet = ctx.workbook.worksheets.getItem(wSheetName);
              var usedRange = worksheet.getUsedRange();
              usedRange.load('address');
              return ctx.sync().then(function() {
                      console.log(usedRange.address);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: valuesOnly
          description: '<span data-ttu-id="a866e-157">Необязательно.</span><span class="sxs-lookup"><span data-stu-id="a866e-157">Optional.</span></span> <span data-ttu-id="a866e-158">Если этот параметр имеет значение true, учитываются только ячейки со значениями в качестве используемых ячеек (игнорируя форматирование).</span><span class="sxs-lookup"><span data-stu-id="a866e-158">If true, considers only cells with values as used cells (ignoring formatting).</span></span> <span data-ttu-id="a866e-159">\[Набор API: ExcelApi 1,2\]</span><span class="sxs-lookup"><span data-stu-id="a866e-159">\[Api set: ExcelApi 1.2\]</span></span>'
          type:
            - boolean
  - uid: excel.Excel.Worksheet.getUsedRangeOrNullObject
    summary: "<span data-ttu-id=\"a866e-p119\">Используемый диапазон\_— это наименьший диапазон, включающий в себя все ячейки, которые содержат значение или форматирование. Если весь лист пустой, эта функция возвращает пустой объект.</span><span class=\"sxs-lookup\"><span data-stu-id=\"a866e-p119\">The used range is the smallest range that encompasses any cells that have a value or formatting assigned to them. If the entire worksheet is blank, this function will return a null object.</span></span>\n\n<span data-ttu-id=\"a866e-162\">\\[[Набор API: ExcelApi 1,4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\\]</span><span class=\"sxs-lookup\"><span data-stu-id=\"a866e-162\">\\[ [API set: ExcelApi 1.4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \\]</span></span>"
    name: getUsedRangeOrNullObject(valuesOnly)
    fullName: getUsedRangeOrNullObject(valuesOnly)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getUsedRangeOrNullObject(valuesOnly?: boolean): Excel.Range;'
      return:
        type:
          - excel.Excel.Range
        description: ''
      parameters:
        - id: valuesOnly
          description: <span data-ttu-id="a866e-163">Необязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="a866e-163">Optional.</span></span> <span data-ttu-id="a866e-164">Учитывает только ячейки со значениями.</span><span class="sxs-lookup"><span data-stu-id="a866e-164">Considers only cells with values as used cells.</span></span>
          type:
            - boolean
  - uid: excel.Excel.Worksheet.id
    summary: |-
      <span data-ttu-id="a866e-p121">Возвращает значение, однозначно идентифицирующее лист в данной книге. Значение идентификатора остается прежним, даже если переименовать или переместить лист. Только для чтения.</span><span class="sxs-lookup"><span data-stu-id="a866e-p121">Returns a value that uniquely identifies the worksheet in a given workbook. The value of the identifier remains the same even when the worksheet is renamed or moved. Read-only.</span></span>

      <span data-ttu-id="a866e-168">\[[Набор API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="a866e-168">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: id
    fullName: id
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly id: string;'
      return:
        type:
          - string
  - uid: excel.Excel.Worksheet.load
    summary: <span data-ttu-id="a866e-169">Добавляет в очередь команду для загрузки указанных свойств объекта.</span><span class="sxs-lookup"><span data-stu-id="a866e-169">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="a866e-170">Перед чтением свойств необходимо вызвать метод context.sync().</span><span class="sxs-lookup"><span data-stu-id="a866e-170">You must call "context.sync()" before reading the properties.</span></span>
    remarks: |-
      <span data-ttu-id="a866e-171">В дополнение к этой подписи этот метод имеет следующие подписи:</span><span class="sxs-lookup"><span data-stu-id="a866e-171">In addition to this signature, this method has the following signatures:</span></span>

      <span data-ttu-id="a866e-172">`load(option?: string | string[]): Excel.Worksheet`-WHERE — это строка с разделителями-запятыми или массив строк, указывающий свойства для загрузки.</span><span class="sxs-lookup"><span data-stu-id="a866e-172">`load(option?: string | string[]): Excel.Worksheet` - Where option is a comma-delimited string or an array of strings that specify the properties to load.</span></span>

      <span data-ttu-id="a866e-173">`load(option?: { select?: string; expand?: string; }): Excel.Worksheet`-WHERE. Select — это строка с разделителями-запятыми, указывающая свойства для загрузки и параметры. Expand — это строка с разделителями-запятыми, указывающая свойства навигации для загрузки.</span><span class="sxs-lookup"><span data-stu-id="a866e-173">`load(option?: { select?: string; expand?: string; }): Excel.Worksheet` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.</span></span>

      <span data-ttu-id="a866e-174">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.Worksheet`— Доступно только для типов коллекций.</span><span class="sxs-lookup"><span data-stu-id="a866e-174">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.Worksheet` - Only available on collection types.</span></span> <span data-ttu-id="a866e-175">Он аналогичен предыдущей подписи.</span><span class="sxs-lookup"><span data-stu-id="a866e-175">It is similar to the preceding signature.</span></span> <span data-ttu-id="a866e-176">Option. Top указывает максимальное количество элементов коллекции, которые можно включить в результат.</span><span class="sxs-lookup"><span data-stu-id="a866e-176">Option.top specifies the maximum number of collection items that can be included in the result.</span></span> <span data-ttu-id="a866e-177">Option. skip указывает количество элементов, которые будут пропущены и не включены в результат.</span><span class="sxs-lookup"><span data-stu-id="a866e-177">Option.skip specifies the number of items that are to be skipped and not included in the result.</span></span> <span data-ttu-id="a866e-178">Если указан параметр Option. Top, результирующий набор начнется после пропуска указанного числа элементов.</span><span class="sxs-lookup"><span data-stu-id="a866e-178">If option.top is specified, the result set will start after skipping the specified number of items.</span></span>
    name: load(option)
    fullName: load(option)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(option?: Excel.Interfaces.WorksheetLoadOptions): Excel.Worksheet;'
      return:
        type:
          - excel.Excel.Worksheet
        description: ''
      parameters:
        - id: option
          description: ''
          type:
            - excel.Excel.Interfaces.WorksheetLoadOptions
  - uid: excel.Excel.Worksheet.load_1
    summary: <span data-ttu-id="a866e-179">Добавляет в очередь команду для загрузки указанных свойств объекта.</span><span class="sxs-lookup"><span data-stu-id="a866e-179">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="a866e-180">Перед чтением свойств `context.sync()` необходимо вызвать метод.</span><span class="sxs-lookup"><span data-stu-id="a866e-180">You must call `context.sync()` before reading the properties.</span></span>
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): Excel.Worksheet;'
      return:
        type:
          - excel.Excel.Worksheet
        description: |-


          #### <a name="examples"></a><span data-ttu-id="a866e-181">Примеры</span><span class="sxs-lookup"><span data-stu-id="a866e-181">Examples</span></span>

          ```javascript
          // Get worksheet properties based on sheet name.
          Excel.run(function (ctx) { 
              var wSheetName = 'Sheet1';
              var worksheet = ctx.workbook.worksheets.getItem(wSheetName);
              worksheet.load('position')
              return ctx.sync().then(function() {
                      console.log(worksheet.position);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
          ```javascript
          // Set worksheet position. 
          Excel.run(function (ctx) { 
              var wSheetName = 'Sheet1';
              var worksheet = ctx.workbook.worksheets.getItem(wSheetName);
              worksheet.position = 2;
              return ctx.sync(); 
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: propertyNames
          description: '<span data-ttu-id="a866e-182">Строка, разделенная запятыми, или массив строк, указывающий свойства для загрузки.</span><span class="sxs-lookup"><span data-stu-id="a866e-182">A comma-delimited string or an array of strings that specify the properties to load.</span></span>'
          type:
            - 'string | string[]'
  - uid: excel.Excel.Worksheet.load_2
    summary: <span data-ttu-id="a866e-183">Добавляет в очередь команду для загрузки указанных свойств объекта.</span><span class="sxs-lookup"><span data-stu-id="a866e-183">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="a866e-184">Перед чтением свойств `context.sync()` необходимо вызвать метод.</span><span class="sxs-lookup"><span data-stu-id="a866e-184">You must call `context.sync()` before reading the properties.</span></span>
    name: load(propertyNamesAndPaths)
    fullName: load(propertyNamesAndPaths)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNamesAndPaths?: { select?: string; expand?: string; }): Excel.Worksheet;'
      return:
        type:
          - excel.Excel.Worksheet
        description: ''
      parameters:
        - id: propertyNamesAndPaths
          description: '<span data-ttu-id="a866e-185">Где Пропертинамесандпасс. Select — это строка с разделителями-запятыми, задающая свойства для загрузки, и Пропертинамесандпасс. Expand — это строка с разделителями-запятыми, указывающая свойства навигации для загрузки.</span><span class="sxs-lookup"><span data-stu-id="a866e-185">Where propertyNamesAndPaths.select is a comma-delimited string that specifies the properties to load, and propertyNamesAndPaths.expand is a comma-delimited string that specifies the navigation properties to load.</span></span>'
          type:
            - '{ select?: string; expand?: string; }'
  - uid: excel.Excel.Worksheet.name
    summary: |-
      <span data-ttu-id="a866e-186">Отображаемое имя листа.</span><span class="sxs-lookup"><span data-stu-id="a866e-186">The display name of the worksheet.</span></span>

      <span data-ttu-id="a866e-187">\[[Набор API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="a866e-187">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: name
    fullName: name
    langs:
      - typeScript
    type: property
    syntax:
      content: 'name: string;'
      return:
        type:
          - string
  - uid: excel.Excel.Worksheet.names
    summary: |-
      <span data-ttu-id="a866e-188">Коллекция имен, относящих к текущему листу.</span><span class="sxs-lookup"><span data-stu-id="a866e-188">Collection of names scoped to the current worksheet.</span></span> <span data-ttu-id="a866e-189">Только для чтения.</span><span class="sxs-lookup"><span data-stu-id="a866e-189">Read-only.</span></span>

      <span data-ttu-id="a866e-190">\[[Набор API: ExcelApi 1,4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="a866e-190">\[ [API set: ExcelApi 1.4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: names
    fullName: names
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly names: Excel.NamedItemCollection;'
      return:
        type:
          - excel.Excel.NamedItemCollection
  - uid: excel.Excel.Worksheet.pivotTables
    summary: |-
      <span data-ttu-id="a866e-191">Коллекция сводных таблиц на листе.</span><span class="sxs-lookup"><span data-stu-id="a866e-191">Collection of PivotTables that are part of the worksheet.</span></span> <span data-ttu-id="a866e-192">Только для чтения.</span><span class="sxs-lookup"><span data-stu-id="a866e-192">Read-only.</span></span>

      <span data-ttu-id="a866e-193">\[[Набор API: ExcelApi 1,3](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="a866e-193">\[ [API set: ExcelApi 1.3](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: pivotTables
    fullName: pivotTables
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly pivotTables: Excel.PivotTableCollection;'
      return:
        type:
          - excel.Excel.PivotTableCollection
  - uid: excel.Excel.Worksheet.position
    summary: |-
      <span data-ttu-id="a866e-194">Положение листа (начиная с нуля) в книге.</span><span class="sxs-lookup"><span data-stu-id="a866e-194">The zero-based position of the worksheet within the workbook.</span></span>

      <span data-ttu-id="a866e-195">\[[Набор API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="a866e-195">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: position
    fullName: position
    langs:
      - typeScript
    type: property
    syntax:
      content: 'position: number;'
      return:
        type:
          - number
  - uid: excel.Excel.Worksheet.protection
    summary: |-
      <span data-ttu-id="a866e-196">Возвращает объект защиты листа.</span><span class="sxs-lookup"><span data-stu-id="a866e-196">Returns sheet protection object for a worksheet.</span></span> <span data-ttu-id="a866e-197">Только для чтения.</span><span class="sxs-lookup"><span data-stu-id="a866e-197">Read-only.</span></span>

      <span data-ttu-id="a866e-198">\[[Набор API: ExcelApi 1,2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="a866e-198">\[ [API set: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: protection
    fullName: protection
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly protection: Excel.WorksheetProtection;'
      return:
        type:
          - excel.Excel.WorksheetProtection
  - uid: excel.Excel.Worksheet.set
    summary: '<span data-ttu-id="a866e-199">Задает одновременно несколько свойств объекта.</span><span class="sxs-lookup"><span data-stu-id="a866e-199">Sets multiple properties of an object at the same time.</span></span> <span data-ttu-id="a866e-200">Можно передать либо простой объект с соответствующими свойствами, либо другой объект API того же типа.</span><span class="sxs-lookup"><span data-stu-id="a866e-200">You can pass either a plain object with the appropriate properties, or another API object of the same type.</span></span>'
    remarks: |-
      <span data-ttu-id="a866e-201">Этот метод имеет следующую дополнительную подпись:</span><span class="sxs-lookup"><span data-stu-id="a866e-201">This method has the following additional signature:</span></span>

      `set(properties: Excel.Worksheet): void`
    name: 'set(properties, options)'
    fullName: 'set(properties, options)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'set(properties: Interfaces.WorksheetUpdateData, options?: OfficeExtension.UpdateOptions): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: properties
          description: '<span data-ttu-id="a866e-202">Объект JavaScript со свойствами, которые структурированы исоморфикалли к свойствам объекта, для которого вызывается метод.</span><span class="sxs-lookup"><span data-stu-id="a866e-202">A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.</span></span>'
          type:
            - Interfaces.WorksheetUpdateData
        - id: options
          description: '<span data-ttu-id="a866e-203">Предоставляет возможность подавлять ошибки, если объект Properties пытается задать любые свойства, предназначенные только для чтения.</span><span class="sxs-lookup"><span data-stu-id="a866e-203">Provides an option to suppress errors if the properties object tries to set any read-only properties.</span></span>'
          type:
            - OfficeExtension.UpdateOptions
  - uid: excel.Excel.Worksheet.set_1
    summary: '<span data-ttu-id="a866e-204">Задает одновременно несколько свойств объекта на основе существующего загруженного объекта.</span><span class="sxs-lookup"><span data-stu-id="a866e-204">Sets multiple properties on the object at the same time, based on an existing loaded object.</span></span>'
    name: set(properties)
    fullName: set(properties)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'set(properties: Excel.Worksheet): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: properties
          description: ''
          type:
            - excel.Excel.Worksheet
  - uid: excel.Excel.Worksheet.tables
    summary: |-
      <span data-ttu-id="a866e-205">Коллекция таблиц, имеющихся на листе.</span><span class="sxs-lookup"><span data-stu-id="a866e-205">Collection of tables that are part of the worksheet.</span></span> <span data-ttu-id="a866e-206">Только для чтения.</span><span class="sxs-lookup"><span data-stu-id="a866e-206">Read-only.</span></span>

      <span data-ttu-id="a866e-207">\[[Набор API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="a866e-207">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: tables
    fullName: tables
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly tables: Excel.TableCollection;'
      return:
        type:
          - excel.Excel.TableCollection
  - uid: excel.Excel.Worksheet.toJSON
    summary: '<span data-ttu-id="a866e-208">Переопределяет метод `toJSON()` JavaScript для предоставления более удобного вывода при передаче объекта API`JSON.stringify()`</span><span class="sxs-lookup"><span data-stu-id="a866e-208">Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`</span></span><!-- --><span data-ttu-id="a866e-209">.</span><span class="sxs-lookup"><span data-stu-id="a866e-209"></span></span> <span data-ttu-id="a866e-210">(`JSON.stringify`</span><span class="sxs-lookup"><span data-stu-id="a866e-210"></span></span><!-- --><span data-ttu-id="a866e-211">, в свою очередь, вызывает `toJSON` метод объекта, который передается ему.) В то время как исходный объект Excel. лист является объектом API, `toJSON` метод возвращает простой объект JavaScript (тип`Excel.Interfaces.WorksheetData`</span><span class="sxs-lookup"><span data-stu-id="a866e-211">, in turn, calls the `toJSON` method of the object that is passed to it.) Whereas the original Excel.Worksheet object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.WorksheetData`</span></span><!-- --><span data-ttu-id="a866e-212">), который содержит неполные копии загруженных дочерних свойств из исходного объекта.</span><span class="sxs-lookup"><span data-stu-id="a866e-212">) that contains shallow copies of any loaded child properties from the original object.</span></span>'
    name: toJSON()
    fullName: toJSON()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON(): Excel.Interfaces.WorksheetData;'
      return:
        type:
          - excel.Excel.Interfaces.WorksheetData
        description: ''
  - uid: excel.Excel.Worksheet.visibility
    summary: |-
      <span data-ttu-id="a866e-213">Видимость листа.</span><span class="sxs-lookup"><span data-stu-id="a866e-213">The Visibility of the worksheet.</span></span>

      <span data-ttu-id="a866e-214">\[[Набор API: ExcelApi 1,1 для чтения видимости; 1,2 — для его установки.](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)</span><span class="sxs-lookup"><span data-stu-id="a866e-214">\[ [API set: ExcelApi 1.1 for reading visibility; 1.2 for setting it.](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)</span></span> <span data-ttu-id="a866e-215">\]</span><span class="sxs-lookup"><span data-stu-id="a866e-215"></span></span>
    name: visibility
    fullName: visibility
    langs:
      - typeScript
    type: property
    syntax:
      content: 'visibility: Excel.SheetVisibility | "Visible" | "Hidden" | "VeryHidden";'
      return:
        type:
          - Excel.SheetVisibility | "Visible" | "Hidden" | "VeryHidden"