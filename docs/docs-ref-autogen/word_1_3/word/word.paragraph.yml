### YamlMime:UniversalReference
items:
  - uid: 'word!Word.Paragraph:class'
    summary: |-
      <span data-ttu-id="95d1e-101">Представляет один абзац в выделении, диапазоне, элементе управления содержимым или тексте документа.</span><span class="sxs-lookup"><span data-stu-id="95d1e-101">Represents a single paragraph in a selection, range, content control, or document body.</span></span>

      <span data-ttu-id="95d1e-102">\[[Набор API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="95d1e-102">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: Word.Paragraph
    fullName: Word.Paragraph
    langs:
      - typeScript
    type: class
    extends:
      - 'word!OfficeExtension.ClientObject:class'
    package: word!
    children:
      - 'word!Word.Paragraph#alignment:member'
      - 'word!Word.Paragraph#attachToList:member(1)'
      - 'word!Word.Paragraph#clear:member(1)'
      - 'word!Word.Paragraph#contentControls:member'
      - 'word!Word.Paragraph#context:member'
      - 'word!Word.Paragraph#delete:member(1)'
      - 'word!Word.Paragraph#detachFromList:member(1)'
      - 'word!Word.Paragraph#firstLineIndent:member'
      - 'word!Word.Paragraph#font:member'
      - 'word!Word.Paragraph#getHtml:member(1)'
      - 'word!Word.Paragraph#getNext:member(1)'
      - 'word!Word.Paragraph#getNextOrNullObject:member(1)'
      - 'word!Word.Paragraph#getOoxml:member(1)'
      - 'word!Word.Paragraph#getPrevious:member(1)'
      - 'word!Word.Paragraph#getPreviousOrNullObject:member(1)'
      - 'word!Word.Paragraph#getRange:member(1)'
      - 'word!Word.Paragraph#getRange:member(2)'
      - 'word!Word.Paragraph#getTextRanges:member(1)'
      - 'word!Word.Paragraph#inlinePictures:member'
      - 'word!Word.Paragraph#insertBreak:member(1)'
      - 'word!Word.Paragraph#insertBreak:member(2)'
      - 'word!Word.Paragraph#insertContentControl:member(1)'
      - 'word!Word.Paragraph#insertFileFromBase64:member(1)'
      - 'word!Word.Paragraph#insertFileFromBase64:member(2)'
      - 'word!Word.Paragraph#insertHtml:member(1)'
      - 'word!Word.Paragraph#insertHtml:member(2)'
      - 'word!Word.Paragraph#insertInlinePictureFromBase64:member(1)'
      - 'word!Word.Paragraph#insertInlinePictureFromBase64:member(2)'
      - 'word!Word.Paragraph#insertOoxml:member(1)'
      - 'word!Word.Paragraph#insertOoxml:member(2)'
      - 'word!Word.Paragraph#insertParagraph:member(1)'
      - 'word!Word.Paragraph#insertParagraph:member(2)'
      - 'word!Word.Paragraph#insertTable:member(1)'
      - 'word!Word.Paragraph#insertTable:member(2)'
      - 'word!Word.Paragraph#insertText:member(1)'
      - 'word!Word.Paragraph#insertText:member(2)'
      - 'word!Word.Paragraph#isLastParagraph:member'
      - 'word!Word.Paragraph#isListItem:member'
      - 'word!Word.Paragraph#leftIndent:member'
      - 'word!Word.Paragraph#lineSpacing:member'
      - 'word!Word.Paragraph#lineUnitAfter:member'
      - 'word!Word.Paragraph#lineUnitBefore:member'
      - 'word!Word.Paragraph#list:member'
      - 'word!Word.Paragraph#listItem:member'
      - 'word!Word.Paragraph#listItemOrNullObject:member'
      - 'word!Word.Paragraph#listOrNullObject:member'
      - 'word!Word.Paragraph#load:member(1)'
      - 'word!Word.Paragraph#load:member(2)'
      - 'word!Word.Paragraph#load:member(3)'
      - 'word!Word.Paragraph#outlineLevel:member'
      - 'word!Word.Paragraph#parentBody:member'
      - 'word!Word.Paragraph#parentContentControl:member'
      - 'word!Word.Paragraph#parentContentControlOrNullObject:member'
      - 'word!Word.Paragraph#parentTable:member'
      - 'word!Word.Paragraph#parentTableCell:member'
      - 'word!Word.Paragraph#parentTableCellOrNullObject:member'
      - 'word!Word.Paragraph#parentTableOrNullObject:member'
      - 'word!Word.Paragraph#rightIndent:member'
      - 'word!Word.Paragraph#search:member(1)'
      - 'word!Word.Paragraph#select:member(1)'
      - 'word!Word.Paragraph#select:member(2)'
      - 'word!Word.Paragraph#set:member(1)'
      - 'word!Word.Paragraph#set:member(2)'
      - 'word!Word.Paragraph#spaceAfter:member'
      - 'word!Word.Paragraph#spaceBefore:member'
      - 'word!Word.Paragraph#split:member(1)'
      - 'word!Word.Paragraph#startNewList:member(1)'
      - 'word!Word.Paragraph#style:member'
      - 'word!Word.Paragraph#styleBuiltIn:member'
      - 'word!Word.Paragraph#tableNestingLevel:member'
      - 'word!Word.Paragraph#text:member'
      - 'word!Word.Paragraph#toJSON:member(1)'
      - 'word!Word.Paragraph#track:member(1)'
      - 'word!Word.Paragraph#untrack:member(1)'
  - uid: 'word!Word.Paragraph#alignment:member'
    summary: |-
      <span data-ttu-id="95d1e-103">Возвращает или задает выравнивание для абзаца.</span><span class="sxs-lookup"><span data-stu-id="95d1e-103">Gets or sets the alignment for a paragraph.</span></span> <span data-ttu-id="95d1e-104">Возможные значения: left, centered, right и justified.</span><span class="sxs-lookup"><span data-stu-id="95d1e-104">The value can be 'left', 'centered', 'right', or 'justified'.</span></span>

      <span data-ttu-id="95d1e-105">\[[Набор API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="95d1e-105">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: alignment
    fullName: alignment
    langs:
      - typeScript
    type: property
    syntax:
      content: 'alignment: Word.Alignment | "Mixed" | "Unknown" | "Left" | "Centered" | "Right" | "Justified";'
      return:
        type:
          - 'word!Word.Paragraph#alignment~0:complex'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="95d1e-106">Примеры</span><span class="sxs-lookup"><span data-stu-id="95d1e-106">Examples</span></span>

          ```typescript
          await Word.run(async (context) => {
            // Centers last paragraph alignment.
            context.document.body.paragraphs.getLast().alignment = "Centered";

            await context.sync();
          });
          ```
  - uid: 'word!Word.Paragraph#attachToList:member(1)'
    summary: |-
      <span data-ttu-id="95d1e-p102">Позволяет присоединить абзац к существующему списку на указанном уровне. Если присоединить абзац к списку не удается или он уже является элементом списка, метод не выполняется.</span><span class="sxs-lookup"><span data-stu-id="95d1e-p102">Lets the paragraph join an existing list at the specified level. Fails if the paragraph cannot join the list or if the paragraph is already a list item.</span></span>

      <span data-ttu-id="95d1e-109">\[[Набор API: WordApi 1,3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="95d1e-109">\[ [API set: WordApi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: 'attachToList(listId, level)'
    fullName: 'attachToList(listId, level)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'attachToList(listId: number, level: number): Word.List;'
      return:
        type:
          - 'word!Word.List:class'
        description: ''
      parameters:
        - id: listId
          description: <span data-ttu-id="95d1e-110">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="95d1e-110">Required.</span></span> <span data-ttu-id="95d1e-111">Идентификатор существующего списка.</span><span class="sxs-lookup"><span data-stu-id="95d1e-111">The ID of an existing list.</span></span>
          type:
            - number
        - id: level
          description: <span data-ttu-id="95d1e-112">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="95d1e-112">Required.</span></span> <span data-ttu-id="95d1e-113">Уровень в списке.</span><span class="sxs-lookup"><span data-stu-id="95d1e-113">The level in the list.</span></span>
          type:
            - number
  - uid: 'word!Word.Paragraph#clear:member(1)'
    summary: |-
      <span data-ttu-id="95d1e-114">Очищает содержимое объекта абзаца.</span><span class="sxs-lookup"><span data-stu-id="95d1e-114">Clears the contents of the paragraph object.</span></span> <span data-ttu-id="95d1e-115">Пользователь может отменить операцию для очищенного содержимого.</span><span class="sxs-lookup"><span data-stu-id="95d1e-115">The user can perform the undo operation on the cleared content.</span></span>

      <span data-ttu-id="95d1e-116">\[[Набор API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="95d1e-116">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: clear()
    fullName: clear()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'clear(): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a><span data-ttu-id="95d1e-117">Примеры</span><span class="sxs-lookup"><span data-stu-id="95d1e-117">Examples</span></span>

          ```javascript
          // Run a batch operation against the Word object model.
          Word.run(function (context) {

              // Create a proxy object for the paragraphs collection.
              var paragraphs = context.document.body.paragraphs;

              // Queue a command to load the style property for all of the paragraphs.
              context.load(paragraphs, 'style');

              // Synchronize the document state by executing the queued commands,
              // and return a promise to indicate task completion.
              return context.sync().then(function () {

                  // Queue a command to clear the contents of the first paragraph.
                  paragraphs.items[0].clear();

                  // Synchronize the document state by executing the queued commands,
                  // and return a promise to indicate task completion.
                  return context.sync().then(function () {
                      console.log('Cleared the contents of the first paragraph.');
                  });
              });
          })
          .catch(function (error) {
              console.log('Error: ' + JSON.stringify(error));
              if (error instanceof OfficeExtension.Error) {
                  console.log('Debug info: ' + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: 'word!Word.Paragraph#contentControls:member'
    summary: |-
      <span data-ttu-id="95d1e-118">Возвращает коллекцию объектов элементов управления содержимым в абзаце.</span><span class="sxs-lookup"><span data-stu-id="95d1e-118">Gets the collection of content control objects in the paragraph.</span></span> <span data-ttu-id="95d1e-119">Только для чтения.</span><span class="sxs-lookup"><span data-stu-id="95d1e-119">Read-only.</span></span>

      <span data-ttu-id="95d1e-120">\[[Набор API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="95d1e-120">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: contentControls
    fullName: contentControls
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly contentControls: Word.ContentControlCollection;'
      return:
        type:
          - 'word!Word.ContentControlCollection:class'
  - uid: 'word!Word.Paragraph#context:member'
    summary: '<span data-ttu-id="95d1e-121">Контекст запроса, связанный с объектом.</span><span class="sxs-lookup"><span data-stu-id="95d1e-121">The request context associated with the object.</span></span> <span data-ttu-id="95d1e-122">Это подсоединяет процесс надстройки к процессу ведущего приложения Office.</span><span class="sxs-lookup"><span data-stu-id="95d1e-122">This connects the add-in''s process to the Office host application''s process.</span></span>'
    name: context
    fullName: context
    langs:
      - typeScript
    type: property
    syntax:
      content: 'context: RequestContext;'
      return:
        type:
          - 'word!Word.RequestContext:class'
  - uid: 'word!Word.Paragraph#delete:member(1)'
    summary: |-
      <span data-ttu-id="95d1e-123">Удаляет абзац и его содержимое из документа.</span><span class="sxs-lookup"><span data-stu-id="95d1e-123">Deletes the paragraph and its content from the document.</span></span>

      <span data-ttu-id="95d1e-124">\[[Набор API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="95d1e-124">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: delete()
    fullName: delete()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'delete(): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a><span data-ttu-id="95d1e-125">Примеры</span><span class="sxs-lookup"><span data-stu-id="95d1e-125">Examples</span></span>

          ```javascript
          // Run a batch operation against the Word object model.
          Word.run(function (context) {

              // Create a proxy object for the paragraphs collection.
              var paragraphs = context.document.body.paragraphs;

              // Queue a command to load the text property for all of the paragraphs.
              context.load(paragraphs, 'text');

              // Synchronize the document state by executing the queued commands,
              // and return a promise to indicate task completion.
              return context.sync().then(function () {

                  // Queue a command to delete the first paragraph.
                  paragraphs.items[0].delete();

                  // Synchronize the document state by executing the queued commands,
                  // and return a promise to indicate task completion.
                  return context.sync().then(function () {
                      console.log('Deleted the first paragraph.');
                  });
              });
          })
          .catch(function (error) {
              console.log('Error: ' + JSON.stringify(error));
              if (error instanceof OfficeExtension.Error) {
                  console.log('Debug info: ' + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: 'word!Word.Paragraph#detachFromList:member(1)'
    summary: |-
      <span data-ttu-id="95d1e-126">Перемещает абзац за пределы списка (если он является элементом списка).</span><span class="sxs-lookup"><span data-stu-id="95d1e-126">Moves this paragraph out of its list, if the paragraph is a list item.</span></span>

      <span data-ttu-id="95d1e-127">\[[Набор API: WordApi 1,3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="95d1e-127">\[ [API set: WordApi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: detachFromList()
    fullName: detachFromList()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'detachFromList(): void;'
      return:
        type:
          - void
        description: ''
  - uid: 'word!Word.Paragraph#firstLineIndent:member'
    summary: |-
      <span data-ttu-id="95d1e-p108">Возвращает или задает значение отступа первой строки или выступа в пунктах. Для установки отступа первой строки укажите положительное значение и используйте отрицательное значение, чтобы задать выступ.</span><span class="sxs-lookup"><span data-stu-id="95d1e-p108">Gets or sets the value, in points, for a first line or hanging indent. Use a positive value to set a first-line indent, and use a negative value to set a hanging indent.</span></span>

      <span data-ttu-id="95d1e-130">\[[Набор API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="95d1e-130">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: firstLineIndent
    fullName: firstLineIndent
    langs:
      - typeScript
    type: property
    syntax:
      content: 'firstLineIndent: number;'
      return:
        type:
          - number
  - uid: 'word!Word.Paragraph#font:member'
    summary: |-
      <span data-ttu-id="95d1e-131">Возвращает формат текста абзаца.</span><span class="sxs-lookup"><span data-stu-id="95d1e-131">Gets the text format of the paragraph.</span></span> <span data-ttu-id="95d1e-132">Используйте это свойство для получения и задания имени, размера, цвета и других свойств шрифта.</span><span class="sxs-lookup"><span data-stu-id="95d1e-132">Use this to get and set font name, size, color, and other properties.</span></span> <span data-ttu-id="95d1e-133">Только для чтения.</span><span class="sxs-lookup"><span data-stu-id="95d1e-133">Read-only.</span></span>

      <span data-ttu-id="95d1e-134">\[[Набор API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="95d1e-134">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: font
    fullName: font
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly font: Word.Font;'
      return:
        type:
          - 'word!Word.Font:class'
  - uid: 'word!Word.Paragraph#getHtml:member(1)'
    summary: |-
      <span data-ttu-id="95d1e-135">Возвращает HTML-представление объекта абзаца.</span><span class="sxs-lookup"><span data-stu-id="95d1e-135">Gets an HTML representation of the paragraph object.</span></span> <span data-ttu-id="95d1e-136">При отображении на веб-странице или в средстве просмотра HTML форматирование будет близким, но не точным, соответствующим для форматирования документа.</span><span class="sxs-lookup"><span data-stu-id="95d1e-136">When rendered in a web page or HTML viewer, the formatting will be a close, but not exact, match for of the formatting of the document.</span></span> <span data-ttu-id="95d1e-137">Этот метод не возвращает точно такой же HTML-код для одного и того же документа на различных платформах (Windows, Mac, Word для Интернета и т. д.).</span><span class="sxs-lookup"><span data-stu-id="95d1e-137">This method does not return the exact same HTML for the same document on different platforms (Windows, Mac, Word for the web, etc.).</span></span> <span data-ttu-id="95d1e-138">Если вам нужна точная точность или согласованность на различных платформах `Paragraph.getOoxml()` , используйте и преобразуйте возвращенный XML в HTML.</span><span class="sxs-lookup"><span data-stu-id="95d1e-138">If you need exact fidelity, or consistency across platforms, use `Paragraph.getOoxml()` and convert the returned XML to HTML.</span></span>

      <span data-ttu-id="95d1e-139">\[[Набор API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="95d1e-139">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: getHtml()
    fullName: getHtml()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getHtml(): OfficeExtension.ClientResult<string>;'
      return:
        type:
          - 'word!Word.Paragraph#getHtml~0:complex'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="95d1e-140">Примеры</span><span class="sxs-lookup"><span data-stu-id="95d1e-140">Examples</span></span>

          ```javascript
          // Run a batch operation against the Word object model.
          Word.run(function (context) {

              // Create a proxy object for the paragraphs collection.
              var paragraphs = context.document.body.paragraphs;

              // Queue a command to load the style property for all of the paragraphs.
              context.load(paragraphs, 'style');

              // Synchronize the document state by executing the queued commands,
              // and return a promise to indicate task completion.
              return context.sync().then(function () {

                  // Queue a a set of commands to get the HTML of the first paragraph.
                  var html = paragraphs.items[0].getHtml();

                  // Synchronize the document state by executing the queued commands,
                  // and return a promise to indicate task completion.
                  return context.sync().then(function () {
                      console.log('Paragraph HTML: ' + html.value);
                  });
              });
          })
          .catch(function (error) {
              console.log('Error: ' + JSON.stringify(error));
              if (error instanceof OfficeExtension.Error) {
                  console.log('Debug info: ' + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: 'word!Word.Paragraph#getNext:member(1)'
    summary: |-
      <span data-ttu-id="95d1e-141">Возвращает следующий абзац.</span><span class="sxs-lookup"><span data-stu-id="95d1e-141">Gets the next paragraph.</span></span> <span data-ttu-id="95d1e-142">Выдает ошибку, если абзац является последним.</span><span class="sxs-lookup"><span data-stu-id="95d1e-142">Throws an error if the paragraph is the last one.</span></span>

      <span data-ttu-id="95d1e-143">\[[Набор API: WordApi 1,3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="95d1e-143">\[ [API set: WordApi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: getNext()
    fullName: getNext()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getNext(): Word.Paragraph;'
      return:
        type:
          - 'word!Word.Paragraph:class'
        description: ''
  - uid: 'word!Word.Paragraph#getNextOrNullObject:member(1)'
    summary: |-
      <span data-ttu-id="95d1e-144">Возвращает следующий абзац.</span><span class="sxs-lookup"><span data-stu-id="95d1e-144">Gets the next paragraph.</span></span> <span data-ttu-id="95d1e-145">Возвращает нулевой объект, если абзац является последним.</span><span class="sxs-lookup"><span data-stu-id="95d1e-145">Returns a null object if the paragraph is the last one.</span></span>

      <span data-ttu-id="95d1e-146">\[[Набор API: WordApi 1,3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="95d1e-146">\[ [API set: WordApi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: getNextOrNullObject()
    fullName: getNextOrNullObject()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getNextOrNullObject(): Word.Paragraph;'
      return:
        type:
          - 'word!Word.Paragraph:class'
        description: ''
  - uid: 'word!Word.Paragraph#getOoxml:member(1)'
    summary: |-
      <span data-ttu-id="95d1e-147">Возвращает OOXML-представление объекта абзаца.</span><span class="sxs-lookup"><span data-stu-id="95d1e-147">Gets the Office Open XML (OOXML) representation of the paragraph object.</span></span>

      <span data-ttu-id="95d1e-148">\[[Набор API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="95d1e-148">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: getOoxml()
    fullName: getOoxml()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getOoxml(): OfficeExtension.ClientResult<string>;'
      return:
        type:
          - 'word!Word.Paragraph#getOoxml~0:complex'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="95d1e-149">Примеры</span><span class="sxs-lookup"><span data-stu-id="95d1e-149">Examples</span></span>

          ```javascript
          // Run a batch operation against the Word object model.
          Word.run(function (context) {

              // Create a proxy object for the paragraphs collection.
              var paragraphs = context.document.body.paragraphs;

              // Queue a command to load the style property for the top 2 paragraphs.
              context.load(paragraphs, {select: 'style', top: 2} );

              // Synchronize the document state by executing the queued commands,
              // and return a promise to indicate task completion.
              return context.sync().then(function () {

                  // Queue a a set of commands to get the OOXML of the first paragraph.
                  var ooxml = paragraphs.items[0].getOoxml();

                  // Synchronize the document state by executing the queued commands,
                  // and return a promise to indicate task completion.
                  return context.sync().then(function () {
                      console.log('Paragraph OOXML: ' + ooxml.value);
                  });
              });
          })
          .catch(function (error) {
              console.log('Error: ' + JSON.stringify(error));
              if (error instanceof OfficeExtension.Error) {
                  console.log('Debug info: ' + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: 'word!Word.Paragraph#getPrevious:member(1)'
    summary: |-
      <span data-ttu-id="95d1e-150">Возвращает предыдущий абзац.</span><span class="sxs-lookup"><span data-stu-id="95d1e-150">Gets the previous paragraph.</span></span> <span data-ttu-id="95d1e-151">Выдает ошибку, если абзац является первым.</span><span class="sxs-lookup"><span data-stu-id="95d1e-151">Throws an error if the paragraph is the first one.</span></span>

      <span data-ttu-id="95d1e-152">\[[Набор API: WordApi 1,3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="95d1e-152">\[ [API set: WordApi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: getPrevious()
    fullName: getPrevious()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getPrevious(): Word.Paragraph;'
      return:
        type:
          - 'word!Word.Paragraph:class'
        description: ''
  - uid: 'word!Word.Paragraph#getPreviousOrNullObject:member(1)'
    summary: |-
      <span data-ttu-id="95d1e-153">Возвращает предыдущий абзац.</span><span class="sxs-lookup"><span data-stu-id="95d1e-153">Gets the previous paragraph.</span></span> <span data-ttu-id="95d1e-154">Возвращает нулевой объект, если абзац является первым.</span><span class="sxs-lookup"><span data-stu-id="95d1e-154">Returns a null object if the paragraph is the first one.</span></span>

      <span data-ttu-id="95d1e-155">\[[Набор API: WordApi 1,3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="95d1e-155">\[ [API set: WordApi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: getPreviousOrNullObject()
    fullName: getPreviousOrNullObject()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getPreviousOrNullObject(): Word.Paragraph;'
      return:
        type:
          - 'word!Word.Paragraph:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="95d1e-156">Примеры</span><span class="sxs-lookup"><span data-stu-id="95d1e-156">Examples</span></span>

          ```javascript
          // Run a batch operation against the Word object model.
          Word.run(function (context) {

              // Create a proxy object for the paragraphs collection.
              var paragraphs = context.document.body.paragraphs;

              // Queue a command to load the text property for all of the paragraphs.
              context.load(paragraphs, 'text');

              // Synchronize the document state by executing the queued commands,
              // and return a promise to indicate task completion.
              return context.sync().then(function () {

                  // Queue commands to create a proxy object for the next-to-last paragraph.
                  var indexOfLastParagraph = paragraphs.items.length - 1;
                  var precedingParagraph = paragraphs.items[indexOfLastParagraph].getPreviousOrNullObject();

                  // Queue a command to load the text of the preceding paragraph.
                  context.load(precedingParagraph, 'text');

                  // Synchronize the document state by executing the queued commands,
                  // and return a promise to indicate task completion.
                  return context.sync().then(function () {
                      if (precedingParagraph.isNullObject) {
                          console.log('There are no paragraphs before the current one.');
                      } else {
                          console.log('The preceding paragraph is: ' + precedingParagraph.text);
                      }
                  });
              });
          }).catch(function (error) {
              console.log('Error: ' + JSON.stringify(error));
              if (error instanceof OfficeExtension.Error) {
                  console.log('Debug info: ' + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: 'word!Word.Paragraph#getRange:member(1)'
    summary: |-
      <span data-ttu-id="95d1e-157">Возвращает весь абзац (либо его начальную или конечную точку) в виде диапазона.</span><span class="sxs-lookup"><span data-stu-id="95d1e-157">Gets the whole paragraph, or the starting or ending point of the paragraph, as a range.</span></span>

      <span data-ttu-id="95d1e-158">\[[Набор API: WordApi 1,3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="95d1e-158">\[ [API set: WordApi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: getRange(rangeLocation)
    fullName: getRange(rangeLocation)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getRange(rangeLocation?: Word.RangeLocation): Word.Range;'
      return:
        type:
          - 'word!Word.Range:class'
        description: ''
      parameters:
        - id: rangeLocation
          description: '<span data-ttu-id="95d1e-159">Необязательно.</span><span class="sxs-lookup"><span data-stu-id="95d1e-159">Optional.</span></span> <span data-ttu-id="95d1e-160">Допустимые значения: "целое", "начало", "конец", "после" или "содержимое".</span><span class="sxs-lookup"><span data-stu-id="95d1e-160">The range location can be ''Whole'', ''Start'', ''End'', ''After'', or ''Content''.</span></span>'
          type:
            - 'word!Word.RangeLocation:enum'
  - uid: 'word!Word.Paragraph#getRange:member(2)'
    summary: |-
      <span data-ttu-id="95d1e-161">Возвращает весь абзац (либо его начальную или конечную точку) в виде диапазона.</span><span class="sxs-lookup"><span data-stu-id="95d1e-161">Gets the whole paragraph, or the starting or ending point of the paragraph, as a range.</span></span>

      <span data-ttu-id="95d1e-162">\[[Набор API: WordApi 1,3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="95d1e-162">\[ [API set: WordApi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: getRange(rangeLocationString)
    fullName: getRange(rangeLocationString)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getRange(rangeLocationString?: "Whole" | "Start" | "End" | "Before" | "After" | "Content"): Word.Range;'
      return:
        type:
          - 'word!Word.Range:class'
        description: ''
      parameters:
        - id: rangeLocationString
          description: '<span data-ttu-id="95d1e-163">Необязательно.</span><span class="sxs-lookup"><span data-stu-id="95d1e-163">Optional.</span></span> <span data-ttu-id="95d1e-164">Допустимые значения: "целое", "начало", "конец", "после" или "содержимое".</span><span class="sxs-lookup"><span data-stu-id="95d1e-164">The range location can be ''Whole'', ''Start'', ''End'', ''After'', or ''Content''.</span></span>'
          type:
            - '"Whole" | "Start" | "End" | "Before" | "After" | "Content"'
  - uid: 'word!Word.Paragraph#getTextRanges:member(1)'
    summary: |-
      <span data-ttu-id="95d1e-165">Получает текстовые диапазоны в абзаце с помощью знаков препинания и/или других конечных меток.</span><span class="sxs-lookup"><span data-stu-id="95d1e-165">Gets the text ranges in the paragraph by using punctuation marks and/or other ending marks.</span></span>

      <span data-ttu-id="95d1e-166">\[[Набор API: WordApi 1,3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="95d1e-166">\[ [API set: WordApi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: 'getTextRanges(endingMarks, trimSpacing)'
    fullName: 'getTextRanges(endingMarks, trimSpacing)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getTextRanges(endingMarks: string[], trimSpacing?: boolean): Word.RangeCollection;'
      return:
        type:
          - 'word!Word.RangeCollection:class'
        description: ''
      parameters:
        - id: endingMarks
          description: <span data-ttu-id="95d1e-167">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="95d1e-167">Required.</span></span> <span data-ttu-id="95d1e-168">Знаки пунктуации и/или другие закрывающие метки в виде массива строк.</span><span class="sxs-lookup"><span data-stu-id="95d1e-168">The punctuation marks and/or other ending marks as an array of strings.</span></span>
          type:
            - 'string[]'
        - id: trimSpacing
          description: '<span data-ttu-id="95d1e-169">Необязательно.</span><span class="sxs-lookup"><span data-stu-id="95d1e-169">Optional.</span></span> <span data-ttu-id="95d1e-170">Указывает, следует ли обрезать символы интервалов (пробелы, знаки табуляции, разрывы столбцов и конечные знаки абзаца) от начала и конца диапазонов, возвращаемых в коллекции Range.</span><span class="sxs-lookup"><span data-stu-id="95d1e-170">Indicates whether to trim spacing characters (spaces, tabs, column breaks, and paragraph end marks) from the start and end of the ranges returned in the range collection.</span></span> <span data-ttu-id="95d1e-171">Значение по умолчанию — false, которое указывает, что пробелы в начале и конце диапазонов включаются в коллекцию Range.</span><span class="sxs-lookup"><span data-stu-id="95d1e-171">Default is false which indicates that spacing characters at the start and end of the ranges are included in the range collection.</span></span>'
          type:
            - boolean
  - uid: 'word!Word.Paragraph#inlinePictures:member'
    summary: |-
      <span data-ttu-id="95d1e-172">Получает коллекцию объектов коллекцию inlinepicture в абзаце.</span><span class="sxs-lookup"><span data-stu-id="95d1e-172">Gets the collection of InlinePicture objects in the paragraph.</span></span> <span data-ttu-id="95d1e-173">Коллекция не содержит плавающие рисунки.</span><span class="sxs-lookup"><span data-stu-id="95d1e-173">The collection does not include floating images.</span></span> <span data-ttu-id="95d1e-174">Только для чтения.</span><span class="sxs-lookup"><span data-stu-id="95d1e-174">Read-only.</span></span>

      <span data-ttu-id="95d1e-175">\[[Набор API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="95d1e-175">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: inlinePictures
    fullName: inlinePictures
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly inlinePictures: Word.InlinePictureCollection;'
      return:
        type:
          - 'word!Word.InlinePictureCollection:class'
  - uid: 'word!Word.Paragraph#insertBreak:member(1)'
    summary: |-
      <span data-ttu-id="95d1e-176">Вставляет разрыв в указанном расположении в основном документе.</span><span class="sxs-lookup"><span data-stu-id="95d1e-176">Inserts a break at the specified location in the main document.</span></span>

      <span data-ttu-id="95d1e-177">\[[Набор API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="95d1e-177">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: 'insertBreak(breakType, insertLocation)'
    fullName: 'insertBreak(breakType, insertLocation)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertBreak(breakType: Word.BreakType, insertLocation: Word.InsertLocation): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a><span data-ttu-id="95d1e-178">Примеры</span><span class="sxs-lookup"><span data-stu-id="95d1e-178">Examples</span></span>

          ```typescript
          Word.run(async (context) => {
            context.document.body.paragraphs.getFirst().insertBreak(Word.BreakType.line, "After");

            await context.sync();
            console.log("success");
          });
          ```
          ```typescript
          await Word.run(async (context) => {
            context.document.body.paragraphs.getFirst().insertBreak(Word.BreakType.page, "After");

            await context.sync();
            console.log("success");
          });
          ```
      parameters:
        - id: breakType
          description: '<span data-ttu-id="95d1e-179">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="95d1e-179">Required.</span></span> <span data-ttu-id="95d1e-180">Тип разрыва, который необходимо добавить в документ.</span><span class="sxs-lookup"><span data-stu-id="95d1e-180">The break type to add to the document.</span></span>'
          type:
            - 'word!Word.BreakType:enum'
        - id: insertLocation
          description: '<span data-ttu-id="95d1e-181">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="95d1e-181">Required.</span></span> <span data-ttu-id="95d1e-182">Возможные значения: Before и After.</span><span class="sxs-lookup"><span data-stu-id="95d1e-182">The value can be ''Before'' or ''After''.</span></span>'
          type:
            - 'word!Word.InsertLocation:enum'
  - uid: 'word!Word.Paragraph#insertBreak:member(2)'
    summary: |-
      <span data-ttu-id="95d1e-183">Вставляет разрыв в указанном расположении в основном документе.</span><span class="sxs-lookup"><span data-stu-id="95d1e-183">Inserts a break at the specified location in the main document.</span></span>

      <span data-ttu-id="95d1e-184">\[[Набор API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="95d1e-184">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: 'insertBreak(breakTypeString, insertLocation)'
    fullName: 'insertBreak(breakTypeString, insertLocation)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertBreak(breakTypeString: "Page" | "Next" | "SectionNext" | "SectionContinuous" | "SectionEven" | "SectionOdd" | "Line", insertLocation: "Before" | "After" | "Start" | "End" | "Replace"): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a><span data-ttu-id="95d1e-185">Примеры</span><span class="sxs-lookup"><span data-stu-id="95d1e-185">Examples</span></span>

          ```javascript
          // Run a batch operation against the Word object model.
          Word.run(function (context) {

              // Create a proxy object for the paragraphs collection.
              var paragraphs = context.document.body.paragraphs;

              // Queue a command to load the style property for the top 2 paragraphs.
              // We never perform an empty load. We always must request a property.
              context.load(paragraphs, {select: 'style', top: 2} );

              // Synchronize the document state by executing the queued commands,
              // and return a promise to indicate task completion.
              return context.sync().then(function () {

                  // Queue a command to get the first paragraph.
                  var paragraph = paragraphs.items[0];

                  // Queue a command to insert a page break after the first paragraph.
                  paragraph.insertBreak('page', 'After');

                  // Synchronize the document state by executing the queued commands,
                  // and return a promise to indicate task completion.
                  return context.sync().then(function () {
                      console.log('Inserted a page break after the paragraph.');
                  });
              });
          })
          .catch(function (error) {
              console.log('Error: ' + JSON.stringify(error));
              if (error instanceof OfficeExtension.Error) {
                  console.log('Debug info: ' + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: breakTypeString
          description: '<span data-ttu-id="95d1e-186">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="95d1e-186">Required.</span></span> <span data-ttu-id="95d1e-187">Тип разрыва, который необходимо добавить в документ.</span><span class="sxs-lookup"><span data-stu-id="95d1e-187">The break type to add to the document.</span></span>'
          type:
            - '"Page" | "Next" | "SectionNext" | "SectionContinuous" | "SectionEven" | "SectionOdd" | "Line"'
        - id: insertLocation
          description: '<span data-ttu-id="95d1e-188">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="95d1e-188">Required.</span></span> <span data-ttu-id="95d1e-189">Возможные значения: Before и After.</span><span class="sxs-lookup"><span data-stu-id="95d1e-189">The value can be ''Before'' or ''After''.</span></span>'
          type:
            - '"Before" | "After" | "Start" | "End" | "Replace"'
  - uid: 'word!Word.Paragraph#insertContentControl:member(1)'
    summary: |-
      <span data-ttu-id="95d1e-190">Включает объект абзаца в элемент управления содержимым форматированного текста.</span><span class="sxs-lookup"><span data-stu-id="95d1e-190">Wraps the paragraph object with a rich text content control.</span></span>

      <span data-ttu-id="95d1e-191">\[[Набор API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="95d1e-191">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: insertContentControl()
    fullName: insertContentControl()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertContentControl(): Word.ContentControl;'
      return:
        type:
          - 'word!Word.ContentControl:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="95d1e-192">Примеры</span><span class="sxs-lookup"><span data-stu-id="95d1e-192">Examples</span></span>

          ```javascript
          // Run a batch operation against the Word object model.
          Word.run(function (context) {

              // Create a proxy object for the paragraphs collection.
              var paragraphs = context.document.body.paragraphs;

              // Queue a command to load the style property for the top 2 paragraphs.
              // We never perform an empty load. We always must request a property.
              context.load(paragraphs, {select: 'style', top: 2} );

              // Synchronize the document state by executing the queued commands,
              // and return a promise to indicate task completion.
              return context.sync().then(function () {

                  // Queue a command to get the first paragraph.
                  var paragraph = paragraphs.items[0];

                  // Queue a command to wrap the first paragraph in a rich text content control.
                  paragraph.insertContentControl();

                  // Synchronize the document state by executing the queued commands,
                  // and return a promise to indicate task completion.
                  return context.sync().then(function () {
                      console.log('Wrapped the first paragraph in a content control.');
                  });
              });
          })
          .catch(function (error) {
              console.log('Error: ' + JSON.stringify(error));
              if (error instanceof OfficeExtension.Error) {
                  console.log('Debug info: ' + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: 'word!Word.Paragraph#insertFileFromBase64:member(1)'
    summary: |-
      <span data-ttu-id="95d1e-193">Вставляет документ в абзац в указанном расположении.</span><span class="sxs-lookup"><span data-stu-id="95d1e-193">Inserts a document into the paragraph at the specified location.</span></span>

      <span data-ttu-id="95d1e-194">\[[Набор API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="95d1e-194">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: 'insertFileFromBase64(base64File, insertLocation)'
    fullName: 'insertFileFromBase64(base64File, insertLocation)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertFileFromBase64(base64File: string, insertLocation: Word.InsertLocation): Word.Range;'
      return:
        type:
          - 'word!Word.Range:class'
        description: ''
      parameters:
        - id: base64File
          description: <span data-ttu-id="95d1e-195">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="95d1e-195">Required.</span></span> <span data-ttu-id="95d1e-196">Содержимое docx файлов в кодировке Base64.</span><span class="sxs-lookup"><span data-stu-id="95d1e-196">The base64 encoded content of a .docx file.</span></span>
          type:
            - string
        - id: insertLocation
          description: '<span data-ttu-id="95d1e-197">Обязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="95d1e-197">Required.</span></span> <span data-ttu-id="95d1e-198">Возможные значения: Replace, Start или End.</span><span class="sxs-lookup"><span data-stu-id="95d1e-198">The value can be ''Replace'', ''Start'', or ''End''.</span></span>'
          type:
            - 'word!Word.InsertLocation:enum'
  - uid: 'word!Word.Paragraph#insertFileFromBase64:member(2)'
    summary: |-
      <span data-ttu-id="95d1e-199">Вставляет документ в абзац в указанном расположении.</span><span class="sxs-lookup"><span data-stu-id="95d1e-199">Inserts a document into the paragraph at the specified location.</span></span>

      <span data-ttu-id="95d1e-200">\[[Набор API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="95d1e-200">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: 'insertFileFromBase64(base64File, insertLocationString)'
    fullName: 'insertFileFromBase64(base64File, insertLocationString)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertFileFromBase64(base64File: string, insertLocationString: "Before" | "After" | "Start" | "End" | "Replace"): Word.Range;'
      return:
        type:
          - 'word!Word.Range:class'
        description: ''
      parameters:
        - id: base64File
          description: <span data-ttu-id="95d1e-201">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="95d1e-201">Required.</span></span> <span data-ttu-id="95d1e-202">Содержимое docx файлов в кодировке Base64.</span><span class="sxs-lookup"><span data-stu-id="95d1e-202">The base64 encoded content of a .docx file.</span></span>
          type:
            - string
        - id: insertLocationString
          description: '<span data-ttu-id="95d1e-203">Обязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="95d1e-203">Required.</span></span> <span data-ttu-id="95d1e-204">Возможные значения: Replace, Start или End.</span><span class="sxs-lookup"><span data-stu-id="95d1e-204">The value can be ''Replace'', ''Start'', or ''End''.</span></span>'
          type:
            - '"Before" | "After" | "Start" | "End" | "Replace"'
  - uid: 'word!Word.Paragraph#insertHtml:member(1)'
    summary: |-
      <span data-ttu-id="95d1e-205">Вставляет HTML в абзац в указанном расположении.</span><span class="sxs-lookup"><span data-stu-id="95d1e-205">Inserts HTML into the paragraph at the specified location.</span></span>

      <span data-ttu-id="95d1e-206">\[[Набор API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="95d1e-206">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: 'insertHtml(html, insertLocation)'
    fullName: 'insertHtml(html, insertLocation)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertHtml(html: string, insertLocation: Word.InsertLocation): Word.Range;'
      return:
        type:
          - 'word!Word.Range:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="95d1e-207">Примеры</span><span class="sxs-lookup"><span data-stu-id="95d1e-207">Examples</span></span>

          ```javascript
          // Run a batch operation against the Word object model.
          Word.run(function (context) {

              // Create a proxy object for the paragraphs collection.
              var paragraphs = context.document.body.paragraphs;

              // Queue a command to load the style property for the top 2 paragraphs.
              // We never perform an empty load. We always must request a property.
              context.load(paragraphs, {select: 'style', top: 2} );

              // Synchronize the document state by executing the queued commands,
              // and return a promise to indicate task completion.
              return context.sync().then(function () {

                  // Queue a command to get the first paragraph.
                  var paragraph = paragraphs.items[0];

                  // Queue a command to insert HTML content at the end of the first paragraph.
                  paragraph.insertHtml('<strong>Inserted HTML.</strong>', Word.InsertLocation.end);

                  // Synchronize the document state by executing the queued commands,
                  // and return a promise to indicate task completion.
                  return context.sync().then(function () {
                      console.log('Inserted HTML content at the end of the first paragraph.');
                  });
              });
          })
          .catch(function (error) {
              console.log('Error: ' + JSON.stringify(error));
              if (error instanceof OfficeExtension.Error) {
                  console.log('Debug info: ' + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: html
          description: '<span data-ttu-id="95d1e-208">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="95d1e-208">Required.</span></span> <span data-ttu-id="95d1e-209">HTML-код, который необходимо вставить в абзац.</span><span class="sxs-lookup"><span data-stu-id="95d1e-209">The HTML to be inserted in the paragraph.</span></span>'
          type:
            - string
        - id: insertLocation
          description: '<span data-ttu-id="95d1e-210">Обязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="95d1e-210">Required.</span></span> <span data-ttu-id="95d1e-211">Возможные значения: Replace, Start или End.</span><span class="sxs-lookup"><span data-stu-id="95d1e-211">The value can be ''Replace'', ''Start'', or ''End''.</span></span>'
          type:
            - 'word!Word.InsertLocation:enum'
  - uid: 'word!Word.Paragraph#insertHtml:member(2)'
    summary: |-
      <span data-ttu-id="95d1e-212">Вставляет HTML в абзац в указанном расположении.</span><span class="sxs-lookup"><span data-stu-id="95d1e-212">Inserts HTML into the paragraph at the specified location.</span></span>

      <span data-ttu-id="95d1e-213">\[[Набор API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="95d1e-213">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: 'insertHtml(html, insertLocationString)'
    fullName: 'insertHtml(html, insertLocationString)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertHtml(html: string, insertLocationString: "Before" | "After" | "Start" | "End" | "Replace"): Word.Range;'
      return:
        type:
          - 'word!Word.Range:class'
        description: ''
      parameters:
        - id: html
          description: '<span data-ttu-id="95d1e-214">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="95d1e-214">Required.</span></span> <span data-ttu-id="95d1e-215">HTML-код, который необходимо вставить в абзац.</span><span class="sxs-lookup"><span data-stu-id="95d1e-215">The HTML to be inserted in the paragraph.</span></span>'
          type:
            - string
        - id: insertLocationString
          description: '<span data-ttu-id="95d1e-216">Обязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="95d1e-216">Required.</span></span> <span data-ttu-id="95d1e-217">Возможные значения: Replace, Start или End.</span><span class="sxs-lookup"><span data-stu-id="95d1e-217">The value can be ''Replace'', ''Start'', or ''End''.</span></span>'
          type:
            - '"Before" | "After" | "Start" | "End" | "Replace"'
  - uid: 'word!Word.Paragraph#insertInlinePictureFromBase64:member(1)'
    summary: |-
      <span data-ttu-id="95d1e-218">Вставляет рисунок в абзац в указанном расположении.</span><span class="sxs-lookup"><span data-stu-id="95d1e-218">Inserts a picture into the paragraph at the specified location.</span></span>

      <span data-ttu-id="95d1e-219">\[[Набор API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="95d1e-219">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: 'insertInlinePictureFromBase64(base64EncodedImage, insertLocation)'
    fullName: 'insertInlinePictureFromBase64(base64EncodedImage, insertLocation)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertInlinePictureFromBase64(base64EncodedImage: string, insertLocation: Word.InsertLocation): Word.InlinePicture;'
      return:
        type:
          - 'word!Word.InlinePicture:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="95d1e-220">Примеры</span><span class="sxs-lookup"><span data-stu-id="95d1e-220">Examples</span></span>

          ```javascript
          // Run a batch operation against the Word object model.
          Word.run(function (context) {

              // Create a proxy object for the paragraphs collection.
              var paragraphs = context.document.body.paragraphs;

              // Queue a command to load the style property for all of the paragraphs.
              context.load(paragraphs, 'style');

              // Synchronize the document state by executing the queued commands,
              // and return a promise to indicate task completion.
              return context.sync().then(function () {

                  // Queue a command to get the first paragraph.
                  var paragraph = paragraphs.items[0];

                  var b64encodedImg = "iVBORw0KGgoAAAANSUhEUgAAAB4AAAANCAIAAAAxEEnAAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAACFSURBVDhPtY1BEoQwDMP6/0+XgIMTBAeYoTqso9Rkx1zG+tNj1H94jgGzeNSjteO5vtQQuG2seO0av8LzGbe3anzRoJ4ybm/VeKEerAEbAUpW4aWQCmrGFWykRzGBCnYy2ha3oAIq2MloW9yCCqhgJ6NtcQsqoIKdjLbFLaiACnYyf2fODbrjZcXfr2F4AAAAAElFTkSuQmCC";

                  // Queue a command to insert a base64 encoded image at the beginning of the first paragraph.
                  paragraph.insertInlinePictureFromBase64(b64encodedImg, Word.InsertLocation.start);

                  // Synchronize the document state by executing the queued commands,
                  // and return a promise to indicate task completion.
                  return context.sync().then(function () {
                      console.log('Added an image to the first paragraph.');
                  });
              });
          })
          .catch(function (error) {
              console.log('Error: ' + JSON.stringify(error));
              if (error instanceof OfficeExtension.Error) {
                  console.log('Debug info: ' + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: base64EncodedImage
          description: <span data-ttu-id="95d1e-221">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="95d1e-221">Required.</span></span> <span data-ttu-id="95d1e-222">Вставленное изображение в кодировке Base64.</span><span class="sxs-lookup"><span data-stu-id="95d1e-222">The base64 encoded image to be inserted.</span></span>
          type:
            - string
        - id: insertLocation
          description: '<span data-ttu-id="95d1e-223">Обязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="95d1e-223">Required.</span></span> <span data-ttu-id="95d1e-224">Возможные значения: Replace, Start или End.</span><span class="sxs-lookup"><span data-stu-id="95d1e-224">The value can be ''Replace'', ''Start'', or ''End''.</span></span>'
          type:
            - 'word!Word.InsertLocation:enum'
  - uid: 'word!Word.Paragraph#insertInlinePictureFromBase64:member(2)'
    summary: |-
      <span data-ttu-id="95d1e-225">Вставляет рисунок в абзац в указанном расположении.</span><span class="sxs-lookup"><span data-stu-id="95d1e-225">Inserts a picture into the paragraph at the specified location.</span></span>

      <span data-ttu-id="95d1e-226">\[[Набор API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="95d1e-226">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: 'insertInlinePictureFromBase64(base64EncodedImage, insertLocationString)'
    fullName: 'insertInlinePictureFromBase64(base64EncodedImage, insertLocationString)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertInlinePictureFromBase64(base64EncodedImage: string, insertLocationString: "Before" | "After" | "Start" | "End" | "Replace"): Word.InlinePicture;'
      return:
        type:
          - 'word!Word.InlinePicture:class'
        description: ''
      parameters:
        - id: base64EncodedImage
          description: <span data-ttu-id="95d1e-227">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="95d1e-227">Required.</span></span> <span data-ttu-id="95d1e-228">Вставленное изображение в кодировке Base64.</span><span class="sxs-lookup"><span data-stu-id="95d1e-228">The base64 encoded image to be inserted.</span></span>
          type:
            - string
        - id: insertLocationString
          description: '<span data-ttu-id="95d1e-229">Обязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="95d1e-229">Required.</span></span> <span data-ttu-id="95d1e-230">Возможные значения: Replace, Start или End.</span><span class="sxs-lookup"><span data-stu-id="95d1e-230">The value can be ''Replace'', ''Start'', or ''End''.</span></span>'
          type:
            - '"Before" | "After" | "Start" | "End" | "Replace"'
  - uid: 'word!Word.Paragraph#insertOoxml:member(1)'
    summary: |-
      <span data-ttu-id="95d1e-231">Вставляет OOXML в абзац в указанном расположении.</span><span class="sxs-lookup"><span data-stu-id="95d1e-231">Inserts OOXML into the paragraph at the specified location.</span></span>

      <span data-ttu-id="95d1e-232">\[[Набор API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="95d1e-232">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: 'insertOoxml(ooxml, insertLocation)'
    fullName: 'insertOoxml(ooxml, insertLocation)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertOoxml(ooxml: string, insertLocation: Word.InsertLocation): Word.Range;'
      return:
        type:
          - 'word!Word.Range:class'
        description: ''
      parameters:
        - id: ooxml
          description: '<span data-ttu-id="95d1e-233">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="95d1e-233">Required.</span></span> <span data-ttu-id="95d1e-234">OOXML, который необходимо вставить в абзац.</span><span class="sxs-lookup"><span data-stu-id="95d1e-234">The OOXML to be inserted in the paragraph.</span></span>'
          type:
            - string
        - id: insertLocation
          description: '<span data-ttu-id="95d1e-235">Обязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="95d1e-235">Required.</span></span> <span data-ttu-id="95d1e-236">Возможные значения: Replace, Start или End.</span><span class="sxs-lookup"><span data-stu-id="95d1e-236">The value can be ''Replace'', ''Start'', or ''End''.</span></span>'
          type:
            - 'word!Word.InsertLocation:enum'
  - uid: 'word!Word.Paragraph#insertOoxml:member(2)'
    summary: |-
      <span data-ttu-id="95d1e-237">Вставляет OOXML в абзац в указанном расположении.</span><span class="sxs-lookup"><span data-stu-id="95d1e-237">Inserts OOXML into the paragraph at the specified location.</span></span>

      <span data-ttu-id="95d1e-238">\[[Набор API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="95d1e-238">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: 'insertOoxml(ooxml, insertLocationString)'
    fullName: 'insertOoxml(ooxml, insertLocationString)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertOoxml(ooxml: string, insertLocationString: "Before" | "After" | "Start" | "End" | "Replace"): Word.Range;'
      return:
        type:
          - 'word!Word.Range:class'
        description: ''
      parameters:
        - id: ooxml
          description: '<span data-ttu-id="95d1e-239">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="95d1e-239">Required.</span></span> <span data-ttu-id="95d1e-240">OOXML, который необходимо вставить в абзац.</span><span class="sxs-lookup"><span data-stu-id="95d1e-240">The OOXML to be inserted in the paragraph.</span></span>'
          type:
            - string
        - id: insertLocationString
          description: '<span data-ttu-id="95d1e-241">Обязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="95d1e-241">Required.</span></span> <span data-ttu-id="95d1e-242">Возможные значения: Replace, Start или End.</span><span class="sxs-lookup"><span data-stu-id="95d1e-242">The value can be ''Replace'', ''Start'', or ''End''.</span></span>'
          type:
            - '"Before" | "After" | "Start" | "End" | "Replace"'
  - uid: 'word!Word.Paragraph#insertParagraph:member(1)'
    summary: |-
      <span data-ttu-id="95d1e-243">Вставляет абзац в указанном расположении.</span><span class="sxs-lookup"><span data-stu-id="95d1e-243">Inserts a paragraph at the specified location.</span></span>

      <span data-ttu-id="95d1e-244">\[[Набор API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="95d1e-244">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: 'insertParagraph(paragraphText, insertLocation)'
    fullName: 'insertParagraph(paragraphText, insertLocation)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertParagraph(paragraphText: string, insertLocation: Word.InsertLocation): Word.Paragraph;'
      return:
        type:
          - 'word!Word.Paragraph:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="95d1e-245">Примеры</span><span class="sxs-lookup"><span data-stu-id="95d1e-245">Examples</span></span>

          ```javascript
          // Run a batch operation against the Word object model.
          Word.run(function (context) {

              // Create a proxy object for the paragraphs collection.
              var paragraphs = context.document.body.paragraphs;

              // Queue a command to load the style property for the top 2 paragraphs.
              // We never perform an empty load. We always must request a property.
              context.load(paragraphs, {select: 'style', top: 2} );

              // Synchronize the document state by executing the queued commands,
              // and return a promise to indicate task completion.
              return context.sync().then(function () {

                  // Queue a command to get the first paragraph.
                  var paragraph = paragraphs.items[0];

                  // Queue a command to insert the paragraph after the current paragraph.
                  paragraph.insertParagraph('Content of a new paragraph', Word.InsertLocation.after);

                  // Synchronize the document state by executing the queued commands,
                  // and return a promise to indicate task completion.
                  return context.sync().then(function () {
                      console.log('Inserted a new paragraph at the end of the first paragraph.');
                  });
              });
          })
          .catch(function (error) {
              console.log('Error: ' + JSON.stringify(error));
              if (error instanceof OfficeExtension.Error) {
                  console.log('Debug info: ' + JSON.stringify(error.debugInfo));
              }
          });
          ```
          ```typescript
          await Word.run(async (context) => {
            // Second sentence, let's insert it as a paragraph after the previously inserted one.
            let secondSentence = context.document.body.insertParagraph(
              "This is the first text with a custom style.",
              "End"
            );
            secondSentence.font.set({
              bold: false,
              italic: true,
              name: "Berlin Sans FB",
              color: "blue",
              size: 30
            });

            await context.sync();
          });
          ```
      parameters:
        - id: paragraphText
          description: '<span data-ttu-id="95d1e-246">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="95d1e-246">Required.</span></span> <span data-ttu-id="95d1e-247">Текст абзаца, который необходимо вставить.</span><span class="sxs-lookup"><span data-stu-id="95d1e-247">The paragraph text to be inserted.</span></span>'
          type:
            - string
        - id: insertLocation
          description: '<span data-ttu-id="95d1e-248">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="95d1e-248">Required.</span></span> <span data-ttu-id="95d1e-249">Возможные значения: Before и After.</span><span class="sxs-lookup"><span data-stu-id="95d1e-249">The value can be ''Before'' or ''After''.</span></span>'
          type:
            - 'word!Word.InsertLocation:enum'
  - uid: 'word!Word.Paragraph#insertParagraph:member(2)'
    summary: |-
      <span data-ttu-id="95d1e-250">Вставляет абзац в указанном расположении.</span><span class="sxs-lookup"><span data-stu-id="95d1e-250">Inserts a paragraph at the specified location.</span></span>

      <span data-ttu-id="95d1e-251">\[[Набор API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="95d1e-251">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: 'insertParagraph(paragraphText, insertLocationString)'
    fullName: 'insertParagraph(paragraphText, insertLocationString)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertParagraph(paragraphText: string, insertLocationString: "Before" | "After" | "Start" | "End" | "Replace"): Word.Paragraph;'
      return:
        type:
          - 'word!Word.Paragraph:class'
        description: ''
      parameters:
        - id: paragraphText
          description: '<span data-ttu-id="95d1e-252">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="95d1e-252">Required.</span></span> <span data-ttu-id="95d1e-253">Текст абзаца, который необходимо вставить.</span><span class="sxs-lookup"><span data-stu-id="95d1e-253">The paragraph text to be inserted.</span></span>'
          type:
            - string
        - id: insertLocationString
          description: '<span data-ttu-id="95d1e-254">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="95d1e-254">Required.</span></span> <span data-ttu-id="95d1e-255">Возможные значения: Before и After.</span><span class="sxs-lookup"><span data-stu-id="95d1e-255">The value can be ''Before'' or ''After''.</span></span>'
          type:
            - '"Before" | "After" | "Start" | "End" | "Replace"'
  - uid: 'word!Word.Paragraph#insertTable:member(1)'
    summary: |-
      <span data-ttu-id="95d1e-256">Вставляет таблицу с указанным количеством строк и столбцов.</span><span class="sxs-lookup"><span data-stu-id="95d1e-256">Inserts a table with the specified number of rows and columns.</span></span>

      <span data-ttu-id="95d1e-257">\[[Набор API: WordApi 1,3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="95d1e-257">\[ [API set: WordApi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: 'insertTable(rowCount, columnCount, insertLocation, values)'
    fullName: 'insertTable(rowCount, columnCount, insertLocation, values)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertTable(rowCount: number, columnCount: number, insertLocation: Word.InsertLocation, values?: string[][]): Word.Table;'
      return:
        type:
          - 'word!Word.Table:class'
        description: ''
      parameters:
        - id: rowCount
          description: <span data-ttu-id="95d1e-258">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="95d1e-258">Required.</span></span> <span data-ttu-id="95d1e-259">Количество строк в таблице.</span><span class="sxs-lookup"><span data-stu-id="95d1e-259">The number of rows in the table.</span></span>
          type:
            - number
        - id: columnCount
          description: <span data-ttu-id="95d1e-260">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="95d1e-260">Required.</span></span> <span data-ttu-id="95d1e-261">Количество столбцов в таблице.</span><span class="sxs-lookup"><span data-stu-id="95d1e-261">The number of columns in the table.</span></span>
          type:
            - number
        - id: insertLocation
          description: '<span data-ttu-id="95d1e-262">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="95d1e-262">Required.</span></span> <span data-ttu-id="95d1e-263">Возможные значения: Before и After.</span><span class="sxs-lookup"><span data-stu-id="95d1e-263">The value can be ''Before'' or ''After''.</span></span>'
          type:
            - 'word!Word.InsertLocation:enum'
        - id: values
          description: '<span data-ttu-id="95d1e-264">Необязательный двухмерный массив.</span><span class="sxs-lookup"><span data-stu-id="95d1e-264">Optional 2D array.</span></span> <span data-ttu-id="95d1e-265">Ячейки заполняются, если в массиве указаны соответствующие строки.</span><span class="sxs-lookup"><span data-stu-id="95d1e-265">Cells are filled if the corresponding strings are specified in the array.</span></span>'
          type:
            - 'string[][]'
  - uid: 'word!Word.Paragraph#insertTable:member(2)'
    summary: |-
      <span data-ttu-id="95d1e-266">Вставляет таблицу с указанным количеством строк и столбцов.</span><span class="sxs-lookup"><span data-stu-id="95d1e-266">Inserts a table with the specified number of rows and columns.</span></span>

      <span data-ttu-id="95d1e-267">\[[Набор API: WordApi 1,3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="95d1e-267">\[ [API set: WordApi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: 'insertTable(rowCount, columnCount, insertLocationString, values)'
    fullName: 'insertTable(rowCount, columnCount, insertLocationString, values)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertTable(rowCount: number, columnCount: number, insertLocationString: "Before" | "After" | "Start" | "End" | "Replace", values?: string[][]): Word.Table;'
      return:
        type:
          - 'word!Word.Table:class'
        description: ''
      parameters:
        - id: rowCount
          description: <span data-ttu-id="95d1e-268">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="95d1e-268">Required.</span></span> <span data-ttu-id="95d1e-269">Количество строк в таблице.</span><span class="sxs-lookup"><span data-stu-id="95d1e-269">The number of rows in the table.</span></span>
          type:
            - number
        - id: columnCount
          description: <span data-ttu-id="95d1e-270">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="95d1e-270">Required.</span></span> <span data-ttu-id="95d1e-271">Количество столбцов в таблице.</span><span class="sxs-lookup"><span data-stu-id="95d1e-271">The number of columns in the table.</span></span>
          type:
            - number
        - id: insertLocationString
          description: '<span data-ttu-id="95d1e-272">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="95d1e-272">Required.</span></span> <span data-ttu-id="95d1e-273">Возможные значения: Before и After.</span><span class="sxs-lookup"><span data-stu-id="95d1e-273">The value can be ''Before'' or ''After''.</span></span>'
          type:
            - '"Before" | "After" | "Start" | "End" | "Replace"'
        - id: values
          description: '<span data-ttu-id="95d1e-274">Необязательный двухмерный массив.</span><span class="sxs-lookup"><span data-stu-id="95d1e-274">Optional 2D array.</span></span> <span data-ttu-id="95d1e-275">Ячейки заполняются, если в массиве указаны соответствующие строки.</span><span class="sxs-lookup"><span data-stu-id="95d1e-275">Cells are filled if the corresponding strings are specified in the array.</span></span>'
          type:
            - 'string[][]'
  - uid: 'word!Word.Paragraph#insertText:member(1)'
    summary: |-
      <span data-ttu-id="95d1e-276">Вставляет текст в абзац в указанном расположении.</span><span class="sxs-lookup"><span data-stu-id="95d1e-276">Inserts text into the paragraph at the specified location.</span></span>

      <span data-ttu-id="95d1e-277">\[[Набор API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="95d1e-277">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: 'insertText(text, insertLocation)'
    fullName: 'insertText(text, insertLocation)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertText(text: string, insertLocation: Word.InsertLocation): Word.Range;'
      return:
        type:
          - 'word!Word.Range:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="95d1e-278">Примеры</span><span class="sxs-lookup"><span data-stu-id="95d1e-278">Examples</span></span>

          ```javascript
          // Run a batch operation against the Word object model.
          Word.run(function (context) {

              // Create a proxy object for the paragraphs collection.
              var paragraphs = context.document.body.paragraphs;

              // Queue a command to load the style property for the top 2 paragraphs.
              // We never perform an empty load. We always must request a property.
              context.load(paragraphs, {select: 'style', top: 2} );

              // Synchronize the document state by executing the queued commands,
              // and return a promise to indicate task completion.
              return context.sync().then(function () {

                  // Queue a command to get the first paragraph.
                  var paragraph = paragraphs.items[0];

                  // Queue a command to insert text into the end of the paragraph.
                  paragraph.insertText('New text inserted into the paragraph.', Word.InsertLocation.end);

                  // Synchronize the document state by executing the queued commands,
                  // and return a promise to indicate task completion.
                  return context.sync().then(function () {
                      console.log('Inserted text at the end of the first paragraph.');
                  });
              });
          })
          .catch(function (error) {
              console.log('Error: ' + JSON.stringify(error));
              if (error instanceof OfficeExtension.Error) {
                  console.log('Debug info: ' + JSON.stringify(error.debugInfo));
              }
          });
          ```
          ```typescript
          await Word.run(async (context) => {
            // Replace the last paragraph.
            let range = context.document.body.paragraphs.getLast().insertText("Just replaced the last paragraph!", "Replace");
            range.font.highlightColor = "black";
            range.font.color = "white";

            await context.sync();
          });
          ```
      parameters:
        - id: text
          description: '<span data-ttu-id="95d1e-279">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="95d1e-279">Required.</span></span> <span data-ttu-id="95d1e-280">Текст, который необходимо вставить.</span><span class="sxs-lookup"><span data-stu-id="95d1e-280">Text to be inserted.</span></span>'
          type:
            - string
        - id: insertLocation
          description: '<span data-ttu-id="95d1e-281">Обязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="95d1e-281">Required.</span></span> <span data-ttu-id="95d1e-282">Возможные значения: Replace, Start или End.</span><span class="sxs-lookup"><span data-stu-id="95d1e-282">The value can be ''Replace'', ''Start'', or ''End''.</span></span>'
          type:
            - 'word!Word.InsertLocation:enum'
  - uid: 'word!Word.Paragraph#insertText:member(2)'
    summary: |-
      <span data-ttu-id="95d1e-283">Вставляет текст в абзац в указанном расположении.</span><span class="sxs-lookup"><span data-stu-id="95d1e-283">Inserts text into the paragraph at the specified location.</span></span>

      <span data-ttu-id="95d1e-284">\[[Набор API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="95d1e-284">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: 'insertText(text, insertLocationString)'
    fullName: 'insertText(text, insertLocationString)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertText(text: string, insertLocationString: "Before" | "After" | "Start" | "End" | "Replace"): Word.Range;'
      return:
        type:
          - 'word!Word.Range:class'
        description: ''
      parameters:
        - id: text
          description: '<span data-ttu-id="95d1e-285">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="95d1e-285">Required.</span></span> <span data-ttu-id="95d1e-286">Текст, который необходимо вставить.</span><span class="sxs-lookup"><span data-stu-id="95d1e-286">Text to be inserted.</span></span>'
          type:
            - string
        - id: insertLocationString
          description: '<span data-ttu-id="95d1e-287">Обязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="95d1e-287">Required.</span></span> <span data-ttu-id="95d1e-288">Возможные значения: Replace, Start или End.</span><span class="sxs-lookup"><span data-stu-id="95d1e-288">The value can be ''Replace'', ''Start'', or ''End''.</span></span>'
          type:
            - '"Before" | "After" | "Start" | "End" | "Replace"'
  - uid: 'word!Word.Paragraph#isLastParagraph:member'
    summary: |-
      <span data-ttu-id="95d1e-289">Указывает, что абзац является последним в родительском тексте.</span><span class="sxs-lookup"><span data-stu-id="95d1e-289">Indicates the paragraph is the last one inside its parent body.</span></span> <span data-ttu-id="95d1e-290">Только для чтения.</span><span class="sxs-lookup"><span data-stu-id="95d1e-290">Read-only.</span></span>

      <span data-ttu-id="95d1e-291">\[[Набор API: WordApi 1,3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="95d1e-291">\[ [API set: WordApi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: isLastParagraph
    fullName: isLastParagraph
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly isLastParagraph: boolean;'
      return:
        type:
          - boolean
  - uid: 'word!Word.Paragraph#isListItem:member'
    summary: |-
      <span data-ttu-id="95d1e-292">Проверяет, является ли абзац элементом списка.</span><span class="sxs-lookup"><span data-stu-id="95d1e-292">Checks whether the paragraph is a list item.</span></span> <span data-ttu-id="95d1e-293">Только для чтения.</span><span class="sxs-lookup"><span data-stu-id="95d1e-293">Read-only.</span></span>

      <span data-ttu-id="95d1e-294">\[[Набор API: WordApi 1,3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="95d1e-294">\[ [API set: WordApi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: isListItem
    fullName: isListItem
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly isListItem: boolean;'
      return:
        type:
          - boolean
  - uid: 'word!Word.Paragraph#leftIndent:member'
    summary: |-
      <span data-ttu-id="95d1e-295">Возвращает или задает значение отступа слева для абзаца (в пунктах).</span><span class="sxs-lookup"><span data-stu-id="95d1e-295">Gets or sets the left indent value, in points, for the paragraph.</span></span>

      <span data-ttu-id="95d1e-296">\[[Набор API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="95d1e-296">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: leftIndent
    fullName: leftIndent
    langs:
      - typeScript
    type: property
    syntax:
      content: 'leftIndent: number;'
      return:
        type:
          - number
        description: |-


          #### <a name="examples"></a><span data-ttu-id="95d1e-297">Примеры</span><span class="sxs-lookup"><span data-stu-id="95d1e-297">Examples</span></span>

          ```typescript
          await Word.run(async (context) => {
            // Indents the first paragraph.
            context.document.body.paragraphs.getFirst().leftIndent = 75; //units = points

            return context.sync();
          });
          ```
  - uid: 'word!Word.Paragraph#lineSpacing:member'
    summary: |-
      <span data-ttu-id="95d1e-298">Возвращает или задает междустрочный интервал для указанного абзаца (в пунктах).</span><span class="sxs-lookup"><span data-stu-id="95d1e-298">Gets or sets the line spacing, in points, for the specified paragraph.</span></span> <span data-ttu-id="95d1e-299">В пользовательском интерфейсе Word это значение делится на 12.</span><span class="sxs-lookup"><span data-stu-id="95d1e-299">In the Word UI, this value is divided by 12.</span></span>

      <span data-ttu-id="95d1e-300">\[[Набор API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="95d1e-300">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: lineSpacing
    fullName: lineSpacing
    langs:
      - typeScript
    type: property
    syntax:
      content: 'lineSpacing: number;'
      return:
        type:
          - number
        description: |-


          #### <a name="examples"></a><span data-ttu-id="95d1e-301">Примеры</span><span class="sxs-lookup"><span data-stu-id="95d1e-301">Examples</span></span>

          ```typescript
          await Word.run(async (context) => {
            // Adjusts line spacing.
            context.document.body.paragraphs.getFirst().lineSpacing = 20;

            await context.sync();
          });
          ```
  - uid: 'word!Word.Paragraph#lineUnitAfter:member'
    summary: |-
      <span data-ttu-id="95d1e-302">Возвращает или задает расстояние от абзаца до абзаца (в линиях сетки).</span><span class="sxs-lookup"><span data-stu-id="95d1e-302">Gets or sets the amount of spacing, in grid lines, after the paragraph.</span></span>

      <span data-ttu-id="95d1e-303">\[[Набор API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="95d1e-303">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: lineUnitAfter
    fullName: lineUnitAfter
    langs:
      - typeScript
    type: property
    syntax:
      content: 'lineUnitAfter: number;'
      return:
        type:
          - number
  - uid: 'word!Word.Paragraph#lineUnitBefore:member'
    summary: |-
      <span data-ttu-id="95d1e-304">Возвращает или устанавливает междустрочный интервал до абзаца (в линиях сетки).</span><span class="sxs-lookup"><span data-stu-id="95d1e-304">Gets or sets the amount of spacing, in grid lines, before the paragraph.</span></span>

      <span data-ttu-id="95d1e-305">\[[Набор API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="95d1e-305">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: lineUnitBefore
    fullName: lineUnitBefore
    langs:
      - typeScript
    type: property
    syntax:
      content: 'lineUnitBefore: number;'
      return:
        type:
          - number
  - uid: 'word!Word.Paragraph#list:member'
    summary: |-
      <span data-ttu-id="95d1e-306">Возвращает объект List, к которому относится абзац.</span><span class="sxs-lookup"><span data-stu-id="95d1e-306">Gets the List to which this paragraph belongs.</span></span> <span data-ttu-id="95d1e-307">Выдает ошибку, если абзац отсутствует в списке.</span><span class="sxs-lookup"><span data-stu-id="95d1e-307">Throws an error if the paragraph is not in a list.</span></span> <span data-ttu-id="95d1e-308">Только для чтения.</span><span class="sxs-lookup"><span data-stu-id="95d1e-308">Read-only.</span></span>

      <span data-ttu-id="95d1e-309">\[[Набор API: WordApi 1,3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="95d1e-309">\[ [API set: WordApi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: list
    fullName: list
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly list: Word.List;'
      return:
        type:
          - 'word!Word.List:class'
  - uid: 'word!Word.Paragraph#listItem:member'
    summary: |-
      <span data-ttu-id="95d1e-310">Возвращает объект ListItem для абзаца.</span><span class="sxs-lookup"><span data-stu-id="95d1e-310">Gets the ListItem for the paragraph.</span></span> <span data-ttu-id="95d1e-311">Выдает ошибку, если абзац не является частью списка.</span><span class="sxs-lookup"><span data-stu-id="95d1e-311">Throws an error if the paragraph is not part of a list.</span></span> <span data-ttu-id="95d1e-312">Только для чтения.</span><span class="sxs-lookup"><span data-stu-id="95d1e-312">Read-only.</span></span>

      <span data-ttu-id="95d1e-313">\[[Набор API: WordApi 1,3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="95d1e-313">\[ [API set: WordApi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: listItem
    fullName: listItem
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly listItem: Word.ListItem;'
      return:
        type:
          - 'word!Word.ListItem:class'
  - uid: 'word!Word.Paragraph#listItemOrNullObject:member'
    summary: |-
      <span data-ttu-id="95d1e-314">Возвращает объект ListItem для абзаца.</span><span class="sxs-lookup"><span data-stu-id="95d1e-314">Gets the ListItem for the paragraph.</span></span> <span data-ttu-id="95d1e-315">Если абзац не является частью списка, возвращается пустой объект.</span><span class="sxs-lookup"><span data-stu-id="95d1e-315">Returns a null object if the paragraph is not part of a list.</span></span> <span data-ttu-id="95d1e-316">Только для чтения.</span><span class="sxs-lookup"><span data-stu-id="95d1e-316">Read-only.</span></span>

      <span data-ttu-id="95d1e-317">\[[Набор API: WordApi 1,3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="95d1e-317">\[ [API set: WordApi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: listItemOrNullObject
    fullName: listItemOrNullObject
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly listItemOrNullObject: Word.ListItem;'
      return:
        type:
          - 'word!Word.ListItem:class'
  - uid: 'word!Word.Paragraph#listOrNullObject:member'
    summary: |-
      <span data-ttu-id="95d1e-318">Возвращает объект List, к которому относится абзац.</span><span class="sxs-lookup"><span data-stu-id="95d1e-318">Gets the List to which this paragraph belongs.</span></span> <span data-ttu-id="95d1e-319">Если абзац не находится в списке, возвращается пустой объект.</span><span class="sxs-lookup"><span data-stu-id="95d1e-319">Returns a null object if the paragraph is not in a list.</span></span> <span data-ttu-id="95d1e-320">Только для чтения.</span><span class="sxs-lookup"><span data-stu-id="95d1e-320">Read-only.</span></span>

      <span data-ttu-id="95d1e-321">\[[Набор API: WordApi 1,3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="95d1e-321">\[ [API set: WordApi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: listOrNullObject
    fullName: listOrNullObject
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly listOrNullObject: Word.List;'
      return:
        type:
          - 'word!Word.List:class'
  - uid: 'word!Word.Paragraph#load:member(1)'
    summary: <span data-ttu-id="95d1e-322">Добавляет в очередь команду для загрузки указанных свойств объекта.</span><span class="sxs-lookup"><span data-stu-id="95d1e-322">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="95d1e-323">Перед чтением свойств необходимо вызвать метод context.sync().</span><span class="sxs-lookup"><span data-stu-id="95d1e-323">You must call "context.sync()" before reading the properties.</span></span>
    remarks: |-
      <span data-ttu-id="95d1e-324">В дополнение к этой подписи этот метод имеет следующие подписи:</span><span class="sxs-lookup"><span data-stu-id="95d1e-324">In addition to this signature, this method has the following signatures:</span></span>

      <span data-ttu-id="95d1e-325">`load(option?: string | string[]): Word.Paragraph`-WHERE — это строка с разделителями-запятыми или массив строк, указывающий свойства для загрузки.</span><span class="sxs-lookup"><span data-stu-id="95d1e-325">`load(option?: string | string[]): Word.Paragraph` - Where option is a comma-delimited string or an array of strings that specify the properties to load.</span></span>

      <span data-ttu-id="95d1e-326">`load(option?: { select?: string; expand?: string; }): Word.Paragraph`-WHERE. Select — это строка с разделителями-запятыми, указывающая свойства для загрузки и параметры. Expand — это строка с разделителями-запятыми, указывающая свойства навигации для загрузки.</span><span class="sxs-lookup"><span data-stu-id="95d1e-326">`load(option?: { select?: string; expand?: string; }): Word.Paragraph` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.</span></span>

      <span data-ttu-id="95d1e-327">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Word.Paragraph`— Доступно только для типов коллекций.</span><span class="sxs-lookup"><span data-stu-id="95d1e-327">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Word.Paragraph` - Only available on collection types.</span></span> <span data-ttu-id="95d1e-328">Он аналогичен предыдущей подписи.</span><span class="sxs-lookup"><span data-stu-id="95d1e-328">It is similar to the preceding signature.</span></span> <span data-ttu-id="95d1e-329">Option. Top указывает максимальное количество элементов коллекции, которые можно включить в результат.</span><span class="sxs-lookup"><span data-stu-id="95d1e-329">Option.top specifies the maximum number of collection items that can be included in the result.</span></span> <span data-ttu-id="95d1e-330">Option. skip указывает количество элементов, которые будут пропущены и не включены в результат.</span><span class="sxs-lookup"><span data-stu-id="95d1e-330">Option.skip specifies the number of items that are to be skipped and not included in the result.</span></span> <span data-ttu-id="95d1e-331">Если указан параметр Option. Top, результирующий набор начнется после пропуска указанного числа элементов.</span><span class="sxs-lookup"><span data-stu-id="95d1e-331">If option.top is specified, the result set will start after skipping the specified number of items.</span></span>
    name: load(option)
    fullName: load(option)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(option?: Word.Interfaces.ParagraphLoadOptions): Word.Paragraph;'
      return:
        type:
          - 'word!Word.Paragraph:class'
        description: ''
      parameters:
        - id: option
          description: ''
          type:
            - 'word!Word.Interfaces.ParagraphLoadOptions:interface'
  - uid: 'word!Word.Paragraph#load:member(2)'
    summary: <span data-ttu-id="95d1e-332">Добавляет в очередь команду для загрузки указанных свойств объекта.</span><span class="sxs-lookup"><span data-stu-id="95d1e-332">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="95d1e-333">Перед чтением свойств `context.sync()` необходимо вызвать метод.</span><span class="sxs-lookup"><span data-stu-id="95d1e-333">You must call `context.sync()` before reading the properties.</span></span>
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): Word.Paragraph;'
      return:
        type:
          - 'word!Word.Paragraph:class'
        description: ''
      parameters:
        - id: propertyNames
          description: '<span data-ttu-id="95d1e-334">Строка, разделенная запятыми, или массив строк, указывающий свойства для загрузки.</span><span class="sxs-lookup"><span data-stu-id="95d1e-334">A comma-delimited string or an array of strings that specify the properties to load.</span></span>'
          type:
            - 'string | string[]'
  - uid: 'word!Word.Paragraph#load:member(3)'
    summary: <span data-ttu-id="95d1e-335">Добавляет в очередь команду для загрузки указанных свойств объекта.</span><span class="sxs-lookup"><span data-stu-id="95d1e-335">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="95d1e-336">Перед чтением свойств `context.sync()` необходимо вызвать метод.</span><span class="sxs-lookup"><span data-stu-id="95d1e-336">You must call `context.sync()` before reading the properties.</span></span>
    name: load(propertyNamesAndPaths)
    fullName: load(propertyNamesAndPaths)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNamesAndPaths?: { select?: string; expand?: string; }): Word.Paragraph;'
      return:
        type:
          - 'word!Word.Paragraph:class'
        description: ''
      parameters:
        - id: propertyNamesAndPaths
          description: '<span data-ttu-id="95d1e-337">Где Пропертинамесандпасс. Select — это строка с разделителями-запятыми, задающая свойства для загрузки, и Пропертинамесандпасс. Expand — это строка с разделителями-запятыми, указывающая свойства навигации для загрузки.</span><span class="sxs-lookup"><span data-stu-id="95d1e-337">Where propertyNamesAndPaths.select is a comma-delimited string that specifies the properties to load, and propertyNamesAndPaths.expand is a comma-delimited string that specifies the navigation properties to load.</span></span>'
          type:
            - '{ select?: string; expand?: string; }'
  - uid: 'word!Word.Paragraph#outlineLevel:member'
    summary: |-
      <span data-ttu-id="95d1e-338">Возвращает или задает уровень структуры абзаца.</span><span class="sxs-lookup"><span data-stu-id="95d1e-338">Gets or sets the outline level for the paragraph.</span></span>

      <span data-ttu-id="95d1e-339">\[[Набор API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="95d1e-339">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: outlineLevel
    fullName: outlineLevel
    langs:
      - typeScript
    type: property
    syntax:
      content: 'outlineLevel: number;'
      return:
        type:
          - number
  - uid: 'word!Word.Paragraph#parentBody:member'
    summary: |-
      <span data-ttu-id="95d1e-340">Возвращает родительский текст абзаца.</span><span class="sxs-lookup"><span data-stu-id="95d1e-340">Gets the parent body of the paragraph.</span></span> <span data-ttu-id="95d1e-341">Только для чтения.</span><span class="sxs-lookup"><span data-stu-id="95d1e-341">Read-only.</span></span>

      <span data-ttu-id="95d1e-342">\[[Набор API: WordApi 1,3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="95d1e-342">\[ [API set: WordApi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: parentBody
    fullName: parentBody
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly parentBody: Word.Body;'
      return:
        type:
          - 'word!Word.Body:class'
  - uid: 'word!Word.Paragraph#parentContentControl:member'
    summary: |-
      <span data-ttu-id="95d1e-343">Возвращает элемент управления содержимым, содержащий абзац.</span><span class="sxs-lookup"><span data-stu-id="95d1e-343">Gets the content control that contains the paragraph.</span></span> <span data-ttu-id="95d1e-344">Выдает ошибку, если родительский элемент управления содержимым отсутствует.</span><span class="sxs-lookup"><span data-stu-id="95d1e-344">Throws an error if there isn't a parent content control.</span></span> <span data-ttu-id="95d1e-345">Только для чтения.</span><span class="sxs-lookup"><span data-stu-id="95d1e-345">Read-only.</span></span>

      <span data-ttu-id="95d1e-346">\[[Набор API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="95d1e-346">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: parentContentControl
    fullName: parentContentControl
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly parentContentControl: Word.ContentControl;'
      return:
        type:
          - 'word!Word.ContentControl:class'
  - uid: 'word!Word.Paragraph#parentContentControlOrNullObject:member'
    summary: |-
      <span data-ttu-id="95d1e-347">Возвращает элемент управления содержимым, содержащий абзац.</span><span class="sxs-lookup"><span data-stu-id="95d1e-347">Gets the content control that contains the paragraph.</span></span> <span data-ttu-id="95d1e-348">Возвращает нулевой объект, если родительский элемент управления содержимым отсутствует.</span><span class="sxs-lookup"><span data-stu-id="95d1e-348">Returns a null object if there isn't a parent content control.</span></span> <span data-ttu-id="95d1e-349">Только для чтения.</span><span class="sxs-lookup"><span data-stu-id="95d1e-349">Read-only.</span></span>

      <span data-ttu-id="95d1e-350">\[[Набор API: WordApi 1,3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="95d1e-350">\[ [API set: WordApi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: parentContentControlOrNullObject
    fullName: parentContentControlOrNullObject
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly parentContentControlOrNullObject: Word.ContentControl;'
      return:
        type:
          - 'word!Word.ContentControl:class'
  - uid: 'word!Word.Paragraph#parentTable:member'
    summary: |-
      <span data-ttu-id="95d1e-351">Возвращает таблицу, содержащую абзац.</span><span class="sxs-lookup"><span data-stu-id="95d1e-351">Gets the table that contains the paragraph.</span></span> <span data-ttu-id="95d1e-352">Выдает ошибку, если она не находится в таблице.</span><span class="sxs-lookup"><span data-stu-id="95d1e-352">Throws an error if it is not contained in a table.</span></span> <span data-ttu-id="95d1e-353">Только для чтения.</span><span class="sxs-lookup"><span data-stu-id="95d1e-353">Read-only.</span></span>

      <span data-ttu-id="95d1e-354">\[[Набор API: WordApi 1,3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="95d1e-354">\[ [API set: WordApi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: parentTable
    fullName: parentTable
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly parentTable: Word.Table;'
      return:
        type:
          - 'word!Word.Table:class'
  - uid: 'word!Word.Paragraph#parentTableCell:member'
    summary: |-
      <span data-ttu-id="95d1e-355">Возвращает ячейку таблицы, содержащую абзац.</span><span class="sxs-lookup"><span data-stu-id="95d1e-355">Gets the table cell that contains the paragraph.</span></span> <span data-ttu-id="95d1e-356">Выдает ошибку, если она не находится в ячейке таблицы.</span><span class="sxs-lookup"><span data-stu-id="95d1e-356">Throws an error if it is not contained in a table cell.</span></span> <span data-ttu-id="95d1e-357">Только для чтения.</span><span class="sxs-lookup"><span data-stu-id="95d1e-357">Read-only.</span></span>

      <span data-ttu-id="95d1e-358">\[[Набор API: WordApi 1,3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="95d1e-358">\[ [API set: WordApi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: parentTableCell
    fullName: parentTableCell
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly parentTableCell: Word.TableCell;'
      return:
        type:
          - 'word!Word.TableCell:class'
  - uid: 'word!Word.Paragraph#parentTableCellOrNullObject:member'
    summary: |-
      <span data-ttu-id="95d1e-359">Возвращает ячейку таблицы, содержащую абзац.</span><span class="sxs-lookup"><span data-stu-id="95d1e-359">Gets the table cell that contains the paragraph.</span></span> <span data-ttu-id="95d1e-360">Если он находится не в ячейке таблицы, возвращается пустой объект.</span><span class="sxs-lookup"><span data-stu-id="95d1e-360">Returns a null object if it is not contained in a table cell.</span></span> <span data-ttu-id="95d1e-361">Только для чтения.</span><span class="sxs-lookup"><span data-stu-id="95d1e-361">Read-only.</span></span>

      <span data-ttu-id="95d1e-362">\[[Набор API: WordApi 1,3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="95d1e-362">\[ [API set: WordApi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: parentTableCellOrNullObject
    fullName: parentTableCellOrNullObject
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly parentTableCellOrNullObject: Word.TableCell;'
      return:
        type:
          - 'word!Word.TableCell:class'
  - uid: 'word!Word.Paragraph#parentTableOrNullObject:member'
    summary: |-
      <span data-ttu-id="95d1e-363">Возвращает таблицу, содержащую абзац.</span><span class="sxs-lookup"><span data-stu-id="95d1e-363">Gets the table that contains the paragraph.</span></span> <span data-ttu-id="95d1e-364">Если он находится не в таблице, возвращается пустой объект.</span><span class="sxs-lookup"><span data-stu-id="95d1e-364">Returns a null object if it is not contained in a table.</span></span> <span data-ttu-id="95d1e-365">Только для чтения.</span><span class="sxs-lookup"><span data-stu-id="95d1e-365">Read-only.</span></span>

      <span data-ttu-id="95d1e-366">\[[Набор API: WordApi 1,3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="95d1e-366">\[ [API set: WordApi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: parentTableOrNullObject
    fullName: parentTableOrNullObject
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly parentTableOrNullObject: Word.Table;'
      return:
        type:
          - 'word!Word.Table:class'
  - uid: 'word!Word.Paragraph#rightIndent:member'
    summary: |-
      <span data-ttu-id="95d1e-367">Возвращает или задает значение отступа справа для абзаца (в пунктах).</span><span class="sxs-lookup"><span data-stu-id="95d1e-367">Gets or sets the right indent value, in points, for the paragraph.</span></span>

      <span data-ttu-id="95d1e-368">\[[Набор API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="95d1e-368">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: rightIndent
    fullName: rightIndent
    langs:
      - typeScript
    type: property
    syntax:
      content: 'rightIndent: number;'
      return:
        type:
          - number
  - uid: 'word!Word.Paragraph#search:member(1)'
    summary: |-
      <span data-ttu-id="95d1e-369">Выполняет поиск с указанным SearchOptions в области объекта абзаца.</span><span class="sxs-lookup"><span data-stu-id="95d1e-369">Performs a search with the specified SearchOptions on the scope of the paragraph object.</span></span> <span data-ttu-id="95d1e-370">Результат поиска — это коллекция объектов диапазона.</span><span class="sxs-lookup"><span data-stu-id="95d1e-370">The search results are a collection of range objects.</span></span>

      <span data-ttu-id="95d1e-371">\[[Набор API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="95d1e-371">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: 'search(searchText, searchOptions)'
    fullName: 'search(searchText, searchOptions)'
    langs:
      - typeScript
    type: method
    syntax:
      content: |-
        search(searchText: string, searchOptions?: Word.SearchOptions | {
                    ignorePunct?: boolean;
                    ignoreSpace?: boolean;
                    matchCase?: boolean;
                    matchPrefix?: boolean;
                    matchSuffix?: boolean;
                    matchWholeWord?: boolean;
                    matchWildcards?: boolean;
                }): Word.RangeCollection;
      return:
        type:
          - 'word!Word.RangeCollection:class'
        description: ''
      parameters:
        - id: searchText
          description: <span data-ttu-id="95d1e-372">Обязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="95d1e-372">Required.</span></span> <span data-ttu-id="95d1e-373">Текст для поиска.</span><span class="sxs-lookup"><span data-stu-id="95d1e-373">The search text.</span></span>
          type:
            - string
        - id: searchOptions
          description: <span data-ttu-id="95d1e-374">Необязательно.</span><span class="sxs-lookup"><span data-stu-id="95d1e-374">Optional.</span></span> <span data-ttu-id="95d1e-375">Параметры поиска.</span><span class="sxs-lookup"><span data-stu-id="95d1e-375">Options for the search.</span></span>
          type:
            - 'word!Word.Paragraph#search~0:complex'
  - uid: 'word!Word.Paragraph#select:member(1)'
    summary: |-
      <span data-ttu-id="95d1e-376">Выбирает абзац и переходит к нему в пользовательском интерфейсе Word.</span><span class="sxs-lookup"><span data-stu-id="95d1e-376">Selects and navigates the Word UI to the paragraph.</span></span>

      <span data-ttu-id="95d1e-377">\[[Набор API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="95d1e-377">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: select(selectionMode)
    fullName: select(selectionMode)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'select(selectionMode?: Word.SelectionMode): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a><span data-ttu-id="95d1e-378">Примеры</span><span class="sxs-lookup"><span data-stu-id="95d1e-378">Examples</span></span>

          ```javascript
          // Run a batch operation against the Word object model.
          Word.run(function (context) {

              // Create a proxy object for the paragraphs collection.
              var paragraphs = context.document.body.paragraphs;

              // Queue a command to load the style property for all of the paragraphs.
              context.load(paragraphs, 'style');

              // Synchronize the document state by executing the queued commands,
              // and return a promise to indicate task completion.
              return context.sync().then(function () {

                  // Queue a command to get the last paragraph a create a
                  // proxy paragraph object.
                  var paragraph = paragraphs.items[paragraphs.items.length - 1];

                  // Queue a command to select the paragraph. The Word UI will
                  // move to the selected paragraph.
                  paragraph.select();

                  // Synchronize the document state by executing the queued commands,
                  // and return a promise to indicate task completion.
                  return context.sync().then(function () {
                      console.log('Selected the last paragraph.');
                  });
              });
          })
          .catch(function (error) {
              console.log('Error: ' + JSON.stringify(error));
              if (error instanceof OfficeExtension.Error) {
                  console.log('Debug info: ' + JSON.stringify(error.debugInfo));
              }
          });
          ```
          ```typescript
          await Word.run(async (context) => {
            // If select is called with no parameters, it selects the object.
            context.document.body.paragraphs.getLast().select();

            await context.sync();
          });
          ```
          ```typescript
          await Word.run(async (context) => {
            // Select can be at the start or end of a range; this by definition moves the insertion point without selecting the range.
            context.document.body.paragraphs.getLast().select("End");

            await context.sync();
          });
          ```
      parameters:
        - id: selectionMode
          description: '<span data-ttu-id="95d1e-379">Необязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="95d1e-379">Optional.</span></span> <span data-ttu-id="95d1e-380">Возможные режимы выбора: Select, Start и End.</span><span class="sxs-lookup"><span data-stu-id="95d1e-380">The selection mode can be ''Select'', ''Start'', or ''End''.</span></span> <span data-ttu-id="95d1e-381">Значение по умолчанию — Select.</span><span class="sxs-lookup"><span data-stu-id="95d1e-381">''Select'' is the default.</span></span>'
          type:
            - 'word!Word.SelectionMode:enum'
  - uid: 'word!Word.Paragraph#select:member(2)'
    summary: |-
      <span data-ttu-id="95d1e-382">Выбирает абзац и переходит к нему в пользовательском интерфейсе Word.</span><span class="sxs-lookup"><span data-stu-id="95d1e-382">Selects and navigates the Word UI to the paragraph.</span></span>

      <span data-ttu-id="95d1e-383">\[[Набор API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="95d1e-383">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: select(selectionModeString)
    fullName: select(selectionModeString)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'select(selectionModeString?: "Select" | "Start" | "End"): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: selectionModeString
          description: '<span data-ttu-id="95d1e-384">Необязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="95d1e-384">Optional.</span></span> <span data-ttu-id="95d1e-385">Возможные режимы выбора: Select, Start и End.</span><span class="sxs-lookup"><span data-stu-id="95d1e-385">The selection mode can be ''Select'', ''Start'', or ''End''.</span></span> <span data-ttu-id="95d1e-386">Значение по умолчанию — Select.</span><span class="sxs-lookup"><span data-stu-id="95d1e-386">''Select'' is the default.</span></span>'
          type:
            - '"Select" | "Start" | "End"'
  - uid: 'word!Word.Paragraph#set:member(1)'
    summary: '<span data-ttu-id="95d1e-387">Задает одновременно несколько свойств объекта.</span><span class="sxs-lookup"><span data-stu-id="95d1e-387">Sets multiple properties of an object at the same time.</span></span> <span data-ttu-id="95d1e-388">Можно передать либо простой объект с соответствующими свойствами, либо другой объект API того же типа.</span><span class="sxs-lookup"><span data-stu-id="95d1e-388">You can pass either a plain object with the appropriate properties, or another API object of the same type.</span></span>'
    remarks: |-
      <span data-ttu-id="95d1e-389">Этот метод имеет следующую дополнительную подпись:</span><span class="sxs-lookup"><span data-stu-id="95d1e-389">This method has the following additional signature:</span></span>

      `set(properties: Word.Paragraph): void`

      #### <a name="examples"></a><span data-ttu-id="95d1e-390">Примеры</span><span class="sxs-lookup"><span data-stu-id="95d1e-390">Examples</span></span>

      ```typescript
      await Word.run(async (context) => {
        const paragraph = context.document.body.paragraphs.getFirst();
        paragraph.set({
          leftIndent: 30,
          font: {
            bold: true,
            color: "red"
          }
        });

        await context.sync();
      });
      ```
      ```typescript
      await Word.run(async (context) => {
        const firstParagraph = context.document.body.paragraphs.getFirst();
        const secondParagraph = firstParagraph.getNext();
        firstParagraph.load("text, font/color, font/bold, leftIndent");

        await context.sync();

        secondParagraph.set(firstParagraph);

        await context.sync();
      });
      ```
    name: 'set(properties, options)'
    fullName: 'set(properties, options)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'set(properties: Interfaces.ParagraphUpdateData, options?: OfficeExtension.UpdateOptions): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: properties
          description: '<span data-ttu-id="95d1e-391">Объект JavaScript со свойствами, которые структурированы исоморфикалли к свойствам объекта, для которого вызывается метод.</span><span class="sxs-lookup"><span data-stu-id="95d1e-391">A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.</span></span>'
          type:
            - 'word!Word.Interfaces.ParagraphUpdateData:interface'
        - id: options
          description: '<span data-ttu-id="95d1e-392">Предоставляет возможность подавлять ошибки, если объект Properties пытается задать любые свойства, предназначенные только для чтения.</span><span class="sxs-lookup"><span data-stu-id="95d1e-392">Provides an option to suppress errors if the properties object tries to set any read-only properties.</span></span>'
          type:
            - 'word!OfficeExtension.UpdateOptions:interface'
  - uid: 'word!Word.Paragraph#set:member(2)'
    summary: '<span data-ttu-id="95d1e-393">Задает одновременно несколько свойств объекта на основе существующего загруженного объекта.</span><span class="sxs-lookup"><span data-stu-id="95d1e-393">Sets multiple properties on the object at the same time, based on an existing loaded object.</span></span>'
    name: set(properties)
    fullName: set(properties)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'set(properties: Word.Paragraph): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: properties
          description: ''
          type:
            - 'word!Word.Paragraph:class'
  - uid: 'word!Word.Paragraph#spaceAfter:member'
    summary: |-
      <span data-ttu-id="95d1e-394">Возвращает или задает междустрочный интервал после абзаца (в пунктах).</span><span class="sxs-lookup"><span data-stu-id="95d1e-394">Gets or sets the spacing, in points, after the paragraph.</span></span>

      <span data-ttu-id="95d1e-395">\[[Набор API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="95d1e-395">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: spaceAfter
    fullName: spaceAfter
    langs:
      - typeScript
    type: property
    syntax:
      content: 'spaceAfter: number;'
      return:
        type:
          - number
        description: |-


          #### <a name="examples"></a><span data-ttu-id="95d1e-396">Примеры</span><span class="sxs-lookup"><span data-stu-id="95d1e-396">Examples</span></span>

          ```typescript
          await Word.run(async (context) => {
            // Adjust space between paragraphs.
            context.document.body.paragraphs.getFirst().spaceAfter = 20;

            await context.sync();
          });
          ```
  - uid: 'word!Word.Paragraph#spaceBefore:member'
    summary: |-
      <span data-ttu-id="95d1e-397">Возвращает или задает междустрочный интервал до абзаца (в пунктах).</span><span class="sxs-lookup"><span data-stu-id="95d1e-397">Gets or sets the spacing, in points, before the paragraph.</span></span>

      <span data-ttu-id="95d1e-398">\[[Набор API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="95d1e-398">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: spaceBefore
    fullName: spaceBefore
    langs:
      - typeScript
    type: property
    syntax:
      content: 'spaceBefore: number;'
      return:
        type:
          - number
  - uid: 'word!Word.Paragraph#split:member(1)'
    summary: |-
      <span data-ttu-id="95d1e-399">Разделяет абзац на дочерние диапазоны с помощью разделителей.</span><span class="sxs-lookup"><span data-stu-id="95d1e-399">Splits the paragraph into child ranges by using delimiters.</span></span>

      <span data-ttu-id="95d1e-400">\[[Набор API: WordApi 1,3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="95d1e-400">\[ [API set: WordApi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: 'split(delimiters, trimDelimiters, trimSpacing)'
    fullName: 'split(delimiters, trimDelimiters, trimSpacing)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'split(delimiters: string[], trimDelimiters?: boolean, trimSpacing?: boolean): Word.RangeCollection;'
      return:
        type:
          - 'word!Word.RangeCollection:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="95d1e-401">Примеры</span><span class="sxs-lookup"><span data-stu-id="95d1e-401">Examples</span></span>

          ```typescript
          await Word.run(async (context) => {
            let paragraph = context.document.body.paragraphs.getFirst();
            let words = paragraph.split([" "], true /* trimDelimiters*/, true /* trimSpaces */);
            words.load("text");

            await context.sync();

            for (let i = 0; i < words.items.length; i++) {
              if (i >= 1) {
                words.items[i - 1].font.highlightColor = "#FFFFFF";
              }
              words.items[i].font.highlightColor = "#FFFF00";

              await context.sync();
              await pause(200);
            }
          });
          ```
      parameters:
        - id: delimiters
          description: <span data-ttu-id="95d1e-402">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="95d1e-402">Required.</span></span> <span data-ttu-id="95d1e-403">Разделители в виде массива строк.</span><span class="sxs-lookup"><span data-stu-id="95d1e-403">The delimiters as an array of strings.</span></span>
          type:
            - 'string[]'
        - id: trimDelimiters
          description: '<span data-ttu-id="95d1e-404">Необязательно.</span><span class="sxs-lookup"><span data-stu-id="95d1e-404">Optional.</span></span> <span data-ttu-id="95d1e-405">Указывает, следует ли отрезать разделители от диапазонов в коллекции Range.</span><span class="sxs-lookup"><span data-stu-id="95d1e-405">Indicates whether to trim delimiters from the ranges in the range collection.</span></span> <span data-ttu-id="95d1e-406">Значение по умолчанию — false, которое указывает, что разделители включены в диапазоны, возвращаемые в коллекции Range.</span><span class="sxs-lookup"><span data-stu-id="95d1e-406">Default is false which indicates that the delimiters are included in the ranges returned in the range collection.</span></span>'
          type:
            - boolean
        - id: trimSpacing
          description: '<span data-ttu-id="95d1e-407">Необязательно.</span><span class="sxs-lookup"><span data-stu-id="95d1e-407">Optional.</span></span> <span data-ttu-id="95d1e-408">Указывает, следует ли обрезать символы интервалов (пробелы, знаки табуляции, разрывы столбцов и конечные знаки абзаца) от начала и конца диапазонов, возвращаемых в коллекции Range.</span><span class="sxs-lookup"><span data-stu-id="95d1e-408">Indicates whether to trim spacing characters (spaces, tabs, column breaks, and paragraph end marks) from the start and end of the ranges returned in the range collection.</span></span> <span data-ttu-id="95d1e-409">Значение по умолчанию — false, которое указывает, что пробелы в начале и конце диапазонов включаются в коллекцию Range.</span><span class="sxs-lookup"><span data-stu-id="95d1e-409">Default is false which indicates that spacing characters at the start and end of the ranges are included in the range collection.</span></span>'
          type:
            - boolean
  - uid: 'word!Word.Paragraph#startNewList:member(1)'
    summary: |-
      <span data-ttu-id="95d1e-410">Создает список, начинающийся с данного абзаца.</span><span class="sxs-lookup"><span data-stu-id="95d1e-410">Starts a new list with this paragraph.</span></span> <span data-ttu-id="95d1e-411">Если абзац уже является элементом списка, метод не выполняется.</span><span class="sxs-lookup"><span data-stu-id="95d1e-411">Fails if the paragraph is already a list item.</span></span>

      <span data-ttu-id="95d1e-412">\[[Набор API: WordApi 1,3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="95d1e-412">\[ [API set: WordApi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: startNewList()
    fullName: startNewList()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'startNewList(): Word.List;'
      return:
        type:
          - 'word!Word.List:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="95d1e-413">Примеры</span><span class="sxs-lookup"><span data-stu-id="95d1e-413">Examples</span></span>

          ```typescript
          // This example starts a new list stating with the second paragraph.
          await Word.run(async (context) => {
            let paragraphs = context.document.body.paragraphs;
            paragraphs.load("$none"); // No properties needed.

            await context.sync();

            var list = paragraphs.items[1].startNewList(); // Indicates new list to be started in the second paragraph.
            list.load("$none"); // No properties needed.

            await context.sync();

            // To add new items to the list use start/end on the insert location parameter.
            list.insertParagraph("New list item on top of the list", "Start");
            let paragraph = list.insertParagraph("New list item at the end of the list (4th level)", "End");
            paragraph.listItem.level = 4; // Sets up list level for the lsit item.
            // To add paragraphs outside the list use before/after:
            list.insertParagraph("New paragraph goes after (not part of the list)", "After");

            await context.sync();
          });
          ```
  - uid: 'word!Word.Paragraph#style:member'
    summary: |-
      <span data-ttu-id="95d1e-414">Получает или задает имя стиля для абзаца.</span><span class="sxs-lookup"><span data-stu-id="95d1e-414">Gets or sets the style name for the paragraph.</span></span> <span data-ttu-id="95d1e-415">Используйте это свойство для пользовательских стилей и локализованных имен стилей.</span><span class="sxs-lookup"><span data-stu-id="95d1e-415">Use this property for custom styles and localized style names.</span></span> <span data-ttu-id="95d1e-416">Чтобы использовать встроенные стили, поддерживающие несколько языковых стандартов, применяйте свойство styleBuiltIn.</span><span class="sxs-lookup"><span data-stu-id="95d1e-416">To use the built-in styles that are portable between locales, see the "styleBuiltIn" property.</span></span>

      <span data-ttu-id="95d1e-417">\[[Набор API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="95d1e-417">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: style
    fullName: style
    langs:
      - typeScript
    type: property
    syntax:
      content: 'style: string;'
      return:
        type:
          - string
  - uid: 'word!Word.Paragraph#styleBuiltIn:member'
    summary: |-
      <span data-ttu-id="95d1e-p185">Возвращает или задает имя встроенного стиля абзаца. Используйте это свойство для встроенных стилей, поддерживающих несколько языковых стандартов. Чтобы использовать пользовательские стили или локализованные имена стилей, применяйте свойство style.</span><span class="sxs-lookup"><span data-stu-id="95d1e-p185">Gets or sets the built-in style name for the paragraph. Use this property for built-in styles that are portable between locales. To use custom styles or localized style names, see the "style" property.</span></span>

      <span data-ttu-id="95d1e-421">\[[Набор API: WordApi 1,3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="95d1e-421">\[ [API set: WordApi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: styleBuiltIn
    fullName: styleBuiltIn
    langs:
      - typeScript
    type: property
    syntax:
      content: 'styleBuiltIn: Word.Style | "Other" | "Normal" | "Heading1" | "Heading2" | "Heading3" | "Heading4" | "Heading5" | "Heading6" | "Heading7" | "Heading8" | "Heading9" | "Toc1" | "Toc2" | "Toc3" | "Toc4" | "Toc5" | "Toc6" | "Toc7" | "Toc8" | "Toc9" | "FootnoteText" | "Header" | "Footer" | "Caption" | "FootnoteReference" | "EndnoteReference" | "EndnoteText" | "Title" | "Subtitle" | "Hyperlink" | "Strong" | "Emphasis" | "NoSpacing" | "ListParagraph" | "Quote" | "IntenseQuote" | "SubtleEmphasis" | "IntenseEmphasis" | "SubtleReference" | "IntenseReference" | "BookTitle" | "Bibliography" | "TocHeading" | "TableGrid" | "PlainTable1" | "PlainTable2" | "PlainTable3" | "PlainTable4" | "PlainTable5" | "TableGridLight" | "GridTable1Light" | "GridTable1Light_Accent1" | "GridTable1Light_Accent2" | "GridTable1Light_Accent3" | "GridTable1Light_Accent4" | "GridTable1Light_Accent5" | "GridTable1Light_Accent6" | "GridTable2" | "GridTable2_Accent1" | "GridTable2_Accent2" | "GridTable2_Accent3" | "GridTable2_Accent4" | "GridTable2_Accent5" | "GridTable2_Accent6" | "GridTable3" | "GridTable3_Accent1" | "GridTable3_Accent2" | "GridTable3_Accent3" | "GridTable3_Accent4" | "GridTable3_Accent5" | "GridTable3_Accent6" | "GridTable4" | "GridTable4_Accent1" | "GridTable4_Accent2" | "GridTable4_Accent3" | "GridTable4_Accent4" | "GridTable4_Accent5" | "GridTable4_Accent6" | "GridTable5Dark" | "GridTable5Dark_Accent1" | "GridTable5Dark_Accent2" | "GridTable5Dark_Accent3" | "GridTable5Dark_Accent4" | "GridTable5Dark_Accent5" | "GridTable5Dark_Accent6" | "GridTable6Colorful" | "GridTable6Colorful_Accent1" | "GridTable6Colorful_Accent2" | "GridTable6Colorful_Accent3" | "GridTable6Colorful_Accent4" | "GridTable6Colorful_Accent5" | "GridTable6Colorful_Accent6" | "GridTable7Colorful" | "GridTable7Colorful_Accent1" | "GridTable7Colorful_Accent2" | "GridTable7Colorful_Accent3" | "GridTable7Colorful_Accent4" | "GridTable7Colorful_Accent5" | "GridTable7Colorful_Accent6" | "ListTable1Light" | "ListTable1Light_Accent1" | "ListTable1Light_Accent2" | "ListTable1Light_Accent3" | "ListTable1Light_Accent4" | "ListTable1Light_Accent5" | "ListTable1Light_Accent6" | "ListTable2" | "ListTable2_Accent1" | "ListTable2_Accent2" | "ListTable2_Accent3" | "ListTable2_Accent4" | "ListTable2_Accent5" | "ListTable2_Accent6" | "ListTable3" | "ListTable3_Accent1" | "ListTable3_Accent2" | "ListTable3_Accent3" | "ListTable3_Accent4" | "ListTable3_Accent5" | "ListTable3_Accent6" | "ListTable4" | "ListTable4_Accent1" | "ListTable4_Accent2" | "ListTable4_Accent3" | "ListTable4_Accent4" | "ListTable4_Accent5" | "ListTable4_Accent6" | "ListTable5Dark" | "ListTable5Dark_Accent1" | "ListTable5Dark_Accent2" | "ListTable5Dark_Accent3" | "ListTable5Dark_Accent4" | "ListTable5Dark_Accent5" | "ListTable5Dark_Accent6" | "ListTable6Colorful" | "ListTable6Colorful_Accent1" | "ListTable6Colorful_Accent2" | "ListTable6Colorful_Accent3" | "ListTable6Colorful_Accent4" | "ListTable6Colorful_Accent5" | "ListTable6Colorful_Accent6" | "ListTable7Colorful" | "ListTable7Colorful_Accent1" | "ListTable7Colorful_Accent2" | "ListTable7Colorful_Accent3" | "ListTable7Colorful_Accent4" | "ListTable7Colorful_Accent5" | "ListTable7Colorful_Accent6";'
      return:
        type:
          - 'word!Word.Paragraph#styleBuiltIn~0:complex'
  - uid: 'word!Word.Paragraph#tableNestingLevel:member'
    summary: |-
      <span data-ttu-id="95d1e-422">Возвращает уровень таблицы, содержащей абзац.</span><span class="sxs-lookup"><span data-stu-id="95d1e-422">Gets the level of the paragraph's table.</span></span> <span data-ttu-id="95d1e-423">Если абзац не находится в таблице, возвращается значение 0.</span><span class="sxs-lookup"><span data-stu-id="95d1e-423">It returns 0 if the paragraph is not in a table.</span></span> <span data-ttu-id="95d1e-424">Только для чтения.</span><span class="sxs-lookup"><span data-stu-id="95d1e-424">Read-only.</span></span>

      <span data-ttu-id="95d1e-425">\[[Набор API: WordApi 1,3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="95d1e-425">\[ [API set: WordApi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: tableNestingLevel
    fullName: tableNestingLevel
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly tableNestingLevel: number;'
      return:
        type:
          - number
  - uid: 'word!Word.Paragraph#text:member'
    summary: |-
      <span data-ttu-id="95d1e-426">Возвращает текст абзаца.</span><span class="sxs-lookup"><span data-stu-id="95d1e-426">Gets the text of the paragraph.</span></span> <span data-ttu-id="95d1e-427">Только для чтения.</span><span class="sxs-lookup"><span data-stu-id="95d1e-427">Read-only.</span></span>

      <span data-ttu-id="95d1e-428">\[[Набор API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="95d1e-428">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: text
    fullName: text
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly text: string;'
      return:
        type:
          - string
        description: |-


          #### <a name="examples"></a><span data-ttu-id="95d1e-429">Примеры</span><span class="sxs-lookup"><span data-stu-id="95d1e-429">Examples</span></span>

          ```typescript
          await Word.run(async (context) => {
            // The collection of paragraphs of the current selection returns the full paragraphs contained in it.
            let paragraph = context.document.getSelection().paragraphs.getFirst();
            paragraph.load("text");

            await context.sync();
            console.log(paragraph.text);
          });
          ```
  - uid: 'word!Word.Paragraph#toJSON:member(1)'
    summary: '<span data-ttu-id="95d1e-430">Переопределяет метод `toJSON()` JavaScript для предоставления более удобного вывода при передаче объекта API`JSON.stringify()`</span><span class="sxs-lookup"><span data-stu-id="95d1e-430">Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`</span></span><!-- --><span data-ttu-id="95d1e-431">.</span><span class="sxs-lookup"><span data-stu-id="95d1e-431"></span></span> <span data-ttu-id="95d1e-432">(`JSON.stringify`</span><span class="sxs-lookup"><span data-stu-id="95d1e-432"></span></span><!-- --><span data-ttu-id="95d1e-433">, в свою очередь, вызывает `toJSON` метод объекта, который передается ему.) В то время как исходный объект Word. абзац — это объект API, `toJSON` метод возвращает простой объект JavaScript (тип`Word.Interfaces.ParagraphData`</span><span class="sxs-lookup"><span data-stu-id="95d1e-433">, in turn, calls the `toJSON` method of the object that is passed to it.) Whereas the original Word.Paragraph object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.ParagraphData`</span></span><!-- --><span data-ttu-id="95d1e-434">), который содержит неполные копии загруженных дочерних свойств из исходного объекта.</span><span class="sxs-lookup"><span data-stu-id="95d1e-434">) that contains shallow copies of any loaded child properties from the original object.</span></span>'
    name: toJSON()
    fullName: toJSON()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON(): Word.Interfaces.ParagraphData;'
      return:
        type:
          - 'word!Word.Interfaces.ParagraphData:interface'
        description: ''
  - uid: 'word!Word.Paragraph#track:member(1)'
    summary: '<span data-ttu-id="95d1e-435">Отслеживает объект для автоматической корректировки с учетом окружающих изменений в документе.</span><span class="sxs-lookup"><span data-stu-id="95d1e-435">Track the object for automatic adjustment based on surrounding changes in the document.</span></span> <span data-ttu-id="95d1e-436">Этот вызов является сокращением для context.trackedObjects.add(thisObject).</span><span class="sxs-lookup"><span data-stu-id="95d1e-436">This call is a shorthand for context.trackedObjects.add(thisObject).</span></span> <span data-ttu-id="95d1e-437">Если этот объект используется в вызовах .sync и вне последовательного выполнения пакета .run с возникновением ошибки InvalidObjectPath при установке свойства или вызове метода для объекта, необходимо было добавить объект в коллекцию отслеживаемых объектов при первоначальном создании объекта.</span><span class="sxs-lookup"><span data-stu-id="95d1e-437">If you are using this object across ".sync" calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you needed to have added the object to the tracked object collection when the object was first created.</span></span>'
    name: track()
    fullName: track()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'track(): Word.Paragraph;'
      return:
        type:
          - 'word!Word.Paragraph:class'
        description: ''
  - uid: 'word!Word.Paragraph#untrack:member(1)'
    summary: '<span data-ttu-id="95d1e-438">Освобождает память, связанную с этим объектом, если он ранее отслеживался.</span><span class="sxs-lookup"><span data-stu-id="95d1e-438">Release the memory associated with this object, if it has previously been tracked.</span></span> <span data-ttu-id="95d1e-439">Этот вызов является сокращением для context.trackedObjects.remove(thisObject).</span><span class="sxs-lookup"><span data-stu-id="95d1e-439">This call is shorthand for context.trackedObjects.remove(thisObject).</span></span> <span data-ttu-id="95d1e-440">Наличие большого количества отслеживаемых объектов замедляет ведущее приложение, поэтому не забывайте освобождать любые добавленные объекты после завершения их использования.</span><span class="sxs-lookup"><span data-stu-id="95d1e-440">Having many tracked objects slows down the host application, so please remember to free any objects you add, once you''re done using them.</span></span> <span data-ttu-id="95d1e-441">Перед фактическим освобождением памяти потребуется вызвать метод context.sync().</span><span class="sxs-lookup"><span data-stu-id="95d1e-441">You will need to call "context.sync()" before the memory release takes effect.</span></span>'
    name: untrack()
    fullName: untrack()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'untrack(): Word.Paragraph;'
      return:
        type:
          - 'word!Word.Paragraph:class'
        description: ''
references:
  - uid: 'word!OfficeExtension.ClientObject:class'
    name: OfficeExtension.ClientObject
  - uid: 'word!Word.Paragraph#alignment~0:complex'
    name: Word.Alignment | "Mixed" | "Unknown" | "Left" | "Centered" | "Right" | "Justified"
    fullName: Word.Alignment | "Mixed" | "Unknown" | "Left" | "Centered" | "Right" | "Justified"
    spec.typeScript:
      - uid: 'word!Word.Alignment:enum'
        name: Word.Alignment
        fullName: Word.Alignment
      - name: ' | "Mixed" | "Unknown" | "Left" | "Centered" | "Right" | "Justified"'
        fullName: ' | "Mixed" | "Unknown" | "Left" | "Centered" | "Right" | "Justified"'
  - uid: 'word!Word.List:class'
    name: Word.List
  - uid: 'word!Word.ContentControlCollection:class'
    name: Word.ContentControlCollection
  - uid: 'word!Word.RequestContext:class'
    name: RequestContext
  - uid: 'word!Word.Font:class'
    name: Word.Font
  - uid: 'word!Word.Paragraph#getHtml~0:complex'
    name: OfficeExtension.ClientResult<string>
    fullName: OfficeExtension.ClientResult<string>
    spec.typeScript:
      - uid: 'word!OfficeExtension.ClientResult:class'
        name: OfficeExtension.ClientResult
        fullName: OfficeExtension.ClientResult
      - name: <string>
        fullName: <string>
  - uid: 'word!Word.Paragraph:class'
    name: Word.Paragraph
  - uid: 'word!Word.Paragraph#getOoxml~0:complex'
    name: OfficeExtension.ClientResult<string>
    fullName: OfficeExtension.ClientResult<string>
    spec.typeScript:
      - uid: 'word!OfficeExtension.ClientResult:class'
        name: OfficeExtension.ClientResult
        fullName: OfficeExtension.ClientResult
      - name: <string>
        fullName: <string>
  - uid: 'word!Word.Range:class'
    name: Word.Range
  - uid: 'word!Word.RangeLocation:enum'
    name: Word.RangeLocation
  - uid: 'word!Word.RangeCollection:class'
    name: Word.RangeCollection
  - uid: 'word!Word.InlinePictureCollection:class'
    name: Word.InlinePictureCollection
  - uid: 'word!Word.BreakType:enum'
    name: Word.BreakType
  - uid: 'word!Word.InsertLocation:enum'
    name: Word.InsertLocation
  - uid: 'word!Word.ContentControl:class'
    name: Word.ContentControl
  - uid: 'word!Word.InlinePicture:class'
    name: Word.InlinePicture
  - uid: 'word!Word.Table:class'
    name: Word.Table
  - uid: 'word!Word.ListItem:class'
    name: Word.ListItem
  - uid: 'word!Word.Interfaces.ParagraphLoadOptions:interface'
    name: Word.Interfaces.ParagraphLoadOptions
  - uid: 'word!Word.Body:class'
    name: Word.Body
  - uid: 'word!Word.TableCell:class'
    name: Word.TableCell
  - uid: 'word!Word.Paragraph#search~0:complex'
    name: |-
      Word.SearchOptions | {
                  ignorePunct?: boolean;
                  ignoreSpace?: boolean;
                  matchCase?: boolean;
                  matchPrefix?: boolean;
                  matchSuffix?: boolean;
                  matchWholeWord?: boolean;
                  matchWildcards?: boolean;
              }
    fullName: |-
      Word.SearchOptions | {
                  ignorePunct?: boolean;
                  ignoreSpace?: boolean;
                  matchCase?: boolean;
                  matchPrefix?: boolean;
                  matchSuffix?: boolean;
                  matchWholeWord?: boolean;
                  matchWildcards?: boolean;
              }
    spec.typeScript:
      - uid: 'word!Word.SearchOptions:class'
        name: Word.SearchOptions
        fullName: Word.SearchOptions
      - name: |2-
           | {
                      ignorePunct?: boolean;
                      ignoreSpace?: boolean;
                      matchCase?: boolean;
                      matchPrefix?: boolean;
                      matchSuffix?: boolean;
                      matchWholeWord?: boolean;
                      matchWildcards?: boolean;
                  }
        fullName: |2-
           | {
                      ignorePunct?: boolean;
                      ignoreSpace?: boolean;
                      matchCase?: boolean;
                      matchPrefix?: boolean;
                      matchSuffix?: boolean;
                      matchWholeWord?: boolean;
                      matchWildcards?: boolean;
                  }
  - uid: 'word!Word.SelectionMode:enum'
    name: Word.SelectionMode
  - uid: 'word!Word.Interfaces.ParagraphUpdateData:interface'
    name: Interfaces.ParagraphUpdateData
  - uid: 'word!OfficeExtension.UpdateOptions:interface'
    name: OfficeExtension.UpdateOptions
  - uid: 'word!Word.Paragraph#styleBuiltIn~0:complex'
    name: Word.Style | "Other" | "Normal" | "Heading1" | "Heading2" | "Heading3" | "Heading4" | "Heading5" | "Heading6" | "Heading7" | "Heading8" | "Heading9" | "Toc1" | "Toc2" | "Toc3" | "Toc4" | "Toc5" | "Toc6" | "Toc7" | "Toc8" | "Toc9" | "FootnoteText" | "Header" | "Footer" | "Caption" | "FootnoteReference" | "EndnoteReference" | "EndnoteText" | "Title" | "Subtitle" | "Hyperlink" | "Strong" | "Emphasis" | "NoSpacing" | "ListParagraph" | "Quote" | "IntenseQuote" | "SubtleEmphasis" | "IntenseEmphasis" | "SubtleReference" | "IntenseReference" | "BookTitle" | "Bibliography" | "TocHeading" | "TableGrid" | "PlainTable1" | "PlainTable2" | "PlainTable3" | "PlainTable4" | "PlainTable5" | "TableGridLight" | "GridTable1Light" | "GridTable1Light_Accent1" | "GridTable1Light_Accent2" | "GridTable1Light_Accent3" | "GridTable1Light_Accent4" | "GridTable1Light_Accent5" | "GridTable1Light_Accent6" | "GridTable2" | "GridTable2_Accent1" | "GridTable2_Accent2" | "GridTable2_Accent3" | "GridTable2_Accent4" | "GridTable2_Accent5" | "GridTable2_Accent6" | "GridTable3" | "GridTable3_Accent1" | "GridTable3_Accent2" | "GridTable3_Accent3" | "GridTable3_Accent4" | "GridTable3_Accent5" | "GridTable3_Accent6" | "GridTable4" | "GridTable4_Accent1" | "GridTable4_Accent2" | "GridTable4_Accent3" | "GridTable4_Accent4" | "GridTable4_Accent5" | "GridTable4_Accent6" | "GridTable5Dark" | "GridTable5Dark_Accent1" | "GridTable5Dark_Accent2" | "GridTable5Dark_Accent3" | "GridTable5Dark_Accent4" | "GridTable5Dark_Accent5" | "GridTable5Dark_Accent6" | "GridTable6Colorful" | "GridTable6Colorful_Accent1" | "GridTable6Colorful_Accent2" | "GridTable6Colorful_Accent3" | "GridTable6Colorful_Accent4" | "GridTable6Colorful_Accent5" | "GridTable6Colorful_Accent6" | "GridTable7Colorful" | "GridTable7Colorful_Accent1" | "GridTable7Colorful_Accent2" | "GridTable7Colorful_Accent3" | "GridTable7Colorful_Accent4" | "GridTable7Colorful_Accent5" | "GridTable7Colorful_Accent6" | "ListTable1Light" | "ListTable1Light_Accent1" | "ListTable1Light_Accent2" | "ListTable1Light_Accent3" | "ListTable1Light_Accent4" | "ListTable1Light_Accent5" | "ListTable1Light_Accent6" | "ListTable2" | "ListTable2_Accent1" | "ListTable2_Accent2" | "ListTable2_Accent3" | "ListTable2_Accent4" | "ListTable2_Accent5" | "ListTable2_Accent6" | "ListTable3" | "ListTable3_Accent1" | "ListTable3_Accent2" | "ListTable3_Accent3" | "ListTable3_Accent4" | "ListTable3_Accent5" | "ListTable3_Accent6" | "ListTable4" | "ListTable4_Accent1" | "ListTable4_Accent2" | "ListTable4_Accent3" | "ListTable4_Accent4" | "ListTable4_Accent5" | "ListTable4_Accent6" | "ListTable5Dark" | "ListTable5Dark_Accent1" | "ListTable5Dark_Accent2" | "ListTable5Dark_Accent3" | "ListTable5Dark_Accent4" | "ListTable5Dark_Accent5" | "ListTable5Dark_Accent6" | "ListTable6Colorful" | "ListTable6Colorful_Accent1" | "ListTable6Colorful_Accent2" | "ListTable6Colorful_Accent3" | "ListTable6Colorful_Accent4" | "ListTable6Colorful_Accent5" | "ListTable6Colorful_Accent6" | "ListTable7Colorful" | "ListTable7Colorful_Accent1" | "ListTable7Colorful_Accent2" | "ListTable7Colorful_Accent3" | "ListTable7Colorful_Accent4" | "ListTable7Colorful_Accent5" | "ListTable7Colorful_Accent6"
    fullName: Word.Style | "Other" | "Normal" | "Heading1" | "Heading2" | "Heading3" | "Heading4" | "Heading5" | "Heading6" | "Heading7" | "Heading8" | "Heading9" | "Toc1" | "Toc2" | "Toc3" | "Toc4" | "Toc5" | "Toc6" | "Toc7" | "Toc8" | "Toc9" | "FootnoteText" | "Header" | "Footer" | "Caption" | "FootnoteReference" | "EndnoteReference" | "EndnoteText" | "Title" | "Subtitle" | "Hyperlink" | "Strong" | "Emphasis" | "NoSpacing" | "ListParagraph" | "Quote" | "IntenseQuote" | "SubtleEmphasis" | "IntenseEmphasis" | "SubtleReference" | "IntenseReference" | "BookTitle" | "Bibliography" | "TocHeading" | "TableGrid" | "PlainTable1" | "PlainTable2" | "PlainTable3" | "PlainTable4" | "PlainTable5" | "TableGridLight" | "GridTable1Light" | "GridTable1Light_Accent1" | "GridTable1Light_Accent2" | "GridTable1Light_Accent3" | "GridTable1Light_Accent4" | "GridTable1Light_Accent5" | "GridTable1Light_Accent6" | "GridTable2" | "GridTable2_Accent1" | "GridTable2_Accent2" | "GridTable2_Accent3" | "GridTable2_Accent4" | "GridTable2_Accent5" | "GridTable2_Accent6" | "GridTable3" | "GridTable3_Accent1" | "GridTable3_Accent2" | "GridTable3_Accent3" | "GridTable3_Accent4" | "GridTable3_Accent5" | "GridTable3_Accent6" | "GridTable4" | "GridTable4_Accent1" | "GridTable4_Accent2" | "GridTable4_Accent3" | "GridTable4_Accent4" | "GridTable4_Accent5" | "GridTable4_Accent6" | "GridTable5Dark" | "GridTable5Dark_Accent1" | "GridTable5Dark_Accent2" | "GridTable5Dark_Accent3" | "GridTable5Dark_Accent4" | "GridTable5Dark_Accent5" | "GridTable5Dark_Accent6" | "GridTable6Colorful" | "GridTable6Colorful_Accent1" | "GridTable6Colorful_Accent2" | "GridTable6Colorful_Accent3" | "GridTable6Colorful_Accent4" | "GridTable6Colorful_Accent5" | "GridTable6Colorful_Accent6" | "GridTable7Colorful" | "GridTable7Colorful_Accent1" | "GridTable7Colorful_Accent2" | "GridTable7Colorful_Accent3" | "GridTable7Colorful_Accent4" | "GridTable7Colorful_Accent5" | "GridTable7Colorful_Accent6" | "ListTable1Light" | "ListTable1Light_Accent1" | "ListTable1Light_Accent2" | "ListTable1Light_Accent3" | "ListTable1Light_Accent4" | "ListTable1Light_Accent5" | "ListTable1Light_Accent6" | "ListTable2" | "ListTable2_Accent1" | "ListTable2_Accent2" | "ListTable2_Accent3" | "ListTable2_Accent4" | "ListTable2_Accent5" | "ListTable2_Accent6" | "ListTable3" | "ListTable3_Accent1" | "ListTable3_Accent2" | "ListTable3_Accent3" | "ListTable3_Accent4" | "ListTable3_Accent5" | "ListTable3_Accent6" | "ListTable4" | "ListTable4_Accent1" | "ListTable4_Accent2" | "ListTable4_Accent3" | "ListTable4_Accent4" | "ListTable4_Accent5" | "ListTable4_Accent6" | "ListTable5Dark" | "ListTable5Dark_Accent1" | "ListTable5Dark_Accent2" | "ListTable5Dark_Accent3" | "ListTable5Dark_Accent4" | "ListTable5Dark_Accent5" | "ListTable5Dark_Accent6" | "ListTable6Colorful" | "ListTable6Colorful_Accent1" | "ListTable6Colorful_Accent2" | "ListTable6Colorful_Accent3" | "ListTable6Colorful_Accent4" | "ListTable6Colorful_Accent5" | "ListTable6Colorful_Accent6" | "ListTable7Colorful" | "ListTable7Colorful_Accent1" | "ListTable7Colorful_Accent2" | "ListTable7Colorful_Accent3" | "ListTable7Colorful_Accent4" | "ListTable7Colorful_Accent5" | "ListTable7Colorful_Accent6"
    spec.typeScript:
      - uid: 'word!Word.Style:enum'
        name: Word.Style
        fullName: Word.Style
      - name: ' | "Other" | "Normal" | "Heading1" | "Heading2" | "Heading3" | "Heading4" | "Heading5" | "Heading6" | "Heading7" | "Heading8" | "Heading9" | "Toc1" | "Toc2" | "Toc3" | "Toc4" | "Toc5" | "Toc6" | "Toc7" | "Toc8" | "Toc9" | "FootnoteText" | "Header" | "Footer" | "Caption" | "FootnoteReference" | "EndnoteReference" | "EndnoteText" | "Title" | "Subtitle" | "Hyperlink" | "Strong" | "Emphasis" | "NoSpacing" | "ListParagraph" | "Quote" | "IntenseQuote" | "SubtleEmphasis" | "IntenseEmphasis" | "SubtleReference" | "IntenseReference" | "BookTitle" | "Bibliography" | "TocHeading" | "TableGrid" | "PlainTable1" | "PlainTable2" | "PlainTable3" | "PlainTable4" | "PlainTable5" | "TableGridLight" | "GridTable1Light" | "GridTable1Light_Accent1" | "GridTable1Light_Accent2" | "GridTable1Light_Accent3" | "GridTable1Light_Accent4" | "GridTable1Light_Accent5" | "GridTable1Light_Accent6" | "GridTable2" | "GridTable2_Accent1" | "GridTable2_Accent2" | "GridTable2_Accent3" | "GridTable2_Accent4" | "GridTable2_Accent5" | "GridTable2_Accent6" | "GridTable3" | "GridTable3_Accent1" | "GridTable3_Accent2" | "GridTable3_Accent3" | "GridTable3_Accent4" | "GridTable3_Accent5" | "GridTable3_Accent6" | "GridTable4" | "GridTable4_Accent1" | "GridTable4_Accent2" | "GridTable4_Accent3" | "GridTable4_Accent4" | "GridTable4_Accent5" | "GridTable4_Accent6" | "GridTable5Dark" | "GridTable5Dark_Accent1" | "GridTable5Dark_Accent2" | "GridTable5Dark_Accent3" | "GridTable5Dark_Accent4" | "GridTable5Dark_Accent5" | "GridTable5Dark_Accent6" | "GridTable6Colorful" | "GridTable6Colorful_Accent1" | "GridTable6Colorful_Accent2" | "GridTable6Colorful_Accent3" | "GridTable6Colorful_Accent4" | "GridTable6Colorful_Accent5" | "GridTable6Colorful_Accent6" | "GridTable7Colorful" | "GridTable7Colorful_Accent1" | "GridTable7Colorful_Accent2" | "GridTable7Colorful_Accent3" | "GridTable7Colorful_Accent4" | "GridTable7Colorful_Accent5" | "GridTable7Colorful_Accent6" | "ListTable1Light" | "ListTable1Light_Accent1" | "ListTable1Light_Accent2" | "ListTable1Light_Accent3" | "ListTable1Light_Accent4" | "ListTable1Light_Accent5" | "ListTable1Light_Accent6" | "ListTable2" | "ListTable2_Accent1" | "ListTable2_Accent2" | "ListTable2_Accent3" | "ListTable2_Accent4" | "ListTable2_Accent5" | "ListTable2_Accent6" | "ListTable3" | "ListTable3_Accent1" | "ListTable3_Accent2" | "ListTable3_Accent3" | "ListTable3_Accent4" | "ListTable3_Accent5" | "ListTable3_Accent6" | "ListTable4" | "ListTable4_Accent1" | "ListTable4_Accent2" | "ListTable4_Accent3" | "ListTable4_Accent4" | "ListTable4_Accent5" | "ListTable4_Accent6" | "ListTable5Dark" | "ListTable5Dark_Accent1" | "ListTable5Dark_Accent2" | "ListTable5Dark_Accent3" | "ListTable5Dark_Accent4" | "ListTable5Dark_Accent5" | "ListTable5Dark_Accent6" | "ListTable6Colorful" | "ListTable6Colorful_Accent1" | "ListTable6Colorful_Accent2" | "ListTable6Colorful_Accent3" | "ListTable6Colorful_Accent4" | "ListTable6Colorful_Accent5" | "ListTable6Colorful_Accent6" | "ListTable7Colorful" | "ListTable7Colorful_Accent1" | "ListTable7Colorful_Accent2" | "ListTable7Colorful_Accent3" | "ListTable7Colorful_Accent4" | "ListTable7Colorful_Accent5" | "ListTable7Colorful_Accent6"'
        fullName: ' | "Other" | "Normal" | "Heading1" | "Heading2" | "Heading3" | "Heading4" | "Heading5" | "Heading6" | "Heading7" | "Heading8" | "Heading9" | "Toc1" | "Toc2" | "Toc3" | "Toc4" | "Toc5" | "Toc6" | "Toc7" | "Toc8" | "Toc9" | "FootnoteText" | "Header" | "Footer" | "Caption" | "FootnoteReference" | "EndnoteReference" | "EndnoteText" | "Title" | "Subtitle" | "Hyperlink" | "Strong" | "Emphasis" | "NoSpacing" | "ListParagraph" | "Quote" | "IntenseQuote" | "SubtleEmphasis" | "IntenseEmphasis" | "SubtleReference" | "IntenseReference" | "BookTitle" | "Bibliography" | "TocHeading" | "TableGrid" | "PlainTable1" | "PlainTable2" | "PlainTable3" | "PlainTable4" | "PlainTable5" | "TableGridLight" | "GridTable1Light" | "GridTable1Light_Accent1" | "GridTable1Light_Accent2" | "GridTable1Light_Accent3" | "GridTable1Light_Accent4" | "GridTable1Light_Accent5" | "GridTable1Light_Accent6" | "GridTable2" | "GridTable2_Accent1" | "GridTable2_Accent2" | "GridTable2_Accent3" | "GridTable2_Accent4" | "GridTable2_Accent5" | "GridTable2_Accent6" | "GridTable3" | "GridTable3_Accent1" | "GridTable3_Accent2" | "GridTable3_Accent3" | "GridTable3_Accent4" | "GridTable3_Accent5" | "GridTable3_Accent6" | "GridTable4" | "GridTable4_Accent1" | "GridTable4_Accent2" | "GridTable4_Accent3" | "GridTable4_Accent4" | "GridTable4_Accent5" | "GridTable4_Accent6" | "GridTable5Dark" | "GridTable5Dark_Accent1" | "GridTable5Dark_Accent2" | "GridTable5Dark_Accent3" | "GridTable5Dark_Accent4" | "GridTable5Dark_Accent5" | "GridTable5Dark_Accent6" | "GridTable6Colorful" | "GridTable6Colorful_Accent1" | "GridTable6Colorful_Accent2" | "GridTable6Colorful_Accent3" | "GridTable6Colorful_Accent4" | "GridTable6Colorful_Accent5" | "GridTable6Colorful_Accent6" | "GridTable7Colorful" | "GridTable7Colorful_Accent1" | "GridTable7Colorful_Accent2" | "GridTable7Colorful_Accent3" | "GridTable7Colorful_Accent4" | "GridTable7Colorful_Accent5" | "GridTable7Colorful_Accent6" | "ListTable1Light" | "ListTable1Light_Accent1" | "ListTable1Light_Accent2" | "ListTable1Light_Accent3" | "ListTable1Light_Accent4" | "ListTable1Light_Accent5" | "ListTable1Light_Accent6" | "ListTable2" | "ListTable2_Accent1" | "ListTable2_Accent2" | "ListTable2_Accent3" | "ListTable2_Accent4" | "ListTable2_Accent5" | "ListTable2_Accent6" | "ListTable3" | "ListTable3_Accent1" | "ListTable3_Accent2" | "ListTable3_Accent3" | "ListTable3_Accent4" | "ListTable3_Accent5" | "ListTable3_Accent6" | "ListTable4" | "ListTable4_Accent1" | "ListTable4_Accent2" | "ListTable4_Accent3" | "ListTable4_Accent4" | "ListTable4_Accent5" | "ListTable4_Accent6" | "ListTable5Dark" | "ListTable5Dark_Accent1" | "ListTable5Dark_Accent2" | "ListTable5Dark_Accent3" | "ListTable5Dark_Accent4" | "ListTable5Dark_Accent5" | "ListTable5Dark_Accent6" | "ListTable6Colorful" | "ListTable6Colorful_Accent1" | "ListTable6Colorful_Accent2" | "ListTable6Colorful_Accent3" | "ListTable6Colorful_Accent4" | "ListTable6Colorful_Accent5" | "ListTable6Colorful_Accent6" | "ListTable7Colorful" | "ListTable7Colorful_Accent1" | "ListTable7Colorful_Accent2" | "ListTable7Colorful_Accent3" | "ListTable7Colorful_Accent4" | "ListTable7Colorful_Accent5" | "ListTable7Colorful_Accent6"'
  - uid: 'word!Word.Interfaces.ParagraphData:interface'
    name: Word.Interfaces.ParagraphData