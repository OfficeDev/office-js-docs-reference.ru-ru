### YamlMime:TSType
name: Word.ContentControl
uid: word!Word.ContentControl:class
package: word!
fullName: Word.ContentControl
summary: >-
  Представляет элемент управления содержимым. Элементы управления содержимым — это связанные и, возможно, помеченные фрагменты документа, выполняющие роль контейнеров для определенных типов содержимого. Отдельные элементы управления содержимым могут содержать изображения, таблицы или абзацы форматированного текста. На данный момент поддерживаются только элементы управления содержимым "форматированный текст".


  \[[Набор API: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
remarks: ''
isPreview: false
isDeprecated: false
type: class
properties:
- name: appearance
  uid: word!Word.ContentControl#appearance:member
  package: word!
  fullName: appearance
  summary: >-
    Получает или задает внешний вид элемента управления содержимым. Значением может быть BoundingBox, Tags или Hidden.


    \[[Набор API: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'appearance: Word.ContentControlAppearance | "BoundingBox" | "Tags" | "Hidden";'
    return:
      type: <xref uid="word!Word.ContentControlAppearance:enum" /> | "BoundingBox" | "Tags" | "Hidden"
- name: cannotDelete
  uid: word!Word.ContentControl#cannotDelete:member
  package: word!
  fullName: cannotDelete
  summary: >-
    Возвращает или задает значение, указывающее, может ли пользователь удалить элемент управления содержимым. Является взаимоисключающим со свойством removeWhenEdited.


    \[[Набор API: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'cannotDelete: boolean;'
    return:
      type: boolean
- name: cannotEdit
  uid: word!Word.ContentControl#cannotEdit:member
  package: word!
  fullName: cannotEdit
  summary: >-
    Возвращает или задает значение, указывающее, может ли пользователь изменять содержимое элемента управления содержимым.


    \[[Набор API: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'cannotEdit: boolean;'
    return:
      type: boolean
- name: color
  uid: word!Word.ContentControl#color:member
  package: word!
  fullName: color
  summary: >-
    Возвращает или задает цвет элемента управления содержимым. Цвет указывается в формате \# RRGGBB или с помощью имени цвета.


    \[[Набор API: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'color: string;'
    return:
      type: string
- name: contentControls
  uid: word!Word.ContentControl#contentControls:member
  package: word!
  fullName: contentControls
  summary: >-
    Получает коллекцию объектов элементов управления содержимым в элементе управления содержимым. Только для чтения.


    \[[Набор API: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly contentControls: Word.ContentControlCollection;'
    return:
      type: <xref uid="word!Word.ContentControlCollection:class" />
- name: context
  uid: word!Word.ContentControl#context:member
  package: word!
  fullName: context
  summary: Контекст запроса, связанный с объектом. Это связывает процесс надстройки с процессом ведущего приложения Office.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'context: RequestContext;'
    return:
      type: <xref uid="word!Word.RequestContext:class" />
- name: font
  uid: word!Word.ContentControl#font:member
  package: word!
  fullName: font
  summary: >-
    Получает текстовый формат элемента управления содержимым. Используйте это свойство для получения и установки имени, размера, цвета и других свойств шрифта. Только для чтения.


    \[[Набор API: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly font: Word.Font;'
    return:
      type: <xref uid="word!Word.Font:class" />
- name: id
  uid: word!Word.ContentControl#id:member
  package: word!
  fullName: id
  summary: >-
    Возвращает целое число, представляющее собой идентификатор элемента управления контентом. Только для чтения.


    \[[Набор API: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly id: number;'
    return:
      type: number
- name: inlinePictures
  uid: word!Word.ContentControl#inlinePictures:member
  package: word!
  fullName: inlinePictures
  summary: >-
    Получает коллекцию объектов inlinePicture в элементе управления содержимым. Коллекция не содержит плавающие рисунки. Только для чтения.


    \[[Набор API: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly inlinePictures: Word.InlinePictureCollection;'
    return:
      type: <xref uid="word!Word.InlinePictureCollection:class" />
- name: lists
  uid: word!Word.ContentControl#lists:member
  package: word!
  fullName: lists
  summary: >-
    Возвращает коллекцию объектов списков в элементе управления содержимым. Только для чтения.


    \[[Набор API: WordApi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly lists: Word.ListCollection;'
    return:
      type: <xref uid="word!Word.ListCollection:class" />
- name: paragraphs
  uid: word!Word.ContentControl#paragraphs:member
  package: word!
  fullName: paragraphs
  summary: >-
    Получает коллекцию объектов абзацев в элементе управления содержимым. Только для чтения.


    \[[Набор API: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly paragraphs: Word.ParagraphCollection;'
    return:
      type: <xref uid="word!Word.ParagraphCollection:class" />
- name: parentBody
  uid: word!Word.ContentControl#parentBody:member
  package: word!
  fullName: parentBody
  summary: >-
    Возвращает родительский текст элемента управления содержимым. Только для чтения.


    \[[Набор API: WordApi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly parentBody: Word.Body;'
    return:
      type: <xref uid="word!Word.Body:class" />
- name: parentContentControl
  uid: word!Word.ContentControl#parentContentControl:member
  package: word!
  fullName: parentContentControl
  summary: >-
    Получает элемент управления содержимым, содержащий элемент управления содержимым. Если родительского управления содержимым не существует, высылается ошибка. Только для чтения.


    \[[Набор API: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly parentContentControl: Word.ContentControl;'
    return:
      type: <xref uid="word!Word.ContentControl:class" />
- name: parentContentControlOrNullObject
  uid: word!Word.ContentControl#parentContentControlOrNullObject:member
  package: word!
  fullName: parentContentControlOrNullObject
  summary: >-
    Получает элемент управления содержимым, содержащий элемент управления содержимым. Возвращает объект null, если родительского управления содержимым нет. Только для чтения.


    \[[Набор API: WordApi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly parentContentControlOrNullObject: Word.ContentControl;'
    return:
      type: <xref uid="word!Word.ContentControl:class" />
- name: parentTable
  uid: word!Word.ContentControl#parentTable:member
  package: word!
  fullName: parentTable
  summary: >-
    Возвращает таблицу, содержащую элемент управления содержимым. Если она не содержится в таблице, высылается ошибка. Только для чтения.


    \[[Набор API: WordApi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly parentTable: Word.Table;'
    return:
      type: <xref uid="word!Word.Table:class" />
- name: parentTableCell
  uid: word!Word.ContentControl#parentTableCell:member
  package: word!
  fullName: parentTableCell
  summary: >-
    Возвращает ячейку таблицы, содержащую элемент управления содержимым. Если она не содержится в ячейке таблицы, вы ошибку. Только для чтения.


    \[[Набор API: WordApi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly parentTableCell: Word.TableCell;'
    return:
      type: <xref uid="word!Word.TableCell:class" />
- name: parentTableCellOrNullObject
  uid: word!Word.ContentControl#parentTableCellOrNullObject:member
  package: word!
  fullName: parentTableCellOrNullObject
  summary: >-
    Возвращает ячейку таблицы, содержащую элемент управления содержимым. Если он находится не в ячейке таблицы, возвращается пустой объект. Только для чтения.


    \[[Набор API: WordApi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly parentTableCellOrNullObject: Word.TableCell;'
    return:
      type: <xref uid="word!Word.TableCell:class" />
- name: parentTableOrNullObject
  uid: word!Word.ContentControl#parentTableOrNullObject:member
  package: word!
  fullName: parentTableOrNullObject
  summary: >-
    Возвращает таблицу, содержащую элемент управления содержимым. Если он находится не в таблице, возвращается пустой объект. Только для чтения.


    \[[Набор API: WordApi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly parentTableOrNullObject: Word.Table;'
    return:
      type: <xref uid="word!Word.Table:class" />
- name: placeholderText
  uid: word!Word.ContentControl#placeholderText:member
  package: word!
  fullName: placeholderText
  summary: >-
    Возвращает или задает замещающий текст элемента управления содержимым. Если элемент управления содержимым пуст, отображается затемненный текст.


    **Примечание.** Операция набора для этого свойства не поддерживается в Word в Интернете.


    \[[Набор API: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'placeholderText: string;'
    return:
      type: string
- name: removeWhenEdited
  uid: word!Word.ContentControl#removeWhenEdited:member
  package: word!
  fullName: removeWhenEdited
  summary: >-
    Возвращает или задает значение, указывающее, удаляется ли элемент управления содержимым после изменения. Является взаимоисключающим со свойством cannotDelete.


    \[[Набор API: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'removeWhenEdited: boolean;'
    return:
      type: boolean
- name: style
  uid: word!Word.ContentControl#style:member
  package: word!
  fullName: style
  summary: >-
    Получает или задает имя стиля для управления содержимым. Используйте это свойство для пользовательских стилей и локализованных имен стилей. Чтобы использовать встроенные стили, поддерживающие несколько языковых стандартов, применяйте свойство styleBuiltIn.


    \[[Набор API: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'style: string;'
    return:
      type: string
- name: styleBuiltIn
  uid: word!Word.ContentControl#styleBuiltIn:member
  package: word!
  fullName: styleBuiltIn
  summary: >-
    Возвращает или задает имя встроенного стиля для элемента управления содержимым. Используйте это свойство для встроенных стилей, поддерживающих несколько языковых стандартов. Чтобы использовать пользовательские стили или локализованные имена стилей, применяйте свойство style.


    \[[Набор API: WordApi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'styleBuiltIn: Word.Style | "Other" | "Normal" | "Heading1" | "Heading2" | "Heading3" | "Heading4" | "Heading5" | "Heading6" | "Heading7" | "Heading8" | "Heading9" | "Toc1" | "Toc2" | "Toc3" | "Toc4" | "Toc5" | "Toc6" | "Toc7" | "Toc8" | "Toc9" | "FootnoteText" | "Header" | "Footer" | "Caption" | "FootnoteReference" | "EndnoteReference" | "EndnoteText" | "Title" | "Subtitle" | "Hyperlink" | "Strong" | "Emphasis" | "NoSpacing" | "ListParagraph" | "Quote" | "IntenseQuote" | "SubtleEmphasis" | "IntenseEmphasis" | "SubtleReference" | "IntenseReference" | "BookTitle" | "Bibliography" | "TocHeading" | "TableGrid" | "PlainTable1" | "PlainTable2" | "PlainTable3" | "PlainTable4" | "PlainTable5" | "TableGridLight" | "GridTable1Light" | "GridTable1Light_Accent1" | "GridTable1Light_Accent2" | "GridTable1Light_Accent3" | "GridTable1Light_Accent4" | "GridTable1Light_Accent5" | "GridTable1Light_Accent6" | "GridTable2" | "GridTable2_Accent1" | "GridTable2_Accent2" | "GridTable2_Accent3" | "GridTable2_Accent4" | "GridTable2_Accent5" | "GridTable2_Accent6" | "GridTable3" | "GridTable3_Accent1" | "GridTable3_Accent2" | "GridTable3_Accent3" | "GridTable3_Accent4" | "GridTable3_Accent5" | "GridTable3_Accent6" | "GridTable4" | "GridTable4_Accent1" | "GridTable4_Accent2" | "GridTable4_Accent3" | "GridTable4_Accent4" | "GridTable4_Accent5" | "GridTable4_Accent6" | "GridTable5Dark" | "GridTable5Dark_Accent1" | "GridTable5Dark_Accent2" | "GridTable5Dark_Accent3" | "GridTable5Dark_Accent4" | "GridTable5Dark_Accent5" | "GridTable5Dark_Accent6" | "GridTable6Colorful" | "GridTable6Colorful_Accent1" | "GridTable6Colorful_Accent2" | "GridTable6Colorful_Accent3" | "GridTable6Colorful_Accent4" | "GridTable6Colorful_Accent5" | "GridTable6Colorful_Accent6" | "GridTable7Colorful" | "GridTable7Colorful_Accent1" | "GridTable7Colorful_Accent2" | "GridTable7Colorful_Accent3" | "GridTable7Colorful_Accent4" | "GridTable7Colorful_Accent5" | "GridTable7Colorful_Accent6" | "ListTable1Light" | "ListTable1Light_Accent1" | "ListTable1Light_Accent2" | "ListTable1Light_Accent3" | "ListTable1Light_Accent4" | "ListTable1Light_Accent5" | "ListTable1Light_Accent6" | "ListTable2" | "ListTable2_Accent1" | "ListTable2_Accent2" | "ListTable2_Accent3" | "ListTable2_Accent4" | "ListTable2_Accent5" | "ListTable2_Accent6" | "ListTable3" | "ListTable3_Accent1" | "ListTable3_Accent2" | "ListTable3_Accent3" | "ListTable3_Accent4" | "ListTable3_Accent5" | "ListTable3_Accent6" | "ListTable4" | "ListTable4_Accent1" | "ListTable4_Accent2" | "ListTable4_Accent3" | "ListTable4_Accent4" | "ListTable4_Accent5" | "ListTable4_Accent6" | "ListTable5Dark" | "ListTable5Dark_Accent1" | "ListTable5Dark_Accent2" | "ListTable5Dark_Accent3" | "ListTable5Dark_Accent4" | "ListTable5Dark_Accent5" | "ListTable5Dark_Accent6" | "ListTable6Colorful" | "ListTable6Colorful_Accent1" | "ListTable6Colorful_Accent2" | "ListTable6Colorful_Accent3" | "ListTable6Colorful_Accent4" | "ListTable6Colorful_Accent5" | "ListTable6Colorful_Accent6" | "ListTable7Colorful" | "ListTable7Colorful_Accent1" | "ListTable7Colorful_Accent2" | "ListTable7Colorful_Accent3" | "ListTable7Colorful_Accent4" | "ListTable7Colorful_Accent5" | "ListTable7Colorful_Accent6";'
    return:
      type: <xref uid="word!Word.Style:enum" /> | "Other" | "Normal" | "Heading1" | "Heading2" | "Heading3" | "Heading4" | "Heading5" | "Heading6" | "Heading7" | "Heading8" | "Heading9" | "Toc1" | "Toc2" | "Toc3" | "Toc4" | "Toc5" | "Toc6" | "Toc7" | "Toc8" | "Toc9" | "FootnoteText" | "Header" | "Footer" | "Caption" | "FootnoteReference" | "EndnoteReference" | "EndnoteText" | "Title" | "Subtitle" | "Hyperlink" | "Strong" | "Emphasis" | "NoSpacing" | "ListParagraph" | "Quote" | "IntenseQuote" | "SubtleEmphasis" | "IntenseEmphasis" | "SubtleReference" | "IntenseReference" | "BookTitle" | "Bibliography" | "TocHeading" | "TableGrid" | "PlainTable1" | "PlainTable2" | "PlainTable3" | "PlainTable4" | "PlainTable5" | "TableGridLight" | "GridTable1Light" | "GridTable1Light_Accent1" | "GridTable1Light_Accent2" | "GridTable1Light_Accent3" | "GridTable1Light_Accent4" | "GridTable1Light_Accent5" | "GridTable1Light_Accent6" | "GridTable2" | "GridTable2_Accent1" | "GridTable2_Accent2" | "GridTable2_Accent3" | "GridTable2_Accent4" | "GridTable2_Accent5" | "GridTable2_Accent6" | "GridTable3" | "GridTable3_Accent1" | "GridTable3_Accent2" | "GridTable3_Accent3" | "GridTable3_Accent4" | "GridTable3_Accent5" | "GridTable3_Accent6" | "GridTable4" | "GridTable4_Accent1" | "GridTable4_Accent2" | "GridTable4_Accent3" | "GridTable4_Accent4" | "GridTable4_Accent5" | "GridTable4_Accent6" | "GridTable5Dark" | "GridTable5Dark_Accent1" | "GridTable5Dark_Accent2" | "GridTable5Dark_Accent3" | "GridTable5Dark_Accent4" | "GridTable5Dark_Accent5" | "GridTable5Dark_Accent6" | "GridTable6Colorful" | "GridTable6Colorful_Accent1" | "GridTable6Colorful_Accent2" | "GridTable6Colorful_Accent3" | "GridTable6Colorful_Accent4" | "GridTable6Colorful_Accent5" | "GridTable6Colorful_Accent6" | "GridTable7Colorful" | "GridTable7Colorful_Accent1" | "GridTable7Colorful_Accent2" | "GridTable7Colorful_Accent3" | "GridTable7Colorful_Accent4" | "GridTable7Colorful_Accent5" | "GridTable7Colorful_Accent6" | "ListTable1Light" | "ListTable1Light_Accent1" | "ListTable1Light_Accent2" | "ListTable1Light_Accent3" | "ListTable1Light_Accent4" | "ListTable1Light_Accent5" | "ListTable1Light_Accent6" | "ListTable2" | "ListTable2_Accent1" | "ListTable2_Accent2" | "ListTable2_Accent3" | "ListTable2_Accent4" | "ListTable2_Accent5" | "ListTable2_Accent6" | "ListTable3" | "ListTable3_Accent1" | "ListTable3_Accent2" | "ListTable3_Accent3" | "ListTable3_Accent4" | "ListTable3_Accent5" | "ListTable3_Accent6" | "ListTable4" | "ListTable4_Accent1" | "ListTable4_Accent2" | "ListTable4_Accent3" | "ListTable4_Accent4" | "ListTable4_Accent5" | "ListTable4_Accent6" | "ListTable5Dark" | "ListTable5Dark_Accent1" | "ListTable5Dark_Accent2" | "ListTable5Dark_Accent3" | "ListTable5Dark_Accent4" | "ListTable5Dark_Accent5" | "ListTable5Dark_Accent6" | "ListTable6Colorful" | "ListTable6Colorful_Accent1" | "ListTable6Colorful_Accent2" | "ListTable6Colorful_Accent3" | "ListTable6Colorful_Accent4" | "ListTable6Colorful_Accent5" | "ListTable6Colorful_Accent6" | "ListTable7Colorful" | "ListTable7Colorful_Accent1" | "ListTable7Colorful_Accent2" | "ListTable7Colorful_Accent3" | "ListTable7Colorful_Accent4" | "ListTable7Colorful_Accent5" | "ListTable7Colorful_Accent6"
- name: subtype
  uid: word!Word.ContentControl#subtype:member
  package: word!
  fullName: subtype
  summary: >-
    Возвращает подтип элемента управления содержимым. Поддерживаемые подтипы: RichTextInline, RichTextParagraphs, RichTextTableCell, RichTextTableRow и RichTextTable для элементов управления форматированным текстом. Только для чтения.


    \[[Набор API: WordApi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly subtype: Word.ContentControlType | "Unknown" | "RichTextInline" | "RichTextParagraphs" | "RichTextTableCell" | "RichTextTableRow" | "RichTextTable" | "PlainTextInline" | "PlainTextParagraph" | "Picture" | "BuildingBlockGallery" | "CheckBox" | "ComboBox" | "DropDownList" | "DatePicker" | "RepeatingSection" | "RichText" | "PlainText";'
    return:
      type: <xref uid="word!Word.ContentControlType:enum" /> | "Unknown" | "RichTextInline" | "RichTextParagraphs" | "RichTextTableCell" | "RichTextTableRow" | "RichTextTable" | "PlainTextInline" | "PlainTextParagraph" | "Picture" | "BuildingBlockGallery" | "CheckBox" | "ComboBox" | "DropDownList" | "DatePicker" | "RepeatingSection" | "RichText" | "PlainText"
- name: tables
  uid: word!Word.ContentControl#tables:member
  package: word!
  fullName: tables
  summary: >-
    Возвращает коллекцию объектов таблиц в элементе управления содержимым. Только для чтения.


    \[[Набор API: WordApi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly tables: Word.TableCollection;'
    return:
      type: <xref uid="word!Word.TableCollection:class" />
- name: tag
  uid: word!Word.ContentControl#tag:member
  package: word!
  fullName: tag
  summary: >-
    Возвращает или задает тег для определения элемента управления содержимым.


    \[[Набор API: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'tag: string;'
    return:
      type: string
      description: "\n\n#### <a name=\"examples\"></a>Примеры\n\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/word/10-content-controls/insert-and-change-content-controls.yaml\n// Traverses each paragraph of the document and wraps a content control on each with either a even or odd tags.\nawait Word.run(async (context) => {\n  let paragraphs = context.document.body.paragraphs;\n  paragraphs.load(\"$none\"); // Don't need any properties; just wrap each paragraph with a content control.\n\n  await context.sync();\n\n  for (let i = 0; i < paragraphs.items.length; i++) {\n    let contentControl = paragraphs.items[i].insertContentControl();\n    // For even, tag \"even\".\n    if (i % 2 === 0) {\n      contentControl.tag = \"even\";\n    } else {\n      contentControl.tag = \"odd\";\n    }\n  }\n  console.log(\"Content controls inserted: \" + paragraphs.items.length);\n\n  await context.sync();\n});\n```"
- name: text
  uid: word!Word.ContentControl#text:member
  package: word!
  fullName: text
  summary: >-
    Возвращает текст элемента управления содержимым. Только для чтения.


    \[[Набор API: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly text: string;'
    return:
      type: string
- name: title
  uid: word!Word.ContentControl#title:member
  package: word!
  fullName: title
  summary: >-
    Получает или задает заголовок для элемента управления содержимым.


    \[[Набор API: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'title: string;'
    return:
      type: string
- name: type
  uid: word!Word.ContentControl#type:member
  package: word!
  fullName: type
  summary: >-
    Получает тип элемента управления содержимым. На данный момент поддерживаются только элементы управления содержимым в формате RTF. Только для чтения.


    \[[Набор API: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly type: Word.ContentControlType | "Unknown" | "RichTextInline" | "RichTextParagraphs" | "RichTextTableCell" | "RichTextTableRow" | "RichTextTable" | "PlainTextInline" | "PlainTextParagraph" | "Picture" | "BuildingBlockGallery" | "CheckBox" | "ComboBox" | "DropDownList" | "DatePicker" | "RepeatingSection" | "RichText" | "PlainText";'
    return:
      type: <xref uid="word!Word.ContentControlType:enum" /> | "Unknown" | "RichTextInline" | "RichTextParagraphs" | "RichTextTableCell" | "RichTextTableRow" | "RichTextTable" | "PlainTextInline" | "PlainTextParagraph" | "Picture" | "BuildingBlockGallery" | "CheckBox" | "ComboBox" | "DropDownList" | "DatePicker" | "RepeatingSection" | "RichText" | "PlainText"
methods:
- name: clear()
  uid: word!Word.ContentControl#clear:member(1)
  package: word!
  fullName: clear()
  summary: >-
    Очищает содержимое элемента управления содержимым. Пользователь может отменить операцию для очищенного содержимого.


    \[[Набор API: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'clear(): void;'
    return:
      type: void
      description: "\n\n#### <a name=\"examples\"></a>Примеры\n\n```javascript\n// Run a batch operation against the Word object model.\nWord.run(function (context) {\n    \n    // Create a proxy object for the content controls collection.\n    var contentControls = context.document.contentControls;\n    \n    // Queue a command to load the content controls collection.\n    contentControls.load('text');\n     \n    // Synchronize the document state by executing the queued commands, \n    // and return a promise to indicate task completion.\n    return context.sync().then(function () {\n        \n        if (contentControls.items.length === 0) {\n            console.log(\"There isn't a content control in this document.\");\n        } else {\n            \n            // Queue a command to clear the contents of the first content control.\n            contentControls.items[0].clear();\n            // Synchronize the document state by executing the queued commands, \n            // and return a promise to indicate task completion.\n            return context.sync().then(function () {\n                console.log('Content control cleared of contents.');\n            });      \n        }\n            \n    });  \n})\n.catch(function (error) {\n    console.log('Error: ' + JSON.stringify(error));\n    if (error instanceof OfficeExtension.Error) {\n        console.log('Debug info: ' + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: delete(keepContent)
  uid: word!Word.ContentControl#delete:member(1)
  package: word!
  fullName: delete(keepContent)
  summary: >-
    Удаляет элемент управления содержимым и его содержимое. Если свойство keepContent имеет значение true, содержимое не будет удалено.


    \[[Набор API: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'delete(keepContent: boolean): void;'
    parameters:
    - id: keepContent
      description: Обязательный параметр. Указывает, следует ли удалить содержимое вместе с элементом управления содержимым. Если свойству keepContent задано значение true, содержимое не удаляется.
      type: boolean
    return:
      type: void
      description: "\n\n#### <a name=\"examples\"></a>Примеры\n\n```javascript\n// Run a batch operation against the Word object model.\nWord.run(function (context) {\n    \n    // Create a proxy object for the content controls collection.\n    var contentControls = context.document.contentControls;\n    \n    // Queue a command to load the content controls collection.\n    contentControls.load('text');\n     \n    // Synchronize the document state by executing the queued commands, \n    // and return a promise to indicate task completion.\n    return context.sync().then(function () {\n        \n        if (contentControls.items.length === 0) {\n            console.log(\"There isn't a content control in this document.\");\n        } else {\n            \n            // Queue a command to delete the first content control. The\n            // contents will remain in the document.\n            contentControls.items[0].delete(true);\n            // Synchronize the document state by executing the queued commands, \n            // and return a promise to indicate task completion.\n            return context.sync().then(function () {\n                console.log('Content control cleared of contents.');\n            });      \n        }\n            \n    });  \n})\n.catch(function (error) {\n    console.log('Error: ' + JSON.stringify(error));\n    if (error instanceof OfficeExtension.Error) {\n        console.log('Debug info: ' + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: getHtml()
  uid: word!Word.ContentControl#getHtml:member(1)
  package: word!
  fullName: getHtml()
  summary: >-
    Получает HTML-представление объекта элементов управления содержимым. При отрисовке на веб-странице или в htmL-представлении форматирование будет близко, но не точно совпадает с форматированием документа. Этот метод не возвращает точно такой же HTML-код для одного и того же документа на различных платформах (Windows, Mac, Word в Интернете и т. д.). Если вам нужна точную точности или согласованность на разных платформах, используйте и преобразуем `ContentControl.getOoxml()` возвращенный XML-код в HTML.


    \[[Набор API: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getHtml(): OfficeExtension.ClientResult<string>;'
    return:
      type: <xref uid="office!OfficeExtension.ClientResult:class" />&lt;string&gt;
      description: "\n\n#### <a name=\"examples\"></a>Примеры\n\n```javascript\n// Run a batch operation against the Word object model.\nWord.run(function (context) {\n    \n    // Create a proxy object for the content controls collection that contains a specific tag.\n    var contentControlsWithTag = context.document.contentControls.getByTag('Customer-Address');\n    \n    // Queue a command to load the tag property for all of content controls. \n    context.load(contentControlsWithTag, 'tag');\n     \n    // Synchronize the document state by executing the queued commands, \n    // and return a promise to indicate task completion.\n    return context.sync().then(function () {\n        if (contentControlsWithTag.items.length === 0) {\n            console.log('No content control found.');\n        }\n        else {\n            // Queue a command to get the HTML contents of the first content control.\n            var html = contentControlsWithTag.items[0].getHtml();\n        \n            // Synchronize the document state by executing the queued commands, \n            // and return a promise to indicate task completion.\n            return context.sync()\n                .then(function () {\n                    console.log('Content control HTML: ' + html.value);\n            });\n        }\n    });  \n})\n.catch(function (error) {\n    console.log('Error: ' + JSON.stringify(error));\n    if (error instanceof OfficeExtension.Error) {\n        console.log('Debug info: ' + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: getOoxml()
  uid: word!Word.ContentControl#getOoxml:member(1)
  package: word!
  fullName: getOoxml()
  summary: >-
    Возвращает OOXML-представление объекта элемента управления содержимым.


    \[[Набор API: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getOoxml(): OfficeExtension.ClientResult<string>;'
    return:
      type: <xref uid="office!OfficeExtension.ClientResult:class" />&lt;string&gt;
      description: "\n\n#### <a name=\"examples\"></a>Примеры\n\n```javascript\n// Run a batch operation against the Word object model.\nWord.run(function (context) {\n    \n    // Create a proxy object for the content controls collection.\n    var contentControls = context.document.contentControls;\n    \n    // Queue a command to load the id property for all of the content controls. \n    context.load(contentControls, 'id');\n     \n    // Synchronize the document state by executing the queued commands, \n    // and return a promise to indicate task completion.\n    return context.sync().then(function () {\n        if (contentControls.items.length === 0) {\n            console.log('No content control found.');\n        }\n        else {\n            // Queue a command to get the OOXML contents of the first content control.\n            var ooxml = contentControls.items[0].getOoxml();\n        \n            // Synchronize the document state by executing the queued commands, \n            // and return a promise to indicate task completion.\n            return context.sync()\n                .then(function () {\n                    console.log('Content control OOXML: ' + ooxml.value);\n            });\n        }\n    });  \n})\n.catch(function (error) {\n    console.log('Error: ' + JSON.stringify(error));\n    if (error instanceof OfficeExtension.Error) {\n        console.log('Debug info: ' + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: getRange(rangeLocation)
  uid: word!Word.ContentControl#getRange:member(1)
  package: word!
  fullName: getRange(rangeLocation)
  summary: >-
    Возвращает весь элемент управления содержимым (либо его начальную или конечную точку) в виде диапазона.


    \[[Набор API: WordApi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getRange(rangeLocation?: Word.RangeLocation): Word.Range;'
    parameters:
    - id: rangeLocation
      description: Необязательно. Расположение диапазона может быть целым, before, Start, End, After и Content.
      type: <xref uid="word!Word.RangeLocation:enum" />
    return:
      type: <xref uid="word!Word.Range:class" />
      description: ''
- name: getRange(rangeLocationString)
  uid: word!Word.ContentControl#getRange:member(2)
  package: word!
  fullName: getRange(rangeLocationString)
  summary: >-
    Возвращает весь элемент управления содержимым (либо его начальную или конечную точку) в виде диапазона.


    \[[Набор API: WordApi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getRange(rangeLocationString?: "Whole" | "Start" | "End" | "Before" | "After" | "Content"): Word.Range;'
    parameters:
    - id: rangeLocationString
      description: Необязательно. Расположение диапазона может быть целым, before, Start, End, After и Content.
      type: "\"Whole\" | \"Start\" | \"End\" | \"Before\" | \"After\" | \"Content\""
    return:
      type: <xref uid="word!Word.Range:class" />
      description: ''
- name: getTextRanges(endingMarks, trimSpacing)
  uid: word!Word.ContentControl#getTextRanges:member(1)
  package: word!
  fullName: getTextRanges(endingMarks, trimSpacing)
  summary: >-
    Получает диапазоны текста в окнах содержимого, используя знаки препинания и/или другие знаки окончания.


    \[[Набор API: WordApi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getTextRanges(endingMarks: string[], trimSpacing?: boolean): Word.RangeCollection;'
    parameters:
    - id: endingMarks
      description: Обязательный. Знаки препинания и/или другие знаки окончания в качестве массива строк.
      type: string[]
    - id: trimSpacing
      description: Необязательно. Указывает, следует ли обрезать пробелы (пробелы, вкладки, разрывы столбцов и конечные знаки абзаца) от начала и конца диапазонов, возвращаемого в коллекции диапазонов. Значение по умолчанию — false, которое указывает, что символы интервала в начале и конце диапазонов включены в коллекцию диапазонов.
      type: boolean
    return:
      type: <xref uid="word!Word.RangeCollection:class" />
      description: ''
- name: insertBreak(breakType, insertLocation)
  uid: word!Word.ContentControl#insertBreak:member(1)
  package: word!
  fullName: insertBreak(breakType, insertLocation)
  summary: >-
    Вставляет разрыв в указанном расположении в основном документе. Этот метод нельзя использовать с элементами управления содержимым RichTextTable, RichTextTableRow и RichTextTableCell.


    \[[Набор API: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'insertBreak(breakType: Word.BreakType, insertLocation: Word.InsertLocation): void;'
    parameters:
    - id: breakType
      description: Обязательный. Тип разрыва.
      type: <xref uid="word!Word.BreakType:enum" />
    - id: insertLocation
      description: Обязательный. Значениями могут быть Start, End, Before и After.
      type: <xref uid="word!Word.InsertLocation:enum" />
    return:
      type: void
      description: ''
- name: insertBreak(breakTypeString, insertLocation)
  uid: word!Word.ContentControl#insertBreak:member(2)
  package: word!
  fullName: insertBreak(breakTypeString, insertLocation)
  summary: >-
    Вставляет разрыв в указанном расположении в основном документе. Этот метод нельзя использовать с элементами управления содержимым RichTextTable, RichTextTableRow и RichTextTableCell.


    \[[Набор API: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'insertBreak(breakTypeString: "Page" | "Next" | "SectionNext" | "SectionContinuous" | "SectionEven" | "SectionOdd" | "Line", insertLocation: "Before" | "After" | "Start" | "End" | "Replace"): void;'
    parameters:
    - id: breakTypeString
      description: Обязательный. Тип разрыва.
      type: "\"Page\" | \"Next\" | \"SectionNext\" | \"SectionContinuous\" | \"SectionEven\" | \"SectionOdd\" | \"Line\""
    - id: insertLocation
      description: Обязательный. Значениями могут быть Start, End, Before и After.
      type: "\"Before\" | \"After\" | \"Start\" | \"End\" | \"Replace\""
    return:
      type: void
      description: "\n\n#### <a name=\"examples\"></a>Примеры\n\n```javascript\n// Run a batch operation against the Word object model.\nWord.run(function (context) {\n    \n    // Create a proxy object for the content controls collection.\n    var contentControls = context.document.contentControls;\n    \n    // Queue a command to load the id property for all of content controls. \n    context.load(contentControls, 'id');\n    \n    // Synchronize the document state by executing the queued commands, \n    // and return a promise to indicate task completion. We now will have \n    // access to the content control collection.\n    return context.sync().then(function () {\n        if (contentControls.items.length === 0) {\n            console.log('No content control found.');\n        }\n        else {\n            // Queue a command to insert a page break after the first content control. \n            contentControls.items[0].insertBreak('page', \"After\");\n            \n            // Synchronize the document state by executing the queued commands, \n            // and return a promise to indicate task completion. \n            return context.sync()\n                .then(function () {\n                    console.log('Inserted a page break after the first content control.');    \n            });\n        }\n    });  \n})\n.catch(function (error) {\n    console.log('Error: ' + JSON.stringify(error));\n    if (error instanceof OfficeExtension.Error) {\n        console.log('Debug info: ' + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: insertFileFromBase64(base64File, insertLocation)
  uid: word!Word.ContentControl#insertFileFromBase64:member(1)
  package: word!
  fullName: insertFileFromBase64(base64File, insertLocation)
  summary: >-
    Вставляет документ в управление содержимым в указанном расположении.


    \[[Набор API: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'insertFileFromBase64(base64File: string, insertLocation: Word.InsertLocation): Word.Range;'
    parameters:
    - id: base64File
      description: Обязательный. Содержимое DOCX-файла в кодированном коде base64.
      type: string
    - id: insertLocation
      description: "Обязательный параметр. Возможные значения: Replace, Start или End. 'Replace' cannot be used with 'RichTextTable' and 'RichTextTableRow' content controls."
      type: <xref uid="word!Word.InsertLocation:enum" />
    return:
      type: <xref uid="word!Word.Range:class" />
      description: ''
- name: insertFileFromBase64(base64File, insertLocationString)
  uid: word!Word.ContentControl#insertFileFromBase64:member(2)
  package: word!
  fullName: insertFileFromBase64(base64File, insertLocationString)
  summary: >-
    Вставляет документ в управление содержимым в указанном расположении.


    \[[Набор API: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'insertFileFromBase64(base64File: string, insertLocationString: "Before" | "After" | "Start" | "End" | "Replace"): Word.Range;'
    parameters:
    - id: base64File
      description: Обязательный. Содержимое DOCX-файла в кодированном коде base64.
      type: string
    - id: insertLocationString
      description: "Обязательный параметр. Возможные значения: Replace, Start или End. 'Replace' cannot be used with 'RichTextTable' and 'RichTextTableRow' content controls."
      type: "\"Before\" | \"After\" | \"Start\" | \"End\" | \"Replace\""
    return:
      type: <xref uid="word!Word.Range:class" />
      description: ''
- name: insertHtml(html, insertLocation)
  uid: word!Word.ContentControl#insertHtml:member(1)
  package: word!
  fullName: insertHtml(html, insertLocation)
  summary: >-
    Вставляет HTML-код в элемент управления содержимым в указанном расположении.


    \[[Набор API: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'insertHtml(html: string, insertLocation: Word.InsertLocation): Word.Range;'
    parameters:
    - id: html
      description: Обязательный параметр. HTML-код, который необходимо вставить в элемент управления содержимым.
      type: string
    - id: insertLocation
      description: "Обязательный параметр. Возможные значения: Replace, Start или End. 'Replace' cannot be used with 'RichTextTable' and 'RichTextTableRow' content controls."
      type: <xref uid="word!Word.InsertLocation:enum" />
    return:
      type: <xref uid="word!Word.Range:class" />
      description: ''
- name: insertHtml(html, insertLocationString)
  uid: word!Word.ContentControl#insertHtml:member(2)
  package: word!
  fullName: insertHtml(html, insertLocationString)
  summary: >-
    Вставляет HTML-код в элемент управления содержимым в указанном расположении.


    \[[Набор API: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'insertHtml(html: string, insertLocationString: "Before" | "After" | "Start" | "End" | "Replace"): Word.Range;'
    parameters:
    - id: html
      description: Обязательный параметр. HTML-код, который необходимо вставить в элемент управления содержимым.
      type: string
    - id: insertLocationString
      description: "Обязательный параметр. Возможные значения: Replace, Start или End. 'Replace' cannot be used with 'RichTextTable' and 'RichTextTableRow' content controls."
      type: "\"Before\" | \"After\" | \"Start\" | \"End\" | \"Replace\""
    return:
      type: <xref uid="word!Word.Range:class" />
      description: "\n\n#### <a name=\"examples\"></a>Примеры\n\n```javascript\n// Run a batch operation against the Word object model.\nWord.run(function (context) {\n    \n    // Create a proxy object for the content controls collection.\n    var contentControls = context.document.contentControls;\n    \n    // Queue a command to load the id property for all of the content controls. \n    context.load(contentControls, 'id');\n     \n    // Synchronize the document state by executing the queued commands, \n    // and return a promise to indicate task completion.\n    return context.sync().then(function () {\n        if (contentControls.items.length === 0) {\n            console.log('No content control found.');\n        }\n        else {\n            // Queue a command to put HTML into the contents of the first content control.\n            contentControls.items[0].insertHtml(\n                '<strong>HTML content inserted into the content control.</strong>',\n                'Start');\n        \n            // Synchronize the document state by executing the queued commands, \n            // and return a promise to indicate task completion.\n            return context.sync()\n                .then(function () {\n                    console.log('Inserted HTML in the first content control.');\n            });\n        }\n    });  \n})\n.catch(function (error) {\n    console.log('Error: ' + JSON.stringify(error));\n    if (error instanceof OfficeExtension.Error) {\n        console.log('Debug info: ' + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: insertInlinePictureFromBase64(base64EncodedImage, insertLocation)
  uid: word!Word.ContentControl#insertInlinePictureFromBase64:member(1)
  package: word!
  fullName: insertInlinePictureFromBase64(base64EncodedImage, insertLocation)
  summary: >-
    Вставляет встроенный рисунок в элемент управления содержимым в указанном расположении.


    \[[Набор API: WordApi 1.2](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'insertInlinePictureFromBase64(base64EncodedImage: string, insertLocation: Word.InsertLocation): Word.InlinePicture;'
    parameters:
    - id: base64EncodedImage
      description: Обязательный параметр. Вставляемое в элемент управления содержимым изображение в кодировке base64.
      type: string
    - id: insertLocation
      description: "Обязательный параметр. Возможные значения: Replace, Start или End. 'Replace' cannot be used with 'RichTextTable' and 'RichTextTableRow' content controls."
      type: <xref uid="word!Word.InsertLocation:enum" />
    return:
      type: <xref uid="word!Word.InlinePicture:class" />
      description: ''
- name: insertInlinePictureFromBase64(base64EncodedImage, insertLocationString)
  uid: word!Word.ContentControl#insertInlinePictureFromBase64:member(2)
  package: word!
  fullName: insertInlinePictureFromBase64(base64EncodedImage, insertLocationString)
  summary: >-
    Вставляет встроенный рисунок в элемент управления содержимым в указанном расположении.


    \[[Набор API: WordApi 1.2](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'insertInlinePictureFromBase64(base64EncodedImage: string, insertLocationString: "Before" | "After" | "Start" | "End" | "Replace"): Word.InlinePicture;'
    parameters:
    - id: base64EncodedImage
      description: Обязательный параметр. Вставляемое в элемент управления содержимым изображение в кодировке base64.
      type: string
    - id: insertLocationString
      description: "Обязательный параметр. Возможные значения: Replace, Start или End. 'Replace' cannot be used with 'RichTextTable' and 'RichTextTableRow' content controls."
      type: "\"Before\" | \"After\" | \"Start\" | \"End\" | \"Replace\""
    return:
      type: <xref uid="word!Word.InlinePicture:class" />
      description: ''
- name: insertOoxml(ooxml, insertLocation)
  uid: word!Word.ContentControl#insertOoxml:member(1)
  package: word!
  fullName: insertOoxml(ooxml, insertLocation)
  summary: >-
    Вставляет OOXML в управление содержимым в указанном расположении.


    \[[Набор API: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'insertOoxml(ooxml: string, insertLocation: Word.InsertLocation): Word.Range;'
    parameters:
    - id: ooxml
      description: Обязательный. OOXML, который необходимо вставить в управление содержимым.
      type: string
    - id: insertLocation
      description: "Обязательный параметр. Возможные значения: Replace, Start или End. 'Replace' cannot be used with 'RichTextTable' and 'RichTextTableRow' content controls."
      type: <xref uid="word!Word.InsertLocation:enum" />
    return:
      type: <xref uid="word!Word.Range:class" />
      description: ''
- name: insertOoxml(ooxml, insertLocationString)
  uid: word!Word.ContentControl#insertOoxml:member(2)
  package: word!
  fullName: insertOoxml(ooxml, insertLocationString)
  summary: >-
    Вставляет OOXML в управление содержимым в указанном расположении.


    \[[Набор API: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'insertOoxml(ooxml: string, insertLocationString: "Before" | "After" | "Start" | "End" | "Replace"): Word.Range;'
    parameters:
    - id: ooxml
      description: Обязательный. OOXML, который необходимо вставить в управление содержимым.
      type: string
    - id: insertLocationString
      description: "Обязательный параметр. Возможные значения: Replace, Start или End. 'Replace' cannot be used with 'RichTextTable' and 'RichTextTableRow' content controls."
      type: "\"Before\" | \"After\" | \"Start\" | \"End\" | \"Replace\""
    return:
      type: <xref uid="word!Word.Range:class" />
      description: "\n\n#### <a name=\"examples\"></a>Примеры\n\n```javascript\n// Run a batch operation against the Word object model.\nWord.run(function (context) {\n    \n    // Create a proxy object for the content controls collection.\n    var contentControls = context.document.contentControls;\n    \n    // Queue a command to load the id property for all of the content controls. \n    context.load(contentControls, 'id');\n     \n    // Synchronize the document state by executing the queued commands, \n    // and return a promise to indicate task completion.\n    return context.sync().then(function () {\n        if (contentControls.items.length === 0) {\n            console.log('No content control found.');\n        }\n        else {\n            // Queue a command to put OOXML into the contents of the first content control.\n            contentControls.items[0].insertOoxml(\"<pkg:package xmlns:pkg='http://schemas.microsoft.com/office/2006/xmlPackage'><pkg:part pkg:name='/_rels/.rels' pkg:contentType='application/vnd.openxmlformats-package.relationships+xml' pkg:padding='512'><pkg:xmlData><Relationships xmlns='http://schemas.openxmlformats.org/package/2006/relationships'><Relationship Id='rId1' Type='http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument' Target='word/document.xml'/></Relationships></pkg:xmlData></pkg:part><pkg:part pkg:name='/word/document.xml' pkg:contentType='application/vnd.openxmlformats-officedocument.wordprocessingml.document.main+xml'><pkg:xmlData><w:document xmlns:w='http://schemas.openxmlformats.org/wordprocessingml/2006/main' ><w:body><w:p><w:pPr><w:spacing w:before='360' w:after='0' w:line='480' w:lineRule='auto'/><w:rPr><w:color w:val='70AD47' w:themeColor='accent6'/><w:sz w:val='28'/></w:rPr></w:pPr><w:r><w:rPr><w:color w:val='70AD47' w:themeColor='accent6'/><w:sz w:val='28'/></w:rPr><w:t>This text has formatting directly applied to achieve its font size, color, line spacing, and paragraph spacing.</w:t></w:r></w:p></w:body></w:document></pkg:xmlData></pkg:part></pkg:package>\", \"End\");\n        \n            // Synchronize the document state by executing the queued commands, \n            // and return a promise to indicate task completion.\n            return context.sync()\n                .then(function () {\n                    console.log('Inserted OOXML in the first content control.');\n            });\n        }\n    });  \n})\n.catch(function (error) {\n    console.log('Error: ' + JSON.stringify(error));\n    if (error instanceof OfficeExtension.Error) {\n        console.log('Debug info: ' + JSON.stringify(error.debugInfo));\n    }\n});\n\n// Read \"Create better add-ins for Word with Office Open XML\" for guidance on working with OOXML.\n// https://docs.microsoft.com/office/dev/add-ins/word/create-better-add-ins-for-word-with-office-open-xml\n```"
- name: insertParagraph(paragraphText, insertLocation)
  uid: word!Word.ContentControl#insertParagraph:member(1)
  package: word!
  fullName: insertParagraph(paragraphText, insertLocation)
  summary: >-
    Вставляет абзац в указанном расположении.


    \[[Набор API: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'insertParagraph(paragraphText: string, insertLocation: Word.InsertLocation): Word.Paragraph;'
    parameters:
    - id: paragraphText
      description: Обязательный параметр. Текст абзаца, который необходимо вставить.
      type: string
    - id: insertLocation
      description: Обязательный. Значениями могут быть Start, End, Before и After. 'Before' and 'After' cannot be used with 'RichTextTable', 'RichTextTableRow' and 'RichTextTableCell' content controls.
      type: <xref uid="word!Word.InsertLocation:enum" />
    return:
      type: <xref uid="word!Word.Paragraph:class" />
      description: ''
- name: insertParagraph(paragraphText, insertLocationString)
  uid: word!Word.ContentControl#insertParagraph:member(2)
  package: word!
  fullName: insertParagraph(paragraphText, insertLocationString)
  summary: >-
    Вставляет абзац в указанном расположении.


    \[[Набор API: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'insertParagraph(paragraphText: string, insertLocationString: "Before" | "After" | "Start" | "End" | "Replace"): Word.Paragraph;'
    parameters:
    - id: paragraphText
      description: Обязательный параметр. Текст абзаца, который необходимо вставить.
      type: string
    - id: insertLocationString
      description: Обязательный. Значениями могут быть Start, End, Before и After. 'Before' and 'After' cannot be used with 'RichTextTable', 'RichTextTableRow' and 'RichTextTableCell' content controls.
      type: "\"Before\" | \"After\" | \"Start\" | \"End\" | \"Replace\""
    return:
      type: <xref uid="word!Word.Paragraph:class" />
      description: "\n\n#### <a name=\"examples\"></a>Примеры\n\n```javascript\n// Run a batch operation against the Word object model.\nWord.run(function (context) {\n    \n    // Create a proxy object for the content controls collection.\n    var contentControls = context.document.contentControls;\n    \n    // Queue a command to load the id property for all of the content controls. \n    context.load(contentControls, 'id');\n     \n    // Synchronize the document state by executing the queued commands, \n    // and return a promise to indicate task completion.\n    return context.sync().then(function () {\n        if (contentControls.items.length === 0) {\n            console.log('No content control found.');\n        }\n        else {\n            // Queue a command to insert a paragraph after the first content control. \n            contentControls.items[0].insertParagraph('Text of the inserted paragraph.', 'After');\n        \n            // Synchronize the document state by executing the queued commands, \n            // and return a promise to indicate task completion.\n            return context.sync()\n                .then(function () {\n                    console.log('Inserted a paragraph after the first content control.');\n            });\n        }\n    });  \n})\n.catch(function (error) {\n    console.log('Error: ' + JSON.stringify(error));\n    if (error instanceof OfficeExtension.Error) {\n        console.log('Debug info: ' + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: insertTable(rowCount, columnCount, insertLocation, values)
  uid: word!Word.ContentControl#insertTable:member(1)
  package: word!
  fullName: insertTable(rowCount, columnCount, insertLocation, values)
  summary: >-
    Вставляет таблицу с указанным количеством строк и столбцов в элемент управления содержимым или рядом с ним.


    \[[Набор API: WordApi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'insertTable(rowCount: number, columnCount: number, insertLocation: Word.InsertLocation, values?: string[][]): Word.Table;'
    parameters:
    - id: rowCount
      description: Обязательный. Количество строк в таблице.
      type: number
    - id: columnCount
      description: Обязательный. Количество столбцов в таблице.
      type: number
    - id: insertLocation
      description: Обязательный. Значениями могут быть Start, End, Before и After. 'Before' and 'After' cannot be used with 'RichTextTable', 'RichTextTableRow' and 'RichTextTableCell' content controls.
      type: <xref uid="word!Word.InsertLocation:enum" />
    - id: values
      description: Необязательный двухмерный массив. Ячейки заполняются, если в массиве указаны соответствующие строки.
      type: string[][]
    return:
      type: <xref uid="word!Word.Table:class" />
      description: ''
- name: insertTable(rowCount, columnCount, insertLocationString, values)
  uid: word!Word.ContentControl#insertTable:member(2)
  package: word!
  fullName: insertTable(rowCount, columnCount, insertLocationString, values)
  summary: >-
    Вставляет таблицу с указанным количеством строк и столбцов в элемент управления содержимым или рядом с ним.


    \[[Набор API: WordApi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'insertTable(rowCount: number, columnCount: number, insertLocationString: "Before" | "After" | "Start" | "End" | "Replace", values?: string[][]): Word.Table;'
    parameters:
    - id: rowCount
      description: Обязательный. Количество строк в таблице.
      type: number
    - id: columnCount
      description: Обязательный. Количество столбцов в таблице.
      type: number
    - id: insertLocationString
      description: Обязательный. Значениями могут быть Start, End, Before и After. 'Before' and 'After' cannot be used with 'RichTextTable', 'RichTextTableRow' and 'RichTextTableCell' content controls.
      type: "\"Before\" | \"After\" | \"Start\" | \"End\" | \"Replace\""
    - id: values
      description: Необязательный двухмерный массив. Ячейки заполняются, если в массиве указаны соответствующие строки.
      type: string[][]
    return:
      type: <xref uid="word!Word.Table:class" />
      description: ''
- name: insertText(text, insertLocation)
  uid: word!Word.ContentControl#insertText:member(1)
  package: word!
  fullName: insertText(text, insertLocation)
  summary: >-
    Вставляет текст в элемент управления содержимым в указанном расположении.


    \[[Набор API: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'insertText(text: string, insertLocation: Word.InsertLocation): Word.Range;'
    parameters:
    - id: text
      description: Обязательный параметр. Текст, который необходимо вставить в элемент управления содержимым.
      type: string
    - id: insertLocation
      description: "Обязательный параметр. Возможные значения: Replace, Start или End. 'Replace' cannot be used with 'RichTextTable' and 'RichTextTableRow' content controls."
      type: <xref uid="word!Word.InsertLocation:enum" />
    return:
      type: <xref uid="word!Word.Range:class" />
      description: ''
- name: insertText(text, insertLocationString)
  uid: word!Word.ContentControl#insertText:member(2)
  package: word!
  fullName: insertText(text, insertLocationString)
  summary: >-
    Вставляет текст в элемент управления содержимым в указанном расположении.


    \[[Набор API: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'insertText(text: string, insertLocationString: "Before" | "After" | "Start" | "End" | "Replace"): Word.Range;'
    parameters:
    - id: text
      description: Обязательный параметр. Текст, который необходимо вставить в элемент управления содержимым.
      type: string
    - id: insertLocationString
      description: "Обязательный параметр. Возможные значения: Replace, Start или End. 'Replace' cannot be used with 'RichTextTable' and 'RichTextTableRow' content controls."
      type: "\"Before\" | \"After\" | \"Start\" | \"End\" | \"Replace\""
    return:
      type: <xref uid="word!Word.Range:class" />
      description: "\n\n#### <a name=\"examples\"></a>Примеры\n\n```javascript\n// Run a batch operation against the Word object model.\nWord.run(function (context) {\n    \n    // Create a proxy object for the content controls collection.\n    var contentControls = context.document.contentControls;\n    \n    // Queue a command to load the id property for all of the content controls. \n    context.load(contentControls, 'id');\n     \n    // Synchronize the document state by executing the queued commands, \n    // and return a promise to indicate task completion.\n    return context.sync().then(function () {\n        if (contentControls.items.length === 0) {\n            console.log('No content control found.');\n        }\n        else {\n            // Queue a command to replace text in the first content control. \n            contentControls.items[0].insertText('Replaced text in the first content control.', 'Replace');\n        \n            // Synchronize the document state by executing the queued commands, \n            // and return a promise to indicate task completion.\n            return context.sync()\n                .then(function () {\n                    console.log('Replaced text in the first content control.');\n            });\n        }\n    });  \n})\n.catch(function (error) {\n    console.log('Error: ' + JSON.stringify(error));\n    if (error instanceof OfficeExtension.Error) {\n        console.log('Debug info: ' + JSON.stringify(error.debugInfo));\n    }\n});\n\n// The Silly stories add-in sample shows how to use the insertText method.\n// https://aka.ms/sillystorywordaddin\n```"
- name: load(options)
  uid: word!Word.ContentControl#load:member(1)
  package: word!
  fullName: load(options)
  summary: Добавляет в очередь команду для загрузки указанных свойств объекта. Перед чтением свойств требуется вызвать метод `context.sync()`.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'load(options?: Word.Interfaces.ContentControlLoadOptions): Word.ContentControl;'
    parameters:
    - id: options
      description: Предоставляет параметры, для которых загружаются свойства объекта.
      type: <xref uid="word!Word.Interfaces.ContentControlLoadOptions:interface" />
    return:
      type: <xref uid="word!Word.ContentControl:class" />
      description: "\n\n#### <a name=\"examples\"></a>Примеры\n\n```javascript\n// Load all of the content control properties\n// Run a batch operation against the Word object model.\nWord.run(function (context) {\n    \n    // Create a proxy object for the content controls collection.\n    var contentControls = context.document.contentControls;\n    \n    // Queue a command to load the id property for all of the content controls. \n    context.load(contentControls, 'id');\n     \n    // Synchronize the document state by executing the queued commands, \n    // and return a promise to indicate task completion.\n    return context.sync().then(function () {\n        if (contentControls.items.length === 0) {\n            console.log('No content control found.');\n        }\n        else {\n            // Queue a command to load the properties on the first content control. \n            contentControls.items[0].load(  'appearance,' +\n                                            'cannotDelete,' +\n                                            'cannotEdit,' +\n                                            'id,' +\n                                            'placeHolderText,' +\n                                            'removeWhenEdited,' +\n                                            'title,' +\n                                            'text,' +\n                                            'type,' +\n                                            'style,' +\n                                            'tag,' +\n                                            'font/size,' +\n                                            'font/name,' +\n                                            'font/color');             \n        \n            // Synchronize the document state by executing the queued commands, \n            // and return a promise to indicate task completion.\n            return context.sync()\n                .then(function () {\n                    console.log('Property values of the first content control:' + \n                        '   ----- appearance: ' + contentControls.items[0].appearance + \n                        '   ----- cannotDelete: ' + contentControls.items[0].cannotDelete +\n                        '   ----- cannotEdit: ' + contentControls.items[0].cannotEdit +\n                        '   ----- color: ' + contentControls.items[0].color +\n                        '   ----- id: ' + contentControls.items[0].id +\n                        '   ----- placeHolderText: ' + contentControls.items[0].placeholderText +\n                        '   ----- removeWhenEdited: ' + contentControls.items[0].removeWhenEdited +\n                        '   ----- title: ' + contentControls.items[0].title +\n                        '   ----- text: ' + contentControls.items[0].text +\n                        '   ----- type: ' + contentControls.items[0].type +\n                        '   ----- style: ' + contentControls.items[0].style +\n                        '   ----- tag: ' + contentControls.items[0].tag +\n                        '   ----- font size: ' + contentControls.items[0].font.size +\n                        '   ----- font name: ' + contentControls.items[0].font.name +\n                        '   ----- font color: ' + contentControls.items[0].font.color);\n            });\n        }\n    });  \n})\n.catch(function (error) {\n    console.log('Error: ' + JSON.stringify(error));\n    if (error instanceof OfficeExtension.Error) {\n        console.log('Debug info: ' + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: load(propertyNames)
  uid: word!Word.ContentControl#load:member(2)
  package: word!
  fullName: load(propertyNames)
  summary: Добавляет в очередь команду для загрузки указанных свойств объекта. Перед чтением свойств требуется вызвать метод `context.sync()`.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'load(propertyNames?: string | string[]): Word.ContentControl;'
    parameters:
    - id: propertyNames
      description: Строка с делегировкой запятой или массив строк, которые указывают свойства для загрузки.
      type: string | string[]
    return:
      type: <xref uid="word!Word.ContentControl:class" />
      description: ''
- name: load(propertyNamesAndPaths)
  uid: word!Word.ContentControl#load:member(3)
  package: word!
  fullName: load(propertyNamesAndPaths)
  summary: Добавляет в очередь команду для загрузки указанных свойств объекта. Перед чтением свойств требуется вызвать метод `context.sync()`.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: >-
      load(propertyNamesAndPaths?: {
                  select?: string;
                  expand?: string;
              }): Word.ContentControl;
    parameters:
    - id: propertyNamesAndPaths
      description: '`propertyNamesAndPaths.select` — это строка с делегировкой запятой, которая указывает свойства для загрузки и является строкой с делегировкой запятой, которая определяет свойства навигации для `propertyNamesAndPaths.expand` загрузки.'
      type: >-
        {
                    select?: string;
                    expand?: string;
                }
    return:
      type: <xref uid="word!Word.ContentControl:class" />
      description: ''
- name: search(searchText, searchOptions)
  uid: word!Word.ContentControl#search:member(1)
  package: word!
  fullName: search(searchText, searchOptions)
  summary: >-
    Выполняет поиск с указанным Объектом SearchOptions в области объекта управления содержимым. Результат поиска — это коллекция объектов диапазона.


    \[[Набор API: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: >-
      search(searchText: string, searchOptions?: Word.SearchOptions | {
                  ignorePunct?: boolean;
                  ignoreSpace?: boolean;
                  matchCase?: boolean;
                  matchPrefix?: boolean;
                  matchSuffix?: boolean;
                  matchWholeWord?: boolean;
                  matchWildcards?: boolean;
              }): Word.RangeCollection;
    parameters:
    - id: searchText
      description: Обязательный параметр. Текст для поиска.
      type: string
    - id: searchOptions
      description: Необязательный параметр. Параметры поиска.
      type: >-
        <xref uid="word!Word.SearchOptions:class" /> | {
                    ignorePunct?: boolean;
                    ignoreSpace?: boolean;
                    matchCase?: boolean;
                    matchPrefix?: boolean;
                    matchSuffix?: boolean;
                    matchWholeWord?: boolean;
                    matchWildcards?: boolean;
                }
    return:
      type: <xref uid="word!Word.RangeCollection:class" />
      description: "\n\n#### <a name=\"examples\"></a>Примеры\n\n```javascript\n// Run a batch operation against the Word object model.\nWord.run(function (context) {\n    \n    // Create a proxy object for the content controls collection.\n    var contentControls = context.document.contentControls;\n    \n    // Queue a command to load the id property for all of the content controls. \n    context.load(contentControls, 'id');\n     \n    // Synchronize the document state by executing the queued commands, \n    // and return a promise to indicate task completion.\n    return context.sync().then(function () {\n        if (contentControls.items.length === 0) {\n            console.log('No content control found.');\n        }\n        else {\n            // Queue a command to select the first content control.\n            contentControls.items[0].select();\n        \n            // Synchronize the document state by executing the queued commands, \n            // and return a promise to indicate task completion.\n            return context.sync()\n                .then(function () {\n                    console.log('Selected the first content control.');\n            });\n        }\n    });  \n})\n.catch(function (error) {\n    console.log('Error: ' + JSON.stringify(error));\n    if (error instanceof OfficeExtension.Error) {\n        console.log('Debug info: ' + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: select(selectionMode)
  uid: word!Word.ContentControl#select:member(1)
  package: word!
  fullName: select(selectionMode)
  summary: >-
    Выбирает элемент управления контентом. При этом Word переходит к выделенному фрагменту.


    \[[Набор API: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'select(selectionMode?: Word.SelectionMode): void;'
    parameters:
    - id: selectionMode
      description: 'Необязательный параметр. Возможные режимы выбора: Select, Start и End. Значение по умолчанию — Select.'
      type: <xref uid="word!Word.SelectionMode:enum" />
    return:
      type: void
      description: ''
- name: select(selectionModeString)
  uid: word!Word.ContentControl#select:member(2)
  package: word!
  fullName: select(selectionModeString)
  summary: >-
    Выбирает элемент управления контентом. При этом Word переходит к выделенному фрагменту.


    \[[Набор API: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'select(selectionModeString?: "Select" | "Start" | "End"): void;'
    parameters:
    - id: selectionModeString
      description: 'Необязательный параметр. Возможные режимы выбора: Select, Start и End. Значение по умолчанию — Select.'
      type: "\"Select\" | \"Start\" | \"End\""
    return:
      type: void
      description: ''
- name: set(properties, options)
  uid: word!Word.ContentControl#set:member(1)
  package: word!
  fullName: set(properties, options)
  summary: Задает несколько свойств объекта одновременно. Можно передать либо обычный объект с соответствующими свойствами, либо другой объект API того же типа.
  remarks: >-
    Этот метод имеет следующую дополнительную подпись:


    `set(properties: Word.ContentControl): void`


    #### <a name="examples"></a>Примеры


    ```typescript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/word/10-content-controls/insert-and-change-content-controls.yaml

    // Adds title and colors to odd and even content controls and changes their appearance.

    await Word.run(async (context) => {
      // Gets the complete sentence (as range) associated with the insertion point.
      let evenContentControls = context.document.contentControls.getByTag("even");
      let oddContentControls = context.document.contentControls.getByTag("odd");
      evenContentControls.load("length");
      oddContentControls.load("length");

      await context.sync();

      for (let i = 0; i < evenContentControls.items.length; i++) {
        // Change a few properties and append a paragraph
        evenContentControls.items[i].set({
          color: "red",
          title: "Odd ContentControl #" + (i + 1),
          appearance: "Tags"
        });
        evenContentControls.items[i].insertParagraph("This is an odd content control", "End");
      }

      for (let j = 0; j < oddContentControls.items.length; j++) {
        // Change a few properties and append a paragraph
        oddContentControls.items[j].set({
          color: "green",
          title: "Even ContentControl #" + (j + 1),
          appearance: "Tags"
        });
        oddContentControls.items[j].insertHtml("This is an <b>even</b> content control", "End");
      }

      await context.sync();
    });

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'set(properties: Interfaces.ContentControlUpdateData, options?: OfficeExtension.UpdateOptions): void;'
    parameters:
    - id: properties
      description: Объект JavaScript со структурированными свойствами аморфически перенастройно к свойствам объекта, для которого вызван метод.
      type: <xref uid="word!Word.Interfaces.ContentControlUpdateData:interface" />
    - id: options
      description: Предоставляет возможность подавления ошибок, если объект свойств пытается установить свойства только для чтения.
      type: <xref uid="office!OfficeExtension.UpdateOptions:interface" />
    return:
      type: void
      description: ''
- name: set(properties)
  uid: word!Word.ContentControl#set:member(2)
  package: word!
  fullName: set(properties)
  summary: Задает несколько свойств объекта одновременно на основе существующего загруженного объекта.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'set(properties: Word.ContentControl): void;'
    parameters:
    - id: properties
      description: ''
      type: <xref uid="word!Word.ContentControl:class" />
    return:
      type: void
      description: ''
- name: split(delimiters, multiParagraphs, trimDelimiters, trimSpacing)
  uid: word!Word.ContentControl#split:member(1)
  package: word!
  fullName: split(delimiters, multiParagraphs, trimDelimiters, trimSpacing)
  summary: >-
    Разделяет элемент управления содержимым на дочерние диапазоны с помощью разделителей.


    \[[Набор API: WordApi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'split(delimiters: string[], multiParagraphs?: boolean, trimDelimiters?: boolean, trimSpacing?: boolean): Word.RangeCollection;'
    parameters:
    - id: delimiters
      description: Обязательный. Делегаторы в качестве массива строк.
      type: string[]
    - id: multiParagraphs
      description: Необязательно. Указывает, может ли возвращенный диапазон охватывать несколько абзацев. Значение по умолчанию — false, что указывает на то, что границы абзаца также используются в качестве разграничельщиков.
      type: boolean
    - id: trimDelimiters
      description: Необязательно. Указывает, следует ли обрезать отделицы от диапазонов в коллекции диапазонов. Значение по умолчанию — false, которое указывает на то, что эти значения включены в диапазоны, возвращаемую в коллекцию диапазонов.
      type: boolean
    - id: trimSpacing
      description: Необязательно. Указывает, следует ли обрезать пробелы (пробелы, вкладки, разрывы столбцов и конечные знаки абзаца) от начала и конца диапазонов, возвращаемого в коллекции диапазонов. Значение по умолчанию — false, которое указывает, что символы интервала в начале и конце диапазонов включены в коллекцию диапазонов.
      type: boolean
    return:
      type: <xref uid="word!Word.RangeCollection:class" />
      description: ''
- name: toJSON()
  uid: word!Word.ContentControl#toJSON:member(1)
  package: word!
  fullName: toJSON()
  summary: Переопределяет метод JavaScript, чтобы обеспечить более полезные выходные данные при передании объекта `toJSON()` API `JSON.stringify()`<!-- -->. (`JSON.stringify`<!-- -->, в свою очередь, вызывает метод объекта, `toJSON` который передается ему.) В то время как исходный объект Word.ContentControl является объектом API, метод возвращает обычный объект `toJSON` JavaScript (введите как `Word.Interfaces.ContentControlData`<!-- -->), который содержит неглубокие копии всех загруженных свойств из исходного объекта.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'toJSON(): Word.Interfaces.ContentControlData;'
    return:
      type: <xref uid="word!Word.Interfaces.ContentControlData:interface" />
      description: ''
- name: track()
  uid: word!Word.ContentControl#track:member(1)
  package: word!
  fullName: track()
  summary: Отслеживает объект для автоматической корректировки с учетом окружающих изменений в документе. Этот вызов является кратким `context.trackedObjects.add(thisObject)`<!-- -->. Если вы используете этот объект во всех вызовах и вне последовательного выполнения пакета ".run" и получаете ошибку InvalidObjectPath при установке свойства или вызове метода для объекта, необходимо было добавить объект в отслеживаемую коллекцию объектов при первом создании `.sync` объекта.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'track(): Word.ContentControl;'
    return:
      type: <xref uid="word!Word.ContentControl:class" />
      description: ''
- name: untrack()
  uid: word!Word.ContentControl#untrack:member(1)
  package: word!
  fullName: untrack()
  summary: Освобождает память, связанную с этим объектом, если он ранее отслеживался. Этот вызов является кратким для `context.trackedObjects.remove(thisObject)`<!-- -->. Наличие большого количества отслеживаемых объектов замедляет ведущее приложение, поэтому не забывайте освобождать любые добавленные объекты после завершения их использования. Вам потребуется позвонить, `context.sync()` прежде чем выпуск памяти вступает в силу.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'untrack(): Word.ContentControl;'
    return:
      type: <xref uid="word!Word.ContentControl:class" />
      description: ''
extends: <xref uid="office!OfficeExtension.ClientObject:class" />
metadata:
  ms.openlocfilehash: fa7a9de784f9a4ea854fb9f1563a90d78e8f88a8
  ms.sourcegitcommit: 6702d1aafaf1d8114bcf5e5eeb5d7833c108d56a
  ms.translationtype: MT
  ms.contentlocale: ru-RU
  ms.lasthandoff: 12/10/2020
  ms.locfileid: "49623421"
