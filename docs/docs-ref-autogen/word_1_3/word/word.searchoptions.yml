### YamlMime:UniversalReference
items:
  - uid: 'word!Word.SearchOptions:class'
    summary: |-
      Указывает параметры, которые необходимо включить в операцию поиска.

      \[[Набор API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: Word.SearchOptions
    fullName: Word.SearchOptions
    langs:
      - typeScript
    type: class
    extends:
      - 'word!OfficeExtension.ClientObject:class'
    package: word!
    children:
      - 'word!Word.SearchOptions#context:member'
      - 'word!Word.SearchOptions#ignorePunct:member'
      - 'word!Word.SearchOptions#ignoreSpace:member'
      - 'word!Word.SearchOptions#load:member(1)'
      - 'word!Word.SearchOptions#load:member(2)'
      - 'word!Word.SearchOptions#load:member(3)'
      - 'word!Word.SearchOptions#matchCase:member'
      - 'word!Word.SearchOptions#matchPrefix:member'
      - 'word!Word.SearchOptions#matchSuffix:member'
      - 'word!Word.SearchOptions#matchWholeWord:member'
      - 'word!Word.SearchOptions#matchWildcards:member'
      - 'word!Word.SearchOptions#matchWildCards:member'
      - 'word!Word.SearchOptions.newObject:member(1)'
      - 'word!Word.SearchOptions#set:member(1)'
      - 'word!Word.SearchOptions#set:member(2)'
      - 'word!Word.SearchOptions#toJSON:member(1)'
  - uid: 'word!Word.SearchOptions#context:member'
    summary: 'Контекст запроса, связанный с объектом. Это подсоединяет процесс надстройки к процессу ведущего приложения Office.'
    name: context
    fullName: context
    langs:
      - typeScript
    type: property
    syntax:
      content: 'context: RequestContext;'
      return:
        type:
          - 'word!Word.RequestContext:class'
  - uid: 'word!Word.SearchOptions#ignorePunct:member'
    summary: |-
      Возвращает или задает значение, которое указывает, следует ли пропустить все знаки препинания между словами. Соответствует установленному флажку "Не учитывать знаки препинания" в диалоговом окне "Найти и заменить".

      \[[Набор API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: ignorePunct
    fullName: ignorePunct
    langs:
      - typeScript
    type: property
    syntax:
      content: 'ignorePunct: boolean;'
      return:
        type:
          - boolean
  - uid: 'word!Word.SearchOptions#ignoreSpace:member'
    summary: |-
      Получает или задает значение, указывающее, следует ли игнорировать все пробелы между словами. Соответствует флажку игнорировать пробелы в диалоговом окне "найти и заменить".

      \[[Набор API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: ignoreSpace
    fullName: ignoreSpace
    langs:
      - typeScript
    type: property
    syntax:
      content: 'ignoreSpace: boolean;'
      return:
        type:
          - boolean
  - uid: 'word!Word.SearchOptions#load:member(1)'
    summary: Добавляет в очередь команду для загрузки указанных свойств объекта. Перед чтением свойств необходимо вызвать метод context.sync().
    remarks: |-
      В дополнение к этой подписи этот метод имеет следующие подписи:

      `load(option?: string | string[]): Word.SearchOptions`-WHERE — это строка с разделителями-запятыми или массив строк, указывающий свойства для загрузки.

      `load(option?: { select?: string; expand?: string; }): Word.SearchOptions`-WHERE. Select — это строка с разделителями-запятыми, указывающая свойства для загрузки и параметры. Expand — это строка с разделителями-запятыми, указывающая свойства навигации для загрузки.

      `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Word.SearchOptions`— Доступно только для типов коллекций. Он аналогичен предыдущей подписи. Option. Top указывает максимальное количество элементов коллекции, которые можно включить в результат. Option. skip указывает количество элементов, которые будут пропущены и не включены в результат. Если указан параметр Option. Top, результирующий набор начнется после пропуска указанного числа элементов.

      #### <a name="examples"></a>Примеры

      ```javascript
      // Ignore punctuation search
      // Run a batch operation against the Word object model.
      Word.run(function (context) {
          
          // Queue a command to search the document and ignore punctuation.
          var searchResults = context.document.body.search('video you', {ignorePunct: true});

          // Queue a command to load the search results and get the font property values.
          context.load(searchResults, 'font');
          
          // Synchronize the document state by executing the queued commands, 
          // and return a promise to indicate task completion.
          return context.sync().then(function () {
              console.log('Found count: ' + searchResults.items.length);

              // Queue a set of commands to change the font for each found item.
              for (var i = 0; i < searchResults.items.length; i++) {
                  searchResults.items[i].font.color = 'purple';
                  searchResults.items[i].font.highlightColor = '#FFFF00'; //Yellow
                  searchResults.items[i].font.bold = true;
              }
              
              // Synchronize the document state by executing the queued commands, 
              // and return a promise to indicate task completion.
              return context.sync();
          });  
      })
      .catch(function (error) {
          console.log('Error: ' + JSON.stringify(error));
          if (error instanceof OfficeExtension.Error) {
              console.log('Debug info: ' + JSON.stringify(error.debugInfo));
          }
      });
      ```
      ```javascript
      // Search based on a prefix
      // Run a batch operation against the Word object model.
      Word.run(function (context) {
          
          // Queue a command to search the document based on a prefix.
          var searchResults = context.document.body.search('vid', {matchPrefix: true});

          // Queue a command to load the search results and get the font property values.
          context.load(searchResults, 'font');
          
          // Synchronize the document state by executing the queued commands, 
          // and return a promise to indicate task completion.
          return context.sync().then(function () {
              console.log('Found count: ' + searchResults.items.length);

              // Queue a set of commands to change the font for each found item.
              for (var i = 0; i < searchResults.items.length; i++) {
                  searchResults.items[i].font.color = 'purple';
                  searchResults.items[i].font.highlightColor = '#FFFF00'; //Yellow
                  searchResults.items[i].font.bold = true;
              }
              
              // Synchronize the document state by executing the queued commands, 
              // and return a promise to indicate task completion.
              return context.sync();
          });  
      })
      .catch(function (error) {
          console.log('Error: ' + JSON.stringify(error));
          if (error instanceof OfficeExtension.Error) {
              console.log('Debug info: ' + JSON.stringify(error.debugInfo));
          }
      });
      ```
      ```javascript
      // Search based on a suffix
      // Run a batch operation against the Word object model.
      Word.run(function (context) {

          // Queue a command to search the document for any string of characters after 'ly'.
          var searchResults = context.document.body.search('ly', {matchSuffix: true});

          // Queue a command to load the search results and get the font property values.
          context.load(searchResults, 'font');
          
          // Synchronize the document state by executing the queued commands, 
          // and return a promise to indicate task completion.
          return context.sync().then(function () {
              console.log('Found count: ' + searchResults.items.length);

              // Queue a set of commands to change the font for each found item.
              for (var i = 0; i < searchResults.items.length; i++) {
                  searchResults.items[i].font.color = 'orange';
                  searchResults.items[i].font.highlightColor = 'black';
                  searchResults.items[i].font.bold = true;
              }
              
              // Synchronize the document state by executing the queued commands, 
              // and return a promise to indicate task completion.
              return context.sync();
          });  
      })
      .catch(function (error) {
          console.log('Error: ' + JSON.stringify(error));
          if (error instanceof OfficeExtension.Error) {
              console.log('Debug info: ' + JSON.stringify(error.debugInfo));
          }
      });
      ```
      ```javascript
      // Search using a wildcard
      // Run a batch operation against the Word object model.
      Word.run(function (context) {
          
          // Queue a command to search the document with a wildcard
          // for any string of characters that starts with 'to' and ends with 'n'.
          var searchResults = context.document.body.search('to*n', {matchWildCards: true});

          // Queue a command to load the search results and get the font property values.
          context.load(searchResults, 'font');
          
          // Synchronize the document state by executing the queued commands, 
          // and return a promise to indicate task completion.
          return context.sync().then(function () {
              console.log('Found count: ' + searchResults.items.length);

              // Queue a set of commands to change the font for each found item.
              for (var i = 0; i < searchResults.items.length; i++) {
                  searchResults.items[i].font.color = 'purple';
                  searchResults.items[i].font.highlightColor = 'pink';
                  searchResults.items[i].font.bold = true;
              }
              
              // Synchronize the document state by executing the queued commands, 
              // and return a promise to indicate task completion.
              return context.sync();
          });  
      })
      .catch(function (error) {
          console.log('Error: ' + JSON.stringify(error));
          if (error instanceof OfficeExtension.Error) {
              console.log('Debug info: ' + JSON.stringify(error.debugInfo));
          }
      });
      ```
    name: load(option)
    fullName: load(option)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(option?: Word.Interfaces.SearchOptionsLoadOptions): Word.SearchOptions;'
      return:
        type:
          - 'word!Word.SearchOptions:class'
        description: ''
      parameters:
        - id: option
          description: ''
          type:
            - 'word!Word.Interfaces.SearchOptionsLoadOptions:interface'
  - uid: 'word!Word.SearchOptions#load:member(2)'
    summary: Добавляет в очередь команду для загрузки указанных свойств объекта. Перед чтением свойств `context.sync()` необходимо вызвать метод.
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): Word.SearchOptions;'
      return:
        type:
          - 'word!Word.SearchOptions:class'
        description: ''
      parameters:
        - id: propertyNames
          description: 'Строка, разделенная запятыми, или массив строк, указывающий свойства для загрузки.'
          type:
            - 'string | string[]'
  - uid: 'word!Word.SearchOptions#load:member(3)'
    summary: Добавляет в очередь команду для загрузки указанных свойств объекта. Перед чтением свойств `context.sync()` необходимо вызвать метод.
    name: load(propertyNamesAndPaths)
    fullName: load(propertyNamesAndPaths)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNamesAndPaths?: { select?: string; expand?: string; }): Word.SearchOptions;'
      return:
        type:
          - 'word!Word.SearchOptions:class'
        description: ''
      parameters:
        - id: propertyNamesAndPaths
          description: 'Где Пропертинамесандпасс. Select — это строка с разделителями-запятыми, задающая свойства для загрузки, и Пропертинамесандпасс. Expand — это строка с разделителями-запятыми, указывающая свойства навигации для загрузки.'
          type:
            - '{ select?: string; expand?: string; }'
  - uid: 'word!Word.SearchOptions#matchCase:member'
    summary: |-
      Возвращает или задает значение, которое указывает, следует ли выполнять поиск с учетом регистра. Соответствует флажку "учитывать регистр" в диалоговом окне "найти и заменить".

      \[[Набор API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: matchCase
    fullName: matchCase
    langs:
      - typeScript
    type: property
    syntax:
      content: 'matchCase: boolean;'
      return:
        type:
          - boolean
  - uid: 'word!Word.SearchOptions#matchPrefix:member'
    summary: |-
      Возвращает или задает значение, которое указывает, нужно ли учитывать слова, начинающиеся со строки поиска. Соответствует установленному флажку "Учитывать префикс" в диалоговом окне "Найти и заменить".

      \[[Набор API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: matchPrefix
    fullName: matchPrefix
    langs:
      - typeScript
    type: property
    syntax:
      content: 'matchPrefix: boolean;'
      return:
        type:
          - boolean
  - uid: 'word!Word.SearchOptions#matchSuffix:member'
    summary: |-
      Возвращает или задает значение, указывающее, нужно ли учитывать слова, которые заканчиваются строкой поиска. Соответствует установленному флажку "Учитывать суффикс" в диалоговом окне "Найти и заменить".

      \[[Набор API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: matchSuffix
    fullName: matchSuffix
    langs:
      - typeScript
    type: property
    syntax:
      content: 'matchSuffix: boolean;'
      return:
        type:
          - boolean
  - uid: 'word!Word.SearchOptions#matchWholeWord:member'
    summary: |-
      Возвращает или задает значение, которое указывает, следует ли искать только целые слова, а не текст, являющийся частью большего слова. Соответствует установленному флажку "Только слово целиком" в диалоговом окне "Найти и заменить".

      \[[Набор API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: matchWholeWord
    fullName: matchWholeWord
    langs:
      - typeScript
    type: property
    syntax:
      content: 'matchWholeWord: boolean;'
      return:
        type:
          - boolean
  - uid: 'word!Word.SearchOptions#matchWildcards:member'
    summary: |-
      Возвращает или задает значение, которое указывает, будет ли выполняться поиск с использованием специальных операторов поиска. Соответствует установленному флажку "Подстановочные знаки" в диалоговом окне "Найти и заменить".

      \[[Набор API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: matchWildcards
    fullName: matchWildcards
    langs:
      - typeScript
    type: property
    syntax:
      content: 'matchWildcards: boolean;'
      return:
        type:
          - boolean
  - uid: 'word!Word.SearchOptions#matchWildCards:member'
    name: matchWildCards
    fullName: matchWildCards
    langs:
      - typeScript
    type: property
    syntax:
      content: 'matchWildCards: boolean;'
      return:
        type:
          - boolean
  - uid: 'word!Word.SearchOptions.newObject:member(1)'
    summary: Создание нового экземпляра объекта Word. SearchOptions
    name: newObject(context)
    fullName: newObject(context)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static newObject(context: OfficeExtension.ClientRequestContext): Word.SearchOptions;'
      return:
        type:
          - 'word!Word.SearchOptions:class'
        description: ''
      parameters:
        - id: context
          description: ''
          type:
            - 'word!OfficeExtension.ClientRequestContext:class'
  - uid: 'word!Word.SearchOptions#set:member(1)'
    summary: 'Задает одновременно несколько свойств объекта. Можно передать либо простой объект с соответствующими свойствами, либо другой объект API того же типа.'
    remarks: |-
      Этот метод имеет следующую дополнительную подпись:

      `set(properties: Word.SearchOptions): void`
    name: 'set(properties, options)'
    fullName: 'set(properties, options)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'set(properties: Interfaces.SearchOptionsUpdateData, options?: OfficeExtension.UpdateOptions): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: properties
          description: 'Объект JavaScript со свойствами, которые структурированы исоморфикалли к свойствам объекта, для которого вызывается метод.'
          type:
            - 'word!Word.Interfaces.SearchOptionsUpdateData:interface'
        - id: options
          description: 'Предоставляет возможность подавлять ошибки, если объект Properties пытается задать любые свойства, предназначенные только для чтения.'
          type:
            - 'word!OfficeExtension.UpdateOptions:interface'
  - uid: 'word!Word.SearchOptions#set:member(2)'
    summary: Задает одновременно несколько свойств объекта на основе существующего загруженного объекта.
    name: set(properties)
    fullName: set(properties)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'set(properties: Word.SearchOptions): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: properties
          description: ''
          type:
            - 'word!Word.SearchOptions:class'
  - uid: 'word!Word.SearchOptions#toJSON:member(1)'
    summary: 'Переопределяет метод `toJSON()` JavaScript для предоставления более удобного вывода при передаче объекта API`JSON.stringify()`<!-- -->. (`JSON.stringify`<!-- -->, в свою очередь, вызывает `toJSON` метод объекта, который передается ему.) В то время как исходный объект Word. SearchOptions — это объект API, `toJSON` метод возвращает простой объект JavaScript (тип`Word.Interfaces.SearchOptionsData`<!-- -->), который содержит неполные копии загруженных дочерних свойств из исходного объекта.'
    name: toJSON()
    fullName: toJSON()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON(): Word.Interfaces.SearchOptionsData;'
      return:
        type:
          - 'word!Word.Interfaces.SearchOptionsData:interface'
        description: ''
references:
  - uid: 'word!OfficeExtension.ClientObject:class'
    name: OfficeExtension.ClientObject
  - uid: 'word!Word.RequestContext:class'
    name: RequestContext
  - uid: 'word!Word.SearchOptions:class'
    name: Word.SearchOptions
  - uid: 'word!Word.Interfaces.SearchOptionsLoadOptions:interface'
    name: Word.Interfaces.SearchOptionsLoadOptions
  - uid: 'word!OfficeExtension.ClientRequestContext:class'
    name: OfficeExtension.ClientRequestContext
  - uid: 'word!Word.Interfaces.SearchOptionsUpdateData:interface'
    name: Interfaces.SearchOptionsUpdateData
  - uid: 'word!OfficeExtension.UpdateOptions:interface'
    name: OfficeExtension.UpdateOptions
  - uid: 'word!Word.Interfaces.SearchOptionsData:interface'
    name: Word.Interfaces.SearchOptionsData