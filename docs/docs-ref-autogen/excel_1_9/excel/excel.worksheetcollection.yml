### YamlMime:UniversalReference
items:
  - uid: 'excel!Excel.WorksheetCollection:class'
    summary: |-
      Представляет коллекцию объектов листа, включенных в книгу.

      \[[Набор API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: Excel.WorksheetCollection
    fullName: Excel.WorksheetCollection
    langs:
      - typeScript
    type: class
    extends:
      - 'excel!OfficeExtension.ClientObject:class'
    package: excel!
    children:
      - 'excel!Excel.WorksheetCollection#add:member(1)'
      - 'excel!Excel.WorksheetCollection#context:member'
      - 'excel!Excel.WorksheetCollection#getActiveWorksheet:member(1)'
      - 'excel!Excel.WorksheetCollection#getCount:member(1)'
      - 'excel!Excel.WorksheetCollection#getFirst:member(1)'
      - 'excel!Excel.WorksheetCollection#getItem:member(1)'
      - 'excel!Excel.WorksheetCollection#getItemOrNullObject:member(1)'
      - 'excel!Excel.WorksheetCollection#getLast:member(1)'
      - 'excel!Excel.WorksheetCollection#items:member'
      - 'excel!Excel.WorksheetCollection#load:member(1)'
      - 'excel!Excel.WorksheetCollection#load:member(2)'
      - 'excel!Excel.WorksheetCollection#load:member(3)'
      - 'excel!Excel.WorksheetCollection#onActivated:member'
      - 'excel!Excel.WorksheetCollection#onAdded:member'
      - 'excel!Excel.WorksheetCollection#onCalculated:member'
      - 'excel!Excel.WorksheetCollection#onChanged:member'
      - 'excel!Excel.WorksheetCollection#onDeactivated:member'
      - 'excel!Excel.WorksheetCollection#onDeleted:member'
      - 'excel!Excel.WorksheetCollection#onFormatChanged:member'
      - 'excel!Excel.WorksheetCollection#onSelectionChanged:member'
      - 'excel!Excel.WorksheetCollection#toJSON:member(1)'
  - uid: 'excel!Excel.WorksheetCollection#add:member(1)'
    summary: |-
      Добавляет новый лист в книгу. Лист будет добавлен в конец набора имеющихся листов. Если вы хотите активировать только что добавленный лист, вызовите команду .activate().

      \[[Набор API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: add(name)
    fullName: add(name)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'add(name?: string): Excel.Worksheet;'
      return:
        type:
          - 'excel!Excel.Worksheet:class'
        description: |-


          #### <a name="examples"></a>Примеры

          ```javascript
          Excel.run(function (ctx) { 
              var wSheetName = 'Sample Name';
              var worksheet = ctx.workbook.worksheets.add(wSheetName);
              worksheet.load('name');
              return ctx.sync().then(function() {
                  console.log(worksheet.name);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: name
          description: 'Необязательный параметр. Имя добавляемого листа. Если параметр используется, имя должно быть уникальным. В противном случае Excel определяет имя нового листа.'
          type:
            - string
  - uid: 'excel!Excel.WorksheetCollection#context:member'
    summary: 'Контекст запроса, связанный с объектом. Это подсоединяет процесс надстройки к процессу ведущего приложения Office.'
    name: context
    fullName: context
    langs:
      - typeScript
    type: property
    syntax:
      content: 'context: RequestContext;'
      return:
        type:
          - 'excel!Excel.RequestContext:class'
  - uid: 'excel!Excel.WorksheetCollection#getActiveWorksheet:member(1)'
    summary: |-
      Получает текущий активный лист в книге.

      \[[Набор API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: getActiveWorksheet()
    fullName: getActiveWorksheet()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getActiveWorksheet(): Excel.Worksheet;'
      return:
        type:
          - 'excel!Excel.Worksheet:class'
        description: |-


          #### <a name="examples"></a>Примеры

          ```javascript
          Excel.run(function (ctx) {  
              var activeWorksheet = ctx.workbook.worksheets.getActiveWorksheet();
              activeWorksheet.load('name');
              return ctx.sync().then(function() {
                      console.log(activeWorksheet.name);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: 'excel!Excel.WorksheetCollection#getCount:member(1)'
    summary: |-
      Получает количество листов в коллекции.

      \[[Набор API: ExcelApi 1,4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: getCount(visibleOnly)
    fullName: getCount(visibleOnly)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getCount(visibleOnly?: boolean): OfficeExtension.ClientResult<number>;'
      return:
        type:
          - 'excel!Excel.WorksheetCollection#getCount~0:complex'
        description: ''
      parameters:
        - id: visibleOnly
          description: 'Необязательное свойство. Если задано значение true, учитываются только видимые листы, пропуская все скрытые.'
          type:
            - boolean
  - uid: 'excel!Excel.WorksheetCollection#getFirst:member(1)'
    summary: |-
      Получает первый лист в коллекции.

      \[[Набор API: ExcelApi 1,5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: getFirst(visibleOnly)
    fullName: getFirst(visibleOnly)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getFirst(visibleOnly?: boolean): Excel.Worksheet;'
      return:
        type:
          - 'excel!Excel.Worksheet:class'
        description: |-


          #### <a name="examples"></a>Примеры

          ```typescript
          // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/54-worksheet/reference-worksheets-by-relative-position.yaml
          await Excel.run(async (context) => {
              const sheets = context.workbook.worksheets;

              // We don't want to include the default worksheet that was created
              // when the workbook was created, so our "firstSheet" will be the one
              // after the literal first. Note chaining of navigation methods.
              const firstSheet = sheets.getFirst().getNext();
              const lastSheet = sheets.getLast();
              const firstTaxRateRange = firstSheet.getRange("B2");
              const lastTaxRateRange = lastSheet.getRange("B2");

              firstSheet.load("name");
              lastSheet.load("name");
              firstTaxRateRange.load("text");
              lastTaxRateRange.load("text");

              await context.sync();

              let firstYear = firstSheet.name.substr(5, 4);
              let lastYear = lastSheet.name.substr(5, 4);
              console.log(`Tax Rate change from ${firstYear} to ${lastYear}`, `Tax rate for ${firstYear}: ${firstTaxRateRange.text[0][0]}\nTax rate for ${lastYear}: ${lastTaxRateRange.text[0][0]}`)

              await context.sync();
          });
          ```
      parameters:
        - id: visibleOnly
          description: 'Необязательное свойство. Если задано значение true, учитываются только видимые листы, пропуская все скрытые.'
          type:
            - boolean
  - uid: 'excel!Excel.WorksheetCollection#getItem:member(1)'
    summary: |-
      Получает объект листа по его имени или ИД.

      \[[Набор API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: getItem(key)
    fullName: getItem(key)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getItem(key: string): Excel.Worksheet;'
      return:
        type:
          - 'excel!Excel.Worksheet:class'
        description: ''
      parameters:
        - id: key
          description: Имя или ИД листа.
          type:
            - string
  - uid: 'excel!Excel.WorksheetCollection#getItemOrNullObject:member(1)'
    summary: |-
      Получает объект листа по его имени или ИД. Если лист не существует, возвращает пустой объект.

      \[[Набор API: ExcelApi 1,4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: getItemOrNullObject(key)
    fullName: getItemOrNullObject(key)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getItemOrNullObject(key: string): Excel.Worksheet;'
      return:
        type:
          - 'excel!Excel.Worksheet:class'
        description: ''
      parameters:
        - id: key
          description: Имя или ИД листа.
          type:
            - string
  - uid: 'excel!Excel.WorksheetCollection#getLast:member(1)'
    summary: |-
      Получает последний лист в коллекции.

      \[[Набор API: ExcelApi 1,5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: getLast(visibleOnly)
    fullName: getLast(visibleOnly)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getLast(visibleOnly?: boolean): Excel.Worksheet;'
      return:
        type:
          - 'excel!Excel.Worksheet:class'
        description: |-


          #### <a name="examples"></a>Примеры

          ```typescript
          // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/54-worksheet/reference-worksheets-by-relative-position.yaml
          await Excel.run(async (context) => {
              const sheets = context.workbook.worksheets;

              // We don't want to include the default worksheet that was created
              // when the workbook was created, so our "firstSheet" will be the one
              // after the literal first. Note chaining of navigation methods.
              const firstSheet = sheets.getFirst().getNext();
              const lastSheet = sheets.getLast();
              const firstTaxRateRange = firstSheet.getRange("B2");
              const lastTaxRateRange = lastSheet.getRange("B2");

              firstSheet.load("name");
              lastSheet.load("name");
              firstTaxRateRange.load("text");
              lastTaxRateRange.load("text");

              await context.sync();

              let firstYear = firstSheet.name.substr(5, 4);
              let lastYear = lastSheet.name.substr(5, 4);
              console.log(`Tax Rate change from ${firstYear} to ${lastYear}`, `Tax rate for ${firstYear}: ${firstTaxRateRange.text[0][0]}\nTax rate for ${lastYear}: ${lastTaxRateRange.text[0][0]}`)

              await context.sync();
          });
          ```
      parameters:
        - id: visibleOnly
          description: 'Необязательное свойство. Если задано значение true, учитываются только видимые листы, пропуская все скрытые.'
          type:
            - boolean
  - uid: 'excel!Excel.WorksheetCollection#items:member'
    summary: Получает загруженные дочерние элементы в этой коллекции.
    name: items
    fullName: items
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly items: Excel.Worksheet[];'
      return:
        type:
          - 'excel!Excel.WorksheetCollection#items~0:complex'
  - uid: 'excel!Excel.WorksheetCollection#load:member(1)'
    summary: Добавляет в очередь команду для загрузки указанных свойств объекта. Перед чтением свойств `context.sync()` необходимо вызвать метод.
    name: load(options)
    fullName: load(options)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(options?: Excel.Interfaces.WorksheetCollectionLoadOptions & Excel.Interfaces.CollectionLoadOptions): Excel.WorksheetCollection;'
      return:
        type:
          - 'excel!Excel.WorksheetCollection:class'
        description: ''
      parameters:
        - id: options
          description: 'Предоставляет параметры, для которых загружается свойства объекта.'
          type:
            - 'excel!Excel.WorksheetCollection#load~0:complex'
  - uid: 'excel!Excel.WorksheetCollection#load:member(2)'
    summary: Добавляет в очередь команду для загрузки указанных свойств объекта. Перед чтением свойств `context.sync()` необходимо вызвать метод.
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): Excel.WorksheetCollection;'
      return:
        type:
          - 'excel!Excel.WorksheetCollection:class'
        description: |-


          #### <a name="examples"></a>Примеры

          ```javascript
          Excel.run(function (ctx) { 
              var worksheets = ctx.workbook.worksheets;
              worksheets.load('items');
              return ctx.sync().then(function() {
                  for (var i = 0; i < worksheets.items.length; i++)
                  {
                      console.log(worksheets.items[i].name);
                      console.log(worksheets.items[i].index);
                  }
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: propertyNames
          description: 'Строка, разделенная запятыми, или массив строк, указывающий свойства для загрузки.'
          type:
            - 'string | string[]'
  - uid: 'excel!Excel.WorksheetCollection#load:member(3)'
    summary: Добавляет в очередь команду для загрузки указанных свойств объекта. Перед чтением свойств `context.sync()` необходимо вызвать метод.
    name: load(propertyNamesAndPaths)
    fullName: load(propertyNamesAndPaths)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNamesAndPaths?: OfficeExtension.LoadOption): Excel.WorksheetCollection;'
      return:
        type:
          - 'excel!Excel.WorksheetCollection:class'
        description: ''
      parameters:
        - id: propertyNamesAndPaths
          description: '`propertyNamesAndPaths.select`— Это строка с разделителями-запятыми, задающая свойства для `propertyNamesAndPaths.expand` загрузки и которая представляет собой строку с разделителями-запятыми, указывающую свойства навигации для загрузки.'
          type:
            - 'excel!OfficeExtension.LoadOption:interface'
  - uid: 'excel!Excel.WorksheetCollection#onActivated:member'
    summary: |-
      Возникает при активации любого листа в книге.

      \[[Набор API: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: onActivated
    fullName: onActivated
    langs:
      - typeScript
    type: event
    syntax:
      content: 'readonly onActivated: OfficeExtension.EventHandlers<Excel.WorksheetActivatedEventArgs>;'
      return:
        type:
          - 'excel!Excel.WorksheetCollection#onActivated~0:complex'
        description: |-


          #### <a name="examples"></a>Примеры

          ```typescript
          // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/30-events/events-workbook-and-worksheet-collection.yaml
          await Excel.run(async (context) => {
              let sheets = context.workbook.worksheets;
              sheets.onActivated.add(onActivate);

              await context.sync();
              console.log("A handler has been registered for the OnActivate event.");
          });
          ```
  - uid: 'excel!Excel.WorksheetCollection#onAdded:member'
    summary: |-
      Возникает при добавлении нового листа в книгу.

      \[[Набор API: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: onAdded
    fullName: onAdded
    langs:
      - typeScript
    type: event
    syntax:
      content: 'readonly onAdded: OfficeExtension.EventHandlers<Excel.WorksheetAddedEventArgs>;'
      return:
        type:
          - 'excel!Excel.WorksheetCollection#onAdded~0:complex'
        description: |-


          #### <a name="examples"></a>Примеры

          ```typescript
          // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/30-events/events-workbook-and-worksheet-collection.yaml
          await Excel.run(async (context) => {
              let sheet = context.workbook.worksheets;
              sheet.onAdded.add(onWorksheetAdd);

              await context.sync();
              console.log("A handler has been registered for the OnAdded event.");
          });
          ```
  - uid: 'excel!Excel.WorksheetCollection#onCalculated:member'
    summary: |-
      Возникает при вычислении любого листа в книге.

      \[[Набор API: ExcelApi 1,8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: onCalculated
    fullName: onCalculated
    langs:
      - typeScript
    type: event
    syntax:
      content: 'readonly onCalculated: OfficeExtension.EventHandlers<Excel.WorksheetCalculatedEventArgs>;'
      return:
        type:
          - 'excel!Excel.WorksheetCollection#onCalculated~0:complex'
  - uid: 'excel!Excel.WorksheetCollection#onChanged:member'
    summary: |-
      Возникает при изменении любого листа в книге.

      \[[Набор API: ExcelApi 1,9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: onChanged
    fullName: onChanged
    langs:
      - typeScript
    type: event
    syntax:
      content: 'readonly onChanged: OfficeExtension.EventHandlers<Excel.WorksheetChangedEventArgs>;'
      return:
        type:
          - 'excel!Excel.WorksheetCollection#onChanged~0:complex'
  - uid: 'excel!Excel.WorksheetCollection#onDeactivated:member'
    summary: |-
      Возникает, когда отключается любой лист в книге.

      \[[Набор API: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: onDeactivated
    fullName: onDeactivated
    langs:
      - typeScript
    type: event
    syntax:
      content: 'readonly onDeactivated: OfficeExtension.EventHandlers<Excel.WorksheetDeactivatedEventArgs>;'
      return:
        type:
          - 'excel!Excel.WorksheetCollection#onDeactivated~0:complex'
        description: |-


          #### <a name="examples"></a>Примеры

          ```typescript
          // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/30-events/events-workbook-and-worksheet-collection.yaml
          await Excel.run(async (context) => {
              let sheets = context.workbook.worksheets;
              sheets.onDeactivated.add(onDeactivate);

              await context.sync();
              console.log("A handler has been registered for the OnDeactivate event.");
          });
          ```
  - uid: 'excel!Excel.WorksheetCollection#onDeleted:member'
    summary: |-
      Возникает при удалении листа из книги.

      \[[Набор API: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: onDeleted
    fullName: onDeleted
    langs:
      - typeScript
    type: event
    syntax:
      content: 'readonly onDeleted: OfficeExtension.EventHandlers<Excel.WorksheetDeletedEventArgs>;'
      return:
        type:
          - 'excel!Excel.WorksheetCollection#onDeleted~0:complex'
  - uid: 'excel!Excel.WorksheetCollection#onFormatChanged:member'
    summary: |-
      Возникает при изменении формата любого листа в книге.

      \[[Набор API: ExcelApi 1,9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: onFormatChanged
    fullName: onFormatChanged
    langs:
      - typeScript
    type: event
    syntax:
      content: 'readonly onFormatChanged: OfficeExtension.EventHandlers<Excel.WorksheetFormatChangedEventArgs>;'
      return:
        type:
          - 'excel!Excel.WorksheetCollection#onFormatChanged~0:complex'
  - uid: 'excel!Excel.WorksheetCollection#onSelectionChanged:member'
    summary: |-
      Возникает при изменениях выделения на любом листе.

      \[[Набор API: ExcelApi 1,9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: onSelectionChanged
    fullName: onSelectionChanged
    langs:
      - typeScript
    type: event
    syntax:
      content: 'readonly onSelectionChanged: OfficeExtension.EventHandlers<Excel.WorksheetSelectionChangedEventArgs>;'
      return:
        type:
          - 'excel!Excel.WorksheetCollection#onSelectionChanged~0:complex'
  - uid: 'excel!Excel.WorksheetCollection#toJSON:member(1)'
    summary: 'Переопределяет метод `toJSON()` JavaScript для предоставления более удобного вывода при передаче объекта API`JSON.stringify()`<!-- -->. (`JSON.stringify`<!-- -->, в свою очередь, вызывает `toJSON` метод объекта, который передается ему.) В то время как `Excel.WorksheetCollection` исходный объект является объектом API, `toJSON` метод возвращает простой объект JavaScript (тип`Excel.Interfaces.WorksheetCollectionData`<!-- -->), содержащий массив "Items" с неполноми копиями загруженных свойств из элементов коллекции.'
    name: toJSON()
    fullName: toJSON()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON(): Excel.Interfaces.WorksheetCollectionData;'
      return:
        type:
          - 'excel!Excel.Interfaces.WorksheetCollectionData:interface'
        description: ''
references:
  - uid: 'excel!OfficeExtension.ClientObject:class'
    name: OfficeExtension.ClientObject
  - uid: 'excel!Excel.Worksheet:class'
    name: Excel.Worksheet
  - uid: 'excel!Excel.RequestContext:class'
    name: RequestContext
  - uid: 'excel!Excel.WorksheetCollection#getCount~0:complex'
    name: OfficeExtension.ClientResult<number>
    fullName: OfficeExtension.ClientResult<number>
    spec.typeScript:
      - uid: 'excel!OfficeExtension.ClientResult:class'
        name: OfficeExtension.ClientResult
        fullName: OfficeExtension.ClientResult
      - name: <number>
        fullName: <number>
  - uid: 'excel!Excel.WorksheetCollection#items~0:complex'
    name: 'Excel.Worksheet[]'
    fullName: 'Excel.Worksheet[]'
    spec.typeScript:
      - uid: 'excel!Excel.Worksheet:class'
        name: Excel.Worksheet
        fullName: Excel.Worksheet
      - name: '[]'
        fullName: '[]'
  - uid: 'excel!Excel.WorksheetCollection:class'
    name: Excel.WorksheetCollection
  - uid: 'excel!Excel.WorksheetCollection#load~0:complex'
    name: Excel.Interfaces.WorksheetCollectionLoadOptions & Excel.Interfaces.CollectionLoadOptions
    fullName: Excel.Interfaces.WorksheetCollectionLoadOptions & Excel.Interfaces.CollectionLoadOptions
    spec.typeScript:
      - uid: 'excel!Excel.Interfaces.WorksheetCollectionLoadOptions:interface'
        name: Excel.Interfaces.WorksheetCollectionLoadOptions
        fullName: Excel.Interfaces.WorksheetCollectionLoadOptions
      - name: ' & '
        fullName: ' & '
      - uid: 'excel!Excel.Interfaces.CollectionLoadOptions:interface'
        name: Excel.Interfaces.CollectionLoadOptions
        fullName: Excel.Interfaces.CollectionLoadOptions
  - uid: 'excel!OfficeExtension.LoadOption:interface'
    name: OfficeExtension.LoadOption
  - uid: 'excel!Excel.WorksheetCollection#onActivated~0:complex'
    name: OfficeExtension.EventHandlers<Excel.WorksheetActivatedEventArgs>
    fullName: OfficeExtension.EventHandlers<Excel.WorksheetActivatedEventArgs>
    spec.typeScript:
      - uid: 'excel!OfficeExtension.EventHandlers:class'
        name: OfficeExtension.EventHandlers
        fullName: OfficeExtension.EventHandlers
      - name: <
        fullName: <
      - uid: 'excel!Excel.WorksheetActivatedEventArgs:interface'
        name: Excel.WorksheetActivatedEventArgs
        fullName: Excel.WorksheetActivatedEventArgs
      - name: '>'
        fullName: '>'
  - uid: 'excel!Excel.WorksheetCollection#onAdded~0:complex'
    name: OfficeExtension.EventHandlers<Excel.WorksheetAddedEventArgs>
    fullName: OfficeExtension.EventHandlers<Excel.WorksheetAddedEventArgs>
    spec.typeScript:
      - uid: 'excel!OfficeExtension.EventHandlers:class'
        name: OfficeExtension.EventHandlers
        fullName: OfficeExtension.EventHandlers
      - name: <
        fullName: <
      - uid: 'excel!Excel.WorksheetAddedEventArgs:interface'
        name: Excel.WorksheetAddedEventArgs
        fullName: Excel.WorksheetAddedEventArgs
      - name: '>'
        fullName: '>'
  - uid: 'excel!Excel.WorksheetCollection#onCalculated~0:complex'
    name: OfficeExtension.EventHandlers<Excel.WorksheetCalculatedEventArgs>
    fullName: OfficeExtension.EventHandlers<Excel.WorksheetCalculatedEventArgs>
    spec.typeScript:
      - uid: 'excel!OfficeExtension.EventHandlers:class'
        name: OfficeExtension.EventHandlers
        fullName: OfficeExtension.EventHandlers
      - name: <
        fullName: <
      - uid: 'excel!Excel.WorksheetCalculatedEventArgs:interface'
        name: Excel.WorksheetCalculatedEventArgs
        fullName: Excel.WorksheetCalculatedEventArgs
      - name: '>'
        fullName: '>'
  - uid: 'excel!Excel.WorksheetCollection#onChanged~0:complex'
    name: OfficeExtension.EventHandlers<Excel.WorksheetChangedEventArgs>
    fullName: OfficeExtension.EventHandlers<Excel.WorksheetChangedEventArgs>
    spec.typeScript:
      - uid: 'excel!OfficeExtension.EventHandlers:class'
        name: OfficeExtension.EventHandlers
        fullName: OfficeExtension.EventHandlers
      - name: <
        fullName: <
      - uid: 'excel!Excel.WorksheetChangedEventArgs:interface'
        name: Excel.WorksheetChangedEventArgs
        fullName: Excel.WorksheetChangedEventArgs
      - name: '>'
        fullName: '>'
  - uid: 'excel!Excel.WorksheetCollection#onDeactivated~0:complex'
    name: OfficeExtension.EventHandlers<Excel.WorksheetDeactivatedEventArgs>
    fullName: OfficeExtension.EventHandlers<Excel.WorksheetDeactivatedEventArgs>
    spec.typeScript:
      - uid: 'excel!OfficeExtension.EventHandlers:class'
        name: OfficeExtension.EventHandlers
        fullName: OfficeExtension.EventHandlers
      - name: <
        fullName: <
      - uid: 'excel!Excel.WorksheetDeactivatedEventArgs:interface'
        name: Excel.WorksheetDeactivatedEventArgs
        fullName: Excel.WorksheetDeactivatedEventArgs
      - name: '>'
        fullName: '>'
  - uid: 'excel!Excel.WorksheetCollection#onDeleted~0:complex'
    name: OfficeExtension.EventHandlers<Excel.WorksheetDeletedEventArgs>
    fullName: OfficeExtension.EventHandlers<Excel.WorksheetDeletedEventArgs>
    spec.typeScript:
      - uid: 'excel!OfficeExtension.EventHandlers:class'
        name: OfficeExtension.EventHandlers
        fullName: OfficeExtension.EventHandlers
      - name: <
        fullName: <
      - uid: 'excel!Excel.WorksheetDeletedEventArgs:interface'
        name: Excel.WorksheetDeletedEventArgs
        fullName: Excel.WorksheetDeletedEventArgs
      - name: '>'
        fullName: '>'
  - uid: 'excel!Excel.WorksheetCollection#onFormatChanged~0:complex'
    name: OfficeExtension.EventHandlers<Excel.WorksheetFormatChangedEventArgs>
    fullName: OfficeExtension.EventHandlers<Excel.WorksheetFormatChangedEventArgs>
    spec.typeScript:
      - uid: 'excel!OfficeExtension.EventHandlers:class'
        name: OfficeExtension.EventHandlers
        fullName: OfficeExtension.EventHandlers
      - name: <
        fullName: <
      - uid: 'excel!Excel.WorksheetFormatChangedEventArgs:interface'
        name: Excel.WorksheetFormatChangedEventArgs
        fullName: Excel.WorksheetFormatChangedEventArgs
      - name: '>'
        fullName: '>'
  - uid: 'excel!Excel.WorksheetCollection#onSelectionChanged~0:complex'
    name: OfficeExtension.EventHandlers<Excel.WorksheetSelectionChangedEventArgs>
    fullName: OfficeExtension.EventHandlers<Excel.WorksheetSelectionChangedEventArgs>
    spec.typeScript:
      - uid: 'excel!OfficeExtension.EventHandlers:class'
        name: OfficeExtension.EventHandlers
        fullName: OfficeExtension.EventHandlers
      - name: <
        fullName: <
      - uid: 'excel!Excel.WorksheetSelectionChangedEventArgs:interface'
        name: Excel.WorksheetSelectionChangedEventArgs
        fullName: Excel.WorksheetSelectionChangedEventArgs
      - name: '>'
        fullName: '>'
  - uid: 'excel!Excel.Interfaces.WorksheetCollectionData:interface'
    name: Excel.Interfaces.WorksheetCollectionData