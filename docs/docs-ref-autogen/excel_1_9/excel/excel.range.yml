### YamlMime:UniversalReference
items:
  - uid: 'excel!Excel.Range:class'
    summary: |-
      <span data-ttu-id="d260a-101">Range представляет набор из одной или нескольких смежных ячеек, таких как ячейка, строка, столбец, блок ячеек и т. д. Дополнительные сведения о том, как диапазоны используются в API, считываются [Работа с диапазонами с использованием API JavaScript для Excel](https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-ranges) и [Работа с диапазонами с использованием API JavaScript для Excel (дополнительно)](https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-ranges-advanced)</span><span class="sxs-lookup"><span data-stu-id="d260a-101">Range represents a set of one or more contiguous cells such as a cell, a row, a column, block of cells, etc. To learn more about how ranges are used throughout the API, read [Work with ranges using the Excel JavaScript API](https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-ranges) and [Work with ranges using the Excel JavaScript API (advanced)](https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-ranges-advanced)</span></span><!-- --><span data-ttu-id="d260a-102">.</span><span class="sxs-lookup"><span data-stu-id="d260a-102"></span></span>

      <span data-ttu-id="d260a-103">\[[Набор API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d260a-103">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: Excel.Range
    fullName: Excel.Range
    langs:
      - typeScript
    type: class
    extends:
      - 'excel!OfficeExtension.ClientObject:class'
    package: excel!
    children:
      - 'excel!Excel.Range#address:member'
      - 'excel!Excel.Range#addressLocal:member'
      - 'excel!Excel.Range#autoFill:member(1)'
      - 'excel!Excel.Range#autoFill:member(2)'
      - 'excel!Excel.Range#calculate:member(1)'
      - 'excel!Excel.Range#cellCount:member'
      - 'excel!Excel.Range#clear:member(1)'
      - 'excel!Excel.Range#clear:member(2)'
      - 'excel!Excel.Range#columnCount:member'
      - 'excel!Excel.Range#columnHidden:member'
      - 'excel!Excel.Range#columnIndex:member'
      - 'excel!Excel.Range#conditionalFormats:member'
      - 'excel!Excel.Range#context:member'
      - 'excel!Excel.Range#convertDataTypeToText:member(1)'
      - 'excel!Excel.Range#convertToLinkedDataType:member(1)'
      - 'excel!Excel.Range#copyFrom:member(1)'
      - 'excel!Excel.Range#copyFrom:member(2)'
      - 'excel!Excel.Range#dataValidation:member'
      - 'excel!Excel.Range#delete:member(1)'
      - 'excel!Excel.Range#delete:member(2)'
      - 'excel!Excel.Range#find:member(1)'
      - 'excel!Excel.Range#findOrNullObject:member(1)'
      - 'excel!Excel.Range#flashFill:member(1)'
      - 'excel!Excel.Range#format:member'
      - 'excel!Excel.Range#formulas:member'
      - 'excel!Excel.Range#formulasLocal:member'
      - 'excel!Excel.Range#formulasR1C1:member'
      - 'excel!Excel.Range#getAbsoluteResizedRange:member(1)'
      - 'excel!Excel.Range#getBoundingRect:member(1)'
      - 'excel!Excel.Range#getCell:member(1)'
      - 'excel!Excel.Range#getCellProperties:member(1)'
      - 'excel!Excel.Range#getColumn:member(1)'
      - 'excel!Excel.Range#getColumnProperties:member(1)'
      - 'excel!Excel.Range#getColumnsAfter:member(1)'
      - 'excel!Excel.Range#getColumnsBefore:member(1)'
      - 'excel!Excel.Range#getEntireColumn:member(1)'
      - 'excel!Excel.Range#getEntireRow:member(1)'
      - 'excel!Excel.Range#getImage:member(1)'
      - 'excel!Excel.Range#getIntersection:member(1)'
      - 'excel!Excel.Range#getIntersectionOrNullObject:member(1)'
      - 'excel!Excel.Range#getLastCell:member(1)'
      - 'excel!Excel.Range#getLastColumn:member(1)'
      - 'excel!Excel.Range#getLastRow:member(1)'
      - 'excel!Excel.Range#getOffsetRange:member(1)'
      - 'excel!Excel.Range#getResizedRange:member(1)'
      - 'excel!Excel.Range#getRow:member(1)'
      - 'excel!Excel.Range#getRowProperties:member(1)'
      - 'excel!Excel.Range#getRowsAbove:member(1)'
      - 'excel!Excel.Range#getRowsBelow:member(1)'
      - 'excel!Excel.Range#getSpecialCells:member(1)'
      - 'excel!Excel.Range#getSpecialCells:member(2)'
      - 'excel!Excel.Range#getSpecialCellsOrNullObject:member(1)'
      - 'excel!Excel.Range#getSpecialCellsOrNullObject:member(2)'
      - 'excel!Excel.Range#getSurroundingRegion:member(1)'
      - 'excel!Excel.Range#getTables:member(1)'
      - 'excel!Excel.Range#getUsedRange:member(1)'
      - 'excel!Excel.Range#getUsedRangeOrNullObject:member(1)'
      - 'excel!Excel.Range#getVisibleView:member(1)'
      - 'excel!Excel.Range#hidden:member'
      - 'excel!Excel.Range#hyperlink:member'
      - 'excel!Excel.Range#insert:member(1)'
      - 'excel!Excel.Range#insert:member(2)'
      - 'excel!Excel.Range#isEntireColumn:member'
      - 'excel!Excel.Range#isEntireRow:member'
      - 'excel!Excel.Range#linkedDataTypeState:member'
      - 'excel!Excel.Range#load:member(1)'
      - 'excel!Excel.Range#load:member(2)'
      - 'excel!Excel.Range#load:member(3)'
      - 'excel!Excel.Range#merge:member(1)'
      - 'excel!Excel.Range#numberFormat:member'
      - 'excel!Excel.Range#numberFormatLocal:member'
      - 'excel!Excel.Range#removeDuplicates:member(1)'
      - 'excel!Excel.Range#replaceAll:member(1)'
      - 'excel!Excel.Range#rowCount:member'
      - 'excel!Excel.Range#rowHidden:member'
      - 'excel!Excel.Range#rowIndex:member'
      - 'excel!Excel.Range#select:member(1)'
      - 'excel!Excel.Range#set:member(1)'
      - 'excel!Excel.Range#set:member(2)'
      - 'excel!Excel.Range#setCellProperties:member(1)'
      - 'excel!Excel.Range#setColumnProperties:member(1)'
      - 'excel!Excel.Range#setDirty:member(1)'
      - 'excel!Excel.Range#setRowProperties:member(1)'
      - 'excel!Excel.Range#showCard:member(1)'
      - 'excel!Excel.Range#sort:member'
      - 'excel!Excel.Range#style:member'
      - 'excel!Excel.Range#text:member'
      - 'excel!Excel.Range#toJSON:member(1)'
      - 'excel!Excel.Range#track:member(1)'
      - 'excel!Excel.Range#unmerge:member(1)'
      - 'excel!Excel.Range#untrack:member(1)'
      - 'excel!Excel.Range#values:member'
      - 'excel!Excel.Range#valueTypes:member'
      - 'excel!Excel.Range#worksheet:member'
  - uid: 'excel!Excel.Range#address:member'
    summary: |-
      <span data-ttu-id="d260a-104">Представляет ссылку на диапазон в стиле A1.</span><span class="sxs-lookup"><span data-stu-id="d260a-104">Represents the range reference in A1-style.</span></span> <span data-ttu-id="d260a-105">Значение Address будет содержать ссылку на лист (например, "Лист1! A1: B4).</span><span class="sxs-lookup"><span data-stu-id="d260a-105">Address value will contain the Sheet reference (e.g. "Sheet1!A1:B4").</span></span> <span data-ttu-id="d260a-106">Только для чтения.</span><span class="sxs-lookup"><span data-stu-id="d260a-106">Read-only.</span></span>

      <span data-ttu-id="d260a-107">\[[Набор API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d260a-107">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: address
    fullName: address
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly address: string;'
      return:
        type:
          - string
  - uid: 'excel!Excel.Range#addressLocal:member'
    summary: |-
      <span data-ttu-id="d260a-108">Представляет ссылку на указанный диапазон на языке пользователя.</span><span class="sxs-lookup"><span data-stu-id="d260a-108">Represents range reference for the specified range in the language of the user.</span></span> <span data-ttu-id="d260a-109">Только для чтения.</span><span class="sxs-lookup"><span data-stu-id="d260a-109">Read-only.</span></span>

      <span data-ttu-id="d260a-110">\[[Набор API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d260a-110">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: addressLocal
    fullName: addressLocal
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly addressLocal: string;'
      return:
        type:
          - string
  - uid: 'excel!Excel.Range#autoFill:member(1)'
    summary: |-
      <span data-ttu-id="d260a-111">Заполняет конечный диапазон из текущего диапазона.</span><span class="sxs-lookup"><span data-stu-id="d260a-111">Fills range from the current range to the destination range.</span></span> <span data-ttu-id="d260a-112">Целевой диапазон должен расширять источник по горизонтали или по вертикали.</span><span class="sxs-lookup"><span data-stu-id="d260a-112">The destination range must extend the source either horizontally or vertically.</span></span> <span data-ttu-id="d260a-113">Несмежные диапазоны не поддерживаются.</span><span class="sxs-lookup"><span data-stu-id="d260a-113">Discontiguous ranges are not supported.</span></span>

      <span data-ttu-id="d260a-114">\[[Набор API: ExcelApi 1,9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d260a-114">\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: 'autoFill(destinationRange, autoFillType)'
    fullName: 'autoFill(destinationRange, autoFillType)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'autoFill(destinationRange: Range | string, autoFillType?: Excel.AutoFillType): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a><span data-ttu-id="d260a-115">Примеры</span><span class="sxs-lookup"><span data-stu-id="d260a-115">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
            const sheet = context.workbook.worksheets.getActiveWorksheet();
            const sumCell = sheet.getRange("P4");
            
            // Copy everything. The formulas will be contextually updated based on their new locations.
            sumCell.autoFill("P4:P7", Excel.AutoFillType.fillCopy);
            sumCell.format.autofitColumns();
            await context.sync();
          });
          ```
      parameters:
        - id: destinationRange
          description: <span data-ttu-id="d260a-116">Целевой диапазон для автозаполнения.</span><span class="sxs-lookup"><span data-stu-id="d260a-116">The destination range to autofill.</span></span>
          type:
            - 'excel!Excel.Range#autoFill~0:complex'
        - id: autoFillType
          description: '<span data-ttu-id="d260a-117">Тип автозаполнения.</span><span class="sxs-lookup"><span data-stu-id="d260a-117">The type of autofill.</span></span> <span data-ttu-id="d260a-118">Задает способ заполнения конечного диапазона на основе содержимого текущего диапазона.</span><span class="sxs-lookup"><span data-stu-id="d260a-118">Specifies how the destination range is to be filled, based on the contents of the current range.</span></span> <span data-ttu-id="d260a-119">Значение по умолчанию — "Филлдефаулт".</span><span class="sxs-lookup"><span data-stu-id="d260a-119">Default is "FillDefault".</span></span>'
          type:
            - 'excel!Excel.AutoFillType:enum'
  - uid: 'excel!Excel.Range#autoFill:member(2)'
    summary: |-
      <span data-ttu-id="d260a-120">Заполняет конечный диапазон из текущего диапазона.</span><span class="sxs-lookup"><span data-stu-id="d260a-120">Fills range from the current range to the destination range.</span></span> <span data-ttu-id="d260a-121">Целевой диапазон должен расширять источник по горизонтали или по вертикали.</span><span class="sxs-lookup"><span data-stu-id="d260a-121">The destination range must extend the source either horizontally or vertically.</span></span> <span data-ttu-id="d260a-122">Несмежные диапазоны не поддерживаются.</span><span class="sxs-lookup"><span data-stu-id="d260a-122">Discontiguous ranges are not supported.</span></span>

      <span data-ttu-id="d260a-123">\[[Набор API: ExcelApi 1,9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d260a-123">\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: 'autoFill(destinationRange, autoFillTypeString)'
    fullName: 'autoFill(destinationRange, autoFillTypeString)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'autoFill(destinationRange: Range | string, autoFillTypeString?: "FillDefault" | "FillCopy" | "FillSeries" | "FillFormats" | "FillValues" | "FillDays" | "FillWeekdays" | "FillMonths" | "FillYears" | "LinearTrend" | "GrowthTrend" | "FlashFill"): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: destinationRange
          description: <span data-ttu-id="d260a-124">Целевой диапазон для автозаполнения.</span><span class="sxs-lookup"><span data-stu-id="d260a-124">The destination range to autofill.</span></span>
          type:
            - 'excel!Excel.Range#autoFill~1:complex'
        - id: autoFillTypeString
          description: '<span data-ttu-id="d260a-125">Тип автозаполнения.</span><span class="sxs-lookup"><span data-stu-id="d260a-125">The type of autofill.</span></span> <span data-ttu-id="d260a-126">Задает способ заполнения конечного диапазона на основе содержимого текущего диапазона.</span><span class="sxs-lookup"><span data-stu-id="d260a-126">Specifies how the destination range is to be filled, based on the contents of the current range.</span></span> <span data-ttu-id="d260a-127">Значение по умолчанию — "Филлдефаулт".</span><span class="sxs-lookup"><span data-stu-id="d260a-127">Default is "FillDefault".</span></span>'
          type:
            - '"FillDefault" | "FillCopy" | "FillSeries" | "FillFormats" | "FillValues" | "FillDays" | "FillWeekdays" | "FillMonths" | "FillYears" | "LinearTrend" | "GrowthTrend" | "FlashFill"'
  - uid: 'excel!Excel.Range#calculate:member(1)'
    summary: |-
      <span data-ttu-id="d260a-128">Вычисляет диапазон ячеек на листе.</span><span class="sxs-lookup"><span data-stu-id="d260a-128">Calculates a range of cells on a worksheet.</span></span>

      <span data-ttu-id="d260a-129">\[[Набор API: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d260a-129">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: calculate()
    fullName: calculate()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'calculate(): void;'
      return:
        type:
          - void
        description: ''
  - uid: 'excel!Excel.Range#cellCount:member'
    summary: |-
      <span data-ttu-id="d260a-130">Количество ячеек в диапазоне.</span><span class="sxs-lookup"><span data-stu-id="d260a-130">Number of cells in the range.</span></span> <span data-ttu-id="d260a-131">Этот API возвращает значение -1, если количество ячеек превышает 2^31-1 (2,147,483,647).</span><span class="sxs-lookup"><span data-stu-id="d260a-131">This API will return -1 if the cell count exceeds 2^31-1 (2,147,483,647).</span></span> <span data-ttu-id="d260a-132">Только для чтения.</span><span class="sxs-lookup"><span data-stu-id="d260a-132">Read-only.</span></span>

      <span data-ttu-id="d260a-133">\[[Набор API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d260a-133">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: cellCount
    fullName: cellCount
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly cellCount: number;'
      return:
        type:
          - number
  - uid: 'excel!Excel.Range#clear:member(1)'
    summary: |-
      <span data-ttu-id="d260a-134">Очищает значения, формат, заливку, границу диапазона и т. д.</span><span class="sxs-lookup"><span data-stu-id="d260a-134">Clear range values, format, fill, border, etc.</span></span>

      <span data-ttu-id="d260a-135">\[[Набор API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d260a-135">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: clear(applyTo)
    fullName: clear(applyTo)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'clear(applyTo?: Excel.ClearApplyTo): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a><span data-ttu-id="d260a-136">Примеры</span><span class="sxs-lookup"><span data-stu-id="d260a-136">Examples</span></span>

          ```javascript
          // Below example clears format and contents of the range. 
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "D:F";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
              range.clear();
              return ctx.sync(); 
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: applyTo
          description: <span data-ttu-id="d260a-137">Необязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="d260a-137">Optional.</span></span> <span data-ttu-id="d260a-138">Определяет тип действия очистки.</span><span class="sxs-lookup"><span data-stu-id="d260a-138">Determines the type of clear action.</span></span> <span data-ttu-id="d260a-139">Дополнительные сведения см. в статье Excel. Клеарапплито.</span><span class="sxs-lookup"><span data-stu-id="d260a-139">See Excel.ClearApplyTo for details.</span></span>
          type:
            - 'excel!Excel.ClearApplyTo:enum'
  - uid: 'excel!Excel.Range#clear:member(2)'
    summary: |-
      <span data-ttu-id="d260a-140">Очищает значения, формат, заливку, границу диапазона и т. д.</span><span class="sxs-lookup"><span data-stu-id="d260a-140">Clear range values, format, fill, border, etc.</span></span>

      <span data-ttu-id="d260a-141">\[[Набор API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d260a-141">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: clear(applyToString)
    fullName: clear(applyToString)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'clear(applyToString?: "All" | "Formats" | "Contents" | "Hyperlinks" | "RemoveHyperlinks"): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: applyToString
          description: <span data-ttu-id="d260a-142">Необязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="d260a-142">Optional.</span></span> <span data-ttu-id="d260a-143">Определяет тип действия очистки.</span><span class="sxs-lookup"><span data-stu-id="d260a-143">Determines the type of clear action.</span></span> <span data-ttu-id="d260a-144">Дополнительные сведения см. в статье Excel. Клеарапплито.</span><span class="sxs-lookup"><span data-stu-id="d260a-144">See Excel.ClearApplyTo for details.</span></span>
          type:
            - '"All" | "Formats" | "Contents" | "Hyperlinks" | "RemoveHyperlinks"'
  - uid: 'excel!Excel.Range#columnCount:member'
    summary: |-
      <span data-ttu-id="d260a-145">Представляет общее количество столбцов в диапазоне.</span><span class="sxs-lookup"><span data-stu-id="d260a-145">Represents the total number of columns in the range.</span></span> <span data-ttu-id="d260a-146">Только для чтения.</span><span class="sxs-lookup"><span data-stu-id="d260a-146">Read-only.</span></span>

      <span data-ttu-id="d260a-147">\[[Набор API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d260a-147">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: columnCount
    fullName: columnCount
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly columnCount: number;'
      return:
        type:
          - number
  - uid: 'excel!Excel.Range#columnHidden:member'
    summary: |-
      <span data-ttu-id="d260a-148">Указывает, скрыты ли все столбцы текущего диапазона.</span><span class="sxs-lookup"><span data-stu-id="d260a-148">Represents if all columns of the current range are hidden.</span></span>

      <span data-ttu-id="d260a-149">\[[Набор API: ExcelApi 1,2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d260a-149">\[ [API set: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: columnHidden
    fullName: columnHidden
    langs:
      - typeScript
    type: property
    syntax:
      content: 'columnHidden: boolean;'
      return:
        type:
          - boolean
  - uid: 'excel!Excel.Range#columnIndex:member'
    summary: |-
      <span data-ttu-id="d260a-150">Представляет номер столбца первой ячейки диапазона.</span><span class="sxs-lookup"><span data-stu-id="d260a-150">Represents the column number of the first cell in the range.</span></span> <span data-ttu-id="d260a-151">Используется нулевой индекс.</span><span class="sxs-lookup"><span data-stu-id="d260a-151">Zero-indexed.</span></span> <span data-ttu-id="d260a-152">Только для чтения.</span><span class="sxs-lookup"><span data-stu-id="d260a-152">Read-only.</span></span>

      <span data-ttu-id="d260a-153">\[[Набор API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d260a-153">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: columnIndex
    fullName: columnIndex
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly columnIndex: number;'
      return:
        type:
          - number
  - uid: 'excel!Excel.Range#conditionalFormats:member'
    summary: |-
      <span data-ttu-id="d260a-154">Коллекция объектов Кондитионалформатс, пересекающих диапазон.</span><span class="sxs-lookup"><span data-stu-id="d260a-154">Collection of ConditionalFormats that intersect the range.</span></span> <span data-ttu-id="d260a-155">Только для чтения.</span><span class="sxs-lookup"><span data-stu-id="d260a-155">Read-only.</span></span>

      <span data-ttu-id="d260a-156">\[[Набор API: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d260a-156">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: conditionalFormats
    fullName: conditionalFormats
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly conditionalFormats: Excel.ConditionalFormatCollection;'
      return:
        type:
          - 'excel!Excel.ConditionalFormatCollection:class'
  - uid: 'excel!Excel.Range#context:member'
    summary: '<span data-ttu-id="d260a-157">Контекст запроса, связанный с объектом.</span><span class="sxs-lookup"><span data-stu-id="d260a-157">The request context associated with the object.</span></span> <span data-ttu-id="d260a-158">Это подсоединяет процесс надстройки к процессу ведущего приложения Office.</span><span class="sxs-lookup"><span data-stu-id="d260a-158">This connects the add-in''s process to the Office host application''s process.</span></span>'
    name: context
    fullName: context
    langs:
      - typeScript
    type: property
    syntax:
      content: 'context: RequestContext;'
      return:
        type:
          - 'excel!Excel.RequestContext:class'
  - uid: 'excel!Excel.Range#convertDataTypeToText:member(1)'
    summary: |-
      <span data-ttu-id="d260a-159">Преобразует диапазон ячеек с типами данных в текст.</span><span class="sxs-lookup"><span data-stu-id="d260a-159">Converts the range cells with datatypes into text.</span></span>

      <span data-ttu-id="d260a-160">\[[Набор API: ExcelApi 1,9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d260a-160">\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: convertDataTypeToText()
    fullName: convertDataTypeToText()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'convertDataTypeToText(): void;'
      return:
        type:
          - void
        description: ''
  - uid: 'excel!Excel.Range#convertToLinkedDataType:member(1)'
    summary: |-
      <span data-ttu-id="d260a-161">Преобразует ячейки диапазона в связанный тип данных на листе.</span><span class="sxs-lookup"><span data-stu-id="d260a-161">Converts the range cells into linked datatype in the worksheet.</span></span>

      <span data-ttu-id="d260a-162">\[[Набор API: ExcelApi 1,9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d260a-162">\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: 'convertToLinkedDataType(serviceID, languageCulture)'
    fullName: 'convertToLinkedDataType(serviceID, languageCulture)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'convertToLinkedDataType(serviceID: number, languageCulture: string): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: serviceID
          description: '<span data-ttu-id="d260a-163">Идентификатор службы, который будет использоваться для запроса данных.</span><span class="sxs-lookup"><span data-stu-id="d260a-163">The Service ID which will be used to query the data.</span></span>'
          type:
            - number
        - id: languageCulture
          description: <span data-ttu-id="d260a-164">Язык и региональные параметры для запроса службы.</span><span class="sxs-lookup"><span data-stu-id="d260a-164">Language Culture to query the service for.</span></span>
          type:
            - string
  - uid: 'excel!Excel.Range#copyFrom:member(1)'
    summary: |-
      <span data-ttu-id="d260a-165">Копирует данные ячейки или форматирование из исходного диапазона или объекта RangeAreas в текущий диапазон.</span><span class="sxs-lookup"><span data-stu-id="d260a-165">Copies cell data or formatting from the source range or RangeAreas to the current range.</span></span> <span data-ttu-id="d260a-166">Конечный диапазон может отличаться от размера исходного диапазона или RangeAreas.</span><span class="sxs-lookup"><span data-stu-id="d260a-166">The destination range can be a different size than the source range or RangeAreas.</span></span> <span data-ttu-id="d260a-167">Назначение будет автоматически развернуто, если оно меньше исходного.</span><span class="sxs-lookup"><span data-stu-id="d260a-167">The destination will be expanded automatically if it is smaller than the source.</span></span>

      <span data-ttu-id="d260a-168">\[[Набор API: ExcelApi 1,9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d260a-168">\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: 'copyFrom(sourceRange, copyType, skipBlanks, transpose)'
    fullName: 'copyFrom(sourceRange, copyType, skipBlanks, transpose)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'copyFrom(sourceRange: Range | RangeAreas | string, copyType?: Excel.RangeCopyType, skipBlanks?: boolean, transpose?: boolean): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a><span data-ttu-id="d260a-169">Примеры</span><span class="sxs-lookup"><span data-stu-id="d260a-169">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Sample");
              sheet.getRange("F2").values = [["Copied Formula"]];
              sheet.getRange("F2").format.autofitColumns();

              // copy a range preserving the formulas
              // note: non-formula values are copied over as is
              sheet.getRange("G2").copyFrom("A1:E1", Excel.RangeCopyType.formulas);
              await context.sync();
          });
          ```
      parameters:
        - id: sourceRange
          description: '<span data-ttu-id="d260a-170">Исходный диапазон или RangeAreas, из которого производится копирование.</span><span class="sxs-lookup"><span data-stu-id="d260a-170">The source range or RangeAreas to copy from.</span></span> <span data-ttu-id="d260a-171">Если исходный RangeAreas имеет несколько диапазонов, их форма должна быть создана путем удаления полных строк или столбцов из прямоугольного диапазона.</span><span class="sxs-lookup"><span data-stu-id="d260a-171">When the source RangeAreas has multiple ranges, their form must be able to be created by removing full rows or columns from a rectangular range.</span></span>'
          type:
            - 'excel!Excel.Range#copyFrom~0:complex'
        - id: copyType
          description: '<span data-ttu-id="d260a-172">Тип данных или форматирования ячеек, которые необходимо скопировать.</span><span class="sxs-lookup"><span data-stu-id="d260a-172">The type of cell data or formatting to copy over.</span></span> <span data-ttu-id="d260a-173">Значение по умолчанию — "ALL".</span><span class="sxs-lookup"><span data-stu-id="d260a-173">Default is "All".</span></span>'
          type:
            - 'excel!Excel.RangeCopyType:enum'
        - id: skipBlanks
          description: '<span data-ttu-id="d260a-174">Значение true, если необходимо пропускать пустые ячейки в исходном диапазоне.</span><span class="sxs-lookup"><span data-stu-id="d260a-174">True if to skip blank cells in the source range.</span></span> <span data-ttu-id="d260a-175">Значение по умолчанию — false.</span><span class="sxs-lookup"><span data-stu-id="d260a-175">Default is false.</span></span>'
          type:
            - boolean
        - id: transpose
          description: '<span data-ttu-id="d260a-176">Значение true, если требуется переставить ячейки в целевом диапазоне.</span><span class="sxs-lookup"><span data-stu-id="d260a-176">True if to transpose the cells in the destination range.</span></span> <span data-ttu-id="d260a-177">Значение по умолчанию — false.</span><span class="sxs-lookup"><span data-stu-id="d260a-177">Default is false.</span></span>'
          type:
            - boolean
  - uid: 'excel!Excel.Range#copyFrom:member(2)'
    summary: |-
      <span data-ttu-id="d260a-178">Копирует данные ячейки или форматирование из исходного диапазона или объекта RangeAreas в текущий диапазон.</span><span class="sxs-lookup"><span data-stu-id="d260a-178">Copies cell data or formatting from the source range or RangeAreas to the current range.</span></span> <span data-ttu-id="d260a-179">Конечный диапазон может отличаться от размера исходного диапазона или RangeAreas.</span><span class="sxs-lookup"><span data-stu-id="d260a-179">The destination range can be a different size than the source range or RangeAreas.</span></span> <span data-ttu-id="d260a-180">Назначение будет автоматически развернуто, если оно меньше исходного.</span><span class="sxs-lookup"><span data-stu-id="d260a-180">The destination will be expanded automatically if it is smaller than the source.</span></span>

      <span data-ttu-id="d260a-181">\[[Набор API: ExcelApi 1,9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d260a-181">\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: 'copyFrom(sourceRange, copyTypeString, skipBlanks, transpose)'
    fullName: 'copyFrom(sourceRange, copyTypeString, skipBlanks, transpose)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'copyFrom(sourceRange: Range | RangeAreas | string, copyTypeString?: "All" | "Formulas" | "Values" | "Formats", skipBlanks?: boolean, transpose?: boolean): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: sourceRange
          description: '<span data-ttu-id="d260a-182">Исходный диапазон или RangeAreas, из которого производится копирование.</span><span class="sxs-lookup"><span data-stu-id="d260a-182">The source range or RangeAreas to copy from.</span></span> <span data-ttu-id="d260a-183">Если исходный RangeAreas имеет несколько диапазонов, их форма должна быть создана путем удаления полных строк или столбцов из прямоугольного диапазона.</span><span class="sxs-lookup"><span data-stu-id="d260a-183">When the source RangeAreas has multiple ranges, their form must be able to be created by removing full rows or columns from a rectangular range.</span></span>'
          type:
            - 'excel!Excel.Range#copyFrom~1:complex'
        - id: copyTypeString
          description: '<span data-ttu-id="d260a-184">Тип данных или форматирования ячеек, которые необходимо скопировать.</span><span class="sxs-lookup"><span data-stu-id="d260a-184">The type of cell data or formatting to copy over.</span></span> <span data-ttu-id="d260a-185">Значение по умолчанию — "ALL".</span><span class="sxs-lookup"><span data-stu-id="d260a-185">Default is "All".</span></span>'
          type:
            - '"All" | "Formulas" | "Values" | "Formats"'
        - id: skipBlanks
          description: '<span data-ttu-id="d260a-186">Значение true, если необходимо пропускать пустые ячейки в исходном диапазоне.</span><span class="sxs-lookup"><span data-stu-id="d260a-186">True if to skip blank cells in the source range.</span></span> <span data-ttu-id="d260a-187">Значение по умолчанию — false.</span><span class="sxs-lookup"><span data-stu-id="d260a-187">Default is false.</span></span>'
          type:
            - boolean
        - id: transpose
          description: '<span data-ttu-id="d260a-188">Значение true, если требуется переставить ячейки в целевом диапазоне.</span><span class="sxs-lookup"><span data-stu-id="d260a-188">True if to transpose the cells in the destination range.</span></span> <span data-ttu-id="d260a-189">Значение по умолчанию — false.</span><span class="sxs-lookup"><span data-stu-id="d260a-189">Default is false.</span></span>'
          type:
            - boolean
  - uid: 'excel!Excel.Range#dataValidation:member'
    summary: |-
      <span data-ttu-id="d260a-190">Возвращает объект проверки данных.</span><span class="sxs-lookup"><span data-stu-id="d260a-190">Returns a data validation object.</span></span>

      <span data-ttu-id="d260a-191">\[[Набор API: ExcelApi 1,8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d260a-191">\[ [API set: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: dataValidation
    fullName: dataValidation
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly dataValidation: Excel.DataValidation;'
      return:
        type:
          - 'excel!Excel.DataValidation:class'
  - uid: 'excel!Excel.Range#delete:member(1)'
    summary: |-
      <span data-ttu-id="d260a-192">Удаляет ячейки, связанные с диапазоном.</span><span class="sxs-lookup"><span data-stu-id="d260a-192">Deletes the cells associated with the range.</span></span>

      <span data-ttu-id="d260a-193">\[[Набор API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d260a-193">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: delete(shift)
    fullName: delete(shift)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'delete(shift: Excel.DeleteShiftDirection): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a><span data-ttu-id="d260a-194">Примеры</span><span class="sxs-lookup"><span data-stu-id="d260a-194">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "D:F";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
              range.delete("Left");
              return ctx.sync(); 
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: shift
          description: <span data-ttu-id="d260a-195">Определяет способ сдвига ячеек.</span><span class="sxs-lookup"><span data-stu-id="d260a-195">Specifies which way to shift the cells.</span></span> <span data-ttu-id="d260a-196">Дополнительные сведения см. в статье Excel. Делетешифтдиректион.</span><span class="sxs-lookup"><span data-stu-id="d260a-196">See Excel.DeleteShiftDirection for details.</span></span>
          type:
            - 'excel!Excel.DeleteShiftDirection:enum'
  - uid: 'excel!Excel.Range#delete:member(2)'
    summary: |-
      <span data-ttu-id="d260a-197">Удаляет ячейки, связанные с диапазоном.</span><span class="sxs-lookup"><span data-stu-id="d260a-197">Deletes the cells associated with the range.</span></span>

      <span data-ttu-id="d260a-198">\[[Набор API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d260a-198">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: delete(shiftString)
    fullName: delete(shiftString)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'delete(shiftString: "Up" | "Left"): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: shiftString
          description: <span data-ttu-id="d260a-199">Определяет способ сдвига ячеек.</span><span class="sxs-lookup"><span data-stu-id="d260a-199">Specifies which way to shift the cells.</span></span> <span data-ttu-id="d260a-200">Дополнительные сведения см. в статье Excel. Делетешифтдиректион.</span><span class="sxs-lookup"><span data-stu-id="d260a-200">See Excel.DeleteShiftDirection for details.</span></span>
          type:
            - '"Up" | "Left"'
  - uid: 'excel!Excel.Range#find:member(1)'
    summary: |-
      <span data-ttu-id="d260a-201">Находит определенную строку на основе указанных условий.</span><span class="sxs-lookup"><span data-stu-id="d260a-201">Finds the given string based on the criteria specified.</span></span> <span data-ttu-id="d260a-202">Если текущий диапазон больше, чем одна ячейка, то поиск будет ограничен этим диапазоном, в ином случае поиск будет охватывать весь лист, начиная с этой ячейки.</span><span class="sxs-lookup"><span data-stu-id="d260a-202">If the current range is larger than a single cell, then the search will be limited to that range, else the search will cover the entire sheet starting after that cell.</span></span>

      <span data-ttu-id="d260a-203">\[[Набор API: ExcelApi 1,9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d260a-203">\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: 'find(text, criteria)'
    fullName: 'find(text, criteria)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'find(text: string, criteria: Excel.SearchCriteria): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: |-
          <span data-ttu-id="d260a-204">Объект Range, представляющий первую ячейку, содержащую значение, совпадающее с искомым текстом и условием.</span><span class="sxs-lookup"><span data-stu-id="d260a-204">The Range object representing the first cell that contains a value matching the search text and criteria.</span></span>

          #### <a name="examples"></a><span data-ttu-id="d260a-205">Примеры</span><span class="sxs-lookup"><span data-stu-id="d260a-205">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Sample");
              const table = sheet.tables.getItem("ExpensesTable");
              const searchRange = table.getRange();

              // NOTE: If no match is found, an ItemNotFound error
              // is thrown when Range.find is evaluated.
              const foundRange = searchRange.find($("#searchText").text(), {
                  completeMatch: isCompleteMatchToggle,
                  matchCase: isMatchCaseToggle,
                  searchDirection: searchDirectionToggle
              });
              
              foundRange.load("address");
              await context.sync();


              console.log(foundRange.address);
          });
          ```
      parameters:
        - id: text
          description: <span data-ttu-id="d260a-206">Строка для поиска.</span><span class="sxs-lookup"><span data-stu-id="d260a-206">The string to find.</span></span>
          type:
            - string
        - id: criteria
          description: '<span data-ttu-id="d260a-207">Дополнительные критерии поиска, в том числе направление поиска и то, должны ли поисковые данные совпадать с ячейкой целиком или с учетом регистра.</span><span class="sxs-lookup"><span data-stu-id="d260a-207">Additional search criteria, including the search direction and whether the search needs to match the entire cell or be case sensitive.</span></span>'
          type:
            - 'excel!Excel.SearchCriteria:interface'
  - uid: 'excel!Excel.Range#findOrNullObject:member(1)'
    summary: |-
      <span data-ttu-id="d260a-208">Находит определенную строку на основе указанных условий.</span><span class="sxs-lookup"><span data-stu-id="d260a-208">Finds the given string based on the criteria specified.</span></span> <span data-ttu-id="d260a-209">Если текущий диапазон больше, чем одна ячейка, то поиск будет ограничен этим диапазоном, в ином случае поиск будет охватывать весь лист, начиная с этой ячейки.</span><span class="sxs-lookup"><span data-stu-id="d260a-209">If the current range is larger than a single cell, then the search will be limited to that range, else the search will cover the entire sheet starting after that cell.</span></span> <span data-ttu-id="d260a-210">Если совпадений нет, эта функция возвращает пустой объект.</span><span class="sxs-lookup"><span data-stu-id="d260a-210">If there are no matches, this function will return a null object.</span></span>

      <span data-ttu-id="d260a-211">\[[Набор API: ExcelApi 1,9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d260a-211">\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: 'findOrNullObject(text, criteria)'
    fullName: 'findOrNullObject(text, criteria)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'findOrNullObject(text: string, criteria: Excel.SearchCriteria): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: |-
          <span data-ttu-id="d260a-212">Диапазон, соответствующий условиям поиска.</span><span class="sxs-lookup"><span data-stu-id="d260a-212">The Range which matched the search criteria.</span></span>

          #### <a name="examples"></a><span data-ttu-id="d260a-213">Примеры</span><span class="sxs-lookup"><span data-stu-id="d260a-213">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Sample");
              const table = sheet.tables.getItem("ExpensesTable");
              const searchRange = table.getRange();
              const foundRange = searchRange.findOrNullObject($("#searchText").text(), {
                  completeMatch: isCompleteMatchToggle,
                  matchCase: isMatchCaseToggle,
                  searchDirection: searchDirectionToggle
              });
              
              foundRange.load("address");
              await context.sync();

              if (foundRange.isNullObject) {
                  console.log("Text not found");
              } else {
                  console.log(foundRange.address);
              }
          });
          ```
      parameters:
        - id: text
          description: <span data-ttu-id="d260a-214">Строка для поиска.</span><span class="sxs-lookup"><span data-stu-id="d260a-214">The string to find.</span></span>
          type:
            - string
        - id: criteria
          description: '<span data-ttu-id="d260a-215">Дополнительные критерии поиска, в том числе направление поиска и то, должны ли поисковые данные совпадать с ячейкой целиком или с учетом регистра.</span><span class="sxs-lookup"><span data-stu-id="d260a-215">Additional search criteria, including the search direction and whether the search needs to match the entire cell or be case sensitive.</span></span>'
          type:
            - 'excel!Excel.SearchCriteria:interface'
  - uid: 'excel!Excel.Range#flashFill:member(1)'
    summary: |-
      <span data-ttu-id="d260a-216">Выполняет мгновенное заполнение текущего диапазона. Функция мгновенного заполнения автоматически подставляет данные, когда обнаруживает закономерность, поэтому диапазон должен состоять из одного столбца со смежными данными, чтобы выявить закономерность.</span><span class="sxs-lookup"><span data-stu-id="d260a-216">Does FlashFill to current range.Flash Fill will automatically fills data when it senses a pattern, so the range must be single column range and have data around in order to find pattern.</span></span>

      <span data-ttu-id="d260a-217">\[[Набор API: ExcelApi 1,9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d260a-217">\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: flashFill()
    fullName: flashFill()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'flashFill(): void;'
      return:
        type:
          - void
        description: ''
  - uid: 'excel!Excel.Range#format:member'
    summary: |-
      <span data-ttu-id="d260a-218">Возвращает объект формата, в который включены шрифт, заливка, границы, выравнивание и другие свойства диапазона.</span><span class="sxs-lookup"><span data-stu-id="d260a-218">Returns a format object, encapsulating the range's font, fill, borders, alignment, and other properties.</span></span> <span data-ttu-id="d260a-219">Только для чтения.</span><span class="sxs-lookup"><span data-stu-id="d260a-219">Read-only.</span></span>

      <span data-ttu-id="d260a-220">\[[Набор API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d260a-220">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: format
    fullName: format
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly format: Excel.RangeFormat;'
      return:
        type:
          - 'excel!Excel.RangeFormat:class'
  - uid: 'excel!Excel.Range#formulas:member'
    summary: |-
      <span data-ttu-id="d260a-221">Представляет формулу в формате A1.</span><span class="sxs-lookup"><span data-stu-id="d260a-221">Represents the formula in A1-style notation.</span></span> <span data-ttu-id="d260a-222">При задании формул для диапазона аргументом value может быть одно значение (String) или двухмерный массив.</span><span class="sxs-lookup"><span data-stu-id="d260a-222">When setting formulas to a range, the value argument can be either a single value (a string) or a two-dimensional array.</span></span> <span data-ttu-id="d260a-223">Если аргумент является одиночным значением, он будет применен ко всем ячейкам в диапазоне.</span><span class="sxs-lookup"><span data-stu-id="d260a-223">If the argument is a single value, it will be applied to all cells in the range.</span></span>

      <span data-ttu-id="d260a-224">\[[Набор API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d260a-224">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: formulas
    fullName: formulas
    langs:
      - typeScript
    type: property
    syntax:
      content: 'formulas: any[][];'
      return:
        type:
          - 'any[][]'
  - uid: 'excel!Excel.Range#formulasLocal:member'
    summary: |-
      <span data-ttu-id="d260a-225">Представляет формулу в нотации стиля A1 на языке пользователя и в соответствии с его языковым стандартом.</span><span class="sxs-lookup"><span data-stu-id="d260a-225">Represents the formula in A1-style notation, in the user's language and number-formatting locale.</span></span> <span data-ttu-id="d260a-226">Например, английская формула =SUM(A1, 1.5) превратится в "=СУММ(A1; 1,5)" на русском языке.</span><span class="sxs-lookup"><span data-stu-id="d260a-226">For example, the English "=SUM(A1, 1.5)" formula would become "=SUMME(A1; 1,5)" in German.</span></span> <span data-ttu-id="d260a-227">При задании формул для диапазона аргументом value может быть одно значение (String) или двухмерный массив.</span><span class="sxs-lookup"><span data-stu-id="d260a-227">When setting formulas to a range, the value argument can be either a single value (a string) or a two-dimensional array.</span></span> <span data-ttu-id="d260a-228">Если аргумент является одиночным значением, он будет применен ко всем ячейкам в диапазоне.</span><span class="sxs-lookup"><span data-stu-id="d260a-228">If the argument is a single value, it will be applied to all cells in the range.</span></span>

      <span data-ttu-id="d260a-229">\[[Набор API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d260a-229">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: formulasLocal
    fullName: formulasLocal
    langs:
      - typeScript
    type: property
    syntax:
      content: 'formulasLocal: any[][];'
      return:
        type:
          - 'any[][]'
  - uid: 'excel!Excel.Range#formulasR1C1:member'
    summary: |-
      <span data-ttu-id="d260a-230">Представляет формулу в формате R1C1.</span><span class="sxs-lookup"><span data-stu-id="d260a-230">Represents the formula in R1C1-style notation.</span></span> <span data-ttu-id="d260a-231">При задании формул для диапазона аргументом value может быть одно значение (String) или двухмерный массив.</span><span class="sxs-lookup"><span data-stu-id="d260a-231">When setting formulas to a range, the value argument can be either a single value (a string) or a two-dimensional array.</span></span> <span data-ttu-id="d260a-232">Если аргумент является одиночным значением, он будет применен ко всем ячейкам в диапазоне.</span><span class="sxs-lookup"><span data-stu-id="d260a-232">If the argument is a single value, it will be applied to all cells in the range.</span></span>

      <span data-ttu-id="d260a-233">\[[Набор API: ExcelApi 1,2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d260a-233">\[ [API set: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: formulasR1C1
    fullName: formulasR1C1
    langs:
      - typeScript
    type: property
    syntax:
      content: 'formulasR1C1: any[][];'
      return:
        type:
          - 'any[][]'
  - uid: 'excel!Excel.Range#getAbsoluteResizedRange:member(1)'
    summary: |-
      <span data-ttu-id="d260a-234">Получает объект Range с той же верхней левой ячейкой, что и текущий объект Range, но с указанным количеством строк и столбцов.</span><span class="sxs-lookup"><span data-stu-id="d260a-234">Gets a Range object with the same top-left cell as the current Range object, but with the specified numbers of rows and columns.</span></span>

      <span data-ttu-id="d260a-235">\[[Набор API: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d260a-235">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: 'getAbsoluteResizedRange(numRows, numColumns)'
    fullName: 'getAbsoluteResizedRange(numRows, numColumns)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getAbsoluteResizedRange(numRows: number, numColumns: number): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: ''
      parameters:
        - id: numRows
          description: <span data-ttu-id="d260a-236">Число строк нового размера диапазона.</span><span class="sxs-lookup"><span data-stu-id="d260a-236">The number of rows of the new range size.</span></span>
          type:
            - number
        - id: numColumns
          description: <span data-ttu-id="d260a-237">Число столбцов нового размера диапазона.</span><span class="sxs-lookup"><span data-stu-id="d260a-237">The number of columns of the new range size.</span></span>
          type:
            - number
  - uid: 'excel!Excel.Range#getBoundingRect:member(1)'
    summary: |-
      <span data-ttu-id="d260a-238">Возвращает наименьший объект диапазона, включающий в себя заданные диапазоны.</span><span class="sxs-lookup"><span data-stu-id="d260a-238">Gets the smallest range object that encompasses the given ranges.</span></span> <span data-ttu-id="d260a-239">Например, GetBoundingRect для "B2:C5" и "D10:E15" возвращает значение "B2:E15".</span><span class="sxs-lookup"><span data-stu-id="d260a-239">For example, the GetBoundingRect of "B2:C5" and "D10:E15" is "B2:E15".</span></span>

      <span data-ttu-id="d260a-240">\[[Набор API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d260a-240">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getBoundingRect(anotherRange)
    fullName: getBoundingRect(anotherRange)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getBoundingRect(anotherRange: Range | string): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="d260a-241">Примеры</span><span class="sxs-lookup"><span data-stu-id="d260a-241">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "D4:G6";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
              var range = range.getBoundingRect("G4:H8");
              range.load('address');
              return ctx.sync().then(function() {
                  console.log(range.address); // Prints Sheet1!D4:H8
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: anotherRange
          description: <span data-ttu-id="d260a-242">Объект диапазона либо адрес или имя диапазона.</span><span class="sxs-lookup"><span data-stu-id="d260a-242">The range object or address or range name.</span></span>
          type:
            - 'excel!Excel.Range#getBoundingRect~0:complex'
  - uid: 'excel!Excel.Range#getCell:member(1)'
    summary: |-
      <span data-ttu-id="d260a-243">Получает объект диапазона, содержащий одну ячейку, по номеру строки и столбца.</span><span class="sxs-lookup"><span data-stu-id="d260a-243">Gets the range object containing the single cell based on row and column numbers.</span></span> <span data-ttu-id="d260a-244">Ячейка может находиться вне границ родительского диапазона, пока она остается в сетке листа.</span><span class="sxs-lookup"><span data-stu-id="d260a-244">The cell can be outside the bounds of its parent range, so long as it stays within the worksheet grid.</span></span> <span data-ttu-id="d260a-245">Возвращаемая ячейка располагается относительно верхней левой ячейки диапазона.</span><span class="sxs-lookup"><span data-stu-id="d260a-245">The returned cell is located relative to the top left cell of the range.</span></span>

      <span data-ttu-id="d260a-246">\[[Набор API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d260a-246">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: 'getCell(row, column)'
    fullName: 'getCell(row, column)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getCell(row: number, column: number): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="d260a-247">Примеры</span><span class="sxs-lookup"><span data-stu-id="d260a-247">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "A1:F8";
              var worksheet = ctx.workbook.worksheets.getItem(sheetName);
              var range = worksheet.getRange(rangeAddress);
              var cell = range.cell(0,0);
              cell.load('address');
              return ctx.sync().then(function() {
                  console.log(cell.address);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: row
          description: '<span data-ttu-id="d260a-248">Номер строки ячейки, которую требуется извлечь.</span><span class="sxs-lookup"><span data-stu-id="d260a-248">Row number of the cell to be retrieved.</span></span> <span data-ttu-id="d260a-249">Используется нулевой индекс.</span><span class="sxs-lookup"><span data-stu-id="d260a-249">Zero-indexed.</span></span>'
          type:
            - number
        - id: column
          description: '<span data-ttu-id="d260a-250">Номер столбца ячейки, которую требуется извлечь.</span><span class="sxs-lookup"><span data-stu-id="d260a-250">Column number of the cell to be retrieved.</span></span> <span data-ttu-id="d260a-251">Используется нулевой индекс.</span><span class="sxs-lookup"><span data-stu-id="d260a-251">Zero-indexed.</span></span>'
          type:
            - number
  - uid: 'excel!Excel.Range#getCellProperties:member(1)'
    summary: |-
      <span data-ttu-id="d260a-252">Возвращает двумерный массив, в который включены данные для шрифта, заливки, границ, выравнивания и других свойств каждой ячейки.</span><span class="sxs-lookup"><span data-stu-id="d260a-252">Returns a 2D array, encapsulating the data for each cell's font, fill, borders, alignment, and other properties.</span></span>

      <span data-ttu-id="d260a-253">\[[Набор API: ExcelApi 1,9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d260a-253">\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getCellProperties(cellPropertiesLoadOptions)
    fullName: getCellProperties(cellPropertiesLoadOptions)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getCellProperties(cellPropertiesLoadOptions: CellPropertiesLoadOptions): OfficeExtension.ClientResult<CellProperties[][]>;'
      return:
        type:
          - 'excel!Excel.Range#getCellProperties~0:complex'
        description: |-
          <span data-ttu-id="d260a-254">Двумерный массив, каждый элемент которого представляет запрошенные свойства соответствующей ячейки.</span><span class="sxs-lookup"><span data-stu-id="d260a-254">A 2D array where each item represents the requested properties of the corresponding cell.</span></span>

          #### <a name="examples"></a><span data-ttu-id="d260a-255">Примеры</span><span class="sxs-lookup"><span data-stu-id="d260a-255">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const cell = context.workbook.getActiveCell();

              // Define the cell properties to get by setting the matching LoadOptions to true.
              const propertiesToGet = cell.getCellProperties({
                  address: true,
                  format: {
                      fill: {
                          color: true
                      },
                      font: {
                          color: true
                      }
                  },
                  style: true
              });

              // Sync to get the data from the workbook.
              await context.sync();
              const cellProperties = propertiesToGet.value[0][0];
              console.log(
                  `Address: ${cellProperties.address}\nStyle: ${cellProperties.style}\nFill Color: ${cellProperties.format.fill.color}\nFont Color: ${cellProperties.format.font.color}`);
          });
          ```
      parameters:
        - id: cellPropertiesLoadOptions
          description: '<span data-ttu-id="d260a-256">Объект, представляющий свойства ячейки, которые необходимо загрузить.</span><span class="sxs-lookup"><span data-stu-id="d260a-256">An object that represents which cell properties to load.</span></span>'
          type:
            - 'excel!Excel.CellPropertiesLoadOptions:interface'
  - uid: 'excel!Excel.Range#getColumn:member(1)'
    summary: |-
      <span data-ttu-id="d260a-257">Возвращает столбец в диапазоне.</span><span class="sxs-lookup"><span data-stu-id="d260a-257">Gets a column contained in the range.</span></span>

      <span data-ttu-id="d260a-258">\[[Набор API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d260a-258">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getColumn(column)
    fullName: getColumn(column)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getColumn(column: number): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="d260a-259">Примеры</span><span class="sxs-lookup"><span data-stu-id="d260a-259">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet19";
              var rangeAddress = "A1:F8";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress).getColumn(1);
              range.load('address');
              return ctx.sync().then(function() {
                  console.log(range.address); // prints Sheet1!B1:B8
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: column
          description: '<span data-ttu-id="d260a-260">Номер столбца диапазона, который требуется извлечь.</span><span class="sxs-lookup"><span data-stu-id="d260a-260">Column number of the range to be retrieved.</span></span> <span data-ttu-id="d260a-261">Используется нулевой индекс.</span><span class="sxs-lookup"><span data-stu-id="d260a-261">Zero-indexed.</span></span>'
          type:
            - number
  - uid: 'excel!Excel.Range#getColumnProperties:member(1)'
    summary: |-
      <span data-ttu-id="d260a-262">Возвращает одномерный массив, в который включены данные для шрифта, заливки, границ, выравнивания и других свойств каждого столбца.</span><span class="sxs-lookup"><span data-stu-id="d260a-262">Returns a single-dimensional array, encapsulating the data for each column's font, fill, borders, alignment, and other properties.</span></span> <span data-ttu-id="d260a-263">Для свойств, не являющихся одинаковыми в каждой ячейке определенного столбца, возвращается значение null.</span><span class="sxs-lookup"><span data-stu-id="d260a-263">For properties that are not consistent across each cell within a given column, null will be returned.</span></span>

      <span data-ttu-id="d260a-264">\[[Набор API: ExcelApi 1,9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d260a-264">\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getColumnProperties(columnPropertiesLoadOptions)
    fullName: getColumnProperties(columnPropertiesLoadOptions)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getColumnProperties(columnPropertiesLoadOptions: ColumnPropertiesLoadOptions): OfficeExtension.ClientResult<ColumnProperties[]>;'
      return:
        type:
          - 'excel!Excel.Range#getColumnProperties~0:complex'
        description: '<span data-ttu-id="d260a-265">Массив, каждый элемент которого представляет запрошенные свойства соответствующего столбца.</span><span class="sxs-lookup"><span data-stu-id="d260a-265">An array where each item represents the requested properties of the corresponding column.</span></span>'
      parameters:
        - id: columnPropertiesLoadOptions
          description: '<span data-ttu-id="d260a-266">Объект, представляющий свойства столбцов для загрузки.</span><span class="sxs-lookup"><span data-stu-id="d260a-266">An object that represents which column properties to load.</span></span>'
          type:
            - 'excel!Excel.ColumnPropertiesLoadOptions:interface'
  - uid: 'excel!Excel.Range#getColumnsAfter:member(1)'
    summary: |-
      <span data-ttu-id="d260a-267">Возвращает определенное количество столбцов справа от текущего объекта Range.</span><span class="sxs-lookup"><span data-stu-id="d260a-267">Gets a certain number of columns to the right of the current Range object.</span></span>

      <span data-ttu-id="d260a-268">\[[Набор API: ExcelApi 1,2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d260a-268">\[ [API set: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getColumnsAfter(count)
    fullName: getColumnsAfter(count)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getColumnsAfter(count?: number): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: ''
      parameters:
        - id: count
          description: '<span data-ttu-id="d260a-p138">Необязательный. Количество столбцов, включаемых в полученный диапазон. Чтобы создать диапазон за пределами текущего диапазона, используйте положительное число. Вы также можете использовать отрицательное число, чтобы создать диапазон в рамках текущего диапазона. Значение по умолчанию — 1.</span><span class="sxs-lookup"><span data-stu-id="d260a-p138">Optional. The number of columns to include in the resulting range. In general, use a positive number to create a range outside the current range. You can also use a negative number to create a range within the current range. The default value is 1.</span></span>'
          type:
            - number
  - uid: 'excel!Excel.Range#getColumnsBefore:member(1)'
    summary: |-
      <span data-ttu-id="d260a-274">Возвращает определенное количество столбцов слева от текущего объекта Range.</span><span class="sxs-lookup"><span data-stu-id="d260a-274">Gets a certain number of columns to the left of the current Range object.</span></span>

      <span data-ttu-id="d260a-275">\[[Набор API: ExcelApi 1,2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d260a-275">\[ [API set: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getColumnsBefore(count)
    fullName: getColumnsBefore(count)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getColumnsBefore(count?: number): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: ''
      parameters:
        - id: count
          description: '<span data-ttu-id="d260a-p139">Необязательный. Количество столбцов, включаемых в полученный диапазон. Чтобы создать диапазон за пределами текущего диапазона, используйте положительное число. Вы также можете использовать отрицательное число, чтобы создать диапазон в рамках текущего диапазона. Значение по умолчанию — 1.</span><span class="sxs-lookup"><span data-stu-id="d260a-p139">Optional. The number of columns to include in the resulting range. In general, use a positive number to create a range outside the current range. You can also use a negative number to create a range within the current range. The default value is 1.</span></span>'
          type:
            - number
  - uid: 'excel!Excel.Range#getEntireColumn:member(1)'
    summary: |-
      <span data-ttu-id="d260a-281">Получает объект, представляющий весь столбец диапазона (например, если текущий диапазон представляет ячейки "B4: E11", а `getEntireColumn` — диапазон, представляющий столбцы "б:е").</span><span class="sxs-lookup"><span data-stu-id="d260a-281">Gets an object that represents the entire column of the range (for example, if the current range represents cells "B4:E11", its `getEntireColumn` is a range that represents columns "B:E").</span></span>

      <span data-ttu-id="d260a-282">\[[Набор API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d260a-282">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getEntireColumn()
    fullName: getEntireColumn()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getEntireColumn(): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="d260a-283">Примеры</span><span class="sxs-lookup"><span data-stu-id="d260a-283">Examples</span></span>

          ```javascript
          // Note: the grid properties of the Range (values, numberFormat, formulas) 
          // contains null since the Range in question is unbounded.
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "D:F";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
              var rangeEC = range.getEntireColumn();
              rangeEC.load('address');
              return ctx.sync().then(function() {
                  console.log(rangeEC.address);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: 'excel!Excel.Range#getEntireRow:member(1)'
    summary: |-
      <span data-ttu-id="d260a-284">Получает объект, представляющий всю строку диапазона (например, если текущий диапазон представляет ячейки "B4: E11", а `GetEntireRow` — диапазон, представляющий строки "4:11").</span><span class="sxs-lookup"><span data-stu-id="d260a-284">Gets an object that represents the entire row of the range (for example, if the current range represents cells "B4:E11", its `GetEntireRow` is a range that represents rows "4:11").</span></span>

      <span data-ttu-id="d260a-285">\[[Набор API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d260a-285">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getEntireRow()
    fullName: getEntireRow()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getEntireRow(): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="d260a-286">Примеры</span><span class="sxs-lookup"><span data-stu-id="d260a-286">Examples</span></span>

          ```javascript
          // Gets an object that represents the entire row of the range 
          // (for example, if the current range represents cells "B4:E11", 
          // its GetEntireRow is a range that represents rows "4:11").
          Excel.run(function (ctx) {
              var sheetName = "Sheet1";
              var rangeAddress = "D:F"; 
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
              var rangeER = range.getEntireRow();
              rangeER.load('address');
              return ctx.sync().then(function() {
                  console.log(rangeER.address);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: 'excel!Excel.Range#getImage:member(1)'
    summary: |-
      <span data-ttu-id="d260a-287">Отрисовывает диапазон в виде PNG-изображения в кодировке Base64.</span><span class="sxs-lookup"><span data-stu-id="d260a-287">Renders the range as a base64-encoded png image.</span></span>

      <span data-ttu-id="d260a-288">\[[Набор API: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d260a-288">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getImage()
    fullName: getImage()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getImage(): OfficeExtension.ClientResult<string>;'
      return:
        type:
          - 'excel!Excel.Range#getImage~0:complex'
        description: ''
  - uid: 'excel!Excel.Range#getIntersection:member(1)'
    summary: |-
      <span data-ttu-id="d260a-289">Возвращает объект диапазона, представляющий прямоугольное пересечение заданных диапазонов.</span><span class="sxs-lookup"><span data-stu-id="d260a-289">Gets the range object that represents the rectangular intersection of the given ranges.</span></span>

      <span data-ttu-id="d260a-290">\[[Набор API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d260a-290">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getIntersection(anotherRange)
    fullName: getIntersection(anotherRange)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getIntersection(anotherRange: Range | string): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="d260a-291">Примеры</span><span class="sxs-lookup"><span data-stu-id="d260a-291">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "A1:F8";
              var range = 
                  ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress).getIntersection("D4:G6");
              range.load('address');
              return ctx.sync().then(function() {
                  console.log(range.address); // prints Sheet1!D4:F6
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: anotherRange
          description: '<span data-ttu-id="d260a-292">Объект диапазона или адрес диапазона, который будет использоваться для определения пересечения диапазонов.</span><span class="sxs-lookup"><span data-stu-id="d260a-292">The range object or range address that will be used to determine the intersection of ranges.</span></span>'
          type:
            - 'excel!Excel.Range#getIntersection~0:complex'
  - uid: 'excel!Excel.Range#getIntersectionOrNullObject:member(1)'
    summary: |-
      <span data-ttu-id="d260a-293">Возвращает объект диапазона, представляющий прямоугольное пересечение заданных диапазонов.</span><span class="sxs-lookup"><span data-stu-id="d260a-293">Gets the range object that represents the rectangular intersection of the given ranges.</span></span> <span data-ttu-id="d260a-294">Если пересечение не найдено, возвращает пустой объект.</span><span class="sxs-lookup"><span data-stu-id="d260a-294">If no intersection is found, will return a null object.</span></span>

      <span data-ttu-id="d260a-295">\[[Набор API: ExcelApi 1,4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d260a-295">\[ [API set: ExcelApi 1.4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getIntersectionOrNullObject(anotherRange)
    fullName: getIntersectionOrNullObject(anotherRange)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getIntersectionOrNullObject(anotherRange: Range | string): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="d260a-296">Примеры</span><span class="sxs-lookup"><span data-stu-id="d260a-296">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Sample");
              const salesTable = sheet.tables.getItem("SalesTable");
              const dataRange = salesTable.getDataBodyRange();

              // We want the most recent quarter that has data, so
              // exclude quarters without data and get the last of
              // the remaining columns.
              const usedDataRange = dataRange.getUsedRange(true /* valuesOnly */);
              const currentQuarterRange = usedDataRange.getLastColumn();

              // Asian and European teams have separate contests.
              const asianSalesRange = sheet.getRange("A2:E4");
              const europeanSalesRange = sheet.getRange("A5:E7");

              // The data for each chart is the intersection of the
              // current quarter column and the rows for the continent.
              const asianContestRange = asianSalesRange.getIntersectionOrNullObject(currentQuarterRange);
              const europeanContestRange = europeanSalesRange.getIntersectionOrNullObject(currentQuarterRange);

              // Must sync before you can test the output of *OrNullObject
              // method/property.
              await context.sync();

              if (asianContestRange.isNullObject) {
                  // See the declaration of this method for how to
                  // test this code path.
                  reportMissingData("Asian");
              } else {
                  createContinentChart(
                      sheet,
                      "Asian",
                      asianContestRange,
                      "A9",
                      "F24"
                  );
              }

              if (europeanContestRange.isNullObject) {
                  // See the declaration of this method for how to
                  // test this code path.
                  reportMissingData("European");
              } else {
                  createContinentChart(
                      sheet,
                      "European",
                      europeanContestRange,
                      "A25",
                      "F40"
                  );
              }

              await context.sync();
          });
          ```
      parameters:
        - id: anotherRange
          description: '<span data-ttu-id="d260a-297">Объект диапазона или адрес диапазона, который будет использоваться для определения пересечения диапазонов.</span><span class="sxs-lookup"><span data-stu-id="d260a-297">The range object or range address that will be used to determine the intersection of ranges.</span></span>'
          type:
            - 'excel!Excel.Range#getIntersectionOrNullObject~0:complex'
  - uid: 'excel!Excel.Range#getLastCell:member(1)'
    summary: |-
      <span data-ttu-id="d260a-298">Возвращает последнюю ячейку в диапазоне.</span><span class="sxs-lookup"><span data-stu-id="d260a-298">Gets the last cell within the range.</span></span> <span data-ttu-id="d260a-299">Например, последняя ячейка диапазона B2:D5 — D5.</span><span class="sxs-lookup"><span data-stu-id="d260a-299">For example, the last cell of "B2:D5" is "D5".</span></span>

      <span data-ttu-id="d260a-300">\[[Набор API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d260a-300">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getLastCell()
    fullName: getLastCell()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getLastCell(): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="d260a-301">Примеры</span><span class="sxs-lookup"><span data-stu-id="d260a-301">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "A1:F8";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress).getLastCell();
              range.load('address');
              return ctx.sync().then(function() {
                  console.log(range.address); // prints Sheet1!F8
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: 'excel!Excel.Range#getLastColumn:member(1)'
    summary: |-
      <span data-ttu-id="d260a-302">Возвращает последний столбец в диапазоне.</span><span class="sxs-lookup"><span data-stu-id="d260a-302">Gets the last column within the range.</span></span> <span data-ttu-id="d260a-303">Например, последний столбец диапазона B2:D5 — D2:D5.</span><span class="sxs-lookup"><span data-stu-id="d260a-303">For example, the last column of "B2:D5" is "D2:D5".</span></span>

      <span data-ttu-id="d260a-304">\[[Набор API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d260a-304">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getLastColumn()
    fullName: getLastColumn()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getLastColumn(): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="d260a-305">Примеры</span><span class="sxs-lookup"><span data-stu-id="d260a-305">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "A1:F8";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress).getLastColumn();
              range.load('address');
              return ctx.sync().then(function() {
                  console.log(range.address); // prints Sheet1!F1:F8
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: 'excel!Excel.Range#getLastRow:member(1)'
    summary: |-
      <span data-ttu-id="d260a-306">Возвращает последнюю строку в диапазоне.</span><span class="sxs-lookup"><span data-stu-id="d260a-306">Gets the last row within the range.</span></span> <span data-ttu-id="d260a-307">Например, последняя строка в диапазоне "B2:D5" — "B5:D5".</span><span class="sxs-lookup"><span data-stu-id="d260a-307">For example, the last row of "B2:D5" is "B5:D5".</span></span>

      <span data-ttu-id="d260a-308">\[[Набор API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d260a-308">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getLastRow()
    fullName: getLastRow()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getLastRow(): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="d260a-309">Примеры</span><span class="sxs-lookup"><span data-stu-id="d260a-309">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "A1:F8";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress).getLastRow();
              range.load('address');
              return ctx.sync().then(function() {
                  console.log(range.address); // prints Sheet1!A8:F8
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: 'excel!Excel.Range#getOffsetRange:member(1)'
    summary: |-
      <span data-ttu-id="d260a-p144">Возвращает объект, представляющий диапазон, который смещен от указанного диапазона. Измерение возвращаемого диапазона будет соответствовать этому диапазону. Если результирующий диапазон выходит за пределы таблицы листа, возникнет ошибка.</span><span class="sxs-lookup"><span data-stu-id="d260a-p144">Gets an object which represents a range that's offset from the specified range. The dimension of the returned range will match this range. If the resulting range is forced outside the bounds of the worksheet grid, an error will be thrown.</span></span>

      <span data-ttu-id="d260a-313">\[[Набор API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d260a-313">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: 'getOffsetRange(rowOffset, columnOffset)'
    fullName: 'getOffsetRange(rowOffset, columnOffset)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getOffsetRange(rowOffset: number, columnOffset: number): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="d260a-314">Примеры</span><span class="sxs-lookup"><span data-stu-id="d260a-314">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "D4:F6";
              var range = 
                  ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress).getOffsetRange(-1,4);
              range.load('address');
              return ctx.sync().then(function() {
                  console.log(range.address); // prints Sheet1!H3:K5
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: rowOffset
          description: '<span data-ttu-id="d260a-p145">Количество строк (положительное, отрицательное или нулевое), на которое необходимо сместить диапазон. Положительные значения соответствуют смещению вниз, а отрицательные — вверх.</span><span class="sxs-lookup"><span data-stu-id="d260a-p145">The number of rows (positive, negative, or 0) by which the range is to be offset. Positive values are offset downward, and negative values are offset upward.</span></span>'
          type:
            - number
        - id: columnOffset
          description: '<span data-ttu-id="d260a-p146">Количество столбцов (положительное, отрицательное или 0), на который нужно сместить диапазон. Положительные значения соответствуют смещению вправо, а отрицательные — влево.</span><span class="sxs-lookup"><span data-stu-id="d260a-p146">The number of columns (positive, negative, or 0) by which the range is to be offset. Positive values are offset to the right, and negative values are offset to the left.</span></span>'
          type:
            - number
  - uid: 'excel!Excel.Range#getResizedRange:member(1)'
    summary: |-
      <span data-ttu-id="d260a-319">Возвращает объект Range, подобный текущему объекту Range, но увеличенный (или уменьшенный) на некоторое количество строк и столбцов от правого нижнего угла.</span><span class="sxs-lookup"><span data-stu-id="d260a-319">Gets a Range object similar to the current Range object, but with its bottom-right corner expanded (or contracted) by some number of rows and columns.</span></span>

      <span data-ttu-id="d260a-320">\[[Набор API: ExcelApi 1,2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d260a-320">\[ [API set: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: 'getResizedRange(deltaRows, deltaColumns)'
    fullName: 'getResizedRange(deltaRows, deltaColumns)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getResizedRange(deltaRows: number, deltaColumns: number): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: ''
      parameters:
        - id: deltaRows
          description: '<span data-ttu-id="d260a-p147">Количество строк, добавляемых в правый нижний угол, относительно текущего диапазона. Используйте положительное число, чтобы расширить диапазон или отрицательное число, чтобы уменьшить его.</span><span class="sxs-lookup"><span data-stu-id="d260a-p147">The number of rows by which to expand the bottom-right corner, relative to the current range. Use a positive number to expand the range, or a negative number to decrease it.</span></span>'
          type:
            - number
        - id: deltaColumns
          description: '<span data-ttu-id="d260a-323">Количество столбцов, по которым разворачивается нижний правый угол относительно текущего диапазона.</span><span class="sxs-lookup"><span data-stu-id="d260a-323">The number of columns by which to expand the bottom-right corner, relative to the current range.</span></span> <span data-ttu-id="d260a-324">Используйте положительное число, чтобы расширить диапазон или отрицательное число, чтобы уменьшить его.</span><span class="sxs-lookup"><span data-stu-id="d260a-324">Use a positive number to expand the range, or a negative number to decrease it.</span></span>'
          type:
            - number
  - uid: 'excel!Excel.Range#getRow:member(1)'
    summary: |-
      <span data-ttu-id="d260a-325">Возвращает строку из диапазона.</span><span class="sxs-lookup"><span data-stu-id="d260a-325">Gets a row contained in the range.</span></span>

      <span data-ttu-id="d260a-326">\[[Набор API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d260a-326">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getRow(row)
    fullName: getRow(row)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getRow(row: number): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="d260a-327">Примеры</span><span class="sxs-lookup"><span data-stu-id="d260a-327">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "A1:F8";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress).getRow(1);
              range.load('address');
              return ctx.sync().then(function() {
                  console.log(range.address); // prints Sheet1!A2:F2
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: row
          description: '<span data-ttu-id="d260a-328">Номер строки диапазона, который требуется извлечь.</span><span class="sxs-lookup"><span data-stu-id="d260a-328">Row number of the range to be retrieved.</span></span> <span data-ttu-id="d260a-329">Используется нулевой индекс.</span><span class="sxs-lookup"><span data-stu-id="d260a-329">Zero-indexed.</span></span>'
          type:
            - number
  - uid: 'excel!Excel.Range#getRowProperties:member(1)'
    summary: |-
      <span data-ttu-id="d260a-330">Возвращает одномерный массив, в который включены данные для шрифта, заливки, границ, выравнивания и других свойств каждой строки.</span><span class="sxs-lookup"><span data-stu-id="d260a-330">Returns a single-dimensional array, encapsulating the data for each row's font, fill, borders, alignment, and other properties.</span></span> <span data-ttu-id="d260a-331">Для свойств, не являющихся одинаковыми в каждой ячейке определенной строки, возвращается значение null.</span><span class="sxs-lookup"><span data-stu-id="d260a-331">For properties that are not consistent across each cell within a given row, null will be returned.</span></span>

      <span data-ttu-id="d260a-332">\[[Набор API: ExcelApi 1,9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d260a-332">\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getRowProperties(rowPropertiesLoadOptions)
    fullName: getRowProperties(rowPropertiesLoadOptions)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getRowProperties(rowPropertiesLoadOptions: RowPropertiesLoadOptions): OfficeExtension.ClientResult<RowProperties[]>;'
      return:
        type:
          - 'excel!Excel.Range#getRowProperties~0:complex'
        description: '<span data-ttu-id="d260a-333">Массив, каждый элемент которого представляет запрошенные свойства соответствующей строки.</span><span class="sxs-lookup"><span data-stu-id="d260a-333">An array where each item represents the requested properties of the corresponding row.</span></span>'
      parameters:
        - id: rowPropertiesLoadOptions
          description: '<span data-ttu-id="d260a-334">Объект, представляющий свойства строки, которые требуется загрузить.</span><span class="sxs-lookup"><span data-stu-id="d260a-334">An object that represents which row properties to load.</span></span>'
          type:
            - 'excel!Excel.RowPropertiesLoadOptions:interface'
  - uid: 'excel!Excel.Range#getRowsAbove:member(1)'
    summary: |-
      <span data-ttu-id="d260a-335">Возвращает определенное количество строк над текущим объектом Range.</span><span class="sxs-lookup"><span data-stu-id="d260a-335">Gets a certain number of rows above the current Range object.</span></span>

      <span data-ttu-id="d260a-336">\[[Набор API: ExcelApi 1,2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d260a-336">\[ [API set: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getRowsAbove(count)
    fullName: getRowsAbove(count)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getRowsAbove(count?: number): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: ''
      parameters:
        - id: count
          description: '<span data-ttu-id="d260a-p151">Необязательный. Количество строк, включаемых в полученный диапазон. Чтобы создать диапазон за пределами текущего диапазона, используйте положительное число. Вы также можете использовать отрицательное число, чтобы создать диапазон в рамках текущего диапазона. Значение по умолчанию — 1.</span><span class="sxs-lookup"><span data-stu-id="d260a-p151">Optional. The number of rows to include in the resulting range. In general, use a positive number to create a range outside the current range. You can also use a negative number to create a range within the current range. The default value is 1.</span></span>'
          type:
            - number
  - uid: 'excel!Excel.Range#getRowsBelow:member(1)'
    summary: |-
      <span data-ttu-id="d260a-342">Возвращает определенное количество строк под текущим объектом Range.</span><span class="sxs-lookup"><span data-stu-id="d260a-342">Gets a certain number of rows below the current Range object.</span></span>

      <span data-ttu-id="d260a-343">\[[Набор API: ExcelApi 1,2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d260a-343">\[ [API set: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getRowsBelow(count)
    fullName: getRowsBelow(count)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getRowsBelow(count?: number): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: ''
      parameters:
        - id: count
          description: '<span data-ttu-id="d260a-p152">Необязательный. Количество строк, включаемых в полученный диапазон. Чтобы создать диапазон за пределами текущего диапазона, используйте положительное число. Вы также можете использовать отрицательное число, чтобы создать диапазон в рамках текущего диапазона. Значение по умолчанию — 1.</span><span class="sxs-lookup"><span data-stu-id="d260a-p152">Optional. The number of rows to include in the resulting range. In general, use a positive number to create a range outside the current range. You can also use a negative number to create a range within the current range. The default value is 1.</span></span>'
          type:
            - number
  - uid: 'excel!Excel.Range#getSpecialCells:member(1)'
    summary: |-
      <span data-ttu-id="d260a-349">Получает объект RangeAreas, состоящий из одного или нескольких прямоугольных диапазонов, представляющих все ячейки, которые соответствуют указанному типу и значению.</span><span class="sxs-lookup"><span data-stu-id="d260a-349">Gets the RangeAreas object, comprising one or more rectangular ranges, that represents all the cells that match the specified type and value.</span></span> <span data-ttu-id="d260a-350">Если специальные ячейки не найдены, будет выдано сообщение об ошибке ItemNotFound.</span><span class="sxs-lookup"><span data-stu-id="d260a-350">If no special cells are found, an ItemNotFound error will be thrown.</span></span>

      <span data-ttu-id="d260a-351">\[[Набор API: ExcelApi 1,9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d260a-351">\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: 'getSpecialCells(cellType, cellValueType)'
    fullName: 'getSpecialCells(cellType, cellValueType)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getSpecialCells(cellType: Excel.SpecialCellType, cellValueType?: Excel.SpecialCellValueType): Excel.RangeAreas;'
      return:
        type:
          - 'excel!Excel.RangeAreas:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="d260a-352">Примеры</span><span class="sxs-lookup"><span data-stu-id="d260a-352">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {

              const sheet = context.workbook.worksheets.getActiveWorksheet();
              const usedRange = sheet.getUsedRange();

              // Find the ranges with either text or logical (boolean) values.
              const formulaRanges = usedRange.getSpecialCells("Constants", "LogicalText");
              formulaRanges.format.fill.color = "orange";

              return context.sync();
          });
          ```
      parameters:
        - id: cellType
          description: '<span data-ttu-id="d260a-353">Тип ячеек, которые необходимо включить в список.</span><span class="sxs-lookup"><span data-stu-id="d260a-353">The type of cells to include.</span></span>'
          type:
            - 'excel!Excel.SpecialCellType:enum'
        - id: cellValueType
          description: '<span data-ttu-id="d260a-354">Если cellType является константами или формулами, этот аргумент используется для определения типов ячеек, которые необходимо включить в результат.</span><span class="sxs-lookup"><span data-stu-id="d260a-354">If cellType is either Constants or Formulas, this argument is used to determine which types of cells to include in the result.</span></span> <span data-ttu-id="d260a-355">Эти значения можно объединять, чтобы возвратить более одного типа.</span><span class="sxs-lookup"><span data-stu-id="d260a-355">These values can be combined together to return more than one type.</span></span> <span data-ttu-id="d260a-356">По умолчанию выбираются все константы или формулы независимо от типа.</span><span class="sxs-lookup"><span data-stu-id="d260a-356">The default is to select all constants or formulas, no matter what the type.</span></span>'
          type:
            - 'excel!Excel.SpecialCellValueType:enum'
  - uid: 'excel!Excel.Range#getSpecialCells:member(2)'
    summary: |-
      <span data-ttu-id="d260a-357">Получает объект RangeAreas, состоящий из одного или нескольких прямоугольных диапазонов, представляющих все ячейки, которые соответствуют указанному типу и значению.</span><span class="sxs-lookup"><span data-stu-id="d260a-357">Gets the RangeAreas object, comprising one or more rectangular ranges, that represents all the cells that match the specified type and value.</span></span> <span data-ttu-id="d260a-358">Если специальные ячейки не найдены, будет выдано сообщение об ошибке ItemNotFound.</span><span class="sxs-lookup"><span data-stu-id="d260a-358">If no special cells are found, an ItemNotFound error will be thrown.</span></span>

      <span data-ttu-id="d260a-359">\[[Набор API: ExcelApi 1,9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d260a-359">\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: 'getSpecialCells(cellTypeString, cellValueType)'
    fullName: 'getSpecialCells(cellTypeString, cellValueType)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getSpecialCells(cellTypeString: "ConditionalFormats" | "DataValidations" | "Blanks" | "Constants" | "Formulas" | "SameConditionalFormat" | "SameDataValidation" | "Visible", cellValueType?: "All" | "Errors" | "ErrorsLogical" | "ErrorsNumbers" | "ErrorsText" | "ErrorsLogicalNumber" | "ErrorsLogicalText" | "ErrorsNumberText" | "Logical" | "LogicalNumbers" | "LogicalText" | "LogicalNumbersText" | "Numbers" | "NumbersText" | "Text"): Excel.RangeAreas;'
      return:
        type:
          - 'excel!Excel.RangeAreas:class'
        description: ''
      parameters:
        - id: cellTypeString
          description: '<span data-ttu-id="d260a-360">Тип ячеек, которые необходимо включить в список.</span><span class="sxs-lookup"><span data-stu-id="d260a-360">The type of cells to include.</span></span>'
          type:
            - '"ConditionalFormats" | "DataValidations" | "Blanks" | "Constants" | "Formulas" | "SameConditionalFormat" | "SameDataValidation" | "Visible"'
        - id: cellValueType
          description: '<span data-ttu-id="d260a-361">Если cellType является константами или формулами, этот аргумент используется для определения типов ячеек, которые необходимо включить в результат.</span><span class="sxs-lookup"><span data-stu-id="d260a-361">If cellType is either Constants or Formulas, this argument is used to determine which types of cells to include in the result.</span></span> <span data-ttu-id="d260a-362">Эти значения можно объединять, чтобы возвратить более одного типа.</span><span class="sxs-lookup"><span data-stu-id="d260a-362">These values can be combined together to return more than one type.</span></span> <span data-ttu-id="d260a-363">По умолчанию выбираются все константы или формулы независимо от типа.</span><span class="sxs-lookup"><span data-stu-id="d260a-363">The default is to select all constants or formulas, no matter what the type.</span></span>'
          type:
            - '"All" | "Errors" | "ErrorsLogical" | "ErrorsNumbers" | "ErrorsText" | "ErrorsLogicalNumber" | "ErrorsLogicalText" | "ErrorsNumberText" | "Logical" | "LogicalNumbers" | "LogicalText" | "LogicalNumbersText" | "Numbers" | "NumbersText" | "Text"'
  - uid: 'excel!Excel.Range#getSpecialCellsOrNullObject:member(1)'
    summary: |-
      <span data-ttu-id="d260a-364">Получает объект RangeAreas, состоящий из одного или нескольких диапазонов, представляющих все ячейки, которые соответствуют указанному типу и значению.</span><span class="sxs-lookup"><span data-stu-id="d260a-364">Gets the RangeAreas object, comprising one or more ranges, that represents all the cells that match the specified type and value.</span></span> <span data-ttu-id="d260a-365">Если специальные ячейки не найдены, возвращается пустой объект.</span><span class="sxs-lookup"><span data-stu-id="d260a-365">If no special cells are found, a null object will be returned.</span></span>

      <span data-ttu-id="d260a-366">\[[Набор API: ExcelApi 1,9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d260a-366">\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: 'getSpecialCellsOrNullObject(cellType, cellValueType)'
    fullName: 'getSpecialCellsOrNullObject(cellType, cellValueType)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getSpecialCellsOrNullObject(cellType: Excel.SpecialCellType, cellValueType?: Excel.SpecialCellValueType): Excel.RangeAreas;'
      return:
        type:
          - 'excel!Excel.RangeAreas:class'
        description: ''
      parameters:
        - id: cellType
          description: '<span data-ttu-id="d260a-367">Тип ячеек, которые необходимо включить в список.</span><span class="sxs-lookup"><span data-stu-id="d260a-367">The type of cells to include.</span></span>'
          type:
            - 'excel!Excel.SpecialCellType:enum'
        - id: cellValueType
          description: '<span data-ttu-id="d260a-368">Если cellType является константами или формулами, этот аргумент используется для определения типов ячеек, которые необходимо включить в результат.</span><span class="sxs-lookup"><span data-stu-id="d260a-368">If cellType is either Constants or Formulas, this argument is used to determine which types of cells to include in the result.</span></span> <span data-ttu-id="d260a-369">Эти значения можно объединять, чтобы возвратить более одного типа.</span><span class="sxs-lookup"><span data-stu-id="d260a-369">These values can be combined together to return more than one type.</span></span> <span data-ttu-id="d260a-370">По умолчанию выбираются все константы или формулы независимо от типа.</span><span class="sxs-lookup"><span data-stu-id="d260a-370">The default is to select all constants or formulas, no matter what the type.</span></span>'
          type:
            - 'excel!Excel.SpecialCellValueType:enum'
  - uid: 'excel!Excel.Range#getSpecialCellsOrNullObject:member(2)'
    summary: |-
      <span data-ttu-id="d260a-371">Получает объект RangeAreas, состоящий из одного или нескольких диапазонов, представляющих все ячейки, которые соответствуют указанному типу и значению.</span><span class="sxs-lookup"><span data-stu-id="d260a-371">Gets the RangeAreas object, comprising one or more ranges, that represents all the cells that match the specified type and value.</span></span> <span data-ttu-id="d260a-372">Если специальные ячейки не найдены, возвращается пустой объект.</span><span class="sxs-lookup"><span data-stu-id="d260a-372">If no special cells are found, a null object will be returned.</span></span>

      <span data-ttu-id="d260a-373">\[[Набор API: ExcelApi 1,9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d260a-373">\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: 'getSpecialCellsOrNullObject(cellTypeString, cellValueType)'
    fullName: 'getSpecialCellsOrNullObject(cellTypeString, cellValueType)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getSpecialCellsOrNullObject(cellTypeString: "ConditionalFormats" | "DataValidations" | "Blanks" | "Constants" | "Formulas" | "SameConditionalFormat" | "SameDataValidation" | "Visible", cellValueType?: "All" | "Errors" | "ErrorsLogical" | "ErrorsNumbers" | "ErrorsText" | "ErrorsLogicalNumber" | "ErrorsLogicalText" | "ErrorsNumberText" | "Logical" | "LogicalNumbers" | "LogicalText" | "LogicalNumbersText" | "Numbers" | "NumbersText" | "Text"): Excel.RangeAreas;'
      return:
        type:
          - 'excel!Excel.RangeAreas:class'
        description: ''
      parameters:
        - id: cellTypeString
          description: '<span data-ttu-id="d260a-374">Тип ячеек, которые необходимо включить в список.</span><span class="sxs-lookup"><span data-stu-id="d260a-374">The type of cells to include.</span></span>'
          type:
            - '"ConditionalFormats" | "DataValidations" | "Blanks" | "Constants" | "Formulas" | "SameConditionalFormat" | "SameDataValidation" | "Visible"'
        - id: cellValueType
          description: '<span data-ttu-id="d260a-375">Если cellType является константами или формулами, этот аргумент используется для определения типов ячеек, которые необходимо включить в результат.</span><span class="sxs-lookup"><span data-stu-id="d260a-375">If cellType is either Constants or Formulas, this argument is used to determine which types of cells to include in the result.</span></span> <span data-ttu-id="d260a-376">Эти значения можно объединять, чтобы возвратить более одного типа.</span><span class="sxs-lookup"><span data-stu-id="d260a-376">These values can be combined together to return more than one type.</span></span> <span data-ttu-id="d260a-377">По умолчанию выбираются все константы или формулы независимо от типа.</span><span class="sxs-lookup"><span data-stu-id="d260a-377">The default is to select all constants or formulas, no matter what the type.</span></span>'
          type:
            - '"All" | "Errors" | "ErrorsLogical" | "ErrorsNumbers" | "ErrorsText" | "ErrorsLogicalNumber" | "ErrorsLogicalText" | "ErrorsNumberText" | "Logical" | "LogicalNumbers" | "LogicalText" | "LogicalNumbersText" | "Numbers" | "NumbersText" | "Text"'
  - uid: 'excel!Excel.Range#getSurroundingRegion:member(1)'
    summary: |-
      <span data-ttu-id="d260a-378">Возвращает объект Range, представляющий область вокруг верхней левой ячейки в этом диапазоне.</span><span class="sxs-lookup"><span data-stu-id="d260a-378">Returns a Range object that represents the surrounding region for the top-left cell in this range.</span></span> <span data-ttu-id="d260a-379">Это диапазон, ограниченный любым сочетанием пустых строк и столбцов, относящихся к этому диапазону.</span><span class="sxs-lookup"><span data-stu-id="d260a-379">A surrounding region is a range bounded by any combination of blank rows and blank columns relative to this range.</span></span>

      <span data-ttu-id="d260a-380">\[[Набор API: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d260a-380">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getSurroundingRegion()
    fullName: getSurroundingRegion()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getSurroundingRegion(): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: ''
  - uid: 'excel!Excel.Range#getTables:member(1)'
    summary: |-
      <span data-ttu-id="d260a-381">Получает коллекцию таблиц с заданной областью, перекрывающую диапазон.</span><span class="sxs-lookup"><span data-stu-id="d260a-381">Gets a scoped collection of tables that overlap with the range.</span></span>

      <span data-ttu-id="d260a-382">\[[Набор API: ExcelApi 1,9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d260a-382">\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getTables(fullyContained)
    fullName: getTables(fullyContained)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getTables(fullyContained?: boolean): Excel.TableScopedCollection;'
      return:
        type:
          - 'excel!Excel.TableScopedCollection:class'
        description: ''
      parameters:
        - id: fullyContained
          description: "<span data-ttu-id=\"d260a-383\">Если этот параметр имеет значение true, возвращаются только таблицы, полностью содержащиеся в границах диапазона.</span><span class=\"sxs-lookup\"><span data-stu-id=\"d260a-383\">If true, returns only tables that are fully contained within the range bounds.</span></span> <span data-ttu-id=\"d260a-384\">Значение по умолчанию \x97 false.</span><span class=\"sxs-lookup\"><span data-stu-id=\"d260a-384\">The default value is false.</span></span>"
          type:
            - boolean
  - uid: 'excel!Excel.Range#getUsedRange:member(1)'
    summary: |-
      <span data-ttu-id="d260a-p163">Возвращает используемый диапазон заданного объекта диапазона. Если в диапазоне нет используемых ячеек, эта функция выдает ошибку ItemNotFound.</span><span class="sxs-lookup"><span data-stu-id="d260a-p163">Returns the used range of the given range object. If there are no used cells within the range, this function will throw an ItemNotFound error.</span></span>

      <span data-ttu-id="d260a-387">\[[Набор API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d260a-387">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getUsedRange(valuesOnly)
    fullName: getUsedRange(valuesOnly)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getUsedRange(valuesOnly?: boolean): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="d260a-388">Примеры</span><span class="sxs-lookup"><span data-stu-id="d260a-388">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "D:F";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
              var rangeUR = range.getUsedRange();
              rangeUR.load('address');
              return ctx.sync().then(function() {
                  console.log(rangeUR.address);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Sample");
              const salesTable = sheet.tables.getItem("SalesTable");
              const dataRange = salesTable.getDataBodyRange();

              // We want the most recent quarter that has data, so
              // exclude quarters without data and get the last of
              // the remaining columns.
              const usedDataRange = dataRange.getUsedRange(true /* valuesOnly */);
              const currentQuarterRange = usedDataRange.getLastColumn();

              // Asian and European teams have separate contests.
              const asianSalesRange = sheet.getRange("A2:E4");
              const europeanSalesRange = sheet.getRange("A5:E7");

              // The data for each chart is the intersection of the
              // current quarter column and the rows for the continent.
              const asianContestRange = asianSalesRange.getIntersectionOrNullObject(currentQuarterRange);
              const europeanContestRange = europeanSalesRange.getIntersectionOrNullObject(currentQuarterRange);

              // Must sync before you can test the output of *OrNullObject
              // method/property.
              await context.sync();

              if (asianContestRange.isNullObject) {
                  // See the declaration of this method for how to
                  // test this code path.
                  reportMissingData("Asian");
              } else {
                  createContinentChart(
                      sheet,
                      "Asian",
                      asianContestRange,
                      "A9",
                      "F24"
                  );
              }

              if (europeanContestRange.isNullObject) {
                  // See the declaration of this method for how to
                  // test this code path.
                  reportMissingData("European");
              } else {
                  createContinentChart(
                      sheet,
                      "European",
                      europeanContestRange,
                      "A25",
                      "F40"
                  );
              }

              await context.sync();
          });
          ```
      parameters:
        - id: valuesOnly
          description: '<span data-ttu-id="d260a-389">Учитывает только ячейки со значениями.</span><span class="sxs-lookup"><span data-stu-id="d260a-389">Considers only cells with values as used cells.</span></span> <span data-ttu-id="d260a-390">\[Набор API: ExcelApi 1,2\]</span><span class="sxs-lookup"><span data-stu-id="d260a-390">\[Api set: ExcelApi 1.2\]</span></span>'
          type:
            - boolean
  - uid: 'excel!Excel.Range#getUsedRangeOrNullObject:member(1)'
    summary: |-
      <span data-ttu-id="d260a-p165">Возвращает используемый диапазон заданного объекта диапазона. Если в диапазоне нет используемых ячеек, эта функция возвращает пустой объект.</span><span class="sxs-lookup"><span data-stu-id="d260a-p165">Returns the used range of the given range object. If there are no used cells within the range, this function will return a null object.</span></span>

      <span data-ttu-id="d260a-393">\[[Набор API: ExcelApi 1,4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d260a-393">\[ [API set: ExcelApi 1.4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getUsedRangeOrNullObject(valuesOnly)
    fullName: getUsedRangeOrNullObject(valuesOnly)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getUsedRangeOrNullObject(valuesOnly?: boolean): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="d260a-394">Примеры</span><span class="sxs-lookup"><span data-stu-id="d260a-394">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Sample");
              const salesTable = sheet.tables.getItem("SalesTable");
              const dataRange = salesTable.getDataBodyRange();

              // Pass true so only cells with values count as used
              const usedDataRange = dataRange.getUsedRangeOrNullObject(
                  true /* valuesOnly */
              );

              //Must sync before reading value returned from *OrNullObject method/property.
              await context.sync();

              if (usedDataRange.isNullObject) {
                  console.log("Need Data to Make Chart");
                  console.log("To create a meaningful chart, press 'Fill the table' (or add names to the Product column and numbers to some of the other cells). Then press 'Try to create chart' again.");
              } else {
                  const chart = sheet.charts.add(
                      Excel.ChartType.columnClustered,
                      dataRange,
                      "Columns"
                  );
                  chart.setPosition("A15", "F30");
                  chart.title.text = "Quarterly sales chart";
                  chart.legend.position = "Right";
                  chart.legend.format.fill.setSolidColor("white");
                  chart.dataLabels.format.font.size = 15;
                  chart.dataLabels.format.font.color = "black";
              }

              await context.sync();
          });
          ```
      parameters:
        - id: valuesOnly
          description: <span data-ttu-id="d260a-395">Учитывает только ячейки со значениями.</span><span class="sxs-lookup"><span data-stu-id="d260a-395">Considers only cells with values as used cells.</span></span>
          type:
            - boolean
  - uid: 'excel!Excel.Range#getVisibleView:member(1)'
    summary: |-
      <span data-ttu-id="d260a-396">Представляет видимые строки текущего диапазона.</span><span class="sxs-lookup"><span data-stu-id="d260a-396">Represents the visible rows of the current range.</span></span>

      <span data-ttu-id="d260a-397">\[[Набор API: ExcelApi 1,3](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d260a-397">\[ [API set: ExcelApi 1.3](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getVisibleView()
    fullName: getVisibleView()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getVisibleView(): Excel.RangeView;'
      return:
        type:
          - 'excel!Excel.RangeView:class'
        description: ''
  - uid: 'excel!Excel.Range#hidden:member'
    summary: |-
      <span data-ttu-id="d260a-398">Указывает, скрыты ли все ячейки текущего диапазона.</span><span class="sxs-lookup"><span data-stu-id="d260a-398">Represents if all cells of the current range are hidden.</span></span> <span data-ttu-id="d260a-399">Только для чтения.</span><span class="sxs-lookup"><span data-stu-id="d260a-399">Read-only.</span></span>

      <span data-ttu-id="d260a-400">\[[Набор API: ExcelApi 1,2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d260a-400">\[ [API set: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: hidden
    fullName: hidden
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly hidden: boolean;'
      return:
        type:
          - boolean
  - uid: 'excel!Excel.Range#hyperlink:member'
    summary: |-
      <span data-ttu-id="d260a-401">Представляет гиперссылку для текущего диапазона.</span><span class="sxs-lookup"><span data-stu-id="d260a-401">Represents the hyperlink for the current range.</span></span>

      <span data-ttu-id="d260a-402">\[[Набор API: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d260a-402">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: hyperlink
    fullName: hyperlink
    langs:
      - typeScript
    type: property
    syntax:
      content: 'hyperlink: Excel.RangeHyperlink;'
      return:
        type:
          - 'excel!Excel.RangeHyperlink:interface'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="d260a-403">Примеры</span><span class="sxs-lookup"><span data-stu-id="d260a-403">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Orders");

              let productsRange = sheet.getRange("A3:A5");
              productsRange.load("values");

              await context.sync();

              // Create a hyperlink to a URL 
              // for each product name in the first table.
              for (let i = 0; i < productsRange.values.length; i++) {
                  let cellRange = productsRange.getCell(i, 0);
                  let cellText = productsRange.values[i][0];

                  let hyperlink = {
                      textToDisplay: cellText,
                      screenTip: "Search Bing for '" + cellText + "'",
                      address: "https://www.bing.com?q=" + cellText
                  }
                  cellRange.hyperlink = hyperlink;
              }

              await context.sync();
          });
          ```
  - uid: 'excel!Excel.Range#insert:member(1)'
    summary: |-
      <span data-ttu-id="d260a-p167">Вставляет ячейку или диапазон ячеек на лист вместо этого диапазона, а также сдвигает другие ячейки, чтобы освободить место. Возвращает новый объект Range в пустом месте.</span><span class="sxs-lookup"><span data-stu-id="d260a-p167">Inserts a cell or a range of cells into the worksheet in place of this range, and shifts the other cells to make space. Returns a new Range object at the now blank space.</span></span>

      <span data-ttu-id="d260a-406">\[[Набор API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d260a-406">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: insert(shift)
    fullName: insert(shift)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insert(shift: Excel.InsertShiftDirection): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="d260a-407">Примеры</span><span class="sxs-lookup"><span data-stu-id="d260a-407">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "F5:F10";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
              range.insert();
              return ctx.sync(); 
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: shift
          description: <span data-ttu-id="d260a-408">Определяет способ сдвига ячеек.</span><span class="sxs-lookup"><span data-stu-id="d260a-408">Specifies which way to shift the cells.</span></span> <span data-ttu-id="d260a-409">Дополнительные сведения см. в статье Excel. Инсертшифтдиректион.</span><span class="sxs-lookup"><span data-stu-id="d260a-409">See Excel.InsertShiftDirection for details.</span></span>
          type:
            - 'excel!Excel.InsertShiftDirection:enum'
  - uid: 'excel!Excel.Range#insert:member(2)'
    summary: |-
      <span data-ttu-id="d260a-p169">Вставляет ячейку или диапазон ячеек на лист вместо этого диапазона, а также сдвигает другие ячейки, чтобы освободить место. Возвращает новый объект Range в пустом месте.</span><span class="sxs-lookup"><span data-stu-id="d260a-p169">Inserts a cell or a range of cells into the worksheet in place of this range, and shifts the other cells to make space. Returns a new Range object at the now blank space.</span></span>

      <span data-ttu-id="d260a-412">\[[Набор API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d260a-412">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: insert(shiftString)
    fullName: insert(shiftString)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insert(shiftString: "Down" | "Right"): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: ''
      parameters:
        - id: shiftString
          description: <span data-ttu-id="d260a-413">Определяет способ сдвига ячеек.</span><span class="sxs-lookup"><span data-stu-id="d260a-413">Specifies which way to shift the cells.</span></span> <span data-ttu-id="d260a-414">Дополнительные сведения см. в статье Excel. Инсертшифтдиректион.</span><span class="sxs-lookup"><span data-stu-id="d260a-414">See Excel.InsertShiftDirection for details.</span></span>
          type:
            - '"Down" | "Right"'
  - uid: 'excel!Excel.Range#isEntireColumn:member'
    summary: |-
      <span data-ttu-id="d260a-415">Указывает, является ли текущий диапазон целым столбцом.</span><span class="sxs-lookup"><span data-stu-id="d260a-415">Represents if the current range is an entire column.</span></span> <span data-ttu-id="d260a-416">Только для чтения.</span><span class="sxs-lookup"><span data-stu-id="d260a-416">Read-only.</span></span>

      <span data-ttu-id="d260a-417">\[[Набор API: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d260a-417">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: isEntireColumn
    fullName: isEntireColumn
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly isEntireColumn: boolean;'
      return:
        type:
          - boolean
  - uid: 'excel!Excel.Range#isEntireRow:member'
    summary: |-
      <span data-ttu-id="d260a-418">Указывает, является ли текущий диапазон целой строкой.</span><span class="sxs-lookup"><span data-stu-id="d260a-418">Represents if the current range is an entire row.</span></span> <span data-ttu-id="d260a-419">Только для чтения.</span><span class="sxs-lookup"><span data-stu-id="d260a-419">Read-only.</span></span>

      <span data-ttu-id="d260a-420">\[[Набор API: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d260a-420">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: isEntireRow
    fullName: isEntireRow
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly isEntireRow: boolean;'
      return:
        type:
          - boolean
  - uid: 'excel!Excel.Range#linkedDataTypeState:member'
    summary: |-
      <span data-ttu-id="d260a-421">Представляет состояние типа данных каждой ячейки.</span><span class="sxs-lookup"><span data-stu-id="d260a-421">Represents the data type state of each cell.</span></span> <span data-ttu-id="d260a-422">Только для чтения.</span><span class="sxs-lookup"><span data-stu-id="d260a-422">Read-only.</span></span>

      <span data-ttu-id="d260a-423">\[[Набор API: ExcelApi 1,9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d260a-423">\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: linkedDataTypeState
    fullName: linkedDataTypeState
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly linkedDataTypeState: Excel.LinkedDataTypeState[][];'
      return:
        type:
          - 'excel!Excel.Range#linkedDataTypeState~0:complex'
  - uid: 'excel!Excel.Range#load:member(1)'
    summary: <span data-ttu-id="d260a-424">Добавляет в очередь команду для загрузки указанных свойств объекта.</span><span class="sxs-lookup"><span data-stu-id="d260a-424">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="d260a-425">Перед чтением свойств `context.sync()` необходимо вызвать метод.</span><span class="sxs-lookup"><span data-stu-id="d260a-425">You must call `context.sync()` before reading the properties.</span></span>
    name: load(options)
    fullName: load(options)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(options?: Excel.Interfaces.RangeLoadOptions): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: ''
      parameters:
        - id: options
          description: '<span data-ttu-id="d260a-426">Предоставляет параметры, для которых загружается свойства объекта.</span><span class="sxs-lookup"><span data-stu-id="d260a-426">Provides options for which properties of the object to load.</span></span>'
          type:
            - 'excel!Excel.Interfaces.RangeLoadOptions:interface'
  - uid: 'excel!Excel.Range#load:member(2)'
    summary: <span data-ttu-id="d260a-427">Добавляет в очередь команду для загрузки указанных свойств объекта.</span><span class="sxs-lookup"><span data-stu-id="d260a-427">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="d260a-428">Перед чтением свойств `context.sync()` необходимо вызвать метод.</span><span class="sxs-lookup"><span data-stu-id="d260a-428">You must call `context.sync()` before reading the properties.</span></span>
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="d260a-429">Примеры</span><span class="sxs-lookup"><span data-stu-id="d260a-429">Examples</span></span>

          ```javascript
          // Below example uses range address to get the range object.
          Excel.run(function (ctx) {
              var sheetName = "Sheet1";
              var rangeAddress = "A1:F8"; 
              var worksheet = ctx.workbook.worksheets.getItem(sheetName);
              var range = worksheet.getRange(rangeAddress);
              range.load('cellCount');
              return ctx.sync().then(function() {
                  console.log(range.cellCount);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
          ```javascript
          // Below example uses a named-range to get the range object.
          Excel.run(function (ctx) { 
              var rangeName = 'MyRange';
              var range = ctx.workbook.names.getItem(rangeName).range;
              range.load('cellCount');
              return ctx.sync().then(function() {
                  console.log(range.cellCount);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
          ```javascript
          // The example below sets number-format, values and formulas on a grid that contains 2x3 grid.
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "F5:G7";
              var numberFormat = [[null, "d-mmm"], [null, "d-mmm"], [null, null]]
              var values = [["Today", 42147], ["Tomorrow", "5/24"], ["Difference in days", null]];
              var formulas = [[null,null], [null,null], [null,"=G6-G5"]];
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
              range.numberFormat = numberFormat;
              range.values = values;
              range.formulas= formulas;
              range.load('text');
              return ctx.sync().then(function() {
                  console.log(range.text);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: propertyNames
          description: '<span data-ttu-id="d260a-430">Строка, разделенная запятыми, или массив строк, указывающий свойства для загрузки.</span><span class="sxs-lookup"><span data-stu-id="d260a-430">A comma-delimited string or an array of strings that specify the properties to load.</span></span>'
          type:
            - 'string | string[]'
  - uid: 'excel!Excel.Range#load:member(3)'
    summary: <span data-ttu-id="d260a-431">Добавляет в очередь команду для загрузки указанных свойств объекта.</span><span class="sxs-lookup"><span data-stu-id="d260a-431">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="d260a-432">Перед чтением свойств `context.sync()` необходимо вызвать метод.</span><span class="sxs-lookup"><span data-stu-id="d260a-432">You must call `context.sync()` before reading the properties.</span></span>
    name: load(propertyNamesAndPaths)
    fullName: load(propertyNamesAndPaths)
    langs:
      - typeScript
    type: method
    syntax:
      content: |-
        load(propertyNamesAndPaths?: {
                    select?: string;
                    expand?: string;
                }): Excel.Range;
      return:
        type:
          - 'excel!Excel.Range:class'
        description: ''
      parameters:
        - id: propertyNamesAndPaths
          description: '<span data-ttu-id="d260a-433">`propertyNamesAndPaths.select`— Это строка с разделителями-запятыми, задающая свойства для `propertyNamesAndPaths.expand` загрузки и которая представляет собой строку с разделителями-запятыми, указывающую свойства навигации для загрузки.</span><span class="sxs-lookup"><span data-stu-id="d260a-433">`propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.</span></span>'
          type:
            - |-
              {
                          select?: string;
                          expand?: string;
                      }
  - uid: 'excel!Excel.Range#merge:member(1)'
    summary: |-
      <span data-ttu-id="d260a-434">Объединяет ячейки диапазона в одну область на листе.</span><span class="sxs-lookup"><span data-stu-id="d260a-434">Merge the range cells into one region in the worksheet.</span></span>

      <span data-ttu-id="d260a-435">\[[Набор API: ExcelApi 1,2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d260a-435">\[ [API set: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: merge(across)
    fullName: merge(across)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'merge(across?: boolean): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a><span data-ttu-id="d260a-436">Примеры</span><span class="sxs-lookup"><span data-stu-id="d260a-436">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "A1:C3";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
              range.merge(true);
              return ctx.sync(); 
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "A1:C3";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
              range.unmerge();
              return ctx.sync(); 
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: across
          description: '<span data-ttu-id="d260a-437">Необязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="d260a-437">Optional.</span></span> <span data-ttu-id="d260a-438">Установите значение true, чтобы объединить ячейки в каждой строке заданного диапазона как отдельные объединенные ячейки.</span><span class="sxs-lookup"><span data-stu-id="d260a-438">Set true to merge cells in each row of the specified range as separate merged cells.</span></span> <span data-ttu-id="d260a-439">Значение по умолчанию — false.</span><span class="sxs-lookup"><span data-stu-id="d260a-439">The default value is false.</span></span>'
          type:
            - boolean
  - uid: 'excel!Excel.Range#numberFormat:member'
    summary: |-
      <span data-ttu-id="d260a-440">Представляет код числового формата Excel для заданного диапазона.</span><span class="sxs-lookup"><span data-stu-id="d260a-440">Represents Excel's number format code for the given range.</span></span> <span data-ttu-id="d260a-441">При задании числового формата для диапазона аргументом value может быть одно значение (String) или двухмерный массив.</span><span class="sxs-lookup"><span data-stu-id="d260a-441">When setting number format to a range, the value argument can be either a single value (string) or a two-dimensional array.</span></span> <span data-ttu-id="d260a-442">Если аргумент является одиночным значением, он будет применен ко всем ячейкам в диапазоне.</span><span class="sxs-lookup"><span data-stu-id="d260a-442">If the argument is a single value, it will be applied to all cells in the range.</span></span>

      <span data-ttu-id="d260a-443">\[[Набор API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d260a-443">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: numberFormat
    fullName: numberFormat
    langs:
      - typeScript
    type: property
    syntax:
      content: 'numberFormat: any[][];'
      return:
        type:
          - 'any[][]'
  - uid: 'excel!Excel.Range#numberFormatLocal:member'
    summary: |-
      <span data-ttu-id="d260a-444">Представляет код числового формата Excel для заданного диапазона в соответствии с языковыми параметрами пользователя.</span><span class="sxs-lookup"><span data-stu-id="d260a-444">Represents Excel's number format code for the given range, based on the language settings of the user.</span></span> <span data-ttu-id="d260a-445">При установке числового формата Local для диапазона аргументом value может быть одно значение (String) или двухмерный массив.</span><span class="sxs-lookup"><span data-stu-id="d260a-445">When setting number format local to a range, the value argument can be either a single value (string) or a two-dimensional array.</span></span> <span data-ttu-id="d260a-446">Если аргумент является одиночным значением, он будет применен ко всем ячейкам в диапазоне.</span><span class="sxs-lookup"><span data-stu-id="d260a-446">If the argument is a single value, it will be applied to all cells in the range.</span></span> <span data-ttu-id="d260a-447">При извлечении или задании `numberFormatLocal` свойства Excel не выполняет приведение форматирования.</span><span class="sxs-lookup"><span data-stu-id="d260a-447">Excel does not perform any language or format coercion when getting or setting the `numberFormatLocal` property.</span></span> <span data-ttu-id="d260a-448">Любой возвращенный текст использует локально отформатированные строки на основе языка, указанного в параметрах системы.</span><span class="sxs-lookup"><span data-stu-id="d260a-448">Any returned text uses the locally-formatted strings based on the language specified in the system settings.</span></span>

      <span data-ttu-id="d260a-449">\[[Набор API: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d260a-449">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: numberFormatLocal
    fullName: numberFormatLocal
    langs:
      - typeScript
    type: property
    syntax:
      content: 'numberFormatLocal: any[][];'
      return:
        type:
          - 'any[][]'
  - uid: 'excel!Excel.Range#removeDuplicates:member(1)'
    summary: |-
      <span data-ttu-id="d260a-450">Удаляет повторяющиеся значения из диапазона, заданного столбцами.</span><span class="sxs-lookup"><span data-stu-id="d260a-450">Removes duplicate values from the range specified by the columns.</span></span>

      <span data-ttu-id="d260a-451">\[[Набор API: ExcelApi 1,9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d260a-451">\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: 'removeDuplicates(columns, includesHeader)'
    fullName: 'removeDuplicates(columns, includesHeader)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'removeDuplicates(columns: number[], includesHeader: boolean): Excel.RemoveDuplicatesResult;'
      return:
        type:
          - 'excel!Excel.RemoveDuplicatesResult:class'
        description: |-
          <span data-ttu-id="d260a-452">Полученный объект, содержащий количество удаленных строк и количество оставшихся уникальных строк.</span><span class="sxs-lookup"><span data-stu-id="d260a-452">The resulting object that contains the number of rows removed and the number of remaining unique rows.</span></span>

          #### <a name="examples"></a><span data-ttu-id="d260a-453">Примеры</span><span class="sxs-lookup"><span data-stu-id="d260a-453">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Sample");
              const range = sheet.getRange("B2:D11");

              const deleteResult = range.removeDuplicates([0],true);    
              deleteResult.load();    
              await context.sync();

              console.log(deleteResult.removed + " entries with duplicate names removed.");
              console.log(deleteResult.uniqueRemaining + " entries with unique names remain in the range.");
          });
          ```
      parameters:
        - id: columns
          description: '<span data-ttu-id="d260a-454">Столбцы в диапазоне, которые могут содержать дубликаты.</span><span class="sxs-lookup"><span data-stu-id="d260a-454">The columns inside the range that may contain duplicates.</span></span> <span data-ttu-id="d260a-455">Необходимо указать по крайней мере один столбец.</span><span class="sxs-lookup"><span data-stu-id="d260a-455">At least one column needs to be specified.</span></span> <span data-ttu-id="d260a-456">Используется нулевой индекс.</span><span class="sxs-lookup"><span data-stu-id="d260a-456">Zero-indexed.</span></span>'
          type:
            - 'number[]'
        - id: includesHeader
          description: '<span data-ttu-id="d260a-457">Значение true, если входные данные содержат заголовок.</span><span class="sxs-lookup"><span data-stu-id="d260a-457">True if the input data contains header.</span></span> <span data-ttu-id="d260a-458">Значение по умолчанию — false.</span><span class="sxs-lookup"><span data-stu-id="d260a-458">Default is false.</span></span>'
          type:
            - boolean
  - uid: 'excel!Excel.Range#replaceAll:member(1)'
    summary: |-
      <span data-ttu-id="d260a-459">Находит и заменяет определенную строку на основе условий, указанных в текущем диапазоне.</span><span class="sxs-lookup"><span data-stu-id="d260a-459">Finds and replaces the given string based on the criteria specified within the current range.</span></span>

      <span data-ttu-id="d260a-460">\[[Набор API: ExcelApi 1,9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d260a-460">\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: 'replaceAll(text, replacement, criteria)'
    fullName: 'replaceAll(text, replacement, criteria)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'replaceAll(text: string, replacement: string, criteria: Excel.ReplaceCriteria): OfficeExtension.ClientResult<number>;'
      return:
        type:
          - 'excel!Excel.Range#replaceAll~0:complex'
        description: <span data-ttu-id="d260a-461">Количество выполненных замен.</span><span class="sxs-lookup"><span data-stu-id="d260a-461">The number of replacements performed.</span></span>
      parameters:
        - id: text
          description: <span data-ttu-id="d260a-462">Строка для поиска.</span><span class="sxs-lookup"><span data-stu-id="d260a-462">String to find.</span></span>
          type:
            - string
        - id: replacement
          description: <span data-ttu-id="d260a-463">Строка для замены оригинала на.</span><span class="sxs-lookup"><span data-stu-id="d260a-463">String to replace the original with.</span></span>
          type:
            - string
        - id: criteria
          description: <span data-ttu-id="d260a-464">Дополнительные условия замены.</span><span class="sxs-lookup"><span data-stu-id="d260a-464">Additional Replace Criteria.</span></span>
          type:
            - 'excel!Excel.ReplaceCriteria:interface'
  - uid: 'excel!Excel.Range#rowCount:member'
    summary: |-
      <span data-ttu-id="d260a-465">Возвращает общее количество строк в диапазоне.</span><span class="sxs-lookup"><span data-stu-id="d260a-465">Returns the total number of rows in the range.</span></span> <span data-ttu-id="d260a-466">Только для чтения.</span><span class="sxs-lookup"><span data-stu-id="d260a-466">Read-only.</span></span>

      <span data-ttu-id="d260a-467">\[[Набор API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d260a-467">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: rowCount
    fullName: rowCount
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly rowCount: number;'
      return:
        type:
          - number
  - uid: 'excel!Excel.Range#rowHidden:member'
    summary: |-
      <span data-ttu-id="d260a-468">Указывает, скрыты ли все строки текущего диапазона.</span><span class="sxs-lookup"><span data-stu-id="d260a-468">Represents if all rows of the current range are hidden.</span></span>

      <span data-ttu-id="d260a-469">\[[Набор API: ExcelApi 1,2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d260a-469">\[ [API set: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: rowHidden
    fullName: rowHidden
    langs:
      - typeScript
    type: property
    syntax:
      content: 'rowHidden: boolean;'
      return:
        type:
          - boolean
  - uid: 'excel!Excel.Range#rowIndex:member'
    summary: |-
      <span data-ttu-id="d260a-470">Возвращает номер строки первой ячейки диапазона.</span><span class="sxs-lookup"><span data-stu-id="d260a-470">Returns the row number of the first cell in the range.</span></span> <span data-ttu-id="d260a-471">Используется нулевой индекс.</span><span class="sxs-lookup"><span data-stu-id="d260a-471">Zero-indexed.</span></span> <span data-ttu-id="d260a-472">Только для чтения.</span><span class="sxs-lookup"><span data-stu-id="d260a-472">Read-only.</span></span>

      <span data-ttu-id="d260a-473">\[[Набор API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d260a-473">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: rowIndex
    fullName: rowIndex
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly rowIndex: number;'
      return:
        type:
          - number
  - uid: 'excel!Excel.Range#select:member(1)'
    summary: |-
      <span data-ttu-id="d260a-474">Выбирает указанный диапазон в пользовательском интерфейсе Excel.</span><span class="sxs-lookup"><span data-stu-id="d260a-474">Selects the specified range in the Excel UI.</span></span>

      <span data-ttu-id="d260a-475">\[[Набор API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d260a-475">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: select()
    fullName: select()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'select(): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a><span data-ttu-id="d260a-476">Примеры</span><span class="sxs-lookup"><span data-stu-id="d260a-476">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) {
              var sheetName = "Sheet1";
              var rangeAddress = "F5:F10"; 
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
              range.select();
              return ctx.sync(); 
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: 'excel!Excel.Range#set:member(1)'
    summary: '<span data-ttu-id="d260a-477">Задает одновременно несколько свойств объекта.</span><span class="sxs-lookup"><span data-stu-id="d260a-477">Sets multiple properties of an object at the same time.</span></span> <span data-ttu-id="d260a-478">Можно передать либо простой объект с соответствующими свойствами, либо другой объект API того же типа.</span><span class="sxs-lookup"><span data-stu-id="d260a-478">You can pass either a plain object with the appropriate properties, or another API object of the same type.</span></span>'
    remarks: |-
      <span data-ttu-id="d260a-479">Этот метод имеет следующую дополнительную подпись:</span><span class="sxs-lookup"><span data-stu-id="d260a-479">This method has the following additional signature:</span></span>

      `set(properties: Excel.Range): void`

      #### <a name="examples"></a><span data-ttu-id="d260a-480">Примеры</span><span class="sxs-lookup"><span data-stu-id="d260a-480">Examples</span></span>

      ```typescript
      await Excel.run(async (context) => {
          const sheet = context.workbook.worksheets.getItem("Sample");

          const range = sheet.getRange("B2:E2");
          range.set({
              format: {
                  fill: {
                      color: "#4472C4"
                  },
                  font: {
                      name: "Verdana",
                      color: "white"
                  }
              }
          })
          range.format.autofitColumns();
          await context.sync();
      });
      ```
      ```typescript
      await Excel.run(async (context) => {
          const sheet = context.workbook.worksheets.getItem("Sample");

          const sourceRange = sheet.getRange("B2:E2");
          sourceRange.load("format/fill/color, format/font/name, format/font/color");
          await context.sync();

          // Set properties based on the loaded and synced 
          // source range.
          const targetRange = sheet.getRange("B7:E7");
          targetRange.set(sourceRange); 
          targetRange.format.autofitColumns();
          await context.sync();
      });
      ```
    name: 'set(properties, options)'
    fullName: 'set(properties, options)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'set(properties: Interfaces.RangeUpdateData, options?: OfficeExtension.UpdateOptions): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: properties
          description: '<span data-ttu-id="d260a-481">Объект JavaScript со свойствами, которые структурированы исоморфикалли к свойствам объекта, для которого вызывается метод.</span><span class="sxs-lookup"><span data-stu-id="d260a-481">A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.</span></span>'
          type:
            - 'excel!Excel.Interfaces.RangeUpdateData:interface'
        - id: options
          description: '<span data-ttu-id="d260a-482">Предоставляет возможность подавлять ошибки, если объект Properties пытается задать любые свойства, предназначенные только для чтения.</span><span class="sxs-lookup"><span data-stu-id="d260a-482">Provides an option to suppress errors if the properties object tries to set any read-only properties.</span></span>'
          type:
            - 'excel!OfficeExtension.UpdateOptions:interface'
  - uid: 'excel!Excel.Range#set:member(2)'
    summary: '<span data-ttu-id="d260a-483">Задает одновременно несколько свойств объекта на основе существующего загруженного объекта.</span><span class="sxs-lookup"><span data-stu-id="d260a-483">Sets multiple properties on the object at the same time, based on an existing loaded object.</span></span>'
    name: set(properties)
    fullName: set(properties)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'set(properties: Excel.Range): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: properties
          description: ''
          type:
            - 'excel!Excel.Range:class'
  - uid: 'excel!Excel.Range#setCellProperties:member(1)'
    summary: |-
      <span data-ttu-id="d260a-484">Обновляет диапазон на основе двумерного массива свойств ячейки, в который включены такие элементы, как шрифт, заливка, границы, выравнивание и т. д.</span><span class="sxs-lookup"><span data-stu-id="d260a-484">Updates the range based on a 2D array of cell properties , encapsulating things like font, fill, borders, alignment, and so forth.</span></span>

      <span data-ttu-id="d260a-485">\[[Набор API: ExcelApi 1,9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d260a-485">\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: setCellProperties(cellPropertiesData)
    fullName: setCellProperties(cellPropertiesData)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setCellProperties(cellPropertiesData: SettableCellProperties[][]): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a><span data-ttu-id="d260a-486">Примеры</span><span class="sxs-lookup"><span data-stu-id="d260a-486">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getActiveWorksheet();

              // Creating the SettableCellProperties objects to use for the range.
              // In your add-in, these should be created once, outside the function.
              const topHeaderProps: Excel.SettableCellProperties = {
                  // The style property takes a string matching the name of an Excel style.
                  // Note that a style will overwrite any formatting,
                  // so do not use the format property with the style property.
                  style: "Heading1"
              };

              const headerProps: Excel.SettableCellProperties = {
                  // Any subproperties of format that are not set will not be changed when these cell properties are set.
                  format: {
                      fill: {
                          color: "Blue"
                      },
                      font: {
                          color: "White",
                          bold: true
                      }
                  }
              };

              const nonApplicableProps: Excel.SettableCellProperties = {
                  format: {
                      fill: {
                          pattern: Excel.FillPattern.gray25
                      },
                      font: {
                          color: "Gray",
                          italic: true
                      }
                  }
              };

              const matchupScoreProps: Excel.SettableCellProperties = {
                  format: {
                      borders: {
                          bottom: {
                              style: Excel.BorderLineStyle.continuous
                          },
                          left: {
                              style: Excel.BorderLineStyle.continuous
                          },
                          right: {
                              style: Excel.BorderLineStyle.continuous
                          },
                          top: {
                              style: Excel.BorderLineStyle.continuous
                          }
                      }
                  }
              };

              const range = sheet.getRange("A1:E5");

              // You can use empty JSON objects to avoid changing a cell's properties.
              range.setCellProperties([
                  [topHeaderProps, {}, {}, {}, {}],
                  [{}, {}, headerProps, headerProps, headerProps],
                  [{}, headerProps, nonApplicableProps, matchupScoreProps, matchupScoreProps],
                  [{}, headerProps, matchupScoreProps, nonApplicableProps, matchupScoreProps],
                  [{}, headerProps, matchupScoreProps, matchupScoreProps, nonApplicableProps]
              ]);

              sheet.getUsedRange().format.autofitColumns();
              await context.sync();
          });
          ```
      parameters:
        - id: cellPropertiesData
          description: '<span data-ttu-id="d260a-487">Двумерный массив, представляющий свойства, которые необходимо задать в каждой ячейке.</span><span class="sxs-lookup"><span data-stu-id="d260a-487">A 2D array that represents which properties to set in each cell.</span></span>'
          type:
            - 'excel!Excel.Range#setCellProperties~0:complex'
  - uid: 'excel!Excel.Range#setColumnProperties:member(1)'
    summary: |-
      <span data-ttu-id="d260a-488">Обновляет диапазон на основе одномерного массива свойств столбца, в который включены такие элементы, как шрифт, заливка, границы, выравнивание и т. д.</span><span class="sxs-lookup"><span data-stu-id="d260a-488">Updates the range based on a single-dimensional array of column properties, encapsulating things like font, fill, borders, alignment, and so forth.</span></span>

      <span data-ttu-id="d260a-489">\[[Набор API: ExcelApi 1,9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d260a-489">\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: setColumnProperties(columnPropertiesData)
    fullName: setColumnProperties(columnPropertiesData)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setColumnProperties(columnPropertiesData: SettableColumnProperties[]): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: columnPropertiesData
          description: '<span data-ttu-id="d260a-490">Массив, представляющий свойства, которые необходимо задать для каждого столбца.</span><span class="sxs-lookup"><span data-stu-id="d260a-490">An array that represents which properties to set in each column.</span></span>'
          type:
            - 'excel!Excel.Range#setColumnProperties~0:complex'
  - uid: 'excel!Excel.Range#setDirty:member(1)'
    summary: |-
      <span data-ttu-id="d260a-491">Устанавливает диапазон, предназначенный для пересчета при выполнении следующего пересчета.</span><span class="sxs-lookup"><span data-stu-id="d260a-491">Set a range to be recalculated when the next recalculation occurs.</span></span>

      <span data-ttu-id="d260a-492">\[[Набор API: ExcelApi 1,9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d260a-492">\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: setDirty()
    fullName: setDirty()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setDirty(): void;'
      return:
        type:
          - void
        description: ''
  - uid: 'excel!Excel.Range#setRowProperties:member(1)'
    summary: |-
      <span data-ttu-id="d260a-493">Обновляет диапазон на основе одномерного массива свойств строки, в который включены такие элементы, как шрифт, заливка, границы, выравнивание и т. д.</span><span class="sxs-lookup"><span data-stu-id="d260a-493">Updates the range based on a single-dimensional array of row properties, encapsulating things like font, fill, borders, alignment, and so forth.</span></span>

      <span data-ttu-id="d260a-494">\[[Набор API: ExcelApi 1,9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d260a-494">\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: setRowProperties(rowPropertiesData)
    fullName: setRowProperties(rowPropertiesData)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setRowProperties(rowPropertiesData: SettableRowProperties[]): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: rowPropertiesData
          description: '<span data-ttu-id="d260a-495">Массив, представляющий свойства, которые необходимо задать для каждой строки.</span><span class="sxs-lookup"><span data-stu-id="d260a-495">An array that represents which properties to set in each row.</span></span>'
          type:
            - 'excel!Excel.Range#setRowProperties~0:complex'
  - uid: 'excel!Excel.Range#showCard:member(1)'
    summary: |-
      <span data-ttu-id="d260a-496">Отображает карточку для активной ячейки, если она имеет содержимое c форматированным значением.</span><span class="sxs-lookup"><span data-stu-id="d260a-496">Displays the card for an active cell if it has rich value content.</span></span>

      <span data-ttu-id="d260a-497">\[[Набор API: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d260a-497">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: showCard()
    fullName: showCard()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'showCard(): void;'
      return:
        type:
          - void
        description: ''
  - uid: 'excel!Excel.Range#sort:member'
    summary: |-
      <span data-ttu-id="d260a-498">Представляет порядок сортировки текущего диапазона.</span><span class="sxs-lookup"><span data-stu-id="d260a-498">Represents the range sort of the current range.</span></span> <span data-ttu-id="d260a-499">Только для чтения.</span><span class="sxs-lookup"><span data-stu-id="d260a-499">Read-only.</span></span>

      <span data-ttu-id="d260a-500">\[[Набор API: ExcelApi 1,2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d260a-500">\[ [API set: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: sort
    fullName: sort
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly sort: Excel.RangeSort;'
      return:
        type:
          - 'excel!Excel.RangeSort:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="d260a-501">Примеры</span><span class="sxs-lookup"><span data-stu-id="d260a-501">Examples</span></span>

          ```typescript
          async function sortTopToBottom(criteria: string) {
              await Excel.run(async (context) => {
                  const sheet = context.workbook.worksheets.getActiveWorksheet();
                  const range = sheet.getRange("A1:E5");

                  // Find the column header that provides the sort criteria.
                  const header = range.find(criteria, {});
                  header.load("columnIndex");
                  await context.sync();

                  range.sort.apply(
                      [
                          {
                              key: header.columnIndex,
                              sortOn: Excel.SortOn.value
                          }
                      ],
                      false /*matchCase*/,
                      true /*hasHeaders*/,
                      Excel.SortOrientation.rows
                  );
                  await context.sync();
              });
          }
          ```
  - uid: 'excel!Excel.Range#style:member'
    summary: |-
      <span data-ttu-id="d260a-502">Представляет стиль текущего диапазона.</span><span class="sxs-lookup"><span data-stu-id="d260a-502">Represents the style of the current range.</span></span> <span data-ttu-id="d260a-503">Если стили ячеек противоречивы, возвращается значение null.</span><span class="sxs-lookup"><span data-stu-id="d260a-503">If the styles of the cells are inconsistent, null will be returned.</span></span> <span data-ttu-id="d260a-504">Для пользовательских стилей будет возвращено имя стиля.</span><span class="sxs-lookup"><span data-stu-id="d260a-504">For custom styles, the style name will be returned.</span></span> <span data-ttu-id="d260a-505">Для встроенных стилей возвращается строка, представляющая значение в перечислении Буилтинстиле.</span><span class="sxs-lookup"><span data-stu-id="d260a-505">For built-in styles, a string representing a value in the BuiltInStyle enum will be returned.</span></span>

      <span data-ttu-id="d260a-506">\[[Набор API: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d260a-506">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: style
    fullName: style
    langs:
      - typeScript
    type: property
    syntax:
      content: 'style: string;'
      return:
        type:
          - string
        description: |-


          #### <a name="examples"></a><span data-ttu-id="d260a-507">Примеры</span><span class="sxs-lookup"><span data-stu-id="d260a-507">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              let worksheet = context.workbook.worksheets.getItem("Sample");
              let range = worksheet.getRange("A1:E1");

              // Apply built-in style. 
              // Styles are in the Home tab ribbon.
              range.style = Excel.BuiltInStyle.neutral;
              range.format.horizontalAlignment = "Right";

              await context.sync();
          });
          ```
  - uid: 'excel!Excel.Range#text:member'
    summary: |-
      <span data-ttu-id="d260a-508">Текстовые значения указанного диапазона.</span><span class="sxs-lookup"><span data-stu-id="d260a-508">Text values of the specified range.</span></span> <span data-ttu-id="d260a-509">Текстовое значение не зависит от ширины ячейки.</span><span class="sxs-lookup"><span data-stu-id="d260a-509">The Text value will not depend on the cell width.</span></span> <span data-ttu-id="d260a-510">Подстановка \# знаков, которая происходит в пользовательском интерфейсе Excel, не влияет на текстовое значение, возвращенное API.</span><span class="sxs-lookup"><span data-stu-id="d260a-510">The \# sign substitution that happens in Excel UI will not affect the text value returned by the API.</span></span> <span data-ttu-id="d260a-511">Только для чтения.</span><span class="sxs-lookup"><span data-stu-id="d260a-511">Read-only.</span></span>

      <span data-ttu-id="d260a-512">\[[Набор API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d260a-512">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: text
    fullName: text
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly text: string[][];'
      return:
        type:
          - 'string[][]'
  - uid: 'excel!Excel.Range#toJSON:member(1)'
    summary: '<span data-ttu-id="d260a-513">Переопределяет метод `toJSON()` JavaScript для предоставления более удобного вывода при передаче объекта API`JSON.stringify()`</span><span class="sxs-lookup"><span data-stu-id="d260a-513">Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`</span></span><!-- --><span data-ttu-id="d260a-514">.</span><span class="sxs-lookup"><span data-stu-id="d260a-514"></span></span> <span data-ttu-id="d260a-515">(`JSON.stringify`</span><span class="sxs-lookup"><span data-stu-id="d260a-515"></span></span><!-- --><span data-ttu-id="d260a-516">, в свою очередь, вызывает `toJSON` метод объекта, который передается ему.) В то время как исходный объект Excel. Range является объектом API, `toJSON` метод возвращает простой объект JavaScript (тип`Excel.Interfaces.RangeData`</span><span class="sxs-lookup"><span data-stu-id="d260a-516">, in turn, calls the `toJSON` method of the object that is passed to it.) Whereas the original Excel.Range object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.RangeData`</span></span><!-- --><span data-ttu-id="d260a-517">), который содержит неполные копии загруженных дочерних свойств из исходного объекта.</span><span class="sxs-lookup"><span data-stu-id="d260a-517">) that contains shallow copies of any loaded child properties from the original object.</span></span>'
    name: toJSON()
    fullName: toJSON()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON(): Excel.Interfaces.RangeData;'
      return:
        type:
          - 'excel!Excel.Interfaces.RangeData:interface'
        description: ''
  - uid: 'excel!Excel.Range#track:member(1)'
    summary: '<span data-ttu-id="d260a-518">Отслеживает объект для автоматической корректировки с учетом окружающих изменений в документе.</span><span class="sxs-lookup"><span data-stu-id="d260a-518">Track the object for automatic adjustment based on surrounding changes in the document.</span></span> <span data-ttu-id="d260a-519">Этот вызов является сокращенной записью для`context.trackedObjects.add(thisObject)`</span><span class="sxs-lookup"><span data-stu-id="d260a-519">This call is a shorthand for `context.trackedObjects.add(thisObject)`</span></span><!-- --><span data-ttu-id="d260a-520">.</span><span class="sxs-lookup"><span data-stu-id="d260a-520"></span></span> <span data-ttu-id="d260a-521">Если вы используете этот объект во `.sync` время вызовов и вне последовательного выполнения пакета ". Run", а также получаете сообщение об ошибке "инвалидобжектпас" при задании свойства или вызове метода для объекта, необходимо добавить объект в отслеживаемый объект Коллекция при первом создании объекта.</span><span class="sxs-lookup"><span data-stu-id="d260a-521">If you are using this object across `.sync` calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you needed to have added the object to the tracked object collection when the object was first created.</span></span>'
    name: track()
    fullName: track()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'track(): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: ''
  - uid: 'excel!Excel.Range#unmerge:member(1)'
    summary: |-
      <span data-ttu-id="d260a-522">Разъединяет ячейки диапазона на отдельные ячейки.</span><span class="sxs-lookup"><span data-stu-id="d260a-522">Unmerge the range cells into separate cells.</span></span>

      <span data-ttu-id="d260a-523">\[[Набор API: ExcelApi 1,2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d260a-523">\[ [API set: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: unmerge()
    fullName: unmerge()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'unmerge(): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a><span data-ttu-id="d260a-524">Примеры</span><span class="sxs-lookup"><span data-stu-id="d260a-524">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "A1:C3";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
              range.unmerge();
              return ctx.sync(); 
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: 'excel!Excel.Range#untrack:member(1)'
    summary: '<span data-ttu-id="d260a-525">Освобождает память, связанную с этим объектом, если он ранее отслеживался.</span><span class="sxs-lookup"><span data-stu-id="d260a-525">Release the memory associated with this object, if it has previously been tracked.</span></span> <span data-ttu-id="d260a-526">Этот вызов является сокращенной для`context.trackedObjects.remove(thisObject)`</span><span class="sxs-lookup"><span data-stu-id="d260a-526">This call is shorthand for `context.trackedObjects.remove(thisObject)`</span></span><!-- --><span data-ttu-id="d260a-527">.</span><span class="sxs-lookup"><span data-stu-id="d260a-527"></span></span> <span data-ttu-id="d260a-528">Наличие большого количества отслеживаемых объектов замедляет ведущее приложение, поэтому не забывайте освобождать любые добавленные объекты после завершения их использования.</span><span class="sxs-lookup"><span data-stu-id="d260a-528">Having many tracked objects slows down the host application, so please remember to free any objects you add, once you''re done using them.</span></span> <span data-ttu-id="d260a-529">Вам потребуется позвонить `context.sync()` , прежде чем будет применен выпуск памяти.</span><span class="sxs-lookup"><span data-stu-id="d260a-529">You will need to call `context.sync()` before the memory release takes effect.</span></span>'
    name: untrack()
    fullName: untrack()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'untrack(): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="d260a-530">Примеры</span><span class="sxs-lookup"><span data-stu-id="d260a-530">Examples</span></span>

          ```typescript
          Excel.run(async (context) => {
              const largeRange = context.workbook.getSelectedRange();
              largeRange.load(["rowCount", "columnCount"]);
              await context.sync();

              for (let i = 0; i < largeRange.rowCount; i++) {
                  for (let j = 0; j < largeRange.columnCount; j++) {
                      let cell = largeRange.getCell(i, j);
                      cell.values = [[i *j]];

                      // call untrack() to release the range from memory
                      cell.untrack();
                  }
              }

              await context.sync();
          });
          ```
  - uid: 'excel!Excel.Range#values:member'
    summary: |-
      <span data-ttu-id="d260a-531">Представляет необработанные значения указанного диапазона.</span><span class="sxs-lookup"><span data-stu-id="d260a-531">Represents the raw values of the specified range.</span></span> <span data-ttu-id="d260a-532">Могут возвращаться строковые и числовые данные, а также логические значения.</span><span class="sxs-lookup"><span data-stu-id="d260a-532">The data returned could be of type string, number, or a boolean.</span></span> <span data-ttu-id="d260a-533">Ячейки, содержащие ошибку, вернут строку ошибки.</span><span class="sxs-lookup"><span data-stu-id="d260a-533">Cells that contain an error will return the error string.</span></span> <span data-ttu-id="d260a-534">При задании значений для диапазона аргументом value может быть одно значение (String, number или Boolean) или двухмерный массив.</span><span class="sxs-lookup"><span data-stu-id="d260a-534">When setting values to a range, the value argument can be either a single value (string, number or boolean) or a two-dimensional array.</span></span> <span data-ttu-id="d260a-535">Если аргумент является одиночным значением, он будет применен ко всем ячейкам в диапазоне.</span><span class="sxs-lookup"><span data-stu-id="d260a-535">If the argument is a single value, it will be applied to all cells in the range.</span></span>

      <span data-ttu-id="d260a-536">\[[Набор API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d260a-536">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: values
    fullName: values
    langs:
      - typeScript
    type: property
    syntax:
      content: 'values: any[][];'
      return:
        type:
          - 'any[][]'
  - uid: 'excel!Excel.Range#valueTypes:member'
    summary: |-
      <span data-ttu-id="d260a-537">Представляет тип данных каждой ячейки.</span><span class="sxs-lookup"><span data-stu-id="d260a-537">Represents the type of data of each cell.</span></span> <span data-ttu-id="d260a-538">Только для чтения.</span><span class="sxs-lookup"><span data-stu-id="d260a-538">Read-only.</span></span>

      <span data-ttu-id="d260a-539">\[[Набор API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d260a-539">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: valueTypes
    fullName: valueTypes
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly valueTypes: Excel.RangeValueType[][];'
      return:
        type:
          - 'excel!Excel.Range#valueTypes~0:complex'
  - uid: 'excel!Excel.Range#worksheet:member'
    summary: |-
      <span data-ttu-id="d260a-540">Лист, содержащий текущий диапазон.</span><span class="sxs-lookup"><span data-stu-id="d260a-540">The worksheet containing the current range.</span></span> <span data-ttu-id="d260a-541">Только для чтения.</span><span class="sxs-lookup"><span data-stu-id="d260a-541">Read-only.</span></span>

      <span data-ttu-id="d260a-542">\[[Набор API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d260a-542">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: worksheet
    fullName: worksheet
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly worksheet: Excel.Worksheet;'
      return:
        type:
          - 'excel!Excel.Worksheet:class'
references:
  - uid: 'excel!OfficeExtension.ClientObject:class'
    name: OfficeExtension.ClientObject
  - uid: 'excel!Excel.Range#autoFill~0:complex'
    name: Range | string
    fullName: Excel.Range | string
    spec.typeScript:
      - uid: 'excel!Excel.Range:class'
        name: Range
        fullName: Excel.Range
      - name: ' | string'
        fullName: ' | string'
  - uid: 'excel!Excel.AutoFillType:enum'
    name: Excel.AutoFillType
  - uid: 'excel!Excel.Range#autoFill~1:complex'
    name: Range | string
    fullName: Excel.Range | string
    spec.typeScript:
      - uid: 'excel!Excel.Range:class'
        name: Range
        fullName: Excel.Range
      - name: ' | string'
        fullName: ' | string'
  - uid: 'excel!Excel.ClearApplyTo:enum'
    name: Excel.ClearApplyTo
  - uid: 'excel!Excel.ConditionalFormatCollection:class'
    name: Excel.ConditionalFormatCollection
  - uid: 'excel!Excel.RequestContext:class'
    name: RequestContext
  - uid: 'excel!Excel.Range#copyFrom~0:complex'
    name: Range | RangeAreas | string
    fullName: Excel.Range | Excel.RangeAreas | string
    spec.typeScript:
      - uid: 'excel!Excel.Range:class'
        name: Range
        fullName: Excel.Range
      - name: ' | '
        fullName: ' | '
      - uid: 'excel!Excel.RangeAreas:class'
        name: RangeAreas
        fullName: Excel.RangeAreas
      - name: ' | string'
        fullName: ' | string'
  - uid: 'excel!Excel.RangeCopyType:enum'
    name: Excel.RangeCopyType
  - uid: 'excel!Excel.Range#copyFrom~1:complex'
    name: Range | RangeAreas | string
    fullName: Excel.Range | Excel.RangeAreas | string
    spec.typeScript:
      - uid: 'excel!Excel.Range:class'
        name: Range
        fullName: Excel.Range
      - name: ' | '
        fullName: ' | '
      - uid: 'excel!Excel.RangeAreas:class'
        name: RangeAreas
        fullName: Excel.RangeAreas
      - name: ' | string'
        fullName: ' | string'
  - uid: 'excel!Excel.DataValidation:class'
    name: Excel.DataValidation
  - uid: 'excel!Excel.DeleteShiftDirection:enum'
    name: Excel.DeleteShiftDirection
  - uid: 'excel!Excel.Range:class'
    name: Excel.Range
  - uid: 'excel!Excel.SearchCriteria:interface'
    name: Excel.SearchCriteria
  - uid: 'excel!Excel.RangeFormat:class'
    name: Excel.RangeFormat
  - uid: 'excel!Excel.Range#getBoundingRect~0:complex'
    name: Range | string
    fullName: Excel.Range | string
    spec.typeScript:
      - uid: 'excel!Excel.Range:class'
        name: Range
        fullName: Excel.Range
      - name: ' | string'
        fullName: ' | string'
  - uid: 'excel!Excel.Range#getCellProperties~0:complex'
    name: 'OfficeExtension.ClientResult<CellProperties[][]>'
    fullName: 'OfficeExtension.ClientResult<Excel.CellProperties[][]>'
    spec.typeScript:
      - uid: 'excel!OfficeExtension.ClientResult:class'
        name: OfficeExtension.ClientResult
        fullName: OfficeExtension.ClientResult
      - name: <
        fullName: <
      - uid: 'excel!Excel.CellProperties:interface'
        name: CellProperties
        fullName: Excel.CellProperties
      - name: '[][]>'
        fullName: '[][]>'
  - uid: 'excel!Excel.CellPropertiesLoadOptions:interface'
    name: CellPropertiesLoadOptions
  - uid: 'excel!Excel.Range#getColumnProperties~0:complex'
    name: 'OfficeExtension.ClientResult<ColumnProperties[]>'
    fullName: 'OfficeExtension.ClientResult<Excel.ColumnProperties[]>'
    spec.typeScript:
      - uid: 'excel!OfficeExtension.ClientResult:class'
        name: OfficeExtension.ClientResult
        fullName: OfficeExtension.ClientResult
      - name: <
        fullName: <
      - uid: 'excel!Excel.ColumnProperties:interface'
        name: ColumnProperties
        fullName: Excel.ColumnProperties
      - name: '[]>'
        fullName: '[]>'
  - uid: 'excel!Excel.ColumnPropertiesLoadOptions:interface'
    name: ColumnPropertiesLoadOptions
  - uid: 'excel!Excel.Range#getImage~0:complex'
    name: OfficeExtension.ClientResult<string>
    fullName: OfficeExtension.ClientResult<string>
    spec.typeScript:
      - uid: 'excel!OfficeExtension.ClientResult:class'
        name: OfficeExtension.ClientResult
        fullName: OfficeExtension.ClientResult
      - name: <string>
        fullName: <string>
  - uid: 'excel!Excel.Range#getIntersection~0:complex'
    name: Range | string
    fullName: Excel.Range | string
    spec.typeScript:
      - uid: 'excel!Excel.Range:class'
        name: Range
        fullName: Excel.Range
      - name: ' | string'
        fullName: ' | string'
  - uid: 'excel!Excel.Range#getIntersectionOrNullObject~0:complex'
    name: Range | string
    fullName: Excel.Range | string
    spec.typeScript:
      - uid: 'excel!Excel.Range:class'
        name: Range
        fullName: Excel.Range
      - name: ' | string'
        fullName: ' | string'
  - uid: 'excel!Excel.Range#getRowProperties~0:complex'
    name: 'OfficeExtension.ClientResult<RowProperties[]>'
    fullName: 'OfficeExtension.ClientResult<Excel.RowProperties[]>'
    spec.typeScript:
      - uid: 'excel!OfficeExtension.ClientResult:class'
        name: OfficeExtension.ClientResult
        fullName: OfficeExtension.ClientResult
      - name: <
        fullName: <
      - uid: 'excel!Excel.RowProperties:interface'
        name: RowProperties
        fullName: Excel.RowProperties
      - name: '[]>'
        fullName: '[]>'
  - uid: 'excel!Excel.RowPropertiesLoadOptions:interface'
    name: RowPropertiesLoadOptions
  - uid: 'excel!Excel.RangeAreas:class'
    name: Excel.RangeAreas
  - uid: 'excel!Excel.SpecialCellType:enum'
    name: Excel.SpecialCellType
  - uid: 'excel!Excel.SpecialCellValueType:enum'
    name: Excel.SpecialCellValueType
  - uid: 'excel!Excel.TableScopedCollection:class'
    name: Excel.TableScopedCollection
  - uid: 'excel!Excel.RangeView:class'
    name: Excel.RangeView
  - uid: 'excel!Excel.RangeHyperlink:interface'
    name: Excel.RangeHyperlink
  - uid: 'excel!Excel.InsertShiftDirection:enum'
    name: Excel.InsertShiftDirection
  - uid: 'excel!Excel.Range#linkedDataTypeState~0:complex'
    name: 'Excel.LinkedDataTypeState[][]'
    fullName: 'Excel.LinkedDataTypeState[][]'
    spec.typeScript:
      - uid: 'excel!Excel.LinkedDataTypeState:enum'
        name: Excel.LinkedDataTypeState
        fullName: Excel.LinkedDataTypeState
      - name: '[][]'
        fullName: '[][]'
  - uid: 'excel!Excel.Interfaces.RangeLoadOptions:interface'
    name: Excel.Interfaces.RangeLoadOptions
  - uid: 'excel!Excel.RemoveDuplicatesResult:class'
    name: Excel.RemoveDuplicatesResult
  - uid: 'excel!Excel.Range#replaceAll~0:complex'
    name: OfficeExtension.ClientResult<number>
    fullName: OfficeExtension.ClientResult<number>
    spec.typeScript:
      - uid: 'excel!OfficeExtension.ClientResult:class'
        name: OfficeExtension.ClientResult
        fullName: OfficeExtension.ClientResult
      - name: <number>
        fullName: <number>
  - uid: 'excel!Excel.ReplaceCriteria:interface'
    name: Excel.ReplaceCriteria
  - uid: 'excel!Excel.Interfaces.RangeUpdateData:interface'
    name: Interfaces.RangeUpdateData
  - uid: 'excel!OfficeExtension.UpdateOptions:interface'
    name: OfficeExtension.UpdateOptions
  - uid: 'excel!Excel.Range#setCellProperties~0:complex'
    name: 'SettableCellProperties[][]'
    fullName: 'Excel.SettableCellProperties[][]'
    spec.typeScript:
      - uid: 'excel!Excel.SettableCellProperties:interface'
        name: SettableCellProperties
        fullName: Excel.SettableCellProperties
      - name: '[][]'
        fullName: '[][]'
  - uid: 'excel!Excel.Range#setColumnProperties~0:complex'
    name: 'SettableColumnProperties[]'
    fullName: 'Excel.SettableColumnProperties[]'
    spec.typeScript:
      - uid: 'excel!Excel.SettableColumnProperties:interface'
        name: SettableColumnProperties
        fullName: Excel.SettableColumnProperties
      - name: '[]'
        fullName: '[]'
  - uid: 'excel!Excel.Range#setRowProperties~0:complex'
    name: 'SettableRowProperties[]'
    fullName: 'Excel.SettableRowProperties[]'
    spec.typeScript:
      - uid: 'excel!Excel.SettableRowProperties:interface'
        name: SettableRowProperties
        fullName: Excel.SettableRowProperties
      - name: '[]'
        fullName: '[]'
  - uid: 'excel!Excel.RangeSort:class'
    name: Excel.RangeSort
  - uid: 'excel!Excel.Interfaces.RangeData:interface'
    name: Excel.Interfaces.RangeData
  - uid: 'excel!Excel.Range#valueTypes~0:complex'
    name: 'Excel.RangeValueType[][]'
    fullName: 'Excel.RangeValueType[][]'
    spec.typeScript:
      - uid: 'excel!Excel.RangeValueType:enum'
        name: Excel.RangeValueType
        fullName: Excel.RangeValueType
      - name: '[][]'
        fullName: '[][]'
  - uid: 'excel!Excel.Worksheet:class'
    name: Excel.Worksheet