### YamlMime:UniversalReference
items:
  - uid: excel.Excel.ConditionalFormatCollection
    summary: |-
      <span data-ttu-id="3e3c0-101">Представляет коллекцию всех условных форматов, которые перекрывают диапазон.</span><span class="sxs-lookup"><span data-stu-id="3e3c0-101">Represents a collection of all the conditional formats that are overlap the range.</span></span>

      <span data-ttu-id="3e3c0-102">\[[Набор API: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="3e3c0-102">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: Excel.ConditionalFormatCollection
    fullName: Excel.ConditionalFormatCollection
    langs:
      - typeScript
    type: class
    extends:
      - 'OfficeExtension.ClientObject '
    package: excel
    children:
      - excel.Excel.ConditionalFormatCollection.add
      - excel.Excel.ConditionalFormatCollection.add_1
      - excel.Excel.ConditionalFormatCollection.clearAll
      - excel.Excel.ConditionalFormatCollection.context
      - excel.Excel.ConditionalFormatCollection.getCount
      - excel.Excel.ConditionalFormatCollection.getItem
      - excel.Excel.ConditionalFormatCollection.getItemAt
      - excel.Excel.ConditionalFormatCollection.items
      - excel.Excel.ConditionalFormatCollection.load
      - excel.Excel.ConditionalFormatCollection.load_1
      - excel.Excel.ConditionalFormatCollection.load_2
      - excel.Excel.ConditionalFormatCollection.toJSON
  - uid: excel.Excel.ConditionalFormatCollection.add
    summary: |-
      <span data-ttu-id="3e3c0-103">Добавляет новое условное форматирование в коллекцию по первому или верхнему приоритету.</span><span class="sxs-lookup"><span data-stu-id="3e3c0-103">Adds a new conditional format to the collection at the first/top priority.</span></span>

      <span data-ttu-id="3e3c0-104">\[[Набор API: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="3e3c0-104">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: add(type)
    fullName: add(type)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'add(type: Excel.ConditionalFormatType): Excel.ConditionalFormat;'
      return:
        type:
          - excel.Excel.ConditionalFormat
        description: |-


          #### <a name="examples"></a><span data-ttu-id="3e3c0-105">Примеры</span><span class="sxs-lookup"><span data-stu-id="3e3c0-105">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) {
              var sheetName = "Sheet1";
              var rangeAddress = "A1:C3";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
              var conditionalFormat = range.conditionalFormats.add(Excel.ConditionalFormatType.iconSet);
              conditionalFormat.iconOrNull.style = "YellowThreeArrows";
              return ctx.sync().then(function () {
                  console.log("Added new yellow three arrow icon set.");
              });
          }).catch(function (error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Sample");
              const range = sheet.getRange("B2:M5");
              const conditionalFormat = range.conditionalFormats
                  .add(Excel.ConditionalFormatType.colorScale);
              const criteria = {
                  minimum: { formula: null, type: Excel.ConditionalFormatColorCriterionType.lowestValue, color: "blue" },
                  midpoint: { formula: "50", type: Excel.ConditionalFormatColorCriterionType.percent, color: "yellow" },
                  maximum: { formula: null, type: Excel.ConditionalFormatColorCriterionType.highestValue, color: "red" }
              };
              conditionalFormat.colorScale.criteria = criteria;

              await context.sync();
          });
          ```
      parameters:
        - id: type
          description: <span data-ttu-id="3e3c0-106">Тип добавляемого условного форматирования.</span><span class="sxs-lookup"><span data-stu-id="3e3c0-106">The type of conditional format being added.</span></span> <span data-ttu-id="3e3c0-107">Дополнительные сведения см. в статье Excel. Кондитионалформаттипе.</span><span class="sxs-lookup"><span data-stu-id="3e3c0-107">See Excel.ConditionalFormatType for details.</span></span>
          type:
            - excel.Excel.ConditionalFormatType
  - uid: excel.Excel.ConditionalFormatCollection.add_1
    summary: |-
      <span data-ttu-id="3e3c0-108">Добавляет новое условное форматирование в коллекцию по первому или верхнему приоритету.</span><span class="sxs-lookup"><span data-stu-id="3e3c0-108">Adds a new conditional format to the collection at the first/top priority.</span></span>

      <span data-ttu-id="3e3c0-109">\[[Набор API: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="3e3c0-109">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: add(typeString)
    fullName: add(typeString)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'add(typeString: "Custom" | "DataBar" | "ColorScale" | "IconSet" | "TopBottom" | "PresetCriteria" | "ContainsText" | "CellValue"): Excel.ConditionalFormat;'
      return:
        type:
          - excel.Excel.ConditionalFormat
        description: ''
      parameters:
        - id: typeString
          description: <span data-ttu-id="3e3c0-110">Тип добавляемого условного форматирования.</span><span class="sxs-lookup"><span data-stu-id="3e3c0-110">The type of conditional format being added.</span></span> <span data-ttu-id="3e3c0-111">Дополнительные сведения см. в статье Excel. Кондитионалформаттипе.</span><span class="sxs-lookup"><span data-stu-id="3e3c0-111">See Excel.ConditionalFormatType for details.</span></span>
          type:
            - '"Custom" | "DataBar" | "ColorScale" | "IconSet" | "TopBottom" | "PresetCriteria" | "ContainsText" | "CellValue"'
  - uid: excel.Excel.ConditionalFormatCollection.clearAll
    summary: |-
      <span data-ttu-id="3e3c0-112">Полное удаление условного форматирование в указанном диапазоне.</span><span class="sxs-lookup"><span data-stu-id="3e3c0-112">Clears all conditional formats active on the current specified range.</span></span>

      <span data-ttu-id="3e3c0-113">\[[Набор API: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="3e3c0-113">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: clearAll()
    fullName: clearAll()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'clearAll(): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a><span data-ttu-id="3e3c0-114">Примеры</span><span class="sxs-lookup"><span data-stu-id="3e3c0-114">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) {
              var sheetName = "Sheet1";
              var rangeAddress = "A1:C3";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
              var conditionalFormats = range.conditionalFormats;
              var conditionalFormat = conditionalFormats.clearAll();
              return ctx.sync().then(function () {
                  console.log("Cleared all conditional formats from this range.");
              });
          }).catch(function (error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Sample");
              const range = sheet.getRange();
              range.conditionalFormats.clearAll();

              await context.sync();

              $(".conditional-formats").hide();
          });
          ```
  - uid: excel.Excel.ConditionalFormatCollection.context
    summary: '<span data-ttu-id="3e3c0-115">Контекст запроса, связанный с объектом.</span><span class="sxs-lookup"><span data-stu-id="3e3c0-115">The request context associated with the object.</span></span> <span data-ttu-id="3e3c0-116">Это подсоединяет процесс надстройки к процессу ведущего приложения Office.</span><span class="sxs-lookup"><span data-stu-id="3e3c0-116">This connects the add-in''s process to the Office host application''s process.</span></span>'
    name: context
    fullName: context
    langs:
      - typeScript
    type: property
    syntax:
      content: 'context: RequestContext;'
      return:
        type:
          - excel.Excel.RequestContext
  - uid: excel.Excel.ConditionalFormatCollection.getCount
    summary: |-
      <span data-ttu-id="3e3c0-117">Возвращает число условных форматов в книге.</span><span class="sxs-lookup"><span data-stu-id="3e3c0-117">Returns the number of conditional formats in the workbook.</span></span> <span data-ttu-id="3e3c0-118">Только для чтения.</span><span class="sxs-lookup"><span data-stu-id="3e3c0-118">Read-only.</span></span>

      <span data-ttu-id="3e3c0-119">\[[Набор API: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="3e3c0-119">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getCount()
    fullName: getCount()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getCount(): OfficeExtension.ClientResult<number>;'
      return:
        type:
          - OfficeExtension.ClientResult<number>
        description: |-


          #### <a name="examples"></a><span data-ttu-id="3e3c0-120">Примеры</span><span class="sxs-lookup"><span data-stu-id="3e3c0-120">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) {
              var sheetName = "Sheet1";
              var rangeAddress = "A1:C3";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
              var conditionalFormat = range.conditionalFormats.add(Excel.ConditionalFormatType.iconSet);
              conditionalFormat.iconOrNull.style = Excel.IconSet.fourTrafficLights;
              var cfCount = range.conditionalFormats.getCount(); 

              return ctx.sync().then(function () {
                  console.log("Count: " + cfCount.value);
              });
          }).catch(function (error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: excel.Excel.ConditionalFormatCollection.getItem
    summary: |-
      <span data-ttu-id="3e3c0-121">Возвращает условное форматирование для указанного идентификатора.</span><span class="sxs-lookup"><span data-stu-id="3e3c0-121">Returns a conditional format for the given ID.</span></span>

      <span data-ttu-id="3e3c0-122">\[[Набор API: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="3e3c0-122">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getItem(id)
    fullName: getItem(id)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getItem(id: string): Excel.ConditionalFormat;'
      return:
        type:
          - excel.Excel.ConditionalFormat
        description: |-
          <span data-ttu-id="3e3c0-123">Объект условного форматирования.</span><span class="sxs-lookup"><span data-stu-id="3e3c0-123">Conditional Format object.</span></span>

          #### <a name="examples"></a><span data-ttu-id="3e3c0-124">Примеры</span><span class="sxs-lookup"><span data-stu-id="3e3c0-124">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) {
              var sheetName = "Sheet1";
              var rangeAddress = "A1:C3";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
              var conditionalFormats = range.conditionalFormats;
              var conditionalFormat = conditionalFormats.getItemAt(3);
              return ctx.sync().then(function () {
                  console.log("Conditional Format at Item 3 Loaded");
              });
          }).catch(function (error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: id
          description: <span data-ttu-id="3e3c0-125">Идентификатор условного форматирования.</span><span class="sxs-lookup"><span data-stu-id="3e3c0-125">The id of the conditional format.</span></span>
          type:
            - string
  - uid: excel.Excel.ConditionalFormatCollection.getItemAt
    summary: |-
      <span data-ttu-id="3e3c0-126">Возвращает условное форматирование по индексу.</span><span class="sxs-lookup"><span data-stu-id="3e3c0-126">Returns a conditional format at the given index.</span></span>

      <span data-ttu-id="3e3c0-127">\[[Набор API: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="3e3c0-127">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getItemAt(index)
    fullName: getItemAt(index)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getItemAt(index: number): Excel.ConditionalFormat;'
      return:
        type:
          - excel.Excel.ConditionalFormat
        description: |-


          #### <a name="examples"></a><span data-ttu-id="3e3c0-128">Примеры</span><span class="sxs-lookup"><span data-stu-id="3e3c0-128">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) {
              var sheetName = "Sheet1";
              var rangeAddress = "A1:C3";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
              var conditionalFormats = range.conditionalFormats;
              var conditionalFormat = conditionalFormats.getItemAt(3);
              return ctx.sync().then(function () {
                  console.log("Conditional Format at Item 3 Loaded");
              });
          }).catch(function (error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Sample");
              const worksheetRange = sheet.getRange();
              worksheetRange.conditionalFormats.load("type");

              await context.sync();

              let cfRangePairs: { cf: Excel.ConditionalFormat, range: Excel.Range }[] = [];
              worksheetRange.conditionalFormats.items.forEach(item => {
                  cfRangePairs.push({
                      cf: item,
                      range: item.getRange().load("address")
                  });
              });

              await context.sync();

              if (cfRangePairs.length > 0) {
                  cfRangePairs.forEach(item => {
                      console.log(item.cf.type);
                  });
              } else {
                  console.log("No conditional formats applied.");
              }
          });
          ```
      parameters:
        - id: index
          description: '<span data-ttu-id="3e3c0-129">Индекс условных форматов, которые необходимо получить.</span><span class="sxs-lookup"><span data-stu-id="3e3c0-129">Index of the conditional formats to be retrieved.</span></span>'
          type:
            - number
  - uid: excel.Excel.ConditionalFormatCollection.items
    summary: <span data-ttu-id="3e3c0-130">Получает загруженные дочерние элементы в этой коллекции.</span><span class="sxs-lookup"><span data-stu-id="3e3c0-130">Gets the loaded child items in this collection.</span></span>
    name: items
    fullName: items
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly items: Excel.ConditionalFormat[];'
      return:
        type:
          - 'Excel.ConditionalFormat[]'
  - uid: excel.Excel.ConditionalFormatCollection.load
    summary: <span data-ttu-id="3e3c0-131">Добавляет в очередь команду для загрузки указанных свойств объекта.</span><span class="sxs-lookup"><span data-stu-id="3e3c0-131">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="3e3c0-132">Перед чтением свойств необходимо вызвать метод context.sync().</span><span class="sxs-lookup"><span data-stu-id="3e3c0-132">You must call "context.sync()" before reading the properties.</span></span>
    remarks: |-
      <span data-ttu-id="3e3c0-133">В дополнение к этой подписи этот метод имеет следующие подписи:</span><span class="sxs-lookup"><span data-stu-id="3e3c0-133">In addition to this signature, this method has the following signatures:</span></span>

      <span data-ttu-id="3e3c0-134">`load(option?: string | string[]): Excel.ConditionalFormatCollection`-WHERE — это строка с разделителями-запятыми или массив строк, указывающий свойства для загрузки.</span><span class="sxs-lookup"><span data-stu-id="3e3c0-134">`load(option?: string | string[]): Excel.ConditionalFormatCollection` - Where option is a comma-delimited string or an array of strings that specify the properties to load.</span></span>

      <span data-ttu-id="3e3c0-135">`load(option?: { select?: string; expand?: string; }): Excel.ConditionalFormatCollection`-WHERE. Select — это строка с разделителями-запятыми, указывающая свойства для загрузки и параметры. Expand — это строка с разделителями-запятыми, указывающая свойства навигации для загрузки.</span><span class="sxs-lookup"><span data-stu-id="3e3c0-135">`load(option?: { select?: string; expand?: string; }): Excel.ConditionalFormatCollection` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.</span></span>

      <span data-ttu-id="3e3c0-136">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.ConditionalFormatCollection`— Доступно только для типов коллекций.</span><span class="sxs-lookup"><span data-stu-id="3e3c0-136">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.ConditionalFormatCollection` - Only available on collection types.</span></span> <span data-ttu-id="3e3c0-137">Он аналогичен предыдущей подписи.</span><span class="sxs-lookup"><span data-stu-id="3e3c0-137">It is similar to the preceding signature.</span></span> <span data-ttu-id="3e3c0-138">Option. Top указывает максимальное количество элементов коллекции, которые можно включить в результат.</span><span class="sxs-lookup"><span data-stu-id="3e3c0-138">Option.top specifies the maximum number of collection items that can be included in the result.</span></span> <span data-ttu-id="3e3c0-139">Option. skip указывает количество элементов, которые будут пропущены и не включены в результат.</span><span class="sxs-lookup"><span data-stu-id="3e3c0-139">Option.skip specifies the number of items that are to be skipped and not included in the result.</span></span> <span data-ttu-id="3e3c0-140">Если указан параметр Option. Top, результирующий набор начнется после пропуска указанного числа элементов.</span><span class="sxs-lookup"><span data-stu-id="3e3c0-140">If option.top is specified, the result set will start after skipping the specified number of items.</span></span>
    name: load(option)
    fullName: load(option)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(option?: Excel.Interfaces.ConditionalFormatCollectionLoadOptions & Excel.Interfaces.CollectionLoadOptions): Excel.ConditionalFormatCollection;'
      return:
        type:
          - excel.Excel.ConditionalFormatCollection
        description: ''
      parameters:
        - id: option
          description: ''
          type:
            - Excel.Interfaces.ConditionalFormatCollectionLoadOptions & Excel.Interfaces.CollectionLoadOptions
  - uid: excel.Excel.ConditionalFormatCollection.load_1
    summary: <span data-ttu-id="3e3c0-141">Добавляет в очередь команду для загрузки указанных свойств объекта.</span><span class="sxs-lookup"><span data-stu-id="3e3c0-141">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="3e3c0-142">Перед чтением свойств `context.sync()` необходимо вызвать метод.</span><span class="sxs-lookup"><span data-stu-id="3e3c0-142">You must call `context.sync()` before reading the properties.</span></span>
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): Excel.ConditionalFormatCollection;'
      return:
        type:
          - excel.Excel.ConditionalFormatCollection
        description: ''
      parameters:
        - id: propertyNames
          description: '<span data-ttu-id="3e3c0-143">Строка, разделенная запятыми, или массив строк, указывающий свойства для загрузки.</span><span class="sxs-lookup"><span data-stu-id="3e3c0-143">A comma-delimited string or an array of strings that specify the properties to load.</span></span>'
          type:
            - 'string | string[]'
  - uid: excel.Excel.ConditionalFormatCollection.load_2
    name: load(option)
    fullName: load(option)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(option?: OfficeExtension.LoadOption): Excel.ConditionalFormatCollection;'
      return:
        type:
          - excel.Excel.ConditionalFormatCollection
        description: ''
      parameters:
        - id: option
          description: ''
          type:
            - OfficeExtension.LoadOption
  - uid: excel.Excel.ConditionalFormatCollection.toJSON
    summary: '<span data-ttu-id="3e3c0-144">Переопределяет метод `toJSON()` JavaScript для предоставления более удобного вывода при передаче объекта API`JSON.stringify()`</span><span class="sxs-lookup"><span data-stu-id="3e3c0-144">Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`</span></span><!-- --><span data-ttu-id="3e3c0-145">.</span><span class="sxs-lookup"><span data-stu-id="3e3c0-145"></span></span> <span data-ttu-id="3e3c0-146">(`JSON.stringify`</span><span class="sxs-lookup"><span data-stu-id="3e3c0-146"></span></span><!-- --><span data-ttu-id="3e3c0-147">, в свою очередь, вызывает `toJSON` метод объекта, который передается ему.) В то время как `Excel.ConditionalFormatCollection` исходный объект является объектом API, `toJSON` метод возвращает простой объект JavaScript (тип`Excel.Interfaces.ConditionalFormatCollectionData`</span><span class="sxs-lookup"><span data-stu-id="3e3c0-147">, in turn, calls the `toJSON` method of the object that is passed to it.) Whereas the original `Excel.ConditionalFormatCollection` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.ConditionalFormatCollectionData`</span></span><!-- --><span data-ttu-id="3e3c0-148">), содержащий массив "Items" с неполноми копиями загруженных свойств из элементов коллекции.</span><span class="sxs-lookup"><span data-stu-id="3e3c0-148">) that contains an "items" array with shallow copies of any loaded properties from the collection''s items.</span></span>'
    name: toJSON()
    fullName: toJSON()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON(): Excel.Interfaces.ConditionalFormatCollectionData;'
      return:
        type:
          - excel.Excel.Interfaces.ConditionalFormatCollectionData
        description: ''