### YamlMime:UniversalReference
items:
  - uid: 'office-runtime!OfficeRuntime.Storage:interface'
    summary: 'Асинхронное, глобальное и постоянное хранение ключей и значений.'
    remarks: 'Размер хранилища составляет 10 МБ для каждого домена, который может совместно использоваться несколькими надстройками.'
    name: OfficeRuntime.Storage
    fullName: OfficeRuntime.Storage
    langs:
      - typeScript
    type: interface
    package: office-runtime!
    children:
      - 'office-runtime!OfficeRuntime.Storage#getItem:member(1)'
      - 'office-runtime!OfficeRuntime.Storage#getItems:member(1)'
      - 'office-runtime!OfficeRuntime.Storage#getKeys:member(1)'
      - 'office-runtime!OfficeRuntime.Storage#removeItem:member(1)'
      - 'office-runtime!OfficeRuntime.Storage#removeItems:member(1)'
      - 'office-runtime!OfficeRuntime.Storage#setItem:member(1)'
      - 'office-runtime!OfficeRuntime.Storage#setItems:member(1)'
  - uid: 'office-runtime!OfficeRuntime.Storage#getItem:member(1)'
    summary: 'Извлекает элемент из хранилища на основе его ключа. Возвращает обещание. В случае события, которое не удается устранить с помощью обещания, возвращается значение null.'
    name: getItem(key)
    fullName: getItem(key)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getItem(key: string): Promise<string | null>;'
      return:
        type:
          - 'office-runtime!OfficeRuntime.Storage#getItem~0:complex'
        description: ''
      parameters:
        - id: key
          description: 'Ключ элемента, который требуется получить. Должен быть строкой.'
          type:
            - string
  - uid: 'office-runtime!OfficeRuntime.Storage#getItems:member(1)'
    summary: 'Получает несколько элементов из хранилища на основе их ключей. Возвращает обещание. В случае события, которое не удается устранить с помощью обещания, возвращается значение null.'
    name: getItems(keys)
    fullName: getItems(keys)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getItems(keys: string[]): Promise<{ [key: string]: string | null }>;'
      return:
        type:
          - 'office-runtime!OfficeRuntime.Storage#getItems~0:complex'
        description: ''
      parameters:
        - id: keys
          description: 'Ключи элементов, которые требуется удалить. Должен быть массивом строк.'
          type:
            - 'string[]'
  - uid: 'office-runtime!OfficeRuntime.Storage#getKeys:member(1)'
    summary: Извлекает массив всех ключей из хранилища. Возвращает обещание.
    name: getKeys()
    fullName: getKeys()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getKeys(): Promise<string[]>;'
      return:
        type:
          - 'office-runtime!OfficeRuntime.Storage#getKeys~0:complex'
        description: ''
  - uid: 'office-runtime!OfficeRuntime.Storage#removeItem:member(1)'
    summary: Удаляет элемент из хранилища на основе его ключа. Возвращает обещание.
    name: removeItem(key)
    fullName: removeItem(key)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'removeItem(key: string): Promise<void>;'
      return:
        type:
          - 'office-runtime!OfficeRuntime.Storage#removeItem~0:complex'
        description: ''
      parameters:
        - id: key
          description: 'Ключ элемента, который требуется удалить. Должен быть строкой.'
          type:
            - string
  - uid: 'office-runtime!OfficeRuntime.Storage#removeItems:member(1)'
    summary: Удаляет несколько элементов из хранилища. Возвращает обещание.
    name: removeItems(keys)
    fullName: removeItems(keys)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'removeItems(keys: string[]): Promise<void>;'
      return:
        type:
          - 'office-runtime!OfficeRuntime.Storage#removeItems~0:complex'
        description: ''
      parameters:
        - id: keys
          description: 'Ключи элементов, которые требуется удалить. Должен быть массивом строк.'
          type:
            - 'string[]'
  - uid: 'office-runtime!OfficeRuntime.Storage#setItem:member(1)'
    summary: Задает в хранилище или обновляет существующую запись "ключ — значение". Возвращает обещание.
    name: 'setItem(key, value)'
    fullName: 'setItem(key, value)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setItem(key: string, value: string): Promise<void>;'
      return:
        type:
          - 'office-runtime!OfficeRuntime.Storage#setItem~0:complex'
        description: ''
      parameters:
        - id: key
          description: 'Ключ элемента, который необходимо задать. Должен быть строкой.'
          type:
            - string
        - id: value
          description: Должен быть строкой.
          type:
            - string
  - uid: 'office-runtime!OfficeRuntime.Storage#setItems:member(1)'
    summary: Задает несколько элементов в хранилище или обновляет несколько элементов в хранилище. Возвращает обещание.
    name: setItems(keyValues)
    fullName: setItems(keyValues)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setItems(keyValues: { [key: string]: string }): Promise<void>;'
      return:
        type:
          - 'office-runtime!OfficeRuntime.Storage#setItems~0:complex'
        description: ''
      parameters:
        - id: keyValues
          description: Устанавливаемые пары "ключ — значение". Должны быть строками.
          type:
            - '{ [key: string]: string }'
references:
  - uid: 'office-runtime!OfficeRuntime.Storage#getItem~0:complex'
    name: Promise<string | null>
    fullName: Promise<string | null>
    spec.typeScript:
      - uid: '!Promise:interface'
        name: Promise
        fullName: Promise
      - name: <string | null>
        fullName: <string | null>
  - uid: 'office-runtime!OfficeRuntime.Storage#getItems~0:complex'
    name: 'Promise<{ [key: string]: string | null }>'
    fullName: 'Promise<{ [key: string]: string | null }>'
    spec.typeScript:
      - uid: '!Promise:interface'
        name: Promise
        fullName: Promise
      - name: '<{ [key: string]: string | null }>'
        fullName: '<{ [key: string]: string | null }>'
  - uid: 'office-runtime!OfficeRuntime.Storage#getKeys~0:complex'
    name: 'Promise<string[]>'
    fullName: 'Promise<string[]>'
    spec.typeScript:
      - uid: '!Promise:interface'
        name: Promise
        fullName: Promise
      - name: '<string[]>'
        fullName: '<string[]>'
  - uid: 'office-runtime!OfficeRuntime.Storage#removeItem~0:complex'
    name: Promise<void>
    fullName: Promise<void>
    spec.typeScript:
      - uid: '!Promise:interface'
        name: Promise
        fullName: Promise
      - name: <void>
        fullName: <void>
  - uid: 'office-runtime!OfficeRuntime.Storage#removeItems~0:complex'
    name: Promise<void>
    fullName: Promise<void>
    spec.typeScript:
      - uid: '!Promise:interface'
        name: Promise
        fullName: Promise
      - name: <void>
        fullName: <void>
  - uid: 'office-runtime!OfficeRuntime.Storage#setItem~0:complex'
    name: Promise<void>
    fullName: Promise<void>
    spec.typeScript:
      - uid: '!Promise:interface'
        name: Promise
        fullName: Promise
      - name: <void>
        fullName: <void>
  - uid: 'office-runtime!OfficeRuntime.Storage#setItems~0:complex'
    name: Promise<void>
    fullName: Promise<void>
    spec.typeScript:
      - uid: '!Promise:interface'
        name: Promise
        fullName: Promise
      - name: <void>
        fullName: <void>