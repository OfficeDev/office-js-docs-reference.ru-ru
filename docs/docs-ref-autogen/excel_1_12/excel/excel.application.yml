### YamlMime:TSType
name: Excel.Application
uid: excel!Excel.Application:class
package: excel!
fullName: Excel.Application
summary: >-
  Представляет приложение Excel, которое управляет книгой.


  \[[Набор API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
remarks: ''
isPreview: false
isDeprecated: false
type: class
properties:
- name: calculationEngineVersion
  uid: excel!Excel.Application#calculationEngineVersion:member
  package: excel!
  fullName: calculationEngineVersion
  summary: >-
    Возвращает версию модуля вычислений Excel, использованного для последнего полного пересчета.


    \[[Набор API: ExcelApi 1,9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly calculationEngineVersion: number;'
    return:
      type: number
- name: calculationMode
  uid: excel!Excel.Application#calculationMode:member
  package: excel!
  fullName: calculationMode
  summary: >-
    Возвращает режим вычислений, используемый в книге в соответствии с константами в Excel. Калкулатионмоде. Возможные значения: `Automatic`<!-- -->, где Excel управляет пересчетом; `AutomaticExceptTables`<!-- -->, где Excel контролирует пересчет, но игнорирует изменения в таблицах; `Manual`<!-- -->, где выполняется расчет, когда пользователь запрашивает его.


    \[[Набор API: ExcelApi 1,1 для Get, 1,8 для Set](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'calculationMode: Excel.CalculationMode | "Automatic" | "AutomaticExceptTables" | "Manual";'
    return:
      type: <xref uid="excel!Excel.CalculationMode:enum" /> | "Automatic" | "AutomaticExceptTables" | "Manual"
- name: calculationState
  uid: excel!Excel.Application#calculationState:member
  package: excel!
  fullName: calculationState
  summary: >-
    Возвращает состояние вычисления приложения. Дополнительные сведения см. в статье Excel.CalculationState.


    \[[Набор API: ExcelApi 1,9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly calculationState: Excel.CalculationState | "Done" | "Calculating" | "Pending";'
    return:
      type: <xref uid="excel!Excel.CalculationState:enum" /> | "Done" | "Calculating" | "Pending"
- name: context
  uid: excel!Excel.Application#context:member
  package: excel!
  fullName: context
  summary: Контекст запроса, связанный с объектом. Это подсоединяет процесс надстройки к процессу ведущего приложения Office.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'context: RequestContext;'
    return:
      type: <xref uid="excel!Excel.RequestContext:class" />
- name: cultureInfo
  uid: excel!Excel.Application#cultureInfo:member
  package: excel!
  fullName: cultureInfo
  summary: >-
    Предоставляет сведения, основанные на текущих параметрах языковых параметров системы. Сюда входят имена культур, форматирование чисел и другие параметры, зависящие от культуры.


    \[[Набор API: ExcelApi 1,11](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly cultureInfo: Excel.CultureInfo;'
    return:
      type: <xref uid="excel!Excel.CultureInfo:class" />
- name: decimalSeparator
  uid: excel!Excel.Application#decimalSeparator:member
  package: excel!
  fullName: decimalSeparator
  summary: >-
    Получает строку, используемую в качестве десятичного разделителя для числовых значений. Это основано на локальных параметрах Excel.


    \[[Набор API: ExcelApi 1,11](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly decimalSeparator: string;'
    return:
      type: string
      description: "\n\n#### <a name=\"examples\"></a>Примеры\n\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/50-workbook/culture-info.yaml\nawait Excel.run(async (context) => {\n  context.application.load(\"decimalSeparator,thousandsSeparator\");\n  context.application.cultureInfo.numberFormat.load(\"numberDecimalSeparator,numberGroupSeparator\");\n  await context.sync();\n\n  // Local settings are set under the \"Options > Advanced\" menu.\n  const localDecimalSeparator = context.application.decimalSeparator;\n  const localThousandsSeparator = context.application.thousandsSeparator;\n\n  const systemDecimalSeparator = context.application.cultureInfo.numberFormat.numberDecimalSeparator;\n  const systemThousandsSeparator = context.application.cultureInfo.numberFormat.numberGroupSeparator;\n\n  console.log(\"Local character settings: \");\n  console.log(`  Local decimal separator: ${localDecimalSeparator}`);\n  console.log(`  Local thousands separator: ${localThousandsSeparator}`);\n\n  console.log(\"System culture settings: \");\n  console.log(`  System decimal separator: ${systemDecimalSeparator}`);\n  console.log(`  System thousands separator: ${systemThousandsSeparator}`);\n  console.log(`  `);\n\n  await context.sync();\n});\n```"
- name: iterativeCalculation
  uid: excel!Excel.Application#iterativeCalculation:member
  package: excel!
  fullName: iterativeCalculation
  summary: >-
    Возвращает параметры итеративных вычислений. В Excel для Windows и Mac параметры будут применены к приложению Excel. В Excel на веб-сайте и других платформах параметры будут применены к активной книге.


    \[[Набор API: ExcelApi 1,9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly iterativeCalculation: Excel.IterativeCalculation;'
    return:
      type: <xref uid="excel!Excel.IterativeCalculation:class" />
- name: thousandsSeparator
  uid: excel!Excel.Application#thousandsSeparator:member
  package: excel!
  fullName: thousandsSeparator
  summary: >-
    Получает строку, используемую для разделения групп цифр слева от десятичного разделителя для числовых значений. Это основано на локальных параметрах Excel.


    \[[Набор API: ExcelApi 1,11](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly thousandsSeparator: string;'
    return:
      type: string
- name: useSystemSeparators
  uid: excel!Excel.Application#useSystemSeparators:member
  package: excel!
  fullName: useSystemSeparators
  summary: >-
    Указывает, включены ли системные разделители Excel. К системным разделителям относятся разделитель целой и дробной части, а также разделитель групп разрядов.


    \[[Набор API: ExcelApi 1,11](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly useSystemSeparators: boolean;'
    return:
      type: boolean
methods:
- name: calculate(calculationType)
  uid: excel!Excel.Application#calculate:member(1)
  package: excel!
  fullName: calculate(calculationType)
  summary: >-
    Пересчитывает данные во всех открытых в текущий момент книгах Excel.


    \[[Набор API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'calculate(calculationType: Excel.CalculationType): void;'
    parameters:
    - id: calculationType
      description: Определяет тип расчета, который нужно использовать. Дополнительные сведения см. в статье Excel. Калкулатионтипе.
      type: <xref uid="excel!Excel.CalculationType:enum" />
    return:
      type: void
      description: ''
- name: calculate(calculationTypeString)
  uid: excel!Excel.Application#calculate:member(2)
  package: excel!
  fullName: calculate(calculationTypeString)
  summary: >-
    Пересчитывает данные во всех открытых в текущий момент книгах Excel.


    \[[Набор API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'calculate(calculationTypeString: "Recalculate" | "Full" | "FullRebuild"): void;'
    parameters:
    - id: calculationTypeString
      description: Определяет тип расчета, который нужно использовать. Дополнительные сведения см. в статье Excel. Калкулатионтипе.
      type: "\"Recalculate\" | \"Full\" | \"FullRebuild\""
    return:
      type: void
      description: "\n\n#### <a name=\"examples\"></a>Примеры\n\n```javascript\nExcel.run(function (ctx) {\n    ctx.workbook.application.calculate('Full');\n    return ctx.sync();\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: load(options)
  uid: excel!Excel.Application#load:member(1)
  package: excel!
  fullName: load(options)
  summary: Добавляет в очередь команду для загрузки указанных свойств объекта. Перед чтением свойств требуется вызвать метод `context.sync()`.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'load(options?: Excel.Interfaces.ApplicationLoadOptions): Excel.Application;'
    parameters:
    - id: options
      description: Предоставляет параметры, для которых загружается свойства объекта.
      type: <xref uid="excel!Excel.Interfaces.ApplicationLoadOptions:interface" />
    return:
      type: <xref uid="excel!Excel.Application:class" />
      description: ''
- name: load(propertyNames)
  uid: excel!Excel.Application#load:member(2)
  package: excel!
  fullName: load(propertyNames)
  summary: Добавляет в очередь команду для загрузки указанных свойств объекта. Перед чтением свойств требуется вызвать метод `context.sync()`.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'load(propertyNames?: string | string[]): Excel.Application;'
    parameters:
    - id: propertyNames
      description: Строка, разделенная запятыми, или массив строк, указывающий свойства для загрузки.
      type: string | string[]
    return:
      type: <xref uid="excel!Excel.Application:class" />
      description: "\n\n#### <a name=\"examples\"></a>Примеры\n\n```javascript\nExcel.run(function (ctx) {\n    var application = ctx.workbook.application;\n    application.load('calculationMode');\n    return ctx.sync().then(function() {\n        console.log(application.calculationMode);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: load(propertyNamesAndPaths)
  uid: excel!Excel.Application#load:member(3)
  package: excel!
  fullName: load(propertyNamesAndPaths)
  summary: Добавляет в очередь команду для загрузки указанных свойств объекта. Перед чтением свойств требуется вызвать метод `context.sync()`.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: >-
      load(propertyNamesAndPaths?: {
                  select?: string;
                  expand?: string;
              }): Excel.Application;
    parameters:
    - id: propertyNamesAndPaths
      description: '`propertyNamesAndPaths.select` — Это строка с разделителями-запятыми, задающая свойства для загрузки и которая `propertyNamesAndPaths.expand` представляет собой строку с разделителями-запятыми, указывающую свойства навигации для загрузки.'
      type: >-
        {
                    select?: string;
                    expand?: string;
                }
    return:
      type: <xref uid="excel!Excel.Application:class" />
      description: ''
- name: set(properties, options)
  uid: excel!Excel.Application#set:member(1)
  package: excel!
  fullName: set(properties, options)
  summary: Задает одновременно несколько свойств объекта. Можно передать либо простой объект с соответствующими свойствами, либо другой объект API того же типа.
  remarks: >-
    Этот метод имеет следующую дополнительную подпись:


    `set(properties: Excel.Application): void`
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'set(properties: Interfaces.ApplicationUpdateData, options?: OfficeExtension.UpdateOptions): void;'
    parameters:
    - id: properties
      description: Объект JavaScript со свойствами, которые структурированы исоморфикалли к свойствам объекта, для которого вызывается метод.
      type: <xref uid="excel!Excel.Interfaces.ApplicationUpdateData:interface" />
    - id: options
      description: Предоставляет возможность подавлять ошибки, если объект Properties пытается задать любые свойства, предназначенные только для чтения.
      type: <xref uid="office!OfficeExtension.UpdateOptions:interface" />
    return:
      type: void
      description: ''
- name: set(properties)
  uid: excel!Excel.Application#set:member(2)
  package: excel!
  fullName: set(properties)
  summary: Задает одновременно несколько свойств объекта на основе существующего загруженного объекта.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'set(properties: Excel.Application): void;'
    parameters:
    - id: properties
      description: ''
      type: <xref uid="excel!Excel.Application:class" />
    return:
      type: void
      description: ''
- name: suspendApiCalculationUntilNextSync()
  uid: excel!Excel.Application#suspendApiCalculationUntilNextSync:member(1)
  package: excel!
  fullName: suspendApiCalculationUntilNextSync()
  summary: >-
    Приостанавливает вычисление до вызова следующего "context.sync()". После этого за пересчет книги и распространение всех зависимостей несет ответственность разработчик.


    \[[Набор API: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'suspendApiCalculationUntilNextSync(): void;'
    return:
      type: void
      description: ''
- name: suspendScreenUpdatingUntilNextSync()
  uid: excel!Excel.Application#suspendScreenUpdatingUntilNextSync:member(1)
  package: excel!
  fullName: suspendScreenUpdatingUntilNextSync()
  summary: >-
    Приостанавливает обновление экрана до тех пор, пока `context.sync()` не будет вызван следующий.


    * Note * *: не вызывайте их `suspendScreenUpdatingUntilNextSync` повторно (например, в цикле). Повторные вызовы приведут к мерцанию окна Excel.


    \[[Набор API: ExcelApi 1,9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'suspendScreenUpdatingUntilNextSync(): void;'
    return:
      type: void
      description: "\n\n#### <a name=\"examples\"></a>Примеры\n\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/90-scenarios/performance-optimization.yaml\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getActiveWorksheet();\n    const rowCount = 500;\n    const columnCount = 20;\n\n    const startTime = Date.now();\n    console.log(\"Starting...\");\n\n    if (pauseScreenPainting) {\n        // Note: Don't call `suspendScreenUpdatingUntilNextSync` repeatedly (such as in a loop).\n        // Repeated calls will cause the Excel window to flicker. \n        context.application.suspendScreenUpdatingUntilNextSync();\n    }\n\n    for (let i = 0; i < rowCount; i++) {\n        for (let j = 0; j < columnCount; j++) {\n            let cell = sheet.getCell(i, j);\n            cell.values = [[i * j * Math.random()]];\n            if (untrack) {\n                cell.untrack();\n            }\n        }\n    }\n\n    await context.sync();\n\n    console.log(`Ending. Adding ${rowCount * columnCount} cells took ${Date.now() - startTime} milliseconds`);\n});\n```"
- name: toJSON()
  uid: excel!Excel.Application#toJSON:member(1)
  package: excel!
  fullName: toJSON()
  summary: Переопределяет `toJSON()` метод JavaScript для предоставления более удобного вывода при передаче объекта API `JSON.stringify()`<!-- -->. (`JSON.stringify`<!-- -->, в свою очередь, вызывает `toJSON` метод объекта, который передается ему.) В то время как исходный объект Excel. Application — это объект API, `toJSON` метод возвращает простой объект JavaScript (тип `Excel.Interfaces.ApplicationData`<!-- -->), который содержит неполные копии загруженных дочерних свойств из исходного объекта.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'toJSON(): Excel.Interfaces.ApplicationData;'
    return:
      type: <xref uid="excel!Excel.Interfaces.ApplicationData:interface" />
      description: ''
extends: <xref uid="office!OfficeExtension.ClientObject:class" />
metadata:
  ms.openlocfilehash: c3e68d18d439d4080e9cf12d05c1d845714ee491
  ms.sourcegitcommit: 3bab97ab3b91da7cca497f6fc895408a76bd8b46
  ms.translationtype: MT
  ms.contentlocale: ru-RU
  ms.lasthandoff: 11/18/2020
  ms.locfileid: "49158004"
