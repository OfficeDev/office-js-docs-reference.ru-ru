### YamlMime:UniversalReference
ms.openlocfilehash: dcfe0ca5ce1ee5a44fadd6af24eb60cfcbb529ea
ms.sourcegitcommit: d356f1545c328d4b59ce814fcab8191e4231f1dc
ms.translationtype: MT
ms.contentlocale: ru-RU
ms.lasthandoff: 02/13/2019
ms.locfileid: "29979598"
items:
- uid: Outlook_1_2.Office.MessageCompose
  summary: >-
    Составление сообщения режим [Office.context.mailbox.item](xref:Outlook_1_2.Office.Item)<!-- -->.


    **Важно**: это внутренний объект Outlook, непосредственно не предоставляется через существующие интерфейсы. Вам следует рассматривать как режим Office.context.mailbox.item. Обратитесь к странице [Объектной модели](https://docs.microsoft.com/office/dev/add-ins/reference/objectmodel/requirement-set-1.2/office.context.mailbox.item) для получения дополнительных сведений.
  name: Office.MessageCompose
  fullName: Office.MessageCompose
  langs:
  - typeScript
  type: interface
  extends:
  - Message
  - 'ItemCompose '
  package: Outlook_1_2
  children:
  - Outlook_1_2.Office.MessageCompose.addFileAttachmentAsync
  - Outlook_1_2.Office.MessageCompose.addFileAttachmentAsync_1
  - Outlook_1_2.Office.MessageCompose.addFileAttachmentAsync_2
  - Outlook_1_2.Office.MessageCompose.addFileAttachmentAsync_3
  - Outlook_1_2.Office.MessageCompose.addItemAttachmentAsync
  - Outlook_1_2.Office.MessageCompose.addItemAttachmentAsync_1
  - Outlook_1_2.Office.MessageCompose.addItemAttachmentAsync_2
  - Outlook_1_2.Office.MessageCompose.addItemAttachmentAsync_3
  - Outlook_1_2.Office.MessageCompose.getSelectedDataAsync
  - Outlook_1_2.Office.MessageCompose.getSelectedDataAsync_1
  - Outlook_1_2.Office.MessageCompose.loadCustomPropertiesAsync
  - Outlook_1_2.Office.MessageCompose.removeAttachmentAsync
  - Outlook_1_2.Office.MessageCompose.removeAttachmentAsync_1
  - Outlook_1_2.Office.MessageCompose.removeAttachmentAsync_2
  - Outlook_1_2.Office.MessageCompose.removeAttachmentAsync_3
  - Outlook_1_2.Office.MessageCompose.setSelectedDataAsync
  - Outlook_1_2.Office.MessageCompose.setSelectedDataAsync_1
  - Outlook_1_2.Office.MessageCompose.setSelectedDataAsync_2
  - Outlook_1_2.Office.MessageCompose.setSelectedDataAsync_3
  - Outlook_1_2.Office.MessageCompose.bcc
  - Outlook_1_2.Office.MessageCompose.body
  - Outlook_1_2.Office.MessageCompose.cc
  - Outlook_1_2.Office.MessageCompose.conversationId
  - Outlook_1_2.Office.MessageCompose.itemType
  - Outlook_1_2.Office.MessageCompose.subject
  - Outlook_1_2.Office.MessageCompose.to
- uid: Outlook_1_2.Office.MessageCompose.addFileAttachmentAsync
  summary: >-
    Добавляет файл в сообщение или встречу в качестве вложения.


    Метод addFileAttachmentAsync передает файл по указанному универсальному коду ресурса (URI) и вкладывает его в элемент в форме создания.


    Идентификатор можно последовательно использовать с методом removeAttachmentAsync, чтобы удалить вложение, добавленное во время текущего сеанса.


    \[[Набор API-Интерфейсов: почтовый ящик 1.1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    <table><tr><td>[Минимальный уровень разрешений](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadWriteItem</td></tr>


    <tr><td>[Применимый режим Outlook](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Создание сообщения</td></tr>


    <tr><td>Ошибки</td><td>AttachmentSizeExceeded - вложение больше, чем разрешено.</td></tr><tr><td></td><td>FileTypeNotSupported - вложение имеет неподдерживаемое расширение не допускается.</td></tr><tr><td></td><td>NumberOfAttachmentsExceeded - сообщение или встреча содержит слишком много вложений.</td></tr></table>


    В дополнение к подписи этот метод также содержит следующие подписи:


    `addFileAttachmentAsync(uri: string, attachmentName: string): void;`


    `addFileAttachmentAsync(uri: string, attachmentName: string, options: AsyncContextOptions): void;`


    `addFileAttachmentAsync(uri: string, attachmentName: string, callback: (result: Office.AsyncResult<string>) => void): void;`

    #### <a name="examples"></a>Примеры


    ```javascript

    function callback(result) {
        if (result.error) {
            console.log(result.error);
        } else {
            console.log("Attachment added");
        }
    }


    function addAttachment() {
        // The values in asyncContext can be accessed in the callback
        var options = { 'asyncContext': { var1: 1, var2: 2 } };

        var attachmentURL = "https://contoso.com/rtm/icon.png";
        Office.context.mailbox.item.addFileAttachmentAsync(attachmentURL, attachmentURL, options, callback);
    }

    ```

    ```javascript

    // The following example adds an image file as an inline attachment and

    // references the attachment in the message body.

    Office.context.mailbox.item.addFileAttachmentAsync(
        "http://i.imgur.com/WJXklif.png",
        "cute_bird.png",
        {
            isInline: true
        },
        function (asyncResult) {
            Office.context.mailbox.item.body.setAsync(
                "<p>Here's a cute bird!</p><img src='cid:cute_bird.png'>",
                {
                    "coercionType": "html"
                },
                function (asyncResult) {
                    // Do something here
                });
        });
    ```
  name: addFileAttachmentAsync(uri, attachmentName, options, callback)
  fullName: addFileAttachmentAsync(uri, attachmentName, options, callback)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'addFileAttachmentAsync(uri: string, attachmentName: string, options?: Office.AsyncContextOptions, callback?: (result: Office.AsyncResult<string>) => void): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: uri
      description: Универсальный код ресурса (URI), представляющий расположение файла, который нужно вложить в сообщение или встречу. Максимальная длина — 2048 символов.
      type:
      - string
    - id: attachmentName
      description: Имя вложения, которое отображается при передаче вложения. Максимальная длина — 255 символов.
      type:
      - string
    - id: options
      description: 'Необязательное свойство. Объектный литерал, содержащий одно или несколько из указанных ниже свойств. asyncContext: разработчики могут предоставлять любого объекта, их необходимо получить доступ в метод обратного вызова. isInline: Если значение true, указывает, что вложения будут показаны встроенные в теле сообщения и не должно отображаться в списке вложения.'
      type:
      - Office.AsyncContextOptions
    - id: callback
      description: После завершения работы метода, функции, переданной в параметре обратного вызова вызывается с один параметр типа Office.AsyncResult. В случае успешного выполнения идентификатор вложения будут предоставляться в свойство asyncResult.value. Если передать вложение не удается, объект asyncResult будет содержать объект Error с описанием ошибки.
      type:
      - '(result: Office.AsyncResult<string>) => void'
- uid: Outlook_1_2.Office.MessageCompose.addFileAttachmentAsync_1
  summary: >-
    Добавляет файл в сообщение или встречу в качестве вложения.


    Метод addFileAttachmentAsync передает файл по указанному универсальному коду ресурса (URI) и вкладывает его в элемент в форме создания.


    Идентификатор можно последовательно использовать с методом removeAttachmentAsync, чтобы удалить вложение, добавленное во время текущего сеанса.


    \[[Набор API-Интерфейсов: почтовый ящик 1.1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    <table><tr><td>[Минимальный уровень разрешений](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadWriteItem</td></tr>


    <tr><td>[Применимый режим Outlook](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Создание сообщения</td></tr>


    <tr><td>Ошибки</td><td>AttachmentSizeExceeded - вложение больше, чем разрешено.</td></tr><tr><td></td><td>FileTypeNotSupported - вложение имеет неподдерживаемое расширение не допускается.</td></tr><tr><td></td><td>NumberOfAttachmentsExceeded - сообщение или встреча содержит слишком много вложений.</td></tr></table>
  name: addFileAttachmentAsync(uri, attachmentName)
  fullName: addFileAttachmentAsync(uri, attachmentName)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'addFileAttachmentAsync(uri: string, attachmentName: string): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: uri
      description: Универсальный код ресурса (URI), представляющий расположение файла, который нужно вложить в сообщение или встречу. Максимальная длина — 2048 символов.
      type:
      - string
    - id: attachmentName
      description: Имя вложения, которое отображается при передаче вложения. Максимальная длина — 255 символов.
      type:
      - string
- uid: Outlook_1_2.Office.MessageCompose.addFileAttachmentAsync_2
  summary: >-
    Добавляет файл в сообщение или встречу в качестве вложения.


    Метод addFileAttachmentAsync передает файл по указанному универсальному коду ресурса (URI) и вкладывает его в элемент в форме создания.


    Идентификатор можно последовательно использовать с методом removeAttachmentAsync, чтобы удалить вложение, добавленное во время текущего сеанса.


    \[[Набор API-Интерфейсов: почтовый ящик 1.1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    <table><tr><td>[Минимальный уровень разрешений](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadWriteItem</td></tr>


    <tr><td>[Применимый режим Outlook](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Создание сообщения</td></tr>


    <tr><td>Ошибки</td><td>AttachmentSizeExceeded - вложение больше, чем разрешено.</td></tr><tr><td></td><td>FileTypeNotSupported - вложение имеет неподдерживаемое расширение не допускается.</td></tr><tr><td></td><td>NumberOfAttachmentsExceeded - сообщение или встреча содержит слишком много вложений.</td></tr></table>
  name: addFileAttachmentAsync(uri, attachmentName, options)
  fullName: addFileAttachmentAsync(uri, attachmentName, options)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'addFileAttachmentAsync(uri: string, attachmentName: string, options: Office.AsyncContextOptions): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: uri
      description: Универсальный код ресурса (URI), представляющий расположение файла, который нужно вложить в сообщение или встречу. Максимальная длина — 2048 символов.
      type:
      - string
    - id: attachmentName
      description: Имя вложения, которое отображается при передаче вложения. Максимальная длина — 255 символов.
      type:
      - string
    - id: options
      description: 'Необязательное свойство. Объектный литерал, содержащий одно или несколько из указанных ниже свойств. asyncContext: разработчики могут предоставлять любого объекта, их необходимо получить доступ в метод обратного вызова. isInline: Если значение true, указывает, что вложения будут показаны встроенные в теле сообщения и не должно отображаться в списке вложения.'
      type:
      - Office.AsyncContextOptions
- uid: Outlook_1_2.Office.MessageCompose.addFileAttachmentAsync_3
  summary: >-
    Добавляет файл в сообщение или встречу в качестве вложения.


    Метод addFileAttachmentAsync передает файл по указанному универсальному коду ресурса (URI) и вкладывает его в элемент в форме создания.


    Идентификатор можно последовательно использовать с методом removeAttachmentAsync, чтобы удалить вложение, добавленное во время текущего сеанса.


    \[[Набор API-Интерфейсов: почтовый ящик 1.1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    <table><tr><td>[Минимальный уровень разрешений](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadWriteItem</td></tr>


    <tr><td>[Применимый режим Outlook](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Создание сообщения</td></tr>


    <tr><td>Ошибки</td><td>AttachmentSizeExceeded - вложение больше, чем разрешено.</td></tr><tr><td></td><td>FileTypeNotSupported - вложение имеет неподдерживаемое расширение не допускается.</td></tr><tr><td></td><td>NumberOfAttachmentsExceeded - сообщение или встреча содержит слишком много вложений.</td></tr></table>
  name: addFileAttachmentAsync(uri, attachmentName, callback)
  fullName: addFileAttachmentAsync(uri, attachmentName, callback)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'addFileAttachmentAsync(uri: string, attachmentName: string, callback: (result: Office.AsyncResult<string>) => void): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: uri
      description: Универсальный код ресурса (URI), представляющий расположение файла, который нужно вложить в сообщение или встречу. Максимальная длина — 2048 символов.
      type:
      - string
    - id: attachmentName
      description: Имя вложения, которое отображается при передаче вложения. Максимальная длина — 255 символов.
      type:
      - string
    - id: callback
      description: После завершения работы метода, функции, переданной в параметре обратного вызова вызывается с один параметр типа Office.AsyncResult. В случае успешного выполнения идентификатор вложения будут предоставляться в свойство asyncResult.value. Если передать вложение не удается, объект asyncResult будет содержать объект Error с описанием ошибки.
      type:
      - '(result: Office.AsyncResult<string>) => void'
- uid: Outlook_1_2.Office.MessageCompose.addItemAttachmentAsync
  summary: >-
    Добавляет к сообщению элемент Exchange, например сообщение, в виде вложения.


    Метод addItemAttachmentAsync вкладывает элемент с указанным идентификатором Exchange в элемент в форме создания. Если указан метод обратного вызова, этот метод вызывается с помощью параметра asyncResult, который содержит идентификатор вложения или код, указывающий на ошибки, которые произошли при вложении элемента. При необходимости можно использовать параметр options для передачи сведений о состоянии в метод обратного вызова.


    Идентификатор можно последовательно использовать с методом removeAttachmentAsync, чтобы удалить вложение, добавленное во время текущего сеанса.


    Если ваша надстройка Office выполняется в Outlook Web App, метод addItemAttachmentAsync обеспечивает вложение элементов в элементы, отличные от редактируемого. Однако это действие не рекомендуется выполнять, поскольку оно не поддерживается.


    \[[Набор API-Интерфейсов: почтовый ящик 1.1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    <table><tr><td>[Минимальный уровень разрешений](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadWriteItem</td></tr>


    <tr><td>[Применимый режим Outlook](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Создание сообщения</td></tr>


    <tr><td>Ошибки</td><td>NumberOfAttachmentsExceeded - сообщение или встреча содержит слишком много вложений.</td></tr></table>


    В дополнение к подписи этот метод также имеет следующие цифровые подписи.


    `addItemAttachmentAsync(itemId: any, attachmentName: string): void;`


    `addItemAttachmentAsync(itemId: any, attachmentName: string, options: Office.AsyncContextOptions): void;`


    `addItemAttachmentAsync(itemId: any, attachmentName: string, callback: (result: Office.AsyncResult<string>) => void): void;`

    #### <a name="examples"></a>Примеры


    ```javascript

    // The following example adds an existing Outlook item as an attachment

    // with the name `My Attachment`.

    function callback(result) {
        if (result.error) {
            console.log(result.error);
        } else {
            console.log("Attachment added");
        }
    }


    function addAttachment() {
        // EWS ID of item to attach
        // (Shortened for readability)
        var itemId = "AAMkADI1...AAA=";

        // The values in asyncContext can be accessed in the callback
        var options = { 'asyncContext': { var1: 1, var2: 2 } };

        Office.context.mailbox.item.addItemAttachmentAsync(itemId, "My Attachment", options, callback);
    }

    ```
  name: addItemAttachmentAsync(itemId, attachmentName, options, callback)
  fullName: addItemAttachmentAsync(itemId, attachmentName, options, callback)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'addItemAttachmentAsync(itemId: any, attachmentName: string, options?: Office.AsyncContextOptions, callback?: (result: Office.AsyncResult<string>) => void): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: itemId
      description: Идентификатор Exchange для вкладываемого элемента. Максимальная длина — 100 символов.
      type:
      - any
    - id: attachmentName
      description: Имя вложения, которое отображается при передаче вложения. Максимальная длина — 255 символов.
      type:
      - string
    - id: options
      description: 'Объектный литерал, содержащий одно или несколько из указанных ниже свойств. asyncContext: разработчики могут предоставлять любого объекта, их необходимо получить доступ в метод обратного вызова.'
      type:
      - Office.AsyncContextOptions
    - id: callback
      description: После завершения работы метода, функции, переданной в параметре обратного вызова вызывается с один параметр типа Office.AsyncResult. В случае успешного выполнения идентификатор вложения будут предоставляться в свойство asyncResult.value. Если не удается добавить вложение, объект asyncResult будет содержать объект Error с описанием ошибки.
      type:
      - '(result: Office.AsyncResult<string>) => void'
- uid: Outlook_1_2.Office.MessageCompose.addItemAttachmentAsync_1
  summary: >-
    Добавляет к сообщению элемент Exchange, например сообщение, в виде вложения.


    Метод addItemAttachmentAsync вкладывает элемент с указанным идентификатором Exchange в элемент в форме создания. Если указан метод обратного вызова, этот метод вызывается с помощью параметра asyncResult, который содержит идентификатор вложения или код, указывающий на ошибки, которые произошли при вложении элемента. При необходимости можно использовать параметр options для передачи сведений о состоянии в метод обратного вызова.


    Идентификатор можно последовательно использовать с методом removeAttachmentAsync, чтобы удалить вложение, добавленное во время текущего сеанса.


    Если ваша надстройка Office выполняется в Outlook Web App, метод addItemAttachmentAsync обеспечивает вложение элементов в элементы, отличные от редактируемого. Однако это действие не рекомендуется выполнять, поскольку оно не поддерживается.


    \[[Набор API-Интерфейсов: почтовый ящик 1.1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    <table><tr><td>[Минимальный уровень разрешений](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadWriteItem</td></tr>


    <tr><td>[Применимый режим Outlook](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Создание сообщения</td></tr>


    <tr><td>Ошибки</td><td>NumberOfAttachmentsExceeded - сообщение или встреча содержит слишком много вложений.</td></tr></table>
  name: addItemAttachmentAsync(itemId, attachmentName)
  fullName: addItemAttachmentAsync(itemId, attachmentName)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'addItemAttachmentAsync(itemId: any, attachmentName: string): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: itemId
      description: Идентификатор Exchange для вкладываемого элемента. Максимальная длина — 100 символов.
      type:
      - any
    - id: attachmentName
      description: Имя вложения, которое отображается при передаче вложения. Максимальная длина — 255 символов.
      type:
      - string
- uid: Outlook_1_2.Office.MessageCompose.addItemAttachmentAsync_2
  summary: >-
    Добавляет к сообщению элемент Exchange, например сообщение, в виде вложения.


    Метод addItemAttachmentAsync вкладывает элемент с указанным идентификатором Exchange в элемент в форме создания. Если указан метод обратного вызова, этот метод вызывается с помощью параметра asyncResult, который содержит идентификатор вложения или код, указывающий на ошибки, которые произошли при вложении элемента. При необходимости можно использовать параметр options для передачи сведений о состоянии в метод обратного вызова.


    Идентификатор можно последовательно использовать с методом removeAttachmentAsync, чтобы удалить вложение, добавленное во время текущего сеанса.


    Если ваша надстройка Office выполняется в Outlook Web App, метод addItemAttachmentAsync обеспечивает вложение элементов в элементы, отличные от редактируемого. Однако это действие не рекомендуется выполнять, поскольку оно не поддерживается.


    \[[Набор API-Интерфейсов: почтовый ящик 1.1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    <table><tr><td>[Минимальный уровень разрешений](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadWriteItem</td></tr>


    <tr><td>[Применимый режим Outlook](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Создание сообщения</td></tr>


    <tr><td>Ошибки</td><td>NumberOfAttachmentsExceeded - сообщение или встреча содержит слишком много вложений.</td></tr></table>
  name: addItemAttachmentAsync(itemId, attachmentName, options)
  fullName: addItemAttachmentAsync(itemId, attachmentName, options)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'addItemAttachmentAsync(itemId: any, attachmentName: string, options: Office.AsyncContextOptions): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: itemId
      description: Идентификатор Exchange для вкладываемого элемента. Максимальная длина — 100 символов.
      type:
      - any
    - id: attachmentName
      description: Имя вложения, которое отображается при передаче вложения. Максимальная длина — 255 символов.
      type:
      - string
    - id: options
      description: 'Объектный литерал, содержащий одно или несколько из указанных ниже свойств. asyncContext: разработчики могут предоставлять любого объекта, их необходимо получить доступ в метод обратного вызова.'
      type:
      - Office.AsyncContextOptions
- uid: Outlook_1_2.Office.MessageCompose.addItemAttachmentAsync_3
  summary: >-
    Добавляет к сообщению элемент Exchange, например сообщение, в виде вложения.


    Метод addItemAttachmentAsync вкладывает элемент с указанным идентификатором Exchange в элемент в форме создания. Если указан метод обратного вызова, этот метод вызывается с помощью параметра asyncResult, который содержит идентификатор вложения или код, указывающий на ошибки, которые произошли при вложении элемента. При необходимости можно использовать параметр options для передачи сведений о состоянии в метод обратного вызова.


    Идентификатор можно последовательно использовать с методом removeAttachmentAsync, чтобы удалить вложение, добавленное во время текущего сеанса.


    Если ваша надстройка Office выполняется в Outlook Web App, метод addItemAttachmentAsync обеспечивает вложение элементов в элементы, отличные от редактируемого. Однако это действие не рекомендуется выполнять, поскольку оно не поддерживается.


    \[[Набор API-Интерфейсов: почтовый ящик 1.1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    <table><tr><td>[Минимальный уровень разрешений](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadWriteItem</td></tr>


    <tr><td>[Применимый режим Outlook](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Создание сообщения</td></tr>


    <tr><td>Ошибки</td><td>NumberOfAttachmentsExceeded - сообщение или встреча содержит слишком много вложений.</td></tr></table>
  name: addItemAttachmentAsync(itemId, attachmentName, callback)
  fullName: addItemAttachmentAsync(itemId, attachmentName, callback)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'addItemAttachmentAsync(itemId: any, attachmentName: string, callback: (result: Office.AsyncResult<string>) => void): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: itemId
      description: Идентификатор Exchange для вкладываемого элемента. Максимальная длина — 100 символов.
      type:
      - any
    - id: attachmentName
      description: Имя вложения, которое отображается при передаче вложения. Максимальная длина — 255 символов.
      type:
      - string
    - id: callback
      description: После завершения работы метода, функции, переданной в параметре обратного вызова вызывается с один параметр типа Office.AsyncResult. В случае успешного выполнения идентификатор вложения будут предоставляться в свойство asyncResult.value. Если не удается добавить вложение, объект asyncResult будет содержать объект Error с описанием ошибки.
      type:
      - '(result: Office.AsyncResult<string>) => void'
- uid: Outlook_1_2.Office.MessageCompose.getSelectedDataAsync
  summary: >-
    Асинхронно возвращает данные, выбранные в теме или тексте сообщения.


    Если выделенный фрагмент отсутствует, но курсор находится в тексте или теме, метод возвращает значение NULL для выбранных данных. Если выбраны не текст и не тема, метод возвращает ошибку InvalidSelection.


    Чтобы получить доступ к выбранным данным из метода обратного вызова, вызовите asyncResult.value.data. Для доступа к исходному свойству, на основе которого созданы выбранные данные, вызовите параметр asyncResult.value.sourceProperty, который может иметь значение body или subject.


    \[[Набор API-Интерфейсов: почтовый ящик 1.2](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    <table><tr><td>[Минимальный уровень разрешений](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadWriteItem</td></tr>


    <tr><td>[Применимый режим Outlook](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Создание сообщения</td></tr></table>
  name: getSelectedDataAsync(coercionType, callback)
  fullName: getSelectedDataAsync(coercionType, callback)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getSelectedDataAsync(coercionType: Office.CoercionType, callback: (result: Office.AsyncResult<any>) => void): void;'
    return:
      type:
      - void
      description: Выбранные данные в виде строки с форматом, определенным в параметре coercionType.
    parameters:
    - id: coercionType
      description: Запрашивает формат для данных. Если текст, метод возвращает обычный текст как строку, удалив весь HTML-код теги этот параметр указан. Если HTML-код, метод возвращает выделенный текст, будет ли это обычный текст или HTML.
      type:
      - Office.CoercionType
    - id: callback
      description: После завершения работы метода, функции, переданной в параметре обратного вызова вызывается с один параметр типа Office.AsyncResult.
      type:
      - '(result: Office.AsyncResult<any>) => void'
- uid: Outlook_1_2.Office.MessageCompose.getSelectedDataAsync_1
  summary: >-
    Асинхронно возвращает данные, выбранные в теме или тексте сообщения.


    Если выделенный фрагмент отсутствует, но курсор находится в тексте или теме, метод возвращает значение NULL для выбранных данных. Если выбраны не текст и не тема, метод возвращает ошибку InvalidSelection.


    Чтобы получить доступ к выбранным данным из метода обратного вызова, вызовите asyncResult.value.data. Для доступа к исходному свойству, на основе которого созданы выбранные данные, вызовите параметр asyncResult.value.sourceProperty, который может иметь значение body или subject.


    \[[Набор API-Интерфейсов: почтовый ящик 1.2](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    <table><tr><td>[Минимальный уровень разрешений](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadWriteItem</td></tr>


    <tr><td>[Применимый режим Outlook](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Создание сообщения</td></tr></table>

    ####Примеры


    ```javascript

    // getting selected data

    Office.initialize = function () {
        Office.context.mailbox.item.getSelectedDataAsync(Office.CoercionType.Text, {}, getCallback);
    };


    function getCallback(asyncResult) {
        var text = asyncResult.value.data;
        var prop = asyncResult.value.sourceProperty;

        Office.context.mailbox.item.setSelectedDataAsync('Setting ' + prop + ': ' + text, {}, setCallback);
    }


    function setCallback(asyncResult) {
        // check for errors
    }

    ```
  name: getSelectedDataAsync(coercionType, options, callback)
  fullName: getSelectedDataAsync(coercionType, options, callback)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getSelectedDataAsync(coercionType: Office.CoercionType, options: Office.AsyncContextOptions, callback: (result: Office.AsyncResult<any>) => void): void;'
    return:
      type:
      - void
      description: Выбранные данные в виде строки с форматом, определенным в параметре coercionType.
    parameters:
    - id: coercionType
      description: Запрашивает формат для данных. Если текст, метод возвращает обычный текст как строку, удалив весь HTML-код теги этот параметр указан. Если HTML-код, метод возвращает выделенный текст, будет ли это обычный текст или HTML.
      type:
      - Office.CoercionType
    - id: options
      description: 'Объектный литерал, содержащий одно или несколько из указанных ниже свойств. asyncContext: разработчики могут предоставлять любого объекта, их необходимо получить доступ в метод обратного вызова.'
      type:
      - Office.AsyncContextOptions
    - id: callback
      description: После завершения работы метода, функции, переданной в параметре обратного вызова вызывается с один параметр типа Office.AsyncResult.
      type:
      - '(result: Office.AsyncResult<any>) => void'
- uid: Outlook_1_2.Office.MessageCompose.loadCustomPropertiesAsync
  summary: >-
    Асинхронно загружает настраиваемые свойства для надстройки для выбранного элемента.


    Настраиваемые свойства сохраняются в виде пар "ключ-значение" для каждого приложения и каждого элемента. Этот метод возвращает объект CustomProperties при обратном вызове, который предоставляет методы для доступа к настраиваемым свойствам, характерным для текущего элемента и текущей надстройки. Настраиваемые свойства не шифруются для элемента, поэтому этот способ хранения не является безопасным.


    Настраиваемые свойства предоставляются в виде объекта CustomProperties в свойстве asyncResult.value. Этот объект позволяет получить, задать и удалить настраиваемые свойства из элемента, а также сохранить изменения, внесенные в настраиваемое свойство, на сервере.


    \[[Набор API-Интерфейсов: почтовый ящик 1.0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    <table><tr><td>[Минимальный уровень разрешений](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadItem</td></tr>


    <tr><td>[Применимый режим Outlook](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Создание сообщения</td></tr></table>
  name: loadCustomPropertiesAsync(callback, userContext)
  fullName: loadCustomPropertiesAsync(callback, userContext)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'loadCustomPropertiesAsync(callback: (result: Office.AsyncResult<CustomProperties>) => void, userContext?: any): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: callback
      description: После завершения работы метода, функции, переданной в параметре обратного вызова вызывается с один параметр типа Office.AsyncResult.
      type:
      - '(result: Office.AsyncResult<CustomProperties>) => void'
    - id: userContext
      description: Необязательное свойство. Разработчики могут указать любой объект, к которому необходимо получить доступ, в функции обратного вызова. Этот объект можно получать свойство asyncResult.asyncContext в функции обратного вызова.
      type:
      - any
- uid: Outlook_1_2.Office.MessageCompose.removeAttachmentAsync
  summary: >-
    Удаляет вложение из сообщения или встречи.


    Метод removeAttachmentAsync из элемента удаляется вложение с указанным идентификатором. Идентификатор вложения рекомендуется использовать для удаления вложения, только если оно добавлено тем же почтовым приложением в ходе текущего сеанса. В Outlook Web App и Outlook Web App для устройств идентификатор вложения действителен только в рамках одного сеанса. Сеанс завершается, когда пользователь закрывает приложение или начинает создавать элемент во встроенной форме, а затем переходит из формы в отдельное окно.


    \[[Набор API-Интерфейсов: почтовый ящик 1.1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    <table><tr><td>[Минимальный уровень разрешений](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadWriteItem</td></tr>


    <tr><td>[Применимый режим Outlook](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Создание сообщения</td></tr>


    <tr><td>Ошибки</td><td>InvalidAttachmentId - идентификатор вложения не существует.</td></tr></table>


    В дополнение к подписи этот метод также содержит следующие подписи:


    `removeAttachmentAsync(attachmentId: string): void;`


    `removeAttachmentAsync(attachmentId: string, options: Office.AsyncContextOptions): void;`


    `removeAttachmentAsync(attachmentId: string, callback: (result: Office.AsyncResult<void>) => void): void;`

    #### <a name="examples"></a>Примеры


    ```javascript

    // The following code removes an attachment with an identifier of '0'.

    Office.context.mailbox.item.removeAttachmentAsync(
        '0',
        { asyncContext : null },
        function (asyncResult)
        {
            console.log(asyncResult.status);
        }
    );

    ```
  name: removeAttachmentAsync(attachmentId, options, callback)
  fullName: removeAttachmentAsync(attachmentId, options, callback)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'removeAttachmentAsync(attachmentId: string, options?: Office.AsyncContextOptions, callback?: (result: Office.AsyncResult<void>) => void): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: attachmentId
      description: Идентификатор удаляемого вложения.
      type:
      - string
    - id: options
      description: 'Необязательное свойство. Объектный литерал, содержащий одно или несколько из указанных ниже свойств. asyncContext: разработчики могут предоставлять любого объекта, их необходимо получить доступ в метод обратного вызова.'
      type:
      - Office.AsyncContextOptions
    - id: callback
      description: Необязательное свойство. После завершения работы метода, функции, переданной в параметре обратного вызова вызывается с один параметр типа Office.AsyncResult. Если не удается удалить вложение, свойство asyncResult.error будет содержать код ошибки с причину сбоя.
      type:
      - '(result: Office.AsyncResult<void>) => void'
- uid: Outlook_1_2.Office.MessageCompose.removeAttachmentAsync_1
  summary: >-
    Удаляет вложение из сообщения или встречи.


    Метод removeAttachmentAsync из элемента удаляется вложение с указанным идентификатором. Идентификатор вложения рекомендуется использовать для удаления вложения, только если оно добавлено тем же почтовым приложением в ходе текущего сеанса. В Outlook Web App и Outlook Web App для устройств идентификатор вложения действителен только в рамках одного сеанса. Сеанс завершается, когда пользователь закрывает приложение или начинает создавать элемент во встроенной форме, а затем переходит из формы в отдельное окно.


    \[[Набор API-Интерфейсов: почтовый ящик 1.1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    <table><tr><td>[Минимальный уровень разрешений](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadWriteItem</td></tr>


    <tr><td>[Применимый режим Outlook](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Создание сообщения</td></tr>


    <tr><td>Ошибки</td><td>InvalidAttachmentId - идентификатор вложения не существует.</td></tr></table>
  name: removeAttachmentAsync(attachmentId)
  fullName: removeAttachmentAsync(attachmentId)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'removeAttachmentAsync(attachmentId: string): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: attachmentId
      description: Идентификатор удаляемого вложения.
      type:
      - string
- uid: Outlook_1_2.Office.MessageCompose.removeAttachmentAsync_2
  summary: >-
    Удаляет вложение из сообщения или встречи.


    Метод removeAttachmentAsync из элемента удаляется вложение с указанным идентификатором. Идентификатор вложения рекомендуется использовать для удаления вложения, только если оно добавлено тем же почтовым приложением в ходе текущего сеанса. В Outlook Web App и Outlook Web App для устройств идентификатор вложения действителен только в рамках одного сеанса. Сеанс завершается, когда пользователь закрывает приложение или начинает создавать элемент во встроенной форме, а затем переходит из формы в отдельное окно.


    \[[Набор API-Интерфейсов: почтовый ящик 1.1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    <table><tr><td>[Минимальный уровень разрешений](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadWriteItem</td></tr>


    <tr><td>[Применимый режим Outlook](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Создание сообщения</td></tr>


    <tr><td>Ошибки</td><td>InvalidAttachmentId - идентификатор вложения не существует.</td></tr></table>
  name: removeAttachmentAsync(attachmentId, options)
  fullName: removeAttachmentAsync(attachmentId, options)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'removeAttachmentAsync(attachmentId: string, options: Office.AsyncContextOptions): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: attachmentId
      description: Идентификатор удаляемого вложения.
      type:
      - string
    - id: options
      description: 'Необязательное свойство. Объектный литерал, содержащий одно или несколько из указанных ниже свойств. asyncContext: разработчики могут предоставлять любого объекта, их необходимо получить доступ в метод обратного вызова.'
      type:
      - Office.AsyncContextOptions
- uid: Outlook_1_2.Office.MessageCompose.removeAttachmentAsync_3
  summary: >-
    Удаляет вложение из сообщения или встречи.


    Метод removeAttachmentAsync из элемента удаляется вложение с указанным идентификатором. Идентификатор вложения рекомендуется использовать для удаления вложения, только если оно добавлено тем же почтовым приложением в ходе текущего сеанса. В Outlook Web App и Outlook Web App для устройств идентификатор вложения действителен только в рамках одного сеанса. Сеанс завершается, когда пользователь закрывает приложение или начинает создавать элемент во встроенной форме, а затем переходит из формы в отдельное окно.


    \[[Набор API-Интерфейсов: почтовый ящик 1.1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    <table><tr><td>[Минимальный уровень разрешений](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadWriteItem</td></tr>


    <tr><td>[Применимый режим Outlook](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Создание сообщения</td></tr>


    <tr><td>Ошибки</td><td>InvalidAttachmentId - идентификатор вложения не существует.</td></tr></table>
  name: removeAttachmentAsync(attachmentId, callback)
  fullName: removeAttachmentAsync(attachmentId, callback)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'removeAttachmentAsync(attachmentId: string, callback: (result: Office.AsyncResult<void>) => void): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: attachmentId
      description: Идентификатор удаляемого вложения.
      type:
      - string
    - id: callback
      description: Необязательное свойство. После завершения работы метода, функции, переданной в параметре обратного вызова вызывается с один параметр типа Office.AsyncResult. Если не удается удалить вложение, свойство asyncResult.error будет содержать код ошибки с причину сбоя.
      type:
      - '(result: Office.AsyncResult<void>) => void'
- uid: Outlook_1_2.Office.MessageCompose.setSelectedDataAsync
  summary: >-
    Асинхронно вставляет данные в текст или тему сообщения.


    Метод setSelectedDataAsync Вставляет заданную строку в месте расположения курсора в теме или тексте элемента или, если выделенный текст в редакторе он заменяет выделенный текст. Если курсор не находится в поле Тема или тело, возвращается ошибка. После вставки курсора в конец вставленный контент.


    \[[Набор API-Интерфейсов: почтовый ящик 1.2](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    <table><tr><td>[Минимальный уровень разрешений](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadWriteItem</td></tr>


    <tr><td>[Применимый режим Outlook](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Создание сообщения</td></tr>


    <tr><td>Ошибки</td><td>InvalidAttachmentId - идентификатор вложения не существует.</td></tr></table>


    В дополнение к подписи этот метод также содержит следующие подписи:


    `setSelectedDataAsync(data: string): void;`


    `setSelectedDataAsync(data: string, options: Office.AsyncContextOptions & CoercionTypeOptions): void;`


    `setSelectedDataAsync(data: string, callback: (result: Office.AsyncResult<void>) => void): void;`

    #### <a name="examples"></a>Примеры


    ```javascript

    Office.context.mailbox.item.setSelectedDataAsync("Hello World!");

    ```
  name: setSelectedDataAsync(data, options, callback)
  fullName: setSelectedDataAsync(data, options, callback)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'setSelectedDataAsync(data: string, options?: Office.AsyncContextOptions & CoercionTypeOptions, callback?: (result: Office.AsyncResult<void>) => void): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: data
      description: Вставляемые данные. Объем данных не должен превышать 1 000 000 символов. Если передано больше 1 000 000 символов, возвращается исключение ArgumentOutOfRange.
      type:
      - string
    - id: options
      description: 'Необязательное свойство. Объектный литерал, содержащий одно или несколько из указанных ниже свойств. asyncContext: разработчики могут предоставлять любого объекта, их необходимо получить доступ в метод обратного вызова. coercionType: Если текст, текущий стиль применяется в Outlook Web App и Outlook. Если поле представляет собой редактор HTML, вставляются только текстовые данные, даже если они имеют формат HTML. Если HTML-код и поле поддерживает HTML (не тему), текущий стиль применяется в Outlook Web App и применяется стиль по умолчанию в Outlook. Если это поле является текстовым полем, возвращается ошибка InvalidDataFormat. Если параметр coercionType не задан, результат зависит от поля. Если поле содержит HTML, используется HTML. Если поле текстовое, используется обычный текст.'
      type:
      - Office.AsyncContextOptions & CoercionTypeOptions
    - id: callback
      description: Необязательное свойство. После завершения работы метода, функции, переданной в параметре обратного вызова вызывается с один параметр типа Office.AsyncResult.
      type:
      - '(result: Office.AsyncResult<void>) => void'
- uid: Outlook_1_2.Office.MessageCompose.setSelectedDataAsync_1
  summary: >-
    Асинхронно вставляет данные в текст или тему сообщения.


    Метод setSelectedDataAsync Вставляет заданную строку в месте расположения курсора в теме или тексте элемента или, если выделенный текст в редакторе он заменяет выделенный текст. Если курсор не находится в поле Тема или тело, возвращается ошибка. После вставки курсора в конец вставленный контент.


    \[[Набор API-Интерфейсов: почтовый ящик 1.2](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    <table><tr><td>[Минимальный уровень разрешений](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadWriteItem</td></tr>


    <tr><td>[Применимый режим Outlook](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Создание сообщения</td></tr>


    <tr><td>Ошибки</td><td>InvalidAttachmentId - идентификатор вложения не существует.</td></tr></table>
  name: setSelectedDataAsync(data)
  fullName: setSelectedDataAsync(data)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'setSelectedDataAsync(data: string): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: data
      description: Вставляемые данные. Объем данных не должен превышать 1 000 000 символов. Если передано больше 1 000 000 символов, возвращается исключение ArgumentOutOfRange.
      type:
      - string
- uid: Outlook_1_2.Office.MessageCompose.setSelectedDataAsync_2
  summary: >-
    Асинхронно вставляет данные в текст или тему сообщения.


    Метод setSelectedDataAsync Вставляет заданную строку в месте расположения курсора в теме или тексте элемента или, если выделенный текст в редакторе он заменяет выделенный текст. Если курсор не находится в поле Тема или тело, возвращается ошибка. После вставки курсора в конец вставленный контент.


    \[[Набор API-Интерфейсов: почтовый ящик 1.2](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    <table><tr><td>[Минимальный уровень разрешений](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadWriteItem</td></tr>


    <tr><td>[Применимый режим Outlook](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Создание сообщения</td></tr>


    <tr><td>Ошибки</td><td>InvalidAttachmentId - идентификатор вложения не существует.</td></tr></table>

    ####Примеры


    ```javascript

    Office.context.mailbox.item.setSelectedDataAsync("<b>Hello World!</b>", { coercionType : "html" });

    ```
  name: setSelectedDataAsync(data, options)
  fullName: setSelectedDataAsync(data, options)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'setSelectedDataAsync(data: string, options: Office.AsyncContextOptions & CoercionTypeOptions): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: data
      description: Вставляемые данные. Объем данных не должен превышать 1 000 000 символов. Если передано больше 1 000 000 символов, возвращается исключение ArgumentOutOfRange.
      type:
      - string
    - id: options
      description: 'Необязательное свойство. Объектный литерал, содержащий одно или несколько из указанных ниже свойств. asyncContext: разработчики могут предоставлять любого объекта, их необходимо получить доступ в метод обратного вызова. coercionType: Если текст, текущий стиль применяется в Outlook Web App и Outlook. Если поле представляет собой редактор HTML, вставляются только текстовые данные, даже если они имеют формат HTML. Если HTML-код и поле поддерживает HTML (не тему), текущий стиль применяется в Outlook Web App и применяется стиль по умолчанию в Outlook. Если это поле является текстовым полем, возвращается ошибка InvalidDataFormat. Если параметр coercionType не задан, результат зависит от поля. Если поле содержит HTML, используется HTML. Если поле текстовое, используется обычный текст.'
      type:
      - Office.AsyncContextOptions & CoercionTypeOptions
- uid: Outlook_1_2.Office.MessageCompose.setSelectedDataAsync_3
  summary: >-
    Асинхронно вставляет данные в текст или тему сообщения.


    Метод setSelectedDataAsync Вставляет заданную строку в месте расположения курсора в теме или тексте элемента или, если выделенный текст в редакторе он заменяет выделенный текст. Если курсор не находится в поле Тема или тело, возвращается ошибка. После вставки курсора в конец вставленный контент.


    \[[Набор API-Интерфейсов: почтовый ящик 1.2](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    <table><tr><td>[Минимальный уровень разрешений](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadWriteItem</td></tr>


    <tr><td>[Применимый режим Outlook](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Создание сообщения</td></tr>


    <tr><td>Ошибки</td><td>InvalidAttachmentId - идентификатор вложения не существует.</td></tr></table>
  name: setSelectedDataAsync(data, callback)
  fullName: setSelectedDataAsync(data, callback)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'setSelectedDataAsync(data: string, callback: (result: Office.AsyncResult<void>) => void): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: data
      description: Вставляемые данные. Объем данных не должен превышать 1 000 000 символов. Если передано больше 1 000 000 символов, возвращается исключение ArgumentOutOfRange.
      type:
      - string
    - id: callback
      description: Необязательное свойство. После завершения работы метода, функции, переданной в параметре обратного вызова вызывается с один параметр типа Office.AsyncResult.
      type:
      - '(result: Office.AsyncResult<void>) => void'
- uid: Outlook_1_2.Office.MessageCompose.bcc
  summary: >-
    Получает объект, который предоставляет методы для получения или обновления получателей скрытой копии сообщения.


    \[[Набор API-Интерфейсов: почтовый ящик 1.1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    <table><tr><td>[Минимальный уровень разрешений](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadItem</td></tr>


    <tr><td>[Применимый режим Outlook](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Создание сообщения</td></tr></table>

    ####Примеры


    ```javascript

    Office.context.mailbox.item.bcc.setAsync( ['alice@contoso.com', 'bob@contoso.com'] );

    Office.context.mailbox.item.bcc.addAsync( ['jason@contoso.com'] );

    Office.context.mailbox.item.bcc.getAsync(callback);


    function callback(asyncResult) {
        var arrayOfBccRecipients = asyncResult.value;
    }

    ```
  name: bcc
  fullName: bcc
  langs:
  - typeScript
  type: property
  syntax:
    content: 'bcc: Recipients;'
    return:
      type:
      - Recipients
- uid: Outlook_1_2.Office.MessageCompose.body
  summary: >-
    Получает объект, предоставляющий методы для работы с основным текстом элемента.


    \[[Набор API-Интерфейсов: почтовый ящик 1.1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    <table><tr><td>[Минимальный уровень разрешений](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadItem</td></tr>


    <tr><td>[Применимый режим Outlook](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Создание сообщения</td></tr></table>

    ####Примеры


    ```javascript

    // This example gets the body of the message in plain text.

    Office.context.mailbox.item.body.getAsync(
        "text",
        { asyncContext: "This is passed to the callback" },
        function callback(result) {
            // Do something with the result
        });

    // The following is an example of the result parameter passed to the callback function.

    {
        "value": "TEXT of whole body (including threads below)",
        "status": "succeeded",
        "asyncContext": "This is passed to the callback"
    }

    ```
  name: body
  fullName: body
  langs:
  - typeScript
  type: property
  syntax:
    content: 'body: Body;'
    return:
      type:
      - Body
- uid: Outlook_1_2.Office.MessageCompose.cc
  summary: >-
    Предоставляет доступ к получателям копии сообщения. Тип объекта и уровень доступа зависят от режима текущего элемента.


    Свойство cc возвращает объект [Office.Recipients](xref:Outlook_1_2.Office.Recipients) , который предоставляет методы для получения или обновления получателей в строке копия сообщения.


    \[[Набор API-Интерфейсов: почтовый ящик 1.0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    <table><tr><td>[Минимальный уровень разрешений](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadItem</td></tr>


    <tr><td>[Применимый режим Outlook](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Создание сообщения</td></tr></table>

    ####Примеры


    ```javascript

    Office.context.mailbox.item.cc.setAsync( ['alice@contoso.com', 'bob@contoso.com'] );

    Office.context.mailbox.item.cc.addAsync( ['jason@contoso.com'] );

    Office.context.mailbox.item.cc.getAsync(callback);


    function callback(asyncResult) {
        var arrayOfCcRecipients = asyncResult.value;
    }

    ```
  name: cc
  fullName: cc
  langs:
  - typeScript
  type: property
  syntax:
    content: 'cc: Recipients;'
    return:
      type:
      - Recipients
- uid: Outlook_1_2.Office.MessageCompose.conversationId
  summary: >-
    Получает идентификатор разговора по электронной почте, содержащего конкретное сообщение.


    Вы можете получить целочисленное значение этого свойства, если ваше почтовое приложение активируется в формах просмотра или формах создания ответов. Если пользователь изменит тему ответа, после его отправки идентификатор беседы будет изменен, и полученное ранее значение будет недействительным.


    Это свойство имеет значение NULL для нового элемента в форме создания. Если пользователь задаст тему и сохранит элемент, свойство conversationId вернет значение.


    \[[Набор API-Интерфейсов: почтовый ящик 1.0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    <table><tr><td>[Минимальный уровень разрешений](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadItem</td></tr>


    <tr><td>[Применимый режим Outlook](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Создание сообщения</td></tr></table>

    ####Примеры


    ```javascript

    var conversationId = Office.context.mailbox.item.conversationId;

    console.log("conversationId: " + conversationId);

    ```
  name: conversationId
  fullName: conversationId
  langs:
  - typeScript
  type: property
  syntax:
    content: 'conversationId: string;'
    return:
      type:
      - string
- uid: Outlook_1_2.Office.MessageCompose.itemType
  summary: >-
    Получает тип элемента, который представляет экземпляр.


    Свойство itemType возвращает одно из значений перечисления ItemType, которое указывает, является ли экземпляр объекта item сообщением или собранием.


    \[[Набор API-Интерфейсов: почтовый ящик 1.0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    <table><tr><td>[Минимальный уровень разрешений](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadItem</td></tr>


    <tr><td>[Применимый режим Outlook](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Создание сообщения</td></tr></table>

    ####Примеры


    ```javascript

    if (Office.context.mailbox.item.itemType === Office.MailboxEnums.ItemType.Message) {
        // do something
    } else {
        // do something else
    }

    ```
  name: itemType
  fullName: itemType
  langs:
  - typeScript
  type: property
  syntax:
    content: 'itemType: MailboxEnums.ItemType;'
    return:
      type:
      - MailboxEnums.ItemType
- uid: Outlook_1_2.Office.MessageCompose.subject
  summary: >-
    Получает или задает описание, которое отображается в поле темы элемента.


    Свойство subject получает или задает всю тему элемента для отправки с почтового сервера.


    Свойство subject возвращает объект Subject, который предоставляет методы для получения и задания темы.


    \[[Набор API-Интерфейсов: почтовый ящик 1.0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    <table><tr><td>[Минимальный уровень разрешений](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadItem</td></tr>


    <tr><td>[Применимый режим Outlook](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Создание сообщения</td></tr></table>

    ####Примеры


    ```javascript

    Office.context.mailbox.item.subject.getAsync(callback);


    function callback(asyncResult) {
        var subject = asyncResult.value;
    }

    ```
  name: subject
  fullName: subject
  langs:
  - typeScript
  type: property
  syntax:
    content: 'subject: Subject;'
    return:
      type:
      - Subject
- uid: Outlook_1_2.Office.MessageCompose.to
  summary: >-
    Предоставляет доступ к получателям, указанным в строке Кому сообщения. Тип объекта и уровень доступа зависят от режима текущего элемента.


    Свойство возвращает объект Recipients, который предоставляет методы для получения или обновления получателей в строке сообщения.


    \[[Набор API-Интерфейсов: почтовый ящик 1.0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    <table><tr><td>[Минимальный уровень разрешений](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadItem</td></tr>


    <tr><td>[Применимый режим Outlook](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Создание сообщения</td></tr></table>

    ####Примеры


    ```javascript

    Office.context.mailbox.item.to.setAsync( ['alice@contoso.com', 'bob@contoso.com'] );

    Office.context.mailbox.item.to.addAsync( ['jason@contoso.com'] );

    Office.context.mailbox.item.to.getAsync(callback);


    function callback(asyncResult) {
        var arrayOfToRecipients = asyncResult.value;
    }

    ```
  name: to
  fullName: to
  langs:
  - typeScript
  type: property
  syntax:
    content: 'to: Recipients;'
    return:
      type:
      - Recipients
