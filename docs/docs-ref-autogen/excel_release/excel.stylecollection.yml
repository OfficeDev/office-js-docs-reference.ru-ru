### YamlMime:UniversalReference
items:
  - uid: excel_release.Excel.StyleCollection
    summary: |-
      Представляет коллекцию всех стилей.

      \[[Набор API: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: Excel.StyleCollection
    fullName: Excel.StyleCollection
    langs:
      - typeScript
    type: class
    extends:
      - office.OfficeExtension.ClientObject
    package: excel_release
    children:
      - excel_release.Excel.StyleCollection.add
      - excel_release.Excel.StyleCollection.context
      - excel_release.Excel.StyleCollection.getCount
      - excel_release.Excel.StyleCollection.getItem
      - excel_release.Excel.StyleCollection.getItemAt
      - excel_release.Excel.StyleCollection.items
      - excel_release.Excel.StyleCollection.load
      - excel_release.Excel.StyleCollection.load_1
      - excel_release.Excel.StyleCollection.load_2
      - excel_release.Excel.StyleCollection.toJSON
  - uid: excel_release.Excel.StyleCollection.add
    summary: |-
      Добавляет новый стиль в коллекцию.

      \[[Набор API: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: add(name)
    fullName: add(name)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'add(name: string): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a>Примеры

          ```typescript
          await Excel.run(async (context) => {
              let styles = context.workbook.styles;

              // Add a new style to the style collection.
              // Styles is in the Home tab ribbon.
              styles.add("Diagonal Orientation Style");
                    
              let newStyle = styles.getItem("Diagonal Orientation Style");
              
              // The "Diagonal Orientation Style" properties.
              newStyle.textOrientation = 38;
              newStyle.autoIndent = true;
              newStyle.includeProtection = true;
              newStyle.shrinkToFit = true;
              newStyle.locked = false;
              
              await context.sync();

              console.log("Successfully added a new style with diagonal orientation to the Home tab ribbon.");
          });
          ```
      parameters:
        - id: name
          description: Имя добавляемого стиля.
          type:
            - string
  - uid: excel_release.Excel.StyleCollection.context
    summary: 'Контекст запроса, связанный с объектом. Это подсоединяет процесс надстройки к процессу ведущего приложения Office.'
    name: context
    fullName: context
    langs:
      - typeScript
    type: property
    syntax:
      content: 'context: RequestContext;'
      return:
        type:
          - RequestContext
  - uid: excel_release.Excel.StyleCollection.getCount
    summary: |-
      Получает количество стилей в коллекции.

      \[[Набор API: ExcelApi 1,9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: getCount()
    fullName: getCount()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getCount(): OfficeExtension.ClientResult<number>;'
      return:
        type:
          - OfficeExtension.ClientResult<number>
        description: ''
  - uid: excel_release.Excel.StyleCollection.getItem
    summary: |-
      Получает стиль по имени.

      \[[Набор API: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: getItem(name)
    fullName: getItem(name)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getItem(name: string): Excel.Style;'
      return:
        type:
          - excel.Excel.Style
        description: |-


          #### <a name="examples"></a>Примеры

          ```typescript
          await Excel.run(async (context) => {
              let styles = context.workbook.styles;

              // Add a new style to the style collection.
              // Styles is in the Home tab ribbon.
              styles.add("Diagonal Orientation Style");
                    
              let newStyle = styles.getItem("Diagonal Orientation Style");
              
              // The "Diagonal Orientation Style" properties.
              newStyle.textOrientation = 38;
              newStyle.autoIndent = true;
              newStyle.includeProtection = true;
              newStyle.shrinkToFit = true;
              newStyle.locked = false;
              
              await context.sync();

              console.log("Successfully added a new style with diagonal orientation to the Home tab ribbon.");
          });
          ```
      parameters:
        - id: name
          description: Имя извлекаемого стиля.
          type:
            - string
  - uid: excel_release.Excel.StyleCollection.getItemAt
    summary: |-
      Получает стиль на основе его позиции в коллекции.

      \[[Набор API: ExcelApi 1,9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: getItemAt(index)
    fullName: getItemAt(index)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getItemAt(index: number): Excel.Style;'
      return:
        type:
          - excel.Excel.Style
        description: ''
      parameters:
        - id: index
          description: 'Значение индекса объекта Style, который требуется получить. Используется нулевой индекс.'
          type:
            - number
  - uid: excel_release.Excel.StyleCollection.items
    summary: Получает загруженные дочерние элементы в этой коллекции.
    name: items
    fullName: items
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly items: Excel.Style[];'
      return:
        type:
          - 'Excel.Style[]'
  - uid: excel_release.Excel.StyleCollection.load
    summary: Добавляет в очередь команду для загрузки указанных свойств объекта. Перед чтением свойств необходимо вызвать метод context.sync().
    remarks: |-
      В дополнение к этой подписи этот метод имеет следующие подписи:

      `load(option?: string | string[]): Excel.StyleCollection`-WHERE — это строка с разделителями-запятыми или массив строк, указывающий свойства для загрузки.

      `load(option?: { select?: string; expand?: string; }): Excel.StyleCollection`-WHERE. Select — это строка с разделителями-запятыми, указывающая свойства для загрузки и параметры. Expand — это строка с разделителями-запятыми, указывающая свойства навигации для загрузки.

      `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.StyleCollection`— Доступно только для типов коллекций. Он аналогичен предыдущей подписи. Option. Top указывает максимальное количество элементов коллекции, которые можно включить в результат. Option. skip указывает количество элементов, которые будут пропущены и не включены в результат. Если указан параметр Option. Top, результирующий набор начнется после пропуска указанного числа элементов.
    name: load(option)
    fullName: load(option)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(option?: Excel.Interfaces.StyleCollectionLoadOptions & Excel.Interfaces.CollectionLoadOptions): Excel.StyleCollection;'
      return:
        type:
          - excel.Excel.StyleCollection
        description: ''
      parameters:
        - id: option
          description: ''
          type:
            - Excel.Interfaces.StyleCollectionLoadOptions & Excel.Interfaces.CollectionLoadOptions
  - uid: excel_release.Excel.StyleCollection.load_1
    summary: Добавляет в очередь команду для загрузки указанных свойств объекта. Перед чтением свойств `context.sync()` необходимо вызвать метод.
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): Excel.StyleCollection;'
      return:
        type:
          - excel.Excel.StyleCollection
        description: ''
      parameters:
        - id: propertyNames
          description: 'Строка, разделенная запятыми, или массив строк, указывающий свойства для загрузки.'
          type:
            - 'string | string[]'
  - uid: excel_release.Excel.StyleCollection.load_2
    name: load(option)
    fullName: load(option)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(option?: OfficeExtension.LoadOption): Excel.StyleCollection;'
      return:
        type:
          - excel.Excel.StyleCollection
        description: ''
      parameters:
        - id: option
          description: ''
          type:
            - office.OfficeExtension.LoadOption
  - uid: excel_release.Excel.StyleCollection.toJSON
    summary: 'Переопределяет метод `toJSON()` JavaScript для предоставления более удобного вывода при передаче объекта API`JSON.stringify()`<!-- -->. (`JSON.stringify`<!-- -->, в свою очередь, вызывает `toJSON` метод объекта, который передается ему.) В то время как `Excel.StyleCollection` исходный объект является объектом API, `toJSON` метод возвращает простой объект JavaScript (тип`Excel.Interfaces.StyleCollectionData`<!-- -->), содержащий массив "Items" с неполноми копиями загруженных свойств из элементов коллекции.'
    name: toJSON()
    fullName: toJSON()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON(): Excel.Interfaces.StyleCollectionData;'
      return:
        type:
          - excel.Excel.Interfaces.StyleCollectionData
        description: ''