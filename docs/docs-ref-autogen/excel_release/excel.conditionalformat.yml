### YamlMime:UniversalReference
ms.openlocfilehash: 49b5b136463b4b8790dac6784f133005d0a73fea
ms.sourcegitcommit: e9bfba6ec767e9d34fd1cf7b38c30f689617900a
ms.translationtype: MT
ms.contentlocale: ru-RU
ms.lasthandoff: 02/20/2019
ms.locfileid: "30105428"
items:
- uid: excel_release.Excel.ConditionalFormat
  summary: >-
    <span data-ttu-id="8af0d-101">Объект, содержащий диапазон условного форматирования, формат, правило и другие свойства.</span><span class="sxs-lookup"><span data-stu-id="8af0d-101">An object encapsulating a conditional format's range, format, rule, and other properties.</span></span>


    <span data-ttu-id="8af0d-102">\[[Набор API: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="8af0d-102">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: Excel.ConditionalFormat
  fullName: Excel.ConditionalFormat
  langs:
  - typeScript
  type: class
  extends:
  - office.OfficeExtension.ClientObject
  package: excel_release
  children:
  - excel_release.Excel.ConditionalFormat.cellValue
  - excel_release.Excel.ConditionalFormat.cellValueOrNullObject
  - excel_release.Excel.ConditionalFormat.colorScale
  - excel_release.Excel.ConditionalFormat.colorScaleOrNullObject
  - excel_release.Excel.ConditionalFormat.context
  - excel_release.Excel.ConditionalFormat.custom
  - excel_release.Excel.ConditionalFormat.customOrNullObject
  - excel_release.Excel.ConditionalFormat.dataBar
  - excel_release.Excel.ConditionalFormat.dataBarOrNullObject
  - excel_release.Excel.ConditionalFormat.delete
  - excel_release.Excel.ConditionalFormat.getRange
  - excel_release.Excel.ConditionalFormat.getRangeOrNullObject
  - excel_release.Excel.ConditionalFormat.iconSet
  - excel_release.Excel.ConditionalFormat.iconSetOrNullObject
  - excel_release.Excel.ConditionalFormat.id
  - excel_release.Excel.ConditionalFormat.load
  - excel_release.Excel.ConditionalFormat.load_1
  - excel_release.Excel.ConditionalFormat.load_2
  - excel_release.Excel.ConditionalFormat.preset
  - excel_release.Excel.ConditionalFormat.presetOrNullObject
  - excel_release.Excel.ConditionalFormat.priority
  - excel_release.Excel.ConditionalFormat.set
  - excel_release.Excel.ConditionalFormat.set_1
  - excel_release.Excel.ConditionalFormat.stopIfTrue
  - excel_release.Excel.ConditionalFormat.textComparison
  - excel_release.Excel.ConditionalFormat.textComparisonOrNullObject
  - excel_release.Excel.ConditionalFormat.toJSON
  - excel_release.Excel.ConditionalFormat.topBottom
  - excel_release.Excel.ConditionalFormat.topBottomOrNullObject
  - excel_release.Excel.ConditionalFormat.type
- uid: excel_release.Excel.ConditionalFormat.cellValue
  summary: >-
    <span data-ttu-id="8af0d-103">Возвращает свойства условного форматирования значения ячейки, если текущим условным форматированием является тип CellValue.</span><span class="sxs-lookup"><span data-stu-id="8af0d-103">Returns the cell value conditional format properties if the current conditional format is a CellValue type.</span></span> <span data-ttu-id="8af0d-104">Например, чтобы отформатировать все ячейки от 5 до 10.</span><span class="sxs-lookup"><span data-stu-id="8af0d-104">For example to format all cells between 5 and 10.</span></span> <span data-ttu-id="8af0d-105">Только для чтения.</span><span class="sxs-lookup"><span data-stu-id="8af0d-105">Read-only.</span></span>


    <span data-ttu-id="8af0d-106">\[[Набор API: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="8af0d-106">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: cellValue
  fullName: cellValue
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly cellValue: Excel.CellValueConditionalFormat;'
    return:
      type:
      - excel.Excel.CellValueConditionalFormat
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"8af0d-107\">Примеры</span><span class=\"sxs-lookup\"><span data-stu-id=\"8af0d-107\">Examples</span></span>\n\n```typescript\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\");\n    const range = sheet.getRange(\"B21:E23\");\n    const conditionalFormat = range.conditionalFormats\n        .add(Excel.ConditionalFormatType.cellValue);\n    conditionalFormat.cellValue.format.font.color = \"red\";\n    conditionalFormat.cellValue.rule = { formula1: \"=0\", operator: \"LessThan\" };\n\n    await context.sync();\n});\n```"
- uid: excel_release.Excel.ConditionalFormat.cellValueOrNullObject
  summary: >-
    <span data-ttu-id="8af0d-108">Возвращает свойства условного форматирования значения ячейки, если текущим условным форматированием является тип CellValue.</span><span class="sxs-lookup"><span data-stu-id="8af0d-108">Returns the cell value conditional format properties if the current conditional format is a CellValue type.</span></span> <span data-ttu-id="8af0d-109">Например, чтобы отформатировать все ячейки от 5 до 10.</span><span class="sxs-lookup"><span data-stu-id="8af0d-109">For example to format all cells between 5 and 10.</span></span> <span data-ttu-id="8af0d-110">Только для чтения.</span><span class="sxs-lookup"><span data-stu-id="8af0d-110">Read-only.</span></span>


    <span data-ttu-id="8af0d-111">\[[Набор API: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="8af0d-111">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: cellValueOrNullObject
  fullName: cellValueOrNullObject
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly cellValueOrNullObject: Excel.CellValueConditionalFormat;'
    return:
      type:
      - excel.Excel.CellValueConditionalFormat
- uid: excel_release.Excel.ConditionalFormat.colorScale
  summary: >-
    <span data-ttu-id="8af0d-p103">Возвращает свойства условного форматирования ColorScale, если используется условное форматирование ColorScale. Только для чтения.</span><span class="sxs-lookup"><span data-stu-id="8af0d-p103">Returns the ColorScale conditional format properties if the current conditional format is an ColorScale type. Read-only.</span></span>


    <span data-ttu-id="8af0d-114">\[[Набор API: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="8af0d-114">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: colorScale
  fullName: colorScale
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly colorScale: Excel.ColorScaleConditionalFormat;'
    return:
      type:
      - excel.Excel.ColorScaleConditionalFormat
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"8af0d-115\">Примеры</span><span class=\"sxs-lookup\"><span data-stu-id=\"8af0d-115\">Examples</span></span>\n\n```typescript\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\");\n    const range = sheet.getRange(\"B2:M5\");\n    const conditionalFormat = range.conditionalFormats\n        .add(Excel.ConditionalFormatType.colorScale);\n    const criteria = {\n        minimum: { formula: null, type: Excel.ConditionalFormatColorCriterionType.lowestValue, color: \"blue\" },\n        midpoint: { formula: \"50\", type: Excel.ConditionalFormatColorCriterionType.percent, color: \"yellow\" },\n        maximum: { formula: null, type: Excel.ConditionalFormatColorCriterionType.highestValue, color: \"red\" }\n    };\n    conditionalFormat.colorScale.criteria = criteria;\n\n    await context.sync();\n});\n```"
- uid: excel_release.Excel.ConditionalFormat.colorScaleOrNullObject
  summary: >-
    <span data-ttu-id="8af0d-p104">Возвращает свойства условного форматирования ColorScale, если используется условное форматирование ColorScale. Только для чтения.</span><span class="sxs-lookup"><span data-stu-id="8af0d-p104">Returns the ColorScale conditional format properties if the current conditional format is an ColorScale type. Read-only.</span></span>


    <span data-ttu-id="8af0d-118">\[[Набор API: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="8af0d-118">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: colorScaleOrNullObject
  fullName: colorScaleOrNullObject
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly colorScaleOrNullObject: Excel.ColorScaleConditionalFormat;'
    return:
      type:
      - excel.Excel.ColorScaleConditionalFormat
- uid: excel_release.Excel.ConditionalFormat.context
  summary: <span data-ttu-id="8af0d-119">Контекст запроса, связанный с объектом.</span><span class="sxs-lookup"><span data-stu-id="8af0d-119">The request context associated with the object.</span></span> <span data-ttu-id="8af0d-120">Это подсоединяет процесс надстройки к процессу ведущего приложения Office.</span><span class="sxs-lookup"><span data-stu-id="8af0d-120">This connects the add-in's process to the Office host application's process.</span></span>
  name: context
  fullName: context
  langs:
  - typeScript
  type: property
  syntax:
    content: 'context: RequestContext;'
    return:
      type:
      - RequestContext
- uid: excel_release.Excel.ConditionalFormat.custom
  summary: >-
    <span data-ttu-id="8af0d-p106">Возвращает свойства специального условного форматирования, если используется специальное условное форматирование. Только для чтения.</span><span class="sxs-lookup"><span data-stu-id="8af0d-p106">Returns the custom conditional format properties if the current conditional format is a custom type. Read-only.</span></span>


    <span data-ttu-id="8af0d-123">\[[Набор API: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="8af0d-123">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: custom
  fullName: custom
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly custom: Excel.CustomConditionalFormat;'
    return:
      type:
      - excel.Excel.CustomConditionalFormat
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"8af0d-124\">Примеры</span><span class=\"sxs-lookup\"><span data-stu-id=\"8af0d-124\">Examples</span></span>\n\n```typescript\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\");\n    const range = sheet.getRange(\"B8:E13\");\n    const conditionalFormat = range.conditionalFormats.add(Excel.ConditionalFormatType.custom);\n    conditionalFormat.custom.rule.formula = '=IF(B8>INDIRECT(\"RC[-1]\",0),TRUE)';\n    conditionalFormat.custom.format.font.color = \"green\";\n\n    await context.sync();\n});\n```"
- uid: excel_release.Excel.ConditionalFormat.customOrNullObject
  summary: >-
    <span data-ttu-id="8af0d-p107">Возвращает свойства специального условного форматирования, если используется специальное условное форматирование. Только для чтения.</span><span class="sxs-lookup"><span data-stu-id="8af0d-p107">Returns the custom conditional format properties if the current conditional format is a custom type. Read-only.</span></span>


    <span data-ttu-id="8af0d-127">\[[Набор API: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="8af0d-127">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: customOrNullObject
  fullName: customOrNullObject
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly customOrNullObject: Excel.CustomConditionalFormat;'
    return:
      type:
      - excel.Excel.CustomConditionalFormat
- uid: excel_release.Excel.ConditionalFormat.dataBar
  summary: >-
    <span data-ttu-id="8af0d-p108">Возвращает свойства гистограммы, если текущее условное форматирование — гистограмма. Только для чтения.</span><span class="sxs-lookup"><span data-stu-id="8af0d-p108">Returns the data bar properties if the current conditional format is a data bar. Read-only.</span></span>


    <span data-ttu-id="8af0d-130">\[[Набор API: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="8af0d-130">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: dataBar
  fullName: dataBar
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly dataBar: Excel.DataBarConditionalFormat;'
    return:
      type:
      - excel.Excel.DataBarConditionalFormat
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"8af0d-131\">Примеры</span><span class=\"sxs-lookup\"><span data-stu-id=\"8af0d-131\">Examples</span></span>\n\n```typescript\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\");\n    const range = sheet.getRange(\"B8:E13\");\n    const conditionalFormat = range.conditionalFormats\n        .add(Excel.ConditionalFormatType.dataBar);\n    conditionalFormat.dataBar.barDirection = Excel.ConditionalDataBarDirection.leftToRight;\n\n    await context.sync();\n});\n```"
- uid: excel_release.Excel.ConditionalFormat.dataBarOrNullObject
  summary: >-
    <span data-ttu-id="8af0d-p109">Возвращает свойства гистограммы, если текущее условное форматирование — гистограмма. Только для чтения.</span><span class="sxs-lookup"><span data-stu-id="8af0d-p109">Returns the data bar properties if the current conditional format is a data bar. Read-only.</span></span>


    <span data-ttu-id="8af0d-134">\[[Набор API: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="8af0d-134">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: dataBarOrNullObject
  fullName: dataBarOrNullObject
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly dataBarOrNullObject: Excel.DataBarConditionalFormat;'
    return:
      type:
      - excel.Excel.DataBarConditionalFormat
- uid: excel_release.Excel.ConditionalFormat.delete
  summary: >-
    <span data-ttu-id="8af0d-135">Удаляет это условное форматирование.</span><span class="sxs-lookup"><span data-stu-id="8af0d-135">Deletes this conditional format.</span></span>


    <span data-ttu-id="8af0d-136">\[[Набор API: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="8af0d-136">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: delete()
  fullName: delete()
  langs:
  - typeScript
  type: method
  syntax:
    content: 'delete(): void;'
    return:
      type:
      - void
      description: ''
- uid: excel_release.Excel.ConditionalFormat.getRange
  summary: >-
    <span data-ttu-id="8af0d-137">Возврат диапазона, к которому применено условное форматирование.</span><span class="sxs-lookup"><span data-stu-id="8af0d-137">Returns the range the conditonal format is applied to.</span></span> <span data-ttu-id="8af0d-138">ВыДает ошибку, если условное форматирование применяется к нескольким диапазонам.</span><span class="sxs-lookup"><span data-stu-id="8af0d-138">Throws an error if the conditional format is applied to multiple ranges.</span></span> <span data-ttu-id="8af0d-139">Только для чтения.</span><span class="sxs-lookup"><span data-stu-id="8af0d-139">Read-only.</span></span>


    <span data-ttu-id="8af0d-140">\[[Набор API: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="8af0d-140">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getRange()
  fullName: getRange()
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getRange(): Excel.Range;'
    return:
      type:
      - excel.Excel.Range
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"8af0d-141\">Примеры</span><span class=\"sxs-lookup\"><span data-stu-id=\"8af0d-141\">Examples</span></span>\n\n```typescript\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\");\n    const worksheetRange = sheet.getRange();\n    worksheetRange.conditionalFormats.load(\"type\");\n\n    await context.sync();\n\n    let cfRangePairs: { cf: Excel.ConditionalFormat, range: Excel.Range }[] = [];\n    worksheetRange.conditionalFormats.items.forEach(item => {\n        cfRangePairs.push({\n            cf: item,\n            range: item.getRange().load(\"address\")\n        });\n    });\n\n    await context.sync();\n\n    if (cfRangePairs.length > 0) {\n        cfRangePairs.forEach(item => {\n            console.log(item.cf.type);\n        });\n    } else {\n        console.log(\"No conditional formats applied.\");\n    }\n});\n```"
- uid: excel_release.Excel.ConditionalFormat.getRangeOrNullObject
  summary: >-
    <span data-ttu-id="8af0d-142">Возвращает диапазон, к которому применяется формат кондитонал, или пустой объект, если условное форматирование применяется к нескольким диапазонам.</span><span class="sxs-lookup"><span data-stu-id="8af0d-142">Returns the range the conditonal format is applied to, or a null object if the conditional format is applied to multiple ranges.</span></span> <span data-ttu-id="8af0d-143">Только для чтения.</span><span class="sxs-lookup"><span data-stu-id="8af0d-143">Read-only.</span></span>


    <span data-ttu-id="8af0d-144">\[[Набор API: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="8af0d-144">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getRangeOrNullObject()
  fullName: getRangeOrNullObject()
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getRangeOrNullObject(): Excel.Range;'
    return:
      type:
      - excel.Excel.Range
      description: ''
- uid: excel_release.Excel.ConditionalFormat.iconSet
  summary: >-
    <span data-ttu-id="8af0d-p112">Возвращает свойства условного форматирования IconSet, если используется условное форматирование IconSet. Только для чтения.</span><span class="sxs-lookup"><span data-stu-id="8af0d-p112">Returns the IconSet conditional format properties if the current conditional format is an IconSet type. Read-only.</span></span>


    <span data-ttu-id="8af0d-147">\[[Набор API: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="8af0d-147">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: iconSet
  fullName: iconSet
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly iconSet: Excel.IconSetConditionalFormat;'
    return:
      type:
      - excel.Excel.IconSetConditionalFormat
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"8af0d-148\">Примеры</span><span class=\"sxs-lookup\"><span data-stu-id=\"8af0d-148\">Examples</span></span>\n\n```typescript\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\");\n    const range = sheet.getRange(\"B8:E13\");\n    const conditionalFormat = range.conditionalFormats\n        .add(Excel.ConditionalFormatType.iconSet);\n    const iconSetCF = conditionalFormat.iconSet;\n    iconSetCF.style = Excel.IconSet.threeTriangles;\n\n    /*\n        The iconSetCF.criteria array is automatically prepopulated with\n        criterion elements whose properties have been given default settings.\n        You can't write to each property of a criterion directly. Instead,\n        replace the whole criteria object.\n\n        With a \"three*\" icon set style, such as \"threeTriangles\", the third\n        element in the criteria array (criteria[2]) defines the \"top\" icon;\n        e.g., a green triangle. The second (criteria[1]) defines the \"middle\"\n        icon, The first (criteria[0]) defines the \"low\" icon, but it\n        can often be left empty as this method does below, because every\n        cell that does not match the other two criteria always gets the low\n        icon.            \n    */\n    iconSetCF.criteria = [\n        {} as any,\n        {\n            type: Excel.ConditionalFormatIconRuleType.number,\n            operator: Excel.ConditionalIconCriterionOperator.greaterThanOrEqual,\n            formula: \"=700\"\n        },\n        {\n            type: Excel.ConditionalFormatIconRuleType.number,\n            operator: Excel.ConditionalIconCriterionOperator.greaterThanOrEqual,\n            formula: \"=1000\",\n        }\n    ];\n\n    await context.sync();\n});\n```"
- uid: excel_release.Excel.ConditionalFormat.iconSetOrNullObject
  summary: >-
    <span data-ttu-id="8af0d-p113">Возвращает свойства условного форматирования IconSet, если используется условное форматирование IconSet. Только для чтения.</span><span class="sxs-lookup"><span data-stu-id="8af0d-p113">Returns the IconSet conditional format properties if the current conditional format is an IconSet type. Read-only.</span></span>


    <span data-ttu-id="8af0d-151">\[[Набор API: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="8af0d-151">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: iconSetOrNullObject
  fullName: iconSetOrNullObject
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly iconSetOrNullObject: Excel.IconSetConditionalFormat;'
    return:
      type:
      - excel.Excel.IconSetConditionalFormat
- uid: excel_release.Excel.ConditionalFormat.id
  summary: >-
    <span data-ttu-id="8af0d-152">Приоритет условного форматирования в пределах текущего класса ConditionalFormatCollection.</span><span class="sxs-lookup"><span data-stu-id="8af0d-152">The Priority of the Conditional Format within the current ConditionalFormatCollection.</span></span> <span data-ttu-id="8af0d-153">Только для чтения.</span><span class="sxs-lookup"><span data-stu-id="8af0d-153">Read-only.</span></span>


    <span data-ttu-id="8af0d-154">\[[Набор API: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="8af0d-154">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: id
  fullName: id
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly id: string;'
    return:
      type:
      - string
- uid: excel_release.Excel.ConditionalFormat.load
  summary: <span data-ttu-id="8af0d-155">Ставит в очередь команду, чтобы загрузить указанные свойства объекта.</span><span class="sxs-lookup"><span data-stu-id="8af0d-155">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="8af0d-156">Перед чтением свойств необходимо вызвать метод Context. Sync ().</span><span class="sxs-lookup"><span data-stu-id="8af0d-156">You must call "context.sync()" before reading the properties.</span></span>
  remarks: >-
    <span data-ttu-id="8af0d-157">В дополнение к этой подписи этот метод имеет следующие подписи:</span><span class="sxs-lookup"><span data-stu-id="8af0d-157">In addition to this signature, this method has the following signatures:</span></span>


    <span data-ttu-id="8af0d-158">`load(option?: string | string[]): Excel.ConditionalFormat`-WHERE — это строка с разделителями-запятыми или массив строк, указывающий свойства для загрузки.</span><span class="sxs-lookup"><span data-stu-id="8af0d-158">`load(option?: string | string[]): Excel.ConditionalFormat` - Where option is a comma-delimited string or an array of strings that specify the properties to load.</span></span>


    <span data-ttu-id="8af0d-159">`load(option?: { select?: string; expand?: string; }): Excel.ConditionalFormat`-WHERE. Select — это строка с разделителями-запятыми, указывающая свойства для загрузки и параметры. Expand — это строка с разделителями-запятыми, указывающая свойства навигации для загрузки.</span><span class="sxs-lookup"><span data-stu-id="8af0d-159">`load(option?: { select?: string; expand?: string; }): Excel.ConditionalFormat` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.</span></span>


    <span data-ttu-id="8af0d-160">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.ConditionalFormat`— Доступно только для типов коллекций.</span><span class="sxs-lookup"><span data-stu-id="8af0d-160">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.ConditionalFormat` - Only available on collection types.</span></span> <span data-ttu-id="8af0d-161">Он аналогичен предыдущей подписи.</span><span class="sxs-lookup"><span data-stu-id="8af0d-161">It is similar to the preceding signature.</span></span> <span data-ttu-id="8af0d-162">Option. Top указывает максимальное количество элементов коллекции, которые можно включить в результат.</span><span class="sxs-lookup"><span data-stu-id="8af0d-162">Option.top specifies the maximum number of collection items that can be included in the result.</span></span> <span data-ttu-id="8af0d-163">Option. skip указывает количество элементов, которые будут пропущены и не включены в результат.</span><span class="sxs-lookup"><span data-stu-id="8af0d-163">Option.skip specifies the number of items that are to be skipped and not included in the result.</span></span> <span data-ttu-id="8af0d-164">Если указан параметр Option. Top, результирующий набор начнется после пропуска указанного числа элементов.</span><span class="sxs-lookup"><span data-stu-id="8af0d-164">If option.top is specified, the result set will start after skipping the specified number of items.</span></span>
  name: load(option)
  fullName: load(option)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'load(option?: Excel.Interfaces.ConditionalFormatLoadOptions): Excel.ConditionalFormat;'
    return:
      type:
      - excel.Excel.ConditionalFormat
      description: ''
    parameters:
    - id: option
      description: ''
      type:
      - excel.Excel.Interfaces.ConditionalFormatLoadOptions
- uid: excel_release.Excel.ConditionalFormat.load_1
  summary: <span data-ttu-id="8af0d-165">Ставит в очередь команду, чтобы загрузить указанные свойства объекта.</span><span class="sxs-lookup"><span data-stu-id="8af0d-165">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="8af0d-166">Перед чтением свойств `context.sync()` необходимо вызвать метод.</span><span class="sxs-lookup"><span data-stu-id="8af0d-166">You must call `context.sync()` before reading the properties.</span></span>
  name: load(propertyNames)
  fullName: load(propertyNames)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'load(propertyNames?: string | string[]): Excel.ConditionalFormat;'
    return:
      type:
      - excel.Excel.ConditionalFormat
      description: ''
    parameters:
    - id: propertyNames
      description: <span data-ttu-id="8af0d-167">Строка, разделенная запятыми, или массив строк, указывающий свойства для загрузки.</span><span class="sxs-lookup"><span data-stu-id="8af0d-167">A comma-delimited string or an array of strings that specify the properties to load.</span></span>
      type:
      - string | string[]
- uid: excel_release.Excel.ConditionalFormat.load_2
  summary: <span data-ttu-id="8af0d-168">Ставит в очередь команду, чтобы загрузить указанные свойства объекта.</span><span class="sxs-lookup"><span data-stu-id="8af0d-168">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="8af0d-169">Перед чтением свойств `context.sync()` необходимо вызвать метод.</span><span class="sxs-lookup"><span data-stu-id="8af0d-169">You must call `context.sync()` before reading the properties.</span></span>
  name: load(propertyNamesAndPaths)
  fullName: load(propertyNamesAndPaths)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'load(propertyNamesAndPaths?: { select?: string; expand?: string; }): Excel.ConditionalFormat;'
    return:
      type:
      - excel.Excel.ConditionalFormat
      description: ''
    parameters:
    - id: propertyNamesAndPaths
      description: <span data-ttu-id="8af0d-170">Где Пропертинамесандпасс. Select — это строка с разделителями-запятыми, задающая свойства для загрузки, и Пропертинамесандпасс. Expand — это строка с разделителями-запятыми, указывающая свойства навигации для загрузки.</span><span class="sxs-lookup"><span data-stu-id="8af0d-170">Where propertyNamesAndPaths.select is a comma-delimited string that specifies the properties to load, and propertyNamesAndPaths.expand is a comma-delimited string that specifies the navigation properties to load.</span></span>
      type:
      - '{ select?: string; expand?: string; }'
- uid: excel_release.Excel.ConditionalFormat.preset
  summary: >-
    <span data-ttu-id="8af0d-171">Возвращает условное форматирование предварительно установленных условий.</span><span class="sxs-lookup"><span data-stu-id="8af0d-171">Returns the preset criteria conditional format.</span></span> <span data-ttu-id="8af0d-172">Дополнительные сведения см. в статье Excel. Пресеткритериакондитионалформат.</span><span class="sxs-lookup"><span data-stu-id="8af0d-172">See Excel.PresetCriteriaConditionalFormat for more details.</span></span>


    <span data-ttu-id="8af0d-173">\[[Набор API: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="8af0d-173">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: preset
  fullName: preset
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly preset: Excel.PresetCriteriaConditionalFormat;'
    return:
      type:
      - excel.Excel.PresetCriteriaConditionalFormat
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"8af0d-174\">Примеры</span><span class=\"sxs-lookup\"><span data-stu-id=\"8af0d-174\">Examples</span></span>\n\n```typescript\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\");\n    const range = sheet.getRange(\"B2:M5\");\n    const conditionalFormat = range.conditionalFormats\n        .add(Excel.ConditionalFormatType.presetCriteria);\n    conditionalFormat.preset.format.font.color = \"white\";\n    conditionalFormat.preset.rule = { criterion: Excel.ConditionalFormatPresetCriterion.oneStdDevAboveAverage };\n\n    await context.sync();\n});\n```"
- uid: excel_release.Excel.ConditionalFormat.presetOrNullObject
  summary: >-
    <span data-ttu-id="8af0d-175">Возвращает условное форматирование предварительно установленных условий.</span><span class="sxs-lookup"><span data-stu-id="8af0d-175">Returns the preset criteria conditional format.</span></span> <span data-ttu-id="8af0d-176">Дополнительные сведения см. в статье Excel. Пресеткритериакондитионалформат.</span><span class="sxs-lookup"><span data-stu-id="8af0d-176">See Excel.PresetCriteriaConditionalFormat for more details.</span></span>


    <span data-ttu-id="8af0d-177">\[[Набор API: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="8af0d-177">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: presetOrNullObject
  fullName: presetOrNullObject
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly presetOrNullObject: Excel.PresetCriteriaConditionalFormat;'
    return:
      type:
      - excel.Excel.PresetCriteriaConditionalFormat
- uid: excel_release.Excel.ConditionalFormat.priority
  summary: >-
    <span data-ttu-id="8af0d-178">Приоритет (или индекс) в коллекции условных форматов, в которой в настоящее время существует данное условное форматирование.</span><span class="sxs-lookup"><span data-stu-id="8af0d-178">The priority (or index) within the conditional format collection that this conditional format currently exists in.</span></span> <span data-ttu-id="8af0d-179">При этом также изменяются приоритеты других условных форматов для обеспечения непрерывного порядка приоритетов.</span><span class="sxs-lookup"><span data-stu-id="8af0d-179">Changing this also changes other conditional formats' priorities, to allow for a contiguous priority order.</span></span> <span data-ttu-id="8af0d-180">Используйте отрицательный приоритет, чтобы начать с обратного.</span><span class="sxs-lookup"><span data-stu-id="8af0d-180">Use a negative priority to begin from the back.</span></span> <span data-ttu-id="8af0d-181">Приоритеты, превышающие пределы, будут получены и установлены в максимальном (или минимальном, при отрицательном) приоритете.</span><span class="sxs-lookup"><span data-stu-id="8af0d-181">Priorities greater than than bounds will get and set to the maximum (or minimum if negative) priority.</span></span> <span data-ttu-id="8af0d-182">Обратите внимание, что при изменении приоритета необходимо повторно получить новую копию объекта в новом расположении приоритета, если вы хотите внести в него другие изменения.</span><span class="sxs-lookup"><span data-stu-id="8af0d-182">Also note that if you change the priority, you have to re-fetch a new copy of the object at that new priority location if you want to make further changes to it.</span></span> <span data-ttu-id="8af0d-183">Только для чтения.</span><span class="sxs-lookup"><span data-stu-id="8af0d-183">Read-only.</span></span>


    <span data-ttu-id="8af0d-184">\[[Набор API: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="8af0d-184">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: priority
  fullName: priority
  langs:
  - typeScript
  type: property
  syntax:
    content: 'priority: number;'
    return:
      type:
      - number
- uid: excel_release.Excel.ConditionalFormat.set
  summary: <span data-ttu-id="8af0d-185">Задает одновременно несколько свойств объекта.</span><span class="sxs-lookup"><span data-stu-id="8af0d-185">Sets multiple properties of an object at the same time.</span></span> <span data-ttu-id="8af0d-186">Можно передать либо простой объект с соответствующими свойствами, либо другой объект API того же типа.</span><span class="sxs-lookup"><span data-stu-id="8af0d-186">You can pass either a plain object with the appropriate properties, or another API object of the same type.</span></span>
  remarks: >-
    <span data-ttu-id="8af0d-187">Этот метод имеет следующую дополнительную подпись:</span><span class="sxs-lookup"><span data-stu-id="8af0d-187">This method has the following additional signature:</span></span>


    `set(properties: Excel.ConditionalFormat): void`
  name: set(properties, options)
  fullName: set(properties, options)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'set(properties: Interfaces.ConditionalFormatUpdateData, options?: OfficeExtension.UpdateOptions): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: properties
      description: <span data-ttu-id="8af0d-188">Объект JavaScript со свойствами, которые структурированы исоморфикалли к свойствам объекта, для которого вызывается метод.</span><span class="sxs-lookup"><span data-stu-id="8af0d-188">A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.</span></span>
      type:
      - Interfaces.ConditionalFormatUpdateData
    - id: options
      description: <span data-ttu-id="8af0d-189">Предоставляет возможность подавлять ошибки, если объект Properties пытается задать любые свойства, предназначенные только для чтения.</span><span class="sxs-lookup"><span data-stu-id="8af0d-189">Provides an option to suppress errors if the properties object tries to set any read-only properties.</span></span>
      type:
      - office.OfficeExtension.UpdateOptions
- uid: excel_release.Excel.ConditionalFormat.set_1
  summary: <span data-ttu-id="8af0d-190">Задает одновременно несколько свойств объекта на основе существующего загруженного объекта.</span><span class="sxs-lookup"><span data-stu-id="8af0d-190">Sets multiple properties on the object at the same time, based on an existing loaded object.</span></span>
  name: set(properties)
  fullName: set(properties)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'set(properties: Excel.ConditionalFormat): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: properties
      description: ''
      type:
      - excel.Excel.ConditionalFormat
- uid: excel_release.Excel.ConditionalFormat.stopIfTrue
  summary: >-
    <span data-ttu-id="8af0d-191">Если выполняются условия этого условного форматирования, форматы с более низким приоритетом не будут применяться в этой ячейке.</span><span class="sxs-lookup"><span data-stu-id="8af0d-191">If the conditions of this conditional format are met, no lower-priority formats shall take effect on that cell.</span></span> <span data-ttu-id="8af0d-192">NULL в данных, наборах значков и колорскалес, так как для них отсутствует концепция StopIfTrue</span><span class="sxs-lookup"><span data-stu-id="8af0d-192">Null on databars, icon sets, and colorscales as there's no concept of StopIfTrue for these</span></span>


    <span data-ttu-id="8af0d-193">\[[Набор API: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="8af0d-193">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: stopIfTrue
  fullName: stopIfTrue
  langs:
  - typeScript
  type: property
  syntax:
    content: 'stopIfTrue: boolean;'
    return:
      type:
      - boolean
- uid: excel_release.Excel.ConditionalFormat.textComparison
  summary: >-
    <span data-ttu-id="8af0d-194">Возвращает определенные свойства условного форматирования текста, если текущим условным форматированием является текстовый тип.</span><span class="sxs-lookup"><span data-stu-id="8af0d-194">Returns the specific text conditional format properties if the current conditional format is a text type.</span></span> <span data-ttu-id="8af0d-195">Например, чтобы форматировать ячейки, которые соответствуют слову "Text".</span><span class="sxs-lookup"><span data-stu-id="8af0d-195">For example to format cells matching the word "Text".</span></span> <span data-ttu-id="8af0d-196">Только для чтения.</span><span class="sxs-lookup"><span data-stu-id="8af0d-196">Read-only.</span></span>


    <span data-ttu-id="8af0d-197">\[[Набор API: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="8af0d-197">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: textComparison
  fullName: textComparison
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly textComparison: Excel.TextConditionalFormat;'
    return:
      type:
      - excel.Excel.TextConditionalFormat
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"8af0d-198\">Примеры</span><span class=\"sxs-lookup\"><span data-stu-id=\"8af0d-198\">Examples</span></span>\n\n```typescript\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\");\n    const range = sheet.getRange(\"B16:D18\");\n    const conditionalFormat = range.conditionalFormats\n        .add(Excel.ConditionalFormatType.containsText);\n    conditionalFormat.textComparison.format.font.color = \"red\";\n    conditionalFormat.textComparison.rule = { operator: Excel.ConditionalTextOperator.contains, text: \"Delayed\" };\n\n    await context.sync();\n});\n```"
- uid: excel_release.Excel.ConditionalFormat.textComparisonOrNullObject
  summary: >-
    <span data-ttu-id="8af0d-199">Возвращает определенные свойства условного форматирования текста, если текущим условным форматированием является текстовый тип.</span><span class="sxs-lookup"><span data-stu-id="8af0d-199">Returns the specific text conditional format properties if the current conditional format is a text type.</span></span> <span data-ttu-id="8af0d-200">Например, чтобы форматировать ячейки, которые соответствуют слову "Text".</span><span class="sxs-lookup"><span data-stu-id="8af0d-200">For example to format cells matching the word "Text".</span></span> <span data-ttu-id="8af0d-201">Только для чтения.</span><span class="sxs-lookup"><span data-stu-id="8af0d-201">Read-only.</span></span>


    <span data-ttu-id="8af0d-202">\[[Набор API: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="8af0d-202">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: textComparisonOrNullObject
  fullName: textComparisonOrNullObject
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly textComparisonOrNullObject: Excel.TextConditionalFormat;'
    return:
      type:
      - excel.Excel.TextConditionalFormat
- uid: excel_release.Excel.ConditionalFormat.toJSON
  summary: <span data-ttu-id="8af0d-203">ПереОпределяет метод `toJSON()` JavaScript для предоставления более удобного вывода при передаче `JSON.stringify()` <!-- -->объекта API.</span><span class="sxs-lookup"><span data-stu-id="8af0d-203">Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`<!-- -->.</span></span> <span data-ttu-id="8af0d-204">(`JSON.stringify`<!-- -->в свою очередь вызывает `toJSON` метод объекта, который передается ему.) В то время как исходный объект Excel. ConditionalFormat — это объект API, `toJSON` метод возвращает простой объект JavaScript (типизированный тип `Excel.Interfaces.ConditionalFormatData` <!-- -->), который содержит неполные копии загруженных дочерних свойств из исходного объекта.</span><span class="sxs-lookup"><span data-stu-id="8af0d-204">(`JSON.stringify`<!-- -->, in turn, calls the `toJSON` method of the object that is passed to it.) Whereas the original Excel.ConditionalFormat object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.ConditionalFormatData`<!-- -->) that contains shallow copies of any loaded child properties from the original object.</span></span>
  name: toJSON()
  fullName: toJSON()
  langs:
  - typeScript
  type: method
  syntax:
    content: 'toJSON(): Excel.Interfaces.ConditionalFormatData;'
    return:
      type:
      - excel.Excel.Interfaces.ConditionalFormatData
      description: ''
- uid: excel_release.Excel.ConditionalFormat.topBottom
  summary: >-
    <span data-ttu-id="8af0d-205">Возвращает верхнее и нижнее свойства условного форматирования, если текущее условное форматирование имеет тип TopBottom.</span><span class="sxs-lookup"><span data-stu-id="8af0d-205">Returns the Top/Bottom conditional format properties if the current conditional format is an TopBottom type.</span></span> <span data-ttu-id="8af0d-206">Например, чтобы отформатировать первые 10% или 10 последних элементов.</span><span class="sxs-lookup"><span data-stu-id="8af0d-206">For example to format the top 10% or bottom 10 items.</span></span> <span data-ttu-id="8af0d-207">Только для чтения.</span><span class="sxs-lookup"><span data-stu-id="8af0d-207">Read-only.</span></span>


    <span data-ttu-id="8af0d-208">\[[Набор API: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="8af0d-208">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: topBottom
  fullName: topBottom
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly topBottom: Excel.TopBottomConditionalFormat;'
    return:
      type:
      - excel.Excel.TopBottomConditionalFormat
- uid: excel_release.Excel.ConditionalFormat.topBottomOrNullObject
  summary: >-
    <span data-ttu-id="8af0d-209">Возвращает верхнее и нижнее свойства условного форматирования, если текущее условное форматирование имеет тип TopBottom.</span><span class="sxs-lookup"><span data-stu-id="8af0d-209">Returns the Top/Bottom conditional format properties if the current conditional format is an TopBottom type.</span></span> <span data-ttu-id="8af0d-210">Например, чтобы отформатировать первые 10% или 10 последних элементов.</span><span class="sxs-lookup"><span data-stu-id="8af0d-210">For example to format the top 10% or bottom 10 items.</span></span> <span data-ttu-id="8af0d-211">Только для чтения.</span><span class="sxs-lookup"><span data-stu-id="8af0d-211">Read-only.</span></span>


    <span data-ttu-id="8af0d-212">\[[Набор API: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="8af0d-212">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: topBottomOrNullObject
  fullName: topBottomOrNullObject
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly topBottomOrNullObject: Excel.TopBottomConditionalFormat;'
    return:
      type:
      - excel.Excel.TopBottomConditionalFormat
- uid: excel_release.Excel.ConditionalFormat.type
  summary: >-
    <span data-ttu-id="8af0d-213">Тип условного форматирования.</span><span class="sxs-lookup"><span data-stu-id="8af0d-213">A type of conditional format.</span></span> <span data-ttu-id="8af0d-214">В каждый момент времени можно задать только один из них.</span><span class="sxs-lookup"><span data-stu-id="8af0d-214">Only one can be set at a time.</span></span> <span data-ttu-id="8af0d-215">Только для чтения.</span><span class="sxs-lookup"><span data-stu-id="8af0d-215">Read-only.</span></span>


    <span data-ttu-id="8af0d-216">\[[Набор API: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="8af0d-216">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: type
  fullName: type
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly type: Excel.ConditionalFormatType | "Custom" | "DataBar" | "ColorScale" | "IconSet" | "TopBottom" | "PresetCriteria" | "ContainsText" | "CellValue";'
    return:
      type:
      - Excel.ConditionalFormatType | "Custom" | "DataBar" | "ColorScale" | "IconSet" | "TopBottom" | "PresetCriteria" | "ContainsText" | "CellValue"
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"8af0d-217\">Примеры</span><span class=\"sxs-lookup\"><span data-stu-id=\"8af0d-217\">Examples</span></span>\n\n```typescript\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\");\n    const worksheetRange = sheet.getRange();\n    worksheetRange.conditionalFormats.load(\"type\");\n\n    await context.sync();\n\n    let cfRangePairs: { cf: Excel.ConditionalFormat, range: Excel.Range }[] = [];\n    worksheetRange.conditionalFormats.items.forEach(item => {\n        cfRangePairs.push({\n            cf: item,\n            range: item.getRange().load(\"address\")\n        });\n    });\n\n    await context.sync();\n\n    if (cfRangePairs.length > 0) {\n        cfRangePairs.forEach(item => {\n            console.log(item.cf.type);\n        });\n    } else {\n        console.log(\"No conditional formats applied.\");\n    }\n});\n```"
