### YamlMime:UniversalReference
ms.openlocfilehash: 292e911d7c741faa49a889d67ce7e8d23729eb07
ms.sourcegitcommit: e9bfba6ec767e9d34fd1cf7b38c30f689617900a
ms.translationtype: MT
ms.contentlocale: ru-RU
ms.lasthandoff: 02/20/2019
ms.locfileid: "30109187"
items:
- uid: excel_release.Excel.WorksheetCollection
  summary: >-
    <span data-ttu-id="d117f-101">Представляет коллекцию объектов листа, включенных в книгу.</span><span class="sxs-lookup"><span data-stu-id="d117f-101">Represents a collection of worksheet objects that are part of the workbook.</span></span>


    <span data-ttu-id="d117f-102">\[[Набор API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d117f-102">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: Excel.WorksheetCollection
  fullName: Excel.WorksheetCollection
  langs:
  - typeScript
  type: class
  extends:
  - office.OfficeExtension.ClientObject
  package: excel_release
  children:
  - excel_release.Excel.WorksheetCollection.add
  - excel_release.Excel.WorksheetCollection.context
  - excel_release.Excel.WorksheetCollection.getActiveWorksheet
  - excel_release.Excel.WorksheetCollection.getCount
  - excel_release.Excel.WorksheetCollection.getFirst
  - excel_release.Excel.WorksheetCollection.getItem
  - excel_release.Excel.WorksheetCollection.getItemOrNullObject
  - excel_release.Excel.WorksheetCollection.getLast
  - excel_release.Excel.WorksheetCollection.items
  - excel_release.Excel.WorksheetCollection.load
  - excel_release.Excel.WorksheetCollection.load_1
  - excel_release.Excel.WorksheetCollection.load_2
  - excel_release.Excel.WorksheetCollection.onActivated
  - excel_release.Excel.WorksheetCollection.onAdded
  - excel_release.Excel.WorksheetCollection.onCalculated
  - excel_release.Excel.WorksheetCollection.onDeactivated
  - excel_release.Excel.WorksheetCollection.onDeleted
  - excel_release.Excel.WorksheetCollection.toJSON
- uid: excel_release.Excel.WorksheetCollection.add
  summary: >-
    <span data-ttu-id="d117f-p101">Добавляет новый лист в книгу. Лист будет добавлен в конец набора имеющихся листов. Если вы хотите активировать только что добавленный лист, вызовите команду .activate().</span><span class="sxs-lookup"><span data-stu-id="d117f-p101">Adds a new worksheet to the workbook. The worksheet will be added at the end of existing worksheets. If you wish to activate the newly added worksheet, call ".activate() on it.</span></span>


    <span data-ttu-id="d117f-106">\[[Набор API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d117f-106">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: add(name)
  fullName: add(name)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'add(name?: string): Excel.Worksheet;'
    return:
      type:
      - excel.Excel.Worksheet
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"d117f-107\">Примеры</span><span class=\"sxs-lookup\"><span data-stu-id=\"d117f-107\">Examples</span></span>\n\n```javascript\nExcel.run(function (ctx) { \n    var wSheetName = 'Sample Name';\n    var worksheet = ctx.workbook.worksheets.add(wSheetName);\n    worksheet.load('name');\n    return ctx.sync().then(function() {\n        console.log(worksheet.name);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
    parameters:
    - id: name
      description: <span data-ttu-id="d117f-p102">Необязательный параметр. Имя добавляемого листа. Если параметр используется, имя должно быть уникальным. В противном случае Excel определяет имя нового листа.</span><span class="sxs-lookup"><span data-stu-id="d117f-p102">Optional. The name of the worksheet to be added. If specified, name should be unqiue. If not specified, Excel determines the name of the new worksheet.</span></span>
      type:
      - string
- uid: excel_release.Excel.WorksheetCollection.context
  summary: <span data-ttu-id="d117f-112">Контекст запроса, связанный с объектом.</span><span class="sxs-lookup"><span data-stu-id="d117f-112">The request context associated with the object.</span></span> <span data-ttu-id="d117f-113">Это подсоединяет процесс надстройки к процессу ведущего приложения Office.</span><span class="sxs-lookup"><span data-stu-id="d117f-113">This connects the add-in's process to the Office host application's process.</span></span>
  name: context
  fullName: context
  langs:
  - typeScript
  type: property
  syntax:
    content: 'context: RequestContext;'
    return:
      type:
      - RequestContext
- uid: excel_release.Excel.WorksheetCollection.getActiveWorksheet
  summary: >-
    <span data-ttu-id="d117f-114">Получает текущий активный лист в книге.</span><span class="sxs-lookup"><span data-stu-id="d117f-114">Gets the currently active worksheet in the workbook.</span></span>


    <span data-ttu-id="d117f-115">\[[Набор API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d117f-115">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getActiveWorksheet()
  fullName: getActiveWorksheet()
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getActiveWorksheet(): Excel.Worksheet;'
    return:
      type:
      - excel.Excel.Worksheet
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"d117f-116\">Примеры</span><span class=\"sxs-lookup\"><span data-stu-id=\"d117f-116\">Examples</span></span>\n\n```javascript\nExcel.run(function (ctx) {  \n    var activeWorksheet = ctx.workbook.worksheets.getActiveWorksheet();\n    activeWorksheet.load('name');\n    return ctx.sync().then(function() {\n            console.log(activeWorksheet.name);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- uid: excel_release.Excel.WorksheetCollection.getCount
  summary: >-
    <span data-ttu-id="d117f-117">Получает количество листов в коллекции.</span><span class="sxs-lookup"><span data-stu-id="d117f-117">Gets the number of worksheets in the collection.</span></span>


    <span data-ttu-id="d117f-118">\[[Набор API: ExcelApi 1,4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d117f-118">\[ [API set: ExcelApi 1.4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getCount(visibleOnly)
  fullName: getCount(visibleOnly)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getCount(visibleOnly?: boolean): OfficeExtension.ClientResult<number>;'
    return:
      type:
      - OfficeExtension.ClientResult<number>
      description: ''
    parameters:
    - id: visibleOnly
      description: <span data-ttu-id="d117f-p104">Необязательный. Если указано значение true, учитываются только видимые листы (скрытые пропускаются).</span><span class="sxs-lookup"><span data-stu-id="d117f-p104">Optional. If true, considers only visible worksheets, skipping over any hidden ones.</span></span>
      type:
      - boolean
- uid: excel_release.Excel.WorksheetCollection.getFirst
  summary: >-
    <span data-ttu-id="d117f-121">Получает первый лист в коллекции.</span><span class="sxs-lookup"><span data-stu-id="d117f-121">Gets the first worksheet in the collection.</span></span>


    <span data-ttu-id="d117f-122">\[[Набор API: ExcelApi 1,5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d117f-122">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getFirst(visibleOnly)
  fullName: getFirst(visibleOnly)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getFirst(visibleOnly?: boolean): Excel.Worksheet;'
    return:
      type:
      - excel.Excel.Worksheet
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"d117f-123\">Примеры</span><span class=\"sxs-lookup\"><span data-stu-id=\"d117f-123\">Examples</span></span>\n\n```typescript\nawait Excel.run(async (context) => {\n    const sheets = context.workbook.worksheets;\n\n    // We don't want to include the default worksheet that was created\n    // when the workbook was created, so our \"firstSheet\" will be the one\n    // after the literal first. Note chaining of navigation methods.\n    const firstSheet = sheets.getFirst().getNext();\n    const lastSheet = sheets.getLast();\n    const firstTaxRateRange = firstSheet.getRange(\"B2\");\n    const lastTaxRateRange = lastSheet.getRange(\"B2\");\n\n    firstSheet.load(\"name\");\n    lastSheet.load(\"name\");\n    firstTaxRateRange.load(\"text\");\n    lastTaxRateRange.load(\"text\");\n\n    await context.sync();\n\n    let firstYear = firstSheet.name.substr(5, 4);\n    let lastYear = lastSheet.name.substr(5, 4);\n    console.log(`Tax Rate change from ${firstYear} to ${lastYear}`, `Tax rate for ${firstYear}: ${firstTaxRateRange.text[0][0]}\\nTax rate for ${lastYear}: ${lastTaxRateRange.text[0][0]}`)\n\n    await context.sync();\n});\n```"
    parameters:
    - id: visibleOnly
      description: <span data-ttu-id="d117f-p105">Необязательный. Если указано значение true, учитываются только видимые листы (скрытые пропускаются).</span><span class="sxs-lookup"><span data-stu-id="d117f-p105">Optional. If true, considers only visible worksheets, skipping over any hidden ones.</span></span>
      type:
      - boolean
- uid: excel_release.Excel.WorksheetCollection.getItem
  summary: >-
    <span data-ttu-id="d117f-126">Получает объект листа по его имени или ИД.</span><span class="sxs-lookup"><span data-stu-id="d117f-126">Gets a worksheet object using its Name or ID.</span></span>


    <span data-ttu-id="d117f-127">\[[Набор API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d117f-127">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getItem(key)
  fullName: getItem(key)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getItem(key: string): Excel.Worksheet;'
    return:
      type:
      - excel.Excel.Worksheet
      description: ''
    parameters:
    - id: key
      description: <span data-ttu-id="d117f-128">Имя или ИД листа.</span><span class="sxs-lookup"><span data-stu-id="d117f-128">The Name or ID of the worksheet.</span></span>
      type:
      - string
- uid: excel_release.Excel.WorksheetCollection.getItemOrNullObject
  summary: >-
    <span data-ttu-id="d117f-p106">Получает объект листа по его имени или идентификатору. Если лист не существует, возвращает пустой объект.</span><span class="sxs-lookup"><span data-stu-id="d117f-p106">Gets a worksheet object using its Name or ID. If the worksheet does not exist, will return a null object.</span></span>


    <span data-ttu-id="d117f-131">\[[Набор API: ExcelApi 1,4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d117f-131">\[ [API set: ExcelApi 1.4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getItemOrNullObject(key)
  fullName: getItemOrNullObject(key)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getItemOrNullObject(key: string): Excel.Worksheet;'
    return:
      type:
      - excel.Excel.Worksheet
      description: ''
    parameters:
    - id: key
      description: <span data-ttu-id="d117f-132">Имя или ИД листа.</span><span class="sxs-lookup"><span data-stu-id="d117f-132">The Name or ID of the worksheet.</span></span>
      type:
      - string
- uid: excel_release.Excel.WorksheetCollection.getLast
  summary: >-
    <span data-ttu-id="d117f-133">Получает последний лист в коллекции.</span><span class="sxs-lookup"><span data-stu-id="d117f-133">Gets the last worksheet in the collection.</span></span>


    <span data-ttu-id="d117f-134">\[[Набор API: ExcelApi 1,5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d117f-134">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getLast(visibleOnly)
  fullName: getLast(visibleOnly)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getLast(visibleOnly?: boolean): Excel.Worksheet;'
    return:
      type:
      - excel.Excel.Worksheet
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"d117f-135\">Примеры</span><span class=\"sxs-lookup\"><span data-stu-id=\"d117f-135\">Examples</span></span>\n\n```typescript\nawait Excel.run(async (context) => {\n    const sheets = context.workbook.worksheets;\n\n    // We don't want to include the default worksheet that was created\n    // when the workbook was created, so our \"firstSheet\" will be the one\n    // after the literal first. Note chaining of navigation methods.\n    const firstSheet = sheets.getFirst().getNext();\n    const lastSheet = sheets.getLast();\n    const firstTaxRateRange = firstSheet.getRange(\"B2\");\n    const lastTaxRateRange = lastSheet.getRange(\"B2\");\n\n    firstSheet.load(\"name\");\n    lastSheet.load(\"name\");\n    firstTaxRateRange.load(\"text\");\n    lastTaxRateRange.load(\"text\");\n\n    await context.sync();\n\n    let firstYear = firstSheet.name.substr(5, 4);\n    let lastYear = lastSheet.name.substr(5, 4);\n    console.log(`Tax Rate change from ${firstYear} to ${lastYear}`, `Tax rate for ${firstYear}: ${firstTaxRateRange.text[0][0]}\\nTax rate for ${lastYear}: ${lastTaxRateRange.text[0][0]}`)\n\n    await context.sync();\n});\n```"
    parameters:
    - id: visibleOnly
      description: <span data-ttu-id="d117f-p107">Необязательный. Если указано значение true, учитываются только видимые листы (скрытые пропускаются).</span><span class="sxs-lookup"><span data-stu-id="d117f-p107">Optional. If true, considers only visible worksheets, skipping over any hidden ones.</span></span>
      type:
      - boolean
- uid: excel_release.Excel.WorksheetCollection.items
  summary: <span data-ttu-id="d117f-138">Получает загруженные дочерние элементы в этой коллекции.</span><span class="sxs-lookup"><span data-stu-id="d117f-138">Gets the loaded child items in this collection.</span></span>
  name: items
  fullName: items
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly items: Excel.Worksheet[];'
    return:
      type:
      - Excel.Worksheet[]
- uid: excel_release.Excel.WorksheetCollection.load
  summary: <span data-ttu-id="d117f-139">Ставит в очередь команду, чтобы загрузить указанные свойства объекта.</span><span class="sxs-lookup"><span data-stu-id="d117f-139">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="d117f-140">Перед чтением свойств необходимо вызвать метод Context. Sync ().</span><span class="sxs-lookup"><span data-stu-id="d117f-140">You must call "context.sync()" before reading the properties.</span></span>
  remarks: >-
    <span data-ttu-id="d117f-141">В дополнение к этой подписи этот метод имеет следующие подписи:</span><span class="sxs-lookup"><span data-stu-id="d117f-141">In addition to this signature, this method has the following signatures:</span></span>


    <span data-ttu-id="d117f-142">`load(option?: string | string[]): Excel.WorksheetCollection`-WHERE — это строка с разделителями-запятыми или массив строк, указывающий свойства для загрузки.</span><span class="sxs-lookup"><span data-stu-id="d117f-142">`load(option?: string | string[]): Excel.WorksheetCollection` - Where option is a comma-delimited string or an array of strings that specify the properties to load.</span></span>


    <span data-ttu-id="d117f-143">`load(option?: { select?: string; expand?: string; }): Excel.WorksheetCollection`-WHERE. Select — это строка с разделителями-запятыми, указывающая свойства для загрузки и параметры. Expand — это строка с разделителями-запятыми, указывающая свойства навигации для загрузки.</span><span class="sxs-lookup"><span data-stu-id="d117f-143">`load(option?: { select?: string; expand?: string; }): Excel.WorksheetCollection` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.</span></span>


    <span data-ttu-id="d117f-144">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.WorksheetCollection`— Доступно только для типов коллекций.</span><span class="sxs-lookup"><span data-stu-id="d117f-144">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.WorksheetCollection` - Only available on collection types.</span></span> <span data-ttu-id="d117f-145">Он аналогичен предыдущей подписи.</span><span class="sxs-lookup"><span data-stu-id="d117f-145">It is similar to the preceding signature.</span></span> <span data-ttu-id="d117f-146">Option. Top указывает максимальное количество элементов коллекции, которые можно включить в результат.</span><span class="sxs-lookup"><span data-stu-id="d117f-146">Option.top specifies the maximum number of collection items that can be included in the result.</span></span> <span data-ttu-id="d117f-147">Option. skip указывает количество элементов, которые будут пропущены и не включены в результат.</span><span class="sxs-lookup"><span data-stu-id="d117f-147">Option.skip specifies the number of items that are to be skipped and not included in the result.</span></span> <span data-ttu-id="d117f-148">Если указан параметр Option. Top, результирующий набор начнется после пропуска указанного числа элементов.</span><span class="sxs-lookup"><span data-stu-id="d117f-148">If option.top is specified, the result set will start after skipping the specified number of items.</span></span>
  name: load(option)
  fullName: load(option)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'load(option?: Excel.Interfaces.WorksheetCollectionLoadOptions & Excel.Interfaces.CollectionLoadOptions): Excel.WorksheetCollection;'
    return:
      type:
      - excel.Excel.WorksheetCollection
      description: ''
    parameters:
    - id: option
      description: ''
      type:
      - Excel.Interfaces.WorksheetCollectionLoadOptions & Excel.Interfaces.CollectionLoadOptions
- uid: excel_release.Excel.WorksheetCollection.load_1
  summary: <span data-ttu-id="d117f-149">Ставит в очередь команду, чтобы загрузить указанные свойства объекта.</span><span class="sxs-lookup"><span data-stu-id="d117f-149">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="d117f-150">Перед чтением свойств `context.sync()` необходимо вызвать метод.</span><span class="sxs-lookup"><span data-stu-id="d117f-150">You must call `context.sync()` before reading the properties.</span></span>
  name: load(propertyNames)
  fullName: load(propertyNames)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'load(propertyNames?: string | string[]): Excel.WorksheetCollection;'
    return:
      type:
      - excel.Excel.WorksheetCollection
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"d117f-151\">Примеры</span><span class=\"sxs-lookup\"><span data-stu-id=\"d117f-151\">Examples</span></span>\n\n```javascript\nExcel.run(function (ctx) { \n    var worksheets = ctx.workbook.worksheets;\n    worksheets.load('items');\n    return ctx.sync().then(function() {\n        for (var i = 0; i < worksheets.items.length; i++)\n        {\n            console.log(worksheets.items[i].name);\n            console.log(worksheets.items[i].index);\n        }\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
    parameters:
    - id: propertyNames
      description: <span data-ttu-id="d117f-152">Строка, разделенная запятыми, или массив строк, указывающий свойства для загрузки.</span><span class="sxs-lookup"><span data-stu-id="d117f-152">A comma-delimited string or an array of strings that specify the properties to load.</span></span>
      type:
      - string | string[]
- uid: excel_release.Excel.WorksheetCollection.load_2
  name: load(option)
  fullName: load(option)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'load(option?: OfficeExtension.LoadOption): Excel.WorksheetCollection;'
    return:
      type:
      - excel.Excel.WorksheetCollection
      description: ''
    parameters:
    - id: option
      description: ''
      type:
      - office.OfficeExtension.LoadOption
- uid: excel_release.Excel.WorksheetCollection.onActivated
  summary: >-
    <span data-ttu-id="d117f-153">Возникает при активации любого листа в книге.</span><span class="sxs-lookup"><span data-stu-id="d117f-153">Occurs when any worksheet in the workbook is activated.</span></span>


    <span data-ttu-id="d117f-154">\[[Набор API: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d117f-154">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: onActivated
  fullName: onActivated
  langs:
  - typeScript
  type: event
  syntax:
    content: 'readonly onActivated: OfficeExtension.EventHandlers<Excel.WorksheetActivatedEventArgs>;'
    return:
      type:
      - OfficeExtension.EventHandlers<Excel.WorksheetActivatedEventArgs>
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"d117f-155\">Примеры</span><span class=\"sxs-lookup\"><span data-stu-id=\"d117f-155\">Examples</span></span>\n\n```typescript\nawait Excel.run(async (context) => {\n    let sheets = context.workbook.worksheets;\n    sheets.onActivated.add(onActivate);\n\n    await context.sync();\n    console.log(\"A handler has been registered for the OnActivate event.\");\n});\n```"
- uid: excel_release.Excel.WorksheetCollection.onAdded
  summary: >-
    <span data-ttu-id="d117f-156">Возникает при добавлении нового листа в книгу.</span><span class="sxs-lookup"><span data-stu-id="d117f-156">Occurs when a new worksheet is added to the workbook.</span></span>


    <span data-ttu-id="d117f-157">\[[Набор API: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d117f-157">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: onAdded
  fullName: onAdded
  langs:
  - typeScript
  type: event
  syntax:
    content: 'readonly onAdded: OfficeExtension.EventHandlers<Excel.WorksheetAddedEventArgs>;'
    return:
      type:
      - OfficeExtension.EventHandlers<Excel.WorksheetAddedEventArgs>
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"d117f-158\">Примеры</span><span class=\"sxs-lookup\"><span data-stu-id=\"d117f-158\">Examples</span></span>\n\n```typescript\nawait Excel.run(async (context) => {\n    let sheet = context.workbook.worksheets;\n    sheet.onAdded.add(onWorksheetAdd);\n\n    await context.sync();\n    console.log(\"A handler has been registered for the OnAdded event.\");\n});\n```"
- uid: excel_release.Excel.WorksheetCollection.onCalculated
  summary: >-
    <span data-ttu-id="d117f-159">Возникает при вычислении любого листа в книге.</span><span class="sxs-lookup"><span data-stu-id="d117f-159">Occurs when any worksheet in the workbook is calculated.</span></span>


    <span data-ttu-id="d117f-160">\[[Набор API: ExcelApi 1,8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d117f-160">\[ [API set: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: onCalculated
  fullName: onCalculated
  langs:
  - typeScript
  type: event
  syntax:
    content: 'readonly onCalculated: OfficeExtension.EventHandlers<Excel.WorksheetCalculatedEventArgs>;'
    return:
      type:
      - OfficeExtension.EventHandlers<Excel.WorksheetCalculatedEventArgs>
- uid: excel_release.Excel.WorksheetCollection.onDeactivated
  summary: >-
    <span data-ttu-id="d117f-161">Возникает, когда отключается любой лист в книге.</span><span class="sxs-lookup"><span data-stu-id="d117f-161">Occurs when any worksheet in the workbook is deactivated.</span></span>


    <span data-ttu-id="d117f-162">\[[Набор API: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d117f-162">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: onDeactivated
  fullName: onDeactivated
  langs:
  - typeScript
  type: event
  syntax:
    content: 'readonly onDeactivated: OfficeExtension.EventHandlers<Excel.WorksheetDeactivatedEventArgs>;'
    return:
      type:
      - OfficeExtension.EventHandlers<Excel.WorksheetDeactivatedEventArgs>
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"d117f-163\">Примеры</span><span class=\"sxs-lookup\"><span data-stu-id=\"d117f-163\">Examples</span></span>\n\n```typescript\nawait Excel.run(async (context) => {\n    let sheets = context.workbook.worksheets;\n    sheets.onDeactivated.add(onDeactivate);\n\n    await context.sync();\n    console.log(\"A handler has been registered for the OnDeactivate event.\");\n});\n```"
- uid: excel_release.Excel.WorksheetCollection.onDeleted
  summary: >-
    <span data-ttu-id="d117f-164">Возникает при удалении листа из книги.</span><span class="sxs-lookup"><span data-stu-id="d117f-164">Occurs when a worksheet is deleted from the workbook.</span></span>


    <span data-ttu-id="d117f-165">\[[Набор API: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d117f-165">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: onDeleted
  fullName: onDeleted
  langs:
  - typeScript
  type: event
  syntax:
    content: 'readonly onDeleted: OfficeExtension.EventHandlers<Excel.WorksheetDeletedEventArgs>;'
    return:
      type:
      - OfficeExtension.EventHandlers<Excel.WorksheetDeletedEventArgs>
- uid: excel_release.Excel.WorksheetCollection.toJSON
  summary: <span data-ttu-id="d117f-166">ПереОпределяет метод `toJSON()` JavaScript для предоставления более удобного вывода при передаче `JSON.stringify()` <!-- -->объекта API.</span><span class="sxs-lookup"><span data-stu-id="d117f-166">Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`<!-- -->.</span></span> <span data-ttu-id="d117f-167">(`JSON.stringify`<!-- -->в свою очередь вызывает `toJSON` метод объекта, который передается ему.) В то время как `Excel.WorksheetCollection` исходный объект является объектом API, `toJSON` метод возвращает простой объект JavaScript (тип `Excel.Interfaces.WorksheetCollectionData` <!-- -->"Items"), содержащий массив "Items" с неполной копией всех загруженных свойств из элементов коллекции.</span><span class="sxs-lookup"><span data-stu-id="d117f-167">(`JSON.stringify`<!-- -->, in turn, calls the `toJSON` method of the object that is passed to it.) Whereas the original `Excel.WorksheetCollection` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.WorksheetCollectionData`<!-- -->) that contains an "items" array with shallow copies of any loaded properties from the collection's items.</span></span>
  name: toJSON()
  fullName: toJSON()
  langs:
  - typeScript
  type: method
  syntax:
    content: 'toJSON(): Excel.Interfaces.WorksheetCollectionData;'
    return:
      type:
      - excel.Excel.Interfaces.WorksheetCollectionData
      description: ''
