### YamlMime:UniversalReference
items:
  - uid: excel_release.Excel.Worksheet
    summary: |-
      <span data-ttu-id="674d9-101">Лист Excel — это сетка ячеек.</span><span class="sxs-lookup"><span data-stu-id="674d9-101">An Excel worksheet is a grid of cells.</span></span> <span data-ttu-id="674d9-102">Она может содержать данные, таблицы, диаграммы и т. д.</span><span class="sxs-lookup"><span data-stu-id="674d9-102">It can contain data, tables, charts, etc.</span></span>

      <span data-ttu-id="674d9-103">\[[Набор API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="674d9-103">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: Excel.Worksheet
    fullName: Excel.Worksheet
    langs:
      - typeScript
    type: class
    extends:
      - office.OfficeExtension.ClientObject
    package: excel_release
    children:
      - excel_release.Excel.Worksheet.activate
      - excel_release.Excel.Worksheet.calculate
      - excel_release.Excel.Worksheet.charts
      - excel_release.Excel.Worksheet.context
      - excel_release.Excel.Worksheet.copy
      - excel_release.Excel.Worksheet.copy_1
      - excel_release.Excel.Worksheet.delete
      - excel_release.Excel.Worksheet.freezePanes
      - excel_release.Excel.Worksheet.getCell
      - excel_release.Excel.Worksheet.getNext
      - excel_release.Excel.Worksheet.getNextOrNullObject
      - excel_release.Excel.Worksheet.getPrevious
      - excel_release.Excel.Worksheet.getPreviousOrNullObject
      - excel_release.Excel.Worksheet.getRange
      - excel_release.Excel.Worksheet.getRangeByIndexes
      - excel_release.Excel.Worksheet.getUsedRange
      - excel_release.Excel.Worksheet.getUsedRangeOrNullObject
      - excel_release.Excel.Worksheet.id
      - excel_release.Excel.Worksheet.load
      - excel_release.Excel.Worksheet.load_1
      - excel_release.Excel.Worksheet.load_2
      - excel_release.Excel.Worksheet.name
      - excel_release.Excel.Worksheet.names
      - excel_release.Excel.Worksheet.onActivated
      - excel_release.Excel.Worksheet.onCalculated
      - excel_release.Excel.Worksheet.onChanged
      - excel_release.Excel.Worksheet.onDeactivated
      - excel_release.Excel.Worksheet.onSelectionChanged
      - excel_release.Excel.Worksheet.pivotTables
      - excel_release.Excel.Worksheet.position
      - excel_release.Excel.Worksheet.protection
      - excel_release.Excel.Worksheet.set
      - excel_release.Excel.Worksheet.set_1
      - excel_release.Excel.Worksheet.showGridlines
      - excel_release.Excel.Worksheet.showHeadings
      - excel_release.Excel.Worksheet.standardHeight
      - excel_release.Excel.Worksheet.standardWidth
      - excel_release.Excel.Worksheet.tabColor
      - excel_release.Excel.Worksheet.tables
      - excel_release.Excel.Worksheet.toJSON
      - excel_release.Excel.Worksheet.visibility
  - uid: excel_release.Excel.Worksheet.activate
    summary: |-
      <span data-ttu-id="674d9-104">Активация листа в пользовательском интерфейсе Excel.</span><span class="sxs-lookup"><span data-stu-id="674d9-104">Activate the worksheet in the Excel UI.</span></span>

      <span data-ttu-id="674d9-105">\[[Набор API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="674d9-105">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: activate()
    fullName: activate()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'activate(): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a><span data-ttu-id="674d9-106">Примеры</span><span class="sxs-lookup"><span data-stu-id="674d9-106">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var wSheetName = 'Sheet1';
              var worksheet = ctx.workbook.worksheets.getItem(wSheetName);
              worksheet.activate();
              return ctx.sync(); 
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: excel_release.Excel.Worksheet.calculate
    summary: |-
      <span data-ttu-id="674d9-107">Вычисляет все ячейки на листе.</span><span class="sxs-lookup"><span data-stu-id="674d9-107">Calculates all cells on a worksheet.</span></span>

      <span data-ttu-id="674d9-108">\[[Набор API: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="674d9-108">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: calculate(markAllDirty)
    fullName: calculate(markAllDirty)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'calculate(markAllDirty: boolean): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: markAllDirty
          description: '<span data-ttu-id="674d9-109">Значение true, чтобы пометить все как "грязный".</span><span class="sxs-lookup"><span data-stu-id="674d9-109">True, to mark all as dirty.</span></span>'
          type:
            - boolean
  - uid: excel_release.Excel.Worksheet.charts
    summary: |-
      <span data-ttu-id="674d9-110">Возвращает коллекцию диаграмм, имеющихся на листе.</span><span class="sxs-lookup"><span data-stu-id="674d9-110">Returns collection of charts that are part of the worksheet.</span></span> <span data-ttu-id="674d9-111">Только для чтения.</span><span class="sxs-lookup"><span data-stu-id="674d9-111">Read-only.</span></span>

      <span data-ttu-id="674d9-112">\[[Набор API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="674d9-112">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: charts
    fullName: charts
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly charts: Excel.ChartCollection;'
      return:
        type:
          - excel.Excel.ChartCollection
  - uid: excel_release.Excel.Worksheet.context
    summary: '<span data-ttu-id="674d9-113">Контекст запроса, связанный с объектом.</span><span class="sxs-lookup"><span data-stu-id="674d9-113">The request context associated with the object.</span></span> <span data-ttu-id="674d9-114">Это подсоединяет процесс надстройки к процессу ведущего приложения Office.</span><span class="sxs-lookup"><span data-stu-id="674d9-114">This connects the add-in''s process to the Office host application''s process.</span></span>'
    name: context
    fullName: context
    langs:
      - typeScript
    type: property
    syntax:
      content: 'context: RequestContext;'
      return:
        type:
          - RequestContext
  - uid: excel_release.Excel.Worksheet.copy
    summary: |-
      <span data-ttu-id="674d9-115">Копирует лист и размещает его в указанном положении.</span><span class="sxs-lookup"><span data-stu-id="674d9-115">Copy a worksheet and place it at the specified position.</span></span> <span data-ttu-id="674d9-116">Возвращает скопированный лист.</span><span class="sxs-lookup"><span data-stu-id="674d9-116">Return the copied worksheet.</span></span>

      <span data-ttu-id="674d9-117">\[[Набор API: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="674d9-117">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: 'copy(positionType, relativeTo)'
    fullName: 'copy(positionType, relativeTo)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'copy(positionType?: Excel.WorksheetPositionType, relativeTo?: Excel.Worksheet): Excel.Worksheet;'
      return:
        type:
          - excel.Excel.Worksheet
        description: |-


          #### <a name="examples"></a><span data-ttu-id="674d9-118">Примеры</span><span class="sxs-lookup"><span data-stu-id="674d9-118">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {

              let myWorkbook = context.workbook;
              let sampleSheet = myWorkbook.worksheets.getActiveWorksheet();
              let copiedSheet = sampleSheet.copy("End")

              sampleSheet.load("name");
              copiedSheet.load("name");

              await context.sync();

              console.log("'" + sampleSheet.name + "' was copied to '" + copiedSheet.name + "'")
          });
          ```
      parameters:
        - id: positionType
          description: <span data-ttu-id="674d9-119">Необязательный.</span><span class="sxs-lookup"><span data-stu-id="674d9-119">Optional.</span></span>
          type:
            - excel.Excel.WorksheetPositionType
        - id: relativeTo
          description: <span data-ttu-id="674d9-120">Необязательный.</span><span class="sxs-lookup"><span data-stu-id="674d9-120">Optional.</span></span>
          type:
            - excel.Excel.Worksheet
  - uid: excel_release.Excel.Worksheet.copy_1
    summary: |-
      <span data-ttu-id="674d9-121">Копирует лист и размещает его в указанном положении.</span><span class="sxs-lookup"><span data-stu-id="674d9-121">Copy a worksheet and place it at the specified position.</span></span> <span data-ttu-id="674d9-122">Возвращает скопированный лист.</span><span class="sxs-lookup"><span data-stu-id="674d9-122">Return the copied worksheet.</span></span>

      <span data-ttu-id="674d9-123">\[[Набор API: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="674d9-123">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: 'copy(positionTypeString, relativeTo)'
    fullName: 'copy(positionTypeString, relativeTo)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'copy(positionTypeString?: "None" | "Before" | "After" | "Beginning" | "End", relativeTo?: Excel.Worksheet): Excel.Worksheet;'
      return:
        type:
          - excel.Excel.Worksheet
        description: ''
      parameters:
        - id: positionTypeString
          description: <span data-ttu-id="674d9-124">Необязательный.</span><span class="sxs-lookup"><span data-stu-id="674d9-124">Optional.</span></span>
          type:
            - '"None" | "Before" | "After" | "Beginning" | "End"'
        - id: relativeTo
          description: <span data-ttu-id="674d9-125">Необязательный.</span><span class="sxs-lookup"><span data-stu-id="674d9-125">Optional.</span></span>
          type:
            - excel.Excel.Worksheet
  - uid: excel_release.Excel.Worksheet.delete
    summary: |-
      <span data-ttu-id="674d9-126">Удаляет лист из книги.</span><span class="sxs-lookup"><span data-stu-id="674d9-126">Deletes the worksheet from the workbook.</span></span>

      <span data-ttu-id="674d9-127">\[[Набор API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="674d9-127">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: delete()
    fullName: delete()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'delete(): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a><span data-ttu-id="674d9-128">Примеры</span><span class="sxs-lookup"><span data-stu-id="674d9-128">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var wSheetName = 'Sheet1';
              var worksheet = ctx.workbook.worksheets.getItem(wSheetName);
              worksheet.delete();
              return ctx.sync(); 
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: excel_release.Excel.Worksheet.freezePanes
    summary: |-
      <span data-ttu-id="674d9-129">Получает объект, который можно использовать для работы с замороженными областями на листе.</span><span class="sxs-lookup"><span data-stu-id="674d9-129">Gets an object that can be used to manipulate frozen panes on the worksheet.</span></span> <span data-ttu-id="674d9-130">Только для чтения.</span><span class="sxs-lookup"><span data-stu-id="674d9-130">Read-only.</span></span>

      <span data-ttu-id="674d9-131">\[[Набор API: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="674d9-131">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: freezePanes
    fullName: freezePanes
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly freezePanes: Excel.WorksheetFreezePanes;'
      return:
        type:
          - excel.Excel.WorksheetFreezePanes
  - uid: excel_release.Excel.Worksheet.getCell
    summary: |-
      <span data-ttu-id="674d9-132">Получает объект диапазона, содержащий одну ячейку, по номеру строки и столбца.</span><span class="sxs-lookup"><span data-stu-id="674d9-132">Gets the range object containing the single cell based on row and column numbers.</span></span> <span data-ttu-id="674d9-133">Ячейка может находиться вне границ родительского диапазона, пока она остается в сетке листа.</span><span class="sxs-lookup"><span data-stu-id="674d9-133">The cell can be outside the bounds of its parent range, so long as it stays within the worksheet grid.</span></span>

      <span data-ttu-id="674d9-134">\[[Набор API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="674d9-134">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: 'getCell(row, column)'
    fullName: 'getCell(row, column)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getCell(row: number, column: number): Excel.Range;'
      return:
        type:
          - excel.Excel.Range
        description: |-


          #### <a name="examples"></a><span data-ttu-id="674d9-135">Примеры</span><span class="sxs-lookup"><span data-stu-id="674d9-135">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "A1:F8";
              var worksheet = ctx.workbook.worksheets.getItem(sheetName);
              var cell = worksheet.getCell(0,0);
              cell.load('address');
              return ctx.sync().then(function() {
                  console.log(cell.address);
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: row
          description: '<span data-ttu-id="674d9-136">Номер строки ячейки, которую требуется извлечь.</span><span class="sxs-lookup"><span data-stu-id="674d9-136">The row number of the cell to be retrieved.</span></span> <span data-ttu-id="674d9-137">Используется нулевой индекс.</span><span class="sxs-lookup"><span data-stu-id="674d9-137">Zero-indexed.</span></span>'
          type:
            - number
        - id: column
          description: '<span data-ttu-id="674d9-138">Номер столбца ячейки, которую требуется извлечь.</span><span class="sxs-lookup"><span data-stu-id="674d9-138">the column number of the cell to be retrieved.</span></span> <span data-ttu-id="674d9-139">Используется нулевой индекс.</span><span class="sxs-lookup"><span data-stu-id="674d9-139">Zero-indexed.</span></span>'
          type:
            - number
  - uid: excel_release.Excel.Worksheet.getNext
    summary: |-
      <span data-ttu-id="674d9-140">Получает лист, следующий по отношению к элементу.</span><span class="sxs-lookup"><span data-stu-id="674d9-140">Gets the worksheet that follows this one.</span></span> <span data-ttu-id="674d9-141">При отсутствии листов, указанных ниже, этот метод вызовет ошибку.</span><span class="sxs-lookup"><span data-stu-id="674d9-141">If there are no worksheets following this one, this method will throw an error.</span></span>

      <span data-ttu-id="674d9-142">\[[Набор API: ExcelApi 1,5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="674d9-142">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getNext(visibleOnly)
    fullName: getNext(visibleOnly)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getNext(visibleOnly?: boolean): Excel.Worksheet;'
      return:
        type:
          - excel.Excel.Worksheet
        description: |-


          #### <a name="examples"></a><span data-ttu-id="674d9-143">Примеры</span><span class="sxs-lookup"><span data-stu-id="674d9-143">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheets = context.workbook.worksheets;

              // We don't want to include the default worksheet that was created
              // when the workbook was created, so our "firstSheet" will be the one
              // after the literal first. Note chaining of navigation methods.
              const firstSheet = sheets.getFirst().getNext();
              const lastSheet = sheets.getLast();
              const firstTaxRateRange = firstSheet.getRange("B2");
              const lastTaxRateRange = lastSheet.getRange("B2");

              firstSheet.load("name");
              lastSheet.load("name");
              firstTaxRateRange.load("text");
              lastTaxRateRange.load("text");

              await context.sync();

              let firstYear = firstSheet.name.substr(5, 4);
              let lastYear = lastSheet.name.substr(5, 4);
              console.log(`Tax Rate change from ${firstYear} to ${lastYear}`, `Tax rate for ${firstYear}: ${firstTaxRateRange.text[0][0]}\nTax rate for ${lastYear}: ${lastTaxRateRange.text[0][0]}`)

              await context.sync();
          });
          ```
      parameters:
        - id: visibleOnly
          description: '<span data-ttu-id="674d9-144">Необязательно.</span><span class="sxs-lookup"><span data-stu-id="674d9-144">Optional.</span></span> <span data-ttu-id="674d9-145">Если задано значение true, учитываются только видимые листы, пропуская все скрытые.</span><span class="sxs-lookup"><span data-stu-id="674d9-145">If true, considers only visible worksheets, skipping over any hidden ones.</span></span>'
          type:
            - boolean
  - uid: excel_release.Excel.Worksheet.getNextOrNullObject
    summary: |-
      <span data-ttu-id="674d9-146">Получает лист, следующий по отношению к элементу.</span><span class="sxs-lookup"><span data-stu-id="674d9-146">Gets the worksheet that follows this one.</span></span> <span data-ttu-id="674d9-147">Если после этого листа нет ни одного листа, этот метод возвратит нулевой объект.</span><span class="sxs-lookup"><span data-stu-id="674d9-147">If there are no worksheets following this one, this method will return a null object.</span></span>

      <span data-ttu-id="674d9-148">\[[Набор API: ExcelApi 1,5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="674d9-148">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getNextOrNullObject(visibleOnly)
    fullName: getNextOrNullObject(visibleOnly)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getNextOrNullObject(visibleOnly?: boolean): Excel.Worksheet;'
      return:
        type:
          - excel.Excel.Worksheet
        description: ''
      parameters:
        - id: visibleOnly
          description: '<span data-ttu-id="674d9-149">Необязательно.</span><span class="sxs-lookup"><span data-stu-id="674d9-149">Optional.</span></span> <span data-ttu-id="674d9-150">Если задано значение true, учитываются только видимые листы, пропуская все скрытые.</span><span class="sxs-lookup"><span data-stu-id="674d9-150">If true, considers only visible worksheets, skipping over any hidden ones.</span></span>'
          type:
            - boolean
  - uid: excel_release.Excel.Worksheet.getPrevious
    summary: |-
      <span data-ttu-id="674d9-151">Получает лист, который предшествует этому.</span><span class="sxs-lookup"><span data-stu-id="674d9-151">Gets the worksheet that precedes this one.</span></span> <span data-ttu-id="674d9-152">Если нет предыдущих листов, этот метод выдаст ошибку.</span><span class="sxs-lookup"><span data-stu-id="674d9-152">If there are no previous worksheets, this method will throw an error.</span></span>

      <span data-ttu-id="674d9-153">\[[Набор API: ExcelApi 1,5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="674d9-153">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getPrevious(visibleOnly)
    fullName: getPrevious(visibleOnly)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getPrevious(visibleOnly?: boolean): Excel.Worksheet;'
      return:
        type:
          - excel.Excel.Worksheet
        description: |-


          #### <a name="examples"></a><span data-ttu-id="674d9-154">Примеры</span><span class="sxs-lookup"><span data-stu-id="674d9-154">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheets = context.workbook.worksheets;
              const currentSheet = sheets.getActiveWorksheet();
              const previousYearSheet = currentSheet.getPrevious();
              const currentTaxDueRange = currentSheet.getRange("C2");
              const previousTaxDueRange = previousYearSheet.getRange("C2");

              currentSheet.load("name");
              previousYearSheet.load("name");
              currentTaxDueRange.load("text");
              previousTaxDueRange.load("text");

              await context.sync();

              let currentYear = currentSheet.name.substr(5, 4);
              let previousYear = previousYearSheet.name.substr(5, 4);
              console.log("Two Year Tax Due Comparison", `Tax due for ${currentYear} was ${currentTaxDueRange.text[0][0]}\nTax due for ${previousYear} was ${previousTaxDueRange.text[0][0]}`)

              await context.sync();
          });
          ```
      parameters:
        - id: visibleOnly
          description: '<span data-ttu-id="674d9-155">Необязательно.</span><span class="sxs-lookup"><span data-stu-id="674d9-155">Optional.</span></span> <span data-ttu-id="674d9-156">Если задано значение true, учитываются только видимые листы, пропуская все скрытые.</span><span class="sxs-lookup"><span data-stu-id="674d9-156">If true, considers only visible worksheets, skipping over any hidden ones.</span></span>'
          type:
            - boolean
  - uid: excel_release.Excel.Worksheet.getPreviousOrNullObject
    summary: |-
      <span data-ttu-id="674d9-157">Получает лист, который предшествует этому.</span><span class="sxs-lookup"><span data-stu-id="674d9-157">Gets the worksheet that precedes this one.</span></span> <span data-ttu-id="674d9-158">Если нет предыдущих листов, этот метод возвратит значение NULL обжет.</span><span class="sxs-lookup"><span data-stu-id="674d9-158">If there are no previous worksheets, this method will return a null objet.</span></span>

      <span data-ttu-id="674d9-159">\[[Набор API: ExcelApi 1,5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="674d9-159">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getPreviousOrNullObject(visibleOnly)
    fullName: getPreviousOrNullObject(visibleOnly)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getPreviousOrNullObject(visibleOnly?: boolean): Excel.Worksheet;'
      return:
        type:
          - excel.Excel.Worksheet
        description: ''
      parameters:
        - id: visibleOnly
          description: '<span data-ttu-id="674d9-160">Необязательно.</span><span class="sxs-lookup"><span data-stu-id="674d9-160">Optional.</span></span> <span data-ttu-id="674d9-161">Если задано значение true, учитываются только видимые листы, пропуская все скрытые.</span><span class="sxs-lookup"><span data-stu-id="674d9-161">If true, considers only visible worksheets, skipping over any hidden ones.</span></span>'
          type:
            - boolean
  - uid: excel_release.Excel.Worksheet.getRange
    summary: |-
      <span data-ttu-id="674d9-162">Получает объект Range, представляющий отдельный прямоугольный блок ячеек, заданный по адресу или имени.</span><span class="sxs-lookup"><span data-stu-id="674d9-162">Gets the range object, representing a single rectangular block of cells, specified by the address or name.</span></span>

      <span data-ttu-id="674d9-163">\[[Набор API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="674d9-163">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getRange(address)
    fullName: getRange(address)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getRange(address?: string): Excel.Range;'
      return:
        type:
          - excel.Excel.Range
        description: |-


          #### <a name="examples"></a><span data-ttu-id="674d9-164">Примеры</span><span class="sxs-lookup"><span data-stu-id="674d9-164">Examples</span></span>

          ```javascript
          // Below example uses range address to get the range object.
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "A1:F8";
              var worksheet = ctx.workbook.worksheets.getItem(sheetName);
              var range = worksheet.getRange(rangeAddress);
              range.load('cellCount');
              return ctx.sync().then(function() {
                  console.log(range.cellCount);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
          ```javascript
          // Below example uses a named-range to get the range object.
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeName = 'MyRange';
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeName);
              range.load('address');
              return ctx.sync().then(function() {
                  console.log(range.address);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: address
          description: '<span data-ttu-id="674d9-165">Необязательно.</span><span class="sxs-lookup"><span data-stu-id="674d9-165">Optional.</span></span> <span data-ttu-id="674d9-166">Строка, представляющая адрес или имя диапазона.</span><span class="sxs-lookup"><span data-stu-id="674d9-166">The string representing the address or name of the range.</span></span> <span data-ttu-id="674d9-167">Например, "a1: B2".</span><span class="sxs-lookup"><span data-stu-id="674d9-167">For example, "A1:B2".</span></span> <span data-ttu-id="674d9-168">Если аргумент не указан, возвращается весь диапазон листа.</span><span class="sxs-lookup"><span data-stu-id="674d9-168">If not specified, the entire worksheet range is returned.</span></span>'
          type:
            - string
  - uid: excel_release.Excel.Worksheet.getRangeByIndexes
    summary: |-
      <span data-ttu-id="674d9-169">Получает объект диапазона, начинающегося с определенных строки и столбца и занимающего определенное количество строк и столбцов.</span><span class="sxs-lookup"><span data-stu-id="674d9-169">Gets the range object beginning at a particular row index and column index, and spanning a certain number of rows and columns.</span></span>

      <span data-ttu-id="674d9-170">\[[Набор API: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="674d9-170">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: 'getRangeByIndexes(startRow, startColumn, rowCount, columnCount)'
    fullName: 'getRangeByIndexes(startRow, startColumn, rowCount, columnCount)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getRangeByIndexes(startRow: number, startColumn: number, rowCount: number, columnCount: number): Excel.Range;'
      return:
        type:
          - excel.Excel.Range
        description: ''
      parameters:
        - id: startRow
          description: <span data-ttu-id="674d9-171">Строка начала (с нулевым индексированием).</span><span class="sxs-lookup"><span data-stu-id="674d9-171">Start row (zero-indexed).</span></span>
          type:
            - number
        - id: startColumn
          description: <span data-ttu-id="674d9-172">Столбец "начало" (с нулевым индексом).</span><span class="sxs-lookup"><span data-stu-id="674d9-172">Start column (zero-indexed).</span></span>
          type:
            - number
        - id: rowCount
          description: '<span data-ttu-id="674d9-173">Количество строк, включаемых в диапазон.</span><span class="sxs-lookup"><span data-stu-id="674d9-173">Number of rows to include in the range.</span></span>'
          type:
            - number
        - id: columnCount
          description: '<span data-ttu-id="674d9-174">Число столбцов, включаемых в диапазон.</span><span class="sxs-lookup"><span data-stu-id="674d9-174">Number of columns to include in the range.</span></span>'
          type:
            - number
  - uid: excel_release.Excel.Worksheet.getUsedRange
    summary: |-
      <span data-ttu-id="674d9-175">Используемый диапазон — это наименьший диапазон, включающий в себя все ячейки с определенным значением или форматированием.</span><span class="sxs-lookup"><span data-stu-id="674d9-175">The used range is the smallest range that encompasses any cells that have a value or formatting assigned to them.</span></span> <span data-ttu-id="674d9-176">Если лист пуст, эта функция возвратит верхнюю левую ячейку (то есть *не* выдает ошибку).</span><span class="sxs-lookup"><span data-stu-id="674d9-176">If the entire worksheet is blank, this function will return the top left cell (i.e. it will *not* throw an error).</span></span>

      <span data-ttu-id="674d9-177">\[[Набор API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="674d9-177">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getUsedRange(valuesOnly)
    fullName: getUsedRange(valuesOnly)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getUsedRange(valuesOnly?: boolean): Excel.Range;'
      return:
        type:
          - excel.Excel.Range
        description: |-


          #### <a name="examples"></a><span data-ttu-id="674d9-178">Примеры</span><span class="sxs-lookup"><span data-stu-id="674d9-178">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var wSheetName = 'Sheet1';
              var worksheet = ctx.workbook.worksheets.getItem(wSheetName);
              var usedRange = worksheet.getUsedRange();
              usedRange.load('address');
              return ctx.sync().then(function() {
                      console.log(usedRange.address);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: valuesOnly
          description: '<span data-ttu-id="674d9-179">Необязательно.</span><span class="sxs-lookup"><span data-stu-id="674d9-179">Optional.</span></span> <span data-ttu-id="674d9-180">Если этот параметр имеет значение true, учитываются только ячейки со значениями в качестве используемых ячеек (игнорируя форматирование).</span><span class="sxs-lookup"><span data-stu-id="674d9-180">If true, considers only cells with values as used cells (ignoring formatting).</span></span> <span data-ttu-id="674d9-181">\[Набор API: ExcelApi 1,2\]</span><span class="sxs-lookup"><span data-stu-id="674d9-181">\[Api set: ExcelApi 1.2\]</span></span>'
          type:
            - boolean
  - uid: excel_release.Excel.Worksheet.getUsedRangeOrNullObject
    summary: "<span data-ttu-id=\"674d9-p121\">Используемый диапазон\_— это наименьший диапазон, включающий в себя все ячейки, которые содержат значение или форматирование. Если весь лист пустой, эта функция возвращает пустой объект.</span><span class=\"sxs-lookup\"><span data-stu-id=\"674d9-p121\">The used range is the smallest range that encompasses any cells that have a value or formatting assigned to them. If the entire worksheet is blank, this function will return a null object.</span></span>\n\n<span data-ttu-id=\"674d9-184\">\\[[Набор API: ExcelApi 1,4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\\]</span><span class=\"sxs-lookup\"><span data-stu-id=\"674d9-184\">\\[ [API set: ExcelApi 1.4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \\]</span></span>"
    name: getUsedRangeOrNullObject(valuesOnly)
    fullName: getUsedRangeOrNullObject(valuesOnly)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getUsedRangeOrNullObject(valuesOnly?: boolean): Excel.Range;'
      return:
        type:
          - excel.Excel.Range
        description: ''
      parameters:
        - id: valuesOnly
          description: <span data-ttu-id="674d9-185">Необязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="674d9-185">Optional.</span></span> <span data-ttu-id="674d9-186">Учитывает только ячейки со значениями.</span><span class="sxs-lookup"><span data-stu-id="674d9-186">Considers only cells with values as used cells.</span></span>
          type:
            - boolean
  - uid: excel_release.Excel.Worksheet.id
    summary: |-
      <span data-ttu-id="674d9-p123">Возвращает значение, однозначно идентифицирующее лист в данной книге. Значение идентификатора остается прежним, даже если переименовать или переместить лист. Только для чтения.</span><span class="sxs-lookup"><span data-stu-id="674d9-p123">Returns a value that uniquely identifies the worksheet in a given workbook. The value of the identifier remains the same even when the worksheet is renamed or moved. Read-only.</span></span>

      <span data-ttu-id="674d9-190">\[[Набор API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="674d9-190">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: id
    fullName: id
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly id: string;'
      return:
        type:
          - string
  - uid: excel_release.Excel.Worksheet.load
    summary: <span data-ttu-id="674d9-191">Добавляет в очередь команду для загрузки указанных свойств объекта.</span><span class="sxs-lookup"><span data-stu-id="674d9-191">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="674d9-192">Перед чтением свойств необходимо вызвать метод context.sync().</span><span class="sxs-lookup"><span data-stu-id="674d9-192">You must call "context.sync()" before reading the properties.</span></span>
    remarks: |-
      <span data-ttu-id="674d9-193">В дополнение к этой подписи этот метод имеет следующие подписи:</span><span class="sxs-lookup"><span data-stu-id="674d9-193">In addition to this signature, this method has the following signatures:</span></span>

      <span data-ttu-id="674d9-194">`load(option?: string | string[]): Excel.Worksheet`-WHERE — это строка с разделителями-запятыми или массив строк, указывающий свойства для загрузки.</span><span class="sxs-lookup"><span data-stu-id="674d9-194">`load(option?: string | string[]): Excel.Worksheet` - Where option is a comma-delimited string or an array of strings that specify the properties to load.</span></span>

      <span data-ttu-id="674d9-195">`load(option?: { select?: string; expand?: string; }): Excel.Worksheet`-WHERE. Select — это строка с разделителями-запятыми, указывающая свойства для загрузки и параметры. Expand — это строка с разделителями-запятыми, указывающая свойства навигации для загрузки.</span><span class="sxs-lookup"><span data-stu-id="674d9-195">`load(option?: { select?: string; expand?: string; }): Excel.Worksheet` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.</span></span>

      <span data-ttu-id="674d9-196">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.Worksheet`— Доступно только для типов коллекций.</span><span class="sxs-lookup"><span data-stu-id="674d9-196">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.Worksheet` - Only available on collection types.</span></span> <span data-ttu-id="674d9-197">Он аналогичен предыдущей подписи.</span><span class="sxs-lookup"><span data-stu-id="674d9-197">It is similar to the preceding signature.</span></span> <span data-ttu-id="674d9-198">Option. Top указывает максимальное количество элементов коллекции, которые можно включить в результат.</span><span class="sxs-lookup"><span data-stu-id="674d9-198">Option.top specifies the maximum number of collection items that can be included in the result.</span></span> <span data-ttu-id="674d9-199">Option. skip указывает количество элементов, которые будут пропущены и не включены в результат.</span><span class="sxs-lookup"><span data-stu-id="674d9-199">Option.skip specifies the number of items that are to be skipped and not included in the result.</span></span> <span data-ttu-id="674d9-200">Если указан параметр Option. Top, результирующий набор начнется после пропуска указанного числа элементов.</span><span class="sxs-lookup"><span data-stu-id="674d9-200">If option.top is specified, the result set will start after skipping the specified number of items.</span></span>
    name: load(option)
    fullName: load(option)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(option?: Excel.Interfaces.WorksheetLoadOptions): Excel.Worksheet;'
      return:
        type:
          - excel.Excel.Worksheet
        description: ''
      parameters:
        - id: option
          description: ''
          type:
            - excel.Excel.Interfaces.WorksheetLoadOptions
  - uid: excel_release.Excel.Worksheet.load_1
    summary: <span data-ttu-id="674d9-201">Добавляет в очередь команду для загрузки указанных свойств объекта.</span><span class="sxs-lookup"><span data-stu-id="674d9-201">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="674d9-202">Перед чтением свойств `context.sync()` необходимо вызвать метод.</span><span class="sxs-lookup"><span data-stu-id="674d9-202">You must call `context.sync()` before reading the properties.</span></span>
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): Excel.Worksheet;'
      return:
        type:
          - excel.Excel.Worksheet
        description: |-


          #### <a name="examples"></a><span data-ttu-id="674d9-203">Примеры</span><span class="sxs-lookup"><span data-stu-id="674d9-203">Examples</span></span>

          ```javascript
          // Get worksheet properties based on sheet name.
          Excel.run(function (ctx) { 
              var wSheetName = 'Sheet1';
              var worksheet = ctx.workbook.worksheets.getItem(wSheetName);
              worksheet.load('position')
              return ctx.sync().then(function() {
                      console.log(worksheet.position);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
          ```javascript
          // Set worksheet position. 
          Excel.run(function (ctx) { 
              var wSheetName = 'Sheet1';
              var worksheet = ctx.workbook.worksheets.getItem(wSheetName);
              worksheet.position = 2;
              return ctx.sync(); 
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: propertyNames
          description: '<span data-ttu-id="674d9-204">Строка, разделенная запятыми, или массив строк, указывающий свойства для загрузки.</span><span class="sxs-lookup"><span data-stu-id="674d9-204">A comma-delimited string or an array of strings that specify the properties to load.</span></span>'
          type:
            - 'string | string[]'
  - uid: excel_release.Excel.Worksheet.load_2
    summary: <span data-ttu-id="674d9-205">Добавляет в очередь команду для загрузки указанных свойств объекта.</span><span class="sxs-lookup"><span data-stu-id="674d9-205">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="674d9-206">Перед чтением свойств `context.sync()` необходимо вызвать метод.</span><span class="sxs-lookup"><span data-stu-id="674d9-206">You must call `context.sync()` before reading the properties.</span></span>
    name: load(propertyNamesAndPaths)
    fullName: load(propertyNamesAndPaths)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNamesAndPaths?: { select?: string; expand?: string; }): Excel.Worksheet;'
      return:
        type:
          - excel.Excel.Worksheet
        description: ''
      parameters:
        - id: propertyNamesAndPaths
          description: '<span data-ttu-id="674d9-207">Где Пропертинамесандпасс. Select — это строка с разделителями-запятыми, задающая свойства для загрузки, и Пропертинамесандпасс. Expand — это строка с разделителями-запятыми, указывающая свойства навигации для загрузки.</span><span class="sxs-lookup"><span data-stu-id="674d9-207">Where propertyNamesAndPaths.select is a comma-delimited string that specifies the properties to load, and propertyNamesAndPaths.expand is a comma-delimited string that specifies the navigation properties to load.</span></span>'
          type:
            - '{ select?: string; expand?: string; }'
  - uid: excel_release.Excel.Worksheet.name
    summary: |-
      <span data-ttu-id="674d9-208">Отображаемое имя листа.</span><span class="sxs-lookup"><span data-stu-id="674d9-208">The display name of the worksheet.</span></span>

      <span data-ttu-id="674d9-209">\[[Набор API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="674d9-209">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: name
    fullName: name
    langs:
      - typeScript
    type: property
    syntax:
      content: 'name: string;'
      return:
        type:
          - string
  - uid: excel_release.Excel.Worksheet.names
    summary: |-
      <span data-ttu-id="674d9-210">Коллекция имен, относящих к текущему листу.</span><span class="sxs-lookup"><span data-stu-id="674d9-210">Collection of names scoped to the current worksheet.</span></span> <span data-ttu-id="674d9-211">Только для чтения.</span><span class="sxs-lookup"><span data-stu-id="674d9-211">Read-only.</span></span>

      <span data-ttu-id="674d9-212">\[[Набор API: ExcelApi 1,4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="674d9-212">\[ [API set: ExcelApi 1.4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: names
    fullName: names
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly names: Excel.NamedItemCollection;'
      return:
        type:
          - excel.Excel.NamedItemCollection
  - uid: excel_release.Excel.Worksheet.onActivated
    summary: |-
      <span data-ttu-id="674d9-213">Возникает при активации листа.</span><span class="sxs-lookup"><span data-stu-id="674d9-213">Occurs when the worksheet is activated.</span></span>

      <span data-ttu-id="674d9-214">\[[Набор API: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="674d9-214">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: onActivated
    fullName: onActivated
    langs:
      - typeScript
    type: event
    syntax:
      content: 'readonly onActivated: OfficeExtension.EventHandlers<Excel.WorksheetActivatedEventArgs>;'
      return:
        type:
          - OfficeExtension.EventHandlers<Excel.WorksheetActivatedEventArgs>
        description: |-


          #### <a name="examples"></a><span data-ttu-id="674d9-215">Примеры</span><span class="sxs-lookup"><span data-stu-id="674d9-215">Examples</span></span>

          ```javascript
          Excel.run(function (context) {
              var sheet = context.workbook.worksheets.getItem("Sample");
              sheet.onActivated.add(function (event) {
                  return Excel.run((context) => {
                      console.log("The activated worksheet ID is: " + event.worksheetId);
                      return context.sync();
                  });
              });
              return context.sync();
          });
          ```
  - uid: excel_release.Excel.Worksheet.onCalculated
    summary: |-
      <span data-ttu-id="674d9-216">Возникает при вычислении листа.</span><span class="sxs-lookup"><span data-stu-id="674d9-216">Occurs when the worksheet is calculated.</span></span>

      <span data-ttu-id="674d9-217">\[[Набор API: ExcelApi 1,8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="674d9-217">\[ [API set: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: onCalculated
    fullName: onCalculated
    langs:
      - typeScript
    type: event
    syntax:
      content: 'readonly onCalculated: OfficeExtension.EventHandlers<Excel.WorksheetCalculatedEventArgs>;'
      return:
        type:
          - OfficeExtension.EventHandlers<Excel.WorksheetCalculatedEventArgs>
        description: |-


          #### <a name="examples"></a><span data-ttu-id="674d9-218">Примеры</span><span class="sxs-lookup"><span data-stu-id="674d9-218">Examples</span></span>

          ```javascript
          Excel.run(function (context) {
              var sheet = context.workbook.worksheets.getItem("Sample");
              sheet.onCalculated.add(function (event) {
                  return Excel.run((context) => {
                      console.log("The worksheet has recalculated.");
                      return context.sync();
                  });
              });
              return context.sync();
          });
          ```
  - uid: excel_release.Excel.Worksheet.onChanged
    summary: |-
      <span data-ttu-id="674d9-219">Происходит при изменении данных на конкретном листе.</span><span class="sxs-lookup"><span data-stu-id="674d9-219">Occurs when data changed on a specific worksheet.</span></span>

      <span data-ttu-id="674d9-220">\[[Набор API: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="674d9-220">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: onChanged
    fullName: onChanged
    langs:
      - typeScript
    type: event
    syntax:
      content: 'readonly onChanged: OfficeExtension.EventHandlers<Excel.WorksheetChangedEventArgs>;'
      return:
        type:
          - OfficeExtension.EventHandlers<Excel.WorksheetChangedEventArgs>
        description: |-


          #### <a name="examples"></a><span data-ttu-id="674d9-221">Примеры</span><span class="sxs-lookup"><span data-stu-id="674d9-221">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              let sheet = context.workbook.worksheets.getItem("Sample");
              sheet.onChanged.add(onChange);

              await context.sync();
              console.log("A handler has been registered for the onChanged event.");
          });
          ```
  - uid: excel_release.Excel.Worksheet.onDeactivated
    summary: |-
      <span data-ttu-id="674d9-222">Возникает при отключении рабочего листа.</span><span class="sxs-lookup"><span data-stu-id="674d9-222">Occurs when the worksheet is deactivated.</span></span>

      <span data-ttu-id="674d9-223">\[[Набор API: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="674d9-223">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: onDeactivated
    fullName: onDeactivated
    langs:
      - typeScript
    type: event
    syntax:
      content: 'readonly onDeactivated: OfficeExtension.EventHandlers<Excel.WorksheetDeactivatedEventArgs>;'
      return:
        type:
          - OfficeExtension.EventHandlers<Excel.WorksheetDeactivatedEventArgs>
        description: |-


          #### <a name="examples"></a><span data-ttu-id="674d9-224">Примеры</span><span class="sxs-lookup"><span data-stu-id="674d9-224">Examples</span></span>

          ```javascript
          Excel.run(function (context) {
              var sheet = context.workbook.worksheets.getItem("Sample");
              sheet.onDeactivated.add(function (event) {
                  return Excel.run((context) => {
                      console.log("The deactivated worksheet is: " + event.worksheetId);
                      return context.sync();
                  });
              });
              return context.sync();
          });
          ```
  - uid: excel_release.Excel.Worksheet.onSelectionChanged
    summary: |-
      <span data-ttu-id="674d9-225">Возникает при изменении выделенного фрагмента на определенном листе.</span><span class="sxs-lookup"><span data-stu-id="674d9-225">Occurs when the selection changes on a specific worksheet.</span></span>

      <span data-ttu-id="674d9-226">\[[Набор API: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="674d9-226">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: onSelectionChanged
    fullName: onSelectionChanged
    langs:
      - typeScript
    type: event
    syntax:
      content: 'readonly onSelectionChanged: OfficeExtension.EventHandlers<Excel.WorksheetSelectionChangedEventArgs>;'
      return:
        type:
          - OfficeExtension.EventHandlers<Excel.WorksheetSelectionChangedEventArgs>
        description: |-


          #### <a name="examples"></a><span data-ttu-id="674d9-227">Примеры</span><span class="sxs-lookup"><span data-stu-id="674d9-227">Examples</span></span>

          ```javascript
          Excel.run(function (context) {
              var sheet = context.workbook.worksheets.getItem("Sample");
              sheet.onSelectionChanged.add(function (event) {
                  return Excel.run((context) => {
                      console.log("The selected range has changed to: " + event.address);
                      return context.sync();
                  });
              });
              return context.sync();
          });
          ```
  - uid: excel_release.Excel.Worksheet.pivotTables
    summary: |-
      <span data-ttu-id="674d9-228">Коллекция сводных таблиц на листе.</span><span class="sxs-lookup"><span data-stu-id="674d9-228">Collection of PivotTables that are part of the worksheet.</span></span> <span data-ttu-id="674d9-229">Только для чтения.</span><span class="sxs-lookup"><span data-stu-id="674d9-229">Read-only.</span></span>

      <span data-ttu-id="674d9-230">\[[Набор API: ExcelApi 1,3](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="674d9-230">\[ [API set: ExcelApi 1.3](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: pivotTables
    fullName: pivotTables
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly pivotTables: Excel.PivotTableCollection;'
      return:
        type:
          - excel.Excel.PivotTableCollection
  - uid: excel_release.Excel.Worksheet.position
    summary: |-
      <span data-ttu-id="674d9-231">Положение листа (начиная с нуля) в книге.</span><span class="sxs-lookup"><span data-stu-id="674d9-231">The zero-based position of the worksheet within the workbook.</span></span>

      <span data-ttu-id="674d9-232">\[[Набор API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="674d9-232">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: position
    fullName: position
    langs:
      - typeScript
    type: property
    syntax:
      content: 'position: number;'
      return:
        type:
          - number
  - uid: excel_release.Excel.Worksheet.protection
    summary: |-
      <span data-ttu-id="674d9-233">Возвращает объект защиты листа.</span><span class="sxs-lookup"><span data-stu-id="674d9-233">Returns sheet protection object for a worksheet.</span></span> <span data-ttu-id="674d9-234">Только для чтения.</span><span class="sxs-lookup"><span data-stu-id="674d9-234">Read-only.</span></span>

      <span data-ttu-id="674d9-235">\[[Набор API: ExcelApi 1,2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="674d9-235">\[ [API set: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: protection
    fullName: protection
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly protection: Excel.WorksheetProtection;'
      return:
        type:
          - excel.Excel.WorksheetProtection
  - uid: excel_release.Excel.Worksheet.set
    summary: '<span data-ttu-id="674d9-236">Задает одновременно несколько свойств объекта.</span><span class="sxs-lookup"><span data-stu-id="674d9-236">Sets multiple properties of an object at the same time.</span></span> <span data-ttu-id="674d9-237">Можно передать либо простой объект с соответствующими свойствами, либо другой объект API того же типа.</span><span class="sxs-lookup"><span data-stu-id="674d9-237">You can pass either a plain object with the appropriate properties, or another API object of the same type.</span></span>'
    remarks: |-
      <span data-ttu-id="674d9-238">Этот метод имеет следующую дополнительную подпись:</span><span class="sxs-lookup"><span data-stu-id="674d9-238">This method has the following additional signature:</span></span>

      `set(properties: Excel.Worksheet): void`
    name: 'set(properties, options)'
    fullName: 'set(properties, options)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'set(properties: Interfaces.WorksheetUpdateData, options?: OfficeExtension.UpdateOptions): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: properties
          description: '<span data-ttu-id="674d9-239">Объект JavaScript со свойствами, которые структурированы исоморфикалли к свойствам объекта, для которого вызывается метод.</span><span class="sxs-lookup"><span data-stu-id="674d9-239">A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.</span></span>'
          type:
            - Interfaces.WorksheetUpdateData
        - id: options
          description: '<span data-ttu-id="674d9-240">Предоставляет возможность подавлять ошибки, если объект Properties пытается задать любые свойства, предназначенные только для чтения.</span><span class="sxs-lookup"><span data-stu-id="674d9-240">Provides an option to suppress errors if the properties object tries to set any read-only properties.</span></span>'
          type:
            - office.OfficeExtension.UpdateOptions
  - uid: excel_release.Excel.Worksheet.set_1
    summary: '<span data-ttu-id="674d9-241">Задает одновременно несколько свойств объекта на основе существующего загруженного объекта.</span><span class="sxs-lookup"><span data-stu-id="674d9-241">Sets multiple properties on the object at the same time, based on an existing loaded object.</span></span>'
    name: set(properties)
    fullName: set(properties)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'set(properties: Excel.Worksheet): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: properties
          description: ''
          type:
            - excel.Excel.Worksheet
  - uid: excel_release.Excel.Worksheet.showGridlines
    summary: |-
      <span data-ttu-id="674d9-242">Получает или задает флаг линий сетки листа.</span><span class="sxs-lookup"><span data-stu-id="674d9-242">Gets or sets the worksheet's gridlines flag.</span></span> <span data-ttu-id="674d9-243">Этот флаг определяет, отображаются ли линии сетки для пользователя.</span><span class="sxs-lookup"><span data-stu-id="674d9-243">This flag determines whether gridlines are visible to the user.</span></span>

      <span data-ttu-id="674d9-244">\[[Набор API: ExcelApi 1,8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="674d9-244">\[ [API set: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: showGridlines
    fullName: showGridlines
    langs:
      - typeScript
    type: property
    syntax:
      content: 'showGridlines: boolean;'
      return:
        type:
          - boolean
        description: |-


          #### <a name="examples"></a><span data-ttu-id="674d9-245">Примеры</span><span class="sxs-lookup"><span data-stu-id="674d9-245">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getActiveWorksheet();
              sheet.showGridlines = true;

              await context.sync();
          });
          ```
  - uid: excel_release.Excel.Worksheet.showHeadings
    summary: |-
      <span data-ttu-id="674d9-246">Получает или задает флаг заголовков листа.</span><span class="sxs-lookup"><span data-stu-id="674d9-246">Gets or sets the worksheet's headings flag.</span></span> <span data-ttu-id="674d9-247">Этот флаг определяет, отображаются ли заголовки для пользователя.</span><span class="sxs-lookup"><span data-stu-id="674d9-247">This flag determines whether headings are visible to the user.</span></span>

      <span data-ttu-id="674d9-248">\[[Набор API: ExcelApi 1,8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="674d9-248">\[ [API set: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: showHeadings
    fullName: showHeadings
    langs:
      - typeScript
    type: property
    syntax:
      content: 'showHeadings: boolean;'
      return:
        type:
          - boolean
  - uid: excel_release.Excel.Worksheet.standardHeight
    summary: |-
      <span data-ttu-id="674d9-249">Возвращает стандартную (по умолчанию) высоту всех строк на листе (в пунктах).</span><span class="sxs-lookup"><span data-stu-id="674d9-249">Returns the standard (default) height of all the rows in the worksheet, in points.</span></span> <span data-ttu-id="674d9-250">Только для чтения.</span><span class="sxs-lookup"><span data-stu-id="674d9-250">Read-only.</span></span>

      <span data-ttu-id="674d9-251">\[[Набор API: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="674d9-251">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: standardHeight
    fullName: standardHeight
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly standardHeight: number;'
      return:
        type:
          - number
  - uid: excel_release.Excel.Worksheet.standardWidth
    summary: |-
      <span data-ttu-id="674d9-252">Возвращает или задает стандартную (по умолчанию) ширину всех столбцов на листе.</span><span class="sxs-lookup"><span data-stu-id="674d9-252">Returns or sets the standard (default) width of all the columns in the worksheet.</span></span> <span data-ttu-id="674d9-253">Одна единица измерения ширины столбца равна ширине одного символа в стиле Normal.</span><span class="sxs-lookup"><span data-stu-id="674d9-253">One unit of column width is equal to the width of one character in the Normal style.</span></span> <span data-ttu-id="674d9-254">Для пропорциональных шрифтов используется ширина знака 0 (ноль).</span><span class="sxs-lookup"><span data-stu-id="674d9-254">For proportional fonts, the width of the character 0 (zero) is used.</span></span>

      <span data-ttu-id="674d9-255">\[[Набор API: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="674d9-255">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: standardWidth
    fullName: standardWidth
    langs:
      - typeScript
    type: property
    syntax:
      content: 'standardWidth: number;'
      return:
        type:
          - number
  - uid: excel_release.Excel.Worksheet.tabColor
    summary: |-
      <span data-ttu-id="674d9-256">Получает или задает цвет вкладки листа.</span><span class="sxs-lookup"><span data-stu-id="674d9-256">Gets or sets the worksheet tab color.</span></span> <span data-ttu-id="674d9-257">При получении цвета вкладки, если лист невидим, значение будет равно null.</span><span class="sxs-lookup"><span data-stu-id="674d9-257">When retrieving the tab color, if the worksheet is invisible, the value will be null.</span></span> <span data-ttu-id="674d9-258">Если лист является видимым, но для цвета вкладки задано значение Авто, возвращается пустая строка.</span><span class="sxs-lookup"><span data-stu-id="674d9-258">If the worksheet is visible but the tab color is set to auto, an empty string will be returned.</span></span> <span data-ttu-id="674d9-259">В противном случае для свойства задается цвет, в виде "\#123456" при задании цвета используйте пустую строку для установки "Авто" или "реальный цвет" в противном случае.</span><span class="sxs-lookup"><span data-stu-id="674d9-259">Otherwise, the property will be set to a color, in the form "\#123456" When setting the color, use an empty-string to set an "auto" color, or a real color otherwise.</span></span>

      <span data-ttu-id="674d9-260">\[[Набор API: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="674d9-260">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: tabColor
    fullName: tabColor
    langs:
      - typeScript
    type: property
    syntax:
      content: 'tabColor: string;'
      return:
        type:
          - string
        description: |-


          #### <a name="examples"></a><span data-ttu-id="674d9-261">Примеры</span><span class="sxs-lookup"><span data-stu-id="674d9-261">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const activeSheet = context.workbook.worksheets.getActiveWorksheet();
              activeSheet.tabColor = "#FF0000";

              await context.sync();
          });
          ```
  - uid: excel_release.Excel.Worksheet.tables
    summary: |-
      <span data-ttu-id="674d9-262">Коллекция таблиц, имеющихся на листе.</span><span class="sxs-lookup"><span data-stu-id="674d9-262">Collection of tables that are part of the worksheet.</span></span> <span data-ttu-id="674d9-263">Только для чтения.</span><span class="sxs-lookup"><span data-stu-id="674d9-263">Read-only.</span></span>

      <span data-ttu-id="674d9-264">\[[Набор API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="674d9-264">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: tables
    fullName: tables
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly tables: Excel.TableCollection;'
      return:
        type:
          - excel.Excel.TableCollection
  - uid: excel_release.Excel.Worksheet.toJSON
    summary: '<span data-ttu-id="674d9-265">ПереОпределяет метод `toJSON()` JavaScript для предоставления более удобного вывода при передаче объекта API`JSON.stringify()`</span><span class="sxs-lookup"><span data-stu-id="674d9-265">Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`</span></span><!-- --><span data-ttu-id="674d9-266">.</span><span class="sxs-lookup"><span data-stu-id="674d9-266"></span></span> <span data-ttu-id="674d9-267">(`JSON.stringify`</span><span class="sxs-lookup"><span data-stu-id="674d9-267"></span></span><!-- --><span data-ttu-id="674d9-268">, в свою очередь, вызывает `toJSON` метод объекта, который передается ему.) В то время как исходный объект Excel. лист является объектом API, `toJSON` метод возвращает простой объект JavaScript (тип`Excel.Interfaces.WorksheetData`</span><span class="sxs-lookup"><span data-stu-id="674d9-268">, in turn, calls the `toJSON` method of the object that is passed to it.) Whereas the original Excel.Worksheet object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.WorksheetData`</span></span><!-- --><span data-ttu-id="674d9-269">), который содержит неполные копии загруженных дочерних свойств из исходного объекта.</span><span class="sxs-lookup"><span data-stu-id="674d9-269">) that contains shallow copies of any loaded child properties from the original object.</span></span>'
    name: toJSON()
    fullName: toJSON()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON(): Excel.Interfaces.WorksheetData;'
      return:
        type:
          - excel.Excel.Interfaces.WorksheetData
        description: ''
  - uid: excel_release.Excel.Worksheet.visibility
    summary: |-
      <span data-ttu-id="674d9-270">Видимость листа.</span><span class="sxs-lookup"><span data-stu-id="674d9-270">The Visibility of the worksheet.</span></span>

      <span data-ttu-id="674d9-271">\[[Набор API: ExcelApi 1,1 для чтения видимости; 1,2 — для его установки.](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)</span><span class="sxs-lookup"><span data-stu-id="674d9-271">\[ [API set: ExcelApi 1.1 for reading visibility; 1.2 for setting it.](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)</span></span> <span data-ttu-id="674d9-272">\]</span><span class="sxs-lookup"><span data-stu-id="674d9-272"></span></span>
    name: visibility
    fullName: visibility
    langs:
      - typeScript
    type: property
    syntax:
      content: 'visibility: Excel.SheetVisibility | "Visible" | "Hidden" | "VeryHidden";'
      return:
        type:
          - Excel.SheetVisibility | "Visible" | "Hidden" | "VeryHidden"