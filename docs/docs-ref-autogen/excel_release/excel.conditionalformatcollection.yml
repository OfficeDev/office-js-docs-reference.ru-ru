### YamlMime:UniversalReference
ms.openlocfilehash: 7dd7602d8b4f3dee43c0dfe0f12f61a7b21bea6a
ms.sourcegitcommit: e9bfba6ec767e9d34fd1cf7b38c30f689617900a
ms.translationtype: MT
ms.contentlocale: ru-RU
ms.lasthandoff: 02/20/2019
ms.locfileid: "30105330"
items:
- uid: excel_release.Excel.ConditionalFormatCollection
  summary: >-
    <span data-ttu-id="eab30-101">Представляет коллекцию всех условных форматов, которые перекрывают диапазон.</span><span class="sxs-lookup"><span data-stu-id="eab30-101">Represents a collection of all the conditional formats that are overlap the range.</span></span>


    <span data-ttu-id="eab30-102">\[[Набор API: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="eab30-102">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: Excel.ConditionalFormatCollection
  fullName: Excel.ConditionalFormatCollection
  langs:
  - typeScript
  type: class
  extends:
  - office.OfficeExtension.ClientObject
  package: excel_release
  children:
  - excel_release.Excel.ConditionalFormatCollection.add
  - excel_release.Excel.ConditionalFormatCollection.add_1
  - excel_release.Excel.ConditionalFormatCollection.clearAll
  - excel_release.Excel.ConditionalFormatCollection.context
  - excel_release.Excel.ConditionalFormatCollection.getCount
  - excel_release.Excel.ConditionalFormatCollection.getItem
  - excel_release.Excel.ConditionalFormatCollection.getItemAt
  - excel_release.Excel.ConditionalFormatCollection.items
  - excel_release.Excel.ConditionalFormatCollection.load
  - excel_release.Excel.ConditionalFormatCollection.load_1
  - excel_release.Excel.ConditionalFormatCollection.load_2
  - excel_release.Excel.ConditionalFormatCollection.toJSON
- uid: excel_release.Excel.ConditionalFormatCollection.add
  summary: >-
    <span data-ttu-id="eab30-103">Добавляет новое условное форматирование в коллекцию по первому или верхнему приоритету.</span><span class="sxs-lookup"><span data-stu-id="eab30-103">Adds a new conditional format to the collection at the first/top priority.</span></span>


    <span data-ttu-id="eab30-104">\[[Набор API: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="eab30-104">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: add(type)
  fullName: add(type)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'add(type: Excel.ConditionalFormatType): Excel.ConditionalFormat;'
    return:
      type:
      - excel.Excel.ConditionalFormat
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"eab30-105\">Примеры</span><span class=\"sxs-lookup\"><span data-stu-id=\"eab30-105\">Examples</span></span>\n\n```javascript\nExcel.run(function (ctx) {\n    var sheetName = \"Sheet1\";\n    var rangeAddress = \"A1:C3\";\n    var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);\n    var conditionalFormat = range.conditionalFormats.add(Excel.ConditionalFormatType.iconSet);\n    conditionalFormat.iconOrNull.style = \"YellowThreeArrows\";\n    return ctx.sync().then(function () {\n        console.log(\"Added new yellow three arrow icon set.\");\n    });\n}).catch(function (error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```\n```typescript\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\");\n    const range = sheet.getRange(\"B2:M5\");\n    const conditionalFormat = range.conditionalFormats\n        .add(Excel.ConditionalFormatType.colorScale);\n    const criteria = {\n        minimum: { formula: null, type: Excel.ConditionalFormatColorCriterionType.lowestValue, color: \"blue\" },\n        midpoint: { formula: \"50\", type: Excel.ConditionalFormatColorCriterionType.percent, color: \"yellow\" },\n        maximum: { formula: null, type: Excel.ConditionalFormatColorCriterionType.highestValue, color: \"red\" }\n    };\n    conditionalFormat.colorScale.criteria = criteria;\n\n    await context.sync();\n});\n```"
    parameters:
    - id: type
      description: <span data-ttu-id="eab30-106">Тип добавляемого условного форматирования.</span><span class="sxs-lookup"><span data-stu-id="eab30-106">The type of conditional format being added.</span></span> <span data-ttu-id="eab30-107">Дополнительные сведения см. в статье Excel. Кондитионалформаттипе.</span><span class="sxs-lookup"><span data-stu-id="eab30-107">See Excel.ConditionalFormatType for details.</span></span>
      type:
      - excel.Excel.ConditionalFormatType
- uid: excel_release.Excel.ConditionalFormatCollection.add_1
  summary: >-
    <span data-ttu-id="eab30-108">Добавляет новое условное форматирование в коллекцию по первому или верхнему приоритету.</span><span class="sxs-lookup"><span data-stu-id="eab30-108">Adds a new conditional format to the collection at the first/top priority.</span></span>


    <span data-ttu-id="eab30-109">\[[Набор API: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="eab30-109">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: add(typeString)
  fullName: add(typeString)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'add(typeString: "Custom" | "DataBar" | "ColorScale" | "IconSet" | "TopBottom" | "PresetCriteria" | "ContainsText" | "CellValue"): Excel.ConditionalFormat;'
    return:
      type:
      - excel.Excel.ConditionalFormat
      description: ''
    parameters:
    - id: typeString
      description: <span data-ttu-id="eab30-110">Тип добавляемого условного форматирования.</span><span class="sxs-lookup"><span data-stu-id="eab30-110">The type of conditional format being added.</span></span> <span data-ttu-id="eab30-111">Дополнительные сведения см. в статье Excel. Кондитионалформаттипе.</span><span class="sxs-lookup"><span data-stu-id="eab30-111">See Excel.ConditionalFormatType for details.</span></span>
      type:
      - "\"Custom\" | \"DataBar\" | \"ColorScale\" | \"IconSet\" | \"TopBottom\" | \"PresetCriteria\" | \"ContainsText\" | \"CellValue\""
- uid: excel_release.Excel.ConditionalFormatCollection.clearAll
  summary: >-
    <span data-ttu-id="eab30-112">Полное удаление условного форматирование в указанном диапазоне.</span><span class="sxs-lookup"><span data-stu-id="eab30-112">Clears all conditional formats active on the current specified range.</span></span>


    <span data-ttu-id="eab30-113">\[[Набор API: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="eab30-113">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: clearAll()
  fullName: clearAll()
  langs:
  - typeScript
  type: method
  syntax:
    content: 'clearAll(): void;'
    return:
      type:
      - void
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"eab30-114\">Примеры</span><span class=\"sxs-lookup\"><span data-stu-id=\"eab30-114\">Examples</span></span>\n\n```javascript\nExcel.run(function (ctx) {\n    var sheetName = \"Sheet1\";\n    var rangeAddress = \"A1:C3\";\n    var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);\n    var conditionalFormats = range.conditionalFormats;\n    var conditionalFormat = conditionalFormats.clearAll();\n    return ctx.sync().then(function () {\n        console.log(\"Cleared all conditional formats from this range.\");\n    });\n}).catch(function (error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```\n```typescript\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\");\n    const range = sheet.getRange();\n    range.conditionalFormats.clearAll();\n\n    await context.sync();\n\n    $(\".conditional-formats\").hide();\n});\n```"
- uid: excel_release.Excel.ConditionalFormatCollection.context
  summary: <span data-ttu-id="eab30-115">Контекст запроса, связанный с объектом.</span><span class="sxs-lookup"><span data-stu-id="eab30-115">The request context associated with the object.</span></span> <span data-ttu-id="eab30-116">Это подсоединяет процесс надстройки к процессу ведущего приложения Office.</span><span class="sxs-lookup"><span data-stu-id="eab30-116">This connects the add-in's process to the Office host application's process.</span></span>
  name: context
  fullName: context
  langs:
  - typeScript
  type: property
  syntax:
    content: 'context: RequestContext;'
    return:
      type:
      - RequestContext
- uid: excel_release.Excel.ConditionalFormatCollection.getCount
  summary: >-
    <span data-ttu-id="eab30-p104">Возвращает количество условных форматов в книге. Только для чтения.</span><span class="sxs-lookup"><span data-stu-id="eab30-p104">Returns the number of conditional formats in the workbook. Read-only.</span></span>


    <span data-ttu-id="eab30-119">\[[Набор API: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="eab30-119">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getCount()
  fullName: getCount()
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getCount(): OfficeExtension.ClientResult<number>;'
    return:
      type:
      - OfficeExtension.ClientResult<number>
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"eab30-120\">Примеры</span><span class=\"sxs-lookup\"><span data-stu-id=\"eab30-120\">Examples</span></span>\n\n```javascript\nExcel.run(function (ctx) {\n    var sheetName = \"Sheet1\";\n    var rangeAddress = \"A1:C3\";\n    var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);\n    var conditionalFormat = range.conditionalFormats.add(Excel.ConditionalFormatType.iconSet);\n    conditionalFormat.iconOrNull.style = Excel.IconSet.fourTrafficLights;\n    var cfCount = range.conditionalFormats.getCount(); \n\n    return ctx.sync().then(function () {\n        console.log(\"Count: \" + cfCount.value);\n    });\n}).catch(function (error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- uid: excel_release.Excel.ConditionalFormatCollection.getItem
  summary: >-
    <span data-ttu-id="eab30-121">Возвращает условное форматирование для указанного идентификатора.</span><span class="sxs-lookup"><span data-stu-id="eab30-121">Returns a conditional format for the given ID.</span></span>


    <span data-ttu-id="eab30-122">\[[Набор API: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="eab30-122">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getItem(id)
  fullName: getItem(id)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getItem(id: string): Excel.ConditionalFormat;'
    return:
      type:
      - excel.Excel.ConditionalFormat
      description: >-
        <span data-ttu-id="eab30-123">Объект условного форматирования.</span><span class="sxs-lookup"><span data-stu-id="eab30-123">Conditional Format object.</span></span>

        #### <a name="examples"></a><span data-ttu-id="eab30-124">Примеры</span><span class="sxs-lookup"><span data-stu-id="eab30-124">Examples</span></span>


        ```javascript

        Excel.run(function (ctx) {
            var sheetName = "Sheet1";
            var rangeAddress = "A1:C3";
            var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
            var conditionalFormats = range.conditionalFormats;
            var conditionalFormat = conditionalFormats.getItemAt(3);
            return ctx.sync().then(function () {
                console.log("Conditional Format at Item 3 Loaded");
            });
        }).catch(function (error) {
            console.log("Error: " + error);
            if (error instanceof OfficeExtension.Error) {
                console.log("Debug info: " + JSON.stringify(error.debugInfo));
            }
        });

        ```
    parameters:
    - id: id
      description: <span data-ttu-id="eab30-125">Идентификатор условного форматирования.</span><span class="sxs-lookup"><span data-stu-id="eab30-125">The id of the conditional format.</span></span>
      type:
      - string
- uid: excel_release.Excel.ConditionalFormatCollection.getItemAt
  summary: >-
    <span data-ttu-id="eab30-126">Возвращает условное форматирование по индексу.</span><span class="sxs-lookup"><span data-stu-id="eab30-126">Returns a conditional format at the given index.</span></span>


    <span data-ttu-id="eab30-127">\[[Набор API: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="eab30-127">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getItemAt(index)
  fullName: getItemAt(index)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getItemAt(index: number): Excel.ConditionalFormat;'
    return:
      type:
      - excel.Excel.ConditionalFormat
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"eab30-128\">Примеры</span><span class=\"sxs-lookup\"><span data-stu-id=\"eab30-128\">Examples</span></span>\n\n```javascript\nExcel.run(function (ctx) {\n    var sheetName = \"Sheet1\";\n    var rangeAddress = \"A1:C3\";\n    var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);\n    var conditionalFormats = range.conditionalFormats;\n    var conditionalFormat = conditionalFormats.getItemAt(3);\n    return ctx.sync().then(function () {\n        console.log(\"Conditional Format at Item 3 Loaded\");\n    });\n}).catch(function (error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```\n```typescript\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\");\n    const worksheetRange = sheet.getRange();\n    worksheetRange.conditionalFormats.load(\"type\");\n\n    await context.sync();\n\n    let cfRangePairs: { cf: Excel.ConditionalFormat, range: Excel.Range }[] = [];\n    worksheetRange.conditionalFormats.items.forEach(item => {\n        cfRangePairs.push({\n            cf: item,\n            range: item.getRange().load(\"address\")\n        });\n    });\n\n    await context.sync();\n\n    if (cfRangePairs.length > 0) {\n        cfRangePairs.forEach(item => {\n            console.log(item.cf.type);\n        });\n    } else {\n        console.log(\"No conditional formats applied.\");\n    }\n});\n```"
    parameters:
    - id: index
      description: <span data-ttu-id="eab30-129">Индекс извлекаемых условных форматов.</span><span class="sxs-lookup"><span data-stu-id="eab30-129">Index of the conditional formats to be retrieved.</span></span>
      type:
      - number
- uid: excel_release.Excel.ConditionalFormatCollection.items
  summary: <span data-ttu-id="eab30-130">Получает загруженные дочерние элементы в этой коллекции.</span><span class="sxs-lookup"><span data-stu-id="eab30-130">Gets the loaded child items in this collection.</span></span>
  name: items
  fullName: items
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly items: Excel.ConditionalFormat[];'
    return:
      type:
      - Excel.ConditionalFormat[]
- uid: excel_release.Excel.ConditionalFormatCollection.load
  summary: <span data-ttu-id="eab30-131">Ставит в очередь команду, чтобы загрузить указанные свойства объекта.</span><span class="sxs-lookup"><span data-stu-id="eab30-131">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="eab30-132">Перед чтением свойств необходимо вызвать метод Context. Sync ().</span><span class="sxs-lookup"><span data-stu-id="eab30-132">You must call "context.sync()" before reading the properties.</span></span>
  remarks: >-
    <span data-ttu-id="eab30-133">В дополнение к этой подписи этот метод имеет следующие подписи:</span><span class="sxs-lookup"><span data-stu-id="eab30-133">In addition to this signature, this method has the following signatures:</span></span>


    <span data-ttu-id="eab30-134">`load(option?: string | string[]): Excel.ConditionalFormatCollection`-WHERE — это строка с разделителями-запятыми или массив строк, указывающий свойства для загрузки.</span><span class="sxs-lookup"><span data-stu-id="eab30-134">`load(option?: string | string[]): Excel.ConditionalFormatCollection` - Where option is a comma-delimited string or an array of strings that specify the properties to load.</span></span>


    <span data-ttu-id="eab30-135">`load(option?: { select?: string; expand?: string; }): Excel.ConditionalFormatCollection`-WHERE. Select — это строка с разделителями-запятыми, указывающая свойства для загрузки и параметры. Expand — это строка с разделителями-запятыми, указывающая свойства навигации для загрузки.</span><span class="sxs-lookup"><span data-stu-id="eab30-135">`load(option?: { select?: string; expand?: string; }): Excel.ConditionalFormatCollection` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.</span></span>


    <span data-ttu-id="eab30-136">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.ConditionalFormatCollection`— Доступно только для типов коллекций.</span><span class="sxs-lookup"><span data-stu-id="eab30-136">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.ConditionalFormatCollection` - Only available on collection types.</span></span> <span data-ttu-id="eab30-137">Он аналогичен предыдущей подписи.</span><span class="sxs-lookup"><span data-stu-id="eab30-137">It is similar to the preceding signature.</span></span> <span data-ttu-id="eab30-138">Option. Top указывает максимальное количество элементов коллекции, которые можно включить в результат.</span><span class="sxs-lookup"><span data-stu-id="eab30-138">Option.top specifies the maximum number of collection items that can be included in the result.</span></span> <span data-ttu-id="eab30-139">Option. skip указывает количество элементов, которые будут пропущены и не включены в результат.</span><span class="sxs-lookup"><span data-stu-id="eab30-139">Option.skip specifies the number of items that are to be skipped and not included in the result.</span></span> <span data-ttu-id="eab30-140">Если указан параметр Option. Top, результирующий набор начнется после пропуска указанного числа элементов.</span><span class="sxs-lookup"><span data-stu-id="eab30-140">If option.top is specified, the result set will start after skipping the specified number of items.</span></span>
  name: load(option)
  fullName: load(option)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'load(option?: Excel.Interfaces.ConditionalFormatCollectionLoadOptions & Excel.Interfaces.CollectionLoadOptions): Excel.ConditionalFormatCollection;'
    return:
      type:
      - excel.Excel.ConditionalFormatCollection
      description: ''
    parameters:
    - id: option
      description: ''
      type:
      - Excel.Interfaces.ConditionalFormatCollectionLoadOptions & Excel.Interfaces.CollectionLoadOptions
- uid: excel_release.Excel.ConditionalFormatCollection.load_1
  summary: <span data-ttu-id="eab30-141">Ставит в очередь команду, чтобы загрузить указанные свойства объекта.</span><span class="sxs-lookup"><span data-stu-id="eab30-141">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="eab30-142">Перед чтением свойств `context.sync()` необходимо вызвать метод.</span><span class="sxs-lookup"><span data-stu-id="eab30-142">You must call `context.sync()` before reading the properties.</span></span>
  name: load(propertyNames)
  fullName: load(propertyNames)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'load(propertyNames?: string | string[]): Excel.ConditionalFormatCollection;'
    return:
      type:
      - excel.Excel.ConditionalFormatCollection
      description: ''
    parameters:
    - id: propertyNames
      description: <span data-ttu-id="eab30-143">Строка, разделенная запятыми, или массив строк, указывающий свойства для загрузки.</span><span class="sxs-lookup"><span data-stu-id="eab30-143">A comma-delimited string or an array of strings that specify the properties to load.</span></span>
      type:
      - string | string[]
- uid: excel_release.Excel.ConditionalFormatCollection.load_2
  name: load(option)
  fullName: load(option)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'load(option?: OfficeExtension.LoadOption): Excel.ConditionalFormatCollection;'
    return:
      type:
      - excel.Excel.ConditionalFormatCollection
      description: ''
    parameters:
    - id: option
      description: ''
      type:
      - office.OfficeExtension.LoadOption
- uid: excel_release.Excel.ConditionalFormatCollection.toJSON
  summary: <span data-ttu-id="eab30-144">ПереОпределяет метод `toJSON()` JavaScript для предоставления более удобного вывода при передаче `JSON.stringify()` <!-- -->объекта API.</span><span class="sxs-lookup"><span data-stu-id="eab30-144">Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`<!-- -->.</span></span> <span data-ttu-id="eab30-145">(`JSON.stringify`<!-- -->в свою очередь вызывает `toJSON` метод объекта, который передается ему.) В то время как `Excel.ConditionalFormatCollection` исходный объект является объектом API, `toJSON` метод возвращает простой объект JavaScript (тип `Excel.Interfaces.ConditionalFormatCollectionData` <!-- -->"Items"), содержащий массив "Items" с неполной копией всех загруженных свойств из элементов коллекции.</span><span class="sxs-lookup"><span data-stu-id="eab30-145">(`JSON.stringify`<!-- -->, in turn, calls the `toJSON` method of the object that is passed to it.) Whereas the original `Excel.ConditionalFormatCollection` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.ConditionalFormatCollectionData`<!-- -->) that contains an "items" array with shallow copies of any loaded properties from the collection's items.</span></span>
  name: toJSON()
  fullName: toJSON()
  langs:
  - typeScript
  type: method
  syntax:
    content: 'toJSON(): Excel.Interfaces.ConditionalFormatCollectionData;'
    return:
      type:
      - excel.Excel.Interfaces.ConditionalFormatCollectionData
      description: ''
