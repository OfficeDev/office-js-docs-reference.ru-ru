### YamlMime:TSPackage
uid: visio!
name: visio
type: package
summary: ''
classes:
- visio!Visio.Application:class
- visio!Visio.Comment:class
- visio!Visio.CommentCollection:class
- visio!Visio.Document:class
- visio!Visio.DocumentView:class
- visio!Visio.Hyperlink:class
- visio!Visio.HyperlinkCollection:class
- visio!Visio.Page:class
- visio!Visio.PageCollection:class
- visio!Visio.PageView:class
- visio!Visio.RequestContext:class
- visio!Visio.Selection:class
- visio!Visio.Shape:class
- visio!Visio.ShapeCollection:class
- visio!Visio.ShapeDataItem:class
- visio!Visio.ShapeDataItemCollection:class
- visio!Visio.ShapeView:class
interfaces:
- visio!Visio.BoundingBox:interface
- visio!Visio.DataRefreshCompleteEventArgs:interface
- visio!Visio.DocumentLoadCompleteEventArgs:interface
- visio!Visio.Highlight:interface
- visio!Visio.Interfaces.ApplicationData:interface
- visio!Visio.Interfaces.ApplicationLoadOptions:interface
- visio!Visio.Interfaces.ApplicationUpdateData:interface
- visio!Visio.Interfaces.CollectionLoadOptions:interface
- visio!Visio.Interfaces.CommentCollectionData:interface
- visio!Visio.Interfaces.CommentCollectionLoadOptions:interface
- visio!Visio.Interfaces.CommentCollectionUpdateData:interface
- visio!Visio.Interfaces.CommentData:interface
- visio!Visio.Interfaces.CommentLoadOptions:interface
- visio!Visio.Interfaces.CommentUpdateData:interface
- visio!Visio.Interfaces.DocumentData:interface
- visio!Visio.Interfaces.DocumentLoadOptions:interface
- visio!Visio.Interfaces.DocumentUpdateData:interface
- visio!Visio.Interfaces.DocumentViewData:interface
- visio!Visio.Interfaces.DocumentViewLoadOptions:interface
- visio!Visio.Interfaces.DocumentViewUpdateData:interface
- visio!Visio.Interfaces.HyperlinkCollectionData:interface
- visio!Visio.Interfaces.HyperlinkCollectionLoadOptions:interface
- visio!Visio.Interfaces.HyperlinkCollectionUpdateData:interface
- visio!Visio.Interfaces.HyperlinkData:interface
- visio!Visio.Interfaces.HyperlinkLoadOptions:interface
- visio!Visio.Interfaces.PageCollectionData:interface
- visio!Visio.Interfaces.PageCollectionLoadOptions:interface
- visio!Visio.Interfaces.PageCollectionUpdateData:interface
- visio!Visio.Interfaces.PageData:interface
- visio!Visio.Interfaces.PageLoadOptions:interface
- visio!Visio.Interfaces.PageUpdateData:interface
- visio!Visio.Interfaces.PageViewData:interface
- visio!Visio.Interfaces.PageViewLoadOptions:interface
- visio!Visio.Interfaces.PageViewUpdateData:interface
- visio!Visio.Interfaces.SelectionData:interface
- visio!Visio.Interfaces.ShapeCollectionData:interface
- visio!Visio.Interfaces.ShapeCollectionLoadOptions:interface
- visio!Visio.Interfaces.ShapeCollectionUpdateData:interface
- visio!Visio.Interfaces.ShapeData:interface
- visio!Visio.Interfaces.ShapeDataItemCollectionData:interface
- visio!Visio.Interfaces.ShapeDataItemCollectionLoadOptions:interface
- visio!Visio.Interfaces.ShapeDataItemCollectionUpdateData:interface
- visio!Visio.Interfaces.ShapeDataItemData:interface
- visio!Visio.Interfaces.ShapeDataItemLoadOptions:interface
- visio!Visio.Interfaces.ShapeLoadOptions:interface
- visio!Visio.Interfaces.ShapeUpdateData:interface
- visio!Visio.Interfaces.ShapeViewData:interface
- visio!Visio.Interfaces.ShapeViewLoadOptions:interface
- visio!Visio.Interfaces.ShapeViewUpdateData:interface
- visio!Visio.PageLoadCompleteEventArgs:interface
- visio!Visio.PageRenderCompleteEventArgs:interface
- visio!Visio.Position:interface
- visio!Visio.SelectionChangedEventArgs:interface
- visio!Visio.ShapeMouseEnterEventArgs:interface
- visio!Visio.ShapeMouseLeaveEventArgs:interface
enums:
- visio!Visio.ErrorCodes:enum
- visio!Visio.OverlayHorizontalAlignment:enum
- visio!Visio.OverlayType:enum
- visio!Visio.OverlayVerticalAlignment:enum
- visio!Visio.ToolBarType:enum
functions:
- name: Visio.run(batch)
  uid: visio!Visio.run:function(1)
  package: visio!
  summary: Выполняет пакетный сценарий, который выполняет действия в объектной модели Visio с помощью нового контекста запроса. Когда обещание будет разрешено, все отслеживаемые объекты, которые были автоматически выделены во время выполнения, будут освобождены.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'export function run<T>(batch: (context: Visio.RequestContext) => Promise<T>): Promise<T>;'
    parameters:
    - id: batch
      description: Функция, которая принимает в Visio.RequestContext и возвращает обещание (как правило, только в результате "context.sync()"). Параметр context облегчает запросы в приложении Visio. Так как надстройка Office и приложение Visio работают в двух разных процессах, требуется контекст запроса, чтобы получить доступ к объектной модели Visio из надстройки.
      type: '(context: <xref uid="visio!Visio.RequestContext:class" />) =&gt; Promise&lt;T&gt;'
    return:
      type: Promise&lt;T&gt;
      description: ''
- name: Visio.run(object, batch)
  uid: visio!Visio.run:function(2)
  package: visio!
  summary: Выполняет пакетный скрипт, который выполняет действия в объектной модели Visio с помощью контекста запроса ранее созданного объекта API.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'export function run<T>(object: OfficeExtension.ClientObject | OfficeExtension.EmbeddedSession, batch: (context: Visio.RequestContext) => Promise<T>): Promise<T>;'
    parameters:
    - id: object
      description: Ранее созданный объект API. Пакет будет использовать тот же контекст запроса, что и переданный объект, что означает, что любые изменения, примененные к объекту, будут подбираться с помощью "context.sync()".
      type: <xref uid="office!OfficeExtension.ClientObject:class" /> | <xref uid="office!OfficeExtension.EmbeddedSession:class" />
    - id: batch
      description: Функция, которая принимает в Visio.RequestContext и возвращает обещание (как правило, только в результате "context.sync()"). Когда обещание будет разрешено, все отслеживаемые объекты, которые были автоматически выделены во время выполнения, будут освобождены.
      type: '(context: <xref uid="visio!Visio.RequestContext:class" />) =&gt; Promise&lt;T&gt;'
    return:
      type: Promise&lt;T&gt;
      description: ''
- name: Visio.run(objects, batch)
  uid: visio!Visio.run:function(3)
  package: visio!
  summary: Выполняет пакетный скрипт, который выполняет действия в объектной модели Visio с помощью контекста запросов ранее созданных объектов API.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'export function run<T>(objects: OfficeExtension.ClientObject[], batch: (context: Visio.RequestContext) => Promise<T>): Promise<T>;'
    parameters:
    - id: objects
      description: Массив ранее созданных объектов API. Массив будет проверен, чтобы убедиться, что все объекты имеют одинаковый контекст. Пакет будет использовать этот общий контекст запроса, что означает, что любые изменения, примененные к этим объектам, будут подбираться с помощью "context.sync()".
      type: <xref uid="office!OfficeExtension.ClientObject:class" />[]
    - id: batch
      description: Функция, которая принимает visio.RequestContext и возвращает обещание (как правило, только в результате "context.sync()"). Когда обещание будет разрешено, все отслеживаемые объекты, которые были автоматически выделены во время выполнения, будут освобождены.
      type: '(context: <xref uid="visio!Visio.RequestContext:class" />) =&gt; Promise&lt;T&gt;'
    return:
      type: Promise&lt;T&gt;
      description: ''
- name: Visio.run(contextObject, batch)
  uid: visio!Visio.run:function(4)
  package: visio!
  summary: Выполняет пакетный скрипт, который выполняет действия в объектной модели Visio с помощью requestContext ранее созданного объекта. Когда обещание будет разрешено, все отслеживаемые объекты, которые были автоматически выделены во время выполнения, будут освобождены.
  remarks: >-
    В дополнение к этой подписи метод также имеет следующие подписи:


    `run<T>(batch: (context: Visio.RequestContext) => Promise<T>): Promise<T>;`


    `run<T>(object: OfficeExtension.ClientObject | OfficeExtension.EmbeddedSession, batch: (context: Visio.RequestContext) => Promise<T>): Promise<T>;`


    `run<T>(objects: OfficeExtension.ClientObject[], batch: (context: Visio.RequestContext) => Promise<T>): Promise<T>;`
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'export function run<T>(contextObject: OfficeExtension.ClientRequestContext, batch: (context: Visio.RequestContext) => Promise<T>): Promise<T>;'
    parameters:
    - id: contextObject
      description: Ранее созданный Visio.RequestContext. Этот контекст будет повторно использоваться пакетной функцией (вместо создания нового контекста). Это означает, что пакет сможет получить изменения, внесенные в существующие объекты API, если эти объекты были получены из этого же контекста.
      type: <xref uid="office!OfficeExtension.ClientRequestContext:class" />
    - id: batch
      description: Функция, которая принимает в RequestContext и возвращает обещание (как правило, только в результате "context.sync()"). Параметр context облегчает запросы в приложении Visio. Так как надстройка Office и приложение Visio работают в двух разных процессах, requestContext должен получить доступ к объектной модели Visio из надстройки.
      type: '(context: <xref uid="visio!Visio.RequestContext:class" />) =&gt; Promise&lt;T&gt;'
    return:
      type: Promise&lt;T&gt;
      description: ''
metadata:
  ms.openlocfilehash: 160a87f9afd1fc59da3c920487e71135a46c79a0
  ms.sourcegitcommit: a8a86cfcaff5ad7dacc653d63502c76b1fedbebe
  ms.translationtype: MT
  ms.contentlocale: ru-RU
  ms.lasthandoff: 03/26/2021
  ms.locfileid: "51277367"
