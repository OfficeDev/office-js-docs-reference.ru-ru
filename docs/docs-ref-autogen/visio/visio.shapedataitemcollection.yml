### YamlMime:UniversalReference
ms.openlocfilehash: 71c6bd6d34115e5cc0c776ffd6a62c23fa8ab9f0
ms.sourcegitcommit: 262b7c417245b7b61a57d53eee33a477a722ca6e
ms.translationtype: MT
ms.contentlocale: ru-RU
ms.lasthandoff: 09/28/2018
ms.locfileid: "24050908"
items:
- uid: visio.Visio.ShapeDataItemCollection
  summary: >-
    Представляет ShapeDataItemCollection для заданного объекта Shape.


    \[[Набор API-Интерфейсов: 1.1](/javascript/office/overview/visio-javascript-reference-overview)\]
  name: Visio.ShapeDataItemCollection
  fullName: visio.Visio.ShapeDataItemCollection
  langs:
  - typeScript
  type: class
  extends:
  - OfficeExtension.ClientObject
  package: visio
  children:
  - visio.Visio.ShapeDataItemCollection.getCount
  - visio.Visio.ShapeDataItemCollection.getItem
  - visio.Visio.ShapeDataItemCollection.items
  - visio.Visio.ShapeDataItemCollection.load
  - visio.Visio.ShapeDataItemCollection.toJSON
- uid: visio.Visio.ShapeDataItemCollection.getCount
  summary: >-
    Возвращает количество элементов данных фигуры.


    \[[Набор API-Интерфейсов: 1.1](/javascript/office/overview/visio-javascript-reference-overview)\]
  name: getCount()
  fullName: visio.Visio.ShapeDataItemCollection.getCount
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getCount(): OfficeExtension.ClientResult<number>;'
    return:
      type:
      - OfficeExtension.ClientResult<number>
      description: ''
- uid: visio.Visio.ShapeDataItemCollection.getItem
  summary: >-
    Возвращает ShapeDataItem по имени.


    \[[Набор API-Интерфейсов: 1.1](/javascript/office/overview/visio-javascript-reference-overview)\]
  name: getItem(key)
  fullName: visio.Visio.ShapeDataItemCollection.getItem
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getItem(key: string): Visio.ShapeDataItem;'
    return:
      type:
      - visio.Visio.ShapeDataItem
      description: ''
    parameters:
    - id: key
      description: Ключ — имя элемента ShapeDataItem, который нужно получить.
      type:
      - string
- uid: visio.Visio.ShapeDataItemCollection.items
  summary: Получает загруженных дочерних элементов в этом семействе.
  name: items
  fullName: visio.Visio.ShapeDataItemCollection.items
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly items: Visio.ShapeDataItem[];'
    return:
      type:
      - Visio.ShapeDataItem[]
- uid: visio.Visio.ShapeDataItemCollection.load
  summary: Очереди команды для загрузки указанного свойства объекта. Перед чтением свойства необходимо вызвать «context.sync()».
  remarks: >-
    В дополнение к подписи этот метод имеет следующие цифровые подписи.


    `load(option?: { select?: string; expand?: string; }): Visio.ShapeDataItemCollection`-Option.select — это разделенный запятыми строка, указывающая свойства для загрузки, куда options.expand — это разделенный запятыми строка, указывающая свойства навигации для загрузки.


    `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Visio.ShapeDataItemCollection`-Доступно только на коллекцию типов. Это похоже на предыдущую. Option.Top указывает максимальное число элементов коллекции, которые можно включить в результат. Option.Skip указывает количество элементов, которые пропускаются и не включенный в результате. Если option.top указан, результирующий набор будет запущен процесс после пропускает указанное число элементов.

    #### <a name="examples"></a>Примеры


    ```javascript

    Visio.run(session, function (ctx) {
        var activePage = ctx.document.getActivePage();
        var shape = activePage.shapes.getItem(0);
        var shapeDataItems = shape.shapeDataItems;
        shapeDataItems.load();
        return ctx.sync().then(function() {
            for (var i = 0; i < shapeDataItems.items.length; i++)
            {
                console.log(shapeDataItems.items[i].label);
                console.log(shapeDataItems.items[i].value);
            }
        });
    }).catch(function(error) {
        console.log("Error: " + error);
        if (error instanceof OfficeExtension.Error) {
            console.log("Debug info: " + JSON.stringify(error.debugInfo));
        }
    });

    ```
  name: load(option)
  fullName: visio.Visio.ShapeDataItemCollection.load
  langs:
  - typeScript
  type: method
  syntax:
    content: 'load(option?: string | string[]): Visio.ShapeDataItemCollection;'
    return:
      type:
      - visio.Visio.ShapeDataItemCollection
      description: ''
    parameters:
    - id: option
      description: Строка, разделенных запятыми или массив строк, задающих свойства для загрузки.
      type:
      - string | string[]
- uid: visio.Visio.ShapeDataItemCollection.toJSON
  name: toJSON()
  fullName: visio.Visio.ShapeDataItemCollection.toJSON
  langs:
  - typeScript
  type: method
  syntax:
    content: 'toJSON(): Visio.Interfaces.ShapeDataItemCollectionData;'
    return:
      type:
      - visio.Visio.Interfaces.ShapeDataItemCollectionData
      description: ''
