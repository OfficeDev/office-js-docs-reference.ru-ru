### YamlMime:UniversalReference
ms.openlocfilehash: c33e17dd92848dca939a62e9aeec8f00fb30dc8f
ms.sourcegitcommit: a36161c2113d94680dc68150d024e68bdf0390fa
ms.translationtype: MT
ms.contentlocale: ru-RU
ms.lasthandoff: 10/10/2018
ms.locfileid: "25458840"
items:
- uid: visio.Visio.Document
  summary: >-
    Представляет класс Document.


    \[[Набор API-Интерфейсов: 1.1](/javascript/office/overview/visio-javascript-reference-overview)\]
  name: Visio.Document
  fullName: visio.Visio.Document
  langs:
  - typeScript
  type: class
  extends:
  - OfficeExtension.ClientObject
  package: visio
  children:
  - visio.Visio.Document.application
  - visio.Visio.Document.getActivePage
  - visio.Visio.Document.load
  - visio.Visio.Document.onDataRefreshComplete
  - visio.Visio.Document.onDocumentLoadComplete
  - visio.Visio.Document.onPageLoadComplete
  - visio.Visio.Document.onSelectionChanged
  - visio.Visio.Document.onShapeMouseEnter
  - visio.Visio.Document.onShapeMouseLeave
  - visio.Visio.Document.pages
  - visio.Visio.Document.setActivePage
  - visio.Visio.Document.startDataRefresh
  - visio.Visio.Document.toJSON
  - visio.Visio.Document.view
- uid: visio.Visio.Document.application
  summary: >-
    Представляет экземпляр приложения Visio, содержащий этот документ. Только для чтения.


    \[[Набор API-Интерфейсов: 1.1](/javascript/office/overview/visio-javascript-reference-overview)\]
  name: application
  fullName: visio.Visio.Document.application
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly application: Visio.Application;'
    return:
      type:
      - Visio.Application
- uid: visio.Visio.Document.getActivePage
  summary: >-
    Возвращает активную страницу документа.


    \[[Набор API-Интерфейсов: 1.1](/javascript/office/overview/visio-javascript-reference-overview)\]
  name: getActivePage()
  fullName: visio.Visio.Document.getActivePage
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getActivePage(): Visio.Page;'
    return:
      type:
      - Visio.Page
      description: "\n#### <a name=\"examples\"></a>Примеры\n\n```javascript\nVisio.run(session, function (ctx) {\n    var document = ctx.document;\n    var activePage = document.getActivePage();\n    activePage.load();\n    return ctx.sync().then(function () {\n        console.log(\"pageName: \" +activePage.name);\n    });   \n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- uid: visio.Visio.Document.load
  summary: Очереди команды для загрузки указанного свойства объекта. Перед чтением свойства необходимо вызвать «context.sync()».
  remarks: >-
    В дополнение к подписи этот метод имеет следующие цифровые подписи.


    `load(option?: { select?: string; expand?: string; }): Visio.Document`-Option.select — это разделенный запятыми строка, указывающая свойства для загрузки, куда options.expand — это разделенный запятыми строка, указывающая свойства навигации для загрузки.


    `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Visio.Document`-Доступно только на коллекцию типов. Это похоже на предыдущую. Option.Top указывает максимальное число элементов коллекции, которые можно включить в результат. Option.Skip указывает количество элементов, которые пропускаются и не включенный в результате. Если option.top указан, результирующий набор будет запущен процесс после пропускает указанное число элементов.

    #### <a name="examples"></a>Примеры


    ```javascript

    Visio.run(session, function (ctx) {
        var pages = ctx.document.pages;
        var pageCount = pages.getCount();
        return ctx.sync().then(function () {
            console.log("Pages Count: " +pageCount.value);
        });
    }).catch(function(error) {
        console.log("Error: " + error);
        if (error instanceof OfficeExtension.Error) {
            console.log("Debug info: " + JSON.stringify(error.debugInfo));
        }
    });

    ```

    ```javascript

    Visio.run(session, function (ctx) {
        var documentView = ctx.document.view;
        documentView.disableHyperlinks();
        return ctx.sync();
    }).catch(function(error) {
        console.log("Error: " + error);
        if (error instanceof OfficeExtension.Error) {
            console.log("Debug info: " + JSON.stringify(error.debugInfo));
        }
    });

    ```

    ```javascript

    Visio.run(session, function (ctx) {
        var application = ctx.document.application;
        application.showToolbars = false;
        return ctx.sync();
    }).catch(function(error) {
        console.log("Error: " + error);
        if (error instanceof OfficeExtension.Error) {
            console.log("Debug info: " + JSON.stringify(error.debugInfo));
        }
    });

    ```
  name: load(option)
  fullName: visio.Visio.Document.load
  langs:
  - typeScript
  type: method
  syntax:
    content: 'load(option?: string | string[]): Visio.Document;'
    return:
      type:
      - Visio.Document
      description: ''
    parameters:
    - id: option
      description: Строка, разделенных запятыми или массив строк, задающих свойства для загрузки.
      type:
      - string | string[]
- uid: visio.Visio.Document.onDataRefreshComplete
  summary: >-
    Происходит при обновлении данных в диаграмме.


    \[[Набор API-Интерфейсов: 1.1](/javascript/office/overview/visio-javascript-reference-overview)\]
  name: onDataRefreshComplete
  fullName: visio.Visio.Document.onDataRefreshComplete
  langs:
  - typeScript
  type: event
  syntax:
    content: 'readonly onDataRefreshComplete: OfficeExtension.EventHandlers<Visio.DataRefreshCompleteEventArgs>;'
    return:
      type:
      - OfficeExtension.EventHandlers<Visio.DataRefreshCompleteEventArgs>
- uid: visio.Visio.Document.onDocumentLoadComplete
  summary: >-
    Возникает при загрузке, обновить или изменить документ.


    \[[Набор API-Интерфейсов: 1.1](/javascript/office/overview/visio-javascript-reference-overview)\]
  name: onDocumentLoadComplete
  fullName: visio.Visio.Document.onDocumentLoadComplete
  langs:
  - typeScript
  type: event
  syntax:
    content: 'readonly onDocumentLoadComplete: OfficeExtension.EventHandlers<Visio.DocumentLoadCompleteEventArgs>;'
    return:
      type:
      - OfficeExtension.EventHandlers<Visio.DocumentLoadCompleteEventArgs>
- uid: visio.Visio.Document.onPageLoadComplete
  summary: >-
    Возникает после завершения страницы загрузки.


    \[[Набор API-Интерфейсов: 1.1](/javascript/office/overview/visio-javascript-reference-overview)\]
  name: onPageLoadComplete
  fullName: visio.Visio.Document.onPageLoadComplete
  langs:
  - typeScript
  type: event
  syntax:
    content: 'readonly onPageLoadComplete: OfficeExtension.EventHandlers<Visio.PageLoadCompleteEventArgs>;'
    return:
      type:
      - OfficeExtension.EventHandlers<Visio.PageLoadCompleteEventArgs>
- uid: visio.Visio.Document.onSelectionChanged
  summary: >-
    Возникает при изменении текущего выделения фигур.


    \[[Набор API-Интерфейсов: 1.1](/javascript/office/overview/visio-javascript-reference-overview)\]
  name: onSelectionChanged
  fullName: visio.Visio.Document.onSelectionChanged
  langs:
  - typeScript
  type: event
  syntax:
    content: 'readonly onSelectionChanged: OfficeExtension.EventHandlers<Visio.SelectionChangedEventArgs>;'
    return:
      type:
      - OfficeExtension.EventHandlers<Visio.SelectionChangedEventArgs>
- uid: visio.Visio.Document.onShapeMouseEnter
  summary: >-
    Происходит, когда пользователь перемещает указатель мыши в ограничивающему прямоугольнику фигуры.


    \[[Набор API-Интерфейсов: 1.1](/javascript/office/overview/visio-javascript-reference-overview)\]
  name: onShapeMouseEnter
  fullName: visio.Visio.Document.onShapeMouseEnter
  langs:
  - typeScript
  type: event
  syntax:
    content: 'readonly onShapeMouseEnter: OfficeExtension.EventHandlers<Visio.ShapeMouseEnterEventArgs>;'
    return:
      type:
      - OfficeExtension.EventHandlers<Visio.ShapeMouseEnterEventArgs>
- uid: visio.Visio.Document.onShapeMouseLeave
  summary: >-
    Происходит, когда пользователь перемещает мышь из него ограничивающему прямоугольнику фигуры.


    \[[Набор API-Интерфейсов: 1.1](/javascript/office/overview/visio-javascript-reference-overview)\]
  name: onShapeMouseLeave
  fullName: visio.Visio.Document.onShapeMouseLeave
  langs:
  - typeScript
  type: event
  syntax:
    content: 'readonly onShapeMouseLeave: OfficeExtension.EventHandlers<Visio.ShapeMouseLeaveEventArgs>;'
    return:
      type:
      - OfficeExtension.EventHandlers<Visio.ShapeMouseLeaveEventArgs>
- uid: visio.Visio.Document.pages
  summary: >-
    Представляет коллекцию страниц, связанных с документом. Только для чтения.


    \[[Набор API-Интерфейсов: 1.1](/javascript/office/overview/visio-javascript-reference-overview)\]
  name: pages
  fullName: visio.Visio.Document.pages
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly pages: Visio.PageCollection;'
    return:
      type:
      - Visio.PageCollection
- uid: visio.Visio.Document.setActivePage
  summary: >-
    Задает активную страницу документа.


    \[[Набор API-Интерфейсов: 1.1](/javascript/office/overview/visio-javascript-reference-overview)\]
  name: setActivePage(PageName)
  fullName: visio.Visio.Document.setActivePage
  langs:
  - typeScript
  type: method
  syntax:
    content: 'setActivePage(PageName: string): void;'
    return:
      type:
      - void
      description: "\n#### <a name=\"examples\"></a>Примеры\n\n```javascript\nVisio.run(session, function (ctx) {\n    var document = ctx.document;\n    var pageName = \"Page-1\";\n    document.setActivePage(pageName);\n    return ctx.sync();\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
    parameters:
    - id: PageName
      description: Имя страницы
      type:
      - string
- uid: visio.Visio.Document.startDataRefresh
  summary: >-
    Запускает обновление данных в диаграмме, для всех страниц.


    \[[Набор API-Интерфейсов: 1.1](/javascript/office/overview/visio-javascript-reference-overview)\]
  name: startDataRefresh()
  fullName: visio.Visio.Document.startDataRefresh
  langs:
  - typeScript
  type: method
  syntax:
    content: 'startDataRefresh(): void;'
    return:
      type:
      - void
      description: "\n#### <a name=\"examples\"></a>Примеры\n\n```javascript\nVisio.run(session, function (ctx) {\n    var document = ctx.document;\n    document.startDataRefresh();\n    return ctx.sync();\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- uid: visio.Visio.Document.toJSON
  name: toJSON()
  fullName: visio.Visio.Document.toJSON
  langs:
  - typeScript
  type: method
  syntax:
    content: 'toJSON(): Visio.Interfaces.DocumentData;'
    return:
      type:
      - visio.Visio.Interfaces.DocumentData
      description: ''
- uid: visio.Visio.Document.view
  summary: >-
    Возвращает объект DocumentView. Только для чтения.


    \[[Набор API-Интерфейсов: 1.1](/javascript/office/overview/visio-javascript-reference-overview)\]
  name: view
  fullName: visio.Visio.Document.view
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly view: Visio.DocumentView;'
    return:
      type:
      - visio.Visio.DocumentView
