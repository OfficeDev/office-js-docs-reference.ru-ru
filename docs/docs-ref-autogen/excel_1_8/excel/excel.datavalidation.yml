### YamlMime:UniversalReference
items:
  - uid: 'excel!Excel.DataValidation:class'
    summary: |-
      <span data-ttu-id="bd3e6-101">Представляет проверку данных, применяемую к текущему диапазону.</span><span class="sxs-lookup"><span data-stu-id="bd3e6-101">Represents the data validation applied to the current range.</span></span> <span data-ttu-id="bd3e6-102">Чтобы узнать больше об объектной модели проверки данных, прочтите статью [Добавление проверки данных в диапазоны Excel](https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-data-validation)</span><span class="sxs-lookup"><span data-stu-id="bd3e6-102">To learn more about the data validation object model, read [Add data validation to Excel ranges](https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-data-validation)</span></span><!-- --><span data-ttu-id="bd3e6-103">.</span><span class="sxs-lookup"><span data-stu-id="bd3e6-103"></span></span>

      <span data-ttu-id="bd3e6-104">\[[Набор API: ExcelApi 1,8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="bd3e6-104">\[ [API set: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: Excel.DataValidation
    fullName: Excel.DataValidation
    langs:
      - typeScript
    type: class
    extends:
      - 'excel!OfficeExtension.ClientObject:class'
    package: excel!
    children:
      - 'excel!Excel.DataValidation#clear:member(1)'
      - 'excel!Excel.DataValidation#context:member'
      - 'excel!Excel.DataValidation#errorAlert:member'
      - 'excel!Excel.DataValidation#ignoreBlanks:member'
      - 'excel!Excel.DataValidation#load:member(1)'
      - 'excel!Excel.DataValidation#load:member(2)'
      - 'excel!Excel.DataValidation#load:member(3)'
      - 'excel!Excel.DataValidation#prompt:member'
      - 'excel!Excel.DataValidation#rule:member'
      - 'excel!Excel.DataValidation#set:member(1)'
      - 'excel!Excel.DataValidation#set:member(2)'
      - 'excel!Excel.DataValidation#toJSON:member(1)'
      - 'excel!Excel.DataValidation#type:member'
      - 'excel!Excel.DataValidation#valid:member'
  - uid: 'excel!Excel.DataValidation#clear:member(1)'
    summary: |-
      <span data-ttu-id="bd3e6-105">Очищает проверку данных из текущего диапазона.</span><span class="sxs-lookup"><span data-stu-id="bd3e6-105">Clears the data validation from the current range.</span></span>

      <span data-ttu-id="bd3e6-106">\[[Набор API: ExcelApi 1,8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="bd3e6-106">\[ [API set: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: clear()
    fullName: clear()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'clear(): void;'
      return:
        type:
          - void
        description: ''
  - uid: 'excel!Excel.DataValidation#context:member'
    summary: '<span data-ttu-id="bd3e6-107">Контекст запроса, связанный с объектом.</span><span class="sxs-lookup"><span data-stu-id="bd3e6-107">The request context associated with the object.</span></span> <span data-ttu-id="bd3e6-108">Это подсоединяет процесс надстройки к процессу ведущего приложения Office.</span><span class="sxs-lookup"><span data-stu-id="bd3e6-108">This connects the add-in''s process to the Office host application''s process.</span></span>'
    name: context
    fullName: context
    langs:
      - typeScript
    type: property
    syntax:
      content: 'context: RequestContext;'
      return:
        type:
          - 'excel!Excel.RequestContext:class'
  - uid: 'excel!Excel.DataValidation#errorAlert:member'
    summary: |-
      <span data-ttu-id="bd3e6-109">Сообщение об ошибке, когда пользователь вводит недопустимые данные.</span><span class="sxs-lookup"><span data-stu-id="bd3e6-109">Error alert when user enters invalid data.</span></span>

      <span data-ttu-id="bd3e6-110">\[[Набор API: ExcelApi 1,8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="bd3e6-110">\[ [API set: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: errorAlert
    fullName: errorAlert
    langs:
      - typeScript
    type: property
    syntax:
      content: 'errorAlert: Excel.DataValidationErrorAlert;'
      return:
        type:
          - 'excel!Excel.DataValidationErrorAlert:interface'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="bd3e6-111">Примеры</span><span class="sxs-lookup"><span data-stu-id="bd3e6-111">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Decision");
              const commentsRange = 
                  sheet.tables.getItem("NameOptionsTable").columns.getItem("Comments").getDataBodyRange();

              // When you are developing, it is a good practice to
              // clear the dataValidation object with each run of your code.
              commentsRange.dataValidation.clear();   

              // If the value of A2 is contained in the value of C2, then 
              // SEARCH(A2,C2) returns the number where it begins. Otherwise,
              // it does not return a number.
              let redundantStringRule = {
                  custom: {
                      formula: "=NOT(ISNUMBER(SEARCH(A2,C2)))"
                  }
              };
              commentsRange.dataValidation.rule = redundantStringRule;
              commentsRange.dataValidation.errorAlert = {
                  message: "It is redundant to include the baby name in the comment.",
                  showAlert: true,
                  style: "Information",
                  title: "Baby Name in Comment"
              };

              await context.sync();
          });
          ```
  - uid: 'excel!Excel.DataValidation#ignoreBlanks:member'
    summary: |-
      <span data-ttu-id="bd3e6-112">Игнорировать пустые ячейки: проверка данных не будет выполняться в пустых ячейках, по умолчанию используется значение true.</span><span class="sxs-lookup"><span data-stu-id="bd3e6-112">Ignore blanks: no data validation will be performed on blank cells, it defaults to true.</span></span>

      <span data-ttu-id="bd3e6-113">\[[Набор API: ExcelApi 1,8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="bd3e6-113">\[ [API set: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: ignoreBlanks
    fullName: ignoreBlanks
    langs:
      - typeScript
    type: property
    syntax:
      content: 'ignoreBlanks: boolean;'
      return:
        type:
          - boolean
  - uid: 'excel!Excel.DataValidation#load:member(1)'
    summary: <span data-ttu-id="bd3e6-114">Добавляет в очередь команду для загрузки указанных свойств объекта.</span><span class="sxs-lookup"><span data-stu-id="bd3e6-114">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="bd3e6-115">Перед чтением свойств необходимо вызвать метод context.sync().</span><span class="sxs-lookup"><span data-stu-id="bd3e6-115">You must call "context.sync()" before reading the properties.</span></span>
    remarks: |-
      <span data-ttu-id="bd3e6-116">В дополнение к этой подписи этот метод имеет следующие подписи:</span><span class="sxs-lookup"><span data-stu-id="bd3e6-116">In addition to this signature, this method has the following signatures:</span></span>

      <span data-ttu-id="bd3e6-117">`load(option?: string | string[]): Excel.DataValidation`-WHERE — это строка с разделителями-запятыми или массив строк, указывающий свойства для загрузки.</span><span class="sxs-lookup"><span data-stu-id="bd3e6-117">`load(option?: string | string[]): Excel.DataValidation` - Where option is a comma-delimited string or an array of strings that specify the properties to load.</span></span>

      <span data-ttu-id="bd3e6-118">`load(option?: { select?: string; expand?: string; }): Excel.DataValidation`-WHERE. Select — это строка с разделителями-запятыми, указывающая свойства для загрузки и параметры. Expand — это строка с разделителями-запятыми, указывающая свойства навигации для загрузки.</span><span class="sxs-lookup"><span data-stu-id="bd3e6-118">`load(option?: { select?: string; expand?: string; }): Excel.DataValidation` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.</span></span>

      <span data-ttu-id="bd3e6-119">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.DataValidation`— Доступно только для типов коллекций.</span><span class="sxs-lookup"><span data-stu-id="bd3e6-119">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.DataValidation` - Only available on collection types.</span></span> <span data-ttu-id="bd3e6-120">Он аналогичен предыдущей подписи.</span><span class="sxs-lookup"><span data-stu-id="bd3e6-120">It is similar to the preceding signature.</span></span> <span data-ttu-id="bd3e6-121">Option. Top указывает максимальное количество элементов коллекции, которые можно включить в результат.</span><span class="sxs-lookup"><span data-stu-id="bd3e6-121">Option.top specifies the maximum number of collection items that can be included in the result.</span></span> <span data-ttu-id="bd3e6-122">Option. skip указывает количество элементов, которые будут пропущены и не включены в результат.</span><span class="sxs-lookup"><span data-stu-id="bd3e6-122">Option.skip specifies the number of items that are to be skipped and not included in the result.</span></span> <span data-ttu-id="bd3e6-123">Если указан параметр Option. Top, результирующий набор начнется после пропуска указанного числа элементов.</span><span class="sxs-lookup"><span data-stu-id="bd3e6-123">If option.top is specified, the result set will start after skipping the specified number of items.</span></span>
    name: load(option)
    fullName: load(option)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(option?: Excel.Interfaces.DataValidationLoadOptions): Excel.DataValidation;'
      return:
        type:
          - 'excel!Excel.DataValidation:class'
        description: ''
      parameters:
        - id: option
          description: ''
          type:
            - 'excel!Excel.Interfaces.DataValidationLoadOptions:interface'
  - uid: 'excel!Excel.DataValidation#load:member(2)'
    summary: <span data-ttu-id="bd3e6-124">Добавляет в очередь команду для загрузки указанных свойств объекта.</span><span class="sxs-lookup"><span data-stu-id="bd3e6-124">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="bd3e6-125">Перед чтением свойств `context.sync()` необходимо вызвать метод.</span><span class="sxs-lookup"><span data-stu-id="bd3e6-125">You must call `context.sync()` before reading the properties.</span></span>
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): Excel.DataValidation;'
      return:
        type:
          - 'excel!Excel.DataValidation:class'
        description: ''
      parameters:
        - id: propertyNames
          description: '<span data-ttu-id="bd3e6-126">Строка, разделенная запятыми, или массив строк, указывающий свойства для загрузки.</span><span class="sxs-lookup"><span data-stu-id="bd3e6-126">A comma-delimited string or an array of strings that specify the properties to load.</span></span>'
          type:
            - 'string | string[]'
  - uid: 'excel!Excel.DataValidation#load:member(3)'
    summary: <span data-ttu-id="bd3e6-127">Добавляет в очередь команду для загрузки указанных свойств объекта.</span><span class="sxs-lookup"><span data-stu-id="bd3e6-127">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="bd3e6-128">Перед чтением свойств `context.sync()` необходимо вызвать метод.</span><span class="sxs-lookup"><span data-stu-id="bd3e6-128">You must call `context.sync()` before reading the properties.</span></span>
    name: load(propertyNamesAndPaths)
    fullName: load(propertyNamesAndPaths)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNamesAndPaths?: { select?: string; expand?: string; }): Excel.DataValidation;'
      return:
        type:
          - 'excel!Excel.DataValidation:class'
        description: ''
      parameters:
        - id: propertyNamesAndPaths
          description: '<span data-ttu-id="bd3e6-129">Где Пропертинамесандпасс. Select — это строка с разделителями-запятыми, задающая свойства для загрузки, и Пропертинамесандпасс. Expand — это строка с разделителями-запятыми, указывающая свойства навигации для загрузки.</span><span class="sxs-lookup"><span data-stu-id="bd3e6-129">Where propertyNamesAndPaths.select is a comma-delimited string that specifies the properties to load, and propertyNamesAndPaths.expand is a comma-delimited string that specifies the navigation properties to load.</span></span>'
          type:
            - '{ select?: string; expand?: string; }'
  - uid: 'excel!Excel.DataValidation#prompt:member'
    summary: |-
      <span data-ttu-id="bd3e6-130">Выдавать запрос при выборе пользователем ячейки.</span><span class="sxs-lookup"><span data-stu-id="bd3e6-130">Prompt when users select a cell.</span></span> <span data-ttu-id="bd3e6-131">`DataValidationPrompt` Объект должен быть задан как объект JSON (используйте `x.prompt = {...}` вместо`x.prompt.message = ...`</span><span class="sxs-lookup"><span data-stu-id="bd3e6-131">The `DataValidationPrompt` object must be set as a JSON object (use `x.prompt = {...}` instead of `x.prompt.message = ...`</span></span><!-- --><span data-ttu-id="bd3e6-132">).</span><span class="sxs-lookup"><span data-stu-id="bd3e6-132"></span></span>

      <span data-ttu-id="bd3e6-133">\[[Набор API: ExcelApi 1,8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="bd3e6-133">\[ [API set: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: prompt
    fullName: prompt
    langs:
      - typeScript
    type: property
    syntax:
      content: 'prompt: Excel.DataValidationPrompt;'
      return:
        type:
          - 'excel!Excel.DataValidationPrompt:interface'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="bd3e6-134">Примеры</span><span class="sxs-lookup"><span data-stu-id="bd3e6-134">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Decision");
              const rankingRange = sheet.tables.getItem("NameOptionsTable").columns.getItem("Ranking").getDataBodyRange();

              // When you are developing, it is a good practice to
              // clear the dataValidation object with each run of your code.
              rankingRange.dataValidation.clear();

              let greaterThanZeroRule = {
                  wholeNumber: {
                      formula1: 0,
                      operator: Excel.DataValidationOperator.greaterThan
                  }
              };
              rankingRange.dataValidation.rule = greaterThanZeroRule;

              rankingRange.dataValidation.prompt = {
                  message: "Please enter a positive number.",
                  showPrompt: true,
                  title: "Positive numbers only."
              };

              rankingRange.dataValidation.errorAlert = {
                  message: "Sorry, only positive numbers are allowed",
                  showAlert: true,
                  style: "Stop",
                  title: "Negative Number Entered"
              };

              await context.sync();
          });
          ```
  - uid: 'excel!Excel.DataValidation#rule:member'
    summary: |-
      <span data-ttu-id="bd3e6-135">Правило проверки данных, которое содержит различные типы условий проверки данных.</span><span class="sxs-lookup"><span data-stu-id="bd3e6-135">Data validation rule that contains different type of data validation criteria.</span></span>

      <span data-ttu-id="bd3e6-136">\[[Набор API: ExcelApi 1,8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="bd3e6-136">\[ [API set: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: rule
    fullName: rule
    langs:
      - typeScript
    type: property
    syntax:
      content: 'rule: Excel.DataValidationRule;'
      return:
        type:
          - 'excel!Excel.DataValidationRule:interface'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="bd3e6-137">Примеры</span><span class="sxs-lookup"><span data-stu-id="bd3e6-137">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Decision");
              const nameRange = 
                  sheet.tables.getItem("NameOptionsTable").columns.getItem("Baby Name").getDataBodyRange();

              // When you are developing, it is a good practice to
              // clear the dataValidation object with each run of your code.
              nameRange.dataValidation.clear();

              const nameSourceRange = context.workbook.worksheets.getItem("Names").getRange("A1:A3");

              let approvedListRule = {
                  list: {
                      inCellDropDown: true,
                      source: nameSourceRange
                  }
              };
              nameRange.dataValidation.rule = approvedListRule;

              await context.sync();
          });
          ```
  - uid: 'excel!Excel.DataValidation#set:member(1)'
    summary: '<span data-ttu-id="bd3e6-138">Задает одновременно несколько свойств объекта.</span><span class="sxs-lookup"><span data-stu-id="bd3e6-138">Sets multiple properties of an object at the same time.</span></span> <span data-ttu-id="bd3e6-139">Можно передать либо простой объект с соответствующими свойствами, либо другой объект API того же типа.</span><span class="sxs-lookup"><span data-stu-id="bd3e6-139">You can pass either a plain object with the appropriate properties, or another API object of the same type.</span></span>'
    remarks: |-
      <span data-ttu-id="bd3e6-140">Этот метод имеет следующую дополнительную подпись:</span><span class="sxs-lookup"><span data-stu-id="bd3e6-140">This method has the following additional signature:</span></span>

      `set(properties: Excel.DataValidation): void`
    name: 'set(properties, options)'
    fullName: 'set(properties, options)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'set(properties: Interfaces.DataValidationUpdateData, options?: OfficeExtension.UpdateOptions): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: properties
          description: '<span data-ttu-id="bd3e6-141">Объект JavaScript со свойствами, которые структурированы исоморфикалли к свойствам объекта, для которого вызывается метод.</span><span class="sxs-lookup"><span data-stu-id="bd3e6-141">A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.</span></span>'
          type:
            - 'excel!Excel.Interfaces.DataValidationUpdateData:interface'
        - id: options
          description: '<span data-ttu-id="bd3e6-142">Предоставляет возможность подавлять ошибки, если объект Properties пытается задать любые свойства, предназначенные только для чтения.</span><span class="sxs-lookup"><span data-stu-id="bd3e6-142">Provides an option to suppress errors if the properties object tries to set any read-only properties.</span></span>'
          type:
            - 'excel!OfficeExtension.UpdateOptions:interface'
  - uid: 'excel!Excel.DataValidation#set:member(2)'
    summary: '<span data-ttu-id="bd3e6-143">Задает одновременно несколько свойств объекта на основе существующего загруженного объекта.</span><span class="sxs-lookup"><span data-stu-id="bd3e6-143">Sets multiple properties on the object at the same time, based on an existing loaded object.</span></span>'
    name: set(properties)
    fullName: set(properties)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'set(properties: Excel.DataValidation): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: properties
          description: ''
          type:
            - 'excel!Excel.DataValidation:class'
  - uid: 'excel!Excel.DataValidation#toJSON:member(1)'
    summary: '<span data-ttu-id="bd3e6-144">Переопределяет метод `toJSON()` JavaScript для предоставления более удобного вывода при передаче объекта API`JSON.stringify()`</span><span class="sxs-lookup"><span data-stu-id="bd3e6-144">Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`</span></span><!-- --><span data-ttu-id="bd3e6-145">.</span><span class="sxs-lookup"><span data-stu-id="bd3e6-145"></span></span> <span data-ttu-id="bd3e6-146">(`JSON.stringify`</span><span class="sxs-lookup"><span data-stu-id="bd3e6-146"></span></span><!-- --><span data-ttu-id="bd3e6-147">, в свою очередь, вызывает `toJSON` метод объекта, который передается ему.) В то же время исходный объект Excel. IsValid является объектом API, `toJSON` метод возвращает простой объект JavaScript (типизированный как`Excel.Interfaces.DataValidationData`</span><span class="sxs-lookup"><span data-stu-id="bd3e6-147">, in turn, calls the `toJSON` method of the object that is passed to it.) Whereas the original Excel.DataValidation object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.DataValidationData`</span></span><!-- --><span data-ttu-id="bd3e6-148">), который содержит неполные копии загруженных дочерних свойств из исходного объекта.</span><span class="sxs-lookup"><span data-stu-id="bd3e6-148">) that contains shallow copies of any loaded child properties from the original object.</span></span>'
    name: toJSON()
    fullName: toJSON()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON(): Excel.Interfaces.DataValidationData;'
      return:
        type:
          - 'excel!Excel.Interfaces.DataValidationData:interface'
        description: ''
  - uid: 'excel!Excel.DataValidation#type:member'
    summary: |-
      <span data-ttu-id="bd3e6-149">Тип проверки данных, подробные сведения см. в статье Excel.DataValidationType.</span><span class="sxs-lookup"><span data-stu-id="bd3e6-149">Type of the data validation, see Excel.DataValidationType for details.</span></span>

      <span data-ttu-id="bd3e6-150">\[[Набор API: ExcelApi 1,8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="bd3e6-150">\[ [API set: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: type
    fullName: type
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly type: Excel.DataValidationType | "None" | "WholeNumber" | "Decimal" | "List" | "Date" | "Time" | "TextLength" | "Custom" | "Inconsistent" | "MixedCriteria";'
      return:
        type:
          - 'excel!Excel.DataValidation#type~0:complex'
  - uid: 'excel!Excel.DataValidation#valid:member'
    summary: |-
      <span data-ttu-id="bd3e6-151">Указывает, являются ли все значения ячеек допустимыми в соответствии с правилами проверки данных.</span><span class="sxs-lookup"><span data-stu-id="bd3e6-151">Represents if all cell values are valid according to the data validation rules.</span></span> <span data-ttu-id="bd3e6-152">Возвращает значение true, если все значения ячеек являются допустимыми, или false, если все значения ячеек являются недопустимыми.</span><span class="sxs-lookup"><span data-stu-id="bd3e6-152">Returns true if all cell values are valid, or false if all cell values are invalid.</span></span> <span data-ttu-id="bd3e6-153">Возвращает значение null, если в диапазоне есть допустимые и недопустимые значения ячеек.</span><span class="sxs-lookup"><span data-stu-id="bd3e6-153">Returns null if there are both valid and invalid cell values within the range.</span></span>

      <span data-ttu-id="bd3e6-154">\[[Набор API: ExcelApi 1,8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="bd3e6-154">\[ [API set: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: valid
    fullName: valid
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly valid: boolean;'
      return:
        type:
          - boolean
references:
  - uid: 'excel!OfficeExtension.ClientObject:class'
    name: OfficeExtension.ClientObject
  - uid: 'excel!Excel.RequestContext:class'
    name: RequestContext
  - uid: 'excel!Excel.DataValidationErrorAlert:interface'
    name: Excel.DataValidationErrorAlert
  - uid: 'excel!Excel.DataValidation:class'
    name: Excel.DataValidation
  - uid: 'excel!Excel.Interfaces.DataValidationLoadOptions:interface'
    name: Excel.Interfaces.DataValidationLoadOptions
  - uid: 'excel!Excel.DataValidationPrompt:interface'
    name: Excel.DataValidationPrompt
  - uid: 'excel!Excel.DataValidationRule:interface'
    name: Excel.DataValidationRule
  - uid: 'excel!Excel.Interfaces.DataValidationUpdateData:interface'
    name: Interfaces.DataValidationUpdateData
  - uid: 'excel!OfficeExtension.UpdateOptions:interface'
    name: OfficeExtension.UpdateOptions
  - uid: 'excel!Excel.Interfaces.DataValidationData:interface'
    name: Excel.Interfaces.DataValidationData
  - uid: 'excel!Excel.DataValidation#type~0:complex'
    name: Excel.DataValidationType | "None" | "WholeNumber" | "Decimal" | "List" | "Date" | "Time" | "TextLength" | "Custom" | "Inconsistent" | "MixedCriteria"
    fullName: Excel.DataValidationType | "None" | "WholeNumber" | "Decimal" | "List" | "Date" | "Time" | "TextLength" | "Custom" | "Inconsistent" | "MixedCriteria"
    spec.typeScript:
      - uid: 'excel!Excel.DataValidationType:enum'
        name: Excel.DataValidationType
        fullName: Excel.DataValidationType
      - name: ' | "None" | "WholeNumber" | "Decimal" | "List" | "Date" | "Time" | "TextLength" | "Custom" | "Inconsistent" | "MixedCriteria"'
        fullName: ' | "None" | "WholeNumber" | "Decimal" | "List" | "Date" | "Time" | "TextLength" | "Custom" | "Inconsistent" | "MixedCriteria"'