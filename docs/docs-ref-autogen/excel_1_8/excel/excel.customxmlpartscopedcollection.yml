### YamlMime:UniversalReference
items:
  - uid: excel.Excel.CustomXmlPartScopedCollection
    summary: |-
      <span data-ttu-id="70d3a-101">Набор настраиваемых XML-частей с ограниченной областью действия.</span><span class="sxs-lookup"><span data-stu-id="70d3a-101">A scoped collection of custom XML parts.</span></span> <span data-ttu-id="70d3a-102">Набор с ограниченной областью является результатом некоторой операции, например фильтрации по пространству имен.</span><span class="sxs-lookup"><span data-stu-id="70d3a-102">A scoped collection is the result of some operation, e.g. filtering by namespace.</span></span> <span data-ttu-id="70d3a-103">Коллекция с ограниченной областью действия не может быть задана.</span><span class="sxs-lookup"><span data-stu-id="70d3a-103">A scoped collection cannot be scoped any further.</span></span>

      <span data-ttu-id="70d3a-104">\[[Набор API: ExcelApi 1,5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="70d3a-104">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: Excel.CustomXmlPartScopedCollection
    fullName: Excel.CustomXmlPartScopedCollection
    langs:
      - typeScript
    type: class
    extends:
      - 'OfficeExtension.ClientObject '
    package: excel
    children:
      - excel.Excel.CustomXmlPartScopedCollection.context
      - excel.Excel.CustomXmlPartScopedCollection.getCount
      - excel.Excel.CustomXmlPartScopedCollection.getItem
      - excel.Excel.CustomXmlPartScopedCollection.getItemOrNullObject
      - excel.Excel.CustomXmlPartScopedCollection.getOnlyItem
      - excel.Excel.CustomXmlPartScopedCollection.getOnlyItemOrNullObject
      - excel.Excel.CustomXmlPartScopedCollection.items
      - excel.Excel.CustomXmlPartScopedCollection.load
      - excel.Excel.CustomXmlPartScopedCollection.load_1
      - excel.Excel.CustomXmlPartScopedCollection.load_2
      - excel.Excel.CustomXmlPartScopedCollection.toJSON
  - uid: excel.Excel.CustomXmlPartScopedCollection.context
    summary: '<span data-ttu-id="70d3a-105">Контекст запроса, связанный с объектом.</span><span class="sxs-lookup"><span data-stu-id="70d3a-105">The request context associated with the object.</span></span> <span data-ttu-id="70d3a-106">Это подсоединяет процесс надстройки к процессу ведущего приложения Office.</span><span class="sxs-lookup"><span data-stu-id="70d3a-106">This connects the add-in''s process to the Office host application''s process.</span></span>'
    name: context
    fullName: context
    langs:
      - typeScript
    type: property
    syntax:
      content: 'context: RequestContext;'
      return:
        type:
          - excel.Excel.RequestContext
  - uid: excel.Excel.CustomXmlPartScopedCollection.getCount
    summary: |-
      <span data-ttu-id="70d3a-107">Получает количество частей CustomXML в этой коллекции.</span><span class="sxs-lookup"><span data-stu-id="70d3a-107">Gets the number of CustomXML parts in this collection.</span></span>

      <span data-ttu-id="70d3a-108">\[[Набор API: ExcelApi 1,5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="70d3a-108">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getCount()
    fullName: getCount()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getCount(): OfficeExtension.ClientResult<number>;'
      return:
        type:
          - OfficeExtension.ClientResult<number>
        description: |-


          #### <a name="examples"></a><span data-ttu-id="70d3a-109">Примеры</span><span class="sxs-lookup"><span data-stu-id="70d3a-109">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              $("#display-xml").text("");
              const contosoNamespace = "http://schemas.contoso.com/review/1.0";
              const customXmlParts = context.workbook.customXmlParts;
              const filteredXmlParts = customXmlParts.getByNamespace(contosoNamespace);
              const numberOfPartsInNamespace = filteredXmlParts.getCount();

              await context.sync();

              if (numberOfPartsInNamespace.value == 1) {
                  const onlyXmlPartInNamespace = filteredXmlParts.getOnlyItem();
                  const xmlBlob = onlyXmlPartInNamespace.getXml();

                  await context.sync();

                  // Make it a bit more readable.
                  const readableXml = xmlBlob.value.replace(/></g, ">\n<");

                  $("#display-xml").text(`The only XML part in the namespace ${contosoNamespace} is:
                      ${readableXml}`);

              } else {
                  console.log(`There are ${numberOfPartsInNamespace.value} XML parts with namespace ${contosoNamespace}. There should be exactly 1.`);
              }        

              await context.sync();
          });
          ```
  - uid: excel.Excel.CustomXmlPartScopedCollection.getItem
    summary: |-
      <span data-ttu-id="70d3a-110">Получает пользовательскую XML-часть по идентификатору.</span><span class="sxs-lookup"><span data-stu-id="70d3a-110">Gets a custom XML part based on its ID.</span></span>

      <span data-ttu-id="70d3a-111">\[[Набор API: ExcelApi 1,5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="70d3a-111">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getItem(id)
    fullName: getItem(id)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getItem(id: string): Excel.CustomXmlPart;'
      return:
        type:
          - excel.Excel.CustomXmlPart
        description: ''
      parameters:
        - id: id
          description: <span data-ttu-id="70d3a-112">ИДЕНТИФИКАТОР получаемого объекта.</span><span class="sxs-lookup"><span data-stu-id="70d3a-112">ID of the object to be retrieved.</span></span>
          type:
            - string
  - uid: excel.Excel.CustomXmlPartScopedCollection.getItemOrNullObject
    summary: |-
      <span data-ttu-id="70d3a-113">Получает пользовательскую XML-часть по идентификатору.</span><span class="sxs-lookup"><span data-stu-id="70d3a-113">Gets a custom XML part based on its ID.</span></span> <span data-ttu-id="70d3a-114">Если CustomXmlPart не существует, свойство isNull возвращаемого объекта будет иметь значение true.</span><span class="sxs-lookup"><span data-stu-id="70d3a-114">If the CustomXmlPart does not exist, the return object's isNull property will be true.</span></span>

      <span data-ttu-id="70d3a-115">\[[Набор API: ExcelApi 1,5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="70d3a-115">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getItemOrNullObject(id)
    fullName: getItemOrNullObject(id)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getItemOrNullObject(id: string): Excel.CustomXmlPart;'
      return:
        type:
          - excel.Excel.CustomXmlPart
        description: |-


          #### <a name="examples"></a><span data-ttu-id="70d3a-116">Примеры</span><span class="sxs-lookup"><span data-stu-id="70d3a-116">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const settings = context.workbook.settings;
              const xmlPartIDSetting = settings.getItemOrNullObject("ContosoReviewXmlPartId").load("value");
              await context.sync();

              if (xmlPartIDSetting.value) {   
                  let customXmlPart = context.workbook.customXmlParts.getItem(xmlPartIDSetting.value);
                  const xmlBlob = customXmlPart.getXml();
                  customXmlPart.delete();
                  customXmlPart = context.workbook.customXmlParts.getItemOrNullObject(xmlPartIDSetting.value);

                  await context.sync();

                  if (customXmlPart.isNullObject) {
                      $("#display-xml").text(`The XML part with the id ${xmlPartIDSetting.value} has been deleted.`);

                      // Delete the unneeded setting too.
                      xmlPartIDSetting.delete();            
                  } else {
                      const readableXml = addLineBreaksToXML(xmlBlob.value);
                      const strangeMessage = `This is strange. The XML part with the id ${xmlPartIDSetting.value} has not been deleted:\n${readableXml}`
                      $("#display-xml").text(strangeMessage);
                  }

                  await context.sync();
              }
          });
          ```
      parameters:
        - id: id
          description: <span data-ttu-id="70d3a-117">ИДЕНТИФИКАТОР получаемого объекта.</span><span class="sxs-lookup"><span data-stu-id="70d3a-117">ID of the object to be retrieved.</span></span>
          type:
            - string
  - uid: excel.Excel.CustomXmlPartScopedCollection.getOnlyItem
    summary: |-
      <span data-ttu-id="70d3a-118">Если коллекция содержит ровно один элемент, этот метод возвращает его.</span><span class="sxs-lookup"><span data-stu-id="70d3a-118">If the collection contains exactly one item, this method returns it.</span></span> <span data-ttu-id="70d3a-119">В противном случае этот метод выдает ошибку.</span><span class="sxs-lookup"><span data-stu-id="70d3a-119">Otherwise, this method produces an error.</span></span>

      <span data-ttu-id="70d3a-120">\[[Набор API: ExcelApi 1,5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="70d3a-120">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getOnlyItem()
    fullName: getOnlyItem()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getOnlyItem(): Excel.CustomXmlPart;'
      return:
        type:
          - excel.Excel.CustomXmlPart
        description: |-


          #### <a name="examples"></a><span data-ttu-id="70d3a-121">Примеры</span><span class="sxs-lookup"><span data-stu-id="70d3a-121">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              $("#display-xml").text("");
              const contosoNamespace = "http://schemas.contoso.com/review/1.0";
              const customXmlParts = context.workbook.customXmlParts;
              const filteredXmlParts = customXmlParts.getByNamespace(contosoNamespace);
              const numberOfPartsInNamespace = filteredXmlParts.getCount();

              await context.sync();

              if (numberOfPartsInNamespace.value == 1) {
                  const onlyXmlPartInNamespace = filteredXmlParts.getOnlyItem();
                  const xmlBlob = onlyXmlPartInNamespace.getXml();

                  await context.sync();

                  // Make it a bit more readable.
                  const readableXml = xmlBlob.value.replace(/></g, ">\n<");

                  $("#display-xml").text(`The only XML part in the namespace ${contosoNamespace} is:
                      ${readableXml}`);

              } else {
                  console.log(`There are ${numberOfPartsInNamespace.value} XML parts with namespace ${contosoNamespace}. There should be exactly 1.`);
              }        

              await context.sync();
          });
          ```
  - uid: excel.Excel.CustomXmlPartScopedCollection.getOnlyItemOrNullObject
    summary: |-
      <span data-ttu-id="70d3a-122">Если коллекция содержит ровно один элемент, этот метод возвращает его.</span><span class="sxs-lookup"><span data-stu-id="70d3a-122">If the collection contains exactly one item, this method returns it.</span></span> <span data-ttu-id="70d3a-123">В противном случае этот метод возвращает значение null.</span><span class="sxs-lookup"><span data-stu-id="70d3a-123">Otherwise, this method returns Null.</span></span>

      <span data-ttu-id="70d3a-124">\[[Набор API: ExcelApi 1,5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="70d3a-124">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getOnlyItemOrNullObject()
    fullName: getOnlyItemOrNullObject()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getOnlyItemOrNullObject(): Excel.CustomXmlPart;'
      return:
        type:
          - excel.Excel.CustomXmlPart
        description: ''
  - uid: excel.Excel.CustomXmlPartScopedCollection.items
    summary: <span data-ttu-id="70d3a-125">Получает загруженные дочерние элементы в этой коллекции.</span><span class="sxs-lookup"><span data-stu-id="70d3a-125">Gets the loaded child items in this collection.</span></span>
    name: items
    fullName: items
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly items: Excel.CustomXmlPart[];'
      return:
        type:
          - 'Excel.CustomXmlPart[]'
  - uid: excel.Excel.CustomXmlPartScopedCollection.load
    summary: <span data-ttu-id="70d3a-126">Добавляет в очередь команду для загрузки указанных свойств объекта.</span><span class="sxs-lookup"><span data-stu-id="70d3a-126">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="70d3a-127">Перед чтением свойств необходимо вызвать метод context.sync().</span><span class="sxs-lookup"><span data-stu-id="70d3a-127">You must call "context.sync()" before reading the properties.</span></span>
    remarks: |-
      <span data-ttu-id="70d3a-128">В дополнение к этой подписи этот метод имеет следующие подписи:</span><span class="sxs-lookup"><span data-stu-id="70d3a-128">In addition to this signature, this method has the following signatures:</span></span>

      <span data-ttu-id="70d3a-129">`load(option?: string | string[]): Excel.CustomXmlPartScopedCollection`-WHERE — это строка с разделителями-запятыми или массив строк, указывающий свойства для загрузки.</span><span class="sxs-lookup"><span data-stu-id="70d3a-129">`load(option?: string | string[]): Excel.CustomXmlPartScopedCollection` - Where option is a comma-delimited string or an array of strings that specify the properties to load.</span></span>

      <span data-ttu-id="70d3a-130">`load(option?: { select?: string; expand?: string; }): Excel.CustomXmlPartScopedCollection`-WHERE. Select — это строка с разделителями-запятыми, указывающая свойства для загрузки и параметры. Expand — это строка с разделителями-запятыми, указывающая свойства навигации для загрузки.</span><span class="sxs-lookup"><span data-stu-id="70d3a-130">`load(option?: { select?: string; expand?: string; }): Excel.CustomXmlPartScopedCollection` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.</span></span>

      <span data-ttu-id="70d3a-131">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.CustomXmlPartScopedCollection`— Доступно только для типов коллекций.</span><span class="sxs-lookup"><span data-stu-id="70d3a-131">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.CustomXmlPartScopedCollection` - Only available on collection types.</span></span> <span data-ttu-id="70d3a-132">Он аналогичен предыдущей подписи.</span><span class="sxs-lookup"><span data-stu-id="70d3a-132">It is similar to the preceding signature.</span></span> <span data-ttu-id="70d3a-133">Option. Top указывает максимальное количество элементов коллекции, которые можно включить в результат.</span><span class="sxs-lookup"><span data-stu-id="70d3a-133">Option.top specifies the maximum number of collection items that can be included in the result.</span></span> <span data-ttu-id="70d3a-134">Option. skip указывает количество элементов, которые будут пропущены и не включены в результат.</span><span class="sxs-lookup"><span data-stu-id="70d3a-134">Option.skip specifies the number of items that are to be skipped and not included in the result.</span></span> <span data-ttu-id="70d3a-135">Если указан параметр Option. Top, результирующий набор начнется после пропуска указанного числа элементов.</span><span class="sxs-lookup"><span data-stu-id="70d3a-135">If option.top is specified, the result set will start after skipping the specified number of items.</span></span>
    name: load(option)
    fullName: load(option)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(option?: Excel.Interfaces.CustomXmlPartScopedCollectionLoadOptions & Excel.Interfaces.CollectionLoadOptions): Excel.CustomXmlPartScopedCollection;'
      return:
        type:
          - excel.Excel.CustomXmlPartScopedCollection
        description: ''
      parameters:
        - id: option
          description: ''
          type:
            - Excel.Interfaces.CustomXmlPartScopedCollectionLoadOptions & Excel.Interfaces.CollectionLoadOptions
  - uid: excel.Excel.CustomXmlPartScopedCollection.load_1
    summary: <span data-ttu-id="70d3a-136">Добавляет в очередь команду для загрузки указанных свойств объекта.</span><span class="sxs-lookup"><span data-stu-id="70d3a-136">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="70d3a-137">Перед чтением свойств `context.sync()` необходимо вызвать метод.</span><span class="sxs-lookup"><span data-stu-id="70d3a-137">You must call `context.sync()` before reading the properties.</span></span>
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): Excel.CustomXmlPartScopedCollection;'
      return:
        type:
          - excel.Excel.CustomXmlPartScopedCollection
        description: ''
      parameters:
        - id: propertyNames
          description: '<span data-ttu-id="70d3a-138">Строка, разделенная запятыми, или массив строк, указывающий свойства для загрузки.</span><span class="sxs-lookup"><span data-stu-id="70d3a-138">A comma-delimited string or an array of strings that specify the properties to load.</span></span>'
          type:
            - 'string | string[]'
  - uid: excel.Excel.CustomXmlPartScopedCollection.load_2
    name: load(option)
    fullName: load(option)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(option?: OfficeExtension.LoadOption): Excel.CustomXmlPartScopedCollection;'
      return:
        type:
          - excel.Excel.CustomXmlPartScopedCollection
        description: ''
      parameters:
        - id: option
          description: ''
          type:
            - OfficeExtension.LoadOption
  - uid: excel.Excel.CustomXmlPartScopedCollection.toJSON
    summary: '<span data-ttu-id="70d3a-139">Переопределяет метод `toJSON()` JavaScript для предоставления более удобного вывода при передаче объекта API`JSON.stringify()`</span><span class="sxs-lookup"><span data-stu-id="70d3a-139">Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`</span></span><!-- --><span data-ttu-id="70d3a-140">.</span><span class="sxs-lookup"><span data-stu-id="70d3a-140"></span></span> <span data-ttu-id="70d3a-141">(`JSON.stringify`</span><span class="sxs-lookup"><span data-stu-id="70d3a-141"></span></span><!-- --><span data-ttu-id="70d3a-142">, в свою очередь, вызывает `toJSON` метод объекта, который передается ему.) В то время как `Excel.CustomXmlPartScopedCollection` исходный объект является объектом API, `toJSON` метод возвращает простой объект JavaScript (тип`Excel.Interfaces.CustomXmlPartScopedCollectionData`</span><span class="sxs-lookup"><span data-stu-id="70d3a-142">, in turn, calls the `toJSON` method of the object that is passed to it.) Whereas the original `Excel.CustomXmlPartScopedCollection` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.CustomXmlPartScopedCollectionData`</span></span><!-- --><span data-ttu-id="70d3a-143">), содержащий массив "Items" с неполноми копиями загруженных свойств из элементов коллекции.</span><span class="sxs-lookup"><span data-stu-id="70d3a-143">) that contains an "items" array with shallow copies of any loaded properties from the collection''s items.</span></span>'
    name: toJSON()
    fullName: toJSON()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON(): Excel.Interfaces.CustomXmlPartScopedCollectionData;'
      return:
        type:
          - excel.Excel.Interfaces.CustomXmlPartScopedCollectionData
        description: ''