### YamlMime:UniversalReference
items:
  - uid: excel.Excel.WorksheetFreezePanes
    summary: '\[[Набор API: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]'
    name: Excel.WorksheetFreezePanes
    fullName: Excel.WorksheetFreezePanes
    langs:
      - typeScript
    type: class
    extends:
      - 'OfficeExtension.ClientObject '
    package: excel
    children:
      - excel.Excel.WorksheetFreezePanes.context
      - excel.Excel.WorksheetFreezePanes.freezeAt
      - excel.Excel.WorksheetFreezePanes.freezeColumns
      - excel.Excel.WorksheetFreezePanes.freezeRows
      - excel.Excel.WorksheetFreezePanes.getLocation
      - excel.Excel.WorksheetFreezePanes.getLocationOrNullObject
      - excel.Excel.WorksheetFreezePanes.toJSON
      - excel.Excel.WorksheetFreezePanes.unfreeze
  - uid: excel.Excel.WorksheetFreezePanes.context
    summary: 'Контекст запроса, связанный с объектом. Это подсоединяет процесс надстройки к процессу ведущего приложения Office.'
    name: context
    fullName: context
    langs:
      - typeScript
    type: property
    syntax:
      content: 'context: RequestContext;'
      return:
        type:
          - excel.Excel.RequestContext
  - uid: excel.Excel.WorksheetFreezePanes.freezeAt
    summary: |-
      Задает закрепленные ячейки в представлении активного листа. Указанный диапазон соответствует ячейкам, которые будут заморожены в верхней и левой области.

      \[[Набор API: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: freezeAt(frozenRange)
    fullName: freezeAt(frozenRange)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'freezeAt(frozenRange: Range | string): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a>Примеры

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Sample");

              // Freeze the specified range in top-and-left-most pane of the worksheet.
              sheet.freezePanes.freezeAt(sheet.getRange("H2:K5"));

              await context.sync();
          });
          ```
      parameters:
        - id: frozenRange
          description: 'Диапазон, представляющий ячейки, которые должны быть заморожены, или значение NULL для удаления всех замороженных областей.'
          type:
            - Range | string
  - uid: excel.Excel.WorksheetFreezePanes.freezeColumns
    summary: |-
      Закрепляет первый столбец (или столбцы) листа на месте.

      \[[Набор API: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: freezeColumns(count)
    fullName: freezeColumns(count)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'freezeColumns(count?: number): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a>Примеры

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Sample");

              // Freeze the first two columns in the worksheet.
              sheet.freezePanes.freezeColumns(2);

              await context.sync();
          });
          ```
      parameters:
        - id: count
          description: Необязательное количество столбцов для закрепления или ноль для освобождения всех столбцов
          type:
            - number
  - uid: excel.Excel.WorksheetFreezePanes.freezeRows
    summary: |-
      Закрепляет верхнюю строку (или строки) листа на месте.

      \[[Набор API: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: freezeRows(count)
    fullName: freezeRows(count)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'freezeRows(count?: number): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a>Примеры

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Sample");

              // Freeze the top two rows in the worksheet.
              sheet.freezePanes.freezeRows(2);

              await context.sync();
          });
          ```
      parameters:
        - id: count
          description: Необязательное количество строк для закрепления или ноль для разморозки всех строк
          type:
            - number
  - uid: excel.Excel.WorksheetFreezePanes.getLocation
    summary: |-
      Получает диапазон, описывающий закрепленные ячейки в представлении активного листа. Замороженный диапазон соответствует ячейкам, замороженным в верхней и левой области.

      \[[Набор API: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: getLocation()
    fullName: getLocation()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getLocation(): Excel.Range;'
      return:
        type:
          - excel.Excel.Range
        description: ''
  - uid: excel.Excel.WorksheetFreezePanes.getLocationOrNullObject
    summary: |-
      Получает диапазон, описывающий закрепленные ячейки в представлении активного листа. Замороженный диапазон соответствует ячейкам, замороженным в верхней и левой области. Если нет замороженной области, возвращается пустой объект.

      \[[Набор API: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: getLocationOrNullObject()
    fullName: getLocationOrNullObject()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getLocationOrNullObject(): Excel.Range;'
      return:
        type:
          - excel.Excel.Range
        description: |-


          #### <a name="examples"></a>Примеры

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Sample");
              const frozenRange = sheet.freezePanes.getLocationOrNullObject();
              frozenRange.load("address");

              await context.sync();

              if (frozenRange.isNullObject) {
                  console.log(`The worksheet does not contain a frozen pane.`);
              } else {
                  console.log(`The address of the frozen range (cells that are frozen in the top-and-left-most pane) is "${frozenRange.address}"`);
              }
          });
          ```
  - uid: excel.Excel.WorksheetFreezePanes.toJSON
    summary: 'Переопределяет метод `toJSON()` JavaScript для предоставления более удобного вывода при передаче объекта API`JSON.stringify()`<!-- -->. (`JSON.stringify`<!-- -->, в свою очередь, вызывает `toJSON` метод объекта, который передается ему.) В то время как исходный объект Excel. Воркшитфризепанес — это объект API, `toJSON` метод возвращает простой объект JavaScript (тип`Excel.Interfaces.WorksheetFreezePanesData`<!-- -->), который содержит неполные копии загруженных дочерних свойств из исходного объекта.'
    name: toJSON()
    fullName: toJSON()
    langs:
      - typeScript
    type: method
    syntax:
      content: |-
        toJSON(): {
                    [key: string]: string;
                };
      return:
        type:
          - |-
            {
                        [key: string]: string;
                    }
        description: ''
  - uid: excel.Excel.WorksheetFreezePanes.unfreeze
    summary: |-
      Удаляет все закрепленные области в листе.

      \[[Набор API: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: unfreeze()
    fullName: unfreeze()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'unfreeze(): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a>Примеры

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Sample");
              sheet.freezePanes.unfreeze();

              await context.sync();
          });
          ```