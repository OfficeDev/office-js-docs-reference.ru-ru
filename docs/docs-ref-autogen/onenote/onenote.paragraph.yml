### YamlMime:UniversalReference
ms.openlocfilehash: 1d027fb7b2642168f58507dcfdea6b7cef2baea4
ms.sourcegitcommit: a36161c2113d94680dc68150d024e68bdf0390fa
ms.translationtype: MT
ms.contentlocale: ru-RU
ms.lasthandoff: 10/10/2018
ms.locfileid: "25458232"
items:
- uid: onenote.OneNote.Paragraph
  summary: >-
    Контейнер для контента, отображаемого на странице. Объект Paragraph может содержать контент с любым типом ParagraphType.


    \[[Набор API-Интерфейсов: OneNoteApi 1.1](/javascript/office/requirement-sets/onenote-api-requirement-sets)\]
  name: OneNote.Paragraph
  fullName: onenote.OneNote.Paragraph
  langs:
  - typeScript
  type: class
  extends:
  - OfficeExtension.ClientObject
  package: onenote
  children:
  - onenote.OneNote.Paragraph.addNoteTag
  - onenote.OneNote.Paragraph.delete
  - onenote.OneNote.Paragraph.getParagraphInfo
  - onenote.OneNote.Paragraph.id
  - onenote.OneNote.Paragraph.image
  - onenote.OneNote.Paragraph.inkWords
  - onenote.OneNote.Paragraph.insertHtmlAsSibling
  - onenote.OneNote.Paragraph.insertImageAsSibling
  - onenote.OneNote.Paragraph.insertRichTextAsSibling
  - onenote.OneNote.Paragraph.insertTableAsSibling
  - onenote.OneNote.Paragraph.load
  - onenote.OneNote.Paragraph.outline
  - onenote.OneNote.Paragraph.paragraphs
  - onenote.OneNote.Paragraph.parentParagraph
  - onenote.OneNote.Paragraph.parentParagraphOrNull
  - onenote.OneNote.Paragraph.parentTableCell
  - onenote.OneNote.Paragraph.parentTableCellOrNull
  - onenote.OneNote.Paragraph.richText
  - onenote.OneNote.Paragraph.table
  - onenote.OneNote.Paragraph.toJSON
  - onenote.OneNote.Paragraph.track
  - onenote.OneNote.Paragraph.type
  - onenote.OneNote.Paragraph.untrack
- uid: onenote.OneNote.Paragraph.addNoteTag
  summary: >-
    Добавьте NoteTag абзаца.


    \[[Набор API-Интерфейсов: OneNoteApi 1.1](/javascript/office/requirement-sets/onenote-api-requirement-sets)\]
  name: addNoteTag(type, status)
  fullName: onenote.OneNote.Paragraph.addNoteTag
  langs:
  - typeScript
  type: method
  syntax:
    content: 'addNoteTag(type: OneNote.NoteTagType, status: OneNote.NoteTagStatus): OneNote.NoteTag;'
    return:
      type:
      - onenote.OneNote.NoteTag
      description: ''
    parameters:
    - id: type
      description: Тип NoteTag.
      type:
      - onenote.OneNote.NoteTagType
    - id: status
      description: Состояние NoteTag.
      type:
      - onenote.OneNote.NoteTagStatus
- uid: onenote.OneNote.Paragraph.delete
  summary: >-
    Удаляет объект Paragraph.


    \[[Набор API-Интерфейсов: OneNoteApi 1.1](/javascript/office/requirement-sets/onenote-api-requirement-sets)\]
  name: delete()
  fullName: onenote.OneNote.Paragraph.delete
  langs:
  - typeScript
  type: method
  syntax:
    content: 'delete(): void;'
    return:
      type:
      - void
      description: "\n#### <a name=\"examples\"></a>Примеры\n\n```javascript\nOneNote.run(function (context) {\n\n    // Get the collection of pageContent items from the page.\n    var pageContents = context.application.getActivePage().contents;\n\n    // Get the first PageContent on the page\n    // Assuming its an outline, get the outline's paragraphs.\n    var pageContent = pageContents.getItemAt(0);\n    \n    var paragraphs = pageContent.outline.paragraphs;\n    \n    var firstParagraph = paragraphs.getItemAt(0);\n    \n    // Queue a command to load the id and type of the first paragraph\n    firstParagraph.load(\"id,type\");\n\n    // Run the queued commands, and return a promise to indicate task completion.\n    return context.sync()\n        .then(function () {\n            \n            // Queue a command to delete the first paragraph                 \n            firstParagraph.delete();\n            \n            // Run the command to delete it\n            return context.sync();\n        });\n})\n.catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- uid: onenote.OneNote.Paragraph.getParagraphInfo
  summary: >-
    Получите сведения о списке абзаца


    \[[Набор API-Интерфейсов: OneNoteApi 1.1](/javascript/office/requirement-sets/onenote-api-requirement-sets)\]
  name: getParagraphInfo()
  fullName: onenote.OneNote.Paragraph.getParagraphInfo
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getParagraphInfo(): OfficeExtension.ClientResult<OneNote.ParagraphInfo>;'
    return:
      type:
      - OfficeExtension.ClientResult<OneNote.ParagraphInfo>
      description: ''
- uid: onenote.OneNote.Paragraph.id
  summary: >-
    Получает идентификатор объекта Paragraph. Только для чтения.


    \[[Набор API-Интерфейсов: OneNoteApi 1.1](/javascript/office/requirement-sets/onenote-api-requirement-sets)\]
  name: id
  fullName: onenote.OneNote.Paragraph.id
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly id: string;'
    return:
      type:
      - string
- uid: onenote.OneNote.Paragraph.image
  summary: >-
    Получает объект Image в объекте Paragraph. Вызывает исключение, если ParagraphType не является Image. Только для чтения.


    \[[Набор API-Интерфейсов: OneNoteApi 1.1](/javascript/office/requirement-sets/onenote-api-requirement-sets)\]
  name: image
  fullName: onenote.OneNote.Paragraph.image
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly image: OneNote.Image;'
    return:
      type:
      - onenote.OneNote.Image
- uid: onenote.OneNote.Paragraph.inkWords
  summary: >-
    Возвращает коллекцию рукописных фрагментов в объекте Paragraph. Вызывает исключение, если ParagraphType не является Ink. Только для чтения.


    \[[Набор API-Интерфейсов: OneNoteApi 1.1](/javascript/office/requirement-sets/onenote-api-requirement-sets)\]
  name: inkWords
  fullName: onenote.OneNote.Paragraph.inkWords
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly inkWords: OneNote.InkWordCollection;'
    return:
      type:
      - onenote.OneNote.InkWordCollection
- uid: onenote.OneNote.Paragraph.insertHtmlAsSibling
  summary: >-
    Вставляет указанный HTML-контент


    \[[Набор API-Интерфейсов: OneNoteApi 1.1](/javascript/office/requirement-sets/onenote-api-requirement-sets)\]
  name: insertHtmlAsSibling(insertLocation, html)
  fullName: onenote.OneNote.Paragraph.insertHtmlAsSibling
  langs:
  - typeScript
  type: method
  syntax:
    content: 'insertHtmlAsSibling(insertLocation: OneNote.InsertLocation, html: string): void;'
    return:
      type:
      - void
      description: "\n#### <a name=\"examples\"></a>Примеры\n\n```javascript\nOneNote.run(function (context) {\n\n    // Get the collection of pageContent items from the page.\n    var pageContents = context.application.getActivePage().contents;\n\n    // Get the first PageContent on the page\n    // Assuming its an outline, get the outline's paragraphs.\n    var pageContent = pageContents.getItemAt(0);\n    var paragraphs = pageContent.outline.paragraphs;\n    var firstParagraph = paragraphs.getItemAt(0);\n\n    // Queue a command to load the id and type of the first paragraph\n    firstParagraph.load(\"id,type\");\n\n    // Run the queued commands, and return a promise to indicate task completion.\n    return context.sync()\n        .then(function () {\n\n            // Queue commands to insert before and after the first paragraph\n            firstParagraph.insertHtmlAsSibling(\"Before\", \"<p>ContentBeforeFirstParagraph</p>\");\n            firstParagraph.insertHtmlAsSibling(\"After\", \"<p>ContentAfterFirstParagraph</p>\");\n            \n            // Run the command to run inserts\n            return context.sync();\n        });\n))\n.catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
    parameters:
    - id: insertLocation
      description: Расположение нового содержимого относительно текущего абзаца.
      type:
      - onenote.OneNote.InsertLocation
    - id: html
      description: Строка HTML, описывающая визуальное представление содержимого. В разделе [Поддерживаемые HTML -код](https://docs.microsoft.com/office/dev/add-ins/onenote/onenote-add-ins-page-content#supported-html) JavaScript API надстройки OneNote.
      type:
      - string
- uid: onenote.OneNote.Paragraph.insertImageAsSibling
  summary: >-
    Вставляет изображение в указанное место.


    \[[Набор API-Интерфейсов: OneNoteApi 1.1](/javascript/office/requirement-sets/onenote-api-requirement-sets)\]
  name: insertImageAsSibling(insertLocation, base64EncodedImage, width, height)
  fullName: onenote.OneNote.Paragraph.insertImageAsSibling
  langs:
  - typeScript
  type: method
  syntax:
    content: 'insertImageAsSibling(insertLocation: OneNote.InsertLocation, base64EncodedImage: string, width: number, height: number): OneNote.Image;'
    return:
      type:
      - onenote.OneNote.Image
      description: "\n#### <a name=\"examples\"></a>Примеры\n\n```javascript\nOneNote.run(function (context) {\n\n    // Get the collection of pageContent items from the page.\n    var pageContents = context.application.getActivePage().contents;\n\n    // Get the first PageContent on the page\n    // Assuming its an outline, get the outline's paragraphs.\n    var pageContent = pageContents.getItemAt(0);\n    var paragraphs = pageContent.outline.paragraphs;\n    var firstParagraph = paragraphs.getItemAt(0);\n\n    // Queue a command to load the id and type of the first paragraph\n    firstParagraph.load(\"id,type\");\n\n    // Run the queued commands, and return a promise to indicate task completion.\n    return context.sync()\n        .then(function () {\n\n            // Queue commands to insert before and after the first paragraph\n            firstParagraph.insertImageAsSibling(\"Before\", \"R0lGODlhDwAPAKECAAAAzMzM/////wAAACwAAAAADwAPAAACIISPeQHsrZ5ModrLlN48CXF8m2iQ3YmmKqVlRtW4MLwWACH+H09wdGltaXplZCBieSBVbGVhZCBTbWFydFNhdmVyIQAAOw==\");\n            firstParagraph.insertImageAsSibling(\"After\", \"R0lGODlhDwAPAKECAAAAzMzM/////wAAACwAAAAADwAPAAACIISPeQHsrZ5ModrLlN48CXF8m2iQ3YmmKqVlRtW4MLwWACH+H09wdGltaXplZCBieSBVbGVhZCBTbWFydFNhdmVyIQAAOw==\");\n            \n            // Run the command to insert images\n            return context.sync();\n        });\n})\n.catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
    parameters:
    - id: insertLocation
      description: Расположение таблицы относительно текущего абзаца.
      type:
      - onenote.OneNote.InsertLocation
    - id: base64EncodedImage
      description: Строка HTML, которую необходимо добавить.
      type:
      - string
    - id: width
      description: Необязательный. Ширина в точках. Значение по умолчанию — null, ширина изображения имеет приоритет.
      type:
      - number
    - id: height
      description: Необязательный. Высота в точках. Значение по умолчанию — null, высота изображения имеет приоритет.
      type:
      - number
- uid: onenote.OneNote.Paragraph.insertRichTextAsSibling
  summary: >-
    Вставляет текст абзаца в указанное место.


    \[[Набор API-Интерфейсов: OneNoteApi 1.1](/javascript/office/requirement-sets/onenote-api-requirement-sets)\]
  name: insertRichTextAsSibling(insertLocation, paragraphText)
  fullName: onenote.OneNote.Paragraph.insertRichTextAsSibling
  langs:
  - typeScript
  type: method
  syntax:
    content: 'insertRichTextAsSibling(insertLocation: OneNote.InsertLocation, paragraphText: string): OneNote.RichText;'
    return:
      type:
      - onenote.OneNote.RichText
      description: "\n#### <a name=\"examples\"></a>Примеры\n\n```javascript\nOneNote.run(function (context) {\n\n    // Get the collection of pageContent items from the page.\n    var pageContents = context.application.getActivePage().contents;\n\n    // Get the first PageContent on the page\n    // Assuming its an outline, get the outline's paragraphs.\n    var pageContent = pageContents.getItemAt(0);\n    var paragraphs = pageContent.outline.paragraphs;\n    var firstParagraph = paragraphs.getItemAt(0);\n\n    // Queue a command to load the id and type of the first paragraph\n    firstParagraph.load(\"id,type\");\n\n    // Run the queued commands, and return a promise to indicate task completion.\n    return context.sync()\n        .then(function () {\n\n            // Queue commands to insert before and after the first paragraph\n            firstParagraph.insertRichTextAsSibling(\"Before\", \"Text Appears Before Paragraph\");\n            firstParagraph.insertRichTextAsSibling(\"After\", \"Text Appears After Paragraph\");\n            \n            // Run the command to insert text contents\n            return context.sync();\n        });\n})    \n.catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n}); \n```"
    parameters:
    - id: insertLocation
      description: Расположение таблицы относительно текущего абзаца.
      type:
      - onenote.OneNote.InsertLocation
    - id: paragraphText
      description: Строка HTML, которую необходимо добавить.
      type:
      - string
- uid: onenote.OneNote.Paragraph.insertTableAsSibling
  summary: >-
    Добавляет таблицу с указанным количеством строк и столбцов перед текущим абзацем или после него.


    \[[Набор API-Интерфейсов: OneNoteApi 1.1](/javascript/office/requirement-sets/onenote-api-requirement-sets)\]
  name: insertTableAsSibling(insertLocation, rowCount, columnCount, values)
  fullName: onenote.OneNote.Paragraph.insertTableAsSibling
  langs:
  - typeScript
  type: method
  syntax:
    content: 'insertTableAsSibling(insertLocation: OneNote.InsertLocation, rowCount: number, columnCount: number, values?: string[][]): OneNote.Table;'
    return:
      type:
      - OneNote.Table
      description: ''
    parameters:
    - id: insertLocation
      description: Расположение таблицы относительно текущего абзаца.
      type:
      - onenote.OneNote.InsertLocation
    - id: rowCount
      description: Количество строк в таблице.
      type:
      - number
    - id: columnCount
      description: Количество столбцов в таблице.
      type:
      - number
    - id: values
      description: Необязательный двухмерный массив. Ячейки заполняются, если в массиве указаны соответствующие строки.
      type:
      - string[][]
- uid: onenote.OneNote.Paragraph.load
  summary: Очереди команды для загрузки указанного свойства объекта. Перед чтением свойства необходимо вызвать «context.sync()».
  remarks: "В дополнение к подписи этот метод имеет следующие цифровые подписи.\n\n`load(option?: { select?: string; expand?: string; }): OneNote.Paragraph`-Option.select — это разделенный запятыми строка, указывающая свойства для загрузки, куда options.expand — это разделенный запятыми строка, указывающая свойства навигации для загрузки.\n\n`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): OneNote.Paragraph`-Доступно только на коллекцию типов. Это похоже на предыдущую. Option.Top указывает максимальное число элементов коллекции, которые можно включить в результат. Option.Skip указывает количество элементов, которые пропускаются и не включенный в результате. Если option.top указан, результирующий набор будет запущен процесс после пропускает указанное число элементов.\n#### <a name=\"examples\"></a>Примеры\n\n```javascript\nOneNote.run(function (context) {\n\n    // Get the collection of pageContent items from the page.\n    var pageContents = context.application.getActivePage().contents;\n    \n    // Queue a command to load the outline property of each pageContent.\n    pageContents.load(\"outline\");\n        \n    // Get the first PageContent on the page, and then get its Outline.\n    var pageContent = pageContents._GetItem(0);\n    var paragraphs = pageContent.outline.paragraphs;\n            \n    // Queue a command to load the id and type of each paragraph.\n    paragraphs.load(\"id,type\");\n            \n    // Run the queued commands, and return a promise to indicate task completion.\n    return context.sync()\n        .then(function () {\n            \n            // Write the text.                  \n            $.each(paragraphs.items, function(index, paragraph) {\n                console.log(\"Paragraph type: \" + paragraph.type);\n                console.log(\"Paragraph ID: \" + paragraph.id);\n            });\n        });\n})        \n.catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n}); \n```\n```javascript\nOneNote.run(function(context) {\n    var app = context.application;\n    \n    // Gets the active outline\n    var outline = app.getActiveOutline();\n    \n    // load nested paragraphs and their types.\n    outline.load(\"paragraphs/type\");\n    \n    return context.sync().then(function () {\n        var paragraphs = outline.paragraphs.items;\n        \n        var promise;\n        // for each nested paragraphs, load tables only\n        for (var i = 0; i < paragraphs.length; i++) {\n            var paragraph = paragraphs[i];\n            if (paragraph.type == \"Table\") {\n                paragraph.load(\"table/id\");\n                promise =  context.sync().then(function() {\n                    console.log(paragraph.table.id);\n                });\n            }\n        }\n        return promise;\n    })\n})\n.catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
  name: load(option)
  fullName: onenote.OneNote.Paragraph.load
  langs:
  - typeScript
  type: method
  syntax:
    content: 'load(option?: string | string[]): OneNote.Paragraph;'
    return:
      type:
      - onenote.OneNote.Paragraph
      description: ''
    parameters:
    - id: option
      description: Строка, разделенных запятыми или массив строк, задающих свойства для загрузки.
      type:
      - string | string[]
- uid: onenote.OneNote.Paragraph.outline
  summary: >-
    Получает объект Outline, содержащий объект Paragraph. Только для чтения.


    \[[Набор API-Интерфейсов: OneNoteApi 1.1](/javascript/office/requirement-sets/onenote-api-requirement-sets)\]
  name: outline
  fullName: onenote.OneNote.Paragraph.outline
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly outline: OneNote.Outline;'
    return:
      type:
      - onenote.OneNote.Outline
- uid: onenote.OneNote.Paragraph.paragraphs
  summary: >-
    Коллекция абзацев под этим абзацем. Только для чтения


    \[[Набор API-Интерфейсов: OneNoteApi 1.1](/javascript/office/requirement-sets/onenote-api-requirement-sets)\]
  name: paragraphs
  fullName: onenote.OneNote.Paragraph.paragraphs
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly paragraphs: OneNote.ParagraphCollection;'
    return:
      type:
      - onenote.OneNote.ParagraphCollection
- uid: onenote.OneNote.Paragraph.parentParagraph
  summary: >-
    Получает родительский объект Paragraph. Возвращает исключение, если родительского объекта абзаца не существует. Только для чтения.


    \[[Набор API-Интерфейсов: OneNoteApi 1.1](/javascript/office/requirement-sets/onenote-api-requirement-sets)\]
  name: parentParagraph
  fullName: onenote.OneNote.Paragraph.parentParagraph
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly parentParagraph: OneNote.Paragraph;'
    return:
      type:
      - onenote.OneNote.Paragraph
- uid: onenote.OneNote.Paragraph.parentParagraphOrNull
  summary: >-
    Получает родительский объект Paragraph. Возвращает значение null, если родительского объекта абзаца не существует. Только для чтения.


    \[[Набор API-Интерфейсов: OneNoteApi 1.1](/javascript/office/requirement-sets/onenote-api-requirement-sets)\]
  name: parentParagraphOrNull
  fullName: onenote.OneNote.Paragraph.parentParagraphOrNull
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly parentParagraphOrNull: OneNote.Paragraph;'
    return:
      type:
      - onenote.OneNote.Paragraph
- uid: onenote.OneNote.Paragraph.parentTableCell
  summary: >-
    Получает объект TableCell, содержащий объект Paragraph, если он существует. Если родительский объект не TableCell, возвращает ItemNotFound. Только для чтения.


    \[[Набор API-Интерфейсов: OneNoteApi 1.1](/javascript/office/requirement-sets/onenote-api-requirement-sets)\]
  name: parentTableCell
  fullName: onenote.OneNote.Paragraph.parentTableCell
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly parentTableCell: OneNote.TableCell;'
    return:
      type:
      - onenote.OneNote.TableCell
- uid: onenote.OneNote.Paragraph.parentTableCellOrNull
  summary: >-
    Получает объект TableCell, содержащий объект Paragraph, если он существует. Если родительский объект не TableCell, возвращает значение null. Только для чтения.


    \[[Набор API-Интерфейсов: OneNoteApi 1.1](/javascript/office/requirement-sets/onenote-api-requirement-sets)\]
  name: parentTableCellOrNull
  fullName: onenote.OneNote.Paragraph.parentTableCellOrNull
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly parentTableCellOrNull: OneNote.TableCell;'
    return:
      type:
      - onenote.OneNote.TableCell
- uid: onenote.OneNote.Paragraph.richText
  summary: >-
    Получает объект RichText в объекте Paragraph. Выдает исключение, если ParagraphType не является RichText. Только для чтения


    \[[Набор API-Интерфейсов: OneNoteApi 1.1](/javascript/office/requirement-sets/onenote-api-requirement-sets)\]
  name: richText
  fullName: onenote.OneNote.Paragraph.richText
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly richText: OneNote.RichText;'
    return:
      type:
      - onenote.OneNote.RichText
- uid: onenote.OneNote.Paragraph.table
  summary: >-
    Получает объект Table в объекте Paragraph. Вызывает исключение, если ParagraphType не является Table. Только для чтения.


    \[[Набор API-Интерфейсов: OneNoteApi 1.1](/javascript/office/requirement-sets/onenote-api-requirement-sets)\]
  name: table
  fullName: onenote.OneNote.Paragraph.table
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly table: OneNote.Table;'
    return:
      type:
      - OneNote.Table
- uid: onenote.OneNote.Paragraph.toJSON
  name: toJSON()
  fullName: onenote.OneNote.Paragraph.toJSON
  langs:
  - typeScript
  type: method
  syntax:
    content: 'toJSON(): OneNote.Interfaces.ParagraphData;'
    return:
      type:
      - onenote.OneNote.Interfaces.ParagraphData
      description: ''
- uid: onenote.OneNote.Paragraph.track
  summary: Отслеживание объектов для автоматической на основании соседних изменения в документе. Этот вызов это сокращение для context.trackedObjects.add(thisObject). Если вы используете этот объект «.sync» вызовах и за пределами последовательного выполнение пакета «.run» и get «InvalidObjectPath» ошибка при установке свойства или вызова метода на объекте, необходимые для добавления объекта отслеживаемого объекта Сначала создается объект семейства сайтов.
  name: track()
  fullName: onenote.OneNote.Paragraph.track
  langs:
  - typeScript
  type: method
  syntax:
    content: 'track(): OneNote.Paragraph;'
    return:
      type:
      - onenote.OneNote.Paragraph
      description: ''
- uid: onenote.OneNote.Paragraph.type
  summary: >-
    Получает тип объекта Paragraph. Только для чтения.


    \[[Набор API-Интерфейсов: OneNoteApi 1.1](/javascript/office/requirement-sets/onenote-api-requirement-sets)\]
  name: type
  fullName: onenote.OneNote.Paragraph.type
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly type: OneNote.ParagraphType | "RichText" | "Image" | "Table" | "Ink" | "Other";'
    return:
      type:
      - OneNote.ParagraphType | "RichText" | "Image" | "Table" | "Ink" | "Other"
- uid: onenote.OneNote.Paragraph.untrack
  summary: Выпуск памяти, связанное с объектом, если ранее отслеживаются. Этот вызов — это сокращение для context.trackedObjects.remove(thisObject). Создавая множество отслеживаемых объектов замедляет ведущего приложения, так помните освободить место на любые объекты, добавлении, после завершения их использования. Необходимо будет вызывать «context.sync()» до выпуска памяти вступает в силу.
  name: untrack()
  fullName: onenote.OneNote.Paragraph.untrack
  langs:
  - typeScript
  type: method
  syntax:
    content: 'untrack(): OneNote.Paragraph;'
    return:
      type:
      - onenote.OneNote.Paragraph
      description: ''
