### YamlMime:UniversalReference
ms.openlocfilehash: 091cbc28583e31cc6e45a1e2be0bdec65c4dbb04
ms.sourcegitcommit: 3771b97cffd6e0510fd4e9c6288db696cd0c0ca9
ms.translationtype: MT
ms.contentlocale: ru-RU
ms.lasthandoff: 11/30/2018
ms.locfileid: "26996286"
items:
- uid: onenote.OneNote.NotebookCollection
  summary: >-
    <span data-ttu-id="2c6af-101">Представляет коллекцию записных книжек.</span><span class="sxs-lookup"><span data-stu-id="2c6af-101">Represents a collection of notebooks.</span></span>


    <span data-ttu-id="2c6af-102">\[[Набор API-Интерфейсов: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="2c6af-102">\[ [API set: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets) \]</span></span>
  name: OneNote.NotebookCollection
  fullName: OneNote.NotebookCollection
  langs:
  - typeScript
  type: class
  extends:
  - office.OfficeExtension.ClientObject
  package: onenote
  children:
  - onenote.OneNote.NotebookCollection.count
  - onenote.OneNote.NotebookCollection.getByName
  - onenote.OneNote.NotebookCollection.getItem
  - onenote.OneNote.NotebookCollection.getItemAt
  - onenote.OneNote.NotebookCollection.items
  - onenote.OneNote.NotebookCollection.load
  - onenote.OneNote.NotebookCollection.toJSON
  - onenote.OneNote.NotebookCollection.track
  - onenote.OneNote.NotebookCollection.untrack
- uid: onenote.OneNote.NotebookCollection.count
  summary: >-
    <span data-ttu-id="2c6af-p101">Возвращает количество записных книжек в коллекции. Только для чтения.</span><span class="sxs-lookup"><span data-stu-id="2c6af-p101">Returns the number of notebooks in the collection. Read-only.</span></span>


    <span data-ttu-id="2c6af-105">\[[Набор API-Интерфейсов: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="2c6af-105">\[ [API set: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets) \]</span></span>
  name: count
  fullName: count
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly count: number;'
    return:
      type:
      - number
- uid: onenote.OneNote.NotebookCollection.getByName
  summary: >-
    <span data-ttu-id="2c6af-106">Получает коллекцию записных книжек с указанным именем, открытую в экземпляре приложения.</span><span class="sxs-lookup"><span data-stu-id="2c6af-106">Gets the collection of notebooks with the specified name that are open in the application instance.</span></span>


    <span data-ttu-id="2c6af-107">\[[Набор API-Интерфейсов: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="2c6af-107">\[ [API set: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets) \]</span></span>
  name: getByName(name)
  fullName: getByName
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getByName(name: string): OneNote.NotebookCollection;'
    return:
      type:
      - onenote.OneNote.NotebookCollection
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"2c6af-108\">Примеры</span><span class=\"sxs-lookup\"><span data-stu-id=\"2c6af-108\">Examples</span></span>\n\n```javascript\nOneNote.run(function (context) {\n\n    // Get the notebooks that are open in the application instance and have the specified name.\n    var notebooks = context.application.notebooks.getByName(\"Homework\");\n\n    // Queue a command to load the notebooks. \n    // For best performance, request specific properties.           \n    notebooks.load(\"id,name\");\n\n    // Run the queued commands, and return a promise to indicate task completion.\n    return context.sync()\n        .then(function () {\n\n            // Iterate through the collection or access items individually by index,\n            // for example: notebooks.items[0]\n            if (notebooks.items.length > 0) {\n                console.log(\"Notebook name: \" + notebooks.items[0].name);\n                console.log(\"Notebook ID: \" + notebooks.items[0].id);\n            }\n                \n        });\n})\n.catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
    parameters:
    - id: name
      description: <span data-ttu-id="2c6af-109">Имя записной книжки.</span><span class="sxs-lookup"><span data-stu-id="2c6af-109">The name of the notebook.</span></span>
      type:
      - string
- uid: onenote.OneNote.NotebookCollection.getItem
  summary: >-
    <span data-ttu-id="2c6af-p102">Получает записную книжку по ее идентификатору или индексу в коллекции. Только для чтения.</span><span class="sxs-lookup"><span data-stu-id="2c6af-p102">Gets a notebook by ID or by its index in the collection. Read-only.</span></span>


    <span data-ttu-id="2c6af-112">\[[Набор API-Интерфейсов: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="2c6af-112">\[ [API set: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets) \]</span></span>
  name: getItem(index)
  fullName: getItem
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getItem(index: number | string): OneNote.Notebook;'
    return:
      type:
      - onenote.OneNote.Notebook
      description: ''
    parameters:
    - id: index
      description: <span data-ttu-id="2c6af-113">Идентификатор записной книжки или расположение индекса записной книжки в коллекции.</span><span class="sxs-lookup"><span data-stu-id="2c6af-113">The ID of the notebook, or the index location of the notebook in the collection.</span></span>
      type:
      - number | string
- uid: onenote.OneNote.NotebookCollection.getItemAt
  summary: >-
    <span data-ttu-id="2c6af-114">Получает записную книжку по ее позиции в коллекции.</span><span class="sxs-lookup"><span data-stu-id="2c6af-114">Gets a notebook on its position in the collection.</span></span>


    <span data-ttu-id="2c6af-115">\[[Набор API-Интерфейсов: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="2c6af-115">\[ [API set: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets) \]</span></span>
  name: getItemAt(index)
  fullName: getItemAt
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getItemAt(index: number): OneNote.Notebook;'
    return:
      type:
      - onenote.OneNote.Notebook
      description: ''
    parameters:
    - id: index
      description: <span data-ttu-id="2c6af-p103">Значение индекса получаемого объекта. Используется нулевой индекс.</span><span class="sxs-lookup"><span data-stu-id="2c6af-p103">Index value of the object to be retrieved. Zero-indexed.</span></span>
      type:
      - number
- uid: onenote.OneNote.NotebookCollection.items
  summary: <span data-ttu-id="2c6af-118">Получает загруженных дочерних элементов в этом семействе.</span><span class="sxs-lookup"><span data-stu-id="2c6af-118">Gets the loaded child items in this collection.</span></span>
  name: items
  fullName: items
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly items: OneNote.Notebook[];'
    return:
      type:
      - OneNote.Notebook[]
- uid: onenote.OneNote.NotebookCollection.load
  summary: <span data-ttu-id="2c6af-119">Очереди команды для загрузки указанного свойства объекта.</span><span class="sxs-lookup"><span data-stu-id="2c6af-119">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="2c6af-120">Перед чтением свойства необходимо вызвать «context.sync()».</span><span class="sxs-lookup"><span data-stu-id="2c6af-120">You must call "context.sync()" before reading the properties.</span></span>
  remarks: "<span data-ttu-id=\"2c6af-121\">В дополнение к подписи этот метод имеет следующие цифровые подписи.</span><span class=\"sxs-lookup\"><span data-stu-id=\"2c6af-121\">In addition to this signature, this method has the following signatures:</span></span>\n\n<span data-ttu-id=\"2c6af-122\">`load(option?: { select?: string; expand?: string; }): OneNote.NotebookCollection`-Option.select — это разделенный запятыми строка, указывающая свойства для загрузки, куда options.expand — это разделенный запятыми строка, указывающая свойства навигации для загрузки.</span><span class=\"sxs-lookup\"><span data-stu-id=\"2c6af-122\">`load(option?: { select?: string; expand?: string; }): OneNote.NotebookCollection` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.</span></span>\n\n<span data-ttu-id=\"2c6af-123\">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): OneNote.NotebookCollection`-Доступно только на коллекцию типов.</span><span class=\"sxs-lookup\"><span data-stu-id=\"2c6af-123\">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): OneNote.NotebookCollection` - Only available on collection types.</span></span> <span data-ttu-id=\"2c6af-124\">Это похоже на предыдущую.</span><span class=\"sxs-lookup\"><span data-stu-id=\"2c6af-124\">It is similar to the preceding signature.</span></span> <span data-ttu-id=\"2c6af-125\">Option.Top указывает максимальное число элементов коллекции, которые можно включить в результат.</span><span class=\"sxs-lookup\"><span data-stu-id=\"2c6af-125\">Option.top specifies the maximum number of collection items that can be included in the result.</span></span> <span data-ttu-id=\"2c6af-126\">Option.Skip указывает количество элементов, которые пропускаются и не включенный в результате.</span><span class=\"sxs-lookup\"><span data-stu-id=\"2c6af-126\">Option.skip specifies the number of items that are to be skipped and not included in the result.</span></span> <span data-ttu-id=\"2c6af-127\">Если option.top указан, результирующий набор будет запущен процесс после пропускает указанное число элементов.</span><span class=\"sxs-lookup\"><span data-stu-id=\"2c6af-127\">If option.top is specified, the result set will start after skipping the specified number of items.</span></span>\n#### <a name=\"examples\"></a><span data-ttu-id=\"2c6af-128\">Примеры</span><span class=\"sxs-lookup\"><span data-stu-id=\"2c6af-128\">Examples</span></span>\n\n```javascript\nOneNote.run(function (context) {\n\n    // Get the notebooks that are open in the application instance and have the specified name.\n    var notebooks = context.application.notebooks.getByName(\"Homework\");\n\n    // Queue a command to load the notebooks. \n    // For best performance, request specific properties.           \n    notebooks.load(\"id\");\n\n    // Run the queued commands, and return a promise to indicate task completion.\n    return context.sync()\n        .then(function () {\n\n            // Iterate through the collection or access items individually by index, \n            // for example: notebooks.items[0]\n            $.each(notebooks.items, function(index, notebook) {\n                notebook.addSection(\"Biology\");\n                notebook.addSection(\"Spanish\");\n                notebook.addSection(\"Computer Science\");\n            });\n            \n            return context.sync();\n        });\n})\n.catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
  name: load(option)
  fullName: load
  langs:
  - typeScript
  type: method
  syntax:
    content: 'load(option?: string | string[]): OneNote.NotebookCollection;'
    return:
      type:
      - onenote.OneNote.NotebookCollection
      description: ''
    parameters:
    - id: option
      description: <span data-ttu-id="2c6af-129">Строка, разделенных запятыми или массив строк, задающих свойства для загрузки.</span><span class="sxs-lookup"><span data-stu-id="2c6af-129">A comma-delimited string or an array of strings that specify the properties to load.</span></span>
      type:
      - string | string[]
- uid: onenote.OneNote.NotebookCollection.toJSON
  name: toJSON()
  fullName: toJSON
  langs:
  - typeScript
  type: method
  syntax:
    content: 'toJSON(): OneNote.Interfaces.NotebookCollectionData;'
    return:
      type:
      - onenote.OneNote.Interfaces.NotebookCollectionData
      description: ''
- uid: onenote.OneNote.NotebookCollection.track
  summary: <span data-ttu-id="2c6af-130">Отслеживание объектов для автоматической на основании соседних изменения в документе.</span><span class="sxs-lookup"><span data-stu-id="2c6af-130">Track the object for automatic adjustment based on surrounding changes in the document.</span></span> <span data-ttu-id="2c6af-131">Этот вызов это сокращение для context.trackedObjects.add(thisObject).</span><span class="sxs-lookup"><span data-stu-id="2c6af-131">This call is a shorthand for context.trackedObjects.add(thisObject).</span></span> <span data-ttu-id="2c6af-132">Если вы используете этот объект «.sync» вызовах и за пределами последовательного выполнение пакета «.run» и get «InvalidObjectPath» ошибка при установке свойства или вызова метода на объекте, необходимые для добавления объекта отслеживаемого объекта Сначала создается объект семейства сайтов.</span><span class="sxs-lookup"><span data-stu-id="2c6af-132">If you are using this object across ".sync" calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you needed to have added the object to the tracked object collection when the object was first created.</span></span>
  name: track()
  fullName: track
  langs:
  - typeScript
  type: method
  syntax:
    content: 'track(): OneNote.NotebookCollection;'
    return:
      type:
      - onenote.OneNote.NotebookCollection
      description: ''
- uid: onenote.OneNote.NotebookCollection.untrack
  summary: <span data-ttu-id="2c6af-133">Выпуск памяти, связанное с объектом, если ранее отслеживаются.</span><span class="sxs-lookup"><span data-stu-id="2c6af-133">Release the memory associated with this object, if it has previously been tracked.</span></span> <span data-ttu-id="2c6af-134">Этот вызов — это сокращение для context.trackedObjects.remove(thisObject).</span><span class="sxs-lookup"><span data-stu-id="2c6af-134">This call is shorthand for context.trackedObjects.remove(thisObject).</span></span> <span data-ttu-id="2c6af-135">Создавая множество отслеживаемых объектов замедляет ведущего приложения, так помните освободить место на любые объекты, добавлении, после завершения их использования.</span><span class="sxs-lookup"><span data-stu-id="2c6af-135">Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them.</span></span> <span data-ttu-id="2c6af-136">Необходимо будет вызывать «context.sync()» до выпуска памяти вступает в силу.</span><span class="sxs-lookup"><span data-stu-id="2c6af-136">You will need to call "context.sync()" before the memory release takes effect.</span></span>
  name: untrack()
  fullName: untrack
  langs:
  - typeScript
  type: method
  syntax:
    content: 'untrack(): OneNote.NotebookCollection;'
    return:
      type:
      - onenote.OneNote.NotebookCollection
      description: ''
