### YamlMime:UniversalReference
items:
  - uid: onenote.OneNote.Image
    summary: |-
      Представляет изображение. Объект Image может быть прямым потомком объекта PageContent или объекта Paragraph.

      \[[Набор API: OneNoteApi 1,1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
    name: OneNote.Image
    fullName: OneNote.Image
    langs:
      - typeScript
    type: class
    extends:
      - 'OfficeExtension.ClientObject '
    package: onenote
    children:
      - onenote.OneNote.Image.context
      - onenote.OneNote.Image.description
      - onenote.OneNote.Image.getBase64Image
      - onenote.OneNote.Image.height
      - onenote.OneNote.Image.hyperlink
      - onenote.OneNote.Image.id
      - onenote.OneNote.Image.load
      - onenote.OneNote.Image.load_1
      - onenote.OneNote.Image.load_2
      - onenote.OneNote.Image.ocrData
      - onenote.OneNote.Image.pageContent
      - onenote.OneNote.Image.paragraph
      - onenote.OneNote.Image.set
      - onenote.OneNote.Image.set_1
      - onenote.OneNote.Image.toJSON
      - onenote.OneNote.Image.track
      - onenote.OneNote.Image.untrack
      - onenote.OneNote.Image.width
  - uid: onenote.OneNote.Image.context
    summary: 'Контекст запроса, связанный с объектом. Это подсоединяет процесс надстройки к процессу ведущего приложения Office.'
    name: context
    fullName: context
    langs:
      - typeScript
    type: property
    syntax:
      content: 'context: RequestContext;'
      return:
        type:
          - onenote.OneNote.RequestContext
  - uid: onenote.OneNote.Image.description
    summary: |-
      Получает или задает описание объекта Image.

      \[[Набор API: OneNoteApi 1,1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
    name: description
    fullName: description
    langs:
      - typeScript
    type: property
    syntax:
      content: 'description: string;'
      return:
        type:
          - string
  - uid: onenote.OneNote.Image.getBase64Image
    summary: |-
      Получает двоичное представление объекта Image в кодировке Base64. Пример: data: Image/PNG; Base64, iVBORw0KGgoAAAANSUhEUgAAADIA...

      \[[Набор API: OneNoteApi 1,1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
    name: getBase64Image()
    fullName: getBase64Image()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getBase64Image(): OfficeExtension.ClientResult<string>;'
      return:
        type:
          - OfficeExtension.ClientResult<string>
        description: |-


          #### <a name="examples"></a>Примеры

          ```javascript

          var image = null;
          var imageString;

          OneNote.run(function(ctx){
              // Get the current outline.         
              var outline = ctx.application.getActiveOutline();
              
              // Queue a command to load paragraphs and their types. 
              outline.load("paragraphs/type")
              return ctx.sync().
                  then(function(){
                      for (var i=0; i < outline.paragraphs.items.length; i++)
                      {
                          var paragraph = outline.paragraphs.items[i];
                          if (paragraph.type == "Image")
                          {
                              image = paragraph.image;
                          }
                      }
                  })
                  .then(function(){
                      if (image != null)
                      {
                          imageString = image.getBase64Image();
                          return ctx.sync();
                      }
                  })
                  .then(function(){
                      console.log(imageString);
                  });
          });
          ```
  - uid: onenote.OneNote.Image.height
    summary: |-
      Получает или задает высоту объекта Image.

      \[[Набор API: OneNoteApi 1,1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
    name: height
    fullName: height
    langs:
      - typeScript
    type: property
    syntax:
      content: 'height: number;'
      return:
        type:
          - number
  - uid: onenote.OneNote.Image.hyperlink
    summary: |-
      Получает или задает гиперссылку для объекта Image.

      \[[Набор API: OneNoteApi 1,1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
    name: hyperlink
    fullName: hyperlink
    langs:
      - typeScript
    type: property
    syntax:
      content: 'hyperlink: string;'
      return:
        type:
          - string
  - uid: onenote.OneNote.Image.id
    summary: |-
      Получает идентификатор объекта Image. Только для чтения.

      \[[Набор API: OneNoteApi 1,1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
    name: id
    fullName: id
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly id: string;'
      return:
        type:
          - string
  - uid: onenote.OneNote.Image.load
    summary: Добавляет в очередь команду для загрузки указанных свойств объекта. Перед чтением свойств необходимо вызвать метод context.sync().
    remarks: |-
      В дополнение к этой подписи этот метод имеет следующие подписи:

      `load(option?: string | string[]): OneNote.Image`-WHERE — это строка с разделителями-запятыми или массив строк, указывающий свойства для загрузки.

      `load(option?: { select?: string; expand?: string; }): OneNote.Image`-WHERE. Select — это строка с разделителями-запятыми, указывающая свойства для загрузки и параметры. Expand — это строка с разделителями-запятыми, указывающая свойства навигации для загрузки.

      `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): OneNote.Image`— Доступно только для типов коллекций. Он аналогичен предыдущей подписи. Option. Top указывает максимальное количество элементов коллекции, которые можно включить в результат. Option. skip указывает количество элементов, которые будут пропущены и не включены в результат. Если указан параметр Option. Top, результирующий набор начнется после пропуска указанного числа элементов.
    name: load(option)
    fullName: load(option)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(option?: OneNote.Interfaces.ImageLoadOptions): OneNote.Image;'
      return:
        type:
          - onenote.OneNote.Image
        description: ''
      parameters:
        - id: option
          description: ''
          type:
            - onenote.OneNote.Interfaces.ImageLoadOptions
  - uid: onenote.OneNote.Image.load_1
    summary: Добавляет в очередь команду для загрузки указанных свойств объекта. Перед чтением свойств `context.sync()` необходимо вызвать метод.
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): OneNote.Image;'
      return:
        type:
          - onenote.OneNote.Image
        description: |-


          #### <a name="examples"></a>Примеры

          ```javascript
          OneNote.run(function(ctx){
              // Get the current outline.         
              var outline = ctx.application.getActiveOutline();
              var image = null;
              
              // Queue a command to load paragraphs and their types. 
              outline.load("paragraphs/type")
              return ctx.sync().
                  then(function(){
                      for (var i=0; i < outline.paragraphs.items.length; i++)
                      {
                          var paragraph = outline.paragraphs.items[i];
                          if (paragraph.type == "Image")
                          {
                              image = paragraph.image;
                          }
                      }
                  })
                  .then(function(){
                      if (image != null)
                      {
                          // load every properties and relationships
                          ctx.load(image);
                          return ctx.sync();
                      }
                  })
                  .then(function(){
                      if (image != null)
                      {                   
                          console.log("image " + image.id + " width is " + image.width + " height is " + image.height);
                          console.log("description: " + image.description);                   
                          console.log("hyperlink: " + image.hyperlink);
                      }
                  });
          });
          ```
          ```javascript
          var image = null;

          OneNote.run(function(ctx){
              // Get the current outline.
              var outline = ctx.application.getActiveOutline();

              // Queue a command to load paragraphs and their types.
              outline.load("paragraphs")
              return ctx.sync().
                  then(function(){
                      for (var i=0; i < outline.paragraphs.items.length; i++)
                      {
                          var paragraph = outline.paragraphs.items[i];
                          if (paragraph.type == "Image")
                          {
                              image = paragraph.image;
                          }
                      }
                      if (image != null)
                      {
                         image.load("ocrData");
                      }
                      return ctx.sync();
                  })
                  .then(function(){
                      console.log(image.ocrData);
                  });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
          ```javascript
          OneNote.run(function(ctx){
              // Get the current outline.         
              var outline = ctx.application.getActiveOutline();
              var searchedParagraph = null;
              
              // Queue a command to load paragraphs and their types. 
              outline.load("paragraphs/type")
              return ctx.sync().
                  then(function() {
                      for (var i=0; i < outline.paragraphs.items.length; i++)
                      {
                          var paragraph = outline.paragraphs.items[i];
                          if (paragraph.type == "Image")
                          {
                              searchedParagraph = paragraph;
                              break;
                          }
                      }
                  })
                  .then(function() {
                      if (searchedParagraph != null)
                      {
                          // load every properties and relationships
                          searchedParagraph.image.load('paragraph');
                          return ctx.sync();
                      }
                  })
                  .then(function() {
                      if (searchedParagraph != null)
                      {                   
                          if (searchedParagraph.id != searchedParagraph.image.paragraph.id)
                          {
                              console.log("id must match");
                          }
                      }
                  });
          })
          .catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          }); 
          ```
      parameters:
        - id: propertyNames
          description: 'Строка, разделенная запятыми, или массив строк, указывающий свойства для загрузки.'
          type:
            - 'string | string[]'
  - uid: onenote.OneNote.Image.load_2
    summary: Добавляет в очередь команду для загрузки указанных свойств объекта. Перед чтением свойств `context.sync()` необходимо вызвать метод.
    name: load(propertyNamesAndPaths)
    fullName: load(propertyNamesAndPaths)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNamesAndPaths?: { select?: string; expand?: string; }): OneNote.Image;'
      return:
        type:
          - onenote.OneNote.Image
        description: ''
      parameters:
        - id: propertyNamesAndPaths
          description: 'Где Пропертинамесандпасс. Select — это строка с разделителями-запятыми, задающая свойства для загрузки, и Пропертинамесандпасс. Expand — это строка с разделителями-запятыми, указывающая свойства навигации для загрузки.'
          type:
            - '{ select?: string; expand?: string; }'
  - uid: onenote.OneNote.Image.ocrData
    summary: |-
      Получает данные, собранные с помощью распознавания текста (OCR) для этого объекта Image, например текст и язык.

      \[[Набор API: OneNoteApi 1,1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
    name: ocrData
    fullName: ocrData
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly ocrData: OneNote.ImageOcrData;'
      return:
        type:
          - onenote.OneNote.ImageOcrData
        description: |-


          #### <a name="examples"></a>Примеры

          ```javascript
          var image = null;

          OneNote.run(function(ctx){
              // Get the current outline.
              var outline = ctx.application.getActiveOutline();

              // Queue a command to load paragraphs and their types.
              outline.load("paragraphs")
              return ctx.sync().
                  then(function(){
                      for (var i=0; i < outline.paragraphs.items.length; i++)
                      {
                          var paragraph = outline.paragraphs.items[i];
                          if (paragraph.type == "Image")
                          {
                              image = paragraph.image;
                          }
                      }
                      if (image != null)
                      {
                         image.load("ocrData");
                      }
                      return ctx.sync();
                  })
                  .then(function(){
                      
                      // Log ocrText and ocrLanguageId
                      console.log(image.ocrData.ocrText);
                      console.log(image.ocrData.ocrLanguageId);
                  });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: onenote.OneNote.Image.pageContent
    summary: |-
      Получает объект PageContent, содержащий объект Image. Выдает исключение, если объект Image не является непосредственным дочерним элементом для объекта PageContent. Этот объект определяет положение объекта Image на странице. Только для чтения.

      \[[Набор API: OneNoteApi 1,1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
    name: pageContent
    fullName: pageContent
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly pageContent: OneNote.PageContent;'
      return:
        type:
          - onenote.OneNote.PageContent
  - uid: onenote.OneNote.Image.paragraph
    summary: |-
      Получает объект Paragraph, содержащий объект Image. Выдает исключение, если объект Image не является непосредственным дочерним элементом для объекта Paragraph. Только для чтения.

      \[[Набор API: OneNoteApi 1,1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
    name: paragraph
    fullName: paragraph
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly paragraph: OneNote.Paragraph;'
      return:
        type:
          - onenote.OneNote.Paragraph
  - uid: onenote.OneNote.Image.set
    summary: 'Задает одновременно несколько свойств объекта. Можно передать либо простой объект с соответствующими свойствами, либо другой объект API того же типа.'
    remarks: |-
      Этот метод имеет следующую дополнительную подпись:

      `set(properties: OneNote.Image): void`
    name: 'set(properties, options)'
    fullName: 'set(properties, options)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'set(properties: Interfaces.ImageUpdateData, options?: OfficeExtension.UpdateOptions): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: properties
          description: 'Объект JavaScript со свойствами, которые структурированы исоморфикалли к свойствам объекта, для которого вызывается метод.'
          type:
            - Interfaces.ImageUpdateData
        - id: options
          description: 'Предоставляет возможность подавлять ошибки, если объект Properties пытается задать любые свойства, предназначенные только для чтения.'
          type:
            - OfficeExtension.UpdateOptions
  - uid: onenote.OneNote.Image.set_1
    summary: Задает одновременно несколько свойств объекта на основе существующего загруженного объекта.
    name: set(properties)
    fullName: set(properties)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'set(properties: OneNote.Image): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: properties
          description: ''
          type:
            - onenote.OneNote.Image
  - uid: onenote.OneNote.Image.toJSON
    summary: 'Переопределяет метод `toJSON()` JavaScript для предоставления более удобного вывода при передаче объекта API`JSON.stringify()`<!-- -->. (`JSON.stringify`<!-- -->, в свою очередь, вызывает `toJSON` метод объекта, который передается ему.) В то время как исходный объект OneNote. Image является объектом API, `toJSON` метод возвращает простой объект JavaScript (тип`OneNote.Interfaces.ImageData`<!-- -->), который содержит неполные копии загруженных дочерних свойств из исходного объекта.'
    name: toJSON()
    fullName: toJSON()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON(): OneNote.Interfaces.ImageData;'
      return:
        type:
          - onenote.OneNote.Interfaces.ImageData
        description: ''
  - uid: onenote.OneNote.Image.track
    summary: 'Отслеживает объект для автоматической корректировки с учетом окружающих изменений в документе. Этот вызов является сокращением для context.trackedObjects.add(thisObject). Если этот объект используется в вызовах .sync и вне последовательного выполнения пакета .run с возникновением ошибки InvalidObjectPath при установке свойства или вызове метода для объекта, необходимо было добавить объект в коллекцию отслеживаемых объектов при первоначальном создании объекта.'
    name: track()
    fullName: track()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'track(): OneNote.Image;'
      return:
        type:
          - onenote.OneNote.Image
        description: ''
  - uid: onenote.OneNote.Image.untrack
    summary: 'Освобождает память, связанную с этим объектом, если он ранее отслеживался. Этот вызов является сокращением для context.trackedObjects.remove(thisObject). Наличие большого количества отслеживаемых объектов замедляет ведущее приложение, поэтому не забывайте освобождать любые добавленные объекты после завершения их использования. Перед фактическим освобождением памяти потребуется вызвать метод context.sync().'
    name: untrack()
    fullName: untrack()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'untrack(): OneNote.Image;'
      return:
        type:
          - onenote.OneNote.Image
        description: ''
  - uid: onenote.OneNote.Image.width
    summary: |-
      Получает или задает ширину объекта Image.

      \[[Набор API: OneNoteApi 1,1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
    name: width
    fullName: width
    langs:
      - typeScript
    type: property
    syntax:
      content: 'width: number;'
      return:
        type:
          - number