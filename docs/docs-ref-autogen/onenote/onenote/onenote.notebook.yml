### YamlMime:UniversalReference
items:
  - uid: 'onenote!OneNote.Notebook:class'
    summary: |-
      <span data-ttu-id="6e1c1-101">Представляет записную книжку OneNote.</span><span class="sxs-lookup"><span data-stu-id="6e1c1-101">Represents a OneNote notebook.</span></span> <span data-ttu-id="6e1c1-102">Записные книжки содержат группы разделов и разделы.</span><span class="sxs-lookup"><span data-stu-id="6e1c1-102">Notebooks contain section groups and sections.</span></span>

      <span data-ttu-id="6e1c1-103">\[[Набор API: OneNoteApi 1,1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="6e1c1-103">\[ [API set: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets) \]</span></span>
    name: OneNote.Notebook
    fullName: OneNote.Notebook
    langs:
      - typeScript
    type: class
    extends:
      - 'onenote!OfficeExtension.ClientObject:class'
    package: onenote!
    children:
      - 'onenote!OneNote.Notebook#addSection:member(1)'
      - 'onenote!OneNote.Notebook#addSectionGroup:member(1)'
      - 'onenote!OneNote.Notebook#baseUrl:member'
      - 'onenote!OneNote.Notebook#clientUrl:member'
      - 'onenote!OneNote.Notebook#context:member'
      - 'onenote!OneNote.Notebook#getRestApiId:member(1)'
      - 'onenote!OneNote.Notebook#id:member'
      - 'onenote!OneNote.Notebook#isVirtual:member'
      - 'onenote!OneNote.Notebook#load:member(1)'
      - 'onenote!OneNote.Notebook#load:member(2)'
      - 'onenote!OneNote.Notebook#load:member(3)'
      - 'onenote!OneNote.Notebook#name:member'
      - 'onenote!OneNote.Notebook#sectionGroups:member'
      - 'onenote!OneNote.Notebook#sections:member'
      - 'onenote!OneNote.Notebook#toJSON:member(1)'
      - 'onenote!OneNote.Notebook#track:member(1)'
      - 'onenote!OneNote.Notebook#untrack:member(1)'
  - uid: 'onenote!OneNote.Notebook#addSection:member(1)'
    summary: |-
      <span data-ttu-id="6e1c1-104">Добавляет новый раздел в конец записной книжки.</span><span class="sxs-lookup"><span data-stu-id="6e1c1-104">Adds a new section to the end of the notebook.</span></span>

      <span data-ttu-id="6e1c1-105">\[[Набор API: OneNoteApi 1,1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="6e1c1-105">\[ [API set: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets) \]</span></span>
    name: addSection(name)
    fullName: addSection(name)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addSection(name: string): OneNote.Section;'
      return:
        type:
          - 'onenote!OneNote.Section:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="6e1c1-106">Примеры</span><span class="sxs-lookup"><span data-stu-id="6e1c1-106">Examples</span></span>

          ```javascript
          OneNote.run(function (context) {

              // Gets the active notebook.
              var notebook = context.application.getActiveNotebook();

              // Queue a command to add a new section. 
              var section = notebook.addSection("Sample section");
              
              // Queue a command to load the new section. This example reads the name property later.
              section.load("name");

              // Run the queued commands, and return a promise to indicate task completion.
              return context.sync()
                  .then(function() {
                      console.log("New section name is " + section.name);
                  });
          })
          .catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          }); 
          ```
      parameters:
        - id: name
          description: <span data-ttu-id="6e1c1-107">Имя нового раздела.</span><span class="sxs-lookup"><span data-stu-id="6e1c1-107">The name of the new section.</span></span>
          type:
            - string
  - uid: 'onenote!OneNote.Notebook#addSectionGroup:member(1)'
    summary: |-
      <span data-ttu-id="6e1c1-108">Добавляет новую группу разделов в конец записной книжки.</span><span class="sxs-lookup"><span data-stu-id="6e1c1-108">Adds a new section group to the end of the notebook.</span></span>

      <span data-ttu-id="6e1c1-109">\[[Набор API: OneNoteApi 1,1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="6e1c1-109">\[ [API set: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets) \]</span></span>
    name: addSectionGroup(name)
    fullName: addSectionGroup(name)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addSectionGroup(name: string): OneNote.SectionGroup;'
      return:
        type:
          - 'onenote!OneNote.SectionGroup:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="6e1c1-110">Примеры</span><span class="sxs-lookup"><span data-stu-id="6e1c1-110">Examples</span></span>

          ```javascript
          OneNote.run(function (context) {

              // Gets the active notebook.
              var notebook = context.application.getActiveNotebook();

              // Queue a command to add a new section group.
              var sectionGroup = notebook.addSectionGroup("Sample section group");

              // Queue a command to load the new section group.
              sectionGroup.load();

              // Run the queued commands, and return a promise to indicate task completion.
              return context.sync()
                  .then(function() {
                      console.log("New section group name is " + sectionGroup.name);
                  });
          })
          .catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          }); 
          ```
      parameters:
        - id: name
          description: <span data-ttu-id="6e1c1-111">Имя нового раздела.</span><span class="sxs-lookup"><span data-stu-id="6e1c1-111">The name of the new section.</span></span>
          type:
            - string
  - uid: 'onenote!OneNote.Notebook#baseUrl:member'
    summary: |-
      <span data-ttu-id="6e1c1-112">URL-адрес сайта, на котором расположена Записная книжка.</span><span class="sxs-lookup"><span data-stu-id="6e1c1-112">The url of the site that this notebook is located.</span></span> <span data-ttu-id="6e1c1-113">Только чтение</span><span class="sxs-lookup"><span data-stu-id="6e1c1-113">Read only</span></span>

      <span data-ttu-id="6e1c1-114">\[[Набор API: OneNoteApi 1,1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="6e1c1-114">\[ [API set: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets) \]</span></span>
    name: baseUrl
    fullName: baseUrl
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly baseUrl: string;'
      return:
        type:
          - string
  - uid: 'onenote!OneNote.Notebook#clientUrl:member'
    summary: |-
      <span data-ttu-id="6e1c1-115">URL-адрес записной книжки для клиента.</span><span class="sxs-lookup"><span data-stu-id="6e1c1-115">The client url of the notebook.</span></span> <span data-ttu-id="6e1c1-116">Только чтение</span><span class="sxs-lookup"><span data-stu-id="6e1c1-116">Read only</span></span>

      <span data-ttu-id="6e1c1-117">\[[Набор API: OneNoteApi 1,1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="6e1c1-117">\[ [API set: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets) \]</span></span>
    name: clientUrl
    fullName: clientUrl
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly clientUrl: string;'
      return:
        type:
          - string
  - uid: 'onenote!OneNote.Notebook#context:member'
    summary: '<span data-ttu-id="6e1c1-118">Контекст запроса, связанный с объектом.</span><span class="sxs-lookup"><span data-stu-id="6e1c1-118">The request context associated with the object.</span></span> <span data-ttu-id="6e1c1-119">Это подсоединяет процесс надстройки к процессу ведущего приложения Office.</span><span class="sxs-lookup"><span data-stu-id="6e1c1-119">This connects the add-in''s process to the Office host application''s process.</span></span>'
    name: context
    fullName: context
    langs:
      - typeScript
    type: property
    syntax:
      content: 'context: RequestContext;'
      return:
        type:
          - 'onenote!OneNote.RequestContext:class'
  - uid: 'onenote!OneNote.Notebook#getRestApiId:member(1)'
    summary: |-
      <span data-ttu-id="6e1c1-120">Получает идентификатор API REST.</span><span class="sxs-lookup"><span data-stu-id="6e1c1-120">Gets the REST API ID.</span></span>

      <span data-ttu-id="6e1c1-121">\[[Набор API: OneNoteApi 1,1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="6e1c1-121">\[ [API set: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets) \]</span></span>
    name: getRestApiId()
    fullName: getRestApiId()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getRestApiId(): OfficeExtension.ClientResult<string>;'
      return:
        type:
          - 'onenote!OneNote.Notebook#getRestApiId~0:complex'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="6e1c1-122">Примеры</span><span class="sxs-lookup"><span data-stu-id="6e1c1-122">Examples</span></span>

          ```javascript
          OneNote.run(function(ctx){
              // Get the current notebook.         
              var notebook = ctx.application.getActiveNotebook();
              var restApiId = notebook.getRestApiId();

              return ctx.sync().
                  then(function(){
                      console.log("The REST API ID is " + restApiId.value);
                      // Note that the REST API ID isn't all you need to interact with the OneNote REST API. 
                      // This is only required for SharePoint notebooks. baseUrl will be null for OneDrive notebooks.
                      // For SharePoint notebooks, the notebook baseUrl should be used to talk to the OneNote REST API
                      // according to the OneNote Development Blog.
                      // https://blogs.msdn.microsoft.com/onenotedev/2015/06/11/and-sharepoint-makes-three/
                  });
          });
          ```
  - uid: 'onenote!OneNote.Notebook#id:member'
    summary: |-
      <span data-ttu-id="6e1c1-123">Получает идентификатор записной книжки.</span><span class="sxs-lookup"><span data-stu-id="6e1c1-123">Gets the ID of the notebook.</span></span> <span data-ttu-id="6e1c1-124">Только для чтения.</span><span class="sxs-lookup"><span data-stu-id="6e1c1-124">Read-only.</span></span>

      <span data-ttu-id="6e1c1-125">\[[Набор API: OneNoteApi 1,1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="6e1c1-125">\[ [API set: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets) \]</span></span>
    name: id
    fullName: id
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly id: string;'
      return:
        type:
          - string
  - uid: 'onenote!OneNote.Notebook#isVirtual:member'
    summary: |-
      <span data-ttu-id="6e1c1-126">Значение true, если Записная книжка не создана пользователем (например, "Перемещенные разделы").</span><span class="sxs-lookup"><span data-stu-id="6e1c1-126">True if the Notebook is not created by the user (i.e. 'Misplaced Sections').</span></span> <span data-ttu-id="6e1c1-127">Только чтение</span><span class="sxs-lookup"><span data-stu-id="6e1c1-127">Read only</span></span>

      <span data-ttu-id="6e1c1-128">\[[Набор API: OneNoteApi 1,2](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="6e1c1-128">\[ [API set: OneNoteApi 1.2](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets) \]</span></span>
    name: isVirtual
    fullName: isVirtual
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly isVirtual: boolean;'
      return:
        type:
          - boolean
  - uid: 'onenote!OneNote.Notebook#load:member(1)'
    summary: <span data-ttu-id="6e1c1-129">Добавляет в очередь команду для загрузки указанных свойств объекта.</span><span class="sxs-lookup"><span data-stu-id="6e1c1-129">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="6e1c1-130">Перед чтением свойств необходимо вызвать метод context.sync().</span><span class="sxs-lookup"><span data-stu-id="6e1c1-130">You must call "context.sync()" before reading the properties.</span></span>
    remarks: |-
      <span data-ttu-id="6e1c1-131">В дополнение к этой подписи этот метод имеет следующие подписи:</span><span class="sxs-lookup"><span data-stu-id="6e1c1-131">In addition to this signature, this method has the following signatures:</span></span>

      <span data-ttu-id="6e1c1-132">`load(option?: string | string[]): OneNote.Notebook`-WHERE — это строка с разделителями-запятыми или массив строк, указывающий свойства для загрузки.</span><span class="sxs-lookup"><span data-stu-id="6e1c1-132">`load(option?: string | string[]): OneNote.Notebook` - Where option is a comma-delimited string or an array of strings that specify the properties to load.</span></span>

      <span data-ttu-id="6e1c1-133">`load(option?: { select?: string; expand?: string; }): OneNote.Notebook`-WHERE. Select — это строка с разделителями-запятыми, указывающая свойства для загрузки и параметры. Expand — это строка с разделителями-запятыми, указывающая свойства навигации для загрузки.</span><span class="sxs-lookup"><span data-stu-id="6e1c1-133">`load(option?: { select?: string; expand?: string; }): OneNote.Notebook` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.</span></span>

      <span data-ttu-id="6e1c1-134">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): OneNote.Notebook`— Доступно только для типов коллекций.</span><span class="sxs-lookup"><span data-stu-id="6e1c1-134">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): OneNote.Notebook` - Only available on collection types.</span></span> <span data-ttu-id="6e1c1-135">Он аналогичен предыдущей подписи.</span><span class="sxs-lookup"><span data-stu-id="6e1c1-135">It is similar to the preceding signature.</span></span> <span data-ttu-id="6e1c1-136">Option. Top указывает максимальное количество элементов коллекции, которые можно включить в результат.</span><span class="sxs-lookup"><span data-stu-id="6e1c1-136">Option.top specifies the maximum number of collection items that can be included in the result.</span></span> <span data-ttu-id="6e1c1-137">Option. skip указывает количество элементов, которые будут пропущены и не включены в результат.</span><span class="sxs-lookup"><span data-stu-id="6e1c1-137">Option.skip specifies the number of items that are to be skipped and not included in the result.</span></span> <span data-ttu-id="6e1c1-138">Если указан параметр Option. Top, результирующий набор начнется после пропуска указанного числа элементов.</span><span class="sxs-lookup"><span data-stu-id="6e1c1-138">If option.top is specified, the result set will start after skipping the specified number of items.</span></span>
    name: load(option)
    fullName: load(option)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(option?: OneNote.Interfaces.NotebookLoadOptions): OneNote.Notebook;'
      return:
        type:
          - 'onenote!OneNote.Notebook:class'
        description: ''
      parameters:
        - id: option
          description: ''
          type:
            - 'onenote!OneNote.Interfaces.NotebookLoadOptions:interface'
  - uid: 'onenote!OneNote.Notebook#load:member(2)'
    summary: <span data-ttu-id="6e1c1-139">Добавляет в очередь команду для загрузки указанных свойств объекта.</span><span class="sxs-lookup"><span data-stu-id="6e1c1-139">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="6e1c1-140">Перед чтением свойств `context.sync()` необходимо вызвать метод.</span><span class="sxs-lookup"><span data-stu-id="6e1c1-140">You must call `context.sync()` before reading the properties.</span></span>
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): OneNote.Notebook;'
      return:
        type:
          - 'onenote!OneNote.Notebook:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="6e1c1-141">Примеры</span><span class="sxs-lookup"><span data-stu-id="6e1c1-141">Examples</span></span>

          ```javascript
          OneNote.run(function (context) {
                  
              // Get the current notebook.
              var notebook = context.application.getActiveNotebook();
                      
              // Queue a command to load the notebook. 
              // For best performance, request specific properties.           
              notebook.load('baseUrl');
                      
              // Run the queued commands, and return a promise to indicate task completion.
              return context.sync()
                  .then(function () {
                      console.log("Base url: " + notebook.baseUrl);
                      // This is only required for SharePoint notebooks, and will be null for OneDrive notebooks.
                      // This baseUrl should be used to talk to OneNote REST APIs according to the OneNote Development Blog.
                      // https://blogs.msdn.microsoft.com/onenotedev/2015/06/11/and-sharepoint-makes-three/
                  });
          })
          .catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
          ```javascript
          OneNote.run(function (context) {
                  
              // Get the current notebook.
              var notebook = context.application.getActiveNotebook();
                      
              // Queue a command to load the notebook. 
              // For best performance, request specific properties.           
              notebook.load('id');
                      
              // Run the queued commands, and return a promise to indicate task completion.
              return context.sync()
                  .then(function () {
                      console.log("Notebook ID: " + notebook.id);
                      
                  });
          })
          .catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
          ```javascript
          OneNote.run(function (context) {
                  
              // Get the current notebook.
              var notebook = context.application.getActiveNotebook();
                      
              // Queue a command to load the notebook. 
              // For best performance, request specific properties.           
              notebook.load('name');
                      
              // Run the queued commands, and return a promise to indicate task completion.
              return context.sync()
                  .then(function () {
                      console.log("Notebook name: " + notebook.name);
                      
                  });
          })
          .catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
          ```javascript
          OneNote.run(function (context) {

              // Get the section groups in the notebook. 
              var sectionGroups = context.application.getActiveNotebook().sectionGroups;

              // Queue a command to load the sectionGroups. 
              sectionGroups.load("name");

              // Run the queued commands, and return a promise to indicate task completion.
              return context.sync()
                  .then(function() {
                      $.each(sectionGroups.items, function(index, sectionGroup) {
                          console.log("Section group name: " + sectionGroup.name);
                      });
                  });
          })
          .catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
          ```javascript
          OneNote.run(function (context) {

              // Gets the active notebook.
              var notebook = context.application.getActiveNotebook();
              
              // Queue a command to get immediate child sections of the notebook. 
              var childSections = notebook.sections;

              // Queue a command to load the childSections. 
              context.load(childSections);

              // Run the queued commands, and return a promise to indicate task completion.
              return context.sync()
                  .then(function() {
                      $.each(childSections.items, function(index, childSection) {
                          console.log("Immediate child section name: " + childSection.name);
                      });            
                  });
          })
          .catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });   
          ```
      parameters:
        - id: propertyNames
          description: '<span data-ttu-id="6e1c1-142">Строка, разделенная запятыми, или массив строк, указывающий свойства для загрузки.</span><span class="sxs-lookup"><span data-stu-id="6e1c1-142">A comma-delimited string or an array of strings that specify the properties to load.</span></span>'
          type:
            - 'string | string[]'
  - uid: 'onenote!OneNote.Notebook#load:member(3)'
    summary: <span data-ttu-id="6e1c1-143">Добавляет в очередь команду для загрузки указанных свойств объекта.</span><span class="sxs-lookup"><span data-stu-id="6e1c1-143">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="6e1c1-144">Перед чтением свойств `context.sync()` необходимо вызвать метод.</span><span class="sxs-lookup"><span data-stu-id="6e1c1-144">You must call `context.sync()` before reading the properties.</span></span>
    name: load(propertyNamesAndPaths)
    fullName: load(propertyNamesAndPaths)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNamesAndPaths?: { select?: string; expand?: string; }): OneNote.Notebook;'
      return:
        type:
          - 'onenote!OneNote.Notebook:class'
        description: ''
      parameters:
        - id: propertyNamesAndPaths
          description: '<span data-ttu-id="6e1c1-145">Где Пропертинамесандпасс. Select — это строка с разделителями-запятыми, задающая свойства для загрузки, и Пропертинамесандпасс. Expand — это строка с разделителями-запятыми, указывающая свойства навигации для загрузки.</span><span class="sxs-lookup"><span data-stu-id="6e1c1-145">Where propertyNamesAndPaths.select is a comma-delimited string that specifies the properties to load, and propertyNamesAndPaths.expand is a comma-delimited string that specifies the navigation properties to load.</span></span>'
          type:
            - '{ select?: string; expand?: string; }'
  - uid: 'onenote!OneNote.Notebook#name:member'
    summary: |-
      <span data-ttu-id="6e1c1-146">Получает имя записной книжки.</span><span class="sxs-lookup"><span data-stu-id="6e1c1-146">Gets the name of the notebook.</span></span> <span data-ttu-id="6e1c1-147">Только для чтения.</span><span class="sxs-lookup"><span data-stu-id="6e1c1-147">Read-only.</span></span>

      <span data-ttu-id="6e1c1-148">\[[Набор API: OneNoteApi 1,1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="6e1c1-148">\[ [API set: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets) \]</span></span>
    name: name
    fullName: name
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly name: string;'
      return:
        type:
          - string
  - uid: 'onenote!OneNote.Notebook#sectionGroups:member'
    summary: |-
      <span data-ttu-id="6e1c1-149">Группы разделов в записной книжке.</span><span class="sxs-lookup"><span data-stu-id="6e1c1-149">The section groups in the notebook.</span></span> <span data-ttu-id="6e1c1-150">Только чтение</span><span class="sxs-lookup"><span data-stu-id="6e1c1-150">Read only</span></span>

      <span data-ttu-id="6e1c1-151">\[[Набор API: OneNoteApi 1,1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="6e1c1-151">\[ [API set: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets) \]</span></span>
    name: sectionGroups
    fullName: sectionGroups
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly sectionGroups: OneNote.SectionGroupCollection;'
      return:
        type:
          - 'onenote!OneNote.SectionGroupCollection:class'
  - uid: 'onenote!OneNote.Notebook#sections:member'
    summary: |-
      <span data-ttu-id="6e1c1-152">Разделы записной книжки.</span><span class="sxs-lookup"><span data-stu-id="6e1c1-152">The the sections of the notebook.</span></span> <span data-ttu-id="6e1c1-153">Только чтение</span><span class="sxs-lookup"><span data-stu-id="6e1c1-153">Read only</span></span>

      <span data-ttu-id="6e1c1-154">\[[Набор API: OneNoteApi 1,1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="6e1c1-154">\[ [API set: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets) \]</span></span>
    name: sections
    fullName: sections
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly sections: OneNote.SectionCollection;'
      return:
        type:
          - 'onenote!OneNote.SectionCollection:class'
  - uid: 'onenote!OneNote.Notebook#toJSON:member(1)'
    summary: '<span data-ttu-id="6e1c1-155">Переопределяет метод `toJSON()` JavaScript для предоставления более удобного вывода при передаче объекта API`JSON.stringify()`</span><span class="sxs-lookup"><span data-stu-id="6e1c1-155">Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`</span></span><!-- --><span data-ttu-id="6e1c1-156">.</span><span class="sxs-lookup"><span data-stu-id="6e1c1-156"></span></span> <span data-ttu-id="6e1c1-157">(`JSON.stringify`</span><span class="sxs-lookup"><span data-stu-id="6e1c1-157"></span></span><!-- --><span data-ttu-id="6e1c1-158">, в свою очередь, вызывает `toJSON` метод объекта, который передается ему.) В то время как исходный объект OneNote. Notebook является объектом API, `toJSON` метод возвращает простой объект JavaScript (тип`OneNote.Interfaces.NotebookData`</span><span class="sxs-lookup"><span data-stu-id="6e1c1-158">, in turn, calls the `toJSON` method of the object that is passed to it.) Whereas the original OneNote.Notebook object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `OneNote.Interfaces.NotebookData`</span></span><!-- --><span data-ttu-id="6e1c1-159">), который содержит неполные копии загруженных дочерних свойств из исходного объекта.</span><span class="sxs-lookup"><span data-stu-id="6e1c1-159">) that contains shallow copies of any loaded child properties from the original object.</span></span>'
    name: toJSON()
    fullName: toJSON()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON(): OneNote.Interfaces.NotebookData;'
      return:
        type:
          - 'onenote!OneNote.Interfaces.NotebookData:interface'
        description: ''
  - uid: 'onenote!OneNote.Notebook#track:member(1)'
    summary: '<span data-ttu-id="6e1c1-160">Отслеживает объект для автоматической корректировки с учетом окружающих изменений в документе.</span><span class="sxs-lookup"><span data-stu-id="6e1c1-160">Track the object for automatic adjustment based on surrounding changes in the document.</span></span> <span data-ttu-id="6e1c1-161">Этот вызов является сокращением для context.trackedObjects.add(thisObject).</span><span class="sxs-lookup"><span data-stu-id="6e1c1-161">This call is a shorthand for context.trackedObjects.add(thisObject).</span></span> <span data-ttu-id="6e1c1-162">Если этот объект используется в вызовах .sync и вне последовательного выполнения пакета .run с возникновением ошибки InvalidObjectPath при установке свойства или вызове метода для объекта, необходимо было добавить объект в коллекцию отслеживаемых объектов при первоначальном создании объекта.</span><span class="sxs-lookup"><span data-stu-id="6e1c1-162">If you are using this object across ".sync" calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you needed to have added the object to the tracked object collection when the object was first created.</span></span>'
    name: track()
    fullName: track()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'track(): OneNote.Notebook;'
      return:
        type:
          - 'onenote!OneNote.Notebook:class'
        description: ''
  - uid: 'onenote!OneNote.Notebook#untrack:member(1)'
    summary: '<span data-ttu-id="6e1c1-163">Освобождает память, связанную с этим объектом, если он ранее отслеживался.</span><span class="sxs-lookup"><span data-stu-id="6e1c1-163">Release the memory associated with this object, if it has previously been tracked.</span></span> <span data-ttu-id="6e1c1-164">Этот вызов является сокращением для context.trackedObjects.remove(thisObject).</span><span class="sxs-lookup"><span data-stu-id="6e1c1-164">This call is shorthand for context.trackedObjects.remove(thisObject).</span></span> <span data-ttu-id="6e1c1-165">Наличие большого количества отслеживаемых объектов замедляет ведущее приложение, поэтому не забывайте освобождать любые добавленные объекты после завершения их использования.</span><span class="sxs-lookup"><span data-stu-id="6e1c1-165">Having many tracked objects slows down the host application, so please remember to free any objects you add, once you''re done using them.</span></span> <span data-ttu-id="6e1c1-166">Перед фактическим освобождением памяти потребуется вызвать метод context.sync().</span><span class="sxs-lookup"><span data-stu-id="6e1c1-166">You will need to call "context.sync()" before the memory release takes effect.</span></span>'
    name: untrack()
    fullName: untrack()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'untrack(): OneNote.Notebook;'
      return:
        type:
          - 'onenote!OneNote.Notebook:class'
        description: ''
references:
  - uid: 'onenote!OfficeExtension.ClientObject:class'
    name: OfficeExtension.ClientObject
  - uid: 'onenote!OneNote.Section:class'
    name: OneNote.Section
  - uid: 'onenote!OneNote.SectionGroup:class'
    name: OneNote.SectionGroup
  - uid: 'onenote!OneNote.RequestContext:class'
    name: RequestContext
  - uid: 'onenote!OneNote.Notebook#getRestApiId~0:complex'
    name: OfficeExtension.ClientResult<string>
    fullName: OfficeExtension.ClientResult<string>
    spec.typeScript:
      - uid: 'onenote!OfficeExtension.ClientResult:class'
        name: OfficeExtension.ClientResult
        fullName: OfficeExtension.ClientResult
      - name: <string>
        fullName: <string>
  - uid: 'onenote!OneNote.Notebook:class'
    name: OneNote.Notebook
  - uid: 'onenote!OneNote.Interfaces.NotebookLoadOptions:interface'
    name: OneNote.Interfaces.NotebookLoadOptions
  - uid: 'onenote!OneNote.SectionGroupCollection:class'
    name: OneNote.SectionGroupCollection
  - uid: 'onenote!OneNote.SectionCollection:class'
    name: OneNote.SectionCollection
  - uid: 'onenote!OneNote.Interfaces.NotebookData:interface'
    name: OneNote.Interfaces.NotebookData