### YamlMime:TSType
name: OneNote.TableRow
uid: onenote!OneNote.TableRow:class
package: onenote!
fullName: OneNote.TableRow
summary: >-
  Представляет строку в таблице.


  \[[Набор API: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
remarks: ''
isPreview: false
isDeprecated: false
type: class
properties:
- name: cellCount
  uid: onenote!OneNote.TableRow#cellCount:member
  package: onenote!
  fullName: cellCount
  summary: >-
    Получает количество ячеек в строке. Только для чтения.


    \[[Набор API: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly cellCount: number;'
    return:
      type: number
- name: cells
  uid: onenote!OneNote.TableRow#cells:member
  package: onenote!
  fullName: cells
  summary: >-
    Получает ячейки в строке. Только для чтения.


    \[[Набор API: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly cells: OneNote.TableCellCollection;'
    return:
      type: <xref uid="onenote!OneNote.TableCellCollection:class" />
- name: context
  uid: onenote!OneNote.TableRow#context:member
  package: onenote!
  fullName: context
  summary: Контекст запроса, связанный с объектом. Это связывает процесс надстройки с процессом хост-приложения Office.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'context: RequestContext;'
    return:
      type: <xref uid="onenote!OneNote.RequestContext:class" />
- name: id
  uid: onenote!OneNote.TableRow#id:member
  package: onenote!
  fullName: id
  summary: >-
    Получает идентификатор строки. Только для чтения.


    \[[Набор API: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly id: string;'
    return:
      type: string
- name: parentTable
  uid: onenote!OneNote.TableRow#parentTable:member
  package: onenote!
  fullName: parentTable
  summary: >-
    Получает родительскую таблицу. Только для чтения.


    \[[Набор API: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly parentTable: OneNote.Table;'
    return:
      type: <xref uid="onenote!OneNote.Table:class" />
- name: rowIndex
  uid: onenote!OneNote.TableRow#rowIndex:member
  package: onenote!
  fullName: rowIndex
  summary: >-
    Получает индекс строки в родительской таблице. Только для чтения.


    \[[Набор API: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly rowIndex: number;'
    return:
      type: number
methods:
- name: clear()
  uid: onenote!OneNote.TableRow#clear:member(1)
  package: onenote!
  fullName: clear()
  summary: >-
    Очищает содержимое строки.


    \[[Набор API: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'clear(): void;'
    return:
      type: void
      description: ''
- name: insertRowAsSibling(insertLocation, values)
  uid: onenote!OneNote.TableRow#insertRowAsSibling:member(1)
  package: onenote!
  fullName: insertRowAsSibling(insertLocation, values)
  summary: >-
    Вставляет строку перед текущей строкой или после нее.


    \[[Набор API: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'insertRowAsSibling(insertLocation: OneNote.InsertLocation, values?: string[]): OneNote.TableRow;'
    parameters:
    - id: insertLocation
      description: Определяет, куда необходимо вставить новые строки относительно текущей строки.
      type: <xref uid="onenote!OneNote.InsertLocation:enum" />
    - id: values
      description: Строки, которые необходимо вставить в новую строку, заданные в виде массива. Ячеек в этом параметре не должно быть больше, чем в текущей строке. Необязательный параметр.
      type: string[]
    return:
      type: <xref uid="onenote!OneNote.TableRow:class" />
      description: "\n\n#### <a name=\"examples\"></a>Примеры\n\n```javascript\nOneNote.run(function(ctx) {\n    var app = ctx.application;\n    var outline = app.getActiveOutline();\n    \n    // Queue a command to load outline.paragraphs and their types.\n    ctx.load(outline, \"paragraphs, paragraphs/type\");\n    \n    // Run the queued commands, and return a promise to indicate task completion.\n    return ctx.sync().then(function () {\n        var paragraphs = outline.paragraphs;\n        \n        // for each table, get table rows.\n        for (var i = 0; i < paragraphs.items.length; i++) {\n            var paragraph = paragraphs.items[i];\n            if (paragraph.type == \"Table\") {\n                var table = paragraph.table;\n                \n                // Queue a command to load table.rows.\n                ctx.load(table, \"rows\");\n                \n                // Run the queued commands\n                return ctx.sync().then(function() {\n                    var rows = table.rows;\n                    rows.items[1].insertRowAsSibling(\"Before\", [\"cell0\", \"cell1\"]);\n                    return ctx.sync();\n                });\n            }\n        }\n    })\n})\n.catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: insertRowAsSibling(insertLocationString, values)
  uid: onenote!OneNote.TableRow#insertRowAsSibling:member(2)
  package: onenote!
  fullName: insertRowAsSibling(insertLocationString, values)
  summary: >-
    Вставляет строку перед текущей строкой или после нее.


    \[[Набор API: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'insertRowAsSibling(insertLocationString: "Before" | "After", values?: string[]): OneNote.TableRow;'
    parameters:
    - id: insertLocationString
      description: Определяет, куда необходимо вставить новые строки относительно текущей строки.
      type: "\"Before\" | \"After\""
    - id: values
      description: Строки, которые необходимо вставить в новую строку, заданные в виде массива. Ячеек в этом параметре не должно быть больше, чем в текущей строке. Необязательный.
      type: string[]
    return:
      type: <xref uid="onenote!OneNote.TableRow:class" />
      description: ''
- name: load(option)
  uid: onenote!OneNote.TableRow#load:member(1)
  package: onenote!
  fullName: load(option)
  summary: Добавляет в очередь команду для загрузки указанных свойств объекта. Перед чтением свойств необходимо вызвать метод context.sync().
  remarks: >-
    Помимо этой подписи, этот метод имеет следующие подписи:


    `load(option?: string | string[]): OneNote.TableRow` - Где параметр — запятая или массив строк, которые указывают свойства для загрузки.


    `load(option?: { select?: string; expand?: string; }): OneNote.TableRow` - Где option.select — это строка, делимитированная запятой, которая указывает свойства для загрузки, а options.expand — это запятая, которая указывает свойства навигации для загрузки.


    `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): OneNote.TableRow` — Доступно только для типов коллекций. Она аналогична предыдущей подписи. Option.top указывает максимальное количество элементов коллекции, которые могут быть включены в результат. Option.skip указывает количество элементов, которые должны быть пропущены и не включены в результат. Если option.top указан, набор результатов начнется после пропуска указанного количества элементов.
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'load(option?: OneNote.Interfaces.TableRowLoadOptions): OneNote.TableRow;'
    parameters:
    - id: option
      description: ''
      type: <xref uid="onenote!OneNote.Interfaces.TableRowLoadOptions:interface" />
    return:
      type: <xref uid="onenote!OneNote.TableRow:class" />
      description: ''
- name: load(propertyNames)
  uid: onenote!OneNote.TableRow#load:member(2)
  package: onenote!
  fullName: load(propertyNames)
  summary: Добавляет в очередь команду для загрузки указанных свойств объекта. Перед чтением свойств требуется вызвать метод `context.sync()`.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'load(propertyNames?: string | string[]): OneNote.TableRow;'
    parameters:
    - id: propertyNames
      description: Запятая или массив строк, которые указывают свойства для загрузки.
      type: string | string[]
    return:
      type: <xref uid="onenote!OneNote.TableRow:class" />
      description: "\n\n#### <a name=\"examples\"></a>Примеры\n\n```javascript\nOneNote.run(function(ctx) {\n    var app = ctx.application;\n    var outline = app.getActiveOutline();\n    \n    // Queue a command to load outline.paragraphs and their types.\n    ctx.load(outline, \"paragraphs, paragraphs/type\");\n    \n    // Run the queued commands, and return a promise to indicate task completion.\n    return ctx.sync().then(function () {\n        var paragraphs = outline.paragraphs;\n        \n        // for each table, get table rows.\n        for (var i = 0; i < paragraphs.items.length; i++) {\n            var paragraph = paragraphs.items[i];\n            if (paragraph.type == \"Table\") {\n                var table = paragraph.table;\n                \n                // Queue a command to load table.rows.\n                ctx.load(table, \"rows\");\n                return ctx.sync().then(function() {\n                    var rows = table.rows;\n                    \n                    // for each table row, log cell count and row index.\n                    for (var i = 0; i < rows.items.length; i++) {\n                        console.log(\"Row \" + i + \" Id: \" + rows.items[i].id);\n                        console.log(\"Row \" + i + \" Cell Count: \" + rows.items[i].cellCount);\n                        console.log(\"Row \" + i + \" Row Index: \" + rows.items[i].rowIndex);\n                    }\n                    return ctx.sync();\n                });\n            }\n        }\n    })\n})\n.catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```\n```javascript\nOneNote.run(function(ctx) {\n    var app = ctx.application;\n    var outline = app.getActiveOutline();\n    \n    // Queue a command to load outline.paragraphs and their types.\n    ctx.load(outline, \"paragraphs, paragraphs/type\");\n    \n    // Run the queued commands, and return a promise to indicate task completion.\n    return ctx.sync().then(function () {\n        var paragraphs = outline.paragraphs;\n        \n        // for each table, get table rows.\n        for (var i = 0; i < paragraphs.items.length; i++) {\n            var paragraph = paragraphs.items[i];\n            if (paragraph.type == \"Table\") {\n                var table = paragraph.table;\n                \n                // Queue a command to load parentTable and cells of each row in the table.\n                ctx.load(table, \"rows/parentTable, rows/cells\");\n                return ctx.sync().then(function() {\n                    var rows = table.rows;\n                    \n                    // for each row, log parentTable and cells\n                    for (var i = 0; i < rows.items.length; i++) {\n                        console.log(\"Row \" + i + \" Parent Table Id: \" + rows.items[i].parentTable.id);\n                        var cells = rows.items[i].cells;\n                        for (var j = 0 ; j < cells.items.length; j++) {\n                            console.log(\"Row \" + i + \" Cell \" + j + \" Id: \" + cells.items[j].id);\n                        }\n                    }\n                    return ctx.sync();\n                });\n            }\n        }\n    })\n})\n.catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: load(propertyNamesAndPaths)
  uid: onenote!OneNote.TableRow#load:member(3)
  package: onenote!
  fullName: load(propertyNamesAndPaths)
  summary: Добавляет в очередь команду для загрузки указанных свойств объекта. Перед чтением свойств требуется вызвать метод `context.sync()`.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'load(propertyNamesAndPaths?: { select?: string; expand?: string; }): OneNote.TableRow;'
    parameters:
    - id: propertyNamesAndPaths
      description: Если свойствоNamesAndPaths.select — это строка с запятой, которая указывает свойства для загрузки, а propertyNamesAndPaths.expand — запятая, которая указывает свойства навигации для загрузки.
      type: '{ select?: string; expand?: string; }'
    return:
      type: <xref uid="onenote!OneNote.TableRow:class" />
      description: ''
- name: setShadingColor(colorCode)
  uid: onenote!OneNote.TableRow#setShadingColor:member(1)
  package: onenote!
  fullName: setShadingColor(colorCode)
  summary: >-
    Задает цвет заливки всех ячеек в строке. Код цвета, который нужно задать ячейкам.


    \[[Набор API: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'setShadingColor(colorCode: string): void;'
    parameters:
    - id: colorCode
      description: ''
      type: string
    return:
      type: void
      description: ''
- name: toJSON()
  uid: onenote!OneNote.TableRow#toJSON:member(1)
  package: onenote!
  fullName: toJSON()
  summary: Переопределяет метод JavaScript, чтобы обеспечить более полезный выход, когда объект `toJSON()` API передается `JSON.stringify()`<!-- -->. (`JSON.stringify`<!-- -->, в свою очередь, вызывает метод объекта, который `toJSON` передается ему.) Если исходный объект OneNote.TableRow является объектом API, метод возвращает обычный `toJSON` объект JavaScript (введите как `OneNote.Interfaces.TableRowData`<!-- -->), содержащий неглубокие копии любых загруженных свойств ребенка из исходного объекта.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'toJSON(): OneNote.Interfaces.TableRowData;'
    return:
      type: <xref uid="onenote!OneNote.Interfaces.TableRowData:interface" />
      description: ''
- name: track()
  uid: onenote!OneNote.TableRow#track:member(1)
  package: onenote!
  fullName: track()
  summary: Отслеживает объект для автоматической корректировки с учетом окружающих изменений в документе. Этот вызов является сокращением для context.trackedObjects.add(thisObject). Если этот объект используется в вызовах .sync и вне последовательного выполнения пакета .run с возникновением ошибки InvalidObjectPath при установке свойства или вызове метода для объекта, необходимо было добавить объект в коллекцию отслеживаемых объектов при первоначальном создании объекта.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'track(): OneNote.TableRow;'
    return:
      type: <xref uid="onenote!OneNote.TableRow:class" />
      description: ''
- name: untrack()
  uid: onenote!OneNote.TableRow#untrack:member(1)
  package: onenote!
  fullName: untrack()
  summary: Освобождает память, связанную с этим объектом, если он ранее отслеживался. Этот вызов является сокращением для context.trackedObjects.remove(thisObject). Наличие большого количества отслеживаемых объектов замедляет ведущее приложение, поэтому не забывайте освобождать любые добавленные объекты после завершения их использования. Перед фактическим освобождением памяти потребуется вызвать метод context.sync().
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'untrack(): OneNote.TableRow;'
    return:
      type: <xref uid="onenote!OneNote.TableRow:class" />
      description: ''
extends: <xref uid="office!OfficeExtension.ClientObject:class" />
metadata:
  ms.openlocfilehash: 0302d8b6f8589650f0a58fd9e9a8b73e9953c8d5
  ms.sourcegitcommit: a8a86cfcaff5ad7dacc653d63502c76b1fedbebe
  ms.translationtype: MT
  ms.contentlocale: ru-RU
  ms.lasthandoff: 03/26/2021
  ms.locfileid: "51253365"
