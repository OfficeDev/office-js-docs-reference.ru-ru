### YamlMime:UniversalReference
items:
  - uid: 'onenote!OneNote.ParagraphCollection:class'
    summary: |-
      <span data-ttu-id="4de22-101">Представляет коллекцию объектов Paragraph.</span><span class="sxs-lookup"><span data-stu-id="4de22-101">Represents a collection of Paragraph objects.</span></span>

      <span data-ttu-id="4de22-102">\[[Набор API: OneNoteApi 1,1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="4de22-102">\[ [API set: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets) \]</span></span>
    name: OneNote.ParagraphCollection
    fullName: OneNote.ParagraphCollection
    langs:
      - typeScript
    type: class
    extends:
      - 'onenote!OfficeExtension.ClientObject:class'
    package: onenote!
    children:
      - 'onenote!OneNote.ParagraphCollection#context:member'
      - 'onenote!OneNote.ParagraphCollection#count:member'
      - 'onenote!OneNote.ParagraphCollection#getItem:member(1)'
      - 'onenote!OneNote.ParagraphCollection#getItemAt:member(1)'
      - 'onenote!OneNote.ParagraphCollection#items:member'
      - 'onenote!OneNote.ParagraphCollection#load:member(1)'
      - 'onenote!OneNote.ParagraphCollection#load:member(2)'
      - 'onenote!OneNote.ParagraphCollection#load:member(3)'
      - 'onenote!OneNote.ParagraphCollection#toJSON:member(1)'
      - 'onenote!OneNote.ParagraphCollection#track:member(1)'
      - 'onenote!OneNote.ParagraphCollection#untrack:member(1)'
  - uid: 'onenote!OneNote.ParagraphCollection#context:member'
    summary: '<span data-ttu-id="4de22-103">Контекст запроса, связанный с объектом.</span><span class="sxs-lookup"><span data-stu-id="4de22-103">The request context associated with the object.</span></span> <span data-ttu-id="4de22-104">Это подсоединяет процесс надстройки к процессу ведущего приложения Office.</span><span class="sxs-lookup"><span data-stu-id="4de22-104">This connects the add-in''s process to the Office host application''s process.</span></span>'
    name: context
    fullName: context
    langs:
      - typeScript
    type: property
    syntax:
      content: 'context: RequestContext;'
      return:
        type:
          - 'onenote!OneNote.RequestContext:class'
  - uid: 'onenote!OneNote.ParagraphCollection#count:member'
    summary: |-
      <span data-ttu-id="4de22-105">Возвращает количество объектов Paragraph в объекте Page.</span><span class="sxs-lookup"><span data-stu-id="4de22-105">Returns the number of paragraphs in the page.</span></span> <span data-ttu-id="4de22-106">Только для чтения.</span><span class="sxs-lookup"><span data-stu-id="4de22-106">Read-only.</span></span>

      <span data-ttu-id="4de22-107">\[[Набор API: OneNoteApi 1,1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="4de22-107">\[ [API set: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets) \]</span></span>
    name: count
    fullName: count
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly count: number;'
      return:
        type:
          - number
  - uid: 'onenote!OneNote.ParagraphCollection#getItem:member(1)'
    summary: |-
      <span data-ttu-id="4de22-108">Получает объект Paragraph по его идентификатору или индексу в коллекции.</span><span class="sxs-lookup"><span data-stu-id="4de22-108">Gets a Paragraph object by ID or by its index in the collection.</span></span> <span data-ttu-id="4de22-109">Только для чтения.</span><span class="sxs-lookup"><span data-stu-id="4de22-109">Read-only.</span></span>

      <span data-ttu-id="4de22-110">\[[Набор API: OneNoteApi 1,1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="4de22-110">\[ [API set: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets) \]</span></span>
    name: getItem(index)
    fullName: getItem(index)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getItem(index: number | string): OneNote.Paragraph;'
      return:
        type:
          - 'onenote!OneNote.Paragraph:class'
        description: ''
      parameters:
        - id: index
          description: '<span data-ttu-id="4de22-111">Идентификатор объекта Paragraph или расположение индекса объекта Paragraph в коллекции.</span><span class="sxs-lookup"><span data-stu-id="4de22-111">The ID of the Paragraph object, or the index location of the Paragraph object in the collection.</span></span>'
          type:
            - number | string
  - uid: 'onenote!OneNote.ParagraphCollection#getItemAt:member(1)'
    summary: |-
      <span data-ttu-id="4de22-112">Получает объект Paragraph по его позиции в коллекции.</span><span class="sxs-lookup"><span data-stu-id="4de22-112">Gets a paragraph on its position in the collection.</span></span>

      <span data-ttu-id="4de22-113">\[[Набор API: OneNoteApi 1,1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="4de22-113">\[ [API set: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets) \]</span></span>
    name: getItemAt(index)
    fullName: getItemAt(index)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getItemAt(index: number): OneNote.Paragraph;'
      return:
        type:
          - 'onenote!OneNote.Paragraph:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="4de22-114">Примеры</span><span class="sxs-lookup"><span data-stu-id="4de22-114">Examples</span></span>

          ```javascript
          OneNote.run(function (context) {

              // Get the collection of pageContent items from the page.
              var pageContents = context.application.getActivePage().contents;

              // Get the first PageContent on the page, and then get its Outline's first paragraph.
              var pageContent = pageContents.getItemAt(0);
              var paragraphs = pageContent.outline.paragraphs;

              var firstParagraph = paragraphs.getItemAt(0);

              // Queue a command to load the type and richText.text property of this paragraph.
              firstParagraph.load("id,type");


              // Run the queued commands, and return a promise to indicate task completion.
              return context.sync()
                  .then(function () {
                      // Write text from paragraph to console
                      console.log(
                          "First Paragraph found with id : " + 
                          firstParagraph.id + " and type " + firstParagraph.type);
                  });
          })
          .catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          }); 
          ```
      parameters:
        - id: index
          description: <span data-ttu-id="4de22-115">Значение индекса получаемого объекта.</span><span class="sxs-lookup"><span data-stu-id="4de22-115">Index value of the object to be retrieved.</span></span> <span data-ttu-id="4de22-116">Используется нулевой индекс.</span><span class="sxs-lookup"><span data-stu-id="4de22-116">Zero-indexed.</span></span>
          type:
            - number
  - uid: 'onenote!OneNote.ParagraphCollection#items:member'
    summary: <span data-ttu-id="4de22-117">Получает загруженные дочерние элементы в этой коллекции.</span><span class="sxs-lookup"><span data-stu-id="4de22-117">Gets the loaded child items in this collection.</span></span>
    name: items
    fullName: items
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly items: OneNote.Paragraph[];'
      return:
        type:
          - 'onenote!OneNote.ParagraphCollection#items~0:complex'
  - uid: 'onenote!OneNote.ParagraphCollection#load:member(1)'
    summary: <span data-ttu-id="4de22-118">Добавляет в очередь команду для загрузки указанных свойств объекта.</span><span class="sxs-lookup"><span data-stu-id="4de22-118">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="4de22-119">Перед чтением свойств необходимо вызвать метод context.sync().</span><span class="sxs-lookup"><span data-stu-id="4de22-119">You must call "context.sync()" before reading the properties.</span></span>
    remarks: |-
      <span data-ttu-id="4de22-120">В дополнение к этой подписи этот метод имеет следующие подписи:</span><span class="sxs-lookup"><span data-stu-id="4de22-120">In addition to this signature, this method has the following signatures:</span></span>

      <span data-ttu-id="4de22-121">`load(option?: string | string[]): OneNote.ParagraphCollection`-WHERE — это строка с разделителями-запятыми или массив строк, указывающий свойства для загрузки.</span><span class="sxs-lookup"><span data-stu-id="4de22-121">`load(option?: string | string[]): OneNote.ParagraphCollection` - Where option is a comma-delimited string or an array of strings that specify the properties to load.</span></span>

      <span data-ttu-id="4de22-122">`load(option?: { select?: string; expand?: string; }): OneNote.ParagraphCollection`-WHERE. Select — это строка с разделителями-запятыми, указывающая свойства для загрузки и параметры. Expand — это строка с разделителями-запятыми, указывающая свойства навигации для загрузки.</span><span class="sxs-lookup"><span data-stu-id="4de22-122">`load(option?: { select?: string; expand?: string; }): OneNote.ParagraphCollection` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.</span></span>

      <span data-ttu-id="4de22-123">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): OneNote.ParagraphCollection`— Доступно только для типов коллекций.</span><span class="sxs-lookup"><span data-stu-id="4de22-123">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): OneNote.ParagraphCollection` - Only available on collection types.</span></span> <span data-ttu-id="4de22-124">Он аналогичен предыдущей подписи.</span><span class="sxs-lookup"><span data-stu-id="4de22-124">It is similar to the preceding signature.</span></span> <span data-ttu-id="4de22-125">Option. Top указывает максимальное количество элементов коллекции, которые можно включить в результат.</span><span class="sxs-lookup"><span data-stu-id="4de22-125">Option.top specifies the maximum number of collection items that can be included in the result.</span></span> <span data-ttu-id="4de22-126">Option. skip указывает количество элементов, которые будут пропущены и не включены в результат.</span><span class="sxs-lookup"><span data-stu-id="4de22-126">Option.skip specifies the number of items that are to be skipped and not included in the result.</span></span> <span data-ttu-id="4de22-127">Если указан параметр Option. Top, результирующий набор начнется после пропуска указанного числа элементов.</span><span class="sxs-lookup"><span data-stu-id="4de22-127">If option.top is specified, the result set will start after skipping the specified number of items.</span></span>
    name: load(option)
    fullName: load(option)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(option?: OneNote.Interfaces.ParagraphCollectionLoadOptions & OneNote.Interfaces.CollectionLoadOptions): OneNote.ParagraphCollection;'
      return:
        type:
          - 'onenote!OneNote.ParagraphCollection:class'
        description: ''
      parameters:
        - id: option
          description: ''
          type:
            - 'onenote!OneNote.ParagraphCollection#load~0:complex'
  - uid: 'onenote!OneNote.ParagraphCollection#load:member(2)'
    summary: <span data-ttu-id="4de22-128">Добавляет в очередь команду для загрузки указанных свойств объекта.</span><span class="sxs-lookup"><span data-stu-id="4de22-128">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="4de22-129">Перед чтением свойств `context.sync()` необходимо вызвать метод.</span><span class="sxs-lookup"><span data-stu-id="4de22-129">You must call `context.sync()` before reading the properties.</span></span>
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): OneNote.ParagraphCollection;'
      return:
        type:
          - 'onenote!OneNote.ParagraphCollection:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="4de22-130">Примеры</span><span class="sxs-lookup"><span data-stu-id="4de22-130">Examples</span></span>

          ```javascript
          OneNote.run(function (context) {

              // Get the collection of pageContent items from the page.
              var pageContents = context.application.getActivePage().contents;

              // Get the first PageContent on the page, and then get its Outline's first paragraph.
              var pageContent = pageContents.getItem(0);
              var paragraphs = pageContent.outline.paragraphs;
              
              // Queue a command to load the id and type of each paragraph.
              paragraphs.load("id,type");

              // Run the queued commands, and return a promise to indicate task completion.
              return context.sync()
                  .then(function () {
                      var firstParagraph = paragraphs.items[0];
                      // Write text from first paragraph to console
                      console.log(
                          "First Paragraph found with id : " + 
                          firstParagraph.id + " and type " + firstParagraph.type);
                  });
          })
          .catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
          ```javascript
          OneNote.run(function (context) {

              // Get the collection of pageContent items from the page.
              var pageContents = context.application.getActivePage().contents;

              // Get the first PageContent on the page, and then get its outline's paragraphs.
              var outlinePageContents = ;
              var paragraphs = ;
              var richTextParagraphs = ;
              // Queue a command to load the id and type of each page content in the outline.
              pageContents.load("id,type");

              // Run the queued commands, and return a promise to indicate task completion.
              return context.sync()
                  .then(function () {
                      // Load all page contents of type Outline
                      $.each(pageContents.items, function(index, pageContent) {
                          if(pageContent.type == 'Outline')
                          {
                              pageContent.load('outline,outline/paragraphs,outline/paragraphs/type');
                              outlinePageContents.push(pageContent);
                          }
                      });
                      return context.sync();
                  })
                  .then(function () {
                      // Load all rich text paragraphs across outlines
                      $.each(outlinePageContents, function(index, outlinePageContent) {
                          var outline = outlinePageContent.outline;
                          paragraphs = paragraphs.concat(outline.paragraphs.items);
                      });
                      $.each(paragraphs, function(index, paragraph) {
                          if(paragraph.type == 'RichText')
                          {
                              richTextParagraphs.push(paragraph);
                              paragraph.load("id,richText/text");
                          }
                      });
                      return context.sync();
                  })
                  .then(function () {
                      // Display all rich text paragraphs to the console
                      $.each(richTextParagraphs, function(index, richTextParagraph) {
                          var richText = richTextParagraph.richText;
                          console.log(
                              "Paragraph found with richtext content : " + 
                              richText.text + " and richtext id : " + richText.id);
                      });
                      return context.sync();
                  });
          })
          .catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: propertyNames
          description: '<span data-ttu-id="4de22-131">Строка, разделенная запятыми, или массив строк, указывающий свойства для загрузки.</span><span class="sxs-lookup"><span data-stu-id="4de22-131">A comma-delimited string or an array of strings that specify the properties to load.</span></span>'
          type:
            - 'string | string[]'
  - uid: 'onenote!OneNote.ParagraphCollection#load:member(3)'
    name: load(option)
    fullName: load(option)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(option?: OfficeExtension.LoadOption): OneNote.ParagraphCollection;'
      return:
        type:
          - 'onenote!OneNote.ParagraphCollection:class'
        description: ''
      parameters:
        - id: option
          description: ''
          type:
            - 'onenote!OfficeExtension.LoadOption:interface'
  - uid: 'onenote!OneNote.ParagraphCollection#toJSON:member(1)'
    summary: '<span data-ttu-id="4de22-132">Переопределяет метод `toJSON()` JavaScript для предоставления более удобного вывода при передаче объекта API`JSON.stringify()`</span><span class="sxs-lookup"><span data-stu-id="4de22-132">Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`</span></span><!-- --><span data-ttu-id="4de22-133">.</span><span class="sxs-lookup"><span data-stu-id="4de22-133"></span></span> <span data-ttu-id="4de22-134">(`JSON.stringify`</span><span class="sxs-lookup"><span data-stu-id="4de22-134"></span></span><!-- --><span data-ttu-id="4de22-135">, в свою очередь, вызывает `toJSON` метод объекта, который передается ему.) В то время как `OneNote.ParagraphCollection` исходный объект является объектом API, `toJSON` метод возвращает простой объект JavaScript (тип`OneNote.Interfaces.ParagraphCollectionData`</span><span class="sxs-lookup"><span data-stu-id="4de22-135">, in turn, calls the `toJSON` method of the object that is passed to it.) Whereas the original `OneNote.ParagraphCollection` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `OneNote.Interfaces.ParagraphCollectionData`</span></span><!-- --><span data-ttu-id="4de22-136">), содержащий массив "Items" с неполноми копиями загруженных свойств из элементов коллекции.</span><span class="sxs-lookup"><span data-stu-id="4de22-136">) that contains an "items" array with shallow copies of any loaded properties from the collection''s items.</span></span>'
    name: toJSON()
    fullName: toJSON()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON(): OneNote.Interfaces.ParagraphCollectionData;'
      return:
        type:
          - 'onenote!OneNote.Interfaces.ParagraphCollectionData:interface'
        description: ''
  - uid: 'onenote!OneNote.ParagraphCollection#track:member(1)'
    summary: '<span data-ttu-id="4de22-137">Отслеживает объект для автоматической корректировки с учетом окружающих изменений в документе.</span><span class="sxs-lookup"><span data-stu-id="4de22-137">Track the object for automatic adjustment based on surrounding changes in the document.</span></span> <span data-ttu-id="4de22-138">Этот вызов является сокращением для context.trackedObjects.add(thisObject).</span><span class="sxs-lookup"><span data-stu-id="4de22-138">This call is a shorthand for context.trackedObjects.add(thisObject).</span></span> <span data-ttu-id="4de22-139">Если этот объект используется в вызовах .sync и вне последовательного выполнения пакета .run с возникновением ошибки InvalidObjectPath при установке свойства или вызове метода для объекта, необходимо было добавить объект в коллекцию отслеживаемых объектов при первоначальном создании объекта.</span><span class="sxs-lookup"><span data-stu-id="4de22-139">If you are using this object across ".sync" calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you needed to have added the object to the tracked object collection when the object was first created.</span></span>'
    name: track()
    fullName: track()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'track(): OneNote.ParagraphCollection;'
      return:
        type:
          - 'onenote!OneNote.ParagraphCollection:class'
        description: ''
  - uid: 'onenote!OneNote.ParagraphCollection#untrack:member(1)'
    summary: '<span data-ttu-id="4de22-140">Освобождает память, связанную с этим объектом, если он ранее отслеживался.</span><span class="sxs-lookup"><span data-stu-id="4de22-140">Release the memory associated with this object, if it has previously been tracked.</span></span> <span data-ttu-id="4de22-141">Этот вызов является сокращением для context.trackedObjects.remove(thisObject).</span><span class="sxs-lookup"><span data-stu-id="4de22-141">This call is shorthand for context.trackedObjects.remove(thisObject).</span></span> <span data-ttu-id="4de22-142">Наличие большого количества отслеживаемых объектов замедляет ведущее приложение, поэтому не забывайте освобождать любые добавленные объекты после завершения их использования.</span><span class="sxs-lookup"><span data-stu-id="4de22-142">Having many tracked objects slows down the host application, so please remember to free any objects you add, once you''re done using them.</span></span> <span data-ttu-id="4de22-143">Перед фактическим освобождением памяти потребуется вызвать метод context.sync().</span><span class="sxs-lookup"><span data-stu-id="4de22-143">You will need to call "context.sync()" before the memory release takes effect.</span></span>'
    name: untrack()
    fullName: untrack()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'untrack(): OneNote.ParagraphCollection;'
      return:
        type:
          - 'onenote!OneNote.ParagraphCollection:class'
        description: ''
references:
  - uid: 'onenote!OfficeExtension.ClientObject:class'
    name: OfficeExtension.ClientObject
  - uid: 'onenote!OneNote.RequestContext:class'
    name: RequestContext
  - uid: 'onenote!OneNote.Paragraph:class'
    name: OneNote.Paragraph
  - uid: 'onenote!OneNote.ParagraphCollection#items~0:complex'
    name: 'OneNote.Paragraph[]'
    fullName: 'OneNote.Paragraph[]'
    spec.typeScript:
      - uid: 'onenote!OneNote.Paragraph:class'
        name: OneNote.Paragraph
        fullName: OneNote.Paragraph
      - name: '[]'
        fullName: '[]'
  - uid: 'onenote!OneNote.ParagraphCollection:class'
    name: OneNote.ParagraphCollection
  - uid: 'onenote!OneNote.ParagraphCollection#load~0:complex'
    name: OneNote.Interfaces.ParagraphCollectionLoadOptions & OneNote.Interfaces.CollectionLoadOptions
    fullName: OneNote.Interfaces.ParagraphCollectionLoadOptions & OneNote.Interfaces.CollectionLoadOptions
    spec.typeScript:
      - uid: 'onenote!OneNote.Interfaces.ParagraphCollectionLoadOptions:interface'
        name: OneNote.Interfaces.ParagraphCollectionLoadOptions
        fullName: OneNote.Interfaces.ParagraphCollectionLoadOptions
      - name: ' & '
        fullName: ' & '
      - uid: 'onenote!OneNote.Interfaces.CollectionLoadOptions:interface'
        name: OneNote.Interfaces.CollectionLoadOptions
        fullName: OneNote.Interfaces.CollectionLoadOptions
  - uid: 'onenote!OfficeExtension.LoadOption:interface'
    name: OfficeExtension.LoadOption
  - uid: 'onenote!OneNote.Interfaces.ParagraphCollectionData:interface'
    name: OneNote.Interfaces.ParagraphCollectionData