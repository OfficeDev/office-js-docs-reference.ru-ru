### YamlMime:UniversalReference
ms.openlocfilehash: 1077f04ac5e9c2aad9e8486c9291da742d949b08
ms.sourcegitcommit: 3f4a320fa860d05d348c8bdec2295e046a45a34f
ms.translationtype: MT
ms.contentlocale: ru-RU
ms.lasthandoff: 02/07/2019
ms.locfileid: "29769731"
items:
- uid: onenote.OneNote.Table
  summary: >-
    <span data-ttu-id="851f5-101">Представляет таблицу на странице OneNote.</span><span class="sxs-lookup"><span data-stu-id="851f5-101">Represents a table in a OneNote page.</span></span>


    <span data-ttu-id="851f5-102">\[[Набор API-Интерфейсов: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="851f5-102">\[ [API set: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets) \]</span></span>
  name: OneNote.Table
  fullName: OneNote.Table
  langs:
  - typeScript
  type: class
  extends:
  - office.OfficeExtension.ClientObject
  package: onenote
  children:
  - onenote.OneNote.Table.appendColumn
  - onenote.OneNote.Table.appendRow
  - onenote.OneNote.Table.borderVisible
  - onenote.OneNote.Table.clear
  - onenote.OneNote.Table.columnCount
  - onenote.OneNote.Table.context
  - onenote.OneNote.Table.getCell
  - onenote.OneNote.Table.id
  - onenote.OneNote.Table.insertColumn
  - onenote.OneNote.Table.insertRow
  - onenote.OneNote.Table.load
  - onenote.OneNote.Table.paragraph
  - onenote.OneNote.Table.rowCount
  - onenote.OneNote.Table.rows
  - onenote.OneNote.Table.set
  - onenote.OneNote.Table.setShadingColor
  - onenote.OneNote.Table.toJSON
  - onenote.OneNote.Table.track
  - onenote.OneNote.Table.untrack
- uid: onenote.OneNote.Table.appendColumn
  summary: >-
    <span data-ttu-id="851f5-p101">Добавляет столбец в конец таблицы. Значения указываются в новом столбце. В противном случае столбец будет пустым.</span><span class="sxs-lookup"><span data-stu-id="851f5-p101">Adds a column to the end of the table. Values, if specified, are set in the new column. Otherwise the column is empty.</span></span>


    <span data-ttu-id="851f5-106">\[[Набор API-Интерфейсов: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="851f5-106">\[ [API set: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets) \]</span></span>
  name: appendColumn(values)
  fullName: appendColumn
  langs:
  - typeScript
  type: method
  syntax:
    content: 'appendColumn(values?: string[]): void;'
    return:
      type:
      - void
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"851f5-107\">Примеры</span><span class=\"sxs-lookup\"><span data-stu-id=\"851f5-107\">Examples</span></span>\n\n```javascript\nOneNote.run(function(ctx) {\n    var app = ctx.application;\n    var outline = app.getActiveOutline();\n    \n    // Queue a command to load outline.paragraphs and their types.\n    ctx.load(outline, \"paragraphs, paragraphs/type\");\n    \n    // Run the queued commands, and return a promise to indicate task completion.\n    return ctx.sync().then(function () {\n        var paragraphs = outline.paragraphs;\n        \n        // for each table, append a column.\n        for (var i = 0; i < paragraphs.items.length; i++) {\n            var paragraph = paragraphs.items[i];\n            if (paragraph.type == \"Table\") {\n                var table = paragraph.table;\n                table.appendColumn([\"cell0\", \"cell1\"]);\n            }\n        }\n        return ctx.sync();\n    })\n})\n.catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
    parameters:
    - id: values
      description: <span data-ttu-id="851f5-108">Необязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="851f5-108">Optional.</span></span> <span data-ttu-id="851f5-109">Строки, которые необходимо вставить в новый столбец, заданные в виде массива.</span><span class="sxs-lookup"><span data-stu-id="851f5-109">Strings to insert in the new column, specified as an array.</span></span> <span data-ttu-id="851f5-110">Значений в этом параметре не должно быть больше, чем строк в таблице.</span><span class="sxs-lookup"><span data-stu-id="851f5-110">Must not have more values than rows in the table.</span></span>
      type:
      - string[]
- uid: onenote.OneNote.Table.appendRow
  summary: >-
    <span data-ttu-id="851f5-p103">Добавляет строку в конец таблицы. Значения указываются в новой строке. В противном случае строка будет пустой.</span><span class="sxs-lookup"><span data-stu-id="851f5-p103">Adds a row to the end of the table. Values, if specified, are set in the new row. Otherwise the row is empty.</span></span>


    <span data-ttu-id="851f5-114">\[[Набор API-Интерфейсов: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="851f5-114">\[ [API set: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets) \]</span></span>
  name: appendRow(values)
  fullName: appendRow
  langs:
  - typeScript
  type: method
  syntax:
    content: 'appendRow(values?: string[]): OneNote.TableRow;'
    return:
      type:
      - OneNote.TableRow
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"851f5-115\">Примеры</span><span class=\"sxs-lookup\"><span data-stu-id=\"851f5-115\">Examples</span></span>\n\n```javascript\nOneNote.run(function(ctx) {\n    var app = ctx.application;\n    var outline = app.getActiveOutline();\n    \n    // Queue a command to load outline.paragraphs and their types.\n    ctx.load(outline, \"paragraphs, paragraphs/type\");\n    \n    // Run the queued commands, and return a promise to indicate task completion.\n    return ctx.sync().then(function () {\n        var paragraphs = outline.paragraphs;\n        \n        // for each table, append a column.\n        for (var i = 0; i < paragraphs.items.length; i++) {\n            var paragraph = paragraphs.items[i];\n            if (paragraph.type == \"Table\") {\n                var table = paragraph.table;\n                var row = table.appendRow([\"cell0\", \"cell1\"]);\n            }\n        }\n        return ctx.sync();\n    })\n})\n.catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
    parameters:
    - id: values
      description: <span data-ttu-id="851f5-116">Необязательное свойство.</span><span class="sxs-lookup"><span data-stu-id="851f5-116">Optional.</span></span> <span data-ttu-id="851f5-117">Строки, которые необходимо вставить в новую строку, заданные в виде массива.</span><span class="sxs-lookup"><span data-stu-id="851f5-117">Strings to insert in the new row, specified as an array.</span></span> <span data-ttu-id="851f5-118">Значений в этом параметре не должно быть больше, чем столбцов в таблице.</span><span class="sxs-lookup"><span data-stu-id="851f5-118">Must not have more values than columns in the table.</span></span>
      type:
      - string[]
- uid: onenote.OneNote.Table.borderVisible
  summary: >-
    <span data-ttu-id="851f5-p105">Задает отображение границ или возвращает сведения об отображении границ. Значение true, если они отображаются, значение false — если нет.</span><span class="sxs-lookup"><span data-stu-id="851f5-p105">Gets or sets whether the borders are visible or not. True if they are visible, false if they are hidden.</span></span>


    <span data-ttu-id="851f5-121">\[[Набор API-Интерфейсов: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="851f5-121">\[ [API set: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets) \]</span></span>
  name: borderVisible
  fullName: borderVisible
  langs:
  - typeScript
  type: property
  syntax:
    content: 'borderVisible: boolean;'
    return:
      type:
      - boolean
- uid: onenote.OneNote.Table.clear
  summary: >-
    <span data-ttu-id="851f5-122">Очищает содержимое таблицы.</span><span class="sxs-lookup"><span data-stu-id="851f5-122">Clears the contents of the table.</span></span>


    <span data-ttu-id="851f5-123">\[[Набор API-Интерфейсов: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="851f5-123">\[ [API set: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets) \]</span></span>
  name: clear()
  fullName: clear
  langs:
  - typeScript
  type: method
  syntax:
    content: 'clear(): void;'
    return:
      type:
      - void
      description: ''
- uid: onenote.OneNote.Table.columnCount
  summary: >-
    <span data-ttu-id="851f5-124">Получает количество столбцов в таблице.</span><span class="sxs-lookup"><span data-stu-id="851f5-124">Gets the number of columns in the table.</span></span>


    <span data-ttu-id="851f5-125">\[[Набор API-Интерфейсов: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="851f5-125">\[ [API set: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets) \]</span></span>
  name: columnCount
  fullName: columnCount
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly columnCount: number;'
    return:
      type:
      - number
- uid: onenote.OneNote.Table.context
  summary: <span data-ttu-id="851f5-126">Контекста запроса, связанного с объектом.</span><span class="sxs-lookup"><span data-stu-id="851f5-126">The request context associated with the object.</span></span> <span data-ttu-id="851f5-127">Это необходимо добавить в процесс для процесса ведущего приложения Office.</span><span class="sxs-lookup"><span data-stu-id="851f5-127">This connects the add-in's process to the Office host application's process.</span></span>
  name: context
  fullName: context
  langs:
  - typeScript
  type: property
  syntax:
    content: 'context: RequestContext;'
    return:
      type:
      - RequestContext
- uid: onenote.OneNote.Table.getCell
  summary: >-
    <span data-ttu-id="851f5-128">Возвращает ячейку таблицы в указанной строке и указанном столбце.</span><span class="sxs-lookup"><span data-stu-id="851f5-128">Gets the table cell at a specified row and column.</span></span>


    <span data-ttu-id="851f5-129">\[[Набор API-Интерфейсов: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="851f5-129">\[ [API set: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets) \]</span></span>
  name: getCell(rowIndex, cellIndex)
  fullName: getCell
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getCell(rowIndex: number, cellIndex: number): OneNote.TableCell;'
    return:
      type:
      - onenote.OneNote.TableCell
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"851f5-130\">Примеры</span><span class=\"sxs-lookup\"><span data-stu-id=\"851f5-130\">Examples</span></span>\n\n```javascript\nOneNote.run(function(ctx) {\n    var app = ctx.application;\n    var outline = app.getActiveOutline();\n    \n    // Queue a command to load outline.paragraphs and their types.\n    ctx.load(outline, \"paragraphs, paragraphs/type\");\n    \n    // Run the queued commands, and return a promise to indicate task completion.\n    return ctx.sync().then(function () {\n        var paragraphs = outline.paragraphs;\n        \n        // for each table, get a cell in the second row and third column.\n        for (var i = 0; i < paragraphs.items.length; i++) {\n            var paragraph = paragraphs.items[i];\n            if (paragraph.type == \"Table\") {\n                var table = paragraph.table;\n                var cell = table.getCell(2 /*Row Index*/, 3 /*Column Index*/);\n            }\n        }\n        return ctx.sync();\n    })\n})\n.catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
    parameters:
    - id: rowIndex
      description: <span data-ttu-id="851f5-131">Индекс строки.</span><span class="sxs-lookup"><span data-stu-id="851f5-131">The index of the row.</span></span>
      type:
      - number
    - id: cellIndex
      description: <span data-ttu-id="851f5-132">Индекс ячейки в строке.</span><span class="sxs-lookup"><span data-stu-id="851f5-132">The index of the cell in the row.</span></span>
      type:
      - number
- uid: onenote.OneNote.Table.id
  summary: >-
    <span data-ttu-id="851f5-p107">Получает идентификатор таблицы. Только для чтения.</span><span class="sxs-lookup"><span data-stu-id="851f5-p107">Gets the ID of the table. Read-only.</span></span>


    <span data-ttu-id="851f5-135">\[[Набор API-Интерфейсов: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="851f5-135">\[ [API set: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets) \]</span></span>
  name: id
  fullName: id
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly id: string;'
    return:
      type:
      - string
- uid: onenote.OneNote.Table.insertColumn
  summary: >-
    <span data-ttu-id="851f5-p108">Вставляет столбец в положении заданного индекса в таблице. Значения указываются в новом столбце. В противном случае столбец будет пустым.</span><span class="sxs-lookup"><span data-stu-id="851f5-p108">Inserts a column at the given index in the table. Values, if specified, are set in the new column. Otherwise the column is empty.</span></span>


    <span data-ttu-id="851f5-139">\[[Набор API-Интерфейсов: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="851f5-139">\[ [API set: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets) \]</span></span>
  name: insertColumn(index, values)
  fullName: insertColumn
  langs:
  - typeScript
  type: method
  syntax:
    content: 'insertColumn(index: number, values?: string[]): void;'
    return:
      type:
      - void
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"851f5-140\">Примеры</span><span class=\"sxs-lookup\"><span data-stu-id=\"851f5-140\">Examples</span></span>\n\n```javascript\nOneNote.run(function(ctx) {\n    var app = ctx.application;\n    var outline = app.getActiveOutline();\n    \n    // Queue a command to load outline.paragraphs and their types.\n    ctx.load(outline, \"paragraphs, paragraphs/type\");\n    \n    // Run the queued commands, and return a promise to indicate task completion.\n    return ctx.sync().then(function () {\n        var paragraphs = outline.paragraphs;\n        \n        // for each table, insert a column at index two.\n        for (var i = 0; i < paragraphs.items.length; i++) {\n            var paragraph = paragraphs.items[i];\n            if (paragraph.type == \"Table\") {\n                var table = paragraph.table;\n                table.insertColumn(2, [\"cell0\", \"cell1\"]);\n            }\n        }\n        return ctx.sync();\n    })\n})\n.catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
    parameters:
    - id: index
      description: <span data-ttu-id="851f5-141">Индекс в таблице, в положении которого будет вставлен столбец.</span><span class="sxs-lookup"><span data-stu-id="851f5-141">Index where the column will be inserted in the table.</span></span>
      type:
      - number
    - id: values
      description: <span data-ttu-id="851f5-142">Необязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="851f5-142">Optional.</span></span> <span data-ttu-id="851f5-143">Строки, которые необходимо вставить в новый столбец, заданные в виде массива.</span><span class="sxs-lookup"><span data-stu-id="851f5-143">Strings to insert in the new column, specified as an array.</span></span> <span data-ttu-id="851f5-144">Значений в этом параметре не должно быть больше, чем строк в таблице.</span><span class="sxs-lookup"><span data-stu-id="851f5-144">Must not have more values than rows in the table.</span></span>
      type:
      - string[]
- uid: onenote.OneNote.Table.insertRow
  summary: >-
    <span data-ttu-id="851f5-p110">Вставляет строку в положение заданного индекса в таблице. Значения указываются в новой строке. В противном случае строка будет пустой.</span><span class="sxs-lookup"><span data-stu-id="851f5-p110">Inserts a row at the given index in the table. Values, if specified, are set in the new row. Otherwise the row is empty.</span></span>


    <span data-ttu-id="851f5-148">\[[Набор API-Интерфейсов: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="851f5-148">\[ [API set: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets) \]</span></span>
  name: insertRow(index, values)
  fullName: insertRow
  langs:
  - typeScript
  type: method
  syntax:
    content: 'insertRow(index: number, values?: string[]): OneNote.TableRow;'
    return:
      type:
      - OneNote.TableRow
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"851f5-149\">Примеры</span><span class=\"sxs-lookup\"><span data-stu-id=\"851f5-149\">Examples</span></span>\n\n```javascript\nOneNote.run(function(ctx) {\n    var app = ctx.application;\n    var outline = app.getActiveOutline();\n    \n    // Queue a command to load outline.paragraphs and their types.\n    ctx.load(outline, \"paragraphs, paragraphs/type\");\n    \n    // Run the queued commands, and return a promise to indicate task completion.\n    return ctx.sync().then(function () {\n        var paragraphs = outline.paragraphs;\n        \n        // for each table, insert a row at index two.\n        for (var i = 0; i < paragraphs.items.length; i++) {\n            var paragraph = paragraphs.items[i];\n            if (paragraph.type == \"Table\") {\n                var table = paragraph.table;\n                var row = table.insertRow(2, [\"cell0\", \"cell1\"]);\n            }\n        }\n        return ctx.sync();\n    })\n})\n.catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
    parameters:
    - id: index
      description: <span data-ttu-id="851f5-150">Индекс в таблице, в положении которого будет вставлена строка.</span><span class="sxs-lookup"><span data-stu-id="851f5-150">Index where the row will be inserted in the table.</span></span>
      type:
      - number
    - id: values
      description: <span data-ttu-id="851f5-151">Необязательное свойство.</span><span class="sxs-lookup"><span data-stu-id="851f5-151">Optional.</span></span> <span data-ttu-id="851f5-152">Строки, которые необходимо вставить в новую строку, заданные в виде массива.</span><span class="sxs-lookup"><span data-stu-id="851f5-152">Strings to insert in the new row, specified as an array.</span></span> <span data-ttu-id="851f5-153">Значений в этом параметре не должно быть больше, чем столбцов в таблице.</span><span class="sxs-lookup"><span data-stu-id="851f5-153">Must not have more values than columns in the table.</span></span>
      type:
      - string[]
- uid: onenote.OneNote.Table.load
  summary: <span data-ttu-id="851f5-154">Очереди команды для загрузки указанного свойства объекта.</span><span class="sxs-lookup"><span data-stu-id="851f5-154">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="851f5-155">Перед чтением свойства необходимо вызвать «context.sync()».</span><span class="sxs-lookup"><span data-stu-id="851f5-155">You must call "context.sync()" before reading the properties.</span></span>
  remarks: "<span data-ttu-id=\"851f5-156\">В дополнение к подписи этот метод имеет следующие цифровые подписи.</span><span class=\"sxs-lookup\"><span data-stu-id=\"851f5-156\">In addition to this signature, this method has the following signatures:</span></span>\n\n<span data-ttu-id=\"851f5-157\">`load(option?: { select?: string; expand?: string; }): OneNote.Table`-Option.select — это разделенный запятыми строка, указывающая свойства для загрузки, куда options.expand — это разделенный запятыми строка, указывающая свойства навигации для загрузки.</span><span class=\"sxs-lookup\"><span data-stu-id=\"851f5-157\">`load(option?: { select?: string; expand?: string; }): OneNote.Table` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.</span></span>\n\n<span data-ttu-id=\"851f5-158\">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): OneNote.Table`-Доступно только на коллекцию типов.</span><span class=\"sxs-lookup\"><span data-stu-id=\"851f5-158\">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): OneNote.Table` - Only available on collection types.</span></span> <span data-ttu-id=\"851f5-159\">Это похоже на предыдущую.</span><span class=\"sxs-lookup\"><span data-stu-id=\"851f5-159\">It is similar to the preceding signature.</span></span> <span data-ttu-id=\"851f5-160\">Option.Top указывает максимальное число элементов коллекции, которые можно включить в результат.</span><span class=\"sxs-lookup\"><span data-stu-id=\"851f5-160\">Option.top specifies the maximum number of collection items that can be included in the result.</span></span> <span data-ttu-id=\"851f5-161\">Option.Skip указывает количество элементов, которые пропускаются и не включенный в результате.</span><span class=\"sxs-lookup\"><span data-stu-id=\"851f5-161\">Option.skip specifies the number of items that are to be skipped and not included in the result.</span></span> <span data-ttu-id=\"851f5-162\">Если option.top указан, результирующий набор будет запущен процесс после пропускает указанное число элементов.</span><span class=\"sxs-lookup\"><span data-stu-id=\"851f5-162\">If option.top is specified, the result set will start after skipping the specified number of items.</span></span>\n#### <a name=\"examples\"></a><span data-ttu-id=\"851f5-163\">Примеры</span><span class=\"sxs-lookup\"><span data-stu-id=\"851f5-163\">Examples</span></span>\n\n```javascript\nOneNote.run(function(ctx) {\n    var app = ctx.application;\n    var outline = app.getActiveOutline();\n    \n    // Queue a command to load outline.paragraphs and their types.\n    ctx.load(outline, \"paragraphs/type\");\n    \n    // Run the queued commands, and return a promise to indicate task completion.\n    return ctx.sync().then(function () {\n        var paragraphs = outline.paragraphs;\n        \n        // For each table, log properties.\n        for (var i = 0; i < paragraphs.items.length; i++) {\n            var paragraph = paragraphs.items[i];\n            if (paragraph.type == \"Table\") {\n                var table = paragraph.table;\n                ctx.load(table);\n                return ctx.sync().then(function() {\n                    console.log(\"Table Id: \" + table.id);\n                    console.log(\"Row Count: \" + table.rowCount);\n                    console.log(\"Column Count: \" + table.columnCount);\n                    return ctx.sync();\n                });\n            }\n        }\n    });\n})\n.catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```\n```javascript\nOneNote.run(function(ctx) {\n    var app = ctx.application;\n    var outline = app.getActiveOutline();\n    \n    // Queue a command to load outline.paragraphs and their types.\n    ctx.load(outline, \"paragraphs, paragraphs/type\");\n    \n    // Run the queued commands, and return a promise to indicate task completion.\n    return ctx.sync().then(function () {\n        var paragraphs = outline.paragraphs;\n        \n        // for each table, log its paragraph id.\n        for (var i = 0; i < paragraphs.items.length; i++) {\n            var paragraph = paragraphs.items[i];\n            if (paragraph.type == \"Table\") {\n                var table = paragraph.table;\n                ctx.load(table, \"paragraph/id, rows/id\");\n                return ctx.sync().then(function() {\n                    console.log(\"Paragraph Id: \" + table.paragraph.id);\n                    var rows = table.rows;\n                    \n                    // for each rows in the table, log row index and id.\n                    for (var i = 0; i < rows.items.length; i++) {\n                        console.log(\"Row \" + i + \" Id: \" + rows.items[i].id);\n                    }\n                    return ctx.sync();\n                });\n            }\n        }\n    })\n})\n.catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
  name: load(option)
  fullName: load
  langs:
  - typeScript
  type: method
  syntax:
    content: 'load(option?: string | string[]): OneNote.Table;'
    return:
      type:
      - OneNote.Table
      description: ''
    parameters:
    - id: option
      description: <span data-ttu-id="851f5-164">Строка, разделенных запятыми или массив строк, задающих свойства для загрузки.</span><span class="sxs-lookup"><span data-stu-id="851f5-164">A comma-delimited string or an array of strings that specify the properties to load.</span></span>
      type:
      - string | string[]
- uid: onenote.OneNote.Table.paragraph
  summary: >-
    <span data-ttu-id="851f5-p114">Получает объект Paragraph, содержащий объект Table. Только для чтения.</span><span class="sxs-lookup"><span data-stu-id="851f5-p114">Gets the Paragraph object that contains the Table object. Read-only.</span></span>


    <span data-ttu-id="851f5-167">\[[Набор API-Интерфейсов: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="851f5-167">\[ [API set: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets) \]</span></span>
  name: paragraph
  fullName: paragraph
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly paragraph: OneNote.Paragraph;'
    return:
      type:
      - onenote.OneNote.Paragraph
- uid: onenote.OneNote.Table.rowCount
  summary: >-
    <span data-ttu-id="851f5-168">Получает количество строк в таблице.</span><span class="sxs-lookup"><span data-stu-id="851f5-168">Gets the number of rows in the table.</span></span>


    <span data-ttu-id="851f5-169">\[[Набор API-Интерфейсов: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="851f5-169">\[ [API set: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets) \]</span></span>
  name: rowCount
  fullName: rowCount
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly rowCount: number;'
    return:
      type:
      - number
- uid: onenote.OneNote.Table.rows
  summary: >-
    <span data-ttu-id="851f5-p115">Возвращает все строки таблицы. Только для чтения.</span><span class="sxs-lookup"><span data-stu-id="851f5-p115">Gets all of the table rows. Read-only.</span></span>


    <span data-ttu-id="851f5-172">\[[Набор API-Интерфейсов: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="851f5-172">\[ [API set: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets) \]</span></span>
  name: rows
  fullName: rows
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly rows: OneNote.TableRowCollection;'
    return:
      type:
      - OneNote.TableRowCollection
- uid: onenote.OneNote.Table.set
  summary: <span data-ttu-id="851f5-173">Задание нескольких свойств объекта в то же время.</span><span class="sxs-lookup"><span data-stu-id="851f5-173">Sets multiple properties of an object at the same time.</span></span> <span data-ttu-id="851f5-174">Вы можете передать простой объект с соответствующих свойств или другой объект API одного типа.</span><span class="sxs-lookup"><span data-stu-id="851f5-174">You can pass either a plain object with the appropriate properties, or another API object of the same type.</span></span>
  remarks: >-
    <span data-ttu-id="851f5-175">Этот метод имеет следующие дополнительные подписи.</span><span class="sxs-lookup"><span data-stu-id="851f5-175">This method has the following additional signature:</span></span>


    `set(properties: OneNote.Table): void`
  name: set(properties, options)
  fullName: set
  langs:
  - typeScript
  type: method
  syntax:
    content: 'set(properties: Interfaces.TableUpdateData, options?: OfficeExtension.UpdateOptions): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: properties
      description: <span data-ttu-id="851f5-176">Объект JavaScript со свойствами, которые isomorphically структурированы для свойства объекта, для которого вызывается метод.</span><span class="sxs-lookup"><span data-stu-id="851f5-176">A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.</span></span>
      type:
      - Interfaces.TableUpdateData
    - id: options
      description: <span data-ttu-id="851f5-177">Предоставляет возможность отключать ошибки, если объект свойств пытается записать все свойства только для чтения.</span><span class="sxs-lookup"><span data-stu-id="851f5-177">Provides an option to suppress errors if the properties object tries to set any read-only properties.</span></span>
      type:
      - office.OfficeExtension.UpdateOptions
- uid: onenote.OneNote.Table.setShadingColor
  summary: >-
    <span data-ttu-id="851f5-178">Задает цвет заливки всех ячеек в таблице.</span><span class="sxs-lookup"><span data-stu-id="851f5-178">Sets the shading color of all cells in the table.</span></span> <span data-ttu-id="851f5-179">Код цвета, который нужно задать ячейкам.</span><span class="sxs-lookup"><span data-stu-id="851f5-179">The color code to set the cells to.</span></span>


    <span data-ttu-id="851f5-180">\[[Набор API-Интерфейсов: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="851f5-180">\[ [API set: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets) \]</span></span>
  name: setShadingColor(colorCode)
  fullName: setShadingColor
  langs:
  - typeScript
  type: method
  syntax:
    content: 'setShadingColor(colorCode: string): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: colorCode
      description: ''
      type:
      - string
- uid: onenote.OneNote.Table.toJSON
  summary: <span data-ttu-id="851f5-181">Переопределяет JavaScript `toJSON()` метод, чтобы обеспечить более необходимых результатов при передаче объекта API для `JSON.stringify()` <!-- -->.</span><span class="sxs-lookup"><span data-stu-id="851f5-181">Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`<!-- -->.</span></span> <span data-ttu-id="851f5-182">(`JSON.stringify`<!-- -->, в свою очередь, вызывает `toJSON` метод объекта, который передается в нее.) В то время как исходный объект OneNote.Table является объектом API `toJSON` метод возвращает обычный объектов JavaScript (тип `OneNote.Interfaces.TableData` <!-- -->), который содержит неполные копии всех загруженных дочерних свойств из исходного объекта.</span><span class="sxs-lookup"><span data-stu-id="851f5-182">(`JSON.stringify`<!-- -->, in turn, calls the `toJSON` method of the object that is passed to it.) Whereas the original OneNote.Table object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `OneNote.Interfaces.TableData`<!-- -->) that contains shallow copies of any loaded child properties from the original object.</span></span>
  name: toJSON()
  fullName: toJSON
  langs:
  - typeScript
  type: method
  syntax:
    content: 'toJSON(): OneNote.Interfaces.TableData;'
    return:
      type:
      - OneNote.Interfaces.TableData
      description: ''
- uid: onenote.OneNote.Table.track
  summary: <span data-ttu-id="851f5-183">Отслеживание объектов для автоматической на основании соседних изменения в документе.</span><span class="sxs-lookup"><span data-stu-id="851f5-183">Track the object for automatic adjustment based on surrounding changes in the document.</span></span> <span data-ttu-id="851f5-184">Этот вызов это сокращение для context.trackedObjects.add(thisObject).</span><span class="sxs-lookup"><span data-stu-id="851f5-184">This call is a shorthand for context.trackedObjects.add(thisObject).</span></span> <span data-ttu-id="851f5-185">Если вы используете этот объект «.sync» вызовах и за пределами последовательного выполнение пакета «.run» и get «InvalidObjectPath» ошибка при установке свойства или вызова метода на объекте, необходимые для добавления объекта отслеживаемого объекта Сначала создается объект семейства сайтов.</span><span class="sxs-lookup"><span data-stu-id="851f5-185">If you are using this object across ".sync" calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you needed to have added the object to the tracked object collection when the object was first created.</span></span>
  name: track()
  fullName: track
  langs:
  - typeScript
  type: method
  syntax:
    content: 'track(): OneNote.Table;'
    return:
      type:
      - OneNote.Table
      description: ''
- uid: onenote.OneNote.Table.untrack
  summary: <span data-ttu-id="851f5-186">Выпуск памяти, связанное с объектом, если ранее отслеживаются.</span><span class="sxs-lookup"><span data-stu-id="851f5-186">Release the memory associated with this object, if it has previously been tracked.</span></span> <span data-ttu-id="851f5-187">Этот вызов — это сокращение для context.trackedObjects.remove(thisObject).</span><span class="sxs-lookup"><span data-stu-id="851f5-187">This call is shorthand for context.trackedObjects.remove(thisObject).</span></span> <span data-ttu-id="851f5-188">Создавая множество отслеживаемых объектов замедляет ведущего приложения, так помните освободить место на любые объекты, добавлении, после завершения их использования.</span><span class="sxs-lookup"><span data-stu-id="851f5-188">Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them.</span></span> <span data-ttu-id="851f5-189">Необходимо будет вызывать «context.sync()» до выпуска памяти вступает в силу.</span><span class="sxs-lookup"><span data-stu-id="851f5-189">You will need to call "context.sync()" before the memory release takes effect.</span></span>
  name: untrack()
  fullName: untrack
  langs:
  - typeScript
  type: method
  syntax:
    content: 'untrack(): OneNote.Table;'
    return:
      type:
      - OneNote.Table
      description: ''
