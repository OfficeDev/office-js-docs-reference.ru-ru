### YamlMime:UniversalReference
ms.openlocfilehash: 85467a8a82cfb84075328290fece3eae244f7639
ms.sourcegitcommit: c1149d24b38f20daf9ce690cd0761ec1ceb7333d
ms.translationtype: MT
ms.contentlocale: ru-RU
ms.lasthandoff: 10/17/2018
ms.locfileid: "25583450"
items:
- uid: onenote.OneNote.PageContentCollection
  summary: >-
    Представляет содержимое страницы в виде коллекции объектов PageContent.


    \[[Набор API-Интерфейсов: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
  name: OneNote.PageContentCollection
  fullName: onenote.OneNote.PageContentCollection
  langs:
  - typeScript
  type: class
  extends:
  - OfficeExtension.ClientObject
  package: onenote
  children:
  - onenote.OneNote.PageContentCollection.count
  - onenote.OneNote.PageContentCollection.getItem
  - onenote.OneNote.PageContentCollection.getItemAt
  - onenote.OneNote.PageContentCollection.items
  - onenote.OneNote.PageContentCollection.load
  - onenote.OneNote.PageContentCollection.toJSON
  - onenote.OneNote.PageContentCollection.track
  - onenote.OneNote.PageContentCollection.untrack
- uid: onenote.OneNote.PageContentCollection.count
  summary: >-
    Возвращает количество единиц содержимого страницы в коллекции. Только для чтения.


    \[[Набор API-Интерфейсов: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
  name: count
  fullName: onenote.OneNote.PageContentCollection.count
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly count: number;'
    return:
      type:
      - number
- uid: onenote.OneNote.PageContentCollection.getItem
  summary: >-
    Получает объект PageContent по его идентификатору или индексу в коллекции. Только для чтения.


    \[[Набор API-Интерфейсов: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
  name: getItem(index)
  fullName: onenote.OneNote.PageContentCollection.getItem
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getItem(index: number | string): OneNote.PageContent;'
    return:
      type:
      - onenote.OneNote.PageContent
      description: ''
    parameters:
    - id: index
      description: Идентификатор объекта PageContent или расположение индекса объекта PageContent в коллекции.
      type:
      - number | string
- uid: onenote.OneNote.PageContentCollection.getItemAt
  summary: >-
    Получает объект PageContent по его позиции в коллекции.


    \[[Набор API-Интерфейсов: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
  name: getItemAt(index)
  fullName: onenote.OneNote.PageContentCollection.getItemAt
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getItemAt(index: number): OneNote.PageContent;'
    return:
      type:
      - onenote.OneNote.PageContent
      description: "\n#### <a name=\"examples\"></a>Примеры\n\n```javascript\nOneNote.run(function (context) {\n\n    var page = context.application.getActivePage();\n    var pageContents = page.contents;\n    var firstPageContent = pageContents.getItemAt(0);\n    firstPageContent.load('type');\n\n    // Run the queued commands, and return a promise to indicate task completion.\n    return context.sync()\n        .then(function () {\n            console.log(\"The first page content item is of type: \" + firstPageContent.type);\n            return context.sync();\n        });\n})\n.catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
    parameters:
    - id: index
      description: Значение индекса получаемого объекта. Используется нулевой индекс.
      type:
      - number
- uid: onenote.OneNote.PageContentCollection.items
  summary: Получает загруженных дочерних элементов в этом семействе.
  name: items
  fullName: onenote.OneNote.PageContentCollection.items
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly items: OneNote.PageContent[];'
    return:
      type:
      - OneNote.PageContent[]
- uid: onenote.OneNote.PageContentCollection.load
  summary: Очереди команды для загрузки указанного свойства объекта. Перед чтением свойства необходимо вызвать «context.sync()».
  remarks: "В дополнение к подписи этот метод имеет следующие цифровые подписи.\n\n`load(option?: { select?: string; expand?: string; }): OneNote.PageContentCollection`-Option.select — это разделенный запятыми строка, указывающая свойства для загрузки, куда options.expand — это разделенный запятыми строка, указывающая свойства навигации для загрузки.\n\n`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): OneNote.PageContentCollection`-Доступно только на коллекцию типов. Это похоже на предыдущую. Option.Top указывает максимальное число элементов коллекции, которые можно включить в результат. Option.Skip указывает количество элементов, которые пропускаются и не включенный в результате. Если option.top указан, результирующий набор будет запущен процесс после пропускает указанное число элементов.\n#### <a name=\"examples\"></a>Примеры\n\n```javascript\nOneNote.run(function (context) {\n\n    // Get the collection of pageContent items from the page.\n    var pageContents = context.application.getActivePage().contents;\n\n    // Queue a command to load the type of each pageContent.\n    pageContents.load(\"type\");\n\n    // Run the queued commands, and return a promise to indicate task completion.\n    return context.sync()\n        .then(function () {\n\n            $.each(pageContents.items, function(index, pageContent) {\n                console.log(\"PageContent type: \" + pageContent.type);\n            });\n        });\n})                \n.catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```\n```javascript\nOneNote.run(function (context) {\n   var page = context.application.getActivePage();\n   var pageContents = page.contents;\n   pageContents.load('type');\n   var outlines = ;\n   return context.sync()\n       .then(function () {      \n              $.each(pageContents.items, function (index, pageContent) {\n                     console.log(pageContent.type);\n                     if (pageContent.type === 'Outline') {\n                           outlines.push(pageContent);\n                     }\n              });\n              $.each(outlines, function (index, outline) {\n                     outline.load(\"id,paragraphs,paragraphs/type\");\n              });\n              return context.sync();\n       })\n       .then(function () {\n              $.each(outlines, function (index, outline) {\n                     console.log(\"An outline was found with id : \" + outline.id);\n              });\n              return Promise.resolve(outlines);\n       });\n});\n```"
  name: load(option)
  fullName: onenote.OneNote.PageContentCollection.load
  langs:
  - typeScript
  type: method
  syntax:
    content: 'load(option?: string | string[]): OneNote.PageContentCollection;'
    return:
      type:
      - onenote.OneNote.PageContentCollection
      description: ''
    parameters:
    - id: option
      description: Строка, разделенных запятыми или массив строк, задающих свойства для загрузки.
      type:
      - string | string[]
- uid: onenote.OneNote.PageContentCollection.toJSON
  name: toJSON()
  fullName: onenote.OneNote.PageContentCollection.toJSON
  langs:
  - typeScript
  type: method
  syntax:
    content: 'toJSON(): OneNote.Interfaces.PageContentCollectionData;'
    return:
      type:
      - onenote.OneNote.Interfaces.PageContentCollectionData
      description: ''
- uid: onenote.OneNote.PageContentCollection.track
  summary: Отслеживание объектов для автоматической на основании соседних изменения в документе. Этот вызов это сокращение для context.trackedObjects.add(thisObject). Если вы используете этот объект «.sync» вызовах и за пределами последовательного выполнение пакета «.run» и get «InvalidObjectPath» ошибка при установке свойства или вызова метода на объекте, необходимые для добавления объекта отслеживаемого объекта Сначала создается объект семейства сайтов.
  name: track()
  fullName: onenote.OneNote.PageContentCollection.track
  langs:
  - typeScript
  type: method
  syntax:
    content: 'track(): OneNote.PageContentCollection;'
    return:
      type:
      - onenote.OneNote.PageContentCollection
      description: ''
- uid: onenote.OneNote.PageContentCollection.untrack
  summary: Выпуск памяти, связанное с объектом, если ранее отслеживаются. Этот вызов — это сокращение для context.trackedObjects.remove(thisObject). Создавая множество отслеживаемых объектов замедляет ведущего приложения, так помните освободить место на любые объекты, добавлении, после завершения их использования. Необходимо будет вызывать «context.sync()» до выпуска памяти вступает в силу.
  name: untrack()
  fullName: onenote.OneNote.PageContentCollection.untrack
  langs:
  - typeScript
  type: method
  syntax:
    content: 'untrack(): OneNote.PageContentCollection;'
    return:
      type:
      - onenote.OneNote.PageContentCollection
      description: ''
