### YamlMime:UniversalReference
ms.openlocfilehash: 031a2be8316449e7222f7b34ece4c3facfffb0e0
ms.sourcegitcommit: 262b7c417245b7b61a57d53eee33a477a722ca6e
ms.translationtype: MT
ms.contentlocale: ru-RU
ms.lasthandoff: 09/28/2018
ms.locfileid: "24051079"
items:
- uid: word.Word.ContentControl
  summary: >-
    Представляет элемент управления содержимым. Элементы управления содержимым — это связанные и, возможно, помеченные фрагменты документа, выполняющие роль контейнеров для определенных типов содержимого. Отдельные элементы управления содержимым могут содержать изображения, таблицы или абзацы форматированного текста. На данный момент поддерживаются только элементы управления содержимым "форматированный текст".


    \[[Набор API-Интерфейсов: WordApi 1.1](/javascript/office/requirement-sets/word-api-requirement-sets)\]
  name: Word.ContentControl
  fullName: word.Word.ContentControl
  langs:
  - typeScript
  type: class
  extends:
  - OfficeExtension.ClientObject
  package: word
  children:
  - word.Word.ContentControl.appearance
  - word.Word.ContentControl.cannotDelete
  - word.Word.ContentControl.cannotEdit
  - word.Word.ContentControl.clear
  - word.Word.ContentControl.color
  - word.Word.ContentControl.contentControls
  - word.Word.ContentControl.delete
  - word.Word.ContentControl.font
  - word.Word.ContentControl.getHtml
  - word.Word.ContentControl.getOoxml
  - word.Word.ContentControl.getRange
  - word.Word.ContentControl.getTextRanges
  - word.Word.ContentControl.id
  - word.Word.ContentControl.inlinePictures
  - word.Word.ContentControl.insertBreak
  - word.Word.ContentControl.insertFileFromBase64
  - word.Word.ContentControl.insertHtml
  - word.Word.ContentControl.insertInlinePictureFromBase64
  - word.Word.ContentControl.insertOoxml
  - word.Word.ContentControl.insertParagraph
  - word.Word.ContentControl.insertTable
  - word.Word.ContentControl.insertText
  - word.Word.ContentControl.lists
  - word.Word.ContentControl.load
  - word.Word.ContentControl.paragraphs
  - word.Word.ContentControl.parentBody
  - word.Word.ContentControl.parentContentControl
  - word.Word.ContentControl.parentContentControlOrNullObject
  - word.Word.ContentControl.parentTable
  - word.Word.ContentControl.parentTableCell
  - word.Word.ContentControl.parentTableCellOrNullObject
  - word.Word.ContentControl.parentTableOrNullObject
  - word.Word.ContentControl.placeholderText
  - word.Word.ContentControl.removeWhenEdited
  - word.Word.ContentControl.search
  - word.Word.ContentControl.select
  - word.Word.ContentControl.split
  - word.Word.ContentControl.style
  - word.Word.ContentControl.styleBuiltIn
  - word.Word.ContentControl.subtype
  - word.Word.ContentControl.tables
  - word.Word.ContentControl.tag
  - word.Word.ContentControl.text
  - word.Word.ContentControl.title
  - word.Word.ContentControl.toJSON
  - word.Word.ContentControl.track
  - word.Word.ContentControl.type
  - word.Word.ContentControl.untrack
- uid: word.Word.ContentControl.appearance
  summary: >-
    Получает или задает внешний вид элемента управления содержимым. Значение может быть «BoundingBox», «Метки» или «Скрытый».


    \[[Набор API-Интерфейсов: WordApi 1.1](/javascript/office/requirement-sets/word-api-requirement-sets)\]
  name: appearance
  fullName: word.Word.ContentControl.appearance
  langs:
  - typeScript
  type: property
  syntax:
    content: 'appearance: Word.ContentControlAppearance | "BoundingBox" | "Tags" | "Hidden";'
    return:
      type:
      - Word.ContentControlAppearance | "BoundingBox" | "Tags" | "Hidden"
- uid: word.Word.ContentControl.cannotDelete
  summary: >-
    Возвращает или задает значение, указывающее, может ли пользователь удалить элемент управления контентом. Является взаимоисключающим со свойством removeWhenEdited.


    \[[Набор API-Интерфейсов: WordApi 1.1](/javascript/office/requirement-sets/word-api-requirement-sets)\]
  name: cannotDelete
  fullName: word.Word.ContentControl.cannotDelete
  langs:
  - typeScript
  type: property
  syntax:
    content: 'cannotDelete: boolean;'
    return:
      type:
      - boolean
- uid: word.Word.ContentControl.cannotEdit
  summary: >-
    Возвращает или задает значение, указывающее, может ли пользователь изменять содержимое элемента управления содержимым.


    \[[Набор API-Интерфейсов: WordApi 1.1](/javascript/office/requirement-sets/word-api-requirement-sets)\]
  name: cannotEdit
  fullName: word.Word.ContentControl.cannotEdit
  langs:
  - typeScript
  type: property
  syntax:
    content: 'cannotEdit: boolean;'
    return:
      type:
      - boolean
- uid: word.Word.ContentControl.clear
  summary: >-
    Очищает содержимое элемента управления содержимым. Пользователь может отменить операцию для очищенного содержимого.


    \[[Набор API-Интерфейсов: WordApi 1.1](/javascript/office/requirement-sets/word-api-requirement-sets)\]
  name: clear()
  fullName: word.Word.ContentControl.clear
  langs:
  - typeScript
  type: method
  syntax:
    content: 'clear(): void;'
    return:
      type:
      - void
      description: "\n#### <a name=\"examples\"></a>Примеры\n\n```javascript\n// Run a batch operation against the Word object model.\nWord.run(function (context) {\n    \n    // Create a proxy object for the content controls collection.\n    var contentControls = context.document.contentControls;\n    \n    // Queue a command to load the content controls collection.\n    contentControls.load('text');\n     \n    // Synchronize the document state by executing the queued commands, \n    // and return a promise to indicate task completion.\n    return context.sync().then(function () {\n        \n        if (contentControls.items.length === 0) {\n            console.log(\"There isn't a content control in this document.\");\n        } else {\n            \n            // Queue a command to clear the contents of the first content control.\n            contentControls.items[0].clear();\n            // Synchronize the document state by executing the queued commands, \n            // and return a promise to indicate task completion.\n            return context.sync().then(function () {\n                console.log('Content control cleared of contents.');\n            });      \n        }\n            \n    });  \n})\n.catch(function (error) {\n    console.log('Error: ' + JSON.stringify(error));\n    if (error instanceof OfficeExtension.Error) {\n        console.log('Debug info: ' + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- uid: word.Word.ContentControl.color
  summary: >-
    Получает или задает цвет элемента управления контентом. Цвет указан в "\#вида RRGGBB" форматирование или с помощью имени цвета.


    \[[Набор API-Интерфейсов: WordApi 1.1](/javascript/office/requirement-sets/word-api-requirement-sets)\]
  name: color
  fullName: word.Word.ContentControl.color
  langs:
  - typeScript
  type: property
  syntax:
    content: 'color: string;'
    return:
      type:
      - string
- uid: word.Word.ContentControl.contentControls
  summary: >-
    Получает коллекцию объектов элементов управления содержимым в элементе управления содержимым. Только для чтения.


    \[[Набор API-Интерфейсов: WordApi 1.1](/javascript/office/requirement-sets/word-api-requirement-sets)\]
  name: contentControls
  fullName: word.Word.ContentControl.contentControls
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly contentControls: Word.ContentControlCollection;'
    return:
      type:
      - word.Word.ContentControlCollection
- uid: word.Word.ContentControl.delete
  summary: >-
    Удаляет элемент управления содержимым и его содержимое. Если свойство keepContent имеет значение true, содержимое не будет удалено.


    \[[Набор API-Интерфейсов: WordApi 1.1](/javascript/office/requirement-sets/word-api-requirement-sets)\]
  name: delete(keepContent)
  fullName: word.Word.ContentControl.delete
  langs:
  - typeScript
  type: method
  syntax:
    content: 'delete(keepContent: boolean): void;'
    return:
      type:
      - void
      description: "\n#### <a name=\"examples\"></a>Примеры\n\n```javascript\n// Run a batch operation against the Word object model.\nWord.run(function (context) {\n    \n    // Create a proxy object for the content controls collection.\n    var contentControls = context.document.contentControls;\n    \n    // Queue a command to load the content controls collection.\n    contentControls.load('text');\n     \n    // Synchronize the document state by executing the queued commands, \n    // and return a promise to indicate task completion.\n    return context.sync().then(function () {\n        \n        if (contentControls.items.length === 0) {\n            console.log(\"There isn't a content control in this document.\");\n        } else {\n            \n            // Queue a command to delete the first content control. The\n            // contents will remain in the document.\n            contentControls.items[0].delete(true);\n            // Synchronize the document state by executing the queued commands, \n            // and return a promise to indicate task completion.\n            return context.sync().then(function () {\n                console.log('Content control cleared of contents.');\n            });      \n        }\n            \n    });  \n})\n.catch(function (error) {\n    console.log('Error: ' + JSON.stringify(error));\n    if (error instanceof OfficeExtension.Error) {\n        console.log('Debug info: ' + JSON.stringify(error.debugInfo));\n    }\n});\n```"
    parameters:
    - id: keepContent
      description: Обязательный параметр. Указывает, следует ли удалить содержимое вместе с элементом управления содержимым. Если свойству keepContent задано значение true, содержимое не удаляется.
      type:
      - boolean
- uid: word.Word.ContentControl.font
  summary: >-
    Получает текстовый формат элемента управления содержимым. Используйте это свойство для получения и установки имени, размера, цвета и других свойств шрифта. Только для чтения.


    \[[Набор API-Интерфейсов: WordApi 1.1](/javascript/office/requirement-sets/word-api-requirement-sets)\]
  name: font
  fullName: word.Word.ContentControl.font
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly font: Word.Font;'
    return:
      type:
      - word.Word.Font
- uid: word.Word.ContentControl.getHtml
  summary: >-
    Возвращает HTML-представление объекта элемента управления содержимым.


    \[[Набор API-Интерфейсов: WordApi 1.1](/javascript/office/requirement-sets/word-api-requirement-sets)\]
  name: getHtml()
  fullName: word.Word.ContentControl.getHtml
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getHtml(): OfficeExtension.ClientResult<string>;'
    return:
      type:
      - OfficeExtension.ClientResult<string>
      description: "\n#### <a name=\"examples\"></a>Примеры\n\n```javascript\n// Run a batch operation against the Word object model.\nWord.run(function (context) {\n    \n    // Create a proxy object for the content controls collection that contains a specific tag.\n    var contentControlsWithTag = context.document.contentControls.getByTag('Customer-Address');\n    \n    // Queue a command to load the tag property for all of content controls. \n    context.load(contentControlsWithTag, 'tag');\n     \n    // Synchronize the document state by executing the queued commands, \n    // and return a promise to indicate task completion.\n    return context.sync().then(function () {\n        if (contentControlsWithTag.items.length === 0) {\n            console.log('No content control found.');\n        }\n        else {\n            // Queue a command to get the HTML contents of the first content control.\n            var html = contentControlsWithTag.items[0].getHtml();\n        \n            // Synchronize the document state by executing the queued commands, \n            // and return a promise to indicate task completion.\n            return context.sync()\n                .then(function () {\n                    console.log('Content control HTML: ' + html.value);\n            });\n        }\n    });  \n})\n.catch(function (error) {\n    console.log('Error: ' + JSON.stringify(error));\n    if (error instanceof OfficeExtension.Error) {\n        console.log('Debug info: ' + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- uid: word.Word.ContentControl.getOoxml
  summary: >-
    Возвращает OOXML-представление объекта элемента управления содержимым.


    \[[Набор API-Интерфейсов: WordApi 1.1](/javascript/office/requirement-sets/word-api-requirement-sets)\]
  name: getOoxml()
  fullName: word.Word.ContentControl.getOoxml
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getOoxml(): OfficeExtension.ClientResult<string>;'
    return:
      type:
      - OfficeExtension.ClientResult<string>
      description: "\n#### <a name=\"examples\"></a>Примеры\n\n```javascript\n// Run a batch operation against the Word object model.\nWord.run(function (context) {\n    \n    // Create a proxy object for the content controls collection.\n    var contentControls = context.document.contentControls;\n    \n    // Queue a command to load the id property for all of the content controls. \n    context.load(contentControls, 'id');\n     \n    // Synchronize the document state by executing the queued commands, \n    // and return a promise to indicate task completion.\n    return context.sync().then(function () {\n        if (contentControls.items.length === 0) {\n            console.log('No content control found.');\n        }\n        else {\n            // Queue a command to get the OOXML contents of the first content control.\n            var ooxml = contentControls.items[0].getOoxml();\n        \n            // Synchronize the document state by executing the queued commands, \n            // and return a promise to indicate task completion.\n            return context.sync()\n                .then(function () {\n                    console.log('Content control OOXML: ' + ooxml.value);\n            });\n        }\n    });  \n})\n.catch(function (error) {\n    console.log('Error: ' + JSON.stringify(error));\n    if (error instanceof OfficeExtension.Error) {\n        console.log('Debug info: ' + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- uid: word.Word.ContentControl.getRange
  summary: >-
    Возвращает весь элемент управления содержимым (либо его начальную или конечную точку) в виде диапазона.


    \[[Набор API-Интерфейсов: WordApi 1.3](/javascript/office/requirement-sets/word-api-requirement-sets)\]
  name: getRange(rangeLocation)
  fullName: word.Word.ContentControl.getRange
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getRange(rangeLocation?: Word.RangeLocation): Word.Range;'
    return:
      type:
      - Word.Range
      description: ''
    parameters:
    - id: rangeLocation
      description: Необязательный параметр. Расположение диапазона может быть «Целое», «До», «Пуск», «Завершение», «После», или «Содержимое».
      type:
      - word.Word.RangeLocation
- uid: word.Word.ContentControl.getTextRanges
  summary: >-
    Получает диапазонов текста в элементе управления содержимым с помощью пунктуации и/или другие конечные метки.


    \[[Набор API-Интерфейсов: WordApi 1.3](/javascript/office/requirement-sets/word-api-requirement-sets)\]
  name: getTextRanges(endingMarks, trimSpacing)
  fullName: word.Word.ContentControl.getTextRanges
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getTextRanges(endingMarks: string[], trimSpacing?: boolean): Word.RangeCollection;'
    return:
      type:
      - word.Word.RangeCollection
      description: ''
    parameters:
    - id: endingMarks
      description: Обязательный. Знаки пунктуации и/или другие конечные метки в виде массива строк.
      type:
      - string[]
    - id: trimSpacing
      description: Необязательный параметр. Указывает, следует ли удалить знаки интервалы (пробелы, вкладок, столбцов и end абзаца) из начала и окончания диапазонов, возвращаемых в коллекции диапазона. Значение по умолчанию — false означает, символы интервалов в начало и конец диапазонов включены в диапазоне семейства.
      type:
      - boolean
- uid: word.Word.ContentControl.id
  summary: >-
    Возвращает целое число, представляющее собой идентификатор элемента управления контентом. Только для чтения.


    \[[Набор API-Интерфейсов: WordApi 1.1](/javascript/office/requirement-sets/word-api-requirement-sets)\]
  name: id
  fullName: word.Word.ContentControl.id
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly id: number;'
    return:
      type:
      - number
- uid: word.Word.ContentControl.inlinePictures
  summary: >-
    Получает коллекцию объектов inlinePicture в элементе управления содержимым. Коллекция не содержит плавающие рисунки. Только для чтения.


    \[[Набор API-Интерфейсов: WordApi 1.1](/javascript/office/requirement-sets/word-api-requirement-sets)\]
  name: inlinePictures
  fullName: word.Word.ContentControl.inlinePictures
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly inlinePictures: Word.InlinePictureCollection;'
    return:
      type:
      - word.Word.InlinePictureCollection
- uid: word.Word.ContentControl.insertBreak
  summary: >-
    Вставка разрыва в выбранном расположении в основной документ. Значение insertLocation может быть «Запуск», «End», «До» или «После». Этот метод не может использоваться с элементами управления содержимым «RichTextTable», «RichTextTableRow» и «RichTextTableCell».


    \[[Набор API-Интерфейсов: WordApi 1.1](/javascript/office/requirement-sets/word-api-requirement-sets)\]
  name: insertBreak(breakType, insertLocation)
  fullName: word.Word.ContentControl.insertBreak
  langs:
  - typeScript
  type: method
  syntax:
    content: 'insertBreak(breakType: Word.BreakType, insertLocation: Word.InsertLocation): void;'
    return:
      type:
      - void
      description: "\n#### <a name=\"examples\"></a>Примеры\n\n```javascript\n// Run a batch operation against the Word object model.\nWord.run(function (context) {\n    \n    // Create a proxy object for the content controls collection.\n    var contentControls = context.document.contentControls;\n    \n    // Queue a commmand to load the id property for all of content controls. \n    context.load(contentControls, 'id');\n    \n    // Synchronize the document state by executing the queued commands, \n    // and return a promise to indicate task completion. We now will have \n    // access to the content control collection.\n    return context.sync().then(function () {\n        if (contentControls.items.length === 0) {\n            console.log('No content control found.');\n        }\n        else {\n            // Queue a command to insert a page break after the first content control. \n            contentControls.items[0].insertBreak('page', \"After\");\n            \n            // Synchronize the document state by executing the queued commands, \n            // and return a promise to indicate task completion. \n            return context.sync()\n                .then(function () {\n                    console.log('Inserted a page break after the first content control.');    \n            });\n        }\n    });  \n})\n.catch(function (error) {\n    console.log('Error: ' + JSON.stringify(error));\n    if (error instanceof OfficeExtension.Error) {\n        console.log('Debug info: ' + JSON.stringify(error.debugInfo));\n    }\n});\n```"
    parameters:
    - id: breakType
      description: Обязательный. Тип приостановки выполнения.
      type:
      - word.Word.BreakType
    - id: insertLocation
      description: Обязательный. Значение может быть «Запуск», «End», «До» или «После».
      type:
      - Word.InsertLocation
- uid: word.Word.ContentControl.insertFileFromBase64
  summary: >-
    Вставка документа в элемент управления содержимым в указанном расположении. Значение insertLocation может быть «Replace», «Запуск» или «Завершение».


    \[[Набор API-Интерфейсов: WordApi 1.1](/javascript/office/requirement-sets/word-api-requirement-sets)\]
  name: insertFileFromBase64(base64File, insertLocation)
  fullName: word.Word.ContentControl.insertFileFromBase64
  langs:
  - typeScript
  type: method
  syntax:
    content: 'insertFileFromBase64(base64File: string, insertLocation: Word.InsertLocation): Word.Range;'
    return:
      type:
      - Word.Range
      description: "\n#### <a name=\"examples\"></a>Примеры\n\n```javascript\n// Run a batch operation against the Word object model.\nWord.run(function (context) {\n    \n    // Create a proxy object for the content controls collection.\n    var contentControls = context.document.contentControls;\n    \n    // Queue a command to load the id property for all of the content controls. \n    context.load(contentControls, 'id');\n     \n    // Synchronize the document state by executing the queued commands, \n    // and return a promise to indicate task completion.\n    return context.sync().then(function () {\n        if (contentControls.items.length === 0) {\n            console.log('No content control found.');\n        }\n        else {\n            // Queue a command to put HTML into the contents of the first content control.\n            contentControls.items[0].insertHtml(\n                '<strong>HTML content inserted into the content control.</strong>',\n                'Start');\n        \n            // Synchronize the document state by executing the queued commands, \n            // and return a promise to indicate task completion.\n            return context.sync()\n                .then(function () {\n                    console.log('Inserted HTML in the first content control.');\n            });\n        }\n    });  \n})\n.catch(function (error) {\n    console.log('Error: ' + JSON.stringify(error));\n    if (error instanceof OfficeExtension.Error) {\n        console.log('Debug info: ' + JSON.stringify(error.debugInfo));\n    }\n});\n```"
    parameters:
    - id: base64File
      description: Обязательный. Содержимое DOCX-файла в кодировке base64.
      type:
      - string
    - id: insertLocation
      description: Обязательный. Значение может быть «Replace», «Запуск» или «Завершение». «Replace» не может использоваться с элементами управления содержимым «RichTextTable» и «RichTextTableRow».
      type:
      - Word.InsertLocation
- uid: word.Word.ContentControl.insertHtml
  summary: >-
    Вставка HTML-код в элемент управления содержимым в указанном расположении. Значение insertLocation может быть «Replace», «Запуск» или «Завершение».


    \[[Набор API-Интерфейсов: WordApi 1.1](/javascript/office/requirement-sets/word-api-requirement-sets)\]
  name: insertHtml(html, insertLocation)
  fullName: word.Word.ContentControl.insertHtml
  langs:
  - typeScript
  type: method
  syntax:
    content: 'insertHtml(html: string, insertLocation: Word.InsertLocation): Word.Range;'
    return:
      type:
      - Word.Range
      description: ''
    parameters:
    - id: html
      description: Обязательный параметр. HTML-код, который необходимо вставить в элемент управления содержимым.
      type:
      - string
    - id: insertLocation
      description: Обязательный. Значение может быть «Replace», «Запуск» или «Завершение». «Replace» не может использоваться с элементами управления содержимым «RichTextTable» и «RichTextTableRow».
      type:
      - Word.InsertLocation
- uid: word.Word.ContentControl.insertInlinePictureFromBase64
  summary: >-
    Вставка встроенного рисунка в элемент управления содержимым в указанном расположении. Значение insertLocation может быть «Replace», «Запуск» или «Завершение».


    \[[Набор API-Интерфейсов: WordApi 1.2](/javascript/office/requirement-sets/word-api-requirement-sets)\]
  name: insertInlinePictureFromBase64(base64EncodedImage, insertLocation)
  fullName: word.Word.ContentControl.insertInlinePictureFromBase64
  langs:
  - typeScript
  type: method
  syntax:
    content: 'insertInlinePictureFromBase64(base64EncodedImage: string, insertLocation: Word.InsertLocation): Word.InlinePicture;'
    return:
      type:
      - word.Word.InlinePicture
      description: "\n#### <a name=\"examples\"></a>Примеры\n\n```javascript\n// Run a batch operation against the Word object model.\nWord.run(function (context) {\n    \n    // Create a proxy object for the content controls collection.\n    var contentControls = context.document.contentControls;\n    \n    // Queue a command to load the id property for all of the content controls. \n    context.load(contentControls, 'id');\n     \n    // Synchronize the document state by executing the queued commands, \n    // and return a promise to indicate task completion.\n    return context.sync().then(function () {\n        if (contentControls.items.length === 0) {\n            console.log('No content control found.');\n        }\n        else {\n            // Queue a command to put OOXML into the contents of the first content control.\n            contentControls.items[0].insertOoxml(\"<pkg:package xmlns:pkg='http://schemas.microsoft.com/office/2006/xmlPackage'><pkg:part pkg:name='/_rels/.rels' pkg:contentType='application/vnd.openxmlformats-package.relationships+xml' pkg:padding='512'><pkg:xmlData><Relationships xmlns='http://schemas.openxmlformats.org/package/2006/relationships'><Relationship Id='rId1' Type='http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument' Target='word/document.xml'/></Relationships></pkg:xmlData></pkg:part><pkg:part pkg:name='/word/document.xml' pkg:contentType='application/vnd.openxmlformats-officedocument.wordprocessingml.document.main+xml'><pkg:xmlData><w:document xmlns:w='http://schemas.openxmlformats.org/wordprocessingml/2006/main' ><w:body><w:p><w:pPr><w:spacing w:before='360' w:after='0' w:line='480' w:lineRule='auto'/><w:rPr><w:color w:val='70AD47' w:themeColor='accent6'/><w:sz w:val='28'/></w:rPr></w:pPr><w:r><w:rPr><w:color w:val='70AD47' w:themeColor='accent6'/><w:sz w:val='28'/></w:rPr><w:t>This text has formatting directly applied to achieve its font size, color, line spacing, and paragraph spacing.</w:t></w:r></w:p></w:body></w:document></pkg:xmlData></pkg:part></pkg:package>\", \"End\");\n        \n            // Synchronize the document state by executing the queued commands, \n            // and return a promise to indicate task completion.\n            return context.sync()\n                .then(function () {\n                    console.log('Inserted OOXML in the first content control.');\n            });\n        }\n    });  \n})\n.catch(function (error) {\n    console.log('Error: ' + JSON.stringify(error));\n    if (error instanceof OfficeExtension.Error) {\n        console.log('Debug info: ' + JSON.stringify(error.debugInfo));\n    }\n});\n\n// Read \"Create better add-ins for Word with Office Open XML\" for guidance on working with OOXML.\n// https://docs.microsoft.com/office/dev/add-ins/word/create-better-add-ins-for-word-with-office-open-xml\n```"
    parameters:
    - id: base64EncodedImage
      description: Обязательный параметр. Вставляемое в элемент управления содержимым изображение в кодировке base64.
      type:
      - string
    - id: insertLocation
      description: Обязательный. Значение может быть «Replace», «Запуск» или «Завершение». «Replace» не может использоваться с элементами управления содержимым «RichTextTable» и «RichTextTableRow».
      type:
      - Word.InsertLocation
- uid: word.Word.ContentControl.insertOoxml
  summary: >-
    Вставляет OOXML внутрь элемента управления содержимым в указанном расположении. Значение insertLocation может быть «Replace», «Запуск» или «Завершение».


    \[[Набор API-Интерфейсов: WordApi 1.1](/javascript/office/requirement-sets/word-api-requirement-sets)\]
  name: insertOoxml(ooxml, insertLocation)
  fullName: word.Word.ContentControl.insertOoxml
  langs:
  - typeScript
  type: method
  syntax:
    content: 'insertOoxml(ooxml: string, insertLocation: Word.InsertLocation): Word.Range;'
    return:
      type:
      - Word.Range
      description: ''
    parameters:
    - id: ooxml
      description: Обязательный параметр. OOXML-код для вставки в элемент управления контентом.
      type:
      - string
    - id: insertLocation
      description: Обязательный. Значение может быть «Replace», «Запуск» или «Завершение». «Replace» не может использоваться с элементами управления содержимым «RichTextTable» и «RichTextTableRow».
      type:
      - Word.InsertLocation
- uid: word.Word.ContentControl.insertParagraph
  summary: >-
    Вставляет абзац в указанном расположении. Значение insertLocation может быть «Запуск», «End», «До» или «После».


    \[[Набор API-Интерфейсов: WordApi 1.1](/javascript/office/requirement-sets/word-api-requirement-sets)\]
  name: insertParagraph(paragraphText, insertLocation)
  fullName: word.Word.ContentControl.insertParagraph
  langs:
  - typeScript
  type: method
  syntax:
    content: 'insertParagraph(paragraphText: string, insertLocation: Word.InsertLocation): Word.Paragraph;'
    return:
      type:
      - Word.Paragraph
      description: "\n#### <a name=\"examples\"></a>Примеры\n\n```javascript\n// Run a batch operation against the Word object model.\nWord.run(function (context) {\n    \n    // Create a proxy object for the content controls collection.\n    var contentControls = context.document.contentControls;\n    \n    // Queue a command to load the id property for all of the content controls. \n    context.load(contentControls, 'id');\n     \n    // Synchronize the document state by executing the queued commands, \n    // and return a promise to indicate task completion.\n    return context.sync().then(function () {\n        if (contentControls.items.length === 0) {\n            console.log('No content control found.');\n        }\n        else {\n            // Queue a command to insert a paragraph after the first content control. \n            contentControls.items[0].insertParagraph('Text of the inserted paragraph.', 'After');\n        \n            // Synchronize the document state by executing the queued commands, \n            // and return a promise to indicate task completion.\n            return context.sync()\n                .then(function () {\n                    console.log('Inserted a paragraph after the first content control.');\n            });\n        }\n    });  \n})\n.catch(function (error) {\n    console.log('Error: ' + JSON.stringify(error));\n    if (error instanceof OfficeExtension.Error) {\n        console.log('Debug info: ' + JSON.stringify(error.debugInfo));\n    }\n});\n```"
    parameters:
    - id: paragraphText
      description: Обязательный параметр. Текст абзаца, который необходимо вставить.
      type:
      - string
    - id: insertLocation
      description: Обязательный. Значение может быть «Запуск», «End», «До» или «После». «До» и «После» не может использоваться с «RichTextTable», элементы управления содержимым «RichTextTableRow» и «RichTextTableCell».
      type:
      - Word.InsertLocation
- uid: word.Word.ContentControl.insertTable
  summary: >-
    Вставка таблицы с указанного числа строк и столбцов в или рядом с элементом управления контентом. Значение insertLocation может быть «Запуск», «End», «До» или «После».


    \[[Набор API-Интерфейсов: WordApi 1.3](/javascript/office/requirement-sets/word-api-requirement-sets)\]
  name: insertTable(rowCount, columnCount, insertLocation, values)
  fullName: word.Word.ContentControl.insertTable
  langs:
  - typeScript
  type: method
  syntax:
    content: 'insertTable(rowCount: number, columnCount: number, insertLocation: Word.InsertLocation, values?: string[][]): Word.Table;'
    return:
      type:
      - Word.Table
      description: ''
    parameters:
    - id: rowCount
      description: Обязательный. Количество строк в таблице.
      type:
      - number
    - id: columnCount
      description: Обязательный. Количество столбцов в таблице.
      type:
      - number
    - id: insertLocation
      description: Обязательный. Значение может быть «Запуск», «End», «До» или «После». «До» и «После» не может использоваться с «RichTextTable», элементы управления содержимым «RichTextTableRow» и «RichTextTableCell».
      type:
      - Word.InsertLocation
    - id: values
      description: Необязательный двухмерный массив. Ячейки заполняются, если в массиве указаны соответствующие строки.
      type:
      - string[][]
- uid: word.Word.ContentControl.insertText
  summary: >-
    Вставка текста в элемент управления содержимым в указанном расположении. Значение insertLocation может быть «Replace», «Запуск» или «Завершение».


    \[[Набор API-Интерфейсов: WordApi 1.1](/javascript/office/requirement-sets/word-api-requirement-sets)\]
  name: insertText(text, insertLocation)
  fullName: word.Word.ContentControl.insertText
  langs:
  - typeScript
  type: method
  syntax:
    content: 'insertText(text: string, insertLocation: Word.InsertLocation): Word.Range;'
    return:
      type:
      - Word.Range
      description: "\n#### <a name=\"examples\"></a>Примеры\n\n```javascript\n// Run a batch operation against the Word object model.\nWord.run(function (context) {\n    \n    // Create a proxy object for the content controls collection.\n    var contentControls = context.document.contentControls;\n    \n    // Queue a command to load the id property for all of the content controls. \n    context.load(contentControls, 'id');\n     \n    // Synchronize the document state by executing the queued commands, \n    // and return a promise to indicate task completion.\n    return context.sync().then(function () {\n        if (contentControls.items.length === 0) {\n            console.log('No content control found.');\n        }\n        else {\n            // Queue a command to replace text in the first content control. \n            contentControls.items[0].insertText('Replaced text in the first content control.', 'Replace');\n        \n            // Synchronize the document state by executing the queued commands, \n            // and return a promise to indicate task completion.\n            return context.sync()\n                .then(function () {\n                    console.log('Replaced text in the first content control.');\n            });\n        }\n    });  \n})\n.catch(function (error) {\n    console.log('Error: ' + JSON.stringify(error));\n    if (error instanceof OfficeExtension.Error) {\n        console.log('Debug info: ' + JSON.stringify(error.debugInfo));\n    }\n});\n\n// The Silly stories add-in sample shows how to use the insertText method.\n// https://aka.ms/sillystorywordaddin\n```"
    parameters:
    - id: text
      description: Обязательный параметр. Текст, который необходимо вставить в элемент управления содержимым.
      type:
      - string
    - id: insertLocation
      description: Обязательный. Значение может быть «Replace», «Запуск» или «Завершение». «Replace» не может использоваться с элементами управления содержимым «RichTextTable» и «RichTextTableRow».
      type:
      - Word.InsertLocation
- uid: word.Word.ContentControl.lists
  summary: >-
    Возвращает коллекцию объектов списков в элементе управления содержимым. Только для чтения.


    \[[Набор API-Интерфейсов: WordApi 1.3](/javascript/office/requirement-sets/word-api-requirement-sets)\]
  name: lists
  fullName: word.Word.ContentControl.lists
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly lists: Word.ListCollection;'
    return:
      type:
      - word.Word.ListCollection
- uid: word.Word.ContentControl.load
  summary: Очереди команды для загрузки указанного свойства объекта. Перед чтением свойства необходимо вызвать «context.sync()».
  remarks: "В дополнение к подписи этот метод имеет следующие цифровые подписи.\n\n`load(option?: { select?: string; expand?: string; }): Word.ContentControl`-Option.select — это разделенный запятыми строка, указывающая свойства для загрузки, куда options.expand — это разделенный запятыми строка, указывающая свойства навигации для загрузки.\n\n`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Word.ContentControl`-Доступно только на коллекцию типов. Это похоже на предыдущую. Option.Top указывает максимальное число элементов коллекции, которые можно включить в результат. Option.Skip указывает количество элементов, которые пропускаются и не включенный в результате. Если option.top указан, результирующий набор будет запущен процесс после пропускает указанное число элементов.\n#### <a name=\"examples\"></a>Примеры\n\n```javascript\n// Run a batch operation against the Word object model.\nWord.run(function (context) {\n    \n    // Create a proxy range object for the current selection.\n    var range = context.document.getSelection();\n    \n    // Queue a commmand to create the content control.\n    var myContentControl = range.insertContentControl();\n    myContentControl.tag = 'Customer-Address';\n    myContentControl.title = ' has t';\n    myContentControl.style = 'Heading 2';\n    myContentControl.insertText('One Microsoft Way, Redmond, WA 98052', 'replace');\n    myContentControl.cannotEdit = true;\n    \n    // Queue a command to load the id property for the content control you created.\n    context.load(myContentControl, 'id');\n    \n    // Synchronize the document state by executing the queued commands, \n    // and return a promise to indicate task completion.\n    return context.sync().then(function () {\n        console.log('Created content control with id: ' + myContentControl.id);\n    });  \n})\n.catch(function (error) {\n    console.log('Error: ' + JSON.stringify(error));\n    if (error instanceof OfficeExtension.Error) {\n        console.log('Debug info: ' + JSON.stringify(error.debugInfo));\n    }\n});\n```\n```javascript\n// Load all of the content control properties\n// Run a batch operation against the Word object model.\nWord.run(function (context) {\n    \n    // Create a proxy object for the content controls collection.\n    var contentControls = context.document.contentControls;\n    \n    // Queue a command to load the id property for all of the content controls. \n    context.load(contentControls, 'id');\n     \n    // Synchronize the document state by executing the queued commands, \n    // and return a promise to indicate task completion.\n    return context.sync().then(function () {\n        if (contentControls.items.length === 0) {\n            console.log('No content control found.');\n        }\n        else {\n            // Queue a command to load the properties on the first content control. \n            contentControls.items[0].load(  'appearance,' +\n                                            'cannotDelete,' +\n                                            'cannotEdit,' +\n                                            'id,' +\n                                            'placeHolderText,' +\n                                            'removeWhenEdited,' +\n                                            'title,' +\n                                            'text,' +\n                                            'type,' +\n                                            'style,' +\n                                            'tag,' +\n                                            'font/size,' +\n                                            'font/name,' +\n                                            'font/color');             \n        \n            // Synchronize the document state by executing the queued commands, \n            // and return a promise to indicate task completion.\n            return context.sync()\n                .then(function () {\n                    console.log('Property values of the first content control:' + \n                        '   ----- appearance: ' + contentControls.items[0].appearance + \n                        '   ----- cannotDelete: ' + contentControls.items[0].cannotDelete +\n                        '   ----- cannotEdit: ' + contentControls.items[0].cannotEdit +\n                        '   ----- color: ' + contentControls.items[0].color +\n                        '   ----- id: ' + contentControls.items[0].id +\n                        '   ----- placeHolderText: ' + contentControls.items[0].placeholderText +\n                        '   ----- removeWhenEdited: ' + contentControls.items[0].removeWhenEdited +\n                        '   ----- title: ' + contentControls.items[0].title +\n                        '   ----- text: ' + contentControls.items[0].text +\n                        '   ----- type: ' + contentControls.items[0].type +\n                        '   ----- style: ' + contentControls.items[0].style +\n                        '   ----- tag: ' + contentControls.items[0].tag +\n                        '   ----- font size: ' + contentControls.items[0].font.size +\n                        '   ----- font name: ' + contentControls.items[0].font.name +\n                        '   ----- font color: ' + contentControls.items[0].font.color);\n            });\n        }\n    });  \n})\n.catch(function (error) {\n    console.log('Error: ' + JSON.stringify(error));\n    if (error instanceof OfficeExtension.Error) {\n        console.log('Debug info: ' + JSON.stringify(error.debugInfo));\n    }\n});\n```"
  name: load(option)
  fullName: word.Word.ContentControl.load
  langs:
  - typeScript
  type: method
  syntax:
    content: 'load(option?: string | string[]): Word.ContentControl;'
    return:
      type:
      - word.Word.ContentControl
      description: ''
    parameters:
    - id: option
      description: Строка, разделенных запятыми или массив строк, задающих свойства для загрузки.
      type:
      - string | string[]
- uid: word.Word.ContentControl.paragraphs
  summary: >-
    Получает коллекцию объектов абзацев в элементе управления содержимым. Только для чтения.


    \[[Набор API-Интерфейсов: WordApi 1.1](/javascript/office/requirement-sets/word-api-requirement-sets)\]
  name: paragraphs
  fullName: word.Word.ContentControl.paragraphs
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly paragraphs: Word.ParagraphCollection;'
    return:
      type:
      - Word.ParagraphCollection
- uid: word.Word.ContentControl.parentBody
  summary: >-
    Возвращает родительский текст элемента управления содержимым. Только для чтения.


    \[[Набор API-Интерфейсов: WordApi 1.3](/javascript/office/requirement-sets/word-api-requirement-sets)\]
  name: parentBody
  fullName: word.Word.ContentControl.parentBody
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly parentBody: Word.Body;'
    return:
      type:
      - Word.Body
- uid: word.Word.ContentControl.parentContentControl
  summary: >-
    Возвращает элемент управления содержимым, содержащий элемент управления содержимым. Возвращает ошибку, если родительского элемента управления содержимым не существует. Только для чтения.


    \[[Набор API-Интерфейсов: WordApi 1.1](/javascript/office/requirement-sets/word-api-requirement-sets)\]
  name: parentContentControl
  fullName: word.Word.ContentControl.parentContentControl
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly parentContentControl: Word.ContentControl;'
    return:
      type:
      - word.Word.ContentControl
- uid: word.Word.ContentControl.parentContentControlOrNullObject
  summary: >-
    Возвращает элемент управления содержимым, содержащий элемент управления содержимым. Возвращает пустой объект, если родительского элемента управления содержимым не существует. Только для чтения.


    \[[Набор API-Интерфейсов: WordApi 1.3](/javascript/office/requirement-sets/word-api-requirement-sets)\]
  name: parentContentControlOrNullObject
  fullName: word.Word.ContentControl.parentContentControlOrNullObject
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly parentContentControlOrNullObject: Word.ContentControl;'
    return:
      type:
      - word.Word.ContentControl
- uid: word.Word.ContentControl.parentTable
  summary: >-
    Возвращает таблицу, содержащую элемент управления содержимым. Если он находится не в таблице, возвращает ошибку. Только для чтения.


    \[[Набор API-Интерфейсов: WordApi 1.3](/javascript/office/requirement-sets/word-api-requirement-sets)\]
  name: parentTable
  fullName: word.Word.ContentControl.parentTable
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly parentTable: Word.Table;'
    return:
      type:
      - Word.Table
- uid: word.Word.ContentControl.parentTableCell
  summary: >-
    Возвращает ячейку таблицы, содержащую элемент управления содержимым. Если он находится не в ячейке таблицы, возвращает ошибку. Только для чтения.


    \[[Набор API-Интерфейсов: WordApi 1.3](/javascript/office/requirement-sets/word-api-requirement-sets)\]
  name: parentTableCell
  fullName: word.Word.ContentControl.parentTableCell
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly parentTableCell: Word.TableCell;'
    return:
      type:
      - Word.TableCell
- uid: word.Word.ContentControl.parentTableCellOrNullObject
  summary: >-
    Возвращает ячейку таблицы, содержащую элемент управления содержимым. Если он находится не в ячейке таблицы, возвращается пустой объект. Только для чтения.


    \[[Набор API-Интерфейсов: WordApi 1.3](/javascript/office/requirement-sets/word-api-requirement-sets)\]
  name: parentTableCellOrNullObject
  fullName: word.Word.ContentControl.parentTableCellOrNullObject
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly parentTableCellOrNullObject: Word.TableCell;'
    return:
      type:
      - Word.TableCell
- uid: word.Word.ContentControl.parentTableOrNullObject
  summary: >-
    Возвращает таблицу, содержащую элемент управления содержимым. Если он находится не в таблице, возвращается пустой объект. Только для чтения.


    \[[Набор API-Интерфейсов: WordApi 1.3](/javascript/office/requirement-sets/word-api-requirement-sets)\]
  name: parentTableOrNullObject
  fullName: word.Word.ContentControl.parentTableOrNullObject
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly parentTableOrNullObject: Word.Table;'
    return:
      type:
      - Word.Table
- uid: word.Word.ContentControl.placeholderText
  summary: >-
    Возвращает или задает замещающий текст элемента управления контентом. Если элемент управления содержимым пуст, отображается затемненный текст.


    \[[Набор API-Интерфейсов: WordApi 1.1](/javascript/office/requirement-sets/word-api-requirement-sets)\]
  name: placeholderText
  fullName: word.Word.ContentControl.placeholderText
  langs:
  - typeScript
  type: property
  syntax:
    content: 'placeholderText: string;'
    return:
      type:
      - string
- uid: word.Word.ContentControl.removeWhenEdited
  summary: >-
    Возвращает или задает значение, указывающее, удаляется ли элемент управления контентом после изменения. Является взаимоисключающим со свойством cannotDelete.


    \[[Набор API-Интерфейсов: WordApi 1.1](/javascript/office/requirement-sets/word-api-requirement-sets)\]
  name: removeWhenEdited
  fullName: word.Word.ContentControl.removeWhenEdited
  langs:
  - typeScript
  type: property
  syntax:
    content: 'removeWhenEdited: boolean;'
    return:
      type:
      - boolean
- uid: word.Word.ContentControl.search
  summary: >-
    Выполняет поиск с указанным SearchOptions в области объекта элемента управления контентом. Результат поиска — коллекция объектов range.


    \[[Набор API-Интерфейсов: WordApi 1.1](/javascript/office/requirement-sets/word-api-requirement-sets)\]
  name: search(searchText, searchOptions)
  fullName: word.Word.ContentControl.search
  langs:
  - typeScript
  type: method
  syntax:
    content: >-
      search(searchText: string, searchOptions?: Word.SearchOptions | {
                  ignorePunct?: boolean;
                  ignoreSpace?: boolean;
                  matchCase?: boolean;
                  matchPrefix?: boolean;
                  matchSuffix?: boolean;
                  matchWholeWord?: boolean;
                  matchWildcards?: boolean;
              }): Word.RangeCollection;
    return:
      type:
      - word.Word.RangeCollection
      description: "\n#### <a name=\"examples\"></a>Примеры\n\n```javascript\n// Run a batch operation against the Word object model.\nWord.run(function (context) {\n    \n    // Create a proxy object for the content controls collection.\n    var contentControls = context.document.contentControls;\n    \n    // Queue a command to load the id property for all of the content controls. \n    context.load(contentControls, 'id');\n     \n    // Synchronize the document state by executing the queued commands, \n    // and return a promise to indicate task completion.\n    return context.sync().then(function () {\n        if (contentControls.items.length === 0) {\n            console.log('No content control found.');\n        }\n        else {\n            // Queue a command to select the first content control.\n            contentControls.items[0].select();\n        \n            // Synchronize the document state by executing the queued commands, \n            // and return a promise to indicate task completion.\n            return context.sync()\n                .then(function () {\n                    console.log('Selected the first content control.');\n            });\n        }\n    });  \n})\n.catch(function (error) {\n    console.log('Error: ' + JSON.stringify(error));\n    if (error instanceof OfficeExtension.Error) {\n        console.log('Debug info: ' + JSON.stringify(error.debugInfo));\n    }\n});\n```"
    parameters:
    - id: searchText
      description: Обязательный параметр. Текст для поиска.
      type:
      - string
    - id: searchOptions
      description: Необязательный параметр. Параметры поиска.
      type:
      - >-
        Word.SearchOptions | {
                    ignorePunct?: boolean;
                    ignoreSpace?: boolean;
                    matchCase?: boolean;
                    matchPrefix?: boolean;
                    matchSuffix?: boolean;
                    matchWholeWord?: boolean;
                    matchWildcards?: boolean;
                }
- uid: word.Word.ContentControl.select
  summary: >-
    Выбирает элемент управления содержимым. При этом Word переходит к выделенному фрагменту.


    \[[Набор API-Интерфейсов: WordApi 1.1](/javascript/office/requirement-sets/word-api-requirement-sets)\]
  name: select(selectionMode)
  fullName: word.Word.ContentControl.select
  langs:
  - typeScript
  type: method
  syntax:
    content: 'select(selectionMode?: Word.SelectionMode): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: selectionMode
      description: 'Необязательный параметр. Возможные режимы выбора: Select, Start и End. Значение по умолчанию — Select.'
      type:
      - Word.SelectionMode
- uid: word.Word.ContentControl.split
  summary: >-
    Разделяет элемент управления содержимым на дочерние диапазоны с помощью разделителей.


    \[[Набор API-Интерфейсов: WordApi 1.3](/javascript/office/requirement-sets/word-api-requirement-sets)\]
  name: split(delimiters, multiParagraphs, trimDelimiters, trimSpacing)
  fullName: word.Word.ContentControl.split
  langs:
  - typeScript
  type: method
  syntax:
    content: 'split(delimiters: string[], multiParagraphs?: boolean, trimDelimiters?: boolean, trimSpacing?: boolean): Word.RangeCollection;'
    return:
      type:
      - word.Word.RangeCollection
      description: ''
    parameters:
    - id: delimiters
      description: Обязательный. Разделители в виде массива строк.
      type:
      - string[]
    - id: multiParagraphs
      description: Необязательный параметр. Указывает, будет ли диапазон возвращаемый дочерний могут охватывать несколько абзацев. Значение по умолчанию — значение false, который означает, что границы абзаца также используются в качестве разделителей.
      type:
      - boolean
    - id: trimDelimiters
      description: Необязательный параметр. Указывает, следует ли удалить разделители из диапазонов в коллекции диапазона. Значение по умолчанию — значение false, который означает, что разделители включаются в диапазонах, возвращаемых в коллекции диапазона.
      type:
      - boolean
    - id: trimSpacing
      description: Необязательный параметр. Указывает, следует ли удалить знаки интервалы (пробелы, вкладок, столбцов и end абзаца) из начала и окончания диапазонов, возвращаемых в коллекции диапазона. Значение по умолчанию — false означает, символы интервалов в начало и конец диапазонов включены в диапазоне семейства.
      type:
      - boolean
- uid: word.Word.ContentControl.style
  summary: >-
    Возвращает или задает стиль имени для элемента управления содержимым. Используйте это свойство для пользовательских стилей и локализованных имен стилей. Чтобы использовать встроенные стили, поддерживающие несколько языковых стандартов, применяйте свойство styleBuiltIn.


    \[[Набор API-Интерфейсов: WordApi 1.1](/javascript/office/requirement-sets/word-api-requirement-sets)\]
  name: style
  fullName: word.Word.ContentControl.style
  langs:
  - typeScript
  type: property
  syntax:
    content: 'style: string;'
    return:
      type:
      - string
- uid: word.Word.ContentControl.styleBuiltIn
  summary: >-
    Возвращает или задает имя встроенного стиля для элемента управления содержимым. Используйте это свойство для встроенных стилей, поддерживающих несколько языковых стандартов. Чтобы использовать пользовательские стили или локализованные имена стилей, применяйте свойство style.


    \[[Набор API-Интерфейсов: WordApi 1.3](/javascript/office/requirement-sets/word-api-requirement-sets)\]
  name: styleBuiltIn
  fullName: word.Word.ContentControl.styleBuiltIn
  langs:
  - typeScript
  type: property
  syntax:
    content: 'styleBuiltIn: Word.Style | "Other" | "Normal" | "Heading1" | "Heading2" | "Heading3" | "Heading4" | "Heading5" | "Heading6" | "Heading7" | "Heading8" | "Heading9" | "Toc1" | "Toc2" | "Toc3" | "Toc4" | "Toc5" | "Toc6" | "Toc7" | "Toc8" | "Toc9" | "FootnoteText" | "Header" | "Footer" | "Caption" | "FootnoteReference" | "EndnoteReference" | "EndnoteText" | "Title" | "Subtitle" | "Hyperlink" | "Strong" | "Emphasis" | "NoSpacing" | "ListParagraph" | "Quote" | "IntenseQuote" | "SubtleEmphasis" | "IntenseEmphasis" | "SubtleReference" | "IntenseReference" | "BookTitle" | "Bibliography" | "TocHeading" | "TableGrid" | "PlainTable1" | "PlainTable2" | "PlainTable3" | "PlainTable4" | "PlainTable5" | "TableGridLight" | "GridTable1Light" | "GridTable1Light_Accent1" | "GridTable1Light_Accent2" | "GridTable1Light_Accent3" | "GridTable1Light_Accent4" | "GridTable1Light_Accent5" | "GridTable1Light_Accent6" | "GridTable2" | "GridTable2_Accent1" | "GridTable2_Accent2" | "GridTable2_Accent3" | "GridTable2_Accent4" | "GridTable2_Accent5" | "GridTable2_Accent6" | "GridTable3" | "GridTable3_Accent1" | "GridTable3_Accent2" | "GridTable3_Accent3" | "GridTable3_Accent4" | "GridTable3_Accent5" | "GridTable3_Accent6" | "GridTable4" | "GridTable4_Accent1" | "GridTable4_Accent2" | "GridTable4_Accent3" | "GridTable4_Accent4" | "GridTable4_Accent5" | "GridTable4_Accent6" | "GridTable5Dark" | "GridTable5Dark_Accent1" | "GridTable5Dark_Accent2" | "GridTable5Dark_Accent3" | "GridTable5Dark_Accent4" | "GridTable5Dark_Accent5" | "GridTable5Dark_Accent6" | "GridTable6Colorful" | "GridTable6Colorful_Accent1" | "GridTable6Colorful_Accent2" | "GridTable6Colorful_Accent3" | "GridTable6Colorful_Accent4" | "GridTable6Colorful_Accent5" | "GridTable6Colorful_Accent6" | "GridTable7Colorful" | "GridTable7Colorful_Accent1" | "GridTable7Colorful_Accent2" | "GridTable7Colorful_Accent3" | "GridTable7Colorful_Accent4" | "GridTable7Colorful_Accent5" | "GridTable7Colorful_Accent6" | "ListTable1Light" | "ListTable1Light_Accent1" | "ListTable1Light_Accent2" | "ListTable1Light_Accent3" | "ListTable1Light_Accent4" | "ListTable1Light_Accent5" | "ListTable1Light_Accent6" | "ListTable2" | "ListTable2_Accent1" | "ListTable2_Accent2" | "ListTable2_Accent3" | "ListTable2_Accent4" | "ListTable2_Accent5" | "ListTable2_Accent6" | "ListTable3" | "ListTable3_Accent1" | "ListTable3_Accent2" | "ListTable3_Accent3" | "ListTable3_Accent4" | "ListTable3_Accent5" | "ListTable3_Accent6" | "ListTable4" | "ListTable4_Accent1" | "ListTable4_Accent2" | "ListTable4_Accent3" | "ListTable4_Accent4" | "ListTable4_Accent5" | "ListTable4_Accent6" | "ListTable5Dark" | "ListTable5Dark_Accent1" | "ListTable5Dark_Accent2" | "ListTable5Dark_Accent3" | "ListTable5Dark_Accent4" | "ListTable5Dark_Accent5" | "ListTable5Dark_Accent6" | "ListTable6Colorful" | "ListTable6Colorful_Accent1" | "ListTable6Colorful_Accent2" | "ListTable6Colorful_Accent3" | "ListTable6Colorful_Accent4" | "ListTable6Colorful_Accent5" | "ListTable6Colorful_Accent6" | "ListTable7Colorful" | "ListTable7Colorful_Accent1" | "ListTable7Colorful_Accent2" | "ListTable7Colorful_Accent3" | "ListTable7Colorful_Accent4" | "ListTable7Colorful_Accent5" | "ListTable7Colorful_Accent6";'
    return:
      type:
      - Word.Style | "Other" | "Normal" | "Heading1" | "Heading2" | "Heading3" | "Heading4" | "Heading5" | "Heading6" | "Heading7" | "Heading8" | "Heading9" | "Toc1" | "Toc2" | "Toc3" | "Toc4" | "Toc5" | "Toc6" | "Toc7" | "Toc8" | "Toc9" | "FootnoteText" | "Header" | "Footer" | "Caption" | "FootnoteReference" | "EndnoteReference" | "EndnoteText" | "Title" | "Subtitle" | "Hyperlink" | "Strong" | "Emphasis" | "NoSpacing" | "ListParagraph" | "Quote" | "IntenseQuote" | "SubtleEmphasis" | "IntenseEmphasis" | "SubtleReference" | "IntenseReference" | "BookTitle" | "Bibliography" | "TocHeading" | "TableGrid" | "PlainTable1" | "PlainTable2" | "PlainTable3" | "PlainTable4" | "PlainTable5" | "TableGridLight" | "GridTable1Light" | "GridTable1Light_Accent1" | "GridTable1Light_Accent2" | "GridTable1Light_Accent3" | "GridTable1Light_Accent4" | "GridTable1Light_Accent5" | "GridTable1Light_Accent6" | "GridTable2" | "GridTable2_Accent1" | "GridTable2_Accent2" | "GridTable2_Accent3" | "GridTable2_Accent4" | "GridTable2_Accent5" | "GridTable2_Accent6" | "GridTable3" | "GridTable3_Accent1" | "GridTable3_Accent2" | "GridTable3_Accent3" | "GridTable3_Accent4" | "GridTable3_Accent5" | "GridTable3_Accent6" | "GridTable4" | "GridTable4_Accent1" | "GridTable4_Accent2" | "GridTable4_Accent3" | "GridTable4_Accent4" | "GridTable4_Accent5" | "GridTable4_Accent6" | "GridTable5Dark" | "GridTable5Dark_Accent1" | "GridTable5Dark_Accent2" | "GridTable5Dark_Accent3" | "GridTable5Dark_Accent4" | "GridTable5Dark_Accent5" | "GridTable5Dark_Accent6" | "GridTable6Colorful" | "GridTable6Colorful_Accent1" | "GridTable6Colorful_Accent2" | "GridTable6Colorful_Accent3" | "GridTable6Colorful_Accent4" | "GridTable6Colorful_Accent5" | "GridTable6Colorful_Accent6" | "GridTable7Colorful" | "GridTable7Colorful_Accent1" | "GridTable7Colorful_Accent2" | "GridTable7Colorful_Accent3" | "GridTable7Colorful_Accent4" | "GridTable7Colorful_Accent5" | "GridTable7Colorful_Accent6" | "ListTable1Light" | "ListTable1Light_Accent1" | "ListTable1Light_Accent2" | "ListTable1Light_Accent3" | "ListTable1Light_Accent4" | "ListTable1Light_Accent5" | "ListTable1Light_Accent6" | "ListTable2" | "ListTable2_Accent1" | "ListTable2_Accent2" | "ListTable2_Accent3" | "ListTable2_Accent4" | "ListTable2_Accent5" | "ListTable2_Accent6" | "ListTable3" | "ListTable3_Accent1" | "ListTable3_Accent2" | "ListTable3_Accent3" | "ListTable3_Accent4" | "ListTable3_Accent5" | "ListTable3_Accent6" | "ListTable4" | "ListTable4_Accent1" | "ListTable4_Accent2" | "ListTable4_Accent3" | "ListTable4_Accent4" | "ListTable4_Accent5" | "ListTable4_Accent6" | "ListTable5Dark" | "ListTable5Dark_Accent1" | "ListTable5Dark_Accent2" | "ListTable5Dark_Accent3" | "ListTable5Dark_Accent4" | "ListTable5Dark_Accent5" | "ListTable5Dark_Accent6" | "ListTable6Colorful" | "ListTable6Colorful_Accent1" | "ListTable6Colorful_Accent2" | "ListTable6Colorful_Accent3" | "ListTable6Colorful_Accent4" | "ListTable6Colorful_Accent5" | "ListTable6Colorful_Accent6" | "ListTable7Colorful" | "ListTable7Colorful_Accent1" | "ListTable7Colorful_Accent2" | "ListTable7Colorful_Accent3" | "ListTable7Colorful_Accent4" | "ListTable7Colorful_Accent5" | "ListTable7Colorful_Accent6"
- uid: word.Word.ContentControl.subtype
  summary: >-
    Возвращает подтип элемента управления содержимым. Поддерживаемые подтипы: RichTextInline, RichTextParagraphs, RichTextTableCell, RichTextTableRow и RichTextTable для элементов управления форматированным текстом. Только для чтения.


    \[[Набор API-Интерфейсов: WordApi 1.3](/javascript/office/requirement-sets/word-api-requirement-sets)\]
  name: subtype
  fullName: word.Word.ContentControl.subtype
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly subtype: Word.ContentControlType | "Unknown" | "RichTextInline" | "RichTextParagraphs" | "RichTextTableCell" | "RichTextTableRow" | "RichTextTable" | "PlainTextInline" | "PlainTextParagraph" | "Picture" | "BuildingBlockGallery" | "CheckBox" | "ComboBox" | "DropDownList" | "DatePicker" | "RepeatingSection" | "RichText" | "PlainText";'
    return:
      type:
      - Word.ContentControlType | "Unknown" | "RichTextInline" | "RichTextParagraphs" | "RichTextTableCell" | "RichTextTableRow" | "RichTextTable" | "PlainTextInline" | "PlainTextParagraph" | "Picture" | "BuildingBlockGallery" | "CheckBox" | "ComboBox" | "DropDownList" | "DatePicker" | "RepeatingSection" | "RichText" | "PlainText"
- uid: word.Word.ContentControl.tables
  summary: >-
    Возвращает коллекцию объектов таблиц в элементе управления содержимым. Только для чтения.


    \[[Набор API-Интерфейсов: WordApi 1.3](/javascript/office/requirement-sets/word-api-requirement-sets)\]
  name: tables
  fullName: word.Word.ContentControl.tables
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly tables: Word.TableCollection;'
    return:
      type:
      - Word.TableCollection
- uid: word.Word.ContentControl.tag
  summary: >-
    Возвращает или задает тег для определения элемента управления содержимым.


    \[[Набор API-Интерфейсов: WordApi 1.1](/javascript/office/requirement-sets/word-api-requirement-sets)\]
  name: tag
  fullName: word.Word.ContentControl.tag
  langs:
  - typeScript
  type: property
  syntax:
    content: 'tag: string;'
    return:
      type:
      - string
      description: "\n#### <a name=\"examples\"></a>Примеры\n\n```typescript\n// Traverses each paragraph of the document and wraps a content control on each with either a even or odd tags\nawait Word.run(async (context) => {\n    let paragraphs = context.document.body.paragraphs;\n    paragraphs.load(\"$none\"); //Don't need any properties, we'll just wrap each paragraph with a content control\n\n    await context.sync();\n\n    for (let i = 0; i < paragraphs.items.length; i++) {\n        let contentControl = paragraphs.items[i].insertContentControl();\n        // For even we tag \"even\"\n        if (i % 2 === 0) {\n            contentControl.tag = \"even\";\n        }\n\n        else {\n            contentControl.tag = \"odd\";\n        }\n    }\n    console.log(\"Content controls inserted: \" + paragraphs.items.length)\n\n    await context.sync();\n});\n\n```"
- uid: word.Word.ContentControl.text
  summary: >-
    Возвращает текст элемента управления контентом. Только для чтения.


    \[[Набор API-Интерфейсов: WordApi 1.1](/javascript/office/requirement-sets/word-api-requirement-sets)\]
  name: text
  fullName: word.Word.ContentControl.text
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly text: string;'
    return:
      type:
      - string
- uid: word.Word.ContentControl.title
  summary: >-
    Возвращает или задает заголовок для элемента управления содержимым.


    \[[Набор API-Интерфейсов: WordApi 1.1](/javascript/office/requirement-sets/word-api-requirement-sets)\]
  name: title
  fullName: word.Word.ContentControl.title
  langs:
  - typeScript
  type: property
  syntax:
    content: 'title: string;'
    return:
      type:
      - string
- uid: word.Word.ContentControl.toJSON
  name: toJSON()
  fullName: word.Word.ContentControl.toJSON
  langs:
  - typeScript
  type: method
  syntax:
    content: 'toJSON(): Word.Interfaces.ContentControlData;'
    return:
      type:
      - word.Word.Interfaces.ContentControlData
      description: ''
- uid: word.Word.ContentControl.track
  summary: Отслеживание объектов для автоматической на основании соседних изменения в документе. Этот вызов это сокращение для context.trackedObjects.add(thisObject). Если вы используете этот объект «.sync» вызовах и за пределами последовательного выполнение пакета «.run» и get «InvalidObjectPath» ошибка при установке свойства или вызова метода на объекте, необходимые для добавления объекта отслеживаемого объекта Сначала создается объект семейства сайтов.
  name: track()
  fullName: word.Word.ContentControl.track
  langs:
  - typeScript
  type: method
  syntax:
    content: 'track(): Word.ContentControl;'
    return:
      type:
      - word.Word.ContentControl
      description: ''
- uid: word.Word.ContentControl.type
  summary: >-
    Получает тип элемента управления содержимым. На данный момент поддерживаются только элементы управления содержимым в формате RTF. Только для чтения.


    \[[Набор API-Интерфейсов: WordApi 1.1](/javascript/office/requirement-sets/word-api-requirement-sets)\]
  name: type
  fullName: word.Word.ContentControl.type
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly type: Word.ContentControlType | "Unknown" | "RichTextInline" | "RichTextParagraphs" | "RichTextTableCell" | "RichTextTableRow" | "RichTextTable" | "PlainTextInline" | "PlainTextParagraph" | "Picture" | "BuildingBlockGallery" | "CheckBox" | "ComboBox" | "DropDownList" | "DatePicker" | "RepeatingSection" | "RichText" | "PlainText";'
    return:
      type:
      - Word.ContentControlType | "Unknown" | "RichTextInline" | "RichTextParagraphs" | "RichTextTableCell" | "RichTextTableRow" | "RichTextTable" | "PlainTextInline" | "PlainTextParagraph" | "Picture" | "BuildingBlockGallery" | "CheckBox" | "ComboBox" | "DropDownList" | "DatePicker" | "RepeatingSection" | "RichText" | "PlainText"
- uid: word.Word.ContentControl.untrack
  summary: Выпуск памяти, связанное с объектом, если ранее отслеживаются. Этот вызов — это сокращение для context.trackedObjects.remove(thisObject). Создавая множество отслеживаемых объектов замедляет ведущего приложения, так помните освободить место на любые объекты, добавлении, после завершения их использования. Необходимо будет вызывать «context.sync()» до выпуска памяти вступает в силу.
  name: untrack()
  fullName: word.Word.ContentControl.untrack
  langs:
  - typeScript
  type: method
  syntax:
    content: 'untrack(): Word.ContentControl;'
    return:
      type:
      - word.Word.ContentControl
      description: ''
