### YamlMime:UniversalReference
ms.openlocfilehash: d6991e18a2ada0e048c160aafcaf943a709a7374
ms.sourcegitcommit: c1149d24b38f20daf9ce690cd0761ec1ceb7333d
ms.translationtype: MT
ms.contentlocale: ru-RU
ms.lasthandoff: 10/17/2018
ms.locfileid: "25584542"
items:
- uid: word.Word.Document
  summary: >-
    Объект Document — это объект верхнего уровня. Объект Document содержит один или несколько разделов, элементы управления контентом и основной текст с содержанием документа.


    \[[Набор API-Интерфейсов: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  name: Word.Document
  fullName: word.Word.Document
  langs:
  - typeScript
  type: class
  extends:
  - OfficeExtension.ClientObject
  package: word
  children:
  - word.Word.Document.body
  - word.Word.Document.contentControls
  - word.Word.Document.getSelection
  - word.Word.Document.load
  - word.Word.Document.properties
  - word.Word.Document.save
  - word.Word.Document.saved
  - word.Word.Document.sections
  - word.Word.Document.toJSON
  - word.Word.Document.track
  - word.Word.Document.untrack
- uid: word.Word.Document.body
  summary: >-
    Возвращает объект body документа. Объект body — это текст, не содержащий верхних и нижних колонтитулов, сносок, текстовых полей и т. д. Только для чтения.


    \[[Набор API-Интерфейсов: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  name: body
  fullName: word.Word.Document.body
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly body: Word.Body;'
    return:
      type:
      - Word.Body
- uid: word.Word.Document.contentControls
  summary: >-
    Получает коллекцию объектов элемента управления содержимым в документе. Это включает в себя элементы управления содержимым в основной части документа, заголовков, нижних колонтитулов, текстовые поля, и т.д... Только для чтения.


    \[[Набор API-Интерфейсов: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  name: contentControls
  fullName: word.Word.Document.contentControls
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly contentControls: Word.ContentControlCollection;'
    return:
      type:
      - word.Word.ContentControlCollection
- uid: word.Word.Document.getSelection
  summary: >-
    Возвращает текущий выбранный фрагмент документа. Получение нескольких выбранных фрагментов не поддерживается.


    \[[Набор API-Интерфейсов: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  name: getSelection()
  fullName: word.Word.Document.getSelection
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getSelection(): Word.Range;'
    return:
      type:
      - Word.Range
      description: "\n#### <a name=\"examples\"></a>Примеры\n\n```javascript\n// Run a batch operation against the Word object model.\nWord.run(function (context) {\n    \n    var textSample = 'This is an example of the insert text method. This is a method ' + \n        'which allows users to insert text into a selection. It can insert text into a ' +\n        'relative location or it can overwrite the current selection. Since the ' +\n        'getSelection method returns a range object, look up the range object documentation ' +\n        'for everything you can do with a selection.';\n    \n    // Create a range proxy object for the current selection.\n    var range = context.document.getSelection();\n    \n    // Queue a commmand to insert text at the end of the selection.\n    range.insertText(textSample, Word.InsertLocation.end);\n    \n    // Synchronize the document state by executing the queued commands, \n    // and return a promise to indicate task completion.\n    return context.sync().then(function () {\n        console.log('Inserted the text at the end of the selection.');\n    });  \n})\n.catch(function (error) {\n    console.log('Error: ' + JSON.stringify(error));\n    if (error instanceof OfficeExtension.Error) {\n        console.log('Debug info: ' + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- uid: word.Word.Document.load
  summary: Очереди команды для загрузки указанного свойства объекта. Перед чтением свойства необходимо вызвать «context.sync()».
  remarks: "В дополнение к подписи этот метод имеет следующие цифровые подписи.\n\n`load(option?: { select?: string; expand?: string; }): Word.Document`-Option.select — это разделенный запятыми строка, указывающая свойства для загрузки, куда options.expand — это разделенный запятыми строка, указывающая свойства навигации для загрузки.\n\n`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Word.Document`-Доступно только на коллекцию типов. Это похоже на предыдущую. Option.Top указывает максимальное число элементов коллекции, которые можно включить в результат. Option.Skip указывает количество элементов, которые пропускаются и не включенный в результате. Если option.top указан, результирующий набор будет запущен процесс после пропускает указанное число элементов.\n#### <a name=\"examples\"></a>Примеры\n\n```javascript\n// Run a batch operation against the Word object model.\nWord.run(function (context) {\n    \n    // Create a proxy object for the document.\n    var thisDocument = context.document;\n    \n    // Queue a command to load content control properties.\n    context.load(thisDocument, 'contentControls/id, contentControls/text, contentControls/tag');\n    \n    // Synchronize the document state by executing the queued commands, \n    // and return a promise to indicate task completion.\n    return context.sync().then(function () {\n        if (thisDocument.contentControls.items.length !== 0) {\n            for (var i = 0; i < thisDocument.contentControls.items.length; i++) {\n                console.log(thisDocument.contentControls.items[i].id);\n                console.log(thisDocument.contentControls.items[i].text);\n                console.log(thisDocument.contentControls.items[i].tag);\n            }\n        } else {\n            console.log('No content controls in this document.');\n        }\n    });  \n})\n.catch(function (error) {\n    console.log('Error: ' + JSON.stringify(error));\n    if (error instanceof OfficeExtension.Error) {\n        console.log('Debug info: ' + JSON.stringify(error.debugInfo));\n    }\n});\n```"
  name: load(option)
  fullName: word.Word.Document.load
  langs:
  - typeScript
  type: method
  syntax:
    content: 'load(option?: string | string[]): Word.Document;'
    return:
      type:
      - Word.Document
      description: ''
    parameters:
    - id: option
      description: Строка, разделенных запятыми или массив строк, задающих свойства для загрузки.
      type:
      - string | string[]
- uid: word.Word.Document.properties
  summary: >-
    Получает свойства документа. Только для чтения.


    \[[Набор API-Интерфейсов: WordApi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  name: properties
  fullName: word.Word.Document.properties
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly properties: Word.DocumentProperties;'
    return:
      type:
      - Word.DocumentProperties
      description: "\n#### <a name=\"examples\"></a>Примеры\n\n```typescript\nawait Word.run(async (context) => {\n    let builtInProperties = context.document.properties;\n    builtInProperties.load(\"*\"); // Let's get all!\n\n    await context.sync();\n    console.log(JSON.stringify(builtInProperties, null, 4));\n});\n```"
- uid: word.Word.Document.save
  summary: >-
    Сохраняет документ. При этом используется соглашение об именовании файлов Word по умолчанию, если документ ранее не сохранялся.


    \[[Набор API-Интерфейсов: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  name: save()
  fullName: word.Word.Document.save
  langs:
  - typeScript
  type: method
  syntax:
    content: 'save(): void;'
    return:
      type:
      - void
      description: "\n#### <a name=\"examples\"></a>Примеры\n\n```javascript\n// Run a batch operation against the Word object model.\nWord.run(function (context) {\n    \n    // Create a proxy object for the document.\n    var thisDocument = context.document;\n\n    // Queue a commmand to load the document save state (on the saved property).\n    context.load(thisDocument, 'saved');    \n    \n    // Synchronize the document state by executing the queued commands, \n    // and return a promise to indicate task completion.\n    return context.sync().then(function () {\n        \n        if (thisDocument.saved === false) {\n            // Queue a command to save this document.\n            thisDocument.save();\n            \n            // Synchronize the document state by executing the queued commands, \n            // and return a promise to indicate task completion.\n            return context.sync().then(function () {\n                console.log('Saved the document');\n            });\n        } else {\n            console.log('The document has not changed since the last save.');\n        }\n    });  \n})\n.catch(function (error) {\n    console.log(\"Error: \" + JSON.stringify(error));\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- uid: word.Word.Document.saved
  summary: >-
    Указывает, сохранены ли изменения, внесенные в документ. Значение true указывает на то, что с момента последнего сохранения в документ не вносились изменения. Только для чтения.


    \[[Набор API-Интерфейсов: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  name: saved
  fullName: word.Word.Document.saved
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly saved: boolean;'
    return:
      type:
      - boolean
- uid: word.Word.Document.sections
  summary: >-
    Получает коллекцию объектов section в документе. Только для чтения.


    \[[Набор API-Интерфейсов: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  name: sections
  fullName: word.Word.Document.sections
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly sections: Word.SectionCollection;'
    return:
      type:
      - Word.SectionCollection
- uid: word.Word.Document.toJSON
  name: toJSON()
  fullName: word.Word.Document.toJSON
  langs:
  - typeScript
  type: method
  syntax:
    content: 'toJSON(): Word.Interfaces.DocumentData;'
    return:
      type:
      - Word.Interfaces.DocumentData
      description: ''
- uid: word.Word.Document.track
  summary: Отслеживание объектов для автоматической на основании соседних изменения в документе. Этот вызов это сокращение для context.trackedObjects.add(thisObject). Если вы используете этот объект «.sync» вызовах и за пределами последовательного выполнение пакета «.run» и get «InvalidObjectPath» ошибка при установке свойства или вызова метода на объекте, необходимые для добавления объекта отслеживаемого объекта Сначала создается объект семейства сайтов.
  name: track()
  fullName: word.Word.Document.track
  langs:
  - typeScript
  type: method
  syntax:
    content: 'track(): Word.Document;'
    return:
      type:
      - Word.Document
      description: ''
- uid: word.Word.Document.untrack
  summary: Выпуск памяти, связанное с объектом, если ранее отслеживаются. Этот вызов — это сокращение для context.trackedObjects.remove(thisObject). Создавая множество отслеживаемых объектов замедляет ведущего приложения, так помните освободить место на любые объекты, добавлении, после завершения их использования. Необходимо будет вызывать «context.sync()» до выпуска памяти вступает в силу.
  name: untrack()
  fullName: word.Word.Document.untrack
  langs:
  - typeScript
  type: method
  syntax:
    content: 'untrack(): Word.Document;'
    return:
      type:
      - Word.Document
      description: ''
