### YamlMime:UniversalReference
ms.openlocfilehash: 28902f757ec2534ffb391233d808dddc580a0dd3
ms.sourcegitcommit: beffe9455dace422e85b92f0105c54ff7b594cbf
ms.translationtype: MT
ms.contentlocale: ru-RU
ms.lasthandoff: 09/20/2018
ms.locfileid: "24050674"
items:
- uid: word.Word.ContentControlCollection
  summary: >-
    Содержит коллекцию объектов [Word.ContentControl](xref:word.Word.ContentControl) . Элементы управления содержимым ограниченного и потенциально с меткой областей в документе, которые используются в качестве контейнеров для определенных типов содержимого. Отдельные элементы управления содержимым может содержать содержимое, такие как изображения, таблицы или абзацы форматированного текста. В настоящее время поддерживаются только форматированного текста элементов управления контентом.


    \[[Набор API-Интерфейсов: WordApi 1.1](/javascript/office/requirement-sets/word-api-requirement-sets)\]
  name: Word.ContentControlCollection
  fullName: word.Word.ContentControlCollection
  langs:
  - typeScript
  type: class
  extends:
  - OfficeExtension.ClientObject
  package: word
  children:
  - word.Word.ContentControlCollection.getById
  - word.Word.ContentControlCollection.getByIdOrNullObject
  - word.Word.ContentControlCollection.getByTag
  - word.Word.ContentControlCollection.getByTitle
  - word.Word.ContentControlCollection.getByTypes
  - word.Word.ContentControlCollection.getFirst
  - word.Word.ContentControlCollection.getFirstOrNullObject
  - word.Word.ContentControlCollection.getItem
  - word.Word.ContentControlCollection.items
  - word.Word.ContentControlCollection.load
  - word.Word.ContentControlCollection.toJSON
  - word.Word.ContentControlCollection.track
  - word.Word.ContentControlCollection.untrack
- uid: word.Word.ContentControlCollection.getById
  summary: >-
    Возвращает элемент управления содержимым по его идентификатору. Выдает ошибку, если в этой коллекции нет элемента управления контентом с таким идентификатором.


    \[[Набор API-Интерфейсов: WordApi 1.1](/javascript/office/requirement-sets/word-api-requirement-sets)\]
  name: getById(id)
  fullName: word.Word.ContentControlCollection.getById
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getById(id: number): Word.ContentControl;'
    return:
      type:
      - word.Word.ContentControl
      description: "\n#### <a name=\"examples\"></a>Примеры\n\n```javascript\n// Run a batch operation against the Word object model.\nWord.run(function (context) {\n\n    // Create a proxy object for the content control that contains a specific id.\n    var contentControl = context.document.contentControls.getById(30086310);\n\n    // Queue a command to load the text property for a content control.\n    context.load(contentControl, 'text');\n\n    // Synchronize the document state by executing the queued commands,\n    // and return a promise to indicate task completion.\n    return context.sync().then(function () {\n        console.log('The content control with that Id has been found in this document.');\n    });\n})\n.catch(function (error) {\n    console.log('Error: ' + JSON.stringify(error));\n    if (error instanceof OfficeExtension.Error) {\n        console.log('Debug info: ' + JSON.stringify(error.debugInfo));\n    }\n});\n```\n```javascript\n// Run a batch operation against the Word object model.\nWord.run(function (context) {\n\n    // Create a proxy object for the content control that contains a specific id.\n    var contentControl = context.document.contentControls.getByIdOrNullObject(30086310);\n\n    // Queue a command to load the text property for a content control.\n    context.load(contentControl, 'text');\n\n    // Synchronize the document state by executing the queued commands,\n    // and return a promise to indicate task completion.\n    return context.sync().then(function () {\n        if (contentControl.isNullObject) {\n            console.log('There is no content control with that ID.')\n        } else {\n            console.log('The content control with that ID has been found in this document.');\n        }\n    });\n})\n.catch(function (error) {\n    console.log('Error: ' + JSON.stringify(error));\n    if (error instanceof OfficeExtension.Error) {\n        console.log('Debug info: ' + JSON.stringify(error.debugInfo));\n    }\n});\n```"
    parameters:
    - id: id
      description: Обязательный параметр. Идентификатор элемента управления содержимым.
      type:
      - number
- uid: word.Word.ContentControlCollection.getByIdOrNullObject
  summary: >-
    Возвращает элемент управления содержимым по его идентификатору. Возвращает объект null, если в этой коллекции нет элемента управления контентом с таким идентификатором.


    \[[Набор API-Интерфейсов: WordApi 1.3](/javascript/office/requirement-sets/word-api-requirement-sets)\]
  name: getByIdOrNullObject(id)
  fullName: word.Word.ContentControlCollection.getByIdOrNullObject
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getByIdOrNullObject(id: number): Word.ContentControl;'
    return:
      type:
      - word.Word.ContentControl
      description: "\n#### <a name=\"examples\"></a>Примеры\n\n```javascript\n// Run a batch operation against the Word object model.\nWord.run(function (context) {\n\n    // Create a proxy object for the content control that contains a specific id.\n    var contentControl = context.document.contentControls.getByIdOrNullObject(30086310);\n\n    // Queue a command to load the text property for a content control.\n    context.load(contentControl, 'text');\n\n    // Synchronize the document state by executing the queued commands,\n    // and return a promise to indicate task completion.\n    return context.sync().then(function () {\n        if (contentControl.isNullObject) {\n            console.log('There is no content control with that ID.')\n        } else {\n            console.log('The content control with that ID has been found in this document.');\n        }\n    });\n})\n.catch(function (error) {\n    console.log('Error: ' + JSON.stringify(error));\n    if (error instanceof OfficeExtension.Error) {\n        console.log('Debug info: ' + JSON.stringify(error.debugInfo));\n    }\n});\n```"
    parameters:
    - id: id
      description: Обязательный параметр. Идентификатор элемента управления содержимым.
      type:
      - number
- uid: word.Word.ContentControlCollection.getByTag
  summary: >-
    Возвращает элементы управления содержимым с указанным тегом.


    \[[Набор API-Интерфейсов: WordApi 1.1](/javascript/office/requirement-sets/word-api-requirement-sets)\]
  name: getByTag(tag)
  fullName: word.Word.ContentControlCollection.getByTag
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getByTag(tag: string): Word.ContentControlCollection;'
    return:
      type:
      - word.Word.ContentControlCollection
      description: "\n#### <a name=\"examples\"></a>Примеры\n\n```javascript\n// Run a batch operation against the Word object model.\nWord.run(function (context) {\n\n    // Create a proxy object for the content controls collection that contains a specific tag.\n    var contentControlsWithTag = context.document.contentControls.getByTag('Customer-Address');\n\n    // Queue a command to load the text property for all of content controls with a specific tag.\n    context.load(contentControlsWithTag, 'text');\n\n    // Synchronize the document state by executing the queued commands,\n    // and return a promise to indicate task completion.\n    return context.sync().then(function () {\n        if (contentControlsWithTag.items.length === 0) {\n            console.log(\"There isn't a content control with a tag of Customer-Address in this document.\");\n        } else {\n            console.log(\n                'The first content control with the tag of Customer-Address has this text: ' + \n                contentControlsWithTag.items[0].text);\n        }\n\n    });\n})\n.catch(function (error) {\n    console.log('Error: ' + JSON.stringify(error));\n    if (error instanceof OfficeExtension.Error) {\n        console.log('Debug info: ' + JSON.stringify(error.debugInfo));\n    }\n});\n\n// The Word-Add-in-DocumentAssembly sample has another example of using the getByTag method.\n// https://github.com/OfficeDev/Word-Add-in-DocumentAssembly\n```\n```typescript\nawait Word.run(async (context) => {\n    let contentControls = context.document.contentControls.getByTag(\"customer\");\n    contentControls.load(\"text\");\n\n    await context.sync();\n\n    for (let i = 0; i < contentControls.items.length; i++) {\n        contentControls.items[i].insertText(\"Fabrikam\", \"Replace\");\n    }\n\n    await context.sync();\n});\n```"
    parameters:
    - id: tag
      description: Обязательный параметр. Тег, установленный на элемент управления содержимым.
      type:
      - string
- uid: word.Word.ContentControlCollection.getByTitle
  summary: >-
    Возвращает элементы управления содержимым с указанным заголовком.


    \[[Набор API-Интерфейсов: WordApi 1.1](/javascript/office/requirement-sets/word-api-requirement-sets)\]
  name: getByTitle(title)
  fullName: word.Word.ContentControlCollection.getByTitle
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getByTitle(title: string): Word.ContentControlCollection;'
    return:
      type:
      - word.Word.ContentControlCollection
      description: "\n#### <a name=\"examples\"></a>Примеры\n\n```javascript\n// Run a batch operation against the Word object model.\nWord.run(function (context) {\n\n    // Create a proxy object for the content controls collection that contains a specific title.\n    var contentControlsWithTitle = context.document.contentControls.getByTitle('Enter Customer Address Here');\n\n    // Queue a command to load the text property for all of content controls with a specific title.\n    context.load(contentControlsWithTitle, 'text');\n\n    // Synchronize the document state by executing the queued commands,\n    // and return a promise to indicate task completion.\n    return context.sync().then(function () {\n        if (contentControlsWithTitle.items.length === 0) {\n            console.log(\n                \"There isn't a content control with a title of 'Enter Customer Address Here' in this document.\");\n        } else {\n            console.log(\n                \"The first content control with the title of 'Enter Customer Address Here' has this text: \" + \n                contentControlsWithTitle.items[0].text);\n        }\n\n    });\n})\n.catch(function (error) {\n    console.log('Error: ' + JSON.stringify(error));\n    if (error instanceof OfficeExtension.Error) {\n        console.log('Debug info: ' + JSON.stringify(error.debugInfo));\n    }\n});\n\n// The Word-Add-in-DocumentAssembly sample has another example of using the getByTitle method.\n// https://github.com/OfficeDev/Word-Add-in-DocumentAssembly\n```"
    parameters:
    - id: title
      description: Обязательный параметр. Заголовок элемента управления содержимым.
      type:
      - string
- uid: word.Word.ContentControlCollection.getByTypes
  summary: >-
    Получает элементы управления содержимым, которые имеют указанные типы и/или подтипы.


    \[[Набор API-Интерфейсов: WordApi 1.3](/javascript/office/requirement-sets/word-api-requirement-sets)\]
  name: getByTypes(types)
  fullName: word.Word.ContentControlCollection.getByTypes
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getByTypes(types: Word.ContentControlType[]): Word.ContentControlCollection;'
    return:
      type:
      - word.Word.ContentControlCollection
      description: ''
    parameters:
    - id: types
      description: Обязательный. Массив типов и/или подтипов content control.
      type:
      - Word.ContentControlType[]
- uid: word.Word.ContentControlCollection.getFirst
  summary: >-
    Возвращает первый элемент управления содержимым в коллекции. Выдает ошибку, если эта коллекция пуста.


    \[[Набор API-Интерфейсов: WordApi 1.3](/javascript/office/requirement-sets/word-api-requirement-sets)\]
  name: getFirst()
  fullName: word.Word.ContentControlCollection.getFirst
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getFirst(): Word.ContentControl;'
    return:
      type:
      - word.Word.ContentControl
      description: "\n#### <a name=\"examples\"></a>Примеры\n\n```javascript\n// Run a batch operation against the Word object model.\nWord.run(function (context) {\n\n    // Create a proxy object for the first content control in the document.\n    var contentControl = context.document.contentControls.getFirstOrNullObject();\n\n    // Queue a command to load the text property for a content control.\n    context.load(contentControl, 'text');\n\n    // Synchronize the document state by executing the queued commands,\n    // and return a promise to indicate task completion.\n    return context.sync().then(function () {\n        if (contentControl.isNullObject) {\n            console.log('There are no content controls in this document.')\n        } else {\n            console.log('The first content control has been found in this document.');\n        }\n    });\n})\n.catch(function (error) {\n    console.log('Error: ' + JSON.stringify(error));\n    if (error instanceof OfficeExtension.Error) {\n        console.log('Debug info: ' + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- uid: word.Word.ContentControlCollection.getFirstOrNullObject
  summary: >-
    Возвращает первый элемент управления содержимым в коллекции. Возвращает объект null, если эта коллекция пуста.


    \[[Набор API-Интерфейсов: WordApi 1.3](/javascript/office/requirement-sets/word-api-requirement-sets)\]
  name: getFirstOrNullObject()
  fullName: word.Word.ContentControlCollection.getFirstOrNullObject
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getFirstOrNullObject(): Word.ContentControl;'
    return:
      type:
      - word.Word.ContentControl
      description: ''
- uid: word.Word.ContentControlCollection.getItem
  summary: >-
    Возвращает элемент управления содержимым по его индексу в коллекции.


    \[[Набор API-Интерфейсов: WordApi 1.1](/javascript/office/requirement-sets/word-api-requirement-sets)\]
  name: getItem(index)
  fullName: word.Word.ContentControlCollection.getItem
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getItem(index: number): Word.ContentControl;'
    return:
      type:
      - word.Word.ContentControl
      description: ''
    parameters:
    - id: index
      description: Индекс.
      type:
      - number
- uid: word.Word.ContentControlCollection.items
  summary: Получает загруженных дочерних элементов в этом семействе.
  name: items
  fullName: word.Word.ContentControlCollection.items
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly items: Word.ContentControl[];'
    return:
      type:
      - Word.ContentControl[]
- uid: word.Word.ContentControlCollection.load
  summary: Очереди команды для загрузки указанного свойства объекта. Перед чтением свойства необходимо вызвать «context.sync()».
  remarks: >-
    В дополнение к подписи этот метод имеет следующие цифровые подписи.


    `load(option?: { select?: string; expand?: string; }): Word.ContentControlCollection`-Option.select — это разделенный запятыми строка, указывающая свойства для загрузки, куда options.expand — это разделенный запятыми строка, указывающая свойства навигации для загрузки.


    `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Word.ContentControlCollection`-Доступно только на коллекцию типов. Это похоже на предыдущую. Option.Top указывает максимальное число элементов коллекции, которые можно включить в результат. Option.Skip указывает количество элементов, которые пропускаются и не включенный в результате. Если option.top указан, результирующий набор будет запущен процесс после пропускает указанное число элементов.

    #### <a name="examples"></a>Примеры


    ```javascript

    // Run a batch operation against the Word object model.

    Word.run(function (context) {

        // Create a proxy object for the content controls collection.
        var contentControls = context.document.contentControls;

        // Queue a command to load the id property for all of the content controls.
        context.load(contentControls, 'id');

        // Synchronize the document state by executing the queued commands,
        // and return a promise to indicate task completion.
        return context.sync().then(function () {
            if (contentControls.items.length === 0) {
                console.log('No content control found.');
            }
            else {
                // Queue a command to load the properties on the first content control.
                contentControls.items[0].load(  'appearance,' +
                                                'cannotDelete,' +
                                                'cannotEdit,' +
                                                'id,' +
                                                'placeHolderText,' +
                                                'removeWhenEdited,' +
                                                'title,' +
                                                'text,' +
                                                'type,' +
                                                'style,' +
                                                'tag,' +
                                                'font/size,' +
                                                'font/name,' +
                                                'font/color');

                // Synchronize the document state by executing the queued commands,
                // and return a promise to indicate task completion.
                return context.sync()
                    .then(function () {
                        console.log('Property values of the first content control:' +
                            '   ----- appearance: ' + contentControls.items[0].appearance +
                            '   ----- cannotDelete: ' + contentControls.items[0].cannotDelete +
                            '   ----- cannotEdit: ' + contentControls.items[0].cannotEdit +
                            '   ----- color: ' + contentControls.items[0].color +
                            '   ----- id: ' + contentControls.items[0].id +
                            '   ----- placeHolderText: ' + contentControls.items[0].placeholderText +
                            '   ----- removeWhenEdited: ' + contentControls.items[0].removeWhenEdited +
                            '   ----- title: ' + contentControls.items[0].title +
                            '   ----- text: ' + contentControls.items[0].text +
                            '   ----- type: ' + contentControls.items[0].type +
                            '   ----- style: ' + contentControls.items[0].style +
                            '   ----- tag: ' + contentControls.items[0].tag +
                            '   ----- font size: ' + contentControls.items[0].font.size +
                            '   ----- font name: ' + contentControls.items[0].font.name +
                            '   ----- font color: ' + contentControls.items[0].font.color);
                });
            }
        });
    })

    .catch(function (error) {
        console.log('Error: ' + JSON.stringify(error));
        if (error instanceof OfficeExtension.Error) {
            console.log('Debug info: ' + JSON.stringify(error.debugInfo));
        }
    });


    // The Silly stories add-in sample shows how the load method is used

    // to load the content control collection with the tag and title properties.

    // https://aka.ms/sillystorywordaddin

    ```
  name: load(option)
  fullName: word.Word.ContentControlCollection.load
  langs:
  - typeScript
  type: method
  syntax:
    content: 'load(option?: string | string[]): Word.ContentControlCollection;'
    return:
      type:
      - word.Word.ContentControlCollection
      description: ''
    parameters:
    - id: option
      description: Строка, разделенных запятыми или массив строк, задающих свойства для загрузки.
      type:
      - string | string[]
- uid: word.Word.ContentControlCollection.toJSON
  name: toJSON()
  fullName: word.Word.ContentControlCollection.toJSON
  langs:
  - typeScript
  type: method
  syntax:
    content: 'toJSON(): Word.Interfaces.ContentControlCollectionData;'
    return:
      type:
      - word.Word.Interfaces.ContentControlCollectionData
      description: ''
- uid: word.Word.ContentControlCollection.track
  summary: Отслеживание объектов для автоматической на основании соседних изменения в документе. Этот вызов это сокращение для context.trackedObjects.add(thisObject). Если вы используете этот объект «.sync» вызовах и за пределами последовательного выполнение пакета «.run» и get «InvalidObjectPath» ошибка при установке свойства или вызова метода на объекте, необходимые для добавления объекта отслеживаемого объекта Сначала создается объект семейства сайтов.
  name: track()
  fullName: word.Word.ContentControlCollection.track
  langs:
  - typeScript
  type: method
  syntax:
    content: 'track(): Word.ContentControlCollection;'
    return:
      type:
      - word.Word.ContentControlCollection
      description: ''
- uid: word.Word.ContentControlCollection.untrack
  summary: Выпуск памяти, связанное с объектом, если ранее отслеживаются. Этот вызов — это сокращение для context.trackedObjects.remove(thisObject). Создавая множество отслеживаемых объектов замедляет ведущего приложения, так помните освободить место на любые объекты, добавлении, после завершения их использования. Необходимо будет вызывать «context.sync()» до выпуска памяти вступает в силу.
  name: untrack()
  fullName: word.Word.ContentControlCollection.untrack
  langs:
  - typeScript
  type: method
  syntax:
    content: 'untrack(): Word.ContentControlCollection;'
    return:
      type:
      - word.Word.ContentControlCollection
      description: ''
