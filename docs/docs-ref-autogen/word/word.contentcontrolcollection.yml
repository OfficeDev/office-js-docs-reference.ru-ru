### YamlMime:UniversalReference
ms.openlocfilehash: 28902f757ec2534ffb391233d808dddc580a0dd3
ms.sourcegitcommit: beffe9455dace422e85b92f0105c54ff7b594cbf
ms.translationtype: MT
ms.contentlocale: ru-RU
ms.lasthandoff: 09/20/2018
ms.locfileid: "24050674"
items:
- uid: word.Word.ContentControlCollection
  summary: >-
    <span data-ttu-id="1cb8c-101">Содержит коллекцию объектов [Word.ContentControl](xref:word.Word.ContentControl) .</span><span class="sxs-lookup"><span data-stu-id="1cb8c-101">Contains a collection of [Word.ContentControl](xref:word.Word.ContentControl) objects.</span></span> <span data-ttu-id="1cb8c-102">Элементы управления содержимым ограниченного и потенциально с меткой областей в документе, которые используются в качестве контейнеров для определенных типов содержимого.</span><span class="sxs-lookup"><span data-stu-id="1cb8c-102">Content controls are bounded and potentially labeled regions in a document that serve as containers for specific types of content.</span></span> <span data-ttu-id="1cb8c-103">Отдельные элементы управления содержимым может содержать содержимое, такие как изображения, таблицы или абзацы форматированного текста.</span><span class="sxs-lookup"><span data-stu-id="1cb8c-103">Individual content controls may contain contents such as images, tables, or paragraphs of formatted text.</span></span> <span data-ttu-id="1cb8c-104">В настоящее время поддерживаются только форматированного текста элементов управления контентом.</span><span class="sxs-lookup"><span data-stu-id="1cb8c-104">Currently, only rich text content controls are supported.</span></span>


    <span data-ttu-id="1cb8c-105">\[[Набор API-Интерфейсов: WordApi 1.1](/javascript/office/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="1cb8c-105">\[ [API set: WordApi 1.1](/javascript/office/requirement-sets/word-api-requirement-sets) \]</span></span>
  name: Word.ContentControlCollection
  fullName: word.Word.ContentControlCollection
  langs:
  - typeScript
  type: class
  extends:
  - OfficeExtension.ClientObject
  package: word
  children:
  - word.Word.ContentControlCollection.getById
  - word.Word.ContentControlCollection.getByIdOrNullObject
  - word.Word.ContentControlCollection.getByTag
  - word.Word.ContentControlCollection.getByTitle
  - word.Word.ContentControlCollection.getByTypes
  - word.Word.ContentControlCollection.getFirst
  - word.Word.ContentControlCollection.getFirstOrNullObject
  - word.Word.ContentControlCollection.getItem
  - word.Word.ContentControlCollection.items
  - word.Word.ContentControlCollection.load
  - word.Word.ContentControlCollection.toJSON
  - word.Word.ContentControlCollection.track
  - word.Word.ContentControlCollection.untrack
- uid: word.Word.ContentControlCollection.getById
  summary: >-
    <span data-ttu-id="1cb8c-p102">Возвращает элемент управления содержимым по его идентификатору. Выдает ошибку, если в этой коллекции нет элемента управления контентом с таким идентификатором.</span><span class="sxs-lookup"><span data-stu-id="1cb8c-p102">Gets a content control by its identifier. Throws if there isn't a content control with the identifier in this collection.</span></span>


    <span data-ttu-id="1cb8c-108">\[[Набор API-Интерфейсов: WordApi 1.1](/javascript/office/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="1cb8c-108">\[ [API set: WordApi 1.1](/javascript/office/requirement-sets/word-api-requirement-sets) \]</span></span>
  name: getById(id)
  fullName: word.Word.ContentControlCollection.getById
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getById(id: number): Word.ContentControl;'
    return:
      type:
      - word.Word.ContentControl
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"1cb8c-109\">Примеры</span><span class=\"sxs-lookup\"><span data-stu-id=\"1cb8c-109\">Examples</span></span>\n\n```javascript\n// Run a batch operation against the Word object model.\nWord.run(function (context) {\n\n    // Create a proxy object for the content control that contains a specific id.\n    var contentControl = context.document.contentControls.getById(30086310);\n\n    // Queue a command to load the text property for a content control.\n    context.load(contentControl, 'text');\n\n    // Synchronize the document state by executing the queued commands,\n    // and return a promise to indicate task completion.\n    return context.sync().then(function () {\n        console.log('The content control with that Id has been found in this document.');\n    });\n})\n.catch(function (error) {\n    console.log('Error: ' + JSON.stringify(error));\n    if (error instanceof OfficeExtension.Error) {\n        console.log('Debug info: ' + JSON.stringify(error.debugInfo));\n    }\n});\n```\n```javascript\n// Run a batch operation against the Word object model.\nWord.run(function (context) {\n\n    // Create a proxy object for the content control that contains a specific id.\n    var contentControl = context.document.contentControls.getByIdOrNullObject(30086310);\n\n    // Queue a command to load the text property for a content control.\n    context.load(contentControl, 'text');\n\n    // Synchronize the document state by executing the queued commands,\n    // and return a promise to indicate task completion.\n    return context.sync().then(function () {\n        if (contentControl.isNullObject) {\n            console.log('There is no content control with that ID.')\n        } else {\n            console.log('The content control with that ID has been found in this document.');\n        }\n    });\n})\n.catch(function (error) {\n    console.log('Error: ' + JSON.stringify(error));\n    if (error instanceof OfficeExtension.Error) {\n        console.log('Debug info: ' + JSON.stringify(error.debugInfo));\n    }\n});\n```"
    parameters:
    - id: id
      description: <span data-ttu-id="1cb8c-p103">Обязательный параметр. Идентификатор элемента управления содержимым.</span><span class="sxs-lookup"><span data-stu-id="1cb8c-p103">Required. A content control identifier.</span></span>
      type:
      - number
- uid: word.Word.ContentControlCollection.getByIdOrNullObject
  summary: >-
    <span data-ttu-id="1cb8c-p104">Возвращает элемент управления содержимым по его идентификатору. Возвращает объект null, если в этой коллекции нет элемента управления контентом с таким идентификатором.</span><span class="sxs-lookup"><span data-stu-id="1cb8c-p104">Gets a content control by its identifier. Returns a null object if there isn't a content control with the identifier in this collection.</span></span>


    <span data-ttu-id="1cb8c-114">\[[Набор API-Интерфейсов: WordApi 1.3](/javascript/office/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="1cb8c-114">\[ [API set: WordApi 1.3](/javascript/office/requirement-sets/word-api-requirement-sets) \]</span></span>
  name: getByIdOrNullObject(id)
  fullName: word.Word.ContentControlCollection.getByIdOrNullObject
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getByIdOrNullObject(id: number): Word.ContentControl;'
    return:
      type:
      - word.Word.ContentControl
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"1cb8c-115\">Примеры</span><span class=\"sxs-lookup\"><span data-stu-id=\"1cb8c-115\">Examples</span></span>\n\n```javascript\n// Run a batch operation against the Word object model.\nWord.run(function (context) {\n\n    // Create a proxy object for the content control that contains a specific id.\n    var contentControl = context.document.contentControls.getByIdOrNullObject(30086310);\n\n    // Queue a command to load the text property for a content control.\n    context.load(contentControl, 'text');\n\n    // Synchronize the document state by executing the queued commands,\n    // and return a promise to indicate task completion.\n    return context.sync().then(function () {\n        if (contentControl.isNullObject) {\n            console.log('There is no content control with that ID.')\n        } else {\n            console.log('The content control with that ID has been found in this document.');\n        }\n    });\n})\n.catch(function (error) {\n    console.log('Error: ' + JSON.stringify(error));\n    if (error instanceof OfficeExtension.Error) {\n        console.log('Debug info: ' + JSON.stringify(error.debugInfo));\n    }\n});\n```"
    parameters:
    - id: id
      description: <span data-ttu-id="1cb8c-p105">Обязательный параметр. Идентификатор элемента управления содержимым.</span><span class="sxs-lookup"><span data-stu-id="1cb8c-p105">Required. A content control identifier.</span></span>
      type:
      - number
- uid: word.Word.ContentControlCollection.getByTag
  summary: >-
    <span data-ttu-id="1cb8c-118">Возвращает элементы управления содержимым с указанным тегом.</span><span class="sxs-lookup"><span data-stu-id="1cb8c-118">Gets the content controls that have the specified tag.</span></span>


    <span data-ttu-id="1cb8c-119">\[[Набор API-Интерфейсов: WordApi 1.1](/javascript/office/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="1cb8c-119">\[ [API set: WordApi 1.1](/javascript/office/requirement-sets/word-api-requirement-sets) \]</span></span>
  name: getByTag(tag)
  fullName: word.Word.ContentControlCollection.getByTag
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getByTag(tag: string): Word.ContentControlCollection;'
    return:
      type:
      - word.Word.ContentControlCollection
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"1cb8c-120\">Примеры</span><span class=\"sxs-lookup\"><span data-stu-id=\"1cb8c-120\">Examples</span></span>\n\n```javascript\n// Run a batch operation against the Word object model.\nWord.run(function (context) {\n\n    // Create a proxy object for the content controls collection that contains a specific tag.\n    var contentControlsWithTag = context.document.contentControls.getByTag('Customer-Address');\n\n    // Queue a command to load the text property for all of content controls with a specific tag.\n    context.load(contentControlsWithTag, 'text');\n\n    // Synchronize the document state by executing the queued commands,\n    // and return a promise to indicate task completion.\n    return context.sync().then(function () {\n        if (contentControlsWithTag.items.length === 0) {\n            console.log(\"There isn't a content control with a tag of Customer-Address in this document.\");\n        } else {\n            console.log(\n                'The first content control with the tag of Customer-Address has this text: ' + \n                contentControlsWithTag.items[0].text);\n        }\n\n    });\n})\n.catch(function (error) {\n    console.log('Error: ' + JSON.stringify(error));\n    if (error instanceof OfficeExtension.Error) {\n        console.log('Debug info: ' + JSON.stringify(error.debugInfo));\n    }\n});\n\n// The Word-Add-in-DocumentAssembly sample has another example of using the getByTag method.\n// https://github.com/OfficeDev/Word-Add-in-DocumentAssembly\n```\n```typescript\nawait Word.run(async (context) => {\n    let contentControls = context.document.contentControls.getByTag(\"customer\");\n    contentControls.load(\"text\");\n\n    await context.sync();\n\n    for (let i = 0; i < contentControls.items.length; i++) {\n        contentControls.items[i].insertText(\"Fabrikam\", \"Replace\");\n    }\n\n    await context.sync();\n});\n```"
    parameters:
    - id: tag
      description: <span data-ttu-id="1cb8c-p106">Обязательный параметр. Тег, установленный на элемент управления содержимым.</span><span class="sxs-lookup"><span data-stu-id="1cb8c-p106">Required. A tag set on a content control.</span></span>
      type:
      - string
- uid: word.Word.ContentControlCollection.getByTitle
  summary: >-
    <span data-ttu-id="1cb8c-123">Возвращает элементы управления содержимым с указанным заголовком.</span><span class="sxs-lookup"><span data-stu-id="1cb8c-123">Gets the content controls that have the specified title.</span></span>


    <span data-ttu-id="1cb8c-124">\[[Набор API-Интерфейсов: WordApi 1.1](/javascript/office/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="1cb8c-124">\[ [API set: WordApi 1.1](/javascript/office/requirement-sets/word-api-requirement-sets) \]</span></span>
  name: getByTitle(title)
  fullName: word.Word.ContentControlCollection.getByTitle
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getByTitle(title: string): Word.ContentControlCollection;'
    return:
      type:
      - word.Word.ContentControlCollection
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"1cb8c-125\">Примеры</span><span class=\"sxs-lookup\"><span data-stu-id=\"1cb8c-125\">Examples</span></span>\n\n```javascript\n// Run a batch operation against the Word object model.\nWord.run(function (context) {\n\n    // Create a proxy object for the content controls collection that contains a specific title.\n    var contentControlsWithTitle = context.document.contentControls.getByTitle('Enter Customer Address Here');\n\n    // Queue a command to load the text property for all of content controls with a specific title.\n    context.load(contentControlsWithTitle, 'text');\n\n    // Synchronize the document state by executing the queued commands,\n    // and return a promise to indicate task completion.\n    return context.sync().then(function () {\n        if (contentControlsWithTitle.items.length === 0) {\n            console.log(\n                \"There isn't a content control with a title of 'Enter Customer Address Here' in this document.\");\n        } else {\n            console.log(\n                \"The first content control with the title of 'Enter Customer Address Here' has this text: \" + \n                contentControlsWithTitle.items[0].text);\n        }\n\n    });\n})\n.catch(function (error) {\n    console.log('Error: ' + JSON.stringify(error));\n    if (error instanceof OfficeExtension.Error) {\n        console.log('Debug info: ' + JSON.stringify(error.debugInfo));\n    }\n});\n\n// The Word-Add-in-DocumentAssembly sample has another example of using the getByTitle method.\n// https://github.com/OfficeDev/Word-Add-in-DocumentAssembly\n```"
    parameters:
    - id: title
      description: <span data-ttu-id="1cb8c-p107">Обязательный параметр. Заголовок элемента управления содержимым.</span><span class="sxs-lookup"><span data-stu-id="1cb8c-p107">Required. The title of a content control.</span></span>
      type:
      - string
- uid: word.Word.ContentControlCollection.getByTypes
  summary: >-
    <span data-ttu-id="1cb8c-128">Получает элементы управления содержимым, которые имеют указанные типы и/или подтипы.</span><span class="sxs-lookup"><span data-stu-id="1cb8c-128">Gets the content controls that have the specified types and/or subtypes.</span></span>


    <span data-ttu-id="1cb8c-129">\[[Набор API-Интерфейсов: WordApi 1.3](/javascript/office/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="1cb8c-129">\[ [API set: WordApi 1.3](/javascript/office/requirement-sets/word-api-requirement-sets) \]</span></span>
  name: getByTypes(types)
  fullName: word.Word.ContentControlCollection.getByTypes
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getByTypes(types: Word.ContentControlType[]): Word.ContentControlCollection;'
    return:
      type:
      - word.Word.ContentControlCollection
      description: ''
    parameters:
    - id: types
      description: <span data-ttu-id="1cb8c-p108">Обязательный. Массив типов и/или подтипов content control.</span><span class="sxs-lookup"><span data-stu-id="1cb8c-p108">Required. An array of content control types and/or subtypes.</span></span>
      type:
      - Word.ContentControlType[]
- uid: word.Word.ContentControlCollection.getFirst
  summary: >-
    <span data-ttu-id="1cb8c-p109">Возвращает первый элемент управления содержимым в коллекции. Выдает ошибку, если эта коллекция пуста.</span><span class="sxs-lookup"><span data-stu-id="1cb8c-p109">Gets the first content control in this collection. Throws if this collection is empty.</span></span>


    <span data-ttu-id="1cb8c-134">\[[Набор API-Интерфейсов: WordApi 1.3](/javascript/office/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="1cb8c-134">\[ [API set: WordApi 1.3](/javascript/office/requirement-sets/word-api-requirement-sets) \]</span></span>
  name: getFirst()
  fullName: word.Word.ContentControlCollection.getFirst
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getFirst(): Word.ContentControl;'
    return:
      type:
      - word.Word.ContentControl
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"1cb8c-135\">Примеры</span><span class=\"sxs-lookup\"><span data-stu-id=\"1cb8c-135\">Examples</span></span>\n\n```javascript\n// Run a batch operation against the Word object model.\nWord.run(function (context) {\n\n    // Create a proxy object for the first content control in the document.\n    var contentControl = context.document.contentControls.getFirstOrNullObject();\n\n    // Queue a command to load the text property for a content control.\n    context.load(contentControl, 'text');\n\n    // Synchronize the document state by executing the queued commands,\n    // and return a promise to indicate task completion.\n    return context.sync().then(function () {\n        if (contentControl.isNullObject) {\n            console.log('There are no content controls in this document.')\n        } else {\n            console.log('The first content control has been found in this document.');\n        }\n    });\n})\n.catch(function (error) {\n    console.log('Error: ' + JSON.stringify(error));\n    if (error instanceof OfficeExtension.Error) {\n        console.log('Debug info: ' + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- uid: word.Word.ContentControlCollection.getFirstOrNullObject
  summary: >-
    <span data-ttu-id="1cb8c-p110">Возвращает первый элемент управления содержимым в коллекции. Возвращает объект null, если эта коллекция пуста.</span><span class="sxs-lookup"><span data-stu-id="1cb8c-p110">Gets the first content control in this collection. Returns a null object if this collection is empty.</span></span>


    <span data-ttu-id="1cb8c-138">\[[Набор API-Интерфейсов: WordApi 1.3](/javascript/office/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="1cb8c-138">\[ [API set: WordApi 1.3](/javascript/office/requirement-sets/word-api-requirement-sets) \]</span></span>
  name: getFirstOrNullObject()
  fullName: word.Word.ContentControlCollection.getFirstOrNullObject
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getFirstOrNullObject(): Word.ContentControl;'
    return:
      type:
      - word.Word.ContentControl
      description: ''
- uid: word.Word.ContentControlCollection.getItem
  summary: >-
    <span data-ttu-id="1cb8c-139">Возвращает элемент управления содержимым по его индексу в коллекции.</span><span class="sxs-lookup"><span data-stu-id="1cb8c-139">Gets a content control by its index in the collection.</span></span>


    <span data-ttu-id="1cb8c-140">\[[Набор API-Интерфейсов: WordApi 1.1](/javascript/office/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="1cb8c-140">\[ [API set: WordApi 1.1](/javascript/office/requirement-sets/word-api-requirement-sets) \]</span></span>
  name: getItem(index)
  fullName: word.Word.ContentControlCollection.getItem
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getItem(index: number): Word.ContentControl;'
    return:
      type:
      - word.Word.ContentControl
      description: ''
    parameters:
    - id: index
      description: <span data-ttu-id="1cb8c-141">Индекс.</span><span class="sxs-lookup"><span data-stu-id="1cb8c-141">The index.</span></span>
      type:
      - number
- uid: word.Word.ContentControlCollection.items
  summary: <span data-ttu-id="1cb8c-142">Получает загруженных дочерних элементов в этом семействе.</span><span class="sxs-lookup"><span data-stu-id="1cb8c-142">Gets the loaded child items in this collection.</span></span>
  name: items
  fullName: word.Word.ContentControlCollection.items
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly items: Word.ContentControl[];'
    return:
      type:
      - Word.ContentControl[]
- uid: word.Word.ContentControlCollection.load
  summary: <span data-ttu-id="1cb8c-143">Очереди команды для загрузки указанного свойства объекта.</span><span class="sxs-lookup"><span data-stu-id="1cb8c-143">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="1cb8c-144">Перед чтением свойства необходимо вызвать «context.sync()».</span><span class="sxs-lookup"><span data-stu-id="1cb8c-144">You must call "context.sync()" before reading the properties.</span></span>
  remarks: >-
    <span data-ttu-id="1cb8c-145">В дополнение к подписи этот метод имеет следующие цифровые подписи.</span><span class="sxs-lookup"><span data-stu-id="1cb8c-145">In addition to this signature, this method has the following signatures:</span></span>


    <span data-ttu-id="1cb8c-146">`load(option?: { select?: string; expand?: string; }): Word.ContentControlCollection`-Option.select — это разделенный запятыми строка, указывающая свойства для загрузки, куда options.expand — это разделенный запятыми строка, указывающая свойства навигации для загрузки.</span><span class="sxs-lookup"><span data-stu-id="1cb8c-146">`load(option?: { select?: string; expand?: string; }): Word.ContentControlCollection` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.</span></span>


    <span data-ttu-id="1cb8c-147">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Word.ContentControlCollection`-Доступно только на коллекцию типов.</span><span class="sxs-lookup"><span data-stu-id="1cb8c-147">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Word.ContentControlCollection` - Only available on collection types.</span></span> <span data-ttu-id="1cb8c-148">Это похоже на предыдущую.</span><span class="sxs-lookup"><span data-stu-id="1cb8c-148">It is similar to the preceding signature.</span></span> <span data-ttu-id="1cb8c-149">Option.Top указывает максимальное число элементов коллекции, которые можно включить в результат.</span><span class="sxs-lookup"><span data-stu-id="1cb8c-149">Option.top specifies the maximum number of collection items that can be included in the result.</span></span> <span data-ttu-id="1cb8c-150">Option.Skip указывает количество элементов, которые пропускаются и не включенный в результате.</span><span class="sxs-lookup"><span data-stu-id="1cb8c-150">Option.skip specifies the number of items that are to be skipped and not included in the result.</span></span> <span data-ttu-id="1cb8c-151">Если option.top указан, результирующий набор будет запущен процесс после пропускает указанное число элементов.</span><span class="sxs-lookup"><span data-stu-id="1cb8c-151">If option.top is specified, the result set will start after skipping the specified number of items.</span></span>

    #### <a name="examples"></a><span data-ttu-id="1cb8c-152">Примеры</span><span class="sxs-lookup"><span data-stu-id="1cb8c-152">Examples</span></span>


    ```javascript

    // Run a batch operation against the Word object model.

    Word.run(function (context) {

        // Create a proxy object for the content controls collection.
        var contentControls = context.document.contentControls;

        // Queue a command to load the id property for all of the content controls.
        context.load(contentControls, 'id');

        // Synchronize the document state by executing the queued commands,
        // and return a promise to indicate task completion.
        return context.sync().then(function () {
            if (contentControls.items.length === 0) {
                console.log('No content control found.');
            }
            else {
                // Queue a command to load the properties on the first content control.
                contentControls.items[0].load(  'appearance,' +
                                                'cannotDelete,' +
                                                'cannotEdit,' +
                                                'id,' +
                                                'placeHolderText,' +
                                                'removeWhenEdited,' +
                                                'title,' +
                                                'text,' +
                                                'type,' +
                                                'style,' +
                                                'tag,' +
                                                'font/size,' +
                                                'font/name,' +
                                                'font/color');

                // Synchronize the document state by executing the queued commands,
                // and return a promise to indicate task completion.
                return context.sync()
                    .then(function () {
                        console.log('Property values of the first content control:' +
                            '   ----- appearance: ' + contentControls.items[0].appearance +
                            '   ----- cannotDelete: ' + contentControls.items[0].cannotDelete +
                            '   ----- cannotEdit: ' + contentControls.items[0].cannotEdit +
                            '   ----- color: ' + contentControls.items[0].color +
                            '   ----- id: ' + contentControls.items[0].id +
                            '   ----- placeHolderText: ' + contentControls.items[0].placeholderText +
                            '   ----- removeWhenEdited: ' + contentControls.items[0].removeWhenEdited +
                            '   ----- title: ' + contentControls.items[0].title +
                            '   ----- text: ' + contentControls.items[0].text +
                            '   ----- type: ' + contentControls.items[0].type +
                            '   ----- style: ' + contentControls.items[0].style +
                            '   ----- tag: ' + contentControls.items[0].tag +
                            '   ----- font size: ' + contentControls.items[0].font.size +
                            '   ----- font name: ' + contentControls.items[0].font.name +
                            '   ----- font color: ' + contentControls.items[0].font.color);
                });
            }
        });
    })

    .catch(function (error) {
        console.log('Error: ' + JSON.stringify(error));
        if (error instanceof OfficeExtension.Error) {
            console.log('Debug info: ' + JSON.stringify(error.debugInfo));
        }
    });


    // The Silly stories add-in sample shows how the load method is used

    // to load the content control collection with the tag and title properties.

    // https://aka.ms/sillystorywordaddin

    ```
  name: load(option)
  fullName: word.Word.ContentControlCollection.load
  langs:
  - typeScript
  type: method
  syntax:
    content: 'load(option?: string | string[]): Word.ContentControlCollection;'
    return:
      type:
      - word.Word.ContentControlCollection
      description: ''
    parameters:
    - id: option
      description: <span data-ttu-id="1cb8c-153">Строка, разделенных запятыми или массив строк, задающих свойства для загрузки.</span><span class="sxs-lookup"><span data-stu-id="1cb8c-153">A comma-delimited string or an array of strings that specify the properties to load.</span></span>
      type:
      - string | string[]
- uid: word.Word.ContentControlCollection.toJSON
  name: toJSON()
  fullName: word.Word.ContentControlCollection.toJSON
  langs:
  - typeScript
  type: method
  syntax:
    content: 'toJSON(): Word.Interfaces.ContentControlCollectionData;'
    return:
      type:
      - word.Word.Interfaces.ContentControlCollectionData
      description: ''
- uid: word.Word.ContentControlCollection.track
  summary: <span data-ttu-id="1cb8c-154">Отслеживание объектов для автоматической на основании соседних изменения в документе.</span><span class="sxs-lookup"><span data-stu-id="1cb8c-154">Track the object for automatic adjustment based on surrounding changes in the document.</span></span> <span data-ttu-id="1cb8c-155">Этот вызов это сокращение для context.trackedObjects.add(thisObject).</span><span class="sxs-lookup"><span data-stu-id="1cb8c-155">This call is a shorthand for context.trackedObjects.add(thisObject).</span></span> <span data-ttu-id="1cb8c-156">Если вы используете этот объект «.sync» вызовах и за пределами последовательного выполнение пакета «.run» и get «InvalidObjectPath» ошибка при установке свойства или вызова метода на объекте, необходимые для добавления объекта отслеживаемого объекта Сначала создается объект семейства сайтов.</span><span class="sxs-lookup"><span data-stu-id="1cb8c-156">If you are using this object across ".sync" calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you needed to have added the object to the tracked object collection when the object was first created.</span></span>
  name: track()
  fullName: word.Word.ContentControlCollection.track
  langs:
  - typeScript
  type: method
  syntax:
    content: 'track(): Word.ContentControlCollection;'
    return:
      type:
      - word.Word.ContentControlCollection
      description: ''
- uid: word.Word.ContentControlCollection.untrack
  summary: <span data-ttu-id="1cb8c-157">Выпуск памяти, связанное с объектом, если ранее отслеживаются.</span><span class="sxs-lookup"><span data-stu-id="1cb8c-157">Release the memory associated with this object, if it has previously been tracked.</span></span> <span data-ttu-id="1cb8c-158">Этот вызов — это сокращение для context.trackedObjects.remove(thisObject).</span><span class="sxs-lookup"><span data-stu-id="1cb8c-158">This call is shorthand for context.trackedObjects.remove(thisObject).</span></span> <span data-ttu-id="1cb8c-159">Создавая множество отслеживаемых объектов замедляет ведущего приложения, так помните освободить место на любые объекты, добавлении, после завершения их использования.</span><span class="sxs-lookup"><span data-stu-id="1cb8c-159">Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them.</span></span> <span data-ttu-id="1cb8c-160">Необходимо будет вызывать «context.sync()» до выпуска памяти вступает в силу.</span><span class="sxs-lookup"><span data-stu-id="1cb8c-160">You will need to call "context.sync()" before the memory release takes effect.</span></span>
  name: untrack()
  fullName: word.Word.ContentControlCollection.untrack
  langs:
  - typeScript
  type: method
  syntax:
    content: 'untrack(): Word.ContentControlCollection;'
    return:
      type:
      - word.Word.ContentControlCollection
      description: ''
