### YamlMime:UniversalReference
ms.openlocfilehash: 6ec2e73ea0c106ed383a6d8ca823dea7d3c5a4bd
ms.sourcegitcommit: d356f1545c328d4b59ce814fcab8191e4231f1dc
ms.translationtype: MT
ms.contentlocale: ru-RU
ms.lasthandoff: 02/13/2019
ms.locfileid: "29977219"
items:
- uid: word.Word.ParagraphCollection
  summary: >-
    Содержит коллекцию объектов [Word.Paragraph](xref:word.Word.Paragraph) .


    \[[Набор API-Интерфейсов: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  name: Word.ParagraphCollection
  fullName: Word.ParagraphCollection
  langs:
  - typeScript
  type: class
  extends:
  - office.OfficeExtension.ClientObject
  package: word
  children:
  - word.Word.ParagraphCollection.context
  - word.Word.ParagraphCollection.getFirst
  - word.Word.ParagraphCollection.getFirstOrNullObject
  - word.Word.ParagraphCollection.getLast
  - word.Word.ParagraphCollection.getLastOrNullObject
  - word.Word.ParagraphCollection.items
  - word.Word.ParagraphCollection.load
  - word.Word.ParagraphCollection.load_1
  - word.Word.ParagraphCollection.load_2
  - word.Word.ParagraphCollection.toJSON
  - word.Word.ParagraphCollection.track
  - word.Word.ParagraphCollection.untrack
- uid: word.Word.ParagraphCollection.context
  summary: Контекста запроса, связанного с объектом. Это необходимо добавить в процесс для процесса ведущего приложения Office.
  name: context
  fullName: context
  langs:
  - typeScript
  type: property
  syntax:
    content: 'context: RequestContext;'
    return:
      type:
      - RequestContext
- uid: word.Word.ParagraphCollection.getFirst
  summary: >-
    Возвращает первый абзац в этой коллекции. Выдает ошибку, если коллекция пуста.


    \[[Набор API-Интерфейсов: WordApi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  name: getFirst()
  fullName: getFirst()
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getFirst(): Word.Paragraph;'
    return:
      type:
      - Word.Paragraph
      description: ''
- uid: word.Word.ParagraphCollection.getFirstOrNullObject
  summary: >-
    Возвращает первый абзац в этой коллекции. Возвращает объект null, если коллекция пуста.


    \[[Набор API-Интерфейсов: WordApi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  name: getFirstOrNullObject()
  fullName: getFirstOrNullObject()
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getFirstOrNullObject(): Word.Paragraph;'
    return:
      type:
      - Word.Paragraph
      description: ''
- uid: word.Word.ParagraphCollection.getLast
  summary: >-
    Возвращает последний абзац в этой коллекции. Выдает ошибку, если коллекция пуста.


    \[[Набор API-Интерфейсов: WordApi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  name: getLast()
  fullName: getLast()
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getLast(): Word.Paragraph;'
    return:
      type:
      - Word.Paragraph
      description: ''
- uid: word.Word.ParagraphCollection.getLastOrNullObject
  summary: >-
    Возвращает последний абзац в этой коллекции. Возвращает объект null, если коллекция пуста.


    \[[Набор API-Интерфейсов: WordApi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  name: getLastOrNullObject()
  fullName: getLastOrNullObject()
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getLastOrNullObject(): Word.Paragraph;'
    return:
      type:
      - Word.Paragraph
      description: ''
- uid: word.Word.ParagraphCollection.items
  summary: Получает загруженных дочерних элементов в этом семействе.
  name: items
  fullName: items
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly items: Word.Paragraph[];'
    return:
      type:
      - Word.Paragraph[]
- uid: word.Word.ParagraphCollection.load
  summary: Очереди команды для загрузки указанного свойства объекта. Перед чтением свойства необходимо вызвать «context.sync()».
  remarks: "В дополнение к подписи этот метод имеет следующие цифровые подписи.\n\n`load(option?: string | string[]): Word.ParagraphCollection`-Где параметр — запятыми строку или массив строк, задающих свойства для загрузки.\n\n`load(option?: { select?: string; expand?: string; }): Word.ParagraphCollection`-Option.select — это разделенный запятыми строка, указывающая свойства для загрузки, куда options.expand — это разделенный запятыми строка, указывающая свойства навигации для загрузки.\n\n`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Word.ParagraphCollection`-Доступно только на коллекцию типов. Это похоже на предыдущую. Option.Top указывает максимальное число элементов коллекции, которые можно включить в результат. Option.Skip указывает количество элементов, которые пропускаются и не включенный в результате. Если option.top указан, результирующий набор будет запущен процесс после пропускает указанное число элементов.\n#### <a name=\"examples\"></a>Примеры\n\n```javascript\n// This example shows how to get the paragraphs in the Word document\n// along with their text and font size properties.\n// \n// Run a batch operation against the Word object model.\nWord.run(function (context) {\n\n    // Create a proxy object for the paragraphs collection.\n    var paragraphs = context.document.body.paragraphs;\n\n    // Queue a commmand to load the text and font properties.\n    // It is best practice to always specify the property set. Otherwise, all properties are\n    // returned in on the object.\n    context.load(paragraphs, 'text, font/size');\n\n    // Synchronize the document state by executing the queued commands,\n    // and return a promise to indicate task completion.\n    return context.sync().then(function () {\n\n    // Insert code that works with the paragraphs loaded by context.load().\n    })\n})\n.catch(function (error) {\n    console.log('Error: ' + JSON.stringify(error));\n    if (error instanceof OfficeExtension.Error) {\n        console.log('Debug info: ' + JSON.stringify(error.debugInfo));\n    }\n});\n```"
  name: load(option)
  fullName: load(option)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'load(option?: Word.Interfaces.ParagraphCollectionLoadOptions & Word.Interfaces.CollectionLoadOptions): Word.ParagraphCollection;'
    return:
      type:
      - Word.ParagraphCollection
      description: ''
    parameters:
    - id: option
      description: ''
      type:
      - Word.Interfaces.ParagraphCollectionLoadOptions & Word.Interfaces.CollectionLoadOptions
- uid: word.Word.ParagraphCollection.load_1
  summary: Очереди команды для загрузки указанного свойства объекта. Необходимо вызвать `context.sync()` перед чтением свойства.
  name: load(propertyNames)
  fullName: load(propertyNames)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'load(propertyNames?: string | string[]): Word.ParagraphCollection;'
    return:
      type:
      - Word.ParagraphCollection
      description: ''
    parameters:
    - id: propertyNames
      description: Строка, разделенных запятыми или массив строк, задающих свойства для загрузки.
      type:
      - string | string[]
- uid: word.Word.ParagraphCollection.load_2
  name: load(option)
  fullName: load(option)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'load(option?: OfficeExtension.LoadOption): Word.ParagraphCollection;'
    return:
      type:
      - Word.ParagraphCollection
      description: ''
    parameters:
    - id: option
      description: ''
      type:
      - office.OfficeExtension.LoadOption
- uid: word.Word.ParagraphCollection.toJSON
  name: toJSON()
  fullName: toJSON()
  langs:
  - typeScript
  type: method
  syntax:
    content: 'toJSON(): Word.Interfaces.ParagraphCollectionData;'
    return:
      type:
      - Word.Interfaces.ParagraphCollectionData
      description: ''
- uid: word.Word.ParagraphCollection.track
  summary: Отслеживание объектов для автоматической на основании соседних изменения в документе. Этот вызов это сокращение для context.trackedObjects.add(thisObject). Если вы используете этот объект «.sync» вызовах и за пределами последовательного выполнение пакета «.run» и get «InvalidObjectPath» ошибка при установке свойства или вызова метода на объекте, необходимые для добавления объекта отслеживаемого объекта Сначала создается объект семейства сайтов.
  name: track()
  fullName: track()
  langs:
  - typeScript
  type: method
  syntax:
    content: 'track(): Word.ParagraphCollection;'
    return:
      type:
      - Word.ParagraphCollection
      description: ''
- uid: word.Word.ParagraphCollection.untrack
  summary: Выпуск памяти, связанное с объектом, если ранее отслеживаются. Этот вызов — это сокращение для context.trackedObjects.remove(thisObject). Создавая множество отслеживаемых объектов замедляет ведущего приложения, так помните освободить место на любые объекты, добавлении, после завершения их использования. Необходимо будет вызывать «context.sync()» до выпуска памяти вступает в силу.
  name: untrack()
  fullName: untrack()
  langs:
  - typeScript
  type: method
  syntax:
    content: 'untrack(): Word.ParagraphCollection;'
    return:
      type:
      - Word.ParagraphCollection
      description: ''
