### YamlMime:TSType
name: Word.ContentControlCollection
uid: word!Word.ContentControlCollection:class
package: word!
fullName: Word.ContentControlCollection
summary: >-
  Содержит коллекцию [объектов Word.ContentControl.](xref:word!Word.ContentControl:class) Элементы управления контентом — это связанные и, возможно, помеченные фрагменты документа, выполняющие роль контейнеров для определенных типов содержимого. Отдельные элементы управления контентом могут содержать изображения, таблицы или абзацы форматированного текста. На данный момент поддерживаются только элементы управления содержимым "форматированный текст".


  \[[Набор API: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
remarks: ''
isPreview: false
isDeprecated: false
type: class
properties:
- name: context
  uid: word!Word.ContentControlCollection#context:member
  package: word!
  fullName: context
  summary: Контекст запроса, связанный с объектом. Это связывает процесс надстройки с процессом хост-приложения Office.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'context: RequestContext;'
    return:
      type: <xref uid="word!Word.RequestContext:class" />
- name: items
  uid: word!Word.ContentControlCollection#items:member
  package: word!
  fullName: items
  summary: Получает загруженные дочерние элементы в этой коллекции.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly items: Word.ContentControl[];'
    return:
      type: <xref uid="word!Word.ContentControl:class" />[]
methods:
- name: getById(id)
  uid: word!Word.ContentControlCollection#getById:member(1)
  package: word!
  fullName: getById(id)
  summary: >-
    Возвращает элемент управления содержимым по его идентификатору. Если в этой коллекции нет управления контентом с идентификатором, вы можете сделать ошибку.


    \[[Набор API: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getById(id: number): Word.ContentControl;'
    parameters:
    - id: id
      description: Обязательный параметр. Идентификатор элемента управления контентом.
      type: number
    return:
      type: <xref uid="word!Word.ContentControl:class" />
      description: "\n\n#### <a name=\"examples\"></a>Примеры\n\n```javascript\n// Run a batch operation against the Word object model.\nWord.run(function (context) {\n\n    // Create a proxy object for the content control that contains a specific id.\n    var contentControl = context.document.contentControls.getById(30086310);\n\n    // Queue a command to load the text property for a content control.\n    context.load(contentControl, 'text');\n\n    // Synchronize the document state by executing the queued commands,\n    // and return a promise to indicate task completion.\n    return context.sync().then(function () {\n        console.log('The content control with that Id has been found in this document.');\n    });\n})\n.catch(function (error) {\n    console.log('Error: ' + JSON.stringify(error));\n    if (error instanceof OfficeExtension.Error) {\n        console.log('Debug info: ' + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: getByIdOrNullObject(id)
  uid: word!Word.ContentControlCollection#getByIdOrNullObject:member(1)
  package: word!
  fullName: getByIdOrNullObject(id)
  summary: >-
    Возвращает элемент управления содержимым по его идентификатору. Возвращает объект null, если в этой коллекции нет управления контентом с идентификатором.


    \[[Набор API: WordApi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getByIdOrNullObject(id: number): Word.ContentControl;'
    parameters:
    - id: id
      description: Обязательный параметр. Идентификатор элемента управления контентом.
      type: number
    return:
      type: <xref uid="word!Word.ContentControl:class" />
      description: "\n\n#### <a name=\"examples\"></a>Примеры\n\n```javascript\n// Run a batch operation against the Word object model.\nWord.run(function (context) {\n\n    // Create a proxy object for the content control that contains a specific id.\n    var contentControl = context.document.contentControls.getByIdOrNullObject(30086310);\n\n    // Queue a command to load the text property for a content control.\n    context.load(contentControl, 'text');\n\n    // Synchronize the document state by executing the queued commands,\n    // and return a promise to indicate task completion.\n    return context.sync().then(function () {\n        if (contentControl.isNullObject) {\n            console.log('There is no content control with that ID.')\n        } else {\n            console.log('The content control with that ID has been found in this document.');\n        }\n    });\n})\n.catch(function (error) {\n    console.log('Error: ' + JSON.stringify(error));\n    if (error instanceof OfficeExtension.Error) {\n        console.log('Debug info: ' + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: getByTag(tag)
  uid: word!Word.ContentControlCollection#getByTag:member(1)
  package: word!
  fullName: getByTag(tag)
  summary: >-
    Возвращает элементы управления содержимым с указанным тегом.


    \[[Набор API: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getByTag(tag: string): Word.ContentControlCollection;'
    parameters:
    - id: tag
      description: Обязательный параметр. Тег, установленный на элемент управления контентом.
      type: string
    return:
      type: <xref uid="word!Word.ContentControlCollection:class" />
      description: "\n\n#### <a name=\"examples\"></a>Примеры\n\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/90-scenarios/doc-assembly.yaml\nawait Word.run(async (context) => {\n    let contentControls = context.document.contentControls.getByTag(\"customer\");\n    contentControls.load(\"text\");\n\n    await context.sync();\n\n    for (let i = 0; i < contentControls.items.length; i++) {\n      contentControls.items[i].insertText(\"Fabrikam\", \"Replace\");\n    }\n\n    await context.sync();\n});\n```"
- name: getByTitle(title)
  uid: word!Word.ContentControlCollection#getByTitle:member(1)
  package: word!
  fullName: getByTitle(title)
  summary: >-
    Возвращает элементы управления контентом с указанным заголовком.


    \[[Набор API: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getByTitle(title: string): Word.ContentControlCollection;'
    parameters:
    - id: title
      description: Обязательный параметр. Заголовок элемента управления контентом.
      type: string
    return:
      type: <xref uid="word!Word.ContentControlCollection:class" />
      description: "\n\n#### <a name=\"examples\"></a>Примеры\n\n```javascript\n// Run a batch operation against the Word object model.\nWord.run(function (context) {\n\n    // Create a proxy object for the content controls collection that contains a specific title.\n    var contentControlsWithTitle = context.document.contentControls.getByTitle('Enter Customer Address Here');\n\n    // Queue a command to load the text property for all of content controls with a specific title.\n    context.load(contentControlsWithTitle, 'text');\n\n    // Synchronize the document state by executing the queued commands,\n    // and return a promise to indicate task completion.\n    return context.sync().then(function () {\n        if (contentControlsWithTitle.items.length === 0) {\n            console.log(\n                \"There isn't a content control with a title of 'Enter Customer Address Here' in this document.\");\n        } else {\n            console.log(\n                \"The first content control with the title of 'Enter Customer Address Here' has this text: \" + \n                contentControlsWithTitle.items[0].text);\n        }\n\n    });\n})\n.catch(function (error) {\n    console.log('Error: ' + JSON.stringify(error));\n    if (error instanceof OfficeExtension.Error) {\n        console.log('Debug info: ' + JSON.stringify(error.debugInfo));\n    }\n});\n\n// The Word-Add-in-DocumentAssembly sample has another example of using the getByTitle method.\n// https://github.com/OfficeDev/Word-Add-in-DocumentAssembly\n```"
- name: getByTypes(types)
  uid: word!Word.ContentControlCollection#getByTypes:member(1)
  package: word!
  fullName: getByTypes(types)
  summary: >-
    Получает элементы управления контентом, которые имеют указанные типы и/или подтипы.


    \[[Набор API: WordApi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getByTypes(types: Word.ContentControlType[]): Word.ContentControlCollection;'
    parameters:
    - id: types
      description: Обязательное. Массив типов и(или) подтипов управления контентом.
      type: <xref uid="word!Word.ContentControlType:enum" />[]
    return:
      type: <xref uid="word!Word.ContentControlCollection:class" />
      description: ''
- name: getFirst()
  uid: word!Word.ContentControlCollection#getFirst:member(1)
  package: word!
  fullName: getFirst()
  summary: >-
    Возвращает первый элемент управления содержимым в коллекции. Бросает ошибку, если эта коллекция пуста.


    \[[Набор API: WordApi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getFirst(): Word.ContentControl;'
    return:
      type: <xref uid="word!Word.ContentControl:class" />
      description: "\n\n#### <a name=\"examples\"></a>Примеры\n\n```javascript\n// Run a batch operation against the Word object model.\nWord.run(function (context) {\n\n    // Create a proxy object for the first content control in the document.\n    var contentControl = context.document.contentControls.getFirstOrNullObject();\n\n    // Queue a command to load the text property for a content control.\n    context.load(contentControl, 'text');\n\n    // Synchronize the document state by executing the queued commands,\n    // and return a promise to indicate task completion.\n    return context.sync().then(function () {\n        if (contentControl.isNullObject) {\n            console.log('There are no content controls in this document.')\n        } else {\n            console.log('The first content control has been found in this document.');\n        }\n    });\n})\n.catch(function (error) {\n    console.log('Error: ' + JSON.stringify(error));\n    if (error instanceof OfficeExtension.Error) {\n        console.log('Debug info: ' + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: getFirstOrNullObject()
  uid: word!Word.ContentControlCollection#getFirstOrNullObject:member(1)
  package: word!
  fullName: getFirstOrNullObject()
  summary: >-
    Возвращает первый элемент управления содержимым в коллекции. Возвращает объект null, если эта коллекция пуста.


    \[[Набор API: WordApi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getFirstOrNullObject(): Word.ContentControl;'
    return:
      type: <xref uid="word!Word.ContentControl:class" />
      description: ''
- name: getItem(index)
  uid: word!Word.ContentControlCollection#getItem:member(1)
  package: word!
  fullName: getItem(index)
  summary: >-
    Получает управление контентом по индексу в коллекции.


    \[[Набор API: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getItem(index: number): Word.ContentControl;'
    parameters:
    - id: index
      description: Индекс.
      type: number
    return:
      type: <xref uid="word!Word.ContentControl:class" />
      description: ''
- name: load(options)
  uid: word!Word.ContentControlCollection#load:member(1)
  package: word!
  fullName: load(options)
  summary: Добавляет в очередь команду для загрузки указанных свойств объекта. Перед чтением свойств требуется вызвать метод `context.sync()`.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'load(options?: Word.Interfaces.ContentControlCollectionLoadOptions & Word.Interfaces.CollectionLoadOptions): Word.ContentControlCollection;'
    parameters:
    - id: options
      description: Предоставляет параметры, для которых необходимо загрузить свойства объекта.
      type: <xref uid="word!Word.Interfaces.ContentControlCollectionLoadOptions:interface" /> & <xref uid="word!Word.Interfaces.CollectionLoadOptions:interface" />
    return:
      type: <xref uid="word!Word.ContentControlCollection:class" />
      description: "\n\n#### <a name=\"examples\"></a>Примеры\n\n```javascript\n// Run a batch operation against the Word object model.\nWord.run(function (context) {\n\n    // Create a proxy object for the content controls collection.\n    var contentControls = context.document.contentControls;\n\n    // Queue a command to load the id property for all of the content controls.\n    context.load(contentControls, 'id');\n\n    // Synchronize the document state by executing the queued commands,\n    // and return a promise to indicate task completion.\n    return context.sync().then(function () {\n        if (contentControls.items.length === 0) {\n            console.log('No content control found.');\n        }\n        else {\n            // Queue a command to load the properties on the first content control.\n            contentControls.items[0].load(  'appearance,' +\n                                            'cannotDelete,' +\n                                            'cannotEdit,' +\n                                            'color,' +\n                                            'id,' +\n                                            'placeHolderText,' +\n                                            'removeWhenEdited,' +\n                                            'title,' +\n                                            'text,' +\n                                            'type,' +\n                                            'style,' +\n                                            'tag,' +\n                                            'font/size,' +\n                                            'font/name,' +\n                                            'font/color');\n\n            // Synchronize the document state by executing the queued commands,\n            // and return a promise to indicate task completion.\n            return context.sync()\n                .then(function () {\n                    console.log('Property values of the first content control:' +\n                        '   ----- appearance: ' + contentControls.items[0].appearance +\n                        '   ----- cannotDelete: ' + contentControls.items[0].cannotDelete +\n                        '   ----- cannotEdit: ' + contentControls.items[0].cannotEdit +\n                        '   ----- color: ' + contentControls.items[0].color +\n                        '   ----- id: ' + contentControls.items[0].id +\n                        '   ----- placeHolderText: ' + contentControls.items[0].placeholderText +\n                        '   ----- removeWhenEdited: ' + contentControls.items[0].removeWhenEdited +\n                        '   ----- title: ' + contentControls.items[0].title +\n                        '   ----- text: ' + contentControls.items[0].text +\n                        '   ----- type: ' + contentControls.items[0].type +\n                        '   ----- style: ' + contentControls.items[0].style +\n                        '   ----- tag: ' + contentControls.items[0].tag +\n                        '   ----- font size: ' + contentControls.items[0].font.size +\n                        '   ----- font name: ' + contentControls.items[0].font.name +\n                        '   ----- font color: ' + contentControls.items[0].font.color);\n            });\n        }\n    });\n})\n.catch(function (error) {\n    console.log('Error: ' + JSON.stringify(error));\n    if (error instanceof OfficeExtension.Error) {\n        console.log('Debug info: ' + JSON.stringify(error.debugInfo));\n    }\n});\n\n// The Silly stories add-in sample shows how the load method is used\n// to load the content control collection with the tag and title properties.\n// https://aka.ms/sillystorywordaddin\n```"
- name: load(propertyNames)
  uid: word!Word.ContentControlCollection#load:member(2)
  package: word!
  fullName: load(propertyNames)
  summary: Добавляет в очередь команду для загрузки указанных свойств объекта. Перед чтением свойств требуется вызвать метод `context.sync()`.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'load(propertyNames?: string | string[]): Word.ContentControlCollection;'
    parameters:
    - id: propertyNames
      description: Запятая или массив строк, которые указывают свойства для загрузки.
      type: string | string[]
    return:
      type: <xref uid="word!Word.ContentControlCollection:class" />
      description: ''
- name: load(propertyNamesAndPaths)
  uid: word!Word.ContentControlCollection#load:member(3)
  package: word!
  fullName: load(propertyNamesAndPaths)
  summary: Добавляет в очередь команду для загрузки указанных свойств объекта. Перед чтением свойств требуется вызвать метод `context.sync()`.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'load(propertyNamesAndPaths?: OfficeExtension.LoadOption): Word.ContentControlCollection;'
    parameters:
    - id: propertyNamesAndPaths
      description: '`propertyNamesAndPaths.select` является запятой, которая указывает свойства для загрузки, и является строкой, запятой, которая указывает свойства навигации для `propertyNamesAndPaths.expand` загрузки.'
      type: <xref uid="office!OfficeExtension.LoadOption:interface" />
    return:
      type: <xref uid="word!Word.ContentControlCollection:class" />
      description: ''
- name: toJSON()
  uid: word!Word.ContentControlCollection#toJSON:member(1)
  package: word!
  fullName: toJSON()
  summary: Переопределяет метод JavaScript, чтобы обеспечить более полезный выход, когда объект `toJSON()` API передается `JSON.stringify()`<!-- -->. (`JSON.stringify`<!-- -->, в свою очередь, вызывает метод объекта, который `toJSON` передается ему.) Если исходный объект является объектом API, метод возвращает обычный `Word.ContentControlCollection` `toJSON` объект JavaScript (введите как `Word.Interfaces.ContentControlCollectionData`<!-- -->), содержащий массив "items" с мелкими копиями любых загруженных свойств из элементов коллекции.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'toJSON(): Word.Interfaces.ContentControlCollectionData;'
    return:
      type: <xref uid="word!Word.Interfaces.ContentControlCollectionData:interface" />
      description: ''
- name: track()
  uid: word!Word.ContentControlCollection#track:member(1)
  package: word!
  fullName: track()
  summary: Отслеживает объект для автоматической корректировки с учетом окружающих изменений в документе. Этот вызов является кратким для `context.trackedObjects.add(thisObject)`<!-- -->. Если вы используете этот объект во время вызовов и вне последовательного выполнения пакета ".run" и получаете ошибку "InvalidObjectPath" при настройке свойства или вызове метода на объекте, необходимо добавить объект в отслеживаемую коллекцию объектов при первом создании `.sync` объекта.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'track(): Word.ContentControlCollection;'
    return:
      type: <xref uid="word!Word.ContentControlCollection:class" />
      description: ''
- name: untrack()
  uid: word!Word.ContentControlCollection#untrack:member(1)
  package: word!
  fullName: untrack()
  summary: Освобождает память, связанную с этим объектом, если он ранее отслеживался. Этот вызов является коротким для `context.trackedObjects.remove(thisObject)`<!-- -->. Наличие большого количества отслеживаемых объектов замедляет ведущее приложение, поэтому не забывайте освобождать любые добавленные объекты после завершения их использования. Вам потребуется позвонить до `context.sync()` того, как вступает в силу выпуск памяти.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'untrack(): Word.ContentControlCollection;'
    return:
      type: <xref uid="word!Word.ContentControlCollection:class" />
      description: ''
extends: <xref uid="office!OfficeExtension.ClientObject:class" />
metadata:
  ms.openlocfilehash: 4ab55ace34274dc209b88aa971194a1b8e177887
  ms.sourcegitcommit: a8a86cfcaff5ad7dacc653d63502c76b1fedbebe
  ms.translationtype: MT
  ms.contentlocale: ru-RU
  ms.lasthandoff: 03/26/2021
  ms.locfileid: "51357901"
