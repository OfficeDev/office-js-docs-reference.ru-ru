### YamlMime:UniversalReference
items:
  - uid: 'word!Word.Body:class'
    summary: |-
      <span data-ttu-id="1ecf0-101">Представляет содержимое документа или раздела.</span><span class="sxs-lookup"><span data-stu-id="1ecf0-101">Represents the body of a document or a section.</span></span>

      <span data-ttu-id="1ecf0-102">\[[Набор API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="1ecf0-102">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: Word.Body
    fullName: Word.Body
    langs:
      - typeScript
    type: class
    extends:
      - 'word!OfficeExtension.ClientObject:class'
    package: word!
    children:
      - 'word!Word.Body#clear:member(1)'
      - 'word!Word.Body#contentControls:member'
      - 'word!Word.Body#context:member'
      - 'word!Word.Body#font:member'
      - 'word!Word.Body#getHtml:member(1)'
      - 'word!Word.Body#getOoxml:member(1)'
      - 'word!Word.Body#getRange:member(1)'
      - 'word!Word.Body#getRange:member(2)'
      - 'word!Word.Body#inlinePictures:member'
      - 'word!Word.Body#insertBreak:member(1)'
      - 'word!Word.Body#insertBreak:member(2)'
      - 'word!Word.Body#insertContentControl:member(1)'
      - 'word!Word.Body#insertFileFromBase64:member(1)'
      - 'word!Word.Body#insertFileFromBase64:member(2)'
      - 'word!Word.Body#insertHtml:member(1)'
      - 'word!Word.Body#insertHtml:member(2)'
      - 'word!Word.Body#insertInlinePictureFromBase64:member(1)'
      - 'word!Word.Body#insertInlinePictureFromBase64:member(2)'
      - 'word!Word.Body#insertOoxml:member(1)'
      - 'word!Word.Body#insertOoxml:member(2)'
      - 'word!Word.Body#insertParagraph:member(1)'
      - 'word!Word.Body#insertParagraph:member(2)'
      - 'word!Word.Body#insertTable:member(1)'
      - 'word!Word.Body#insertTable:member(2)'
      - 'word!Word.Body#insertText:member(1)'
      - 'word!Word.Body#insertText:member(2)'
      - 'word!Word.Body#lists:member'
      - 'word!Word.Body#load:member(1)'
      - 'word!Word.Body#load:member(2)'
      - 'word!Word.Body#load:member(3)'
      - 'word!Word.Body#paragraphs:member'
      - 'word!Word.Body#parentBody:member'
      - 'word!Word.Body#parentBodyOrNullObject:member'
      - 'word!Word.Body#parentContentControl:member'
      - 'word!Word.Body#parentContentControlOrNullObject:member'
      - 'word!Word.Body#parentSection:member'
      - 'word!Word.Body#parentSectionOrNullObject:member'
      - 'word!Word.Body#search:member(1)'
      - 'word!Word.Body#select:member(1)'
      - 'word!Word.Body#select:member(2)'
      - 'word!Word.Body#set:member(1)'
      - 'word!Word.Body#set:member(2)'
      - 'word!Word.Body#style:member'
      - 'word!Word.Body#styleBuiltIn:member'
      - 'word!Word.Body#tables:member'
      - 'word!Word.Body#text:member'
      - 'word!Word.Body#toJSON:member(1)'
      - 'word!Word.Body#track:member(1)'
      - 'word!Word.Body#type:member'
      - 'word!Word.Body#untrack:member(1)'
  - uid: 'word!Word.Body#clear:member(1)'
    summary: |-
      <span data-ttu-id="1ecf0-103">Очищает объект содержимого.</span><span class="sxs-lookup"><span data-stu-id="1ecf0-103">Clears the contents of the body object.</span></span> <span data-ttu-id="1ecf0-104">Пользователь может отменить операцию для очищенного содержимого.</span><span class="sxs-lookup"><span data-stu-id="1ecf0-104">The user can perform the undo operation on the cleared content.</span></span>

      <span data-ttu-id="1ecf0-105">\[[Набор API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="1ecf0-105">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: clear()
    fullName: clear()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'clear(): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a><span data-ttu-id="1ecf0-106">Примеры</span><span class="sxs-lookup"><span data-stu-id="1ecf0-106">Examples</span></span>

          ```javascript
          // Run a batch operation against the Word object model.
          Word.run(function (context) {

              // Create a proxy object for the document body.
              var body = context.document.body;

              // Queue a command to clear the contents of the body.
              body.clear();

              // Synchronize the document state by executing the queued commands,
              // and return a promise to indicate task completion.
              return context.sync().then(function () {
                  console.log('Cleared the body contents.');
              });
          })
          .catch(function (error) {
              console.log("Error: " + JSON.stringify(error));
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });

          // The Silly stories add-in sample shows how the 
          // clear method can be used to clear the contents of a document.
          // https://aka.ms/sillystorywordaddin
          ```
  - uid: 'word!Word.Body#contentControls:member'
    summary: |-
      <span data-ttu-id="1ecf0-107">Возвращает коллекцию объектов элемента управления содержимым "форматированный текст" в тексте.</span><span class="sxs-lookup"><span data-stu-id="1ecf0-107">Gets the collection of rich text content control objects in the body.</span></span> <span data-ttu-id="1ecf0-108">Только для чтения.</span><span class="sxs-lookup"><span data-stu-id="1ecf0-108">Read-only.</span></span>

      <span data-ttu-id="1ecf0-109">\[[Набор API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="1ecf0-109">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: contentControls
    fullName: contentControls
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly contentControls: Word.ContentControlCollection;'
      return:
        type:
          - 'word!Word.ContentControlCollection:class'
  - uid: 'word!Word.Body#context:member'
    summary: '<span data-ttu-id="1ecf0-110">Контекст запроса, связанный с объектом.</span><span class="sxs-lookup"><span data-stu-id="1ecf0-110">The request context associated with the object.</span></span> <span data-ttu-id="1ecf0-111">Это подсоединяет процесс надстройки к процессу ведущего приложения Office.</span><span class="sxs-lookup"><span data-stu-id="1ecf0-111">This connects the add-in''s process to the Office host application''s process.</span></span>'
    name: context
    fullName: context
    langs:
      - typeScript
    type: property
    syntax:
      content: 'context: RequestContext;'
      return:
        type:
          - 'word!Word.RequestContext:class'
  - uid: 'word!Word.Body#font:member'
    summary: |-
      <span data-ttu-id="1ecf0-112">Получает формат текста, указанный для содержимого документа или раздела.</span><span class="sxs-lookup"><span data-stu-id="1ecf0-112">Gets the text format of the body.</span></span> <span data-ttu-id="1ecf0-113">Используйте этот параметр для получения и задания имени шрифта, размера, цвета и других свойств.</span><span class="sxs-lookup"><span data-stu-id="1ecf0-113">Use this to get and set font name, size, color and other properties.</span></span> <span data-ttu-id="1ecf0-114">Только для чтения.</span><span class="sxs-lookup"><span data-stu-id="1ecf0-114">Read-only.</span></span>

      <span data-ttu-id="1ecf0-115">\[[Набор API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="1ecf0-115">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: font
    fullName: font
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly font: Word.Font;'
      return:
        type:
          - 'word!Word.Font:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="1ecf0-116">Примеры</span><span class="sxs-lookup"><span data-stu-id="1ecf0-116">Examples</span></span>

          ```javascript
          // Get the style and the font size, font name, and font color properties on the body object.
          // Run a batch operation against the Word object model.
          Word.run(function (context) {

              // Create a proxy object for the document body.
              var body = context.document.body;

              // Queue a command to load font and style information for the document body.
              context.load(body, 'font/size, font/name, font/color, style');

              // Synchronize the document state by executing the queued commands,
              // and return a promise to indicate task completion.
              return context.sync().then(function () {
                  // Show the results of the load method. Here we show the
                  // property values on the body object.
                  var results = 'Font size: ' + body.font.size +
                                '; Font name: ' + body.font.name +
                                '; Font color: ' + body.font.color +
                                '; Body style: ' + body.style;

                  console.log(results);
              });
          })
          .catch(function (error) {
              console.log('Error: ' + JSON.stringify(error));
              if (error instanceof OfficeExtension.Error) {
                  console.log('Debug info: ' + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: 'word!Word.Body#getHtml:member(1)'
    summary: |-
      <span data-ttu-id="1ecf0-117">Возвращает HTML-представление объекта Body.</span><span class="sxs-lookup"><span data-stu-id="1ecf0-117">Gets an HTML representation of the body object.</span></span> <span data-ttu-id="1ecf0-118">При отображении на веб-странице или в средстве просмотра HTML форматирование будет близким, но не точным, соответствующим формату документа.</span><span class="sxs-lookup"><span data-stu-id="1ecf0-118">When rendered in a web page or HTML viewer, the formatting will be a close, but not exact, match to the formatting of the document.</span></span> <span data-ttu-id="1ecf0-119">Этот метод не возвращает точно такой же HTML-код для одного и того же документа на различных платформах (Windows, Mac и т. д.).</span><span class="sxs-lookup"><span data-stu-id="1ecf0-119">This method does not return the exact same HTML for the same document on different platforms (Windows, Mac, etc.).</span></span> <span data-ttu-id="1ecf0-120">Если вам нужна точная точность или согласованность на различных платформах `Body.getOoxml()` , используйте и преобразуйте возвращенный XML в HTML.</span><span class="sxs-lookup"><span data-stu-id="1ecf0-120">If you need exact fidelity, or consistency across platforms, use `Body.getOoxml()` and convert the returned XML to HTML.</span></span>

      <span data-ttu-id="1ecf0-121">\[[Набор API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="1ecf0-121">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: getHtml()
    fullName: getHtml()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getHtml(): OfficeExtension.ClientResult<string>;'
      return:
        type:
          - 'word!Word.Body#getHtml~0:complex'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="1ecf0-122">Примеры</span><span class="sxs-lookup"><span data-stu-id="1ecf0-122">Examples</span></span>

          ```javascript
          // Run a batch operation against the Word object model.
          Word.run(function (context) {

              // Create a proxy object for the document body.
              var body = context.document.body;

              // Queue a command to get the HTML contents of the body.
              var bodyHTML = body.getHtml();

              // Synchronize the document state by executing the queued commands,
              // and return a promise to indicate task completion.
              return context.sync().then(function () {
                  console.log("Body HTML contents: " + bodyHTML.value);
              });
          })
          .catch(function (error) {
              console.log("Error: " + JSON.stringify(error));
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: 'word!Word.Body#getOoxml:member(1)'
    summary: |-
      <span data-ttu-id="1ecf0-123">Возвращает OOXML-представление (Office Open XML) объекта содержимого.</span><span class="sxs-lookup"><span data-stu-id="1ecf0-123">Gets the OOXML (Office Open XML) representation of the body object.</span></span>

      <span data-ttu-id="1ecf0-124">\[[Набор API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="1ecf0-124">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: getOoxml()
    fullName: getOoxml()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getOoxml(): OfficeExtension.ClientResult<string>;'
      return:
        type:
          - 'word!Word.Body#getOoxml~0:complex'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="1ecf0-125">Примеры</span><span class="sxs-lookup"><span data-stu-id="1ecf0-125">Examples</span></span>

          ```javascript
          // Run a batch operation against the Word object model.
          Word.run(function (context) {

              // Create a proxy object for the document body.
              var body = context.document.body;

              // Queue a command to get the OOXML contents of the body.
              var bodyOOXML = body.getOoxml();

              // Synchronize the document state by executing the queued commands,
              // and return a promise to indicate task completion.
              return context.sync().then(function () {
                  console.log("Body OOXML contents: " + bodyOOXML.value);
              });
          })
          .catch(function (error) {
              console.log("Error: " + JSON.stringify(error));
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: 'word!Word.Body#getRange:member(1)'
    summary: |-
      <span data-ttu-id="1ecf0-126">Возвращает весь основной текст (либо его начальную или конечную точку) в виде диапазона.</span><span class="sxs-lookup"><span data-stu-id="1ecf0-126">Gets the whole body, or the starting or ending point of the body, as a range.</span></span>

      <span data-ttu-id="1ecf0-127">\[[Набор API: WordApi 1,3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="1ecf0-127">\[ [API set: WordApi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: getRange(rangeLocation)
    fullName: getRange(rangeLocation)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getRange(rangeLocation?: Word.RangeLocation): Word.Range;'
      return:
        type:
          - 'word!Word.Range:class'
        description: ''
      parameters:
        - id: rangeLocation
          description: '<span data-ttu-id="1ecf0-128">Необязательно.</span><span class="sxs-lookup"><span data-stu-id="1ecf0-128">Optional.</span></span> <span data-ttu-id="1ecf0-129">Допустимые значения: "целое", "начало", "конец", "после" или "содержимое".</span><span class="sxs-lookup"><span data-stu-id="1ecf0-129">The range location can be ''Whole'', ''Start'', ''End'', ''After'', or ''Content''.</span></span>'
          type:
            - 'word!Word.RangeLocation:enum'
  - uid: 'word!Word.Body#getRange:member(2)'
    summary: |-
      <span data-ttu-id="1ecf0-130">Возвращает весь основной текст (либо его начальную или конечную точку) в виде диапазона.</span><span class="sxs-lookup"><span data-stu-id="1ecf0-130">Gets the whole body, or the starting or ending point of the body, as a range.</span></span>

      <span data-ttu-id="1ecf0-131">\[[Набор API: WordApi 1,3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="1ecf0-131">\[ [API set: WordApi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: getRange(rangeLocationString)
    fullName: getRange(rangeLocationString)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getRange(rangeLocationString?: "Whole" | "Start" | "End" | "Before" | "After" | "Content"): Word.Range;'
      return:
        type:
          - 'word!Word.Range:class'
        description: ''
      parameters:
        - id: rangeLocationString
          description: '<span data-ttu-id="1ecf0-132">Необязательно.</span><span class="sxs-lookup"><span data-stu-id="1ecf0-132">Optional.</span></span> <span data-ttu-id="1ecf0-133">Допустимые значения: "целое", "начало", "конец", "после" или "содержимое".</span><span class="sxs-lookup"><span data-stu-id="1ecf0-133">The range location can be ''Whole'', ''Start'', ''End'', ''After'', or ''Content''.</span></span>'
          type:
            - '"Whole" | "Start" | "End" | "Before" | "After" | "Content"'
  - uid: 'word!Word.Body#inlinePictures:member'
    summary: |-
      <span data-ttu-id="1ecf0-134">Получает коллекцию объектов коллекцию inlinepicture в тексте.</span><span class="sxs-lookup"><span data-stu-id="1ecf0-134">Gets the collection of InlinePicture objects in the body.</span></span> <span data-ttu-id="1ecf0-135">Коллекция не содержит плавающие рисунки.</span><span class="sxs-lookup"><span data-stu-id="1ecf0-135">The collection does not include floating images.</span></span> <span data-ttu-id="1ecf0-136">Только для чтения.</span><span class="sxs-lookup"><span data-stu-id="1ecf0-136">Read-only.</span></span>

      <span data-ttu-id="1ecf0-137">\[[Набор API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="1ecf0-137">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: inlinePictures
    fullName: inlinePictures
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly inlinePictures: Word.InlinePictureCollection;'
      return:
        type:
          - 'word!Word.InlinePictureCollection:class'
  - uid: 'word!Word.Body#insertBreak:member(1)'
    summary: |-
      <span data-ttu-id="1ecf0-138">Вставляет разрыв в указанном расположении в основном документе.</span><span class="sxs-lookup"><span data-stu-id="1ecf0-138">Inserts a break at the specified location in the main document.</span></span> <span data-ttu-id="1ecf0-139">Возможные значения InsertLocation: Start или End.</span><span class="sxs-lookup"><span data-stu-id="1ecf0-139">The insertLocation value can be 'Start' or 'End'.</span></span>

      <span data-ttu-id="1ecf0-140">\[[Набор API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="1ecf0-140">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: 'insertBreak(breakType, insertLocation)'
    fullName: 'insertBreak(breakType, insertLocation)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertBreak(breakType: Word.BreakType, insertLocation: Word.InsertLocation): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a><span data-ttu-id="1ecf0-141">Примеры</span><span class="sxs-lookup"><span data-stu-id="1ecf0-141">Examples</span></span>

          ```javascript
          // Run a batch operation against the Word object model.
          Word.run(function (ctx) {

              // Create a proxy object for the document body.
              var body = ctx.document.body;

              // Queue a command to insert a page break at the start of the document body.
              body.insertBreak(Word.BreakType.page, Word.InsertLocation.start);

              // Synchronize the document state by executing the queued commands,
              // and return a promise to indicate task completion.
              return ctx.sync().then(function () {
                  console.log('Added a page break at the start of the document body.');
              });
          })
          .catch(function (error) {
              console.log("Error: " + JSON.stringify(error));
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: breakType
          description: '<span data-ttu-id="1ecf0-142">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="1ecf0-142">Required.</span></span> <span data-ttu-id="1ecf0-143">Тип разрыва, который необходимо добавить в содержимое.</span><span class="sxs-lookup"><span data-stu-id="1ecf0-143">The break type to add to the body.</span></span>'
          type:
            - 'word!Word.BreakType:enum'
        - id: insertLocation
          description: '<span data-ttu-id="1ecf0-144">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="1ecf0-144">Required.</span></span> <span data-ttu-id="1ecf0-145">Возможные значения: Start и End.</span><span class="sxs-lookup"><span data-stu-id="1ecf0-145">The value can be ''Start'' or ''End''.</span></span>'
          type:
            - 'word!Word.InsertLocation:enum'
  - uid: 'word!Word.Body#insertBreak:member(2)'
    summary: |-
      <span data-ttu-id="1ecf0-146">Вставляет разрыв в указанном расположении в основном документе.</span><span class="sxs-lookup"><span data-stu-id="1ecf0-146">Inserts a break at the specified location in the main document.</span></span> <span data-ttu-id="1ecf0-147">Возможные значения InsertLocation: Start или End.</span><span class="sxs-lookup"><span data-stu-id="1ecf0-147">The insertLocation value can be 'Start' or 'End'.</span></span>

      <span data-ttu-id="1ecf0-148">\[[Набор API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="1ecf0-148">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: 'insertBreak(breakTypeString, insertLocation)'
    fullName: 'insertBreak(breakTypeString, insertLocation)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertBreak(breakTypeString: "Page" | "Next" | "SectionNext" | "SectionContinuous" | "SectionEven" | "SectionOdd" | "Line", insertLocation: "Before" | "After" | "Start" | "End" | "Replace"): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: breakTypeString
          description: '<span data-ttu-id="1ecf0-149">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="1ecf0-149">Required.</span></span> <span data-ttu-id="1ecf0-150">Тип разрыва, который необходимо добавить в содержимое.</span><span class="sxs-lookup"><span data-stu-id="1ecf0-150">The break type to add to the body.</span></span>'
          type:
            - '"Page" | "Next" | "SectionNext" | "SectionContinuous" | "SectionEven" | "SectionOdd" | "Line"'
        - id: insertLocation
          description: '<span data-ttu-id="1ecf0-151">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="1ecf0-151">Required.</span></span> <span data-ttu-id="1ecf0-152">Возможные значения: Start и End.</span><span class="sxs-lookup"><span data-stu-id="1ecf0-152">The value can be ''Start'' or ''End''.</span></span>'
          type:
            - '"Before" | "After" | "Start" | "End" | "Replace"'
  - uid: 'word!Word.Body#insertContentControl:member(1)'
    summary: |-
      <span data-ttu-id="1ecf0-153">Включает объект содержимого в элемент управления форматированным текстом.</span><span class="sxs-lookup"><span data-stu-id="1ecf0-153">Wraps the body object with a Rich Text content control.</span></span>

      <span data-ttu-id="1ecf0-154">\[[Набор API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="1ecf0-154">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: insertContentControl()
    fullName: insertContentControl()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertContentControl(): Word.ContentControl;'
      return:
        type:
          - 'word!Word.ContentControl:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="1ecf0-155">Примеры</span><span class="sxs-lookup"><span data-stu-id="1ecf0-155">Examples</span></span>

          ```javascript
          // Run a batch operation against the Word object model.
          Word.run(function (context) {

              // Create a proxy object for the document body.
              var body = context.document.body;

              // Queue a command to wrap the body in a content control.
              body.insertContentControl();

              // Synchronize the document state by executing the queued commands,
              // and return a promise to indicate task completion.
              return context.sync().then(function () {
                  console.log('Wrapped the body in a content control.');
              });
          })
          .catch(function (error) {
              console.log('Error: ' + JSON.stringify(error));
              if (error instanceof OfficeExtension.Error) {
                  console.log('Debug info: ' + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: 'word!Word.Body#insertFileFromBase64:member(1)'
    summary: |-
      <span data-ttu-id="1ecf0-156">Вставляет документ в содержимое в заданном расположении.</span><span class="sxs-lookup"><span data-stu-id="1ecf0-156">Inserts a document into the body at the specified location.</span></span> <span data-ttu-id="1ecf0-157">Возможные значения insertLocation: Replace, Start и End.</span><span class="sxs-lookup"><span data-stu-id="1ecf0-157">The insertLocation value can be 'Replace', 'Start', or 'End'.</span></span>

      <span data-ttu-id="1ecf0-158">\[[Набор API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="1ecf0-158">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: 'insertFileFromBase64(base64File, insertLocation)'
    fullName: 'insertFileFromBase64(base64File, insertLocation)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertFileFromBase64(base64File: string, insertLocation: Word.InsertLocation): Word.Range;'
      return:
        type:
          - 'word!Word.Range:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="1ecf0-159">Примеры</span><span class="sxs-lookup"><span data-stu-id="1ecf0-159">Examples</span></span>

          ```javascript
          // Run a batch operation against the Word object model.
          Word.run(function (context) {

              // Create a proxy object for the document body.
              var body = context.document.body;

              // Queue a command to insert base64 encoded .docx at the beginning of the content body.
              // You will need to implement getBase64() to pass in a string of a base64 encoded docx file.
              body.insertFileFromBase64(getBase64(), Word.InsertLocation.start);

              // Synchronize the document state by executing the queued commands,
              // and return a promise to indicate task completion.
              return context.sync().then(function () {
                  console.log('Added base64 encoded text to the beginning of the document body.');
              });
          })
          .catch(function (error) {
              console.log('Error: ' + JSON.stringify(error));
              if (error instanceof OfficeExtension.Error) {
                  console.log('Debug info: ' + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: base64File
          description: <span data-ttu-id="1ecf0-160">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="1ecf0-160">Required.</span></span> <span data-ttu-id="1ecf0-161">Содержимое docx файлов в кодировке Base64.</span><span class="sxs-lookup"><span data-stu-id="1ecf0-161">The base64 encoded content of a .docx file.</span></span>
          type:
            - string
        - id: insertLocation
          description: '<span data-ttu-id="1ecf0-162">Обязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="1ecf0-162">Required.</span></span> <span data-ttu-id="1ecf0-163">Возможные значения: Replace, Start или End.</span><span class="sxs-lookup"><span data-stu-id="1ecf0-163">The value can be ''Replace'', ''Start'', or ''End''.</span></span>'
          type:
            - 'word!Word.InsertLocation:enum'
  - uid: 'word!Word.Body#insertFileFromBase64:member(2)'
    summary: |-
      <span data-ttu-id="1ecf0-164">Вставляет документ в содержимое в заданном расположении.</span><span class="sxs-lookup"><span data-stu-id="1ecf0-164">Inserts a document into the body at the specified location.</span></span> <span data-ttu-id="1ecf0-165">Возможные значения insertLocation: Replace, Start и End.</span><span class="sxs-lookup"><span data-stu-id="1ecf0-165">The insertLocation value can be 'Replace', 'Start', or 'End'.</span></span>

      <span data-ttu-id="1ecf0-166">\[[Набор API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="1ecf0-166">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: 'insertFileFromBase64(base64File, insertLocationString)'
    fullName: 'insertFileFromBase64(base64File, insertLocationString)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertFileFromBase64(base64File: string, insertLocationString: "Before" | "After" | "Start" | "End" | "Replace"): Word.Range;'
      return:
        type:
          - 'word!Word.Range:class'
        description: ''
      parameters:
        - id: base64File
          description: <span data-ttu-id="1ecf0-167">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="1ecf0-167">Required.</span></span> <span data-ttu-id="1ecf0-168">Содержимое docx файлов в кодировке Base64.</span><span class="sxs-lookup"><span data-stu-id="1ecf0-168">The base64 encoded content of a .docx file.</span></span>
          type:
            - string
        - id: insertLocationString
          description: '<span data-ttu-id="1ecf0-169">Обязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="1ecf0-169">Required.</span></span> <span data-ttu-id="1ecf0-170">Возможные значения: Replace, Start или End.</span><span class="sxs-lookup"><span data-stu-id="1ecf0-170">The value can be ''Replace'', ''Start'', or ''End''.</span></span>'
          type:
            - '"Before" | "After" | "Start" | "End" | "Replace"'
  - uid: 'word!Word.Body#insertHtml:member(1)'
    summary: |-
      <span data-ttu-id="1ecf0-171">Вставляет HTML-код в указанном расположении.</span><span class="sxs-lookup"><span data-stu-id="1ecf0-171">Inserts HTML at the specified location.</span></span> <span data-ttu-id="1ecf0-172">Возможные значения insertLocation: Replace, Start и End.</span><span class="sxs-lookup"><span data-stu-id="1ecf0-172">The insertLocation value can be 'Replace', 'Start', or 'End'.</span></span>

      <span data-ttu-id="1ecf0-173">\[[Набор API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="1ecf0-173">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: 'insertHtml(html, insertLocation)'
    fullName: 'insertHtml(html, insertLocation)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertHtml(html: string, insertLocation: Word.InsertLocation): Word.Range;'
      return:
        type:
          - 'word!Word.Range:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="1ecf0-174">Примеры</span><span class="sxs-lookup"><span data-stu-id="1ecf0-174">Examples</span></span>

          ```javascript
          // Run a batch operation against the Word object model.
          Word.run(function (context) {

              // Create a proxy object for the document body.
              var body = context.document.body;

              // Queue a command to insert HTML in to the beginning of the body.
              body.insertHtml(
                  '<strong>This is text inserted with body.insertHtml()</strong>', Word.InsertLocation.start);

              // Synchronize the document state by executing the queued commands,
              // and return a promise to indicate task completion.
              return context.sync().then(function () {
                  console.log('HTML added to the beginning of the document body.');
              });
          })
          .catch(function (error) {
              console.log('Error: ' + JSON.stringify(error));
              if (error instanceof OfficeExtension.Error) {
                  console.log('Debug info: ' + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: html
          description: '<span data-ttu-id="1ecf0-175">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="1ecf0-175">Required.</span></span> <span data-ttu-id="1ecf0-176">HTML-код, который необходимо вставить в документ.</span><span class="sxs-lookup"><span data-stu-id="1ecf0-176">The HTML to be inserted in the document.</span></span>'
          type:
            - string
        - id: insertLocation
          description: '<span data-ttu-id="1ecf0-177">Обязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="1ecf0-177">Required.</span></span> <span data-ttu-id="1ecf0-178">Возможные значения: Replace, Start или End.</span><span class="sxs-lookup"><span data-stu-id="1ecf0-178">The value can be ''Replace'', ''Start'', or ''End''.</span></span>'
          type:
            - 'word!Word.InsertLocation:enum'
  - uid: 'word!Word.Body#insertHtml:member(2)'
    summary: |-
      <span data-ttu-id="1ecf0-179">Вставляет HTML-код в указанном расположении.</span><span class="sxs-lookup"><span data-stu-id="1ecf0-179">Inserts HTML at the specified location.</span></span> <span data-ttu-id="1ecf0-180">Возможные значения insertLocation: Replace, Start и End.</span><span class="sxs-lookup"><span data-stu-id="1ecf0-180">The insertLocation value can be 'Replace', 'Start', or 'End'.</span></span>

      <span data-ttu-id="1ecf0-181">\[[Набор API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="1ecf0-181">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: 'insertHtml(html, insertLocationString)'
    fullName: 'insertHtml(html, insertLocationString)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertHtml(html: string, insertLocationString: "Before" | "After" | "Start" | "End" | "Replace"): Word.Range;'
      return:
        type:
          - 'word!Word.Range:class'
        description: ''
      parameters:
        - id: html
          description: '<span data-ttu-id="1ecf0-182">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="1ecf0-182">Required.</span></span> <span data-ttu-id="1ecf0-183">HTML-код, который необходимо вставить в документ.</span><span class="sxs-lookup"><span data-stu-id="1ecf0-183">The HTML to be inserted in the document.</span></span>'
          type:
            - string
        - id: insertLocationString
          description: '<span data-ttu-id="1ecf0-184">Обязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="1ecf0-184">Required.</span></span> <span data-ttu-id="1ecf0-185">Возможные значения: Replace, Start или End.</span><span class="sxs-lookup"><span data-stu-id="1ecf0-185">The value can be ''Replace'', ''Start'', or ''End''.</span></span>'
          type:
            - '"Before" | "After" | "Start" | "End" | "Replace"'
  - uid: 'word!Word.Body#insertInlinePictureFromBase64:member(1)'
    summary: |-
      <span data-ttu-id="1ecf0-186">Вставляет рисунок в содержимое в заданном расположении.</span><span class="sxs-lookup"><span data-stu-id="1ecf0-186">Inserts a picture into the body at the specified location.</span></span> <span data-ttu-id="1ecf0-187">Возможные значения insertLocation: Start и End.</span><span class="sxs-lookup"><span data-stu-id="1ecf0-187">The insertLocation value can be 'Start' or 'End'.</span></span>

      <span data-ttu-id="1ecf0-188">\[[Набор API: WordApi 1,2](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="1ecf0-188">\[ [API set: WordApi 1.2](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: 'insertInlinePictureFromBase64(base64EncodedImage, insertLocation)'
    fullName: 'insertInlinePictureFromBase64(base64EncodedImage, insertLocation)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertInlinePictureFromBase64(base64EncodedImage: string, insertLocation: Word.InsertLocation): Word.InlinePicture;'
      return:
        type:
          - 'word!Word.InlinePicture:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="1ecf0-189">Примеры</span><span class="sxs-lookup"><span data-stu-id="1ecf0-189">Examples</span></span>

          ```javascript
          // Run a batch operation against the Word object model.
          Word.run(function (context) {

              // Create a proxy object for the document body.
              var body = context.document.body;

              // Queue a command to insert OOXML in to the beginning of the body.
              body.insertOoxml("<pkg:package xmlns:pkg='http://schemas.microsoft.com/office/2006/xmlPackage'><pkg:part pkg:name='/_rels/.rels' pkg:contentType='application/vnd.openxmlformats-package.relationships+xml' pkg:padding='512'><pkg:xmlData><Relationships xmlns='http://schemas.openxmlformats.org/package/2006/relationships'><Relationship Id='rId1' Type='http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument' Target='word/document.xml'/></Relationships></pkg:xmlData></pkg:part><pkg:part pkg:name='/word/document.xml' pkg:contentType='application/vnd.openxmlformats-officedocument.wordprocessingml.document.main+xml'><pkg:xmlData><w:document xmlns:w='http://schemas.openxmlformats.org/wordprocessingml/2006/main' ><w:body><w:p><w:pPr><w:spacing w:before='360' w:after='0' w:line='480' w:lineRule='auto'/><w:rPr><w:color w:val='70AD47' w:themeColor='accent6'/><w:sz w:val='28'/></w:rPr></w:pPr><w:r><w:rPr><w:color w:val='70AD47' w:themeColor='accent6'/><w:sz w:val='28'/></w:rPr><w:t>This text has formatting directly applied to achieve its font size, color, line spacing, and paragraph spacing.</w:t></w:r></w:p></w:body></w:document></pkg:xmlData></pkg:part></pkg:package>", Word.InsertLocation.start);

              // Synchronize the document state by executing the queued commands,
              // and return a promise to indicate task completion.
              return context.sync().then(function () {
                  console.log('OOXML added to the beginning of the document body.');
              });
          })
          .catch(function (error) {
              console.log('Error: ' + JSON.stringify(error));
              if (error instanceof OfficeExtension.Error) {
                  console.log('Debug info: ' + JSON.stringify(error.debugInfo));
              }
          });

          // Read "Create better add-ins for Word with Office Open XML" for guidance on working with OOXML.
          // https://docs.microsoft.com/office/dev/add-ins/word/create-better-add-ins-for-word-with-office-open-xml

          // The Word-Add-in-DocumentAssembly sample shows how you can use this API to assemble a document.
          // https://github.com/OfficeDev/Word-Add-in-DocumentAssembly
          ```
      parameters:
        - id: base64EncodedImage
          description: <span data-ttu-id="1ecf0-190">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="1ecf0-190">Required.</span></span> <span data-ttu-id="1ecf0-191">Вставляемое в основной текст изображение в кодировке base64.</span><span class="sxs-lookup"><span data-stu-id="1ecf0-191">The base64 encoded image to be inserted in the body.</span></span>
          type:
            - string
        - id: insertLocation
          description: '<span data-ttu-id="1ecf0-192">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="1ecf0-192">Required.</span></span> <span data-ttu-id="1ecf0-193">Возможные значения: Start и End.</span><span class="sxs-lookup"><span data-stu-id="1ecf0-193">The value can be ''Start'' or ''End''.</span></span>'
          type:
            - 'word!Word.InsertLocation:enum'
  - uid: 'word!Word.Body#insertInlinePictureFromBase64:member(2)'
    summary: |-
      <span data-ttu-id="1ecf0-194">Вставляет рисунок в содержимое в заданном расположении.</span><span class="sxs-lookup"><span data-stu-id="1ecf0-194">Inserts a picture into the body at the specified location.</span></span> <span data-ttu-id="1ecf0-195">Возможные значения insertLocation: Start и End.</span><span class="sxs-lookup"><span data-stu-id="1ecf0-195">The insertLocation value can be 'Start' or 'End'.</span></span>

      <span data-ttu-id="1ecf0-196">\[[Набор API: WordApi 1,2](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="1ecf0-196">\[ [API set: WordApi 1.2](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: 'insertInlinePictureFromBase64(base64EncodedImage, insertLocationString)'
    fullName: 'insertInlinePictureFromBase64(base64EncodedImage, insertLocationString)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertInlinePictureFromBase64(base64EncodedImage: string, insertLocationString: "Before" | "After" | "Start" | "End" | "Replace"): Word.InlinePicture;'
      return:
        type:
          - 'word!Word.InlinePicture:class'
        description: ''
      parameters:
        - id: base64EncodedImage
          description: <span data-ttu-id="1ecf0-197">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="1ecf0-197">Required.</span></span> <span data-ttu-id="1ecf0-198">Вставляемое в основной текст изображение в кодировке base64.</span><span class="sxs-lookup"><span data-stu-id="1ecf0-198">The base64 encoded image to be inserted in the body.</span></span>
          type:
            - string
        - id: insertLocationString
          description: '<span data-ttu-id="1ecf0-199">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="1ecf0-199">Required.</span></span> <span data-ttu-id="1ecf0-200">Возможные значения: Start и End.</span><span class="sxs-lookup"><span data-stu-id="1ecf0-200">The value can be ''Start'' or ''End''.</span></span>'
          type:
            - '"Before" | "After" | "Start" | "End" | "Replace"'
  - uid: 'word!Word.Body#insertOoxml:member(1)'
    summary: |-
      <span data-ttu-id="1ecf0-201">Вставляет OOXML-код в указанном расположении.</span><span class="sxs-lookup"><span data-stu-id="1ecf0-201">Inserts OOXML at the specified location.</span></span> <span data-ttu-id="1ecf0-202">Возможные значения insertLocation: Replace, Start и End.</span><span class="sxs-lookup"><span data-stu-id="1ecf0-202">The insertLocation value can be 'Replace', 'Start', or 'End'.</span></span>

      <span data-ttu-id="1ecf0-203">\[[Набор API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="1ecf0-203">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: 'insertOoxml(ooxml, insertLocation)'
    fullName: 'insertOoxml(ooxml, insertLocation)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertOoxml(ooxml: string, insertLocation: Word.InsertLocation): Word.Range;'
      return:
        type:
          - 'word!Word.Range:class'
        description: ''
      parameters:
        - id: ooxml
          description: <span data-ttu-id="1ecf0-204">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="1ecf0-204">Required.</span></span> <span data-ttu-id="1ecf0-205">Вставляемый OOXML-код.</span><span class="sxs-lookup"><span data-stu-id="1ecf0-205">The OOXML to be inserted.</span></span>
          type:
            - string
        - id: insertLocation
          description: '<span data-ttu-id="1ecf0-206">Обязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="1ecf0-206">Required.</span></span> <span data-ttu-id="1ecf0-207">Возможные значения: Replace, Start или End.</span><span class="sxs-lookup"><span data-stu-id="1ecf0-207">The value can be ''Replace'', ''Start'', or ''End''.</span></span>'
          type:
            - 'word!Word.InsertLocation:enum'
  - uid: 'word!Word.Body#insertOoxml:member(2)'
    summary: |-
      <span data-ttu-id="1ecf0-208">Вставляет OOXML-код в указанном расположении.</span><span class="sxs-lookup"><span data-stu-id="1ecf0-208">Inserts OOXML at the specified location.</span></span> <span data-ttu-id="1ecf0-209">Возможные значения insertLocation: Replace, Start и End.</span><span class="sxs-lookup"><span data-stu-id="1ecf0-209">The insertLocation value can be 'Replace', 'Start', or 'End'.</span></span>

      <span data-ttu-id="1ecf0-210">\[[Набор API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="1ecf0-210">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: 'insertOoxml(ooxml, insertLocationString)'
    fullName: 'insertOoxml(ooxml, insertLocationString)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertOoxml(ooxml: string, insertLocationString: "Before" | "After" | "Start" | "End" | "Replace"): Word.Range;'
      return:
        type:
          - 'word!Word.Range:class'
        description: ''
      parameters:
        - id: ooxml
          description: <span data-ttu-id="1ecf0-211">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="1ecf0-211">Required.</span></span> <span data-ttu-id="1ecf0-212">Вставляемый OOXML-код.</span><span class="sxs-lookup"><span data-stu-id="1ecf0-212">The OOXML to be inserted.</span></span>
          type:
            - string
        - id: insertLocationString
          description: '<span data-ttu-id="1ecf0-213">Обязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="1ecf0-213">Required.</span></span> <span data-ttu-id="1ecf0-214">Возможные значения: Replace, Start или End.</span><span class="sxs-lookup"><span data-stu-id="1ecf0-214">The value can be ''Replace'', ''Start'', or ''End''.</span></span>'
          type:
            - '"Before" | "After" | "Start" | "End" | "Replace"'
  - uid: 'word!Word.Body#insertParagraph:member(1)'
    summary: |-
      <span data-ttu-id="1ecf0-215">Вставляет абзац в указанном расположении.</span><span class="sxs-lookup"><span data-stu-id="1ecf0-215">Inserts a paragraph at the specified location.</span></span> <span data-ttu-id="1ecf0-216">Возможные значения insertLocation: Start и End.</span><span class="sxs-lookup"><span data-stu-id="1ecf0-216">The insertLocation value can be 'Start' or 'End'.</span></span>

      <span data-ttu-id="1ecf0-217">\[[Набор API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="1ecf0-217">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: 'insertParagraph(paragraphText, insertLocation)'
    fullName: 'insertParagraph(paragraphText, insertLocation)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertParagraph(paragraphText: string, insertLocation: Word.InsertLocation): Word.Paragraph;'
      return:
        type:
          - 'word!Word.Paragraph:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="1ecf0-218">Примеры</span><span class="sxs-lookup"><span data-stu-id="1ecf0-218">Examples</span></span>

          ```javascript
          // Run a batch operation against the Word object model.
          Word.run(function (context) {

              // Create a proxy object for the document body.
              var body = context.document.body;

              // Queue a command to insert the paragraph at the end of the document body.
              body.insertParagraph('Content of a new paragraph', Word.InsertLocation.end);

              // Synchronize the document state by executing the queued commands,
              // and return a promise to indicate task completion.
              return context.sync().then(function () {
                  console.log('Paragraph added at the end of the document body.');
              });
          })
          .catch(function (error) {
              console.log('Error: ' + JSON.stringify(error));
              if (error instanceof OfficeExtension.Error) {
                  console.log('Debug info: ' + JSON.stringify(error.debugInfo));
              }
          });

          // The Word-Add-in-DocumentAssembly sample shows how you can use the insertParagraph method to assemble a document.
          // https://github.com/OfficeDev/Word-Add-in-DocumentAssembly
          ```
          ```typescript
          await Word.run(async (context) => {
              let paragraph = context.document.body.insertParagraph("Timeline", "End");
              paragraph.style = "Heading 2";
              let paragraph2 = context.document.body.insertParagraph("The Services shall commence on July 31, 2015, and shall continue through July 29, 2015.", "End");
              paragraph2.style = "Normal";
              let paragraph3 = context.document.body.insertParagraph("Project Costs by Phase", "End");
              paragraph3.style = "Heading 2";
              // Note a content control with the title of "ProjectCosts" is added. Content will be replaced later.
              let paragraph4 = context.document.body.insertParagraph("<Add Project Costs Here>", "End");
              paragraph4.style = "Normal";
              paragraph4.font.highlightColor = "#FFFF00";
              let contentControl = paragraph4.insertContentControl();
              contentControl.title = "ProjectCosts";
              let paragraph5 = context.document.body.insertParagraph("Project Team", "End");
              paragraph5.style = "Heading 2";
              paragraph5.font.highlightColor = "#FFFFFF";
              let paragraph6 = context.document.body.insertParagraph("Terms of Work", "End");
              paragraph6.style = "Heading 1";
              let paragraph7 = context.document.body.insertParagraph("Contractor shall provide the Services and Deliverable(s) as follows:", "End");
              paragraph7.style = "Normal";
              let paragraph8 = context.document.body.insertParagraph("Out-of-Pocket Expenses / Invoice Procedures", "End");
              paragraph8.style = "Heading 2";
              let paragraph9 = context.document.body.insertParagraph("Client will be invoiced monthly for the consulting services and T&L expenses. Standard Contractor invoicing is assumed to be acceptable. Invoices are due upon receipt. client will be invoiced all costs associated with out-of-pocket expenses (including, without limitation, costs and expenses associated with meals, lodging, local transportation and any other applicable business expenses) listed on the invoice as a separate line item. Reimbursement for out-of-pocket expenses in connection with performance of this SOW, when authorized and up to the limits set forth in this SOW, shall be in accordance with Client's then-current published policies governing travel and associated business expenses, which information shall be provided by the Client Project Manager.", "End");
              paragraph9.style = "Normal";
              // Insert a page break at the end of the document.
              context.document.body.insertBreak("Page", "End");

              await context.sync();
          });
          ```
      parameters:
        - id: paragraphText
          description: '<span data-ttu-id="1ecf0-219">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="1ecf0-219">Required.</span></span> <span data-ttu-id="1ecf0-220">Текст абзаца, который необходимо вставить.</span><span class="sxs-lookup"><span data-stu-id="1ecf0-220">The paragraph text to be inserted.</span></span>'
          type:
            - string
        - id: insertLocation
          description: '<span data-ttu-id="1ecf0-221">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="1ecf0-221">Required.</span></span> <span data-ttu-id="1ecf0-222">Возможные значения: Start и End.</span><span class="sxs-lookup"><span data-stu-id="1ecf0-222">The value can be ''Start'' or ''End''.</span></span>'
          type:
            - 'word!Word.InsertLocation:enum'
  - uid: 'word!Word.Body#insertParagraph:member(2)'
    summary: |-
      <span data-ttu-id="1ecf0-223">Вставляет абзац в указанном расположении.</span><span class="sxs-lookup"><span data-stu-id="1ecf0-223">Inserts a paragraph at the specified location.</span></span> <span data-ttu-id="1ecf0-224">Возможные значения insertLocation: Start и End.</span><span class="sxs-lookup"><span data-stu-id="1ecf0-224">The insertLocation value can be 'Start' or 'End'.</span></span>

      <span data-ttu-id="1ecf0-225">\[[Набор API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="1ecf0-225">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: 'insertParagraph(paragraphText, insertLocationString)'
    fullName: 'insertParagraph(paragraphText, insertLocationString)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertParagraph(paragraphText: string, insertLocationString: "Before" | "After" | "Start" | "End" | "Replace"): Word.Paragraph;'
      return:
        type:
          - 'word!Word.Paragraph:class'
        description: ''
      parameters:
        - id: paragraphText
          description: '<span data-ttu-id="1ecf0-226">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="1ecf0-226">Required.</span></span> <span data-ttu-id="1ecf0-227">Текст абзаца, который необходимо вставить.</span><span class="sxs-lookup"><span data-stu-id="1ecf0-227">The paragraph text to be inserted.</span></span>'
          type:
            - string
        - id: insertLocationString
          description: '<span data-ttu-id="1ecf0-228">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="1ecf0-228">Required.</span></span> <span data-ttu-id="1ecf0-229">Возможные значения: Start и End.</span><span class="sxs-lookup"><span data-stu-id="1ecf0-229">The value can be ''Start'' or ''End''.</span></span>'
          type:
            - '"Before" | "After" | "Start" | "End" | "Replace"'
  - uid: 'word!Word.Body#insertTable:member(1)'
    summary: |-
      <span data-ttu-id="1ecf0-230">Вставляет таблицу с указанным количеством строк и столбцов.</span><span class="sxs-lookup"><span data-stu-id="1ecf0-230">Inserts a table with the specified number of rows and columns.</span></span> <span data-ttu-id="1ecf0-231">Возможные значения InsertLocation: Start или End.</span><span class="sxs-lookup"><span data-stu-id="1ecf0-231">The insertLocation value can be 'Start' or 'End'.</span></span>

      <span data-ttu-id="1ecf0-232">\[[Набор API: WordApi 1,3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="1ecf0-232">\[ [API set: WordApi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: 'insertTable(rowCount, columnCount, insertLocation, values)'
    fullName: 'insertTable(rowCount, columnCount, insertLocation, values)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertTable(rowCount: number, columnCount: number, insertLocation: Word.InsertLocation, values?: string[][]): Word.Table;'
      return:
        type:
          - 'word!Word.Table:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="1ecf0-233">Примеры</span><span class="sxs-lookup"><span data-stu-id="1ecf0-233">Examples</span></span>

          ```typescript
          await Word.run(async (context) => {
            // Use a two-dimensional array to hold the initial table values.
            let data = [
              ["Tokyo", "Beijing", "Seattle"],
              ["Apple", "Orange", "Pineapple"]
            ];
            let table = context.document.body.insertTable(2, 3, "Start", data);
            table.styleBuiltIn = Word.Style.gridTable5Dark_Accent2;
            table.styleFirstColumn = false;

            await context.sync();
          });
          ```
      parameters:
        - id: rowCount
          description: <span data-ttu-id="1ecf0-234">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="1ecf0-234">Required.</span></span> <span data-ttu-id="1ecf0-235">Количество строк в таблице.</span><span class="sxs-lookup"><span data-stu-id="1ecf0-235">The number of rows in the table.</span></span>
          type:
            - number
        - id: columnCount
          description: <span data-ttu-id="1ecf0-236">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="1ecf0-236">Required.</span></span> <span data-ttu-id="1ecf0-237">Количество столбцов в таблице.</span><span class="sxs-lookup"><span data-stu-id="1ecf0-237">The number of columns in the table.</span></span>
          type:
            - number
        - id: insertLocation
          description: '<span data-ttu-id="1ecf0-238">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="1ecf0-238">Required.</span></span> <span data-ttu-id="1ecf0-239">Возможные значения: Start и End.</span><span class="sxs-lookup"><span data-stu-id="1ecf0-239">The value can be ''Start'' or ''End''.</span></span>'
          type:
            - 'word!Word.InsertLocation:enum'
        - id: values
          description: '<span data-ttu-id="1ecf0-240">Необязательный двухмерный массив.</span><span class="sxs-lookup"><span data-stu-id="1ecf0-240">Optional 2D array.</span></span> <span data-ttu-id="1ecf0-241">Ячейки заполняются, если в массиве указаны соответствующие строки.</span><span class="sxs-lookup"><span data-stu-id="1ecf0-241">Cells are filled if the corresponding strings are specified in the array.</span></span>'
          type:
            - 'string[][]'
  - uid: 'word!Word.Body#insertTable:member(2)'
    summary: |-
      <span data-ttu-id="1ecf0-242">Вставляет таблицу с указанным количеством строк и столбцов.</span><span class="sxs-lookup"><span data-stu-id="1ecf0-242">Inserts a table with the specified number of rows and columns.</span></span> <span data-ttu-id="1ecf0-243">Возможные значения InsertLocation: Start или End.</span><span class="sxs-lookup"><span data-stu-id="1ecf0-243">The insertLocation value can be 'Start' or 'End'.</span></span>

      <span data-ttu-id="1ecf0-244">\[[Набор API: WordApi 1,3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="1ecf0-244">\[ [API set: WordApi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: 'insertTable(rowCount, columnCount, insertLocationString, values)'
    fullName: 'insertTable(rowCount, columnCount, insertLocationString, values)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertTable(rowCount: number, columnCount: number, insertLocationString: "Before" | "After" | "Start" | "End" | "Replace", values?: string[][]): Word.Table;'
      return:
        type:
          - 'word!Word.Table:class'
        description: ''
      parameters:
        - id: rowCount
          description: <span data-ttu-id="1ecf0-245">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="1ecf0-245">Required.</span></span> <span data-ttu-id="1ecf0-246">Количество строк в таблице.</span><span class="sxs-lookup"><span data-stu-id="1ecf0-246">The number of rows in the table.</span></span>
          type:
            - number
        - id: columnCount
          description: <span data-ttu-id="1ecf0-247">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="1ecf0-247">Required.</span></span> <span data-ttu-id="1ecf0-248">Количество столбцов в таблице.</span><span class="sxs-lookup"><span data-stu-id="1ecf0-248">The number of columns in the table.</span></span>
          type:
            - number
        - id: insertLocationString
          description: '<span data-ttu-id="1ecf0-249">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="1ecf0-249">Required.</span></span> <span data-ttu-id="1ecf0-250">Возможные значения: Start и End.</span><span class="sxs-lookup"><span data-stu-id="1ecf0-250">The value can be ''Start'' or ''End''.</span></span>'
          type:
            - '"Before" | "After" | "Start" | "End" | "Replace"'
        - id: values
          description: '<span data-ttu-id="1ecf0-251">Необязательный двухмерный массив.</span><span class="sxs-lookup"><span data-stu-id="1ecf0-251">Optional 2D array.</span></span> <span data-ttu-id="1ecf0-252">Ячейки заполняются, если в массиве указаны соответствующие строки.</span><span class="sxs-lookup"><span data-stu-id="1ecf0-252">Cells are filled if the corresponding strings are specified in the array.</span></span>'
          type:
            - 'string[][]'
  - uid: 'word!Word.Body#insertText:member(1)'
    summary: |-
      <span data-ttu-id="1ecf0-253">Вставляет текст в содержимое в заданном расположении.</span><span class="sxs-lookup"><span data-stu-id="1ecf0-253">Inserts text into the body at the specified location.</span></span> <span data-ttu-id="1ecf0-254">Возможные значения insertLocation: Replace, Start и End.</span><span class="sxs-lookup"><span data-stu-id="1ecf0-254">The insertLocation value can be 'Replace', 'Start', or 'End'.</span></span>

      <span data-ttu-id="1ecf0-255">\[[Набор API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="1ecf0-255">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: 'insertText(text, insertLocation)'
    fullName: 'insertText(text, insertLocation)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertText(text: string, insertLocation: Word.InsertLocation): Word.Range;'
      return:
        type:
          - 'word!Word.Range:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="1ecf0-256">Примеры</span><span class="sxs-lookup"><span data-stu-id="1ecf0-256">Examples</span></span>

          ```javascript
          // Run a batch operation against the Word object model.
          Word.run(function (context) {

              // Create a proxy object for the document body.
              var body = context.document.body;

              // Queue a command to insert text in to the beginning of the body.
              body.insertText('This is text inserted with body.insertText()', Word.InsertLocation.start);

              // Synchronize the document state by executing the queued commands,
              // and return a promise to indicate task completion.
              return context.sync().then(function () {
                  console.log('Text added to the beginning of the document body.');
              });
          })
          .catch(function (error) {
              console.log('Error: ' + JSON.stringify(error));
              if (error instanceof OfficeExtension.Error) {
                  console.log('Debug info: ' + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: text
          description: '<span data-ttu-id="1ecf0-257">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="1ecf0-257">Required.</span></span> <span data-ttu-id="1ecf0-258">Текст, который необходимо вставить.</span><span class="sxs-lookup"><span data-stu-id="1ecf0-258">Text to be inserted.</span></span>'
          type:
            - string
        - id: insertLocation
          description: '<span data-ttu-id="1ecf0-259">Обязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="1ecf0-259">Required.</span></span> <span data-ttu-id="1ecf0-260">Возможные значения: Replace, Start или End.</span><span class="sxs-lookup"><span data-stu-id="1ecf0-260">The value can be ''Replace'', ''Start'', or ''End''.</span></span>'
          type:
            - 'word!Word.InsertLocation:enum'
  - uid: 'word!Word.Body#insertText:member(2)'
    summary: |-
      <span data-ttu-id="1ecf0-261">Вставляет текст в содержимое в заданном расположении.</span><span class="sxs-lookup"><span data-stu-id="1ecf0-261">Inserts text into the body at the specified location.</span></span> <span data-ttu-id="1ecf0-262">Возможные значения insertLocation: Replace, Start и End.</span><span class="sxs-lookup"><span data-stu-id="1ecf0-262">The insertLocation value can be 'Replace', 'Start', or 'End'.</span></span>

      <span data-ttu-id="1ecf0-263">\[[Набор API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="1ecf0-263">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: 'insertText(text, insertLocationString)'
    fullName: 'insertText(text, insertLocationString)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertText(text: string, insertLocationString: "Before" | "After" | "Start" | "End" | "Replace"): Word.Range;'
      return:
        type:
          - 'word!Word.Range:class'
        description: ''
      parameters:
        - id: text
          description: '<span data-ttu-id="1ecf0-264">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="1ecf0-264">Required.</span></span> <span data-ttu-id="1ecf0-265">Текст, который необходимо вставить.</span><span class="sxs-lookup"><span data-stu-id="1ecf0-265">Text to be inserted.</span></span>'
          type:
            - string
        - id: insertLocationString
          description: '<span data-ttu-id="1ecf0-266">Обязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="1ecf0-266">Required.</span></span> <span data-ttu-id="1ecf0-267">Возможные значения: Replace, Start или End.</span><span class="sxs-lookup"><span data-stu-id="1ecf0-267">The value can be ''Replace'', ''Start'', or ''End''.</span></span>'
          type:
            - '"Before" | "After" | "Start" | "End" | "Replace"'
  - uid: 'word!Word.Body#lists:member'
    summary: |-
      <span data-ttu-id="1ecf0-268">Возвращает коллекцию объектов списков в основном тексте.</span><span class="sxs-lookup"><span data-stu-id="1ecf0-268">Gets the collection of list objects in the body.</span></span> <span data-ttu-id="1ecf0-269">Только для чтения.</span><span class="sxs-lookup"><span data-stu-id="1ecf0-269">Read-only.</span></span>

      <span data-ttu-id="1ecf0-270">\[[Набор API: WordApi 1,3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="1ecf0-270">\[ [API set: WordApi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: lists
    fullName: lists
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly lists: Word.ListCollection;'
      return:
        type:
          - 'word!Word.ListCollection:class'
  - uid: 'word!Word.Body#load:member(1)'
    summary: <span data-ttu-id="1ecf0-271">Добавляет в очередь команду для загрузки указанных свойств объекта.</span><span class="sxs-lookup"><span data-stu-id="1ecf0-271">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="1ecf0-272">Перед чтением свойств необходимо вызвать метод context.sync().</span><span class="sxs-lookup"><span data-stu-id="1ecf0-272">You must call "context.sync()" before reading the properties.</span></span>
    remarks: |-
      <span data-ttu-id="1ecf0-273">В дополнение к этой подписи этот метод имеет следующие подписи:</span><span class="sxs-lookup"><span data-stu-id="1ecf0-273">In addition to this signature, this method has the following signatures:</span></span>

      <span data-ttu-id="1ecf0-274">`load(option?: string | string[]): Word.Body`-WHERE — это строка с разделителями-запятыми или массив строк, указывающий свойства для загрузки.</span><span class="sxs-lookup"><span data-stu-id="1ecf0-274">`load(option?: string | string[]): Word.Body` - Where option is a comma-delimited string or an array of strings that specify the properties to load.</span></span>

      <span data-ttu-id="1ecf0-275">`load(option?: { select?: string; expand?: string; }): Word.Body`-WHERE. Select — это строка с разделителями-запятыми, указывающая свойства для загрузки и параметры. Expand — это строка с разделителями-запятыми, указывающая свойства навигации для загрузки.</span><span class="sxs-lookup"><span data-stu-id="1ecf0-275">`load(option?: { select?: string; expand?: string; }): Word.Body` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.</span></span>

      <span data-ttu-id="1ecf0-276">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Word.Body`— Доступно только для типов коллекций.</span><span class="sxs-lookup"><span data-stu-id="1ecf0-276">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Word.Body` - Only available on collection types.</span></span> <span data-ttu-id="1ecf0-277">Он аналогичен предыдущей подписи.</span><span class="sxs-lookup"><span data-stu-id="1ecf0-277">It is similar to the preceding signature.</span></span> <span data-ttu-id="1ecf0-278">Option. Top указывает максимальное количество элементов коллекции, которые можно включить в результат.</span><span class="sxs-lookup"><span data-stu-id="1ecf0-278">Option.top specifies the maximum number of collection items that can be included in the result.</span></span> <span data-ttu-id="1ecf0-279">Option. skip указывает количество элементов, которые будут пропущены и не включены в результат.</span><span class="sxs-lookup"><span data-stu-id="1ecf0-279">Option.skip specifies the number of items that are to be skipped and not included in the result.</span></span> <span data-ttu-id="1ecf0-280">Если указан параметр Option. Top, результирующий набор начнется после пропуска указанного числа элементов.</span><span class="sxs-lookup"><span data-stu-id="1ecf0-280">If option.top is specified, the result set will start after skipping the specified number of items.</span></span>
    name: load(option)
    fullName: load(option)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(option?: Word.Interfaces.BodyLoadOptions): Word.Body;'
      return:
        type:
          - 'word!Word.Body:class'
        description: ''
      parameters:
        - id: option
          description: ''
          type:
            - 'word!Word.Interfaces.BodyLoadOptions:interface'
  - uid: 'word!Word.Body#load:member(2)'
    summary: <span data-ttu-id="1ecf0-281">Добавляет в очередь команду для загрузки указанных свойств объекта.</span><span class="sxs-lookup"><span data-stu-id="1ecf0-281">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="1ecf0-282">Перед чтением свойств `context.sync()` необходимо вызвать метод.</span><span class="sxs-lookup"><span data-stu-id="1ecf0-282">You must call `context.sync()` before reading the properties.</span></span>
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): Word.Body;'
      return:
        type:
          - 'word!Word.Body:class'
        description: ''
      parameters:
        - id: propertyNames
          description: '<span data-ttu-id="1ecf0-283">Строка, разделенная запятыми, или массив строк, указывающий свойства для загрузки.</span><span class="sxs-lookup"><span data-stu-id="1ecf0-283">A comma-delimited string or an array of strings that specify the properties to load.</span></span>'
          type:
            - 'string | string[]'
  - uid: 'word!Word.Body#load:member(3)'
    summary: <span data-ttu-id="1ecf0-284">Добавляет в очередь команду для загрузки указанных свойств объекта.</span><span class="sxs-lookup"><span data-stu-id="1ecf0-284">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="1ecf0-285">Перед чтением свойств `context.sync()` необходимо вызвать метод.</span><span class="sxs-lookup"><span data-stu-id="1ecf0-285">You must call `context.sync()` before reading the properties.</span></span>
    name: load(propertyNamesAndPaths)
    fullName: load(propertyNamesAndPaths)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNamesAndPaths?: { select?: string; expand?: string; }): Word.Body;'
      return:
        type:
          - 'word!Word.Body:class'
        description: ''
      parameters:
        - id: propertyNamesAndPaths
          description: '<span data-ttu-id="1ecf0-286">Где Пропертинамесандпасс. Select — это строка с разделителями-запятыми, задающая свойства для загрузки, и Пропертинамесандпасс. Expand — это строка с разделителями-запятыми, указывающая свойства навигации для загрузки.</span><span class="sxs-lookup"><span data-stu-id="1ecf0-286">Where propertyNamesAndPaths.select is a comma-delimited string that specifies the properties to load, and propertyNamesAndPaths.expand is a comma-delimited string that specifies the navigation properties to load.</span></span>'
          type:
            - '{ select?: string; expand?: string; }'
  - uid: 'word!Word.Body#paragraphs:member'
    summary: |-
      <span data-ttu-id="1ecf0-287">Возвращает коллекцию объектов абзаца в тексте.</span><span class="sxs-lookup"><span data-stu-id="1ecf0-287">Gets the collection of paragraph objects in the body.</span></span> <span data-ttu-id="1ecf0-288">Только для чтения.</span><span class="sxs-lookup"><span data-stu-id="1ecf0-288">Read-only.</span></span>

      <span data-ttu-id="1ecf0-289">\[[Набор API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="1ecf0-289">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: paragraphs
    fullName: paragraphs
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly paragraphs: Word.ParagraphCollection;'
      return:
        type:
          - 'word!Word.ParagraphCollection:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="1ecf0-290">Примеры</span><span class="sxs-lookup"><span data-stu-id="1ecf0-290">Examples</span></span>

          ```typescript
          await Word.run(async (context) => {
            let paragraphs = context.document.body.paragraphs;
            paragraphs.load("text");
            await context.sync();

            let text = [];
            paragraphs.items.forEach((item) => {
              let paragraph = item.text.trim();
              if (paragraph) {
                paragraph.split(" ").forEach((term) => {
                  let currentTerm = term.trim();
                  if (currentTerm) {
                    text.push(currentTerm);
                  }
                });
              }
            });

            let makeTextDistinct = new Set(text);
            let distinctText = Array.from(makeTextDistinct);
            let allSearchResults = [];

            for (let i = 0; i < distinctText.length; i++) {
              let results = context.document.body.search(distinctText[i], { matchCase: true, matchWholeWord: true });
              results.load("text");

              // Map search term with its results.
              let correlatedResults = {
                searchTerm: distinctText[i],
                hits: results
              };

              allSearchResults.push(correlatedResults);
            }

            await context.sync();

            // Display counts.
            allSearchResults.forEach((result) => {
              let length = result.hits.items.length;

              console.log("Search term: " + result.searchTerm + " => Count: " + length);
            });
          });
          ```
  - uid: 'word!Word.Body#parentBody:member'
    summary: |-
      <span data-ttu-id="1ecf0-p167">Возвращает родительский текст основного текста. Например, родительским текстом ячейки таблицы может быть заголовок. Выдает ошибку, если родительского текста не существует. Только для чтения.</span><span class="sxs-lookup"><span data-stu-id="1ecf0-p167">Gets the parent body of the body. For example, a table cell body's parent body could be a header. Throws if there isn't a parent body. Read-only.</span></span>

      <span data-ttu-id="1ecf0-295">\[[Набор API: WordApi 1,3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="1ecf0-295">\[ [API set: WordApi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: parentBody
    fullName: parentBody
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly parentBody: Word.Body;'
      return:
        type:
          - 'word!Word.Body:class'
  - uid: 'word!Word.Body#parentBodyOrNullObject:member'
    summary: |-
      <span data-ttu-id="1ecf0-p168">Возвращает родительский текст основного текста. Например, родительским текстом ячейки таблицы может быть заголовок. Возвращает пустой объект, если родительского текста не существует. Только для чтения.</span><span class="sxs-lookup"><span data-stu-id="1ecf0-p168">Gets the parent body of the body. For example, a table cell body's parent body could be a header. Returns a null object if there isn't a parent body. Read-only.</span></span>

      <span data-ttu-id="1ecf0-300">\[[Набор API: WordApi 1,3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="1ecf0-300">\[ [API set: WordApi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: parentBodyOrNullObject
    fullName: parentBodyOrNullObject
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly parentBodyOrNullObject: Word.Body;'
      return:
        type:
          - 'word!Word.Body:class'
  - uid: 'word!Word.Body#parentContentControl:member'
    summary: |-
      <span data-ttu-id="1ecf0-301">Получает элемент управления содержимым, содержащий документ или раздел.</span><span class="sxs-lookup"><span data-stu-id="1ecf0-301">Gets the content control that contains the body.</span></span> <span data-ttu-id="1ecf0-302">Вызывается, если родительский элемент управления содержимым отсутствует.</span><span class="sxs-lookup"><span data-stu-id="1ecf0-302">Throws if there isn't a parent content control.</span></span> <span data-ttu-id="1ecf0-303">Только для чтения.</span><span class="sxs-lookup"><span data-stu-id="1ecf0-303">Read-only.</span></span>

      <span data-ttu-id="1ecf0-304">\[[Набор API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="1ecf0-304">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: parentContentControl
    fullName: parentContentControl
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly parentContentControl: Word.ContentControl;'
      return:
        type:
          - 'word!Word.ContentControl:class'
  - uid: 'word!Word.Body#parentContentControlOrNullObject:member'
    summary: |-
      <span data-ttu-id="1ecf0-305">Получает элемент управления содержимым, содержащий документ или раздел.</span><span class="sxs-lookup"><span data-stu-id="1ecf0-305">Gets the content control that contains the body.</span></span> <span data-ttu-id="1ecf0-306">Возвращает нулевой объект, если родительский элемент управления содержимым отсутствует.</span><span class="sxs-lookup"><span data-stu-id="1ecf0-306">Returns a null object if there isn't a parent content control.</span></span> <span data-ttu-id="1ecf0-307">Только для чтения.</span><span class="sxs-lookup"><span data-stu-id="1ecf0-307">Read-only.</span></span>

      <span data-ttu-id="1ecf0-308">\[[Набор API: WordApi 1,3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="1ecf0-308">\[ [API set: WordApi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: parentContentControlOrNullObject
    fullName: parentContentControlOrNullObject
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly parentContentControlOrNullObject: Word.ContentControl;'
      return:
        type:
          - 'word!Word.ContentControl:class'
  - uid: 'word!Word.Body#parentSection:member'
    summary: |-
      <span data-ttu-id="1ecf0-309">Возвращает родительский раздел основного текста.</span><span class="sxs-lookup"><span data-stu-id="1ecf0-309">Gets the parent section of the body.</span></span> <span data-ttu-id="1ecf0-310">Создает исключение, если родительский раздел отсутствует.</span><span class="sxs-lookup"><span data-stu-id="1ecf0-310">Throws if there isn't a parent section.</span></span> <span data-ttu-id="1ecf0-311">Только для чтения.</span><span class="sxs-lookup"><span data-stu-id="1ecf0-311">Read-only.</span></span>

      <span data-ttu-id="1ecf0-312">\[[Набор API: WordApi 1,3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="1ecf0-312">\[ [API set: WordApi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: parentSection
    fullName: parentSection
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly parentSection: Word.Section;'
      return:
        type:
          - 'word!Word.Section:class'
  - uid: 'word!Word.Body#parentSectionOrNullObject:member'
    summary: |-
      <span data-ttu-id="1ecf0-313">Возвращает родительский раздел основного текста.</span><span class="sxs-lookup"><span data-stu-id="1ecf0-313">Gets the parent section of the body.</span></span> <span data-ttu-id="1ecf0-314">Возвращает нулевой объект, если родительский раздел отсутствует.</span><span class="sxs-lookup"><span data-stu-id="1ecf0-314">Returns a null object if there isn't a parent section.</span></span> <span data-ttu-id="1ecf0-315">Только для чтения.</span><span class="sxs-lookup"><span data-stu-id="1ecf0-315">Read-only.</span></span>

      <span data-ttu-id="1ecf0-316">\[[Набор API: WordApi 1,3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="1ecf0-316">\[ [API set: WordApi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: parentSectionOrNullObject
    fullName: parentSectionOrNullObject
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly parentSectionOrNullObject: Word.Section;'
      return:
        type:
          - 'word!Word.Section:class'
  - uid: 'word!Word.Body#search:member(1)'
    summary: |-
      <span data-ttu-id="1ecf0-317">Выполняет поиск с указанным SearchOptions в области объекта Body.</span><span class="sxs-lookup"><span data-stu-id="1ecf0-317">Performs a search with the specified SearchOptions on the scope of the body object.</span></span> <span data-ttu-id="1ecf0-318">Результат поиска — это коллекция объектов диапазона.</span><span class="sxs-lookup"><span data-stu-id="1ecf0-318">The search results are a collection of range objects.</span></span>

      <span data-ttu-id="1ecf0-319">\[[Набор API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="1ecf0-319">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: 'search(searchText, searchOptions)'
    fullName: 'search(searchText, searchOptions)'
    langs:
      - typeScript
    type: method
    syntax:
      content: |-
        search(searchText: string, searchOptions?: Word.SearchOptions | {
                    ignorePunct?: boolean;
                    ignoreSpace?: boolean;
                    matchCase?: boolean;
                    matchPrefix?: boolean;
                    matchSuffix?: boolean;
                    matchWholeWord?: boolean;
                    matchWildcards?: boolean;
                }): Word.RangeCollection;
      return:
        type:
          - 'word!Word.RangeCollection:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="1ecf0-320">Примеры</span><span class="sxs-lookup"><span data-stu-id="1ecf0-320">Examples</span></span>

          ```javascript
          // Run a batch operation against the Word object model.
          Word.run(function (context) {

              // Create a proxy object for the document body.
              var body = context.document.body;

              // Queue a command to search the document.
              var searchResults = context.document.body.search('video', {matchCase: false});

              // Queue a command to load the results.
              context.load(searchResults, 'text, font');

              // Synchronize the document state by executing the queued commands,
              // and return a promise to indicate task completion.
              return context.sync().then(function () {
                  var results = 'Found count: ' + searchResults.items.length +
                                '; we highlighted the results.';

                  // Queue a command to change the font for each found item.
                  for (var i = 0; i < searchResults.items.length; i++) {
                    searchResults.items[i].font.color = '#FF0000'    // Change color to Red
                    searchResults.items[i].font.highlightColor = '#FFFF00';
                    searchResults.items[i].font.bold = true;
                  }

                  // Synchronize the document state by executing the queued commands,
                  // and return a promise to indicate task completion.
                  return context.sync().then(function () {
                      console.log(results);
                  });
              });
          })
          .catch(function (error) {
              console.log('Error: ' + JSON.stringify(error));
              if (error instanceof OfficeExtension.Error) {
                  console.log('Debug info: ' + JSON.stringify(error.debugInfo));
              }
          });

          // The Word-Add-in-DocumentAssembly sample provides another example of how to search a document.
          // https://github.com/OfficeDev/Word-Add-in-DocumentAssembly
          ```
          ```typescript
          await Word.run(async (context) => {
            let results = context.document.body.search("Online");
            results.load("length");

            await context.sync();

            // Let's traverse the search results... and highlight...
            for (let i = 0; i < results.items.length; i++) {
              results.items[i].font.highlightColor = "yellow";
            }

            await context.sync();
          });
          ```
          ```typescript
          await Word.run(async (context) => {
            // Check out how wildcard expression are built, also use the second parameter of the search method to include search modes
            // (i.e. use wildcards).
            let results = context.document.body.search("$*.[0-9][0-9]", { matchWildcards: true });
            results.load("length");

            await context.sync();

            // Let's traverse the search results... and highlight...
            for (let i = 0; i < results.items.length; i++) {
              results.items[i].font.highlightColor = "red";
              results.items[i].font.color = "white";
            }

            await context.sync();
          });
          ```
          ```typescript
          await Word.run(async (context) => {
            let paragraphs = context.document.body.paragraphs;
            paragraphs.load("text");
            await context.sync();

            let text = [];
            paragraphs.items.forEach((item) => {
              let paragraph = item.text.trim();
              if (paragraph) {
                paragraph.split(" ").forEach((term) => {
                  let currentTerm = term.trim();
                  if (currentTerm) {
                    text.push(currentTerm);
                  }
                });
              }
            });

            let makeTextDistinct = new Set(text);
            let distinctText = Array.from(makeTextDistinct);
            let allSearchResults = [];

            for (let i = 0; i < distinctText.length; i++) {
              let results = context.document.body.search(distinctText[i], { matchCase: true, matchWholeWord: true });
              results.load("text");

              // Map search term with its results.
              let correlatedResults = {
                searchTerm: distinctText[i],
                hits: results
              };

              allSearchResults.push(correlatedResults);
            }

            await context.sync();

            // Display counts.
            allSearchResults.forEach((result) => {
              let length = result.hits.items.length;

              console.log("Search term: " + result.searchTerm + " => Count: " + length);
            });
          });
          ```
      parameters:
        - id: searchText
          description: <span data-ttu-id="1ecf0-321">Обязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="1ecf0-321">Required.</span></span> <span data-ttu-id="1ecf0-322">Текст для поиска.</span><span class="sxs-lookup"><span data-stu-id="1ecf0-322">The search text.</span></span> <span data-ttu-id="1ecf0-323">Может быть не более 255 символов.</span><span class="sxs-lookup"><span data-stu-id="1ecf0-323">Can be a maximum of 255 characters.</span></span>
          type:
            - string
        - id: searchOptions
          description: <span data-ttu-id="1ecf0-324">Необязательно.</span><span class="sxs-lookup"><span data-stu-id="1ecf0-324">Optional.</span></span> <span data-ttu-id="1ecf0-325">Параметры поиска.</span><span class="sxs-lookup"><span data-stu-id="1ecf0-325">Options for the search.</span></span>
          type:
            - 'word!Word.Body#search~0:complex'
  - uid: 'word!Word.Body#select:member(1)'
    summary: |-
      <span data-ttu-id="1ecf0-326">Выбирает содержимое и переходит к нему в пользовательском интерфейсе Word.</span><span class="sxs-lookup"><span data-stu-id="1ecf0-326">Selects the body and navigates the Word UI to it.</span></span>

      <span data-ttu-id="1ecf0-327">\[[Набор API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="1ecf0-327">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: select(selectionMode)
    fullName: select(selectionMode)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'select(selectionMode?: Word.SelectionMode): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a><span data-ttu-id="1ecf0-328">Примеры</span><span class="sxs-lookup"><span data-stu-id="1ecf0-328">Examples</span></span>

          ```javascript
          // Run a batch operation against the Word object model.
          Word.run(function (context) {

              // Create a proxy object for the document body.
              var body = context.document.body;

              // Queue a command to select the document body. The Word UI will
              // move to the selected document body.
              body.select();

              // Synchronize the document state by executing the queued commands,
              // and return a promise to indicate task completion.
              return context.sync().then(function () {
                  console.log('Selected the document body.');
              });
          })
          .catch(function (error) {
              console.log('Error: ' + JSON.stringify(error));
              if (error instanceof OfficeExtension.Error) {
                  console.log('Debug info: ' + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: selectionMode
          description: '<span data-ttu-id="1ecf0-329">Необязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="1ecf0-329">Optional.</span></span> <span data-ttu-id="1ecf0-330">Возможные режимы выбора: Select, Start и End.</span><span class="sxs-lookup"><span data-stu-id="1ecf0-330">The selection mode can be ''Select'', ''Start'', or ''End''.</span></span> <span data-ttu-id="1ecf0-331">Значение по умолчанию — Select.</span><span class="sxs-lookup"><span data-stu-id="1ecf0-331">''Select'' is the default.</span></span>'
          type:
            - 'word!Word.SelectionMode:enum'
  - uid: 'word!Word.Body#select:member(2)'
    summary: |-
      <span data-ttu-id="1ecf0-332">Выбирает содержимое и переходит к нему в пользовательском интерфейсе Word.</span><span class="sxs-lookup"><span data-stu-id="1ecf0-332">Selects the body and navigates the Word UI to it.</span></span>

      <span data-ttu-id="1ecf0-333">\[[Набор API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="1ecf0-333">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: select(selectionModeString)
    fullName: select(selectionModeString)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'select(selectionModeString?: "Select" | "Start" | "End"): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: selectionModeString
          description: '<span data-ttu-id="1ecf0-334">Необязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="1ecf0-334">Optional.</span></span> <span data-ttu-id="1ecf0-335">Возможные режимы выбора: Select, Start и End.</span><span class="sxs-lookup"><span data-stu-id="1ecf0-335">The selection mode can be ''Select'', ''Start'', or ''End''.</span></span> <span data-ttu-id="1ecf0-336">Значение по умолчанию — Select.</span><span class="sxs-lookup"><span data-stu-id="1ecf0-336">''Select'' is the default.</span></span>'
          type:
            - '"Select" | "Start" | "End"'
  - uid: 'word!Word.Body#set:member(1)'
    summary: '<span data-ttu-id="1ecf0-337">Задает одновременно несколько свойств объекта.</span><span class="sxs-lookup"><span data-stu-id="1ecf0-337">Sets multiple properties of an object at the same time.</span></span> <span data-ttu-id="1ecf0-338">Можно передать либо простой объект с соответствующими свойствами, либо другой объект API того же типа.</span><span class="sxs-lookup"><span data-stu-id="1ecf0-338">You can pass either a plain object with the appropriate properties, or another API object of the same type.</span></span>'
    remarks: |-
      <span data-ttu-id="1ecf0-339">Этот метод имеет следующую дополнительную подпись:</span><span class="sxs-lookup"><span data-stu-id="1ecf0-339">This method has the following additional signature:</span></span>

      `set(properties: Word.Body): void`
    name: 'set(properties, options)'
    fullName: 'set(properties, options)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'set(properties: Interfaces.BodyUpdateData, options?: OfficeExtension.UpdateOptions): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: properties
          description: '<span data-ttu-id="1ecf0-340">Объект JavaScript со свойствами, которые структурированы исоморфикалли к свойствам объекта, для которого вызывается метод.</span><span class="sxs-lookup"><span data-stu-id="1ecf0-340">A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.</span></span>'
          type:
            - 'word!Word.Interfaces.BodyUpdateData:interface'
        - id: options
          description: '<span data-ttu-id="1ecf0-341">Предоставляет возможность подавлять ошибки, если объект Properties пытается задать любые свойства, предназначенные только для чтения.</span><span class="sxs-lookup"><span data-stu-id="1ecf0-341">Provides an option to suppress errors if the properties object tries to set any read-only properties.</span></span>'
          type:
            - 'word!OfficeExtension.UpdateOptions:interface'
  - uid: 'word!Word.Body#set:member(2)'
    summary: '<span data-ttu-id="1ecf0-342">Задает одновременно несколько свойств объекта на основе существующего загруженного объекта.</span><span class="sxs-lookup"><span data-stu-id="1ecf0-342">Sets multiple properties on the object at the same time, based on an existing loaded object.</span></span>'
    name: set(properties)
    fullName: set(properties)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'set(properties: Word.Body): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: properties
          description: ''
          type:
            - 'word!Word.Body:class'
  - uid: 'word!Word.Body#style:member'
    summary: |-
      <span data-ttu-id="1ecf0-p179">Возвращает или задает имя стиля для основного текста. Используйте это свойство для пользовательских стилей и локализованных имен стилей. Чтобы использовать встроенные стили, поддерживающие несколько языковых стандартов, применяйте свойство styleBuiltIn.</span><span class="sxs-lookup"><span data-stu-id="1ecf0-p179">Gets or sets the style name for the body. Use this property for custom styles and localized style names. To use the built-in styles that are portable between locales, see the "styleBuiltIn" property.</span></span>

      <span data-ttu-id="1ecf0-346">\[[Набор API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="1ecf0-346">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: style
    fullName: style
    langs:
      - typeScript
    type: property
    syntax:
      content: 'style: string;'
      return:
        type:
          - string
  - uid: 'word!Word.Body#styleBuiltIn:member'
    summary: |-
      <span data-ttu-id="1ecf0-p180">Возвращает или задает имя встроенного стиля основного текста. Используйте это свойство для встроенных стилей, поддерживающих несколько языковых стандартов. Чтобы использовать пользовательские стили или локализованные имена стилей, применяйте свойство style.</span><span class="sxs-lookup"><span data-stu-id="1ecf0-p180">Gets or sets the built-in style name for the body. Use this property for built-in styles that are portable between locales. To use custom styles or localized style names, see the "style" property.</span></span>

      <span data-ttu-id="1ecf0-350">\[[Набор API: WordApi 1,3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="1ecf0-350">\[ [API set: WordApi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: styleBuiltIn
    fullName: styleBuiltIn
    langs:
      - typeScript
    type: property
    syntax:
      content: 'styleBuiltIn: Word.Style | "Other" | "Normal" | "Heading1" | "Heading2" | "Heading3" | "Heading4" | "Heading5" | "Heading6" | "Heading7" | "Heading8" | "Heading9" | "Toc1" | "Toc2" | "Toc3" | "Toc4" | "Toc5" | "Toc6" | "Toc7" | "Toc8" | "Toc9" | "FootnoteText" | "Header" | "Footer" | "Caption" | "FootnoteReference" | "EndnoteReference" | "EndnoteText" | "Title" | "Subtitle" | "Hyperlink" | "Strong" | "Emphasis" | "NoSpacing" | "ListParagraph" | "Quote" | "IntenseQuote" | "SubtleEmphasis" | "IntenseEmphasis" | "SubtleReference" | "IntenseReference" | "BookTitle" | "Bibliography" | "TocHeading" | "TableGrid" | "PlainTable1" | "PlainTable2" | "PlainTable3" | "PlainTable4" | "PlainTable5" | "TableGridLight" | "GridTable1Light" | "GridTable1Light_Accent1" | "GridTable1Light_Accent2" | "GridTable1Light_Accent3" | "GridTable1Light_Accent4" | "GridTable1Light_Accent5" | "GridTable1Light_Accent6" | "GridTable2" | "GridTable2_Accent1" | "GridTable2_Accent2" | "GridTable2_Accent3" | "GridTable2_Accent4" | "GridTable2_Accent5" | "GridTable2_Accent6" | "GridTable3" | "GridTable3_Accent1" | "GridTable3_Accent2" | "GridTable3_Accent3" | "GridTable3_Accent4" | "GridTable3_Accent5" | "GridTable3_Accent6" | "GridTable4" | "GridTable4_Accent1" | "GridTable4_Accent2" | "GridTable4_Accent3" | "GridTable4_Accent4" | "GridTable4_Accent5" | "GridTable4_Accent6" | "GridTable5Dark" | "GridTable5Dark_Accent1" | "GridTable5Dark_Accent2" | "GridTable5Dark_Accent3" | "GridTable5Dark_Accent4" | "GridTable5Dark_Accent5" | "GridTable5Dark_Accent6" | "GridTable6Colorful" | "GridTable6Colorful_Accent1" | "GridTable6Colorful_Accent2" | "GridTable6Colorful_Accent3" | "GridTable6Colorful_Accent4" | "GridTable6Colorful_Accent5" | "GridTable6Colorful_Accent6" | "GridTable7Colorful" | "GridTable7Colorful_Accent1" | "GridTable7Colorful_Accent2" | "GridTable7Colorful_Accent3" | "GridTable7Colorful_Accent4" | "GridTable7Colorful_Accent5" | "GridTable7Colorful_Accent6" | "ListTable1Light" | "ListTable1Light_Accent1" | "ListTable1Light_Accent2" | "ListTable1Light_Accent3" | "ListTable1Light_Accent4" | "ListTable1Light_Accent5" | "ListTable1Light_Accent6" | "ListTable2" | "ListTable2_Accent1" | "ListTable2_Accent2" | "ListTable2_Accent3" | "ListTable2_Accent4" | "ListTable2_Accent5" | "ListTable2_Accent6" | "ListTable3" | "ListTable3_Accent1" | "ListTable3_Accent2" | "ListTable3_Accent3" | "ListTable3_Accent4" | "ListTable3_Accent5" | "ListTable3_Accent6" | "ListTable4" | "ListTable4_Accent1" | "ListTable4_Accent2" | "ListTable4_Accent3" | "ListTable4_Accent4" | "ListTable4_Accent5" | "ListTable4_Accent6" | "ListTable5Dark" | "ListTable5Dark_Accent1" | "ListTable5Dark_Accent2" | "ListTable5Dark_Accent3" | "ListTable5Dark_Accent4" | "ListTable5Dark_Accent5" | "ListTable5Dark_Accent6" | "ListTable6Colorful" | "ListTable6Colorful_Accent1" | "ListTable6Colorful_Accent2" | "ListTable6Colorful_Accent3" | "ListTable6Colorful_Accent4" | "ListTable6Colorful_Accent5" | "ListTable6Colorful_Accent6" | "ListTable7Colorful" | "ListTable7Colorful_Accent1" | "ListTable7Colorful_Accent2" | "ListTable7Colorful_Accent3" | "ListTable7Colorful_Accent4" | "ListTable7Colorful_Accent5" | "ListTable7Colorful_Accent6";'
      return:
        type:
          - 'word!Word.Body#styleBuiltIn~0:complex'
  - uid: 'word!Word.Body#tables:member'
    summary: |-
      <span data-ttu-id="1ecf0-351">Возвращает коллекцию объектов таблиц в основном тексте.</span><span class="sxs-lookup"><span data-stu-id="1ecf0-351">Gets the collection of table objects in the body.</span></span> <span data-ttu-id="1ecf0-352">Только для чтения.</span><span class="sxs-lookup"><span data-stu-id="1ecf0-352">Read-only.</span></span>

      <span data-ttu-id="1ecf0-353">\[[Набор API: WordApi 1,3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="1ecf0-353">\[ [API set: WordApi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: tables
    fullName: tables
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly tables: Word.TableCollection;'
      return:
        type:
          - 'word!Word.TableCollection:class'
  - uid: 'word!Word.Body#text:member'
    summary: |-
      <span data-ttu-id="1ecf0-354">Возвращает текст содержимого.</span><span class="sxs-lookup"><span data-stu-id="1ecf0-354">Gets the text of the body.</span></span> <span data-ttu-id="1ecf0-355">Для вставки текста используется метод insertText.</span><span class="sxs-lookup"><span data-stu-id="1ecf0-355">Use the insertText method to insert text.</span></span> <span data-ttu-id="1ecf0-356">Только для чтения.</span><span class="sxs-lookup"><span data-stu-id="1ecf0-356">Read-only.</span></span>

      <span data-ttu-id="1ecf0-357">\[[Набор API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="1ecf0-357">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: text
    fullName: text
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly text: string;'
      return:
        type:
          - string
        description: |-


          #### <a name="examples"></a><span data-ttu-id="1ecf0-358">Примеры</span><span class="sxs-lookup"><span data-stu-id="1ecf0-358">Examples</span></span>

          ```javascript
          // Get the text property on the body object
          // Run a batch operation against the Word object model.
          Word.run(function (context) {

              // Create a proxy object for the document body.
              var body = context.document.body;

              // Queue a command to load the text in document body.
              context.load(body, 'text');

              // Synchronize the document state by executing the queued commands,
              // and return a promise to indicate task completion.
              return context.sync().then(function () {
                  console.log("Body contents: " + body.text);
              });
          })
          .catch(function (error) {
              console.log("Error: " + JSON.stringify(error));
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: 'word!Word.Body#toJSON:member(1)'
    summary: '<span data-ttu-id="1ecf0-359">Переопределяет метод `toJSON()` JavaScript для предоставления более удобного вывода при передаче объекта API`JSON.stringify()`</span><span class="sxs-lookup"><span data-stu-id="1ecf0-359">Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`</span></span><!-- --><span data-ttu-id="1ecf0-360">.</span><span class="sxs-lookup"><span data-stu-id="1ecf0-360"></span></span> <span data-ttu-id="1ecf0-361">(`JSON.stringify`</span><span class="sxs-lookup"><span data-stu-id="1ecf0-361"></span></span><!-- --><span data-ttu-id="1ecf0-362">, в свою очередь, вызывает `toJSON` метод объекта, который передается ему.) В то время как исходный объект Word. Body является объектом API, `toJSON` метод возвращает простой объект JavaScript (тип`Word.Interfaces.BodyData`</span><span class="sxs-lookup"><span data-stu-id="1ecf0-362">, in turn, calls the `toJSON` method of the object that is passed to it.) Whereas the original Word.Body object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.BodyData`</span></span><!-- --><span data-ttu-id="1ecf0-363">), который содержит неполные копии загруженных дочерних свойств из исходного объекта.</span><span class="sxs-lookup"><span data-stu-id="1ecf0-363">) that contains shallow copies of any loaded child properties from the original object.</span></span>'
    name: toJSON()
    fullName: toJSON()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON(): Word.Interfaces.BodyData;'
      return:
        type:
          - 'word!Word.Interfaces.BodyData:interface'
        description: ''
  - uid: 'word!Word.Body#track:member(1)'
    summary: '<span data-ttu-id="1ecf0-364">Отслеживает объект для автоматической корректировки с учетом окружающих изменений в документе.</span><span class="sxs-lookup"><span data-stu-id="1ecf0-364">Track the object for automatic adjustment based on surrounding changes in the document.</span></span> <span data-ttu-id="1ecf0-365">Этот вызов является сокращением для context.trackedObjects.add(thisObject).</span><span class="sxs-lookup"><span data-stu-id="1ecf0-365">This call is a shorthand for context.trackedObjects.add(thisObject).</span></span> <span data-ttu-id="1ecf0-366">Если этот объект используется в вызовах .sync и вне последовательного выполнения пакета .run с возникновением ошибки InvalidObjectPath при установке свойства или вызове метода для объекта, необходимо было добавить объект в коллекцию отслеживаемых объектов при первоначальном создании объекта.</span><span class="sxs-lookup"><span data-stu-id="1ecf0-366">If you are using this object across ".sync" calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you needed to have added the object to the tracked object collection when the object was first created.</span></span>'
    name: track()
    fullName: track()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'track(): Word.Body;'
      return:
        type:
          - 'word!Word.Body:class'
        description: ''
  - uid: 'word!Word.Body#type:member'
    summary: |-
      <span data-ttu-id="1ecf0-367">Возвращает тип основного текста.</span><span class="sxs-lookup"><span data-stu-id="1ecf0-367">Gets the type of the body.</span></span> <span data-ttu-id="1ecf0-368">Поддерживаемые типы: MainDoc, Section, Header, Footer и TableCell.</span><span class="sxs-lookup"><span data-stu-id="1ecf0-368">The type can be 'MainDoc', 'Section', 'Header', 'Footer', or 'TableCell'.</span></span> <span data-ttu-id="1ecf0-369">Только для чтения.</span><span class="sxs-lookup"><span data-stu-id="1ecf0-369">Read-only.</span></span>

      <span data-ttu-id="1ecf0-370">\[[Набор API: WordApi 1,3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="1ecf0-370">\[ [API set: WordApi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: type
    fullName: type
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly type: Word.BodyType | "Unknown" | "MainDoc" | "Section" | "Header" | "Footer" | "TableCell";'
      return:
        type:
          - 'word!Word.Body#type~0:complex'
  - uid: 'word!Word.Body#untrack:member(1)'
    summary: '<span data-ttu-id="1ecf0-371">Освобождает память, связанную с этим объектом, если он ранее отслеживался.</span><span class="sxs-lookup"><span data-stu-id="1ecf0-371">Release the memory associated with this object, if it has previously been tracked.</span></span> <span data-ttu-id="1ecf0-372">Этот вызов является сокращением для context.trackedObjects.remove(thisObject).</span><span class="sxs-lookup"><span data-stu-id="1ecf0-372">This call is shorthand for context.trackedObjects.remove(thisObject).</span></span> <span data-ttu-id="1ecf0-373">Наличие большого количества отслеживаемых объектов замедляет ведущее приложение, поэтому не забывайте освобождать любые добавленные объекты после завершения их использования.</span><span class="sxs-lookup"><span data-stu-id="1ecf0-373">Having many tracked objects slows down the host application, so please remember to free any objects you add, once you''re done using them.</span></span> <span data-ttu-id="1ecf0-374">Перед фактическим освобождением памяти потребуется вызвать метод context.sync().</span><span class="sxs-lookup"><span data-stu-id="1ecf0-374">You will need to call "context.sync()" before the memory release takes effect.</span></span>'
    name: untrack()
    fullName: untrack()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'untrack(): Word.Body;'
      return:
        type:
          - 'word!Word.Body:class'
        description: ''
references:
  - uid: 'word!OfficeExtension.ClientObject:class'
    name: OfficeExtension.ClientObject
  - uid: 'word!Word.ContentControlCollection:class'
    name: Word.ContentControlCollection
  - uid: 'word!Word.RequestContext:class'
    name: RequestContext
  - uid: 'word!Word.Font:class'
    name: Word.Font
  - uid: 'word!Word.Body#getHtml~0:complex'
    name: OfficeExtension.ClientResult<string>
    fullName: OfficeExtension.ClientResult<string>
    spec.typeScript:
      - uid: 'word!OfficeExtension.ClientResult:class'
        name: OfficeExtension.ClientResult
        fullName: OfficeExtension.ClientResult
      - name: <string>
        fullName: <string>
  - uid: 'word!Word.Body#getOoxml~0:complex'
    name: OfficeExtension.ClientResult<string>
    fullName: OfficeExtension.ClientResult<string>
    spec.typeScript:
      - uid: 'word!OfficeExtension.ClientResult:class'
        name: OfficeExtension.ClientResult
        fullName: OfficeExtension.ClientResult
      - name: <string>
        fullName: <string>
  - uid: 'word!Word.Range:class'
    name: Word.Range
  - uid: 'word!Word.RangeLocation:enum'
    name: Word.RangeLocation
  - uid: 'word!Word.InlinePictureCollection:class'
    name: Word.InlinePictureCollection
  - uid: 'word!Word.BreakType:enum'
    name: Word.BreakType
  - uid: 'word!Word.InsertLocation:enum'
    name: Word.InsertLocation
  - uid: 'word!Word.ContentControl:class'
    name: Word.ContentControl
  - uid: 'word!Word.InlinePicture:class'
    name: Word.InlinePicture
  - uid: 'word!Word.Paragraph:class'
    name: Word.Paragraph
  - uid: 'word!Word.Table:class'
    name: Word.Table
  - uid: 'word!Word.ListCollection:class'
    name: Word.ListCollection
  - uid: 'word!Word.Body:class'
    name: Word.Body
  - uid: 'word!Word.Interfaces.BodyLoadOptions:interface'
    name: Word.Interfaces.BodyLoadOptions
  - uid: 'word!Word.ParagraphCollection:class'
    name: Word.ParagraphCollection
  - uid: 'word!Word.Section:class'
    name: Word.Section
  - uid: 'word!Word.RangeCollection:class'
    name: Word.RangeCollection
  - uid: 'word!Word.Body#search~0:complex'
    name: |-
      Word.SearchOptions | {
                  ignorePunct?: boolean;
                  ignoreSpace?: boolean;
                  matchCase?: boolean;
                  matchPrefix?: boolean;
                  matchSuffix?: boolean;
                  matchWholeWord?: boolean;
                  matchWildcards?: boolean;
              }
    fullName: |-
      Word.SearchOptions | {
                  ignorePunct?: boolean;
                  ignoreSpace?: boolean;
                  matchCase?: boolean;
                  matchPrefix?: boolean;
                  matchSuffix?: boolean;
                  matchWholeWord?: boolean;
                  matchWildcards?: boolean;
              }
    spec.typeScript:
      - uid: 'word!Word.SearchOptions:class'
        name: Word.SearchOptions
        fullName: Word.SearchOptions
      - name: |2-
           | {
                      ignorePunct?: boolean;
                      ignoreSpace?: boolean;
                      matchCase?: boolean;
                      matchPrefix?: boolean;
                      matchSuffix?: boolean;
                      matchWholeWord?: boolean;
                      matchWildcards?: boolean;
                  }
        fullName: |2-
           | {
                      ignorePunct?: boolean;
                      ignoreSpace?: boolean;
                      matchCase?: boolean;
                      matchPrefix?: boolean;
                      matchSuffix?: boolean;
                      matchWholeWord?: boolean;
                      matchWildcards?: boolean;
                  }
  - uid: 'word!Word.SelectionMode:enum'
    name: Word.SelectionMode
  - uid: 'word!Word.Interfaces.BodyUpdateData:interface'
    name: Interfaces.BodyUpdateData
  - uid: 'word!OfficeExtension.UpdateOptions:interface'
    name: OfficeExtension.UpdateOptions
  - uid: 'word!Word.Body#styleBuiltIn~0:complex'
    name: Word.Style | "Other" | "Normal" | "Heading1" | "Heading2" | "Heading3" | "Heading4" | "Heading5" | "Heading6" | "Heading7" | "Heading8" | "Heading9" | "Toc1" | "Toc2" | "Toc3" | "Toc4" | "Toc5" | "Toc6" | "Toc7" | "Toc8" | "Toc9" | "FootnoteText" | "Header" | "Footer" | "Caption" | "FootnoteReference" | "EndnoteReference" | "EndnoteText" | "Title" | "Subtitle" | "Hyperlink" | "Strong" | "Emphasis" | "NoSpacing" | "ListParagraph" | "Quote" | "IntenseQuote" | "SubtleEmphasis" | "IntenseEmphasis" | "SubtleReference" | "IntenseReference" | "BookTitle" | "Bibliography" | "TocHeading" | "TableGrid" | "PlainTable1" | "PlainTable2" | "PlainTable3" | "PlainTable4" | "PlainTable5" | "TableGridLight" | "GridTable1Light" | "GridTable1Light_Accent1" | "GridTable1Light_Accent2" | "GridTable1Light_Accent3" | "GridTable1Light_Accent4" | "GridTable1Light_Accent5" | "GridTable1Light_Accent6" | "GridTable2" | "GridTable2_Accent1" | "GridTable2_Accent2" | "GridTable2_Accent3" | "GridTable2_Accent4" | "GridTable2_Accent5" | "GridTable2_Accent6" | "GridTable3" | "GridTable3_Accent1" | "GridTable3_Accent2" | "GridTable3_Accent3" | "GridTable3_Accent4" | "GridTable3_Accent5" | "GridTable3_Accent6" | "GridTable4" | "GridTable4_Accent1" | "GridTable4_Accent2" | "GridTable4_Accent3" | "GridTable4_Accent4" | "GridTable4_Accent5" | "GridTable4_Accent6" | "GridTable5Dark" | "GridTable5Dark_Accent1" | "GridTable5Dark_Accent2" | "GridTable5Dark_Accent3" | "GridTable5Dark_Accent4" | "GridTable5Dark_Accent5" | "GridTable5Dark_Accent6" | "GridTable6Colorful" | "GridTable6Colorful_Accent1" | "GridTable6Colorful_Accent2" | "GridTable6Colorful_Accent3" | "GridTable6Colorful_Accent4" | "GridTable6Colorful_Accent5" | "GridTable6Colorful_Accent6" | "GridTable7Colorful" | "GridTable7Colorful_Accent1" | "GridTable7Colorful_Accent2" | "GridTable7Colorful_Accent3" | "GridTable7Colorful_Accent4" | "GridTable7Colorful_Accent5" | "GridTable7Colorful_Accent6" | "ListTable1Light" | "ListTable1Light_Accent1" | "ListTable1Light_Accent2" | "ListTable1Light_Accent3" | "ListTable1Light_Accent4" | "ListTable1Light_Accent5" | "ListTable1Light_Accent6" | "ListTable2" | "ListTable2_Accent1" | "ListTable2_Accent2" | "ListTable2_Accent3" | "ListTable2_Accent4" | "ListTable2_Accent5" | "ListTable2_Accent6" | "ListTable3" | "ListTable3_Accent1" | "ListTable3_Accent2" | "ListTable3_Accent3" | "ListTable3_Accent4" | "ListTable3_Accent5" | "ListTable3_Accent6" | "ListTable4" | "ListTable4_Accent1" | "ListTable4_Accent2" | "ListTable4_Accent3" | "ListTable4_Accent4" | "ListTable4_Accent5" | "ListTable4_Accent6" | "ListTable5Dark" | "ListTable5Dark_Accent1" | "ListTable5Dark_Accent2" | "ListTable5Dark_Accent3" | "ListTable5Dark_Accent4" | "ListTable5Dark_Accent5" | "ListTable5Dark_Accent6" | "ListTable6Colorful" | "ListTable6Colorful_Accent1" | "ListTable6Colorful_Accent2" | "ListTable6Colorful_Accent3" | "ListTable6Colorful_Accent4" | "ListTable6Colorful_Accent5" | "ListTable6Colorful_Accent6" | "ListTable7Colorful" | "ListTable7Colorful_Accent1" | "ListTable7Colorful_Accent2" | "ListTable7Colorful_Accent3" | "ListTable7Colorful_Accent4" | "ListTable7Colorful_Accent5" | "ListTable7Colorful_Accent6"
    fullName: Word.Style | "Other" | "Normal" | "Heading1" | "Heading2" | "Heading3" | "Heading4" | "Heading5" | "Heading6" | "Heading7" | "Heading8" | "Heading9" | "Toc1" | "Toc2" | "Toc3" | "Toc4" | "Toc5" | "Toc6" | "Toc7" | "Toc8" | "Toc9" | "FootnoteText" | "Header" | "Footer" | "Caption" | "FootnoteReference" | "EndnoteReference" | "EndnoteText" | "Title" | "Subtitle" | "Hyperlink" | "Strong" | "Emphasis" | "NoSpacing" | "ListParagraph" | "Quote" | "IntenseQuote" | "SubtleEmphasis" | "IntenseEmphasis" | "SubtleReference" | "IntenseReference" | "BookTitle" | "Bibliography" | "TocHeading" | "TableGrid" | "PlainTable1" | "PlainTable2" | "PlainTable3" | "PlainTable4" | "PlainTable5" | "TableGridLight" | "GridTable1Light" | "GridTable1Light_Accent1" | "GridTable1Light_Accent2" | "GridTable1Light_Accent3" | "GridTable1Light_Accent4" | "GridTable1Light_Accent5" | "GridTable1Light_Accent6" | "GridTable2" | "GridTable2_Accent1" | "GridTable2_Accent2" | "GridTable2_Accent3" | "GridTable2_Accent4" | "GridTable2_Accent5" | "GridTable2_Accent6" | "GridTable3" | "GridTable3_Accent1" | "GridTable3_Accent2" | "GridTable3_Accent3" | "GridTable3_Accent4" | "GridTable3_Accent5" | "GridTable3_Accent6" | "GridTable4" | "GridTable4_Accent1" | "GridTable4_Accent2" | "GridTable4_Accent3" | "GridTable4_Accent4" | "GridTable4_Accent5" | "GridTable4_Accent6" | "GridTable5Dark" | "GridTable5Dark_Accent1" | "GridTable5Dark_Accent2" | "GridTable5Dark_Accent3" | "GridTable5Dark_Accent4" | "GridTable5Dark_Accent5" | "GridTable5Dark_Accent6" | "GridTable6Colorful" | "GridTable6Colorful_Accent1" | "GridTable6Colorful_Accent2" | "GridTable6Colorful_Accent3" | "GridTable6Colorful_Accent4" | "GridTable6Colorful_Accent5" | "GridTable6Colorful_Accent6" | "GridTable7Colorful" | "GridTable7Colorful_Accent1" | "GridTable7Colorful_Accent2" | "GridTable7Colorful_Accent3" | "GridTable7Colorful_Accent4" | "GridTable7Colorful_Accent5" | "GridTable7Colorful_Accent6" | "ListTable1Light" | "ListTable1Light_Accent1" | "ListTable1Light_Accent2" | "ListTable1Light_Accent3" | "ListTable1Light_Accent4" | "ListTable1Light_Accent5" | "ListTable1Light_Accent6" | "ListTable2" | "ListTable2_Accent1" | "ListTable2_Accent2" | "ListTable2_Accent3" | "ListTable2_Accent4" | "ListTable2_Accent5" | "ListTable2_Accent6" | "ListTable3" | "ListTable3_Accent1" | "ListTable3_Accent2" | "ListTable3_Accent3" | "ListTable3_Accent4" | "ListTable3_Accent5" | "ListTable3_Accent6" | "ListTable4" | "ListTable4_Accent1" | "ListTable4_Accent2" | "ListTable4_Accent3" | "ListTable4_Accent4" | "ListTable4_Accent5" | "ListTable4_Accent6" | "ListTable5Dark" | "ListTable5Dark_Accent1" | "ListTable5Dark_Accent2" | "ListTable5Dark_Accent3" | "ListTable5Dark_Accent4" | "ListTable5Dark_Accent5" | "ListTable5Dark_Accent6" | "ListTable6Colorful" | "ListTable6Colorful_Accent1" | "ListTable6Colorful_Accent2" | "ListTable6Colorful_Accent3" | "ListTable6Colorful_Accent4" | "ListTable6Colorful_Accent5" | "ListTable6Colorful_Accent6" | "ListTable7Colorful" | "ListTable7Colorful_Accent1" | "ListTable7Colorful_Accent2" | "ListTable7Colorful_Accent3" | "ListTable7Colorful_Accent4" | "ListTable7Colorful_Accent5" | "ListTable7Colorful_Accent6"
    spec.typeScript:
      - uid: 'word!Word.Style:enum'
        name: Word.Style
        fullName: Word.Style
      - name: ' | "Other" | "Normal" | "Heading1" | "Heading2" | "Heading3" | "Heading4" | "Heading5" | "Heading6" | "Heading7" | "Heading8" | "Heading9" | "Toc1" | "Toc2" | "Toc3" | "Toc4" | "Toc5" | "Toc6" | "Toc7" | "Toc8" | "Toc9" | "FootnoteText" | "Header" | "Footer" | "Caption" | "FootnoteReference" | "EndnoteReference" | "EndnoteText" | "Title" | "Subtitle" | "Hyperlink" | "Strong" | "Emphasis" | "NoSpacing" | "ListParagraph" | "Quote" | "IntenseQuote" | "SubtleEmphasis" | "IntenseEmphasis" | "SubtleReference" | "IntenseReference" | "BookTitle" | "Bibliography" | "TocHeading" | "TableGrid" | "PlainTable1" | "PlainTable2" | "PlainTable3" | "PlainTable4" | "PlainTable5" | "TableGridLight" | "GridTable1Light" | "GridTable1Light_Accent1" | "GridTable1Light_Accent2" | "GridTable1Light_Accent3" | "GridTable1Light_Accent4" | "GridTable1Light_Accent5" | "GridTable1Light_Accent6" | "GridTable2" | "GridTable2_Accent1" | "GridTable2_Accent2" | "GridTable2_Accent3" | "GridTable2_Accent4" | "GridTable2_Accent5" | "GridTable2_Accent6" | "GridTable3" | "GridTable3_Accent1" | "GridTable3_Accent2" | "GridTable3_Accent3" | "GridTable3_Accent4" | "GridTable3_Accent5" | "GridTable3_Accent6" | "GridTable4" | "GridTable4_Accent1" | "GridTable4_Accent2" | "GridTable4_Accent3" | "GridTable4_Accent4" | "GridTable4_Accent5" | "GridTable4_Accent6" | "GridTable5Dark" | "GridTable5Dark_Accent1" | "GridTable5Dark_Accent2" | "GridTable5Dark_Accent3" | "GridTable5Dark_Accent4" | "GridTable5Dark_Accent5" | "GridTable5Dark_Accent6" | "GridTable6Colorful" | "GridTable6Colorful_Accent1" | "GridTable6Colorful_Accent2" | "GridTable6Colorful_Accent3" | "GridTable6Colorful_Accent4" | "GridTable6Colorful_Accent5" | "GridTable6Colorful_Accent6" | "GridTable7Colorful" | "GridTable7Colorful_Accent1" | "GridTable7Colorful_Accent2" | "GridTable7Colorful_Accent3" | "GridTable7Colorful_Accent4" | "GridTable7Colorful_Accent5" | "GridTable7Colorful_Accent6" | "ListTable1Light" | "ListTable1Light_Accent1" | "ListTable1Light_Accent2" | "ListTable1Light_Accent3" | "ListTable1Light_Accent4" | "ListTable1Light_Accent5" | "ListTable1Light_Accent6" | "ListTable2" | "ListTable2_Accent1" | "ListTable2_Accent2" | "ListTable2_Accent3" | "ListTable2_Accent4" | "ListTable2_Accent5" | "ListTable2_Accent6" | "ListTable3" | "ListTable3_Accent1" | "ListTable3_Accent2" | "ListTable3_Accent3" | "ListTable3_Accent4" | "ListTable3_Accent5" | "ListTable3_Accent6" | "ListTable4" | "ListTable4_Accent1" | "ListTable4_Accent2" | "ListTable4_Accent3" | "ListTable4_Accent4" | "ListTable4_Accent5" | "ListTable4_Accent6" | "ListTable5Dark" | "ListTable5Dark_Accent1" | "ListTable5Dark_Accent2" | "ListTable5Dark_Accent3" | "ListTable5Dark_Accent4" | "ListTable5Dark_Accent5" | "ListTable5Dark_Accent6" | "ListTable6Colorful" | "ListTable6Colorful_Accent1" | "ListTable6Colorful_Accent2" | "ListTable6Colorful_Accent3" | "ListTable6Colorful_Accent4" | "ListTable6Colorful_Accent5" | "ListTable6Colorful_Accent6" | "ListTable7Colorful" | "ListTable7Colorful_Accent1" | "ListTable7Colorful_Accent2" | "ListTable7Colorful_Accent3" | "ListTable7Colorful_Accent4" | "ListTable7Colorful_Accent5" | "ListTable7Colorful_Accent6"'
        fullName: ' | "Other" | "Normal" | "Heading1" | "Heading2" | "Heading3" | "Heading4" | "Heading5" | "Heading6" | "Heading7" | "Heading8" | "Heading9" | "Toc1" | "Toc2" | "Toc3" | "Toc4" | "Toc5" | "Toc6" | "Toc7" | "Toc8" | "Toc9" | "FootnoteText" | "Header" | "Footer" | "Caption" | "FootnoteReference" | "EndnoteReference" | "EndnoteText" | "Title" | "Subtitle" | "Hyperlink" | "Strong" | "Emphasis" | "NoSpacing" | "ListParagraph" | "Quote" | "IntenseQuote" | "SubtleEmphasis" | "IntenseEmphasis" | "SubtleReference" | "IntenseReference" | "BookTitle" | "Bibliography" | "TocHeading" | "TableGrid" | "PlainTable1" | "PlainTable2" | "PlainTable3" | "PlainTable4" | "PlainTable5" | "TableGridLight" | "GridTable1Light" | "GridTable1Light_Accent1" | "GridTable1Light_Accent2" | "GridTable1Light_Accent3" | "GridTable1Light_Accent4" | "GridTable1Light_Accent5" | "GridTable1Light_Accent6" | "GridTable2" | "GridTable2_Accent1" | "GridTable2_Accent2" | "GridTable2_Accent3" | "GridTable2_Accent4" | "GridTable2_Accent5" | "GridTable2_Accent6" | "GridTable3" | "GridTable3_Accent1" | "GridTable3_Accent2" | "GridTable3_Accent3" | "GridTable3_Accent4" | "GridTable3_Accent5" | "GridTable3_Accent6" | "GridTable4" | "GridTable4_Accent1" | "GridTable4_Accent2" | "GridTable4_Accent3" | "GridTable4_Accent4" | "GridTable4_Accent5" | "GridTable4_Accent6" | "GridTable5Dark" | "GridTable5Dark_Accent1" | "GridTable5Dark_Accent2" | "GridTable5Dark_Accent3" | "GridTable5Dark_Accent4" | "GridTable5Dark_Accent5" | "GridTable5Dark_Accent6" | "GridTable6Colorful" | "GridTable6Colorful_Accent1" | "GridTable6Colorful_Accent2" | "GridTable6Colorful_Accent3" | "GridTable6Colorful_Accent4" | "GridTable6Colorful_Accent5" | "GridTable6Colorful_Accent6" | "GridTable7Colorful" | "GridTable7Colorful_Accent1" | "GridTable7Colorful_Accent2" | "GridTable7Colorful_Accent3" | "GridTable7Colorful_Accent4" | "GridTable7Colorful_Accent5" | "GridTable7Colorful_Accent6" | "ListTable1Light" | "ListTable1Light_Accent1" | "ListTable1Light_Accent2" | "ListTable1Light_Accent3" | "ListTable1Light_Accent4" | "ListTable1Light_Accent5" | "ListTable1Light_Accent6" | "ListTable2" | "ListTable2_Accent1" | "ListTable2_Accent2" | "ListTable2_Accent3" | "ListTable2_Accent4" | "ListTable2_Accent5" | "ListTable2_Accent6" | "ListTable3" | "ListTable3_Accent1" | "ListTable3_Accent2" | "ListTable3_Accent3" | "ListTable3_Accent4" | "ListTable3_Accent5" | "ListTable3_Accent6" | "ListTable4" | "ListTable4_Accent1" | "ListTable4_Accent2" | "ListTable4_Accent3" | "ListTable4_Accent4" | "ListTable4_Accent5" | "ListTable4_Accent6" | "ListTable5Dark" | "ListTable5Dark_Accent1" | "ListTable5Dark_Accent2" | "ListTable5Dark_Accent3" | "ListTable5Dark_Accent4" | "ListTable5Dark_Accent5" | "ListTable5Dark_Accent6" | "ListTable6Colorful" | "ListTable6Colorful_Accent1" | "ListTable6Colorful_Accent2" | "ListTable6Colorful_Accent3" | "ListTable6Colorful_Accent4" | "ListTable6Colorful_Accent5" | "ListTable6Colorful_Accent6" | "ListTable7Colorful" | "ListTable7Colorful_Accent1" | "ListTable7Colorful_Accent2" | "ListTable7Colorful_Accent3" | "ListTable7Colorful_Accent4" | "ListTable7Colorful_Accent5" | "ListTable7Colorful_Accent6"'
  - uid: 'word!Word.TableCollection:class'
    name: Word.TableCollection
  - uid: 'word!Word.Interfaces.BodyData:interface'
    name: Word.Interfaces.BodyData
  - uid: 'word!Word.Body#type~0:complex'
    name: Word.BodyType | "Unknown" | "MainDoc" | "Section" | "Header" | "Footer" | "TableCell"
    fullName: Word.BodyType | "Unknown" | "MainDoc" | "Section" | "Header" | "Footer" | "TableCell"
    spec.typeScript:
      - uid: 'word!Word.BodyType:enum'
        name: Word.BodyType
        fullName: Word.BodyType
      - name: ' | "Unknown" | "MainDoc" | "Section" | "Header" | "Footer" | "TableCell"'
        fullName: ' | "Unknown" | "MainDoc" | "Section" | "Header" | "Footer" | "TableCell"'