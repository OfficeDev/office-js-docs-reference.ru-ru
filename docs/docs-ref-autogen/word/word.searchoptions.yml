### YamlMime:UniversalReference
ms.openlocfilehash: bf518d0dfc27b927413cd4916004f1986257ec64
ms.sourcegitcommit: 3f4a320fa860d05d348c8bdec2295e046a45a34f
ms.translationtype: MT
ms.contentlocale: ru-RU
ms.lasthandoff: 02/07/2019
ms.locfileid: "29769703"
items:
- uid: word.Word.SearchOptions
  summary: >-
    Указывает параметры, которые необходимо включить в операцию поиска.


    \[[Набор API-Интерфейсов: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  name: Word.SearchOptions
  fullName: Word.SearchOptions
  langs:
  - typeScript
  type: class
  extends:
  - office.OfficeExtension.ClientObject
  package: word
  children:
  - word.Word.SearchOptions.context
  - word.Word.SearchOptions.ignorePunct
  - word.Word.SearchOptions.ignoreSpace
  - word.Word.SearchOptions.load
  - word.Word.SearchOptions.matchCase
  - word.Word.SearchOptions.matchPrefix
  - word.Word.SearchOptions.matchSuffix
  - word.Word.SearchOptions.matchWholeWord
  - word.Word.SearchOptions.matchWildcards
  - word.Word.SearchOptions.matchWildCards
  - word.Word.SearchOptions.newObject
  - word.Word.SearchOptions.set
  - word.Word.SearchOptions.toJSON
- uid: word.Word.SearchOptions.context
  summary: Контекста запроса, связанного с объектом. Это необходимо добавить в процесс для процесса ведущего приложения Office.
  name: context
  fullName: context
  langs:
  - typeScript
  type: property
  syntax:
    content: 'context: RequestContext;'
    return:
      type:
      - RequestContext
- uid: word.Word.SearchOptions.ignorePunct
  summary: >-
    Возвращает или задает значение, которое указывает, следует ли пропустить все знаки препинания между словами. Соответствует установленному флажку "Не учитывать знаки препинания" в диалоговом окне "Найти и заменить".


    \[[Набор API-Интерфейсов: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  name: ignorePunct
  fullName: ignorePunct
  langs:
  - typeScript
  type: property
  syntax:
    content: 'ignorePunct: boolean;'
    return:
      type:
      - boolean
- uid: word.Word.SearchOptions.ignoreSpace
  summary: >-
    Возвращает или задает значение, которое указывает, следует ли пропустить все пробелы между словами. Соответствует установленному флажку "Не учитывать пробелы" в диалоговом окне "Найти и заменить".


    \[[Набор API-Интерфейсов: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  name: ignoreSpace
  fullName: ignoreSpace
  langs:
  - typeScript
  type: property
  syntax:
    content: 'ignoreSpace: boolean;'
    return:
      type:
      - boolean
- uid: word.Word.SearchOptions.load
  summary: Очереди команды для загрузки указанного свойства объекта. Перед чтением свойства необходимо вызвать «context.sync()».
  remarks: "В дополнение к подписи этот метод имеет следующие цифровые подписи.\n\n`load(option?: { select?: string; expand?: string; }): Word.SearchOptions`-Option.select — это разделенный запятыми строка, указывающая свойства для загрузки, куда options.expand — это разделенный запятыми строка, указывающая свойства навигации для загрузки.\n\n`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Word.SearchOptions`-Доступно только на коллекцию типов. Это похоже на предыдущую. Option.Top указывает максимальное число элементов коллекции, которые можно включить в результат. Option.Skip указывает количество элементов, которые пропускаются и не включенный в результате. Если option.top указан, результирующий набор будет запущен процесс после пропускает указанное число элементов.\n#### <a name=\"examples\"></a>Примеры\n\n```javascript\n// Ignore punctuation search\n// Run a batch operation against the Word object model.\nWord.run(function (context) {\n    \n    // Queue a command to search the document and ignore punctuation.\n    var searchResults = context.document.body.search('video you', {ignorePunct: true});\n\n    // Queue a command to load the search results and get the font property values.\n    context.load(searchResults, 'font');\n    \n    // Synchronize the document state by executing the queued commands, \n    // and return a promise to indicate task completion.\n    return context.sync().then(function () {\n        console.log('Found count: ' + searchResults.items.length);\n\n        // Queue a set of commands to change the font for each found item.\n        for (var i = 0; i < searchResults.items.length; i++) {\n            searchResults.items[i].font.color = 'purple';\n            searchResults.items[i].font.highlightColor = '#FFFF00'; //Yellow\n            searchResults.items[i].font.bold = true;\n        }\n        \n        // Synchronize the document state by executing the queued commands, \n        // and return a promise to indicate task completion.\n        return context.sync();\n    });  \n})\n.catch(function (error) {\n    console.log('Error: ' + JSON.stringify(error));\n    if (error instanceof OfficeExtension.Error) {\n        console.log('Debug info: ' + JSON.stringify(error.debugInfo));\n    }\n});\n```\n```javascript\n// Search based on a prefix\n// Run a batch operation against the Word object model.\nWord.run(function (context) {\n    \n    // Queue a command to search the document based on a prefix.\n    var searchResults = context.document.body.search('vid', {matchPrefix: true});\n\n    // Queue a command to load the search results and get the font property values.\n    context.load(searchResults, 'font');\n    \n    // Synchronize the document state by executing the queued commands, \n    // and return a promise to indicate task completion.\n    return context.sync().then(function () {\n        console.log('Found count: ' + searchResults.items.length);\n\n        // Queue a set of commands to change the font for each found item.\n        for (var i = 0; i < searchResults.items.length; i++) {\n            searchResults.items[i].font.color = 'purple';\n            searchResults.items[i].font.highlightColor = '#FFFF00'; //Yellow\n            searchResults.items[i].font.bold = true;\n        }\n        \n        // Synchronize the document state by executing the queued commands, \n        // and return a promise to indicate task completion.\n        return context.sync();\n    });  \n})\n.catch(function (error) {\n    console.log('Error: ' + JSON.stringify(error));\n    if (error instanceof OfficeExtension.Error) {\n        console.log('Debug info: ' + JSON.stringify(error.debugInfo));\n    }\n});\n```\n```javascript\n// Search based on a suffix\n// Run a batch operation against the Word object model.\nWord.run(function (context) {\n\n    // Queue a command to search the document for any string of characters after 'ly'.\n    var searchResults = context.document.body.search('ly', {matchSuffix: true});\n\n    // Queue a command to load the search results and get the font property values.\n    context.load(searchResults, 'font');\n    \n    // Synchronize the document state by executing the queued commands, \n    // and return a promise to indicate task completion.\n    return context.sync().then(function () {\n        console.log('Found count: ' + searchResults.items.length);\n\n        // Queue a set of commands to change the font for each found item.\n        for (var i = 0; i < searchResults.items.length; i++) {\n            searchResults.items[i].font.color = 'orange';\n            searchResults.items[i].font.highlightColor = 'black';\n            searchResults.items[i].font.bold = true;\n        }\n        \n        // Synchronize the document state by executing the queued commands, \n        // and return a promise to indicate task completion.\n        return context.sync();\n    });  \n})\n.catch(function (error) {\n    console.log('Error: ' + JSON.stringify(error));\n    if (error instanceof OfficeExtension.Error) {\n        console.log('Debug info: ' + JSON.stringify(error.debugInfo));\n    }\n});\n```\n```javascript\n// Search using a wildcard\n// Run a batch operation against the Word object model.\nWord.run(function (context) {\n    \n    // Queue a command to search the document with a wildcard\n    // for any string of characters that starts with 'to' and ends with 'n'.\n    var searchResults = context.document.body.search('to*n', {matchWildCards: true});\n\n    // Queue a command to load the search results and get the font property values.\n    context.load(searchResults, 'font');\n    \n    // Synchronize the document state by executing the queued commands, \n    // and return a promise to indicate task completion.\n    return context.sync().then(function () {\n        console.log('Found count: ' + searchResults.items.length);\n\n        // Queue a set of commands to change the font for each found item.\n        for (var i = 0; i < searchResults.items.length; i++) {\n            searchResults.items[i].font.color = 'purple';\n            searchResults.items[i].font.highlightColor = 'pink';\n            searchResults.items[i].font.bold = true;\n        }\n        \n        // Synchronize the document state by executing the queued commands, \n        // and return a promise to indicate task completion.\n        return context.sync();\n    });  \n})\n.catch(function (error) {\n    console.log('Error: ' + JSON.stringify(error));\n    if (error instanceof OfficeExtension.Error) {\n        console.log('Debug info: ' + JSON.stringify(error.debugInfo));\n    }\n});\n```"
  name: load(option)
  fullName: load
  langs:
  - typeScript
  type: method
  syntax:
    content: 'load(option?: string | string[]): Word.SearchOptions;'
    return:
      type:
      - word.Word.SearchOptions
      description: ''
    parameters:
    - id: option
      description: Строка, разделенных запятыми или массив строк, задающих свойства для загрузки.
      type:
      - string | string[]
- uid: word.Word.SearchOptions.matchCase
  summary: >-
    Получает или задает значение, указывающее, следует ли выполнять поиск с учетом регистра. Соответствующий флажок учитывать регистр в диалоговом окне Найти и заменить.


    \[[Набор API-Интерфейсов: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  name: matchCase
  fullName: matchCase
  langs:
  - typeScript
  type: property
  syntax:
    content: 'matchCase: boolean;'
    return:
      type:
      - boolean
- uid: word.Word.SearchOptions.matchPrefix
  summary: >-
    Возвращает или задает значение, которое указывает, нужно ли учитывать слова, начинающиеся со строки поиска. Соответствует установленному флажку "Учитывать префикс" в диалоговом окне "Найти и заменить".


    \[[Набор API-Интерфейсов: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  name: matchPrefix
  fullName: matchPrefix
  langs:
  - typeScript
  type: property
  syntax:
    content: 'matchPrefix: boolean;'
    return:
      type:
      - boolean
- uid: word.Word.SearchOptions.matchSuffix
  summary: >-
    Возвращает или задает значение, указывающее, нужно ли учитывать слова, которые заканчиваются строкой поиска. Соответствует установленному флажку "Учитывать суффикс" в диалоговом окне "Найти и заменить".


    \[[Набор API-Интерфейсов: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  name: matchSuffix
  fullName: matchSuffix
  langs:
  - typeScript
  type: property
  syntax:
    content: 'matchSuffix: boolean;'
    return:
      type:
      - boolean
- uid: word.Word.SearchOptions.matchWholeWord
  summary: >-
    Возвращает или задает значение, которое указывает, следует ли искать только целые слова, а не текст, являющийся частью большего слова. Соответствует установленному флажку "Только слово целиком" в диалоговом окне "Найти и заменить".


    \[[Набор API-Интерфейсов: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  name: matchWholeWord
  fullName: matchWholeWord
  langs:
  - typeScript
  type: property
  syntax:
    content: 'matchWholeWord: boolean;'
    return:
      type:
      - boolean
- uid: word.Word.SearchOptions.matchWildcards
  summary: >-
    Возвращает или задает значение, которое указывает, будет ли выполняться поиск с использованием специальных операторов поиска. Соответствует установленному флажку "Подстановочные знаки" в диалоговом окне "Найти и заменить".


    \[[Набор API-Интерфейсов: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  name: matchWildcards
  fullName: matchWildcards
  langs:
  - typeScript
  type: property
  syntax:
    content: 'matchWildcards: boolean;'
    return:
      type:
      - boolean
- uid: word.Word.SearchOptions.matchWildCards
  name: matchWildCards
  fullName: matchWildCards
  langs:
  - typeScript
  type: property
  syntax:
    content: 'matchWildCards: boolean;'
    return:
      type:
      - boolean
- uid: word.Word.SearchOptions.newObject
  summary: Создайте новый экземпляр объекта Word.SearchOptions
  name: newObject(context)
  fullName: newObject
  langs:
  - typeScript
  type: method
  syntax:
    content: 'static newObject(context: OfficeExtension.ClientRequestContext): Word.SearchOptions;'
    return:
      type:
      - word.Word.SearchOptions
      description: ''
    parameters:
    - id: context
      description: ''
      type:
      - office.OfficeExtension.ClientRequestContext
- uid: word.Word.SearchOptions.set
  summary: Задание нескольких свойств объекта в то же время. Вы можете передать простой объект с соответствующих свойств или другой объект API одного типа.
  remarks: >-
    Этот метод имеет следующие дополнительные подписи.


    `set(properties: Word.SearchOptions): void`
  name: set(properties, options)
  fullName: set
  langs:
  - typeScript
  type: method
  syntax:
    content: 'set(properties: Interfaces.SearchOptionsUpdateData, options?: OfficeExtension.UpdateOptions): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: properties
      description: Объект JavaScript со свойствами, которые isomorphically структурированы для свойства объекта, для которого вызывается метод.
      type:
      - Interfaces.SearchOptionsUpdateData
    - id: options
      description: Предоставляет возможность отключать ошибки, если объект свойств пытается записать все свойства только для чтения.
      type:
      - office.OfficeExtension.UpdateOptions
- uid: word.Word.SearchOptions.toJSON
  name: toJSON()
  fullName: toJSON
  langs:
  - typeScript
  type: method
  syntax:
    content: 'toJSON(): Word.Interfaces.SearchOptionsData;'
    return:
      type:
      - word.Word.Interfaces.SearchOptionsData
      description: ''
