### YamlMime:UniversalReference
ms.openlocfilehash: 0d8606797024cd7b8fb625fbc5f07a5d86454d23
ms.sourcegitcommit: 4bbd18c863a4140ad456b859f9c0309e153e10b2
ms.translationtype: MT
ms.contentlocale: ru-RU
ms.lasthandoff: 11/02/2018
ms.locfileid: "25912727"
items:
- uid: word.Word.Paragraph
  summary: >-
    <span data-ttu-id="bc58e-101">Представляет один абзац в выделении, диапазоне, элементе управления содержимым или тексте документа.</span><span class="sxs-lookup"><span data-stu-id="bc58e-101">Represents a single paragraph in a selection, range, content control, or document body.</span></span>


    <span data-ttu-id="bc58e-102">\[[Набор API-Интерфейсов: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="bc58e-102">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
  name: Word.Paragraph
  fullName: word.Word.Paragraph
  langs:
  - typeScript
  type: class
  extends:
  - OfficeExtension.ClientObject
  package: word
  children:
  - word.Word.Paragraph.alignment
  - word.Word.Paragraph.attachToList
  - word.Word.Paragraph.clear
  - word.Word.Paragraph.contentControls
  - word.Word.Paragraph.delete
  - word.Word.Paragraph.detachFromList
  - word.Word.Paragraph.firstLineIndent
  - word.Word.Paragraph.font
  - word.Word.Paragraph.getHtml
  - word.Word.Paragraph.getNext
  - word.Word.Paragraph.getNextOrNullObject
  - word.Word.Paragraph.getOoxml
  - word.Word.Paragraph.getPrevious
  - word.Word.Paragraph.getPreviousOrNullObject
  - word.Word.Paragraph.getRange
  - word.Word.Paragraph.getTextRanges
  - word.Word.Paragraph.inlinePictures
  - word.Word.Paragraph.insertBreak
  - word.Word.Paragraph.insertContentControl
  - word.Word.Paragraph.insertFileFromBase64
  - word.Word.Paragraph.insertHtml
  - word.Word.Paragraph.insertInlinePictureFromBase64
  - word.Word.Paragraph.insertOoxml
  - word.Word.Paragraph.insertParagraph
  - word.Word.Paragraph.insertTable
  - word.Word.Paragraph.insertText
  - word.Word.Paragraph.isLastParagraph
  - word.Word.Paragraph.isListItem
  - word.Word.Paragraph.leftIndent
  - word.Word.Paragraph.lineSpacing
  - word.Word.Paragraph.lineUnitAfter
  - word.Word.Paragraph.lineUnitBefore
  - word.Word.Paragraph.list
  - word.Word.Paragraph.listItem
  - word.Word.Paragraph.listItemOrNullObject
  - word.Word.Paragraph.listOrNullObject
  - word.Word.Paragraph.load
  - word.Word.Paragraph.outlineLevel
  - word.Word.Paragraph.parentBody
  - word.Word.Paragraph.parentContentControl
  - word.Word.Paragraph.parentContentControlOrNullObject
  - word.Word.Paragraph.parentTable
  - word.Word.Paragraph.parentTableCell
  - word.Word.Paragraph.parentTableCellOrNullObject
  - word.Word.Paragraph.parentTableOrNullObject
  - word.Word.Paragraph.rightIndent
  - word.Word.Paragraph.search
  - word.Word.Paragraph.select
  - word.Word.Paragraph.spaceAfter
  - word.Word.Paragraph.spaceBefore
  - word.Word.Paragraph.split
  - word.Word.Paragraph.startNewList
  - word.Word.Paragraph.style
  - word.Word.Paragraph.styleBuiltIn
  - word.Word.Paragraph.tableNestingLevel
  - word.Word.Paragraph.text
  - word.Word.Paragraph.toJSON
  - word.Word.Paragraph.track
  - word.Word.Paragraph.untrack
- uid: word.Word.Paragraph.alignment
  summary: >-
    <span data-ttu-id="bc58e-103">Возвращает или задает выравнивание абзаца.</span><span class="sxs-lookup"><span data-stu-id="bc58e-103">Gets or sets the alignment for a paragraph.</span></span> <span data-ttu-id="bc58e-104">Возможные значения: left, centered, right и justified.</span><span class="sxs-lookup"><span data-stu-id="bc58e-104">The value can be 'left', 'centered', 'right', or 'justified'.</span></span>


    <span data-ttu-id="bc58e-105">\[[Набор API-Интерфейсов: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="bc58e-105">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
  name: alignment
  fullName: word.Word.Paragraph.alignment
  langs:
  - typeScript
  type: property
  syntax:
    content: 'alignment: Word.Alignment | "Mixed" | "Unknown" | "Left" | "Centered" | "Right" | "Justified";'
    return:
      type:
      - Word.Alignment | "Mixed" | "Unknown" | "Left" | "Centered" | "Right" | "Justified"
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"bc58e-106\">Примеры</span><span class=\"sxs-lookup\"><span data-stu-id=\"bc58e-106\">Examples</span></span>\n\n```typescript\nawait Word.run(async (context) => {\n    // Centers last paragraph alignment\n    context.document.body.paragraphs\n        .getLast().alignment = \"Centered\";\n\n    await context.sync();\n});\n```"
- uid: word.Word.Paragraph.attachToList
  summary: >-
    <span data-ttu-id="bc58e-p102">Позволяет присоединить абзац к существующему списку на указанном уровне. Если присоединить абзац к списку не удается или он уже является элементом списка, метод не выполняется.</span><span class="sxs-lookup"><span data-stu-id="bc58e-p102">Lets the paragraph join an existing list at the specified level. Fails if the paragraph cannot join the list or if the paragraph is already a list item.</span></span>


    <span data-ttu-id="bc58e-109">\[[Набор API-Интерфейсов: WordApi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="bc58e-109">\[ [API set: WordApi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
  name: attachToList(listId, level)
  fullName: word.Word.Paragraph.attachToList
  langs:
  - typeScript
  type: method
  syntax:
    content: 'attachToList(listId: number, level: number): Word.List;'
    return:
      type:
      - word.Word.List
      description: ''
    parameters:
    - id: listId
      description: <span data-ttu-id="bc58e-p103">Обязательный. Идентификатор существующего списка.</span><span class="sxs-lookup"><span data-stu-id="bc58e-p103">Required. The ID of an existing list.</span></span>
      type:
      - number
    - id: level
      description: <span data-ttu-id="bc58e-p104">Обязательный. Уровень в списке.</span><span class="sxs-lookup"><span data-stu-id="bc58e-p104">Required. The level in the list.</span></span>
      type:
      - number
- uid: word.Word.Paragraph.clear
  summary: >-
    <span data-ttu-id="bc58e-p105">Очищает содержимое объекта абзаца. Пользователь может отменить операцию для очищенного содержимого.</span><span class="sxs-lookup"><span data-stu-id="bc58e-p105">Clears the contents of the paragraph object. The user can perform the undo operation on the cleared content.</span></span>


    <span data-ttu-id="bc58e-116">\[[Набор API-Интерфейсов: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="bc58e-116">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
  name: clear()
  fullName: word.Word.Paragraph.clear
  langs:
  - typeScript
  type: method
  syntax:
    content: 'clear(): void;'
    return:
      type:
      - void
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"bc58e-117\">Примеры</span><span class=\"sxs-lookup\"><span data-stu-id=\"bc58e-117\">Examples</span></span>\n\n```javascript\n// Run a batch operation against the Word object model.\nWord.run(function (context) {\n\n    // Create a proxy object for the paragraphs collection.\n    var paragraphs = context.document.body.paragraphs;\n\n    // Queue a commmand to load the style property for all of the paragraphs.\n    context.load(paragraphs, 'style');\n\n    // Synchronize the document state by executing the queued commands,\n    // and return a promise to indicate task completion.\n    return context.sync().then(function () {\n\n        // Queue a command to clear the contents of the first paragraph.\n        paragraphs.items[0].clear();\n\n        // Synchronize the document state by executing the queued commands,\n        // and return a promise to indicate task completion.\n        return context.sync().then(function () {\n            console.log('Cleared the contents of the first paragraph.');\n        });\n    });\n})\n.catch(function (error) {\n    console.log('Error: ' + JSON.stringify(error));\n    if (error instanceof OfficeExtension.Error) {\n        console.log('Debug info: ' + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- uid: word.Word.Paragraph.contentControls
  summary: >-
    <span data-ttu-id="bc58e-p106">Возвращает коллекцию объектов contentControl в абзаце. Только для чтения.</span><span class="sxs-lookup"><span data-stu-id="bc58e-p106">Gets the collection of content control objects in the paragraph. Read-only.</span></span>


    <span data-ttu-id="bc58e-120">\[[Набор API-Интерфейсов: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="bc58e-120">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
  name: contentControls
  fullName: word.Word.Paragraph.contentControls
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly contentControls: Word.ContentControlCollection;'
    return:
      type:
      - word.Word.ContentControlCollection
- uid: word.Word.Paragraph.delete
  summary: >-
    <span data-ttu-id="bc58e-121">Удаляет абзац и его содержимое из документа.</span><span class="sxs-lookup"><span data-stu-id="bc58e-121">Deletes the paragraph and its content from the document.</span></span>


    <span data-ttu-id="bc58e-122">\[[Набор API-Интерфейсов: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="bc58e-122">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
  name: delete()
  fullName: word.Word.Paragraph.delete
  langs:
  - typeScript
  type: method
  syntax:
    content: 'delete(): void;'
    return:
      type:
      - void
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"bc58e-123\">Примеры</span><span class=\"sxs-lookup\"><span data-stu-id=\"bc58e-123\">Examples</span></span>\n\n```javascript\n// Run a batch operation against the Word object model.\nWord.run(function (context) {\n\n    // Create a proxy object for the paragraphs collection.\n    var paragraphs = context.document.body.paragraphs;\n\n    // Queue a commmand to load the text property for all of the paragraphs.\n    context.load(paragraphs, 'text');\n\n    // Synchronize the document state by executing the queued commands,\n    // and return a promise to indicate task completion.\n    return context.sync().then(function () {\n\n        // Queue a command to delete the first paragraph.\n        paragraphs.items[0].delete();\n\n        // Synchronize the document state by executing the queued commands,\n        // and return a promise to indicate task completion.\n        return context.sync().then(function () {\n            console.log('Deleted the first paragraph.');\n        });\n    });\n})\n.catch(function (error) {\n    console.log('Error: ' + JSON.stringify(error));\n    if (error instanceof OfficeExtension.Error) {\n        console.log('Debug info: ' + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- uid: word.Word.Paragraph.detachFromList
  summary: >-
    <span data-ttu-id="bc58e-124">Перемещает абзац за пределы списка (если он является элементом списка).</span><span class="sxs-lookup"><span data-stu-id="bc58e-124">Moves this paragraph out of its list, if the paragraph is a list item.</span></span>


    <span data-ttu-id="bc58e-125">\[[Набор API-Интерфейсов: WordApi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="bc58e-125">\[ [API set: WordApi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
  name: detachFromList()
  fullName: word.Word.Paragraph.detachFromList
  langs:
  - typeScript
  type: method
  syntax:
    content: 'detachFromList(): void;'
    return:
      type:
      - void
      description: ''
- uid: word.Word.Paragraph.firstLineIndent
  summary: >-
    <span data-ttu-id="bc58e-p107">Возвращает или задает значение отступа первой строки или выступа в пунктах. Для установки отступа первой строки укажите положительное значение и используйте отрицательное значение, чтобы задать выступ.</span><span class="sxs-lookup"><span data-stu-id="bc58e-p107">Gets or sets the value, in points, for a first line or hanging indent. Use a positive value to set a first-line indent, and use a negative value to set a hanging indent.</span></span>


    <span data-ttu-id="bc58e-128">\[[Набор API-Интерфейсов: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="bc58e-128">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
  name: firstLineIndent
  fullName: word.Word.Paragraph.firstLineIndent
  langs:
  - typeScript
  type: property
  syntax:
    content: 'firstLineIndent: number;'
    return:
      type:
      - number
- uid: word.Word.Paragraph.font
  summary: >-
    <span data-ttu-id="bc58e-p108">Получает формат текста абзаца. Используйте это свойство для получения и установки имени, размера, цвета и других свойств шрифта. Только для чтения.</span><span class="sxs-lookup"><span data-stu-id="bc58e-p108">Gets the text format of the paragraph. Use this to get and set font name, size, color, and other properties. Read-only.</span></span>


    <span data-ttu-id="bc58e-132">\[[Набор API-Интерфейсов: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="bc58e-132">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
  name: font
  fullName: word.Word.Paragraph.font
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly font: Word.Font;'
    return:
      type:
      - word.Word.Font
- uid: word.Word.Paragraph.getHtml
  summary: >-
    <span data-ttu-id="bc58e-133">Возвращает HTML-представление объекта абзаца.</span><span class="sxs-lookup"><span data-stu-id="bc58e-133">Gets the HTML representation of the paragraph object.</span></span>


    <span data-ttu-id="bc58e-134">\[[Набор API-Интерфейсов: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="bc58e-134">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
  name: getHtml()
  fullName: word.Word.Paragraph.getHtml
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getHtml(): OfficeExtension.ClientResult<string>;'
    return:
      type:
      - OfficeExtension.ClientResult<string>
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"bc58e-135\">Примеры</span><span class=\"sxs-lookup\"><span data-stu-id=\"bc58e-135\">Examples</span></span>\n\n```javascript\n// Run a batch operation against the Word object model.\nWord.run(function (context) {\n\n    // Create a proxy object for the paragraphs collection.\n    var paragraphs = context.document.body.paragraphs;\n\n    // Queue a commmand to load the style property for all of the paragraphs.\n    context.load(paragraphs, 'style');\n\n    // Synchronize the document state by executing the queued commands,\n    // and return a promise to indicate task completion.\n    return context.sync().then(function () {\n\n        // Queue a a set of commands to get the HTML of the first paragraph.\n        var html = paragraphs.items[0].getHtml();\n\n        // Synchronize the document state by executing the queued commands,\n        // and return a promise to indicate task completion.\n        return context.sync().then(function () {\n            console.log('Paragraph HTML: ' + html.value);\n        });\n    });\n})\n.catch(function (error) {\n    console.log('Error: ' + JSON.stringify(error));\n    if (error instanceof OfficeExtension.Error) {\n        console.log('Debug info: ' + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- uid: word.Word.Paragraph.getNext
  summary: >-
    <span data-ttu-id="bc58e-p109">Возвращает следующий абзац. Если абзац последний, возвращает ошибку.</span><span class="sxs-lookup"><span data-stu-id="bc58e-p109">Gets the next paragraph. Throws if the paragraph is the last one.</span></span>


    <span data-ttu-id="bc58e-138">\[[Набор API-Интерфейсов: WordApi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="bc58e-138">\[ [API set: WordApi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
  name: getNext()
  fullName: word.Word.Paragraph.getNext
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getNext(): Word.Paragraph;'
    return:
      type:
      - Word.Paragraph
      description: ''
- uid: word.Word.Paragraph.getNextOrNullObject
  summary: >-
    <span data-ttu-id="bc58e-p110">Возвращает следующий абзац. Если абзац последний, возвращается пустой объект.</span><span class="sxs-lookup"><span data-stu-id="bc58e-p110">Gets the next paragraph. Returns a null object if the paragraph is the last one.</span></span>


    <span data-ttu-id="bc58e-141">\[[Набор API-Интерфейсов: WordApi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="bc58e-141">\[ [API set: WordApi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
  name: getNextOrNullObject()
  fullName: word.Word.Paragraph.getNextOrNullObject
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getNextOrNullObject(): Word.Paragraph;'
    return:
      type:
      - Word.Paragraph
      description: ''
- uid: word.Word.Paragraph.getOoxml
  summary: >-
    <span data-ttu-id="bc58e-142">Возвращает OOXML-представление объекта абзаца.</span><span class="sxs-lookup"><span data-stu-id="bc58e-142">Gets the Office Open XML (OOXML) representation of the paragraph object.</span></span>


    <span data-ttu-id="bc58e-143">\[[Набор API-Интерфейсов: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="bc58e-143">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
  name: getOoxml()
  fullName: word.Word.Paragraph.getOoxml
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getOoxml(): OfficeExtension.ClientResult<string>;'
    return:
      type:
      - OfficeExtension.ClientResult<string>
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"bc58e-144\">Примеры</span><span class=\"sxs-lookup\"><span data-stu-id=\"bc58e-144\">Examples</span></span>\n\n```javascript\n// Run a batch operation against the Word object model.\nWord.run(function (context) {\n\n    // Create a proxy object for the paragraphs collection.\n    var paragraphs = context.document.body.paragraphs;\n\n    // Queue a commmand to load the style property for the top 2 paragraphs.\n    context.load(paragraphs, {select: 'style', top: 2} );\n\n    // Synchronize the document state by executing the queued commands,\n    // and return a promise to indicate task completion.\n    return context.sync().then(function () {\n\n        // Queue a a set of commands to get the OOXML of the first paragraph.\n        var ooxml = paragraphs.items[0].getOoxml();\n\n        // Synchronize the document state by executing the queued commands,\n        // and return a promise to indicate task completion.\n        return context.sync().then(function () {\n            console.log('Paragraph OOXML: ' + ooxml.value);\n        });\n    });\n})\n.catch(function (error) {\n    console.log('Error: ' + JSON.stringify(error));\n    if (error instanceof OfficeExtension.Error) {\n        console.log('Debug info: ' + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- uid: word.Word.Paragraph.getPrevious
  summary: >-
    <span data-ttu-id="bc58e-p111">Возвращает предыдущий абзац. Если абзац первый, возвращает ошибку.</span><span class="sxs-lookup"><span data-stu-id="bc58e-p111">Gets the previous paragraph. Throws if the paragraph is the first one.</span></span>


    <span data-ttu-id="bc58e-147">\[[Набор API-Интерфейсов: WordApi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="bc58e-147">\[ [API set: WordApi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
  name: getPrevious()
  fullName: word.Word.Paragraph.getPrevious
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getPrevious(): Word.Paragraph;'
    return:
      type:
      - Word.Paragraph
      description: ''
- uid: word.Word.Paragraph.getPreviousOrNullObject
  summary: >-
    <span data-ttu-id="bc58e-p112">Возвращает предыдущий абзац. Если абзац первый, возвращается пустой объект.</span><span class="sxs-lookup"><span data-stu-id="bc58e-p112">Gets the previous paragraph. Returns a null object if the paragraph is the first one.</span></span>


    <span data-ttu-id="bc58e-150">\[[Набор API-Интерфейсов: WordApi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="bc58e-150">\[ [API set: WordApi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
  name: getPreviousOrNullObject()
  fullName: word.Word.Paragraph.getPreviousOrNullObject
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getPreviousOrNullObject(): Word.Paragraph;'
    return:
      type:
      - Word.Paragraph
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"bc58e-151\">Примеры</span><span class=\"sxs-lookup\"><span data-stu-id=\"bc58e-151\">Examples</span></span>\n\n```javascript\n// Run a batch operation against the Word object model.\nWord.run(function (context) {\n\n    // Create a proxy object for the paragraphs collection.\n    var paragraphs = context.document.body.paragraphs;\n\n    // Queue a commmand to load the text property for all of the paragraphs.\n    context.load(paragraphs, 'text');\n\n    // Synchronize the document state by executing the queued commands,\n    // and return a promise to indicate task completion.\n    return context.sync().then(function () {\n\n        // Queue commands to create a proxy object for the next-to-last paragraph.\n        var indexOfLastParagraph = paragraphs.items.length - 1;\n        var precedingParagraph = paragraphs.items[indexOfLastParagraph].getPreviousOrNullObject();\n\n        // Queue a command to load the text of the preceding paragraph.\n        context.load(precedingParagraph, 'text');\n\n        // Synchronize the document state by executing the queued commands,\n        // and return a promise to indicate task completion.\n        return context.sync().then(function () {\n            if (precedingParagraph.isNullObject) {\n                console.log('There are no paragraphs before the current one.');\n            } else {\n                console.log('The preceding paragraph is: ' + precedingParagraph.text);\n            }\n        });\n    });\n}).catch(function (error) {\n    console.log('Error: ' + JSON.stringify(error));\n    if (error instanceof OfficeExtension.Error) {\n        console.log('Debug info: ' + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- uid: word.Word.Paragraph.getRange
  summary: >-
    <span data-ttu-id="bc58e-152">Возвращает весь абзац (либо его начальную или конечную точку) в виде диапазона.</span><span class="sxs-lookup"><span data-stu-id="bc58e-152">Gets the whole paragraph, or the starting or ending point of the paragraph, as a range.</span></span>


    <span data-ttu-id="bc58e-153">\[[Набор API-Интерфейсов: WordApi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="bc58e-153">\[ [API set: WordApi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
  name: getRange(rangeLocation)
  fullName: word.Word.Paragraph.getRange
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getRange(rangeLocation?: Word.RangeLocation): Word.Range;'
    return:
      type:
      - Word.Range
      description: ''
    parameters:
    - id: rangeLocation
      description: <span data-ttu-id="bc58e-154">Необязательно указывать.</span><span class="sxs-lookup"><span data-stu-id="bc58e-154">Optional.</span></span> <span data-ttu-id="bc58e-155">Расположение диапазона может быть «Целое», «Запуск», «End», «После», или «Содержимое».</span><span class="sxs-lookup"><span data-stu-id="bc58e-155">The range location can be 'Whole', 'Start', 'End', 'After', or 'Content'.</span></span>
      type:
      - word.Word.RangeLocation
- uid: word.Word.Paragraph.getTextRanges
  summary: >-
    <span data-ttu-id="bc58e-156">Возвращает текстовые диапазоны абзаца с помощью знаков препинания, а также других маркеров конца.</span><span class="sxs-lookup"><span data-stu-id="bc58e-156">Gets the text ranges in the paragraph by using punctuation marks and/or other ending marks.</span></span>


    <span data-ttu-id="bc58e-157">\[[Набор API-Интерфейсов: WordApi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="bc58e-157">\[ [API set: WordApi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
  name: getTextRanges(endingMarks, trimSpacing)
  fullName: word.Word.Paragraph.getTextRanges
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getTextRanges(endingMarks: string[], trimSpacing?: boolean): Word.RangeCollection;'
    return:
      type:
      - word.Word.RangeCollection
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"bc58e-158\">Примеры</span><span class=\"sxs-lookup\"><span data-stu-id=\"bc58e-158\">Examples</span></span>\n\n```typescript\nawait Word.run(async (context) => {\n    // Gets the complete sentence  (as range) associated with the insertion point.\n    let sentences = context.document\n        .getSelection().getTextRanges([\".\"] /* Using the \".\" as delimiter */, false /*means without trimming spaces*/);\n    sentences.load(\"$none\");\n\n    await context.sync();\n\n    // Expands the range to the end of the paragraph to get all the complete sentences.\n    let sentencesToTheEndOfParagraph = sentences.items[0].getRange()\n        .expandTo(context.document.getSelection().paragraphs\n            .getFirst().getRange(\"End\")).getTextRanges([\".\"], false /* Don't trim spaces*/);\n    sentencesToTheEndOfParagraph.load(\"text\");\n\n    await context.sync();\n    for (let i = 0; i < sentencesToTheEndOfParagraph.items.length; i++) {\n        console.log(sentencesToTheEndOfParagraph.items[i].text);\n    }\n});\n```"
    parameters:
    - id: endingMarks
      description: <span data-ttu-id="bc58e-p114">Обязательный. Знаки пунктуации и/или другие конечные метки в виде массива строк.</span><span class="sxs-lookup"><span data-stu-id="bc58e-p114">Required. The punctuation marks and/or other ending marks as an array of strings.</span></span>
      type:
      - string[]
    - id: trimSpacing
      description: <span data-ttu-id="bc58e-161">Необязательно указывать.</span><span class="sxs-lookup"><span data-stu-id="bc58e-161">Optional.</span></span> <span data-ttu-id="bc58e-162">Указывает, следует ли удалить знаки интервалы (пробелы, вкладок, столбцов и end абзаца) из начала и окончания диапазонов, возвращаемых в коллекции диапазона.</span><span class="sxs-lookup"><span data-stu-id="bc58e-162">Indicates whether to trim spacing characters (spaces, tabs, column breaks, and paragraph end marks) from the start and end of the ranges returned in the range collection.</span></span> <span data-ttu-id="bc58e-163">Значение по умолчанию — false означает, символы интервалов в начало и конец диапазонов включены в диапазоне семейства.</span><span class="sxs-lookup"><span data-stu-id="bc58e-163">Default is false which indicates that spacing characters at the start and end of the ranges are included in the range collection.</span></span>
      type:
      - boolean
- uid: word.Word.Paragraph.inlinePictures
  summary: >-
    <span data-ttu-id="bc58e-164">Получает коллекцию объектов InlinePicture абзац.</span><span class="sxs-lookup"><span data-stu-id="bc58e-164">Gets the collection of InlinePicture objects in the paragraph.</span></span> <span data-ttu-id="bc58e-165">Коллекция не содержит плавающие изображения.</span><span class="sxs-lookup"><span data-stu-id="bc58e-165">The collection does not include floating images.</span></span> <span data-ttu-id="bc58e-166">Только для чтения.</span><span class="sxs-lookup"><span data-stu-id="bc58e-166">Read-only.</span></span>


    <span data-ttu-id="bc58e-167">\[[Набор API-Интерфейсов: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="bc58e-167">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
  name: inlinePictures
  fullName: word.Word.Paragraph.inlinePictures
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly inlinePictures: Word.InlinePictureCollection;'
    return:
      type:
      - word.Word.InlinePictureCollection
- uid: word.Word.Paragraph.insertBreak
  summary: >-
    <span data-ttu-id="bc58e-p117">Вставляет разрыв в указанном расположении в основном документе. Возможные значения insertLocation: Before и After.</span><span class="sxs-lookup"><span data-stu-id="bc58e-p117">Inserts a break at the specified location in the main document. The insertLocation value can be 'Before' or 'After'.</span></span>


    <span data-ttu-id="bc58e-170">\[[Набор API-Интерфейсов: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="bc58e-170">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
  name: insertBreak(breakType, insertLocation)
  fullName: word.Word.Paragraph.insertBreak
  langs:
  - typeScript
  type: method
  syntax:
    content: 'insertBreak(breakType: Word.BreakType, insertLocation: Word.InsertLocation): void;'
    return:
      type:
      - void
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"bc58e-171\">Примеры</span><span class=\"sxs-lookup\"><span data-stu-id=\"bc58e-171\">Examples</span></span>\n\n```javascript\n// Run a batch operation against the Word object model.\nWord.run(function (context) {\n\n    // Create a proxy object for the paragraphs collection.\n    var paragraphs = context.document.body.paragraphs;\n\n    // Queue a commmand to load the style property for the top 2 paragraphs.\n    // We never perform an empty load. We always must request a property.\n    context.load(paragraphs, {select: 'style', top: 2} );\n\n    // Synchronize the document state by executing the queued commands,\n    // and return a promise to indicate task completion.\n    return context.sync().then(function () {\n\n        // Queue a command to get the first paragraph.\n        var paragraph = paragraphs.items[0];\n\n        // Queue a command to insert a page break after the first paragraph.\n        paragraph.insertBreak('page', 'After');\n\n        // Synchronize the document state by executing the queued commands,\n        // and return a promise to indicate task completion.\n        return context.sync().then(function () {\n            console.log('Inserted a page break after the paragraph.');\n        });\n    });\n})\n.catch(function (error) {\n    console.log('Error: ' + JSON.stringify(error));\n    if (error instanceof OfficeExtension.Error) {\n        console.log('Debug info: ' + JSON.stringify(error.debugInfo));\n    }\n});\n```\n```typescript\nWord.run(async (context) => {\n    context.document.body.paragraphs.getFirst().insertBreak(Word.BreakType.line, \"After\");\n\n    await context.sync();\n    console.log(\"success\");\n});\n```\n```typescript\nawait Word.run(async (context) => {\n    context.document.body.paragraphs.getFirst().insertBreak(Word.BreakType.page, \"After\");\n\n    await context.sync();\n    console.log(\"success\");\n});\n```"
    parameters:
    - id: breakType
      description: <span data-ttu-id="bc58e-p118">Обязательный параметр. Тип разрыва, который необходимо добавить в документ.</span><span class="sxs-lookup"><span data-stu-id="bc58e-p118">Required. The break type to add to the document.</span></span>
      type:
      - word.Word.BreakType
    - id: insertLocation
      description: "<span data-ttu-id=\"bc58e-p119\">Обязательный параметр. Возможные значения: Before и After.</span><span class=\"sxs-lookup\"><span data-stu-id=\"bc58e-p119\">Required. The value can be 'Before' or 'After'.</span></span>"
      type:
      - Word.InsertLocation
- uid: word.Word.Paragraph.insertContentControl
  summary: >-
    <span data-ttu-id="bc58e-176">Включает объект абзаца в элемент управления содержимым форматированного текста.</span><span class="sxs-lookup"><span data-stu-id="bc58e-176">Wraps the paragraph object with a rich text content control.</span></span>


    <span data-ttu-id="bc58e-177">\[[Набор API-Интерфейсов: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="bc58e-177">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
  name: insertContentControl()
  fullName: word.Word.Paragraph.insertContentControl
  langs:
  - typeScript
  type: method
  syntax:
    content: 'insertContentControl(): Word.ContentControl;'
    return:
      type:
      - word.Word.ContentControl
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"bc58e-178\">Примеры</span><span class=\"sxs-lookup\"><span data-stu-id=\"bc58e-178\">Examples</span></span>\n\n```javascript\n// Run a batch operation against the Word object model.\nWord.run(function (context) {\n\n    // Create a proxy object for the paragraphs collection.\n    var paragraphs = context.document.body.paragraphs;\n\n    // Queue a commmand to load the style property for the top 2 paragraphs.\n    // We never perform an empty load. We always must request a property.\n    context.load(paragraphs, {select: 'style', top: 2} );\n\n    // Synchronize the document state by executing the queued commands,\n    // and return a promise to indicate task completion.\n    return context.sync().then(function () {\n\n        // Queue a command to get the first paragraph.\n        var paragraph = paragraphs.items[0];\n\n        // Queue a command to wrap the first paragraph in a rich text content control.\n        paragraph.insertContentControl();\n\n        // Synchronize the document state by executing the queued commands,\n        // and return a promise to indicate task completion.\n        return context.sync().then(function () {\n            console.log('Wrapped the first paragraph in a content control.');\n        });\n    });\n})\n.catch(function (error) {\n    console.log('Error: ' + JSON.stringify(error));\n    if (error instanceof OfficeExtension.Error) {\n        console.log('Debug info: ' + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- uid: word.Word.Paragraph.insertFileFromBase64
  summary: >-
    <span data-ttu-id="bc58e-179">Вставка документа в абзац в указанном расположении.</span><span class="sxs-lookup"><span data-stu-id="bc58e-179">Inserts a document into the paragraph at the specified location.</span></span> <span data-ttu-id="bc58e-180">Значение insertLocation может быть «Replace», «Запуск» или «Завершение».</span><span class="sxs-lookup"><span data-stu-id="bc58e-180">The insertLocation value can be 'Replace', 'Start', or 'End'.</span></span>


    <span data-ttu-id="bc58e-181">\[[Набор API-Интерфейсов: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="bc58e-181">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
  name: insertFileFromBase64(base64File, insertLocation)
  fullName: word.Word.Paragraph.insertFileFromBase64
  langs:
  - typeScript
  type: method
  syntax:
    content: 'insertFileFromBase64(base64File: string, insertLocation: Word.InsertLocation): Word.Range;'
    return:
      type:
      - Word.Range
      description: ''
    parameters:
    - id: base64File
      description: <span data-ttu-id="bc58e-p121">Обязательный. Содержимое DOCX-файла в кодировке base64.</span><span class="sxs-lookup"><span data-stu-id="bc58e-p121">Required. The base64 encoded content of a .docx file.</span></span>
      type:
      - string
    - id: insertLocation
      description: "<span data-ttu-id=\"bc58e-p122\">Обязательный параметр. Возможные значения: Replace, Start или End.</span><span class=\"sxs-lookup\"><span data-stu-id=\"bc58e-p122\">Required. The value can be 'Replace', 'Start', or 'End'.</span></span>"
      type:
      - Word.InsertLocation
- uid: word.Word.Paragraph.insertHtml
  summary: >-
    <span data-ttu-id="bc58e-p123">Вставляет HTML в абзац в указанном расположении. Возможные значения insertLocation: Replace, Start и End.</span><span class="sxs-lookup"><span data-stu-id="bc58e-p123">Inserts HTML into the paragraph at the specified location. The insertLocation value can be 'Replace', 'Start', or 'End'.</span></span>


    <span data-ttu-id="bc58e-188">\[[Набор API-Интерфейсов: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="bc58e-188">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
  name: insertHtml(html, insertLocation)
  fullName: word.Word.Paragraph.insertHtml
  langs:
  - typeScript
  type: method
  syntax:
    content: 'insertHtml(html: string, insertLocation: Word.InsertLocation): Word.Range;'
    return:
      type:
      - Word.Range
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"bc58e-189\">Примеры</span><span class=\"sxs-lookup\"><span data-stu-id=\"bc58e-189\">Examples</span></span>\n\n```javascript\n// Run a batch operation against the Word object model.\nWord.run(function (context) {\n\n    // Create a proxy object for the paragraphs collection.\n    var paragraphs = context.document.body.paragraphs;\n\n    // Queue a commmand to load the style property for the top 2 paragraphs.\n    // We never perform an empty load. We always must request a property.\n    context.load(paragraphs, {select: 'style', top: 2} );\n\n    // Synchronize the document state by executing the queued commands,\n    // and return a promise to indicate task completion.\n    return context.sync().then(function () {\n\n        // Queue a command to get the first paragraph.\n        var paragraph = paragraphs.items[0];\n\n        // Queue a command to insert HTML content at the end of the first paragraph.\n        paragraph.insertHtml('<strong>Inserted HTML.</strong>', Word.InsertLocation.end);\n\n        // Synchronize the document state by executing the queued commands,\n        // and return a promise to indicate task completion.\n        return context.sync().then(function () {\n            console.log('Inserted HTML content at the end of the first paragraph.');\n        });\n    });\n})\n.catch(function (error) {\n    console.log('Error: ' + JSON.stringify(error));\n    if (error instanceof OfficeExtension.Error) {\n        console.log('Debug info: ' + JSON.stringify(error.debugInfo));\n    }\n});\n```"
    parameters:
    - id: html
      description: <span data-ttu-id="bc58e-p124">Обязательный параметр. HTML-код, который необходимо вставить в абзац.</span><span class="sxs-lookup"><span data-stu-id="bc58e-p124">Required. The HTML to be inserted in the paragraph.</span></span>
      type:
      - string
    - id: insertLocation
      description: "<span data-ttu-id=\"bc58e-p125\">Обязательный параметр. Возможные значения: Replace, Start или End.</span><span class=\"sxs-lookup\"><span data-stu-id=\"bc58e-p125\">Required. The value can be 'Replace', 'Start', or 'End'.</span></span>"
      type:
      - Word.InsertLocation
- uid: word.Word.Paragraph.insertInlinePictureFromBase64
  summary: >-
    <span data-ttu-id="bc58e-p126">Вставляет рисунок в абзац в указанном расположении. Возможные значения insertLocation: Replace, Start и End.</span><span class="sxs-lookup"><span data-stu-id="bc58e-p126">Inserts a picture into the paragraph at the specified location. The insertLocation value can be 'Replace', 'Start', or 'End'.</span></span>


    <span data-ttu-id="bc58e-196">\[[Набор API-Интерфейсов: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="bc58e-196">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
  name: insertInlinePictureFromBase64(base64EncodedImage, insertLocation)
  fullName: word.Word.Paragraph.insertInlinePictureFromBase64
  langs:
  - typeScript
  type: method
  syntax:
    content: 'insertInlinePictureFromBase64(base64EncodedImage: string, insertLocation: Word.InsertLocation): Word.InlinePicture;'
    return:
      type:
      - word.Word.InlinePicture
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"bc58e-197\">Примеры</span><span class=\"sxs-lookup\"><span data-stu-id=\"bc58e-197\">Examples</span></span>\n\n```javascript\n// Run a batch operation against the Word object model.\nWord.run(function (context) {\n\n    // Create a proxy object for the paragraphs collection.\n    var paragraphs = context.document.body.paragraphs;\n\n    // Queue a commmand to load the style property for all of the paragraphs.\n    context.load(paragraphs, 'style');\n\n    // Synchronize the document state by executing the queued commands,\n    // and return a promise to indicate task completion.\n    return context.sync().then(function () {\n\n        // Queue a command to get the first paragraph.\n        var paragraph = paragraphs.items[0];\n\n        var b64encodedImg = \"iVBORw0KGgoAAAANSUhEUgAAAB4AAAANCAIAAAAxEEnAAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAACFSURBVDhPtY1BEoQwDMP6/0+XgIMTBAeYoTqso9Rkx1zG+tNj1H94jgGzeNSjteO5vtQQuG2seO0av8LzGbe3anzRoJ4ybm/VeKEerAEbAUpW4aWQCmrGFWykRzGBCnYy2ha3oAIq2MloW9yCCqhgJ6NtcQsqoIKdjLbFLaiACnYyf2fODbrjZcXfr2F4AAAAAElFTkSuQmCC\";\n\n        // Queue a command to insert a base64 encoded image at the beginning of the first paragraph.\n        paragraph.insertInlinePictureFromBase64(b64encodedImg, Word.InsertLocation.start);\n\n        // Synchronize the document state by executing the queued commands,\n        // and return a promise to indicate task completion.\n        return context.sync().then(function () {\n            console.log('Added an image to the first paragraph.');\n        });\n    });\n})\n.catch(function (error) {\n    console.log('Error: ' + JSON.stringify(error));\n    if (error instanceof OfficeExtension.Error) {\n        console.log('Debug info: ' + JSON.stringify(error.debugInfo));\n    }\n});\n```"
    parameters:
    - id: base64EncodedImage
      description: <span data-ttu-id="bc58e-p127">Обязательный. Вставляемое изображение в кодировке base64.</span><span class="sxs-lookup"><span data-stu-id="bc58e-p127">Required. The base64 encoded image to be inserted.</span></span>
      type:
      - string
    - id: insertLocation
      description: "<span data-ttu-id=\"bc58e-p128\">Обязательный параметр. Возможные значения: Replace, Start или End.</span><span class=\"sxs-lookup\"><span data-stu-id=\"bc58e-p128\">Required. The value can be 'Replace', 'Start', or 'End'.</span></span>"
      type:
      - Word.InsertLocation
- uid: word.Word.Paragraph.insertOoxml
  summary: >-
    <span data-ttu-id="bc58e-202">Вставляет OOXML в абзаце в указанном расположении.</span><span class="sxs-lookup"><span data-stu-id="bc58e-202">Inserts OOXML into the paragraph at the specified location.</span></span> <span data-ttu-id="bc58e-203">Значение insertLocation может быть «Replace», «Запуск» или «Завершение».</span><span class="sxs-lookup"><span data-stu-id="bc58e-203">The insertLocation value can be 'Replace', 'Start', or 'End'.</span></span>


    <span data-ttu-id="bc58e-204">\[[Набор API-Интерфейсов: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="bc58e-204">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
  name: insertOoxml(ooxml, insertLocation)
  fullName: word.Word.Paragraph.insertOoxml
  langs:
  - typeScript
  type: method
  syntax:
    content: 'insertOoxml(ooxml: string, insertLocation: Word.InsertLocation): Word.Range;'
    return:
      type:
      - Word.Range
      description: ''
    parameters:
    - id: ooxml
      description: <span data-ttu-id="bc58e-p130">Обязательный параметр. OOXML-код, который будет вставлен в абзац.</span><span class="sxs-lookup"><span data-stu-id="bc58e-p130">Required. The OOXML to be inserted in the paragraph.</span></span>
      type:
      - string
    - id: insertLocation
      description: "<span data-ttu-id=\"bc58e-p131\">Обязательный параметр. Возможные значения: Replace, Start или End.</span><span class=\"sxs-lookup\"><span data-stu-id=\"bc58e-p131\">Required. The value can be 'Replace', 'Start', or 'End'.</span></span>"
      type:
      - Word.InsertLocation
- uid: word.Word.Paragraph.insertParagraph
  summary: >-
    <span data-ttu-id="bc58e-p132">Вставляет абзац в указанном расположении. Возможные значения insertLocation: Before и After.</span><span class="sxs-lookup"><span data-stu-id="bc58e-p132">Inserts a paragraph at the specified location. The insertLocation value can be 'Before' or 'After'.</span></span>


    <span data-ttu-id="bc58e-211">\[[Набор API-Интерфейсов: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="bc58e-211">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
  name: insertParagraph(paragraphText, insertLocation)
  fullName: word.Word.Paragraph.insertParagraph
  langs:
  - typeScript
  type: method
  syntax:
    content: 'insertParagraph(paragraphText: string, insertLocation: Word.InsertLocation): Word.Paragraph;'
    return:
      type:
      - Word.Paragraph
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"bc58e-212\">Примеры</span><span class=\"sxs-lookup\"><span data-stu-id=\"bc58e-212\">Examples</span></span>\n\n```javascript\n// Run a batch operation against the Word object model.\nWord.run(function (context) {\n\n    // Create a proxy object for the paragraphs collection.\n    var paragraphs = context.document.body.paragraphs;\n\n    // Queue a commmand to load the style property for the top 2 paragraphs.\n    // We never perform an empty load. We always must request a property.\n    context.load(paragraphs, {select: 'style', top: 2} );\n\n    // Synchronize the document state by executing the queued commands,\n    // and return a promise to indicate task completion.\n    return context.sync().then(function () {\n\n        // Queue a command to get the first paragraph.\n        var paragraph = paragraphs.items[0];\n\n        // Queue a command to insert the paragraph after the current paragraph.\n        paragraph.insertParagraph('Content of a new paragraph', Word.InsertLocation.after);\n\n        // Synchronize the document state by executing the queued commands,\n        // and return a promise to indicate task completion.\n        return context.sync().then(function () {\n            console.log('Inserted a new paragraph at the end of the first paragraph.');\n        });\n    });\n})\n.catch(function (error) {\n    console.log('Error: ' + JSON.stringify(error));\n    if (error instanceof OfficeExtension.Error) {\n        console.log('Debug info: ' + JSON.stringify(error.debugInfo));\n    }\n});\n```\n```typescript\nawait Word.run(async (context) => {\n  // Second sentence, let's insert it as a paragraph after the previously inserted one.\n  let secondSentence = context.document.body.insertParagraph(\n    \"This is the first text with a custom style.\",\n    \"End\"\n  );\n  secondSentence.font.set({\n    bold: false,\n    italic: true,\n    name: \"Berlin Sans FB\",\n    color: \"blue\",\n    size: 30\n  });\n\n  await context.sync();\n});\n```"
    parameters:
    - id: paragraphText
      description: <span data-ttu-id="bc58e-p133">Обязательный параметр. Текст абзаца, который необходимо вставить.</span><span class="sxs-lookup"><span data-stu-id="bc58e-p133">Required. The paragraph text to be inserted.</span></span>
      type:
      - string
    - id: insertLocation
      description: "<span data-ttu-id=\"bc58e-p134\">Обязательный параметр. Возможные значения: Before и After.</span><span class=\"sxs-lookup\"><span data-stu-id=\"bc58e-p134\">Required. The value can be 'Before' or 'After'.</span></span>"
      type:
      - Word.InsertLocation
- uid: word.Word.Paragraph.insertTable
  summary: >-
    <span data-ttu-id="bc58e-p135">Вставляет таблицу с указанным количеством строк и столбцов. Возможные значения insertLocation: Before и After.</span><span class="sxs-lookup"><span data-stu-id="bc58e-p135">Inserts a table with the specified number of rows and columns. The insertLocation value can be 'Before' or 'After'.</span></span>


    <span data-ttu-id="bc58e-219">\[[Набор API-Интерфейсов: WordApi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="bc58e-219">\[ [API set: WordApi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
  name: insertTable(rowCount, columnCount, insertLocation, values)
  fullName: word.Word.Paragraph.insertTable
  langs:
  - typeScript
  type: method
  syntax:
    content: 'insertTable(rowCount: number, columnCount: number, insertLocation: Word.InsertLocation, values?: string[][]): Word.Table;'
    return:
      type:
      - Word.Table
      description: ''
    parameters:
    - id: rowCount
      description: <span data-ttu-id="bc58e-p136">Обязательный. Количество строк в таблице.</span><span class="sxs-lookup"><span data-stu-id="bc58e-p136">Required. The number of rows in the table.</span></span>
      type:
      - number
    - id: columnCount
      description: <span data-ttu-id="bc58e-p137">Обязательный. Количество столбцов в таблице.</span><span class="sxs-lookup"><span data-stu-id="bc58e-p137">Required. The number of columns in the table.</span></span>
      type:
      - number
    - id: insertLocation
      description: "<span data-ttu-id=\"bc58e-p138\">Обязательный параметр. Возможные значения: Before и After.</span><span class=\"sxs-lookup\"><span data-stu-id=\"bc58e-p138\">Required. The value can be 'Before' or 'After'.</span></span>"
      type:
      - Word.InsertLocation
    - id: values
      description: <span data-ttu-id="bc58e-226">Необязательный двухмерный массив.</span><span class="sxs-lookup"><span data-stu-id="bc58e-226">Optional 2D array.</span></span> <span data-ttu-id="bc58e-227">Ячейки заполняются, если в массиве указаны соответствующие строки.</span><span class="sxs-lookup"><span data-stu-id="bc58e-227">Cells are filled if the corresponding strings are specified in the array.</span></span>
      type:
      - string[][]
- uid: word.Word.Paragraph.insertText
  summary: >-
    <span data-ttu-id="bc58e-p140">Вставляет текст в абзац в указанном расположении. Возможные значения insertLocation: Replace, Start и End.</span><span class="sxs-lookup"><span data-stu-id="bc58e-p140">Inserts text into the paragraph at the specified location. The insertLocation value can be 'Replace', 'Start', or 'End'.</span></span>


    <span data-ttu-id="bc58e-230">\[[Набор API-Интерфейсов: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="bc58e-230">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
  name: insertText(text, insertLocation)
  fullName: word.Word.Paragraph.insertText
  langs:
  - typeScript
  type: method
  syntax:
    content: 'insertText(text: string, insertLocation: Word.InsertLocation): Word.Range;'
    return:
      type:
      - Word.Range
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"bc58e-231\">Примеры</span><span class=\"sxs-lookup\"><span data-stu-id=\"bc58e-231\">Examples</span></span>\n\n```javascript\n// Run a batch operation against the Word object model.\nWord.run(function (context) {\n\n    // Create a proxy object for the paragraphs collection.\n    var paragraphs = context.document.body.paragraphs;\n\n    // Queue a commmand to load the style property for the top 2 paragraphs.\n    // We never perform an empty load. We always must request a property.\n    context.load(paragraphs, {select: 'style', top: 2} );\n\n    // Synchronize the document state by executing the queued commands,\n    // and return a promise to indicate task completion.\n    return context.sync().then(function () {\n\n        // Queue a command to get the first paragraph.\n        var paragraph = paragraphs.items[0];\n\n        // Queue a command to insert text into the end of the paragraph.\n        paragraph.insertText('New text inserted into the paragraph.', Word.InsertLocation.end);\n\n        // Synchronize the document state by executing the queued commands,\n        // and return a promise to indicate task completion.\n        return context.sync().then(function () {\n            console.log('Inserted text at the end of the first paragraph.');\n        });\n    });\n})\n.catch(function (error) {\n    console.log('Error: ' + JSON.stringify(error));\n    if (error instanceof OfficeExtension.Error) {\n        console.log('Debug info: ' + JSON.stringify(error.debugInfo));\n    }\n});\n```\n```typescript\nawait Word.run(async (context) => {\n    // Here we insert to replace text\n    let range = context.document.body.paragraphs\n        .getLast().insertText(\"Just replaced the last paragraph!\", \"Replace\");\n    range.font.highlightColor = \"black\";\n    range.font.color = \"white\";\n\n    await context.sync();\n});\n```"
    parameters:
    - id: text
      description: <span data-ttu-id="bc58e-p141">Обязательный параметр. Текст, который необходимо вставить.</span><span class="sxs-lookup"><span data-stu-id="bc58e-p141">Required. Text to be inserted.</span></span>
      type:
      - string
    - id: insertLocation
      description: "<span data-ttu-id=\"bc58e-p142\">Обязательный параметр. Возможные значения: Replace, Start или End.</span><span class=\"sxs-lookup\"><span data-stu-id=\"bc58e-p142\">Required. The value can be 'Replace', 'Start', or 'End'.</span></span>"
      type:
      - Word.InsertLocation
- uid: word.Word.Paragraph.isLastParagraph
  summary: >-
    <span data-ttu-id="bc58e-p143">Указывает, что абзац является последним в родительском тексте. Только для чтения.</span><span class="sxs-lookup"><span data-stu-id="bc58e-p143">Indicates the paragraph is the last one inside its parent body. Read-only.</span></span>


    <span data-ttu-id="bc58e-238">\[[Набор API-Интерфейсов: WordApi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="bc58e-238">\[ [API set: WordApi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
  name: isLastParagraph
  fullName: word.Word.Paragraph.isLastParagraph
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly isLastParagraph: boolean;'
    return:
      type:
      - boolean
- uid: word.Word.Paragraph.isListItem
  summary: >-
    <span data-ttu-id="bc58e-p144">Проверяет, является ли абзац элементом списка. Только для чтения.</span><span class="sxs-lookup"><span data-stu-id="bc58e-p144">Checks whether the paragraph is a list item. Read-only.</span></span>


    <span data-ttu-id="bc58e-241">\[[Набор API-Интерфейсов: WordApi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="bc58e-241">\[ [API set: WordApi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
  name: isListItem
  fullName: word.Word.Paragraph.isListItem
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly isListItem: boolean;'
    return:
      type:
      - boolean
- uid: word.Word.Paragraph.leftIndent
  summary: >-
    <span data-ttu-id="bc58e-242">Возвращает или задает значение отступа слева для абзаца (в пунктах).</span><span class="sxs-lookup"><span data-stu-id="bc58e-242">Gets or sets the left indent value, in points, for the paragraph.</span></span>


    <span data-ttu-id="bc58e-243">\[[Набор API-Интерфейсов: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="bc58e-243">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
  name: leftIndent
  fullName: word.Word.Paragraph.leftIndent
  langs:
  - typeScript
  type: property
  syntax:
    content: 'leftIndent: number;'
    return:
      type:
      - number
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"bc58e-244\">Примеры</span><span class=\"sxs-lookup\"><span data-stu-id=\"bc58e-244\">Examples</span></span>\n\n```typescript\nawait Word.run(async (context) => {\n    // Indents the first paragraph\n    context.document.body.paragraphs.\n        getFirst().leftIndent = 75; //units = points\n\n    return context.sync();\n});\n```"
- uid: word.Word.Paragraph.lineSpacing
  summary: >-
    <span data-ttu-id="bc58e-p145">Возвращает или задает междустрочный интервал для указанного абзаца (в пунктах). В пользовательском интерфейсе Word это значение делится на 12.</span><span class="sxs-lookup"><span data-stu-id="bc58e-p145">Gets or sets the line spacing, in points, for the specified paragraph. In the Word UI, this value is divided by 12.</span></span>


    <span data-ttu-id="bc58e-247">\[[Набор API-Интерфейсов: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="bc58e-247">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
  name: lineSpacing
  fullName: word.Word.Paragraph.lineSpacing
  langs:
  - typeScript
  type: property
  syntax:
    content: 'lineSpacing: number;'
    return:
      type:
      - number
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"bc58e-248\">Примеры</span><span class=\"sxs-lookup\"><span data-stu-id=\"bc58e-248\">Examples</span></span>\n\n```typescript\nawait Word.run(async (context) => {\n    // Adjusts line spacing \n    context.document.body.paragraphs\n        .getFirst().lineSpacing = 20;\n\n    await context.sync();\n});\n```"
- uid: word.Word.Paragraph.lineUnitAfter
  summary: >-
    <span data-ttu-id="bc58e-249">Получает или задает размер интервала, в линии сетки после абзаца.</span><span class="sxs-lookup"><span data-stu-id="bc58e-249">Gets or sets the amount of spacing, in grid lines, after the paragraph.</span></span>


    <span data-ttu-id="bc58e-250">\[[Набор API-Интерфейсов: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="bc58e-250">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
  name: lineUnitAfter
  fullName: word.Word.Paragraph.lineUnitAfter
  langs:
  - typeScript
  type: property
  syntax:
    content: 'lineUnitAfter: number;'
    return:
      type:
      - number
- uid: word.Word.Paragraph.lineUnitBefore
  summary: >-
    <span data-ttu-id="bc58e-251">Возвращает или задает междустрочный интервал до абзаца (в линиях сетки).</span><span class="sxs-lookup"><span data-stu-id="bc58e-251">Gets or sets the amount of spacing, in grid lines, before the paragraph.</span></span>


    <span data-ttu-id="bc58e-252">\[[Набор API-Интерфейсов: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="bc58e-252">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
  name: lineUnitBefore
  fullName: word.Word.Paragraph.lineUnitBefore
  langs:
  - typeScript
  type: property
  syntax:
    content: 'lineUnitBefore: number;'
    return:
      type:
      - number
- uid: word.Word.Paragraph.list
  summary: >-
    <span data-ttu-id="bc58e-p146">Возвращает объект List, к которому относится абзац. Если абзац не находится в списке, возвращает ошибку. Только для чтения.</span><span class="sxs-lookup"><span data-stu-id="bc58e-p146">Gets the List to which this paragraph belongs. Throws if the paragraph is not in a list. Read-only.</span></span>


    <span data-ttu-id="bc58e-256">\[[Набор API-Интерфейсов: WordApi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="bc58e-256">\[ [API set: WordApi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
  name: list
  fullName: word.Word.Paragraph.list
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly list: Word.List;'
    return:
      type:
      - word.Word.List
- uid: word.Word.Paragraph.listItem
  summary: >-
    <span data-ttu-id="bc58e-p147">Возвращает объект ListItem для абзаца. Если абзац не является частью списка, возвращает ошибку. Только для чтения.</span><span class="sxs-lookup"><span data-stu-id="bc58e-p147">Gets the ListItem for the paragraph. Throws if the paragraph is not part of a list. Read-only.</span></span>


    <span data-ttu-id="bc58e-260">\[[Набор API-Интерфейсов: WordApi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="bc58e-260">\[ [API set: WordApi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
  name: listItem
  fullName: word.Word.Paragraph.listItem
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly listItem: Word.ListItem;'
    return:
      type:
      - word.Word.ListItem
- uid: word.Word.Paragraph.listItemOrNullObject
  summary: >-
    <span data-ttu-id="bc58e-p148">Возвращает объект ListItem для абзаца. Если абзац не является частью списка, возвращается пустой объект. Только для чтения.</span><span class="sxs-lookup"><span data-stu-id="bc58e-p148">Gets the ListItem for the paragraph. Returns a null object if the paragraph is not part of a list. Read-only.</span></span>


    <span data-ttu-id="bc58e-264">\[[Набор API-Интерфейсов: WordApi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="bc58e-264">\[ [API set: WordApi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
  name: listItemOrNullObject
  fullName: word.Word.Paragraph.listItemOrNullObject
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly listItemOrNullObject: Word.ListItem;'
    return:
      type:
      - word.Word.ListItem
- uid: word.Word.Paragraph.listOrNullObject
  summary: >-
    <span data-ttu-id="bc58e-p149">Возвращает объект List, к которому относится абзац. Если абзац не находится в списке, возвращается пустой объект. Только для чтения.</span><span class="sxs-lookup"><span data-stu-id="bc58e-p149">Gets the List to which this paragraph belongs. Returns a null object if the paragraph is not in a list. Read-only.</span></span>


    <span data-ttu-id="bc58e-268">\[[Набор API-Интерфейсов: WordApi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="bc58e-268">\[ [API set: WordApi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
  name: listOrNullObject
  fullName: word.Word.Paragraph.listOrNullObject
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly listOrNullObject: Word.List;'
    return:
      type:
      - word.Word.List
- uid: word.Word.Paragraph.load
  summary: <span data-ttu-id="bc58e-269">Очереди команды для загрузки указанного свойства объекта.</span><span class="sxs-lookup"><span data-stu-id="bc58e-269">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="bc58e-270">Перед чтением свойства необходимо вызвать «context.sync()».</span><span class="sxs-lookup"><span data-stu-id="bc58e-270">You must call "context.sync()" before reading the properties.</span></span>
  remarks: >-
    <span data-ttu-id="bc58e-271">В дополнение к подписи этот метод имеет следующие цифровые подписи.</span><span class="sxs-lookup"><span data-stu-id="bc58e-271">In addition to this signature, this method has the following signatures:</span></span>


    <span data-ttu-id="bc58e-272">`load(option?: { select?: string; expand?: string; }): Word.Paragraph`-Option.select — это разделенный запятыми строка, указывающая свойства для загрузки, куда options.expand — это разделенный запятыми строка, указывающая свойства навигации для загрузки.</span><span class="sxs-lookup"><span data-stu-id="bc58e-272">`load(option?: { select?: string; expand?: string; }): Word.Paragraph` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.</span></span>


    <span data-ttu-id="bc58e-273">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Word.Paragraph`-Доступно только на коллекцию типов.</span><span class="sxs-lookup"><span data-stu-id="bc58e-273">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Word.Paragraph` - Only available on collection types.</span></span> <span data-ttu-id="bc58e-274">Это похоже на предыдущую.</span><span class="sxs-lookup"><span data-stu-id="bc58e-274">It is similar to the preceding signature.</span></span> <span data-ttu-id="bc58e-275">Option.Top указывает максимальное число элементов коллекции, которые можно включить в результат.</span><span class="sxs-lookup"><span data-stu-id="bc58e-275">Option.top specifies the maximum number of collection items that can be included in the result.</span></span> <span data-ttu-id="bc58e-276">Option.Skip указывает количество элементов, которые пропускаются и не включенный в результате.</span><span class="sxs-lookup"><span data-stu-id="bc58e-276">Option.skip specifies the number of items that are to be skipped and not included in the result.</span></span> <span data-ttu-id="bc58e-277">Если option.top указан, результирующий набор будет запущен процесс после пропускает указанное число элементов.</span><span class="sxs-lookup"><span data-stu-id="bc58e-277">If option.top is specified, the result set will start after skipping the specified number of items.</span></span>
  name: load(option)
  fullName: word.Word.Paragraph.load
  langs:
  - typeScript
  type: method
  syntax:
    content: 'load(option?: string | string[]): Word.Paragraph;'
    return:
      type:
      - Word.Paragraph
      description: ''
    parameters:
    - id: option
      description: <span data-ttu-id="bc58e-278">Строка, разделенных запятыми или массив строк, задающих свойства для загрузки.</span><span class="sxs-lookup"><span data-stu-id="bc58e-278">A comma-delimited string or an array of strings that specify the properties to load.</span></span>
      type:
      - string | string[]
- uid: word.Word.Paragraph.outlineLevel
  summary: >-
    <span data-ttu-id="bc58e-279">Возвращает или задает уровень структуры для абзаца.</span><span class="sxs-lookup"><span data-stu-id="bc58e-279">Gets or sets the outline level for the paragraph.</span></span>


    <span data-ttu-id="bc58e-280">\[[Набор API-Интерфейсов: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="bc58e-280">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
  name: outlineLevel
  fullName: word.Word.Paragraph.outlineLevel
  langs:
  - typeScript
  type: property
  syntax:
    content: 'outlineLevel: number;'
    return:
      type:
      - number
- uid: word.Word.Paragraph.parentBody
  summary: >-
    <span data-ttu-id="bc58e-p152">Возвращает родительский текст абзаца. Только для чтения.</span><span class="sxs-lookup"><span data-stu-id="bc58e-p152">Gets the parent body of the paragraph. Read-only.</span></span>


    <span data-ttu-id="bc58e-283">\[[Набор API-Интерфейсов: WordApi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="bc58e-283">\[ [API set: WordApi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
  name: parentBody
  fullName: word.Word.Paragraph.parentBody
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly parentBody: Word.Body;'
    return:
      type:
      - Word.Body
- uid: word.Word.Paragraph.parentContentControl
  summary: >-
    <span data-ttu-id="bc58e-p153">Возвращает элемент управления содержимым, содержащий абзац. Возвращает ошибку, если родительского элемента управления содержимым не существует. Только для чтения.</span><span class="sxs-lookup"><span data-stu-id="bc58e-p153">Gets the content control that contains the paragraph. Throws if there isn't a parent content control. Read-only.</span></span>


    <span data-ttu-id="bc58e-287">\[[Набор API-Интерфейсов: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="bc58e-287">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
  name: parentContentControl
  fullName: word.Word.Paragraph.parentContentControl
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly parentContentControl: Word.ContentControl;'
    return:
      type:
      - word.Word.ContentControl
- uid: word.Word.Paragraph.parentContentControlOrNullObject
  summary: >-
    <span data-ttu-id="bc58e-p154">Возвращает элемент управления содержимым, содержащий абзац. Возвращает пустой объект, если родительского элемента управления содержимым не существует. Только для чтения.</span><span class="sxs-lookup"><span data-stu-id="bc58e-p154">Gets the content control that contains the paragraph. Returns a null object if there isn't a parent content control. Read-only.</span></span>


    <span data-ttu-id="bc58e-291">\[[Набор API-Интерфейсов: WordApi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="bc58e-291">\[ [API set: WordApi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
  name: parentContentControlOrNullObject
  fullName: word.Word.Paragraph.parentContentControlOrNullObject
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly parentContentControlOrNullObject: Word.ContentControl;'
    return:
      type:
      - word.Word.ContentControl
- uid: word.Word.Paragraph.parentTable
  summary: >-
    <span data-ttu-id="bc58e-p155">Возвращает таблицу, содержащую абзац. Если он находится не в таблице, возвращает ошибку. Только для чтения.</span><span class="sxs-lookup"><span data-stu-id="bc58e-p155">Gets the table that contains the paragraph. Throws if it is not contained in a table. Read-only.</span></span>


    <span data-ttu-id="bc58e-295">\[[Набор API-Интерфейсов: WordApi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="bc58e-295">\[ [API set: WordApi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
  name: parentTable
  fullName: word.Word.Paragraph.parentTable
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly parentTable: Word.Table;'
    return:
      type:
      - Word.Table
- uid: word.Word.Paragraph.parentTableCell
  summary: >-
    <span data-ttu-id="bc58e-p156">Возвращает ячейку таблицы, содержащую абзац. Если он находится не в ячейке таблицы, возвращает ошибку. Только для чтения.</span><span class="sxs-lookup"><span data-stu-id="bc58e-p156">Gets the table cell that contains the paragraph. Throws if it is not contained in a table cell. Read-only.</span></span>


    <span data-ttu-id="bc58e-299">\[[Набор API-Интерфейсов: WordApi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="bc58e-299">\[ [API set: WordApi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
  name: parentTableCell
  fullName: word.Word.Paragraph.parentTableCell
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly parentTableCell: Word.TableCell;'
    return:
      type:
      - Word.TableCell
- uid: word.Word.Paragraph.parentTableCellOrNullObject
  summary: >-
    <span data-ttu-id="bc58e-p157">Возвращает ячейку таблицы, содержащую абзац. Если он находится не в ячейке таблицы, возвращается пустой объект. Только для чтения.</span><span class="sxs-lookup"><span data-stu-id="bc58e-p157">Gets the table cell that contains the paragraph. Returns a null object if it is not contained in a table cell. Read-only.</span></span>


    <span data-ttu-id="bc58e-303">\[[Набор API-Интерфейсов: WordApi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="bc58e-303">\[ [API set: WordApi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
  name: parentTableCellOrNullObject
  fullName: word.Word.Paragraph.parentTableCellOrNullObject
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly parentTableCellOrNullObject: Word.TableCell;'
    return:
      type:
      - Word.TableCell
- uid: word.Word.Paragraph.parentTableOrNullObject
  summary: >-
    <span data-ttu-id="bc58e-p158">Возвращает таблицу, содержащую абзац. Если он находится не в таблице, возвращается пустой объект. Только для чтения.</span><span class="sxs-lookup"><span data-stu-id="bc58e-p158">Gets the table that contains the paragraph. Returns a null object if it is not contained in a table. Read-only.</span></span>


    <span data-ttu-id="bc58e-307">\[[Набор API-Интерфейсов: WordApi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="bc58e-307">\[ [API set: WordApi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
  name: parentTableOrNullObject
  fullName: word.Word.Paragraph.parentTableOrNullObject
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly parentTableOrNullObject: Word.Table;'
    return:
      type:
      - Word.Table
- uid: word.Word.Paragraph.rightIndent
  summary: >-
    <span data-ttu-id="bc58e-308">Возвращает или задает значение отступа справа для абзаца (в пунктах).</span><span class="sxs-lookup"><span data-stu-id="bc58e-308">Gets or sets the right indent value, in points, for the paragraph.</span></span>


    <span data-ttu-id="bc58e-309">\[[Набор API-Интерфейсов: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="bc58e-309">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
  name: rightIndent
  fullName: word.Word.Paragraph.rightIndent
  langs:
  - typeScript
  type: property
  syntax:
    content: 'rightIndent: number;'
    return:
      type:
      - number
- uid: word.Word.Paragraph.search
  summary: >-
    <span data-ttu-id="bc58e-310">Выполняет поиск с указанным SearchOptions в области объекта абзац.</span><span class="sxs-lookup"><span data-stu-id="bc58e-310">Performs a search with the specified SearchOptions on the scope of the paragraph object.</span></span> <span data-ttu-id="bc58e-311">Результат поиска — коллекция объектов range.</span><span class="sxs-lookup"><span data-stu-id="bc58e-311">The search results are a collection of range objects.</span></span>


    <span data-ttu-id="bc58e-312">\[[Набор API-Интерфейсов: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="bc58e-312">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
  name: search(searchText, searchOptions)
  fullName: word.Word.Paragraph.search
  langs:
  - typeScript
  type: method
  syntax:
    content: >-
      search(searchText: string, searchOptions?: Word.SearchOptions | {
                  ignorePunct?: boolean;
                  ignoreSpace?: boolean;
                  matchCase?: boolean;
                  matchPrefix?: boolean;
                  matchSuffix?: boolean;
                  matchWholeWord?: boolean;
                  matchWildcards?: boolean;
              }): Word.RangeCollection;
    return:
      type:
      - word.Word.RangeCollection
      description: ''
    parameters:
    - id: searchText
      description: <span data-ttu-id="bc58e-p160">Обязательный параметр. Текст для поиска.</span><span class="sxs-lookup"><span data-stu-id="bc58e-p160">Required. The search text.</span></span>
      type:
      - string
    - id: searchOptions
      description: <span data-ttu-id="bc58e-p161">Необязательный параметр. Параметры поиска.</span><span class="sxs-lookup"><span data-stu-id="bc58e-p161">Optional. Options for the search.</span></span>
      type:
      - >-
        Word.SearchOptions | {
                    ignorePunct?: boolean;
                    ignoreSpace?: boolean;
                    matchCase?: boolean;
                    matchPrefix?: boolean;
                    matchSuffix?: boolean;
                    matchWholeWord?: boolean;
                    matchWildcards?: boolean;
                }
- uid: word.Word.Paragraph.select
  summary: >-
    <span data-ttu-id="bc58e-317">Выбирает абзац и переходит к нему в пользовательском интерфейсе Word.</span><span class="sxs-lookup"><span data-stu-id="bc58e-317">Selects and navigates the Word UI to the paragraph.</span></span>


    <span data-ttu-id="bc58e-318">\[[Набор API-Интерфейсов: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="bc58e-318">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
  name: select(selectionMode)
  fullName: word.Word.Paragraph.select
  langs:
  - typeScript
  type: method
  syntax:
    content: 'select(selectionMode?: Word.SelectionMode): void;'
    return:
      type:
      - void
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"bc58e-319\">Примеры</span><span class=\"sxs-lookup\"><span data-stu-id=\"bc58e-319\">Examples</span></span>\n\n```javascript\n// Run a batch operation against the Word object model.\nWord.run(function (context) {\n\n    // Create a proxy object for the paragraphs collection.\n    var paragraphs = context.document.body.paragraphs;\n\n    // Queue a commmand to load the style property for all of the paragraphs.\n    context.load(paragraphs, 'style');\n\n    // Synchronize the document state by executing the queued commands,\n    // and return a promise to indicate task completion.\n    return context.sync().then(function () {\n\n        // Queue a command to get the last paragraph a create a\n        // proxy paragraph object.\n        var paragraph = paragraphs.items[paragraphs.items.length - 1];\n\n        // Queue a command to select the paragraph. The Word UI will\n        // move to the selected paragraph.\n        paragraph.select();\n\n        // Synchronize the document state by executing the queued commands,\n        // and return a promise to indicate task completion.\n        return context.sync().then(function () {\n            console.log('Selected the last paragraph.');\n        });\n    });\n})\n.catch(function (error) {\n    console.log('Error: ' + JSON.stringify(error));\n    if (error instanceof OfficeExtension.Error) {\n        console.log('Debug info: ' + JSON.stringify(error.debugInfo));\n    }\n});\n```\n```typescript\nawait Word.run(async (context) => {\n    // If select is called, with no parameters it selects the object.\n    context.document.body.paragraphs.getLast().select();\n\n    await context.sync();\n});\n```\n```typescript\nawait Word.run(async (context) => {\n    //Select can be at the start or end of a range, this by definition moves the insertion point without selecting the range. \n    context.document.body.paragraphs.getLast().select(\"End\");\n\n    await context.sync();\n});\n```"
    parameters:
    - id: selectionMode
      description: "<span data-ttu-id=\"bc58e-p162\">Необязательный параметр. Возможные режимы выбора: Select, Start и End. Значение по умолчанию — Select.</span><span class=\"sxs-lookup\"><span data-stu-id=\"bc58e-p162\">Optional. The selection mode can be 'Select', 'Start', or 'End'. 'Select' is the default.</span></span>"
      type:
      - Word.SelectionMode
- uid: word.Word.Paragraph.spaceAfter
  summary: >-
    <span data-ttu-id="bc58e-323">Возвращает или задает междустрочный интервал после абзаца (в пунктах).</span><span class="sxs-lookup"><span data-stu-id="bc58e-323">Gets or sets the spacing, in points, after the paragraph.</span></span>


    <span data-ttu-id="bc58e-324">\[[Набор API-Интерфейсов: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="bc58e-324">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
  name: spaceAfter
  fullName: word.Word.Paragraph.spaceAfter
  langs:
  - typeScript
  type: property
  syntax:
    content: 'spaceAfter: number;'
    return:
      type:
      - number
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"bc58e-325\">Примеры</span><span class=\"sxs-lookup\"><span data-stu-id=\"bc58e-325\">Examples</span></span>\n\n```typescript\nawait Word.run(async (context) => {\n    //Adjust space between paragraphs\n    context.document.body.paragraphs\n        .getFirst().spaceAfter = 20;\n\n    await context.sync();\n});\n```"
- uid: word.Word.Paragraph.spaceBefore
  summary: >-
    <span data-ttu-id="bc58e-326">Возвращает или задает междустрочный интервал до абзаца (в пунктах).</span><span class="sxs-lookup"><span data-stu-id="bc58e-326">Gets or sets the spacing, in points, before the paragraph.</span></span>


    <span data-ttu-id="bc58e-327">\[[Набор API-Интерфейсов: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="bc58e-327">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
  name: spaceBefore
  fullName: word.Word.Paragraph.spaceBefore
  langs:
  - typeScript
  type: property
  syntax:
    content: 'spaceBefore: number;'
    return:
      type:
      - number
- uid: word.Word.Paragraph.split
  summary: >-
    <span data-ttu-id="bc58e-328">Разделяет абзац на дочерние диапазоны с помощью разделителей.</span><span class="sxs-lookup"><span data-stu-id="bc58e-328">Splits the paragraph into child ranges by using delimiters.</span></span>


    <span data-ttu-id="bc58e-329">\[[Набор API-Интерфейсов: WordApi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="bc58e-329">\[ [API set: WordApi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
  name: split(delimiters, trimDelimiters, trimSpacing)
  fullName: word.Word.Paragraph.split
  langs:
  - typeScript
  type: method
  syntax:
    content: 'split(delimiters: string[], trimDelimiters?: boolean, trimSpacing?: boolean): Word.RangeCollection;'
    return:
      type:
      - word.Word.RangeCollection
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"bc58e-330\">Примеры</span><span class=\"sxs-lookup\"><span data-stu-id=\"bc58e-330\">Examples</span></span>\n\n```typescript\nawait Word.run(async (context) => {\n    let paragraph = context.document.body.paragraphs.getFirst();\n    let words = paragraph.split(\n        [\" \"], true /* trimDelimiters*/, true /* trimSpaces */);\n    words.load(\"text\");\n\n    await context.sync();\n\n    for (let i = 0; i < words.items.length; i++) {\n        if (i >= 1) {\n            words.items[i - 1].font.highlightColor = \"#FFFFFF\";\n        }\n        words.items[i].font.highlightColor = \"#FFFF00\";\n\n        await context.sync();\n        await pause(200);\n    }\n});\n```"
    parameters:
    - id: delimiters
      description: <span data-ttu-id="bc58e-p163">Обязательный. Разделители в виде массива строк.</span><span class="sxs-lookup"><span data-stu-id="bc58e-p163">Required. The delimiters as an array of strings.</span></span>
      type:
      - string[]
    - id: trimDelimiters
      description: <span data-ttu-id="bc58e-333">Необязательно указывать.</span><span class="sxs-lookup"><span data-stu-id="bc58e-333">Optional.</span></span> <span data-ttu-id="bc58e-334">Указывает, следует ли удалить разделители из диапазонов в коллекции диапазона.</span><span class="sxs-lookup"><span data-stu-id="bc58e-334">Indicates whether to trim delimiters from the ranges in the range collection.</span></span> <span data-ttu-id="bc58e-335">Значение по умолчанию — значение false, который означает, что разделители включаются в диапазонах, возвращаемых в коллекции диапазона.</span><span class="sxs-lookup"><span data-stu-id="bc58e-335">Default is false which indicates that the delimiters are included in the ranges returned in the range collection.</span></span>
      type:
      - boolean
    - id: trimSpacing
      description: <span data-ttu-id="bc58e-336">Необязательно указывать.</span><span class="sxs-lookup"><span data-stu-id="bc58e-336">Optional.</span></span> <span data-ttu-id="bc58e-337">Указывает, следует ли удалить знаки интервалы (пробелы, вкладок, столбцов и end абзаца) из начала и окончания диапазонов, возвращаемых в коллекции диапазона.</span><span class="sxs-lookup"><span data-stu-id="bc58e-337">Indicates whether to trim spacing characters (spaces, tabs, column breaks, and paragraph end marks) from the start and end of the ranges returned in the range collection.</span></span> <span data-ttu-id="bc58e-338">Значение по умолчанию — false означает, символы интервалов в начало и конец диапазонов включены в диапазоне семейства.</span><span class="sxs-lookup"><span data-stu-id="bc58e-338">Default is false which indicates that spacing characters at the start and end of the ranges are included in the range collection.</span></span>
      type:
      - boolean
- uid: word.Word.Paragraph.startNewList
  summary: >-
    <span data-ttu-id="bc58e-p166">Создает список, начинающийся с данного абзаца. Если абзац уже является элементом списка, метод не выполняется.</span><span class="sxs-lookup"><span data-stu-id="bc58e-p166">Starts a new list with this paragraph. Fails if the paragraph is already a list item.</span></span>


    <span data-ttu-id="bc58e-341">\[[Набор API-Интерфейсов: WordApi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="bc58e-341">\[ [API set: WordApi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
  name: startNewList()
  fullName: word.Word.Paragraph.startNewList
  langs:
  - typeScript
  type: method
  syntax:
    content: 'startNewList(): Word.List;'
    return:
      type:
      - word.Word.List
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"bc58e-342\">Примеры</span><span class=\"sxs-lookup\"><span data-stu-id=\"bc58e-342\">Examples</span></span>\n\n```typescript\n//This example starts a new list stating with the second paragraph.\nawait Word.run(async (context) => {\n    let paragraphs = context.document.body.paragraphs;\n    paragraphs.load(\"$none\"); //We need no properties.\n\n    await context.sync();\n\n    var list = paragraphs.items[1].startNewList(); //Indicates new list to be started in the second paragraph.\n    list.load(\"$none\"); //We need no properties.\n\n    await context.sync();\n\n    //To add new items to the list use start/end on the insert location parameter.\n    list.insertParagraph('New list item on top of the list', 'Start');\n    let paragraph = list.insertParagraph('New list item at the end of the list (4th level)', 'End');\n    paragraph.listItem.level = 4; //Sets up list level for the lsit item.\n    //To add paragraphs outside the list use before/after:\n    list.insertParagraph('New paragraph goes after (not part of the list)', 'After');\n\n    await context.sync();\n});\n```"
- uid: word.Word.Paragraph.style
  summary: >-
    <span data-ttu-id="bc58e-p167">Возвращает или задает имя стиля для абзаца. Используйте это свойство для пользовательских стилей и локализованных имен стилей. Чтобы использовать встроенные стили, поддерживающие несколько языковых стандартов, применяйте свойство styleBuiltIn.</span><span class="sxs-lookup"><span data-stu-id="bc58e-p167">Gets or sets the style name for the paragraph. Use this property for custom styles and localized style names. To use the built-in styles that are portable between locales, see the "styleBuiltIn" property.</span></span>


    <span data-ttu-id="bc58e-346">\[[Набор API-Интерфейсов: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="bc58e-346">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
  name: style
  fullName: word.Word.Paragraph.style
  langs:
  - typeScript
  type: property
  syntax:
    content: 'style: string;'
    return:
      type:
      - string
- uid: word.Word.Paragraph.styleBuiltIn
  summary: >-
    <span data-ttu-id="bc58e-p168">Возвращает или задает имя встроенного стиля абзаца. Используйте это свойство для встроенных стилей, поддерживающих несколько языковых стандартов. Чтобы использовать пользовательские стили или локализованные имена стилей, применяйте свойство style.</span><span class="sxs-lookup"><span data-stu-id="bc58e-p168">Gets or sets the built-in style name for the paragraph. Use this property for built-in styles that are portable between locales. To use custom styles or localized style names, see the "style" property.</span></span>


    <span data-ttu-id="bc58e-350">\[[Набор API-Интерфейсов: WordApi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="bc58e-350">\[ [API set: WordApi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
  name: styleBuiltIn
  fullName: word.Word.Paragraph.styleBuiltIn
  langs:
  - typeScript
  type: property
  syntax:
    content: 'styleBuiltIn: Word.Style | "Other" | "Normal" | "Heading1" | "Heading2" | "Heading3" | "Heading4" | "Heading5" | "Heading6" | "Heading7" | "Heading8" | "Heading9" | "Toc1" | "Toc2" | "Toc3" | "Toc4" | "Toc5" | "Toc6" | "Toc7" | "Toc8" | "Toc9" | "FootnoteText" | "Header" | "Footer" | "Caption" | "FootnoteReference" | "EndnoteReference" | "EndnoteText" | "Title" | "Subtitle" | "Hyperlink" | "Strong" | "Emphasis" | "NoSpacing" | "ListParagraph" | "Quote" | "IntenseQuote" | "SubtleEmphasis" | "IntenseEmphasis" | "SubtleReference" | "IntenseReference" | "BookTitle" | "Bibliography" | "TocHeading" | "TableGrid" | "PlainTable1" | "PlainTable2" | "PlainTable3" | "PlainTable4" | "PlainTable5" | "TableGridLight" | "GridTable1Light" | "GridTable1Light_Accent1" | "GridTable1Light_Accent2" | "GridTable1Light_Accent3" | "GridTable1Light_Accent4" | "GridTable1Light_Accent5" | "GridTable1Light_Accent6" | "GridTable2" | "GridTable2_Accent1" | "GridTable2_Accent2" | "GridTable2_Accent3" | "GridTable2_Accent4" | "GridTable2_Accent5" | "GridTable2_Accent6" | "GridTable3" | "GridTable3_Accent1" | "GridTable3_Accent2" | "GridTable3_Accent3" | "GridTable3_Accent4" | "GridTable3_Accent5" | "GridTable3_Accent6" | "GridTable4" | "GridTable4_Accent1" | "GridTable4_Accent2" | "GridTable4_Accent3" | "GridTable4_Accent4" | "GridTable4_Accent5" | "GridTable4_Accent6" | "GridTable5Dark" | "GridTable5Dark_Accent1" | "GridTable5Dark_Accent2" | "GridTable5Dark_Accent3" | "GridTable5Dark_Accent4" | "GridTable5Dark_Accent5" | "GridTable5Dark_Accent6" | "GridTable6Colorful" | "GridTable6Colorful_Accent1" | "GridTable6Colorful_Accent2" | "GridTable6Colorful_Accent3" | "GridTable6Colorful_Accent4" | "GridTable6Colorful_Accent5" | "GridTable6Colorful_Accent6" | "GridTable7Colorful" | "GridTable7Colorful_Accent1" | "GridTable7Colorful_Accent2" | "GridTable7Colorful_Accent3" | "GridTable7Colorful_Accent4" | "GridTable7Colorful_Accent5" | "GridTable7Colorful_Accent6" | "ListTable1Light" | "ListTable1Light_Accent1" | "ListTable1Light_Accent2" | "ListTable1Light_Accent3" | "ListTable1Light_Accent4" | "ListTable1Light_Accent5" | "ListTable1Light_Accent6" | "ListTable2" | "ListTable2_Accent1" | "ListTable2_Accent2" | "ListTable2_Accent3" | "ListTable2_Accent4" | "ListTable2_Accent5" | "ListTable2_Accent6" | "ListTable3" | "ListTable3_Accent1" | "ListTable3_Accent2" | "ListTable3_Accent3" | "ListTable3_Accent4" | "ListTable3_Accent5" | "ListTable3_Accent6" | "ListTable4" | "ListTable4_Accent1" | "ListTable4_Accent2" | "ListTable4_Accent3" | "ListTable4_Accent4" | "ListTable4_Accent5" | "ListTable4_Accent6" | "ListTable5Dark" | "ListTable5Dark_Accent1" | "ListTable5Dark_Accent2" | "ListTable5Dark_Accent3" | "ListTable5Dark_Accent4" | "ListTable5Dark_Accent5" | "ListTable5Dark_Accent6" | "ListTable6Colorful" | "ListTable6Colorful_Accent1" | "ListTable6Colorful_Accent2" | "ListTable6Colorful_Accent3" | "ListTable6Colorful_Accent4" | "ListTable6Colorful_Accent5" | "ListTable6Colorful_Accent6" | "ListTable7Colorful" | "ListTable7Colorful_Accent1" | "ListTable7Colorful_Accent2" | "ListTable7Colorful_Accent3" | "ListTable7Colorful_Accent4" | "ListTable7Colorful_Accent5" | "ListTable7Colorful_Accent6";'
    return:
      type:
      - Word.Style | "Other" | "Normal" | "Heading1" | "Heading2" | "Heading3" | "Heading4" | "Heading5" | "Heading6" | "Heading7" | "Heading8" | "Heading9" | "Toc1" | "Toc2" | "Toc3" | "Toc4" | "Toc5" | "Toc6" | "Toc7" | "Toc8" | "Toc9" | "FootnoteText" | "Header" | "Footer" | "Caption" | "FootnoteReference" | "EndnoteReference" | "EndnoteText" | "Title" | "Subtitle" | "Hyperlink" | "Strong" | "Emphasis" | "NoSpacing" | "ListParagraph" | "Quote" | "IntenseQuote" | "SubtleEmphasis" | "IntenseEmphasis" | "SubtleReference" | "IntenseReference" | "BookTitle" | "Bibliography" | "TocHeading" | "TableGrid" | "PlainTable1" | "PlainTable2" | "PlainTable3" | "PlainTable4" | "PlainTable5" | "TableGridLight" | "GridTable1Light" | "GridTable1Light_Accent1" | "GridTable1Light_Accent2" | "GridTable1Light_Accent3" | "GridTable1Light_Accent4" | "GridTable1Light_Accent5" | "GridTable1Light_Accent6" | "GridTable2" | "GridTable2_Accent1" | "GridTable2_Accent2" | "GridTable2_Accent3" | "GridTable2_Accent4" | "GridTable2_Accent5" | "GridTable2_Accent6" | "GridTable3" | "GridTable3_Accent1" | "GridTable3_Accent2" | "GridTable3_Accent3" | "GridTable3_Accent4" | "GridTable3_Accent5" | "GridTable3_Accent6" | "GridTable4" | "GridTable4_Accent1" | "GridTable4_Accent2" | "GridTable4_Accent3" | "GridTable4_Accent4" | "GridTable4_Accent5" | "GridTable4_Accent6" | "GridTable5Dark" | "GridTable5Dark_Accent1" | "GridTable5Dark_Accent2" | "GridTable5Dark_Accent3" | "GridTable5Dark_Accent4" | "GridTable5Dark_Accent5" | "GridTable5Dark_Accent6" | "GridTable6Colorful" | "GridTable6Colorful_Accent1" | "GridTable6Colorful_Accent2" | "GridTable6Colorful_Accent3" | "GridTable6Colorful_Accent4" | "GridTable6Colorful_Accent5" | "GridTable6Colorful_Accent6" | "GridTable7Colorful" | "GridTable7Colorful_Accent1" | "GridTable7Colorful_Accent2" | "GridTable7Colorful_Accent3" | "GridTable7Colorful_Accent4" | "GridTable7Colorful_Accent5" | "GridTable7Colorful_Accent6" | "ListTable1Light" | "ListTable1Light_Accent1" | "ListTable1Light_Accent2" | "ListTable1Light_Accent3" | "ListTable1Light_Accent4" | "ListTable1Light_Accent5" | "ListTable1Light_Accent6" | "ListTable2" | "ListTable2_Accent1" | "ListTable2_Accent2" | "ListTable2_Accent3" | "ListTable2_Accent4" | "ListTable2_Accent5" | "ListTable2_Accent6" | "ListTable3" | "ListTable3_Accent1" | "ListTable3_Accent2" | "ListTable3_Accent3" | "ListTable3_Accent4" | "ListTable3_Accent5" | "ListTable3_Accent6" | "ListTable4" | "ListTable4_Accent1" | "ListTable4_Accent2" | "ListTable4_Accent3" | "ListTable4_Accent4" | "ListTable4_Accent5" | "ListTable4_Accent6" | "ListTable5Dark" | "ListTable5Dark_Accent1" | "ListTable5Dark_Accent2" | "ListTable5Dark_Accent3" | "ListTable5Dark_Accent4" | "ListTable5Dark_Accent5" | "ListTable5Dark_Accent6" | "ListTable6Colorful" | "ListTable6Colorful_Accent1" | "ListTable6Colorful_Accent2" | "ListTable6Colorful_Accent3" | "ListTable6Colorful_Accent4" | "ListTable6Colorful_Accent5" | "ListTable6Colorful_Accent6" | "ListTable7Colorful" | "ListTable7Colorful_Accent1" | "ListTable7Colorful_Accent2" | "ListTable7Colorful_Accent3" | "ListTable7Colorful_Accent4" | "ListTable7Colorful_Accent5" | "ListTable7Colorful_Accent6"
- uid: word.Word.Paragraph.tableNestingLevel
  summary: >-
    <span data-ttu-id="bc58e-p169">Возвращает уровень таблицы в абзаце. Если абзац не находится в таблице, возвращается значение 0. Только для чтения.</span><span class="sxs-lookup"><span data-stu-id="bc58e-p169">Gets the level of the paragraph's table. It returns 0 if the paragraph is not in a table. Read-only.</span></span>


    <span data-ttu-id="bc58e-354">\[[Набор API-Интерфейсов: WordApi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="bc58e-354">\[ [API set: WordApi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
  name: tableNestingLevel
  fullName: word.Word.Paragraph.tableNestingLevel
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly tableNestingLevel: number;'
    return:
      type:
      - number
- uid: word.Word.Paragraph.text
  summary: >-
    <span data-ttu-id="bc58e-p170">Возвращает текст абзаца. Только для чтения.</span><span class="sxs-lookup"><span data-stu-id="bc58e-p170">Gets the text of the paragraph. Read-only.</span></span>


    <span data-ttu-id="bc58e-357">\[[Набор API-Интерфейсов: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="bc58e-357">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
  name: text
  fullName: word.Word.Paragraph.text
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly text: string;'
    return:
      type:
      - string
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"bc58e-358\">Примеры</span><span class=\"sxs-lookup\"><span data-stu-id=\"bc58e-358\">Examples</span></span>\n\n```typescript\nawait Word.run(async (context) => {\n    // The collection of paragraphs of the current selection returns the full paragraphs contanied on it. \n    let paragraph = context.document.getSelection().paragraphs.getFirst();\n    paragraph.load(\"text\");\n\n    await context.sync();\n    console.log(paragraph.text);\n});\n```"
- uid: word.Word.Paragraph.toJSON
  name: toJSON()
  fullName: word.Word.Paragraph.toJSON
  langs:
  - typeScript
  type: method
  syntax:
    content: 'toJSON(): Word.Interfaces.ParagraphData;'
    return:
      type:
      - Word.Interfaces.ParagraphData
      description: ''
- uid: word.Word.Paragraph.track
  summary: <span data-ttu-id="bc58e-359">Отслеживание объектов для автоматической на основании соседних изменения в документе.</span><span class="sxs-lookup"><span data-stu-id="bc58e-359">Track the object for automatic adjustment based on surrounding changes in the document.</span></span> <span data-ttu-id="bc58e-360">Этот вызов это сокращение для context.trackedObjects.add(thisObject).</span><span class="sxs-lookup"><span data-stu-id="bc58e-360">This call is a shorthand for context.trackedObjects.add(thisObject).</span></span> <span data-ttu-id="bc58e-361">Если вы используете этот объект «.sync» вызовах и за пределами последовательного выполнение пакета «.run» и get «InvalidObjectPath» ошибка при установке свойства или вызова метода на объекте, необходимые для добавления объекта отслеживаемого объекта Сначала создается объект семейства сайтов.</span><span class="sxs-lookup"><span data-stu-id="bc58e-361">If you are using this object across ".sync" calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you needed to have added the object to the tracked object collection when the object was first created.</span></span>
  name: track()
  fullName: word.Word.Paragraph.track
  langs:
  - typeScript
  type: method
  syntax:
    content: 'track(): Word.Paragraph;'
    return:
      type:
      - Word.Paragraph
      description: ''
- uid: word.Word.Paragraph.untrack
  summary: <span data-ttu-id="bc58e-362">Выпуск памяти, связанное с объектом, если ранее отслеживаются.</span><span class="sxs-lookup"><span data-stu-id="bc58e-362">Release the memory associated with this object, if it has previously been tracked.</span></span> <span data-ttu-id="bc58e-363">Этот вызов — это сокращение для context.trackedObjects.remove(thisObject).</span><span class="sxs-lookup"><span data-stu-id="bc58e-363">This call is shorthand for context.trackedObjects.remove(thisObject).</span></span> <span data-ttu-id="bc58e-364">Создавая множество отслеживаемых объектов замедляет ведущего приложения, так помните освободить место на любые объекты, добавлении, после завершения их использования.</span><span class="sxs-lookup"><span data-stu-id="bc58e-364">Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them.</span></span> <span data-ttu-id="bc58e-365">Необходимо будет вызывать «context.sync()» до выпуска памяти вступает в силу.</span><span class="sxs-lookup"><span data-stu-id="bc58e-365">You will need to call "context.sync()" before the memory release takes effect.</span></span>
  name: untrack()
  fullName: word.Word.Paragraph.untrack
  langs:
  - typeScript
  type: method
  syntax:
    content: 'untrack(): Word.Paragraph;'
    return:
      type:
      - Word.Paragraph
      description: ''
