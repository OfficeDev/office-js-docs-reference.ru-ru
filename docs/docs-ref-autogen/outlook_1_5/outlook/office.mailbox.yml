### YamlMime:TSType
name: Office.Mailbox
uid: outlook!Office.Mailbox:interface
package: outlook!
fullName: Office.Mailbox
summary: >-
  Предоставляет доступ к объектной модели надстройки Microsoft Outlook.


  Ключевые свойства:


  - `diagnostics`<!-- -->: Предоставляет диагностические сведения для надстройки Outlook.


  - `item`<!-- -->: предоставляет методы и свойства для доступа к сообщению или встрече в надстройки Outlook.


  - `userProfile`<!-- -->: Предоставляет сведения о пользователе в надстройки Outlook.
remarks: >-
  **[Минимальный уровень разрешений:](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**`Restricted`


  **[Применимый режим Outlook:](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->** составить или прочитать
isPreview: false
isDeprecated: false
type: interface
properties:
- name: diagnostics
  uid: outlook!Office.Mailbox#diagnostics:member
  package: outlook!
  fullName: diagnostics
  summary: >-
    Предоставляет надстройке Outlook диагностические сведения.


    Содержит следующие члены:


    - `hostName` (string): строка, представляющая имя ведущего приложения. Это должно быть одно из следующих значений: `Outlook`<!-- -->, `OutlookWebApp`<!-- -->, `OutlookIOS`<!-- -->, или `OutlookAndroid`<!-- -->. **Примечание.** Значение "Outlook" возвращается для классических клиентов Outlook (например, Windows и Mac).


    - `hostVersion` (string): строка, представляющая версию ведущего приложения или Exchange Server (например, "15.0.468.0"). Если почтовая надстройка работает в Outlook для настольных компьютеров или мобильных клиентов, свойство возвращает версию ведущего приложения `hostVersion` Outlook. В Outlook в Интернете свойство возвращает версию Exchange Server.


    - `OWAView` ( `MailboxEnums.OWAView` или строка): enum (или строковый литерал), который представляет текущее представление Outlook в Интернете. Если ведущим приложением не является Outlook в Интернете, доступ к этому свойству приводит к неопределенным результатам. В Outlook в Интернете имеется три представления ( отображаются, когда экран узкий, — отображаются, когда экран шире и — отображается, когда экран широкий), которые соответствуют ширине экрана и окну, а также числу столбцов, которые могут `OneColumn` `TwoColumns` `ThreeColumns` отображаться.


    Дополнительные сведения находятся в [статье Office.Diagnostics](xref:outlook!Office.Diagnostics:interface)<!-- -->.
  remarks: >-
    **[Минимальный уровень разрешений:](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**`ReadItem`


    **[Применимый режим Outlook:](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->** составить или прочитать
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'diagnostics: Diagnostics;'
    return:
      type: <xref uid="outlook!Office.Diagnostics:interface" />
- name: ewsUrl
  uid: outlook!Office.Mailbox#ewsUrl:member
  package: outlook!
  fullName: ewsUrl
  summary: >-
    Получает URL-адрес конечной точки веб-служб Exchange (EWS) для этой учетной записи электронной почты. Только в режиме чтения.


    Приложение должно иметь разрешение, указанное в манифесте, для вызова `ReadItem` `ewsUrl` участника в режиме чтения.


    В режиме составить необходимо вызвать `saveAsync` метод, прежде чем можно будет использовать `ewsUrl` член. Приложение должно иметь `ReadWriteItem` разрешения на вызов `saveAsync` метода.


    **Примечание.** Этот член не поддерживается в Outlook для iOS или Android.
  remarks: >-
    **[Минимальный уровень разрешений:](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**`ReadItem`


    **[Применимый режим Outlook:](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->** составить или прочитать


    Удаленная служба может использовать значение `ewsUrl`, чтобы выполнять вызовы EWS для почтового ящика пользователя. Например, можно создать удаленную службу для получения вложений [из выбранного элемента](https://docs.microsoft.com/office/dev/add-ins/outlook/get-attachments-of-an-outlook-item)<!-- -->.


    #### <a name="examples"></a>Примеры


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/85-tokens-and-service-calls/ids-and-urls.yaml

    console.log("EWS URL: " + Office.context.mailbox.ewsUrl);

    var ewsId = Office.context.mailbox.item.itemId;

    console.log("EWS item ID: " + Office.context.mailbox.item.itemId);


    console.log("REST URL: " + Office.context.mailbox.restUrl);

    var restId = Office.context.mailbox.convertToRestId(ewsId, Office.MailboxEnums.RestVersion.v2_0);

    console.log("REST item ID: " + restId);


    var ewsId2 = Office.context.mailbox.convertToEwsId(restId, Office.MailboxEnums.RestVersion.v2_0);

    console.log("EWS ID (from REST ID): " + ewsId2);

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'ewsUrl: string;'
    return:
      type: string
- name: item
  uid: outlook!Office.Mailbox#item:member
  package: outlook!
  fullName: item
  summary: >-
    Элемент почтового ящика. В зависимости от контекста, в котором была открыта надстройка, тип элемента может отличаться. Если вы хотите, чтобы IntelliSense только для определенного типа или режима, приведите этот элемент к одному из следующих элементов:


    [MessageCompose](xref:outlook!Office.MessageCompose:interface)<!-- -->, [MessageRead](xref:outlook!Office.MessageRead:interface)<!-- -->, [AppointmentCompose](xref:outlook!Office.AppointmentCompose:interface)<!-- -->, [AppointmentRead](xref:outlook!Office.AppointmentRead:interface)
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'item: Item & ItemCompose & ItemRead & Message & MessageCompose & MessageRead & Appointment & AppointmentCompose & AppointmentRead;'
    return:
      type: <xref uid="outlook!Office.Item:interface" /> & <xref uid="outlook!Office.ItemCompose:interface" /> & <xref uid="outlook!Office.ItemRead:interface" /> & <xref uid="outlook!Office.Message:interface" /> & <xref uid="outlook!Office.MessageCompose:interface" /> & <xref uid="outlook!Office.MessageRead:interface" /> & <xref uid="outlook!Office.Appointment:interface" /> & <xref uid="outlook!Office.AppointmentCompose:interface" /> & <xref uid="outlook!Office.AppointmentRead:interface" />
- name: restUrl
  uid: outlook!Office.Mailbox#restUrl:member
  package: outlook!
  fullName: restUrl
  summary: >-
    Возвращает URL-адрес конечной точки REST для этой учетной записи электронной почты.


    Приложение должно иметь разрешение, указанное в манифесте, для вызова `ReadItem` `restUrl` участника в режиме чтения.


    В режиме составить необходимо вызвать `saveAsync` метод, прежде чем можно будет использовать `restUrl` член. Приложение должно иметь `ReadWriteItem` разрешения на вызов `saveAsync` метода.


    Однако в сценариях делегирования или общего использования вместо этого следует использовать свойство объекта (введено в наборе требований `targetRestUrl` `SharedProperties` 1.8). Дополнительные сведения см. в статье о [делегирование доступа.](https://docs.microsoft.com/office/dev/add-ins/outlook/delegate-access)


    \[[Набор API: Mailbox 1.5](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: "**[Минимальный уровень разрешений:](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**`ReadItem`\n\n**[Применимый режим Outlook:](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->** составить или прочитать\n\nС помощью значения `restUrl` можно выполнять вызовы [REST API](https://docs.microsoft.com/outlook/rest/) для почтового ящика пользователя.\n\n#### <a name=\"examples\"></a>Примеры\n\n```javascript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/85-tokens-and-service-calls/basic-rest-cors.yaml\nOffice.context.mailbox.getCallbackTokenAsync({ isRest: true }, function (result) {\n    var ewsId = Office.context.mailbox.item.itemId;\n    var token = result.value;\n    var restId = Office.context.mailbox.convertToRestId(ewsId, Office.MailboxEnums.RestVersion.v2_0);\n    var getMessageUrl = Office.context.mailbox.restUrl + '/v2.0/me/messages/' + restId;\n            \n    var xhr = new XMLHttpRequest();\n    xhr.open('GET', getMessageUrl);\n    xhr.setRequestHeader(\"Authorization\", \"Bearer \" + token);\n    xhr.onload = function (e) {\n        console.log(this.response);\n    }\n    xhr.send();\n});\n```\n```javascript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/85-tokens-and-service-calls/ids-and-urls.yaml\nconsole.log(\"EWS URL: \" + Office.context.mailbox.ewsUrl);\nvar ewsId = Office.context.mailbox.item.itemId;\nconsole.log(\"EWS item ID: \" + Office.context.mailbox.item.itemId);\n\nconsole.log(\"REST URL: \" + Office.context.mailbox.restUrl);\nvar restId = Office.context.mailbox.convertToRestId(ewsId, Office.MailboxEnums.RestVersion.v2_0);\nconsole.log(\"REST item ID: \" + restId);\n\nvar ewsId2 = Office.context.mailbox.convertToEwsId(restId, Office.MailboxEnums.RestVersion.v2_0);\nconsole.log(\"EWS ID (from REST ID): \" + ewsId2);\n```"
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'restUrl: string;'
    return:
      type: string
- name: userProfile
  uid: outlook!Office.Mailbox#userProfile:member
  package: outlook!
  fullName: userProfile
  summary: >-
    Сведения о пользователе, связанном с почтовым ящиком. К ним относятся тип учетной записи, отображаемая имя, адрес электронной почты и часовой пояс.


    Дополнительные сведения находятся в [статье Office.UserProfile](xref:outlook!Office.UserProfile:interface)
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'userProfile: UserProfile;'
    return:
      type: <xref uid="outlook!Office.UserProfile:interface" />
methods:
- name: addHandlerAsync(eventType, handler, options, callback)
  uid: outlook!Office.Mailbox#addHandlerAsync:member(1)
  package: outlook!
  fullName: addHandlerAsync(eventType, handler, options, callback)
  summary: >-
    Добавляет обработчик для поддерживаемого события. **Примечание.** События доступны только в области задач.


    Поддерживаемые события можно найти в разделе "События объектной [модели](https://docs.microsoft.com/office/dev/add-ins/reference/objectmodel/requirement-set-1.5/office.context.mailbox#events) почтового ящика".


    \[[Набор API: Mailbox 1.5](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **[Минимальный уровень разрешений:](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**`ReadItem`


    **[Применимый режим Outlook:](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->** составить или прочитать


    #### <a name="examples"></a>Примеры


    ```javascript

    Office.initialize = function (reason) {
        $(document).ready(function () {
            Office.context.mailbox.addHandlerAsync(
                Office.EventType.ItemChanged,
                loadNewItem,
                function (result) {
                    if (result.status === Office.AsyncResultStatus.Failed) {
                        // Handle error.
                    }
                });
        });
    };


    function loadNewItem(eventArgs) {
        var item = Office.context.mailbox.item;

        // Check that item is not null.
        if (item !== null) {
            // Work with item, e.g., define and call function that
            // loads the properties of the newly selected item.
            loadProps(item);
        }
    }

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'addHandlerAsync(eventType: Office.EventType | string, handler: (type: Office.EventType) => void, options?: Office.AsyncContextOptions, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
    parameters:
    - id: eventType
      description: Событие, которое должно вызвать обработчик.
      type: <xref uid="office!Office.EventType:enum" /> | string
    - id: handler
      description: Функция для обработки события. Функция должна принимать один параметр, представляющий собой объектный литерал. Свойство type в параметре будет совпадать с `eventType` переданным параметром `addHandlerAsync`<!-- -->.
      type: '(type: <xref uid="office!Office.EventType:enum" />) =&gt; void'
    - id: options
      description: Необязательный. Предоставляет возможность сохранения контекстных данных любого типа без изменений для использования в вызове.
      type: <xref uid="office!Office.AsyncContextOptions:interface" />
    - id: callback
      description: Необязательный. После завершения работы метода функция, переданная в параметре, будет вызвана с `callback` одним параметром типа `Office.AsyncResult`<!-- -->.
      type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;void&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: convertToEwsId(itemId, restVersion)
  uid: outlook!Office.Mailbox#convertToEwsId:member(1)
  package: outlook!
  fullName: convertToEwsId(itemId, restVersion)
  summary: >-
    Преобразовывает идентификатор элемента из формата REST в формат EWS.


    Формат идентификаторов, извлекаемых через API REST (например, API Почты Outlook или Microsoft Graph), отличается от формата веб-служб Exchange (EWS). Метод `convertToEwsId` преобразовывает идентификатор в формате REST в формат EWS.


    **Примечание.** Этот метод не поддерживается в Outlook для iOS или Android.


    \[[Набор API: Mailbox 1.3](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **[Минимальный уровень разрешений:](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**`Restricted`


    **[Применимый режим Outlook:](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->** составить или прочитать


    #### <a name="examples"></a>Примеры


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/85-tokens-and-service-calls/ids-and-urls.yaml

    console.log("EWS URL: " + Office.context.mailbox.ewsUrl);

    var ewsId = Office.context.mailbox.item.itemId;

    console.log("EWS item ID: " + Office.context.mailbox.item.itemId);


    console.log("REST URL: " + Office.context.mailbox.restUrl);

    var restId = Office.context.mailbox.convertToRestId(ewsId, Office.MailboxEnums.RestVersion.v2_0);

    console.log("REST item ID: " + restId);


    var ewsId2 = Office.context.mailbox.convertToEwsId(restId, Office.MailboxEnums.RestVersion.v2_0);

    console.log("EWS ID (from REST ID): " + ewsId2);

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'convertToEwsId(itemId: string, restVersion: MailboxEnums.RestVersion | string): string;'
    parameters:
    - id: itemId
      description: ИД элемента, отформатированный для REST API Outlook.
      type: string
    - id: restVersion
      description: Значение, определяющее версию REST API для Outlook, которая используется для извлечения идентификатора элемента.
      type: <xref uid="outlook!Office.MailboxEnums.RestVersion:enum" /> | string
    return:
      type: string
      description: ''
- name: convertToLocalClientTime(timeValue)
  uid: outlook!Office.Mailbox#convertToLocalClientTime:member(1)
  package: outlook!
  fullName: convertToLocalClientTime(timeValue)
  summary: >-
    Получает словарь, содержащий сведения о локальном времени клиента.


    Даты и время, используемые почтовым приложением для клиентов Outlook в Интернете или на настольных компьютерах, могут использовать разные часовые пояса. Outlook использует часовой пояс клиентского компьютера; Outlook в Интернете использует часовой пояс, установленный в Центре администрирования Exchange (EAC). Значения даты и времени должны обрабатываться таким образом, чтобы значения, отображаемые в интерфейсе пользователя, всегда согласовывались с часовым поясом, ожидаемым пользователем.


    Если почтовое приложение работает в классических клиентах Outlook, метод возвращает объект словаря со значениями часового пояса `convertToLocalClientTime` клиентского компьютера. Если почтовое приложение работает в Outlook в Интернете, метод возвращает объект словаря со значениями часового пояса, указанного `convertToLocalClientTime` в EAC.
  remarks: >-
    **[Минимальный уровень разрешений:](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**`ReadItem`


    **[Применимый режим Outlook:](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->** составить или прочитать
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'convertToLocalClientTime(timeValue: Date): LocalClientTime;'
    parameters:
    - id: timeValue
      description: Объект `Date`.
      type: Date
    return:
      type: <xref uid="outlook!Office.LocalClientTime:interface" />
      description: ''
- name: convertToRestId(itemId, restVersion)
  uid: outlook!Office.Mailbox#convertToRestId:member(1)
  package: outlook!
  fullName: convertToRestId(itemId, restVersion)
  summary: >-
    Преобразовывает идентификатор элемента в формате EWS в формат REST.


    **Примечание.** Этот метод не поддерживается в Outlook для iOS или Android.


    \[[Набор API: Mailbox 1.3](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: "**[Минимальный уровень разрешений:](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**`Restricted`\n\n**[Применимый режим Outlook:](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->** составить или прочитать\n\nИД элементов, полученные через EWS или свойство, используют формат, который отличается от формата, используемого REST API (например, API почты Outlook или `itemId` [Microsoft Graph)](https://graph.microsoft.io/) [](https://docs.microsoft.com/previous-versions/office/office-365-api/api/version-2.0/mail-rest-operations)<!-- -->. Метод `convertToRestId` преобразовывает идентификатор в формате EWS в формат REST.\n\n#### <a name=\"examples\"></a>Примеры\n\n```javascript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/85-tokens-and-service-calls/basic-rest-cors.yaml\nOffice.context.mailbox.getCallbackTokenAsync({ isRest: true }, function (result) {\n    var ewsId = Office.context.mailbox.item.itemId;\n    var token = result.value;\n    var restId = Office.context.mailbox.convertToRestId(ewsId, Office.MailboxEnums.RestVersion.v2_0);\n    var getMessageUrl = Office.context.mailbox.restUrl + '/v2.0/me/messages/' + restId;\n            \n    var xhr = new XMLHttpRequest();\n    xhr.open('GET', getMessageUrl);\n    xhr.setRequestHeader(\"Authorization\", \"Bearer \" + token);\n    xhr.onload = function (e) {\n        console.log(this.response);\n    }\n    xhr.send();\n});\n```\n```javascript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/85-tokens-and-service-calls/ids-and-urls.yaml\nconsole.log(\"EWS URL: \" + Office.context.mailbox.ewsUrl);\nvar ewsId = Office.context.mailbox.item.itemId;\nconsole.log(\"EWS item ID: \" + Office.context.mailbox.item.itemId);\n\nconsole.log(\"REST URL: \" + Office.context.mailbox.restUrl);\nvar restId = Office.context.mailbox.convertToRestId(ewsId, Office.MailboxEnums.RestVersion.v2_0);\nconsole.log(\"REST item ID: \" + restId);\n\nvar ewsId2 = Office.context.mailbox.convertToEwsId(restId, Office.MailboxEnums.RestVersion.v2_0);\nconsole.log(\"EWS ID (from REST ID): \" + ewsId2);\n```"
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'convertToRestId(itemId: string, restVersion: MailboxEnums.RestVersion | string): string;'
    parameters:
    - id: itemId
      description: Идентификатор элемента в формате EWS
      type: string
    - id: restVersion
      description: Значение, определяющее версию REST API для Outlook, с которой будет использоваться преобразованный идентификатор.
      type: <xref uid="outlook!Office.MailboxEnums.RestVersion:enum" /> | string
    return:
      type: string
      description: ''
- name: convertToUtcClientTime(input)
  uid: outlook!Office.Mailbox#convertToUtcClientTime:member(1)
  package: outlook!
  fullName: convertToUtcClientTime(input)
  summary: >-
    Получает объект `Date` из словаря, содержащего сведения о времени.


    Метод преобразует словарь с локальной датой и временем в объект с правильными значениями для локальной `convertToUtcClientTime` `Date` даты и времени.
  remarks: >-
    **[Минимальный уровень разрешений:](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**`ReadItem`


    **[Применимый режим Outlook:](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->** составить или прочитать


    #### <a name="examples"></a>Примеры


    ```javascript

    // Represents 3:37 PM PDT on Monday, August 26, 2019.

    var input = {
        date: 26,
        hours: 15,
        milliseconds: 2,
        minutes: 37,
        month: 7,
        seconds: 2,
        timezoneOffset: -420,
        year: 2019
    };


    // result should be a Date object.

    var result = Office.context.mailbox.convertToUtcClientTime(input);


    // Output should be "2019-08-26T22:37:02.002Z".

    console.log(result.toISOString());

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'convertToUtcClientTime(input: LocalClientTime): Date;'
    parameters:
    - id: input
      description: Значение локального времени для преобразования.
      type: <xref uid="outlook!Office.LocalClientTime:interface" />
    return:
      type: Date
      description: Объект Date со временем в формате UTC.
- name: displayAppointmentForm(itemId)
  uid: outlook!Office.Mailbox#displayAppointmentForm:member(1)
  package: outlook!
  fullName: displayAppointmentForm(itemId)
  summary: >-
    Отображает имеющуюся встречу из календаря.


    Метод `displayAppointmentForm` открывает новое окно на компьютере или диалоговое окно на мобильном устройстве, содержащее сведения календаря о существующей встрече.


    В Outlook для Mac этот метод можно использовать для отображения одной встречи, которая не является частью повторяющегося ряда, или эталовременной встречи повторяющегося ряда. Однако вы не можете отобразить экземпляр ряда, так как вы не можете получить доступ к свойствам (включая ид элемента) экземпляров повторяющегося ряда.


    В Outlook в Интернете этот метод открывает указанную форму, только если ее тело не превышает 32 000 символов.


    Если указанный идентификатор элемента не идентифицирует существующую встречу, на клиентского компьютера или устройстве открывается пустая области, и сообщение об ошибке не возвращается.


    **Примечание.** Этот метод не поддерживается в Outlook для iOS или Android.
  remarks: >-
    **[Минимальный уровень разрешений:](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**`ReadItem`


    **[Применимый режим Outlook:](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->** составить или прочитать


    #### <a name="examples"></a>Примеры


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/55-display-items/display-existing-appointment.yaml

    var itemId = $("#itemId").val();

    Office.context.mailbox.displayAppointmentForm(itemId);

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'displayAppointmentForm(itemId: string): void;'
    parameters:
    - id: itemId
      description: Идентификатор веб-служб Exchange для существующей встречи в календаре.
      type: string
    return:
      type: void
      description: ''
- name: displayMessageForm(itemId)
  uid: outlook!Office.Mailbox#displayMessageForm:member(1)
  package: outlook!
  fullName: displayMessageForm(itemId)
  summary: >-
    Отображает имеющееся сообщение.


    Метод `displayMessageForm` открывает новое окно на компьютере или диалоговое окно на мобильном устройстве, содержащее существующее сообщение.


    В Outlook в Интернете этот метод открывает указанную форму, только если ее тело не превышает 32 000 символов.


    Если указанный идентификатор элемента не идентифицирует существующее сообщение, на клиентский компьютер не будет отображаться сообщение об ошибке.


    Не используйте элемент `displayMessageForm` с itemId, который представляет встречу. Используйте метод `displayAppointmentForm`, чтобы отобразить сведения о существующей встрече, а метод `displayNewAppointmentForm`— для отображения формы создания встречи.


    **Примечание.** Этот метод не поддерживается в Outlook для iOS или Android.
  remarks: >-
    **[Минимальный уровень разрешений:](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**`ReadItem`


    **[Применимый режим Outlook:](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->** составить или прочитать


    #### <a name="examples"></a>Примеры


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/55-display-items/display-existing-message.yaml

    var itemId = $("#itemId").val();

    Office.context.mailbox.displayMessageForm(itemId);

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'displayMessageForm(itemId: string): void;'
    parameters:
    - id: itemId
      description: Идентификатор веб-служб Exchange для существующего сообщения.
      type: string
    return:
      type: void
      description: ''
- name: displayNewAppointmentForm(parameters)
  uid: outlook!Office.Mailbox#displayNewAppointmentForm:member(1)
  package: outlook!
  fullName: displayNewAppointmentForm(parameters)
  summary: >-
    Отображает форму для создания новой встречи в календаре.


    Метод `displayNewAppointmentForm` открывает форму, в которой пользователь может создать встречу или собрание. Если параметры заданы, поля формы встречи автоматически заполняются их содержимым.


    В Outlook в Интернете этот метод всегда отображает форму с полем участников. Если вы не укажете участников в качестве входных аргументов, метод отображает форму с кнопкой **Сохранить**. Если вы укажете участников, форма будет включать участников и кнопку **Отправить**.


    В клиенте Outlook с богатыми ресурсами и Outlook RT, если вы указываете участников или ресурсы в `requiredAttendees`<!-- -->, `optionalAttendees`<!-- -->, или `resources` параметр, этот метод отображает форму собрания с кнопкой **отправки.** Если получатели не указаны, этот метод отображает форму встречи с кнопкой **"Сохранить &amp; закрыть".**


    Если параметры превышают указанные ограничения размера или если указано неизвестное имя параметра, вызывается исключение.


    **Примечание.** Этот метод не поддерживается в Outlook для iOS или Android.
  remarks: >-
    **[Минимальный уровень разрешений:](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**`ReadItem`


    **[Применимый режим Outlook](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->**: чтение


    #### <a name="examples"></a>Примеры


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/55-display-items/display-new-appointment.yaml

    var start = new Date();

    var end = new Date();

    end.setHours(start.getHours() + 1);


    Office.context.mailbox.displayNewAppointmentForm({
      requiredAttendees: ["bob@contoso.com"],
      optionalAttendees: ["sam@contoso.com"],
      start: start,
      end: end,
      location: "Home",
      subject: "meeting",
      resources: ["projector@contoso.com"],
      body: "Hello World!"
    });

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'displayNewAppointmentForm(parameters: AppointmentForm): void;'
    parameters:
    - id: parameters
      description: Описание `AppointmentForm` новой встречи. Все свойства являются необязательными.
      type: <xref uid="outlook!Office.AppointmentForm:interface" />
    return:
      type: void
      description: ''
- name: getCallbackTokenAsync(options, callback)
  uid: outlook!Office.Mailbox#getCallbackTokenAsync:member(1)
  package: outlook!
  fullName: getCallbackTokenAsync(options, callback)
  summary: >-
    Получает строку, которая содержит маркер, используемый для вызова REST API или веб-служб Exchange (EWS).


    Метод `getCallbackTokenAsync` совершает асинхронный вызов, чтобы получить непрозрачный маркер с сервера Exchange Server, на котором размещен почтовый ящик пользователя. Время существования маркера обратного вызова составляет 5 минут.


    Маркер возвращается в качестве строки в `asyncResult.value` свойстве.


    Для вызова `getCallbackTokenAsync` метода в режиме чтения требуется минимальный уровень разрешений `ReadItem`<!-- -->.


    Для вызова `getCallbackTokenAsync` метода в режиме составить необходимо сохранить элемент. Для `saveAsync` этого метода требуется минимальный уровень разрешений `ReadWriteItem`<!-- -->.


    **Важно!** Рекомендации по сценариям делегирования или общего доступа см. в статье о [делегирование доступа.](https://docs.microsoft.com/office/dev/add-ins/outlook/delegate-access)


    *Маркеры REST*


    При запросе маркера REST (`options.isRest` = `true`<!-- -->), итоговая маркер не будет работать для проверки подлинности вызовов EWS. Область действия маркера будет ограничена доступом только для чтения к текущему элементу и его вложениям, если в манифесте надстройки не указано разрешение `ReadWriteMailbox`. Если указано разрешение `ReadWriteMailbox`, полученный маркер предоставит доступ на чтение и запись к почте, календарю и контактам, включая возможность отправки почты.


    С помощью свойства `restUrl` надстройка должна определить правильный URL-адрес для вызовов REST API.


    Этот API работает для следующих областей:


    - `Mail.ReadWrite`


    - `Mail.Send`


    - `Calendars.ReadWrite`


    - `Contacts.ReadWrite`


    *Маркеры EWS*


    При запросе маркера EWS (`options.isRest` = `false`<!-- -->), итоговая маркер не будет работать для проверки подлинности вызовов REST API. Область действия маркера будет ограничена доступом к текущему элементу.


    С помощью свойства `ewsUrl` надстройка должна определить правильный URL-адрес для вызовов EWS.


    Вы можете передать сторонней системе маркер и идентификатор вложения или элемента. Сторонняя система использует этот маркер как маркер авторизации, чтобы вызвать операцию [GetAttachment](https://docs.microsoft.com/exchange/client-developer/web-service-reference/getattachment-operation) или [GetItem](https://docs.microsoft.com/exchange/client-developer/web-service-reference/getitem-operation) веб-служб Exchange для возврата вложения или элемента. Например, можно создать удаленную службу для получения вложений [из выбранного элемента](https://docs.microsoft.com/office/dev/add-ins/outlook/get-attachments-of-an-outlook-item)<!-- -->.


    **Примечание.** Рекомендуется, чтобы надстройки по возможности использовали REST API вместо веб-служб Exchange.


    \[[Набор API: Mailbox 1.5](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: "**[Минимальный уровень разрешений:](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**`ReadItem`\n\n**[Применимый режим Outlook:](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->** составить или прочитать\n\n**Ошибки:**\n\n- `HTTPRequestFailure`<!-- -->: Запрос не удалось. Просмотрите объект диагностики для кода ошибки HTTP.\n\n- `InternalServerError`<!-- -->: Сервер Exchange Server возвратил ошибку. Для получения дополнительных сведений просмотрите объект диагностики.\n\n- `NetworkError`<!-- -->: пользователь больше не подключен к сети. Проверьте сетевое подключение и повторите попытку.\n\n#### <a name=\"examples\"></a>Примеры\n\n```javascript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/85-tokens-and-service-calls/basic-rest-cors.yaml\nOffice.context.mailbox.getCallbackTokenAsync({ isRest: true }, function (result) {\n    var ewsId = Office.context.mailbox.item.itemId;\n    var token = result.value;\n    var restId = Office.context.mailbox.convertToRestId(ewsId, Office.MailboxEnums.RestVersion.v2_0);\n    var getMessageUrl = Office.context.mailbox.restUrl + '/v2.0/me/messages/' + restId;\n            \n    var xhr = new XMLHttpRequest();\n    xhr.open('GET', getMessageUrl);\n    xhr.setRequestHeader(\"Authorization\", \"Bearer \" + token);\n    xhr.onload = function (e) {\n        console.log(this.response);\n    }\n    xhr.send();\n});\n```"
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getCallbackTokenAsync(options: Office.AsyncContextOptions & { isRest?: boolean }, callback: (asyncResult: Office.AsyncResult<string>) => void): void;'
    parameters:
    - id: options
      description: 'Объектный литерал, содержащий одно или несколько из указанных ниже свойств. `isRest`<!-- -->: определяет, будет ли предоставленный маркер использоваться для REST API Outlook или веб-служб Exchange. Значение по умолчанию: `false`<!-- -->. `asyncContext`<!-- -->: любые данные о состоянии, которые передаются в асинхронный метод.'
      type: '<xref uid="office!Office.AsyncContextOptions:interface" /> & { isRest?: boolean }'
    - id: callback
      description: После завершения работы метода функция, переданная в параметре callback, будет вызываться с одним параметром типа `Office.AsyncResult`<!-- -->. Маркер возвращается в качестве строки в `asyncResult.value` свойстве. При наличии ошибки свойства `asyncResult.error` и `asyncResult.diagnostics` могут предоставлять дополнительные сведения.
      type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;string&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: getCallbackTokenAsync(callback, userContext)
  uid: outlook!Office.Mailbox#getCallbackTokenAsync:member(2)
  package: outlook!
  fullName: getCallbackTokenAsync(callback, userContext)
  summary: >-
    Получает строку, содержащую маркер, используемый для получения вложения или элемента с Exchange Server.


    Метод `getCallbackTokenAsync` совершает асинхронный вызов, чтобы получить непрозрачный маркер с сервера Exchange Server, на котором размещен почтовый ящик пользователя. Время существования маркера обратного вызова составляет 5 минут.


    Маркер возвращается в качестве строки в `asyncResult.value` свойстве.


    Вы можете передать сторонней системе маркер и идентификатор вложения или элемента. Сторонняя система использует этот маркер как маркер авторизации, чтобы вызвать операцию [GetAttachment](https://docs.microsoft.com/exchange/client-developer/web-service-reference/getattachment-operation) или [GetItem](https://docs.microsoft.com/exchange/client-developer/web-service-reference/getitem-operation) веб-служб Exchange для возврата вложения или элемента. Например, можно создать удаленную службу для получения вложений [из выбранного элемента](https://docs.microsoft.com/office/dev/add-ins/outlook/get-attachments-of-an-outlook-item)<!-- -->.


    Для вызова `getCallbackTokenAsync` метода в режиме чтения требуется минимальный уровень разрешений `ReadItem`<!-- -->.


    Для вызова `getCallbackTokenAsync` метода в режиме составить необходимо сохранить элемент. Для `saveAsync` этого метода требуется минимальный уровень разрешений `ReadWriteItem`<!-- -->.


    **Важно!** Рекомендации по сценариям делегирования или общего доступа см. в статье о [делегирование доступа.](https://docs.microsoft.com/office/dev/add-ins/outlook/delegate-access)


    \[[Набор API: все поддерживают режим чтения; Поддержка режима составить в почтовом ящике 1.3](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **[Минимальный уровень разрешений:](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**`ReadItem`


    **[Применимый режим Outlook:](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->** составить или прочитать


    **Ошибки:**


    - `HTTPRequestFailure`<!-- -->: Запрос не удалось. Просмотрите объект диагностики для кода ошибки HTTP.


    - `InternalServerError`<!-- -->: Сервер Exchange Server возвратил ошибку. Для получения дополнительных сведений просмотрите объект диагностики.


    - `NetworkError`<!-- -->: пользователь больше не подключен к сети. Проверьте сетевое подключение и повторите попытку.


    #### <a name="examples"></a>Примеры


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/85-tokens-and-service-calls/user-callback-token.yaml

    Office.context.mailbox.getCallbackTokenAsync(function (result) {
        if (result.status !== Office.AsyncResultStatus.Succeeded) {
            console.error(`Token retrieval failed with message: ${result.error.message}`);
        } else {
            console.log(result.value);
        }
    });

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getCallbackTokenAsync(callback: (asyncResult: Office.AsyncResult<string>) => void, userContext?: any): void;'
    parameters:
    - id: callback
      description: После завершения работы метода функция, переданная в параметре callback, будет вызываться с одним параметром типа `Office.AsyncResult`<!-- -->. Маркер возвращается в качестве строки в `asyncResult.value` свойстве. При наличии ошибки свойства `asyncResult.error` и `asyncResult.diagnostics` могут предоставлять дополнительные сведения.
      type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;string&gt;) =&gt; void'
    - id: userContext
      description: Необязательный. Данные о состоянии, передаваемые в асинхронный метод.
      type: any
    return:
      type: void
      description: ''
- name: getUserIdentityTokenAsync(callback, userContext)
  uid: outlook!Office.Mailbox#getUserIdentityTokenAsync:member(1)
  package: outlook!
  fullName: getUserIdentityTokenAsync(callback, userContext)
  summary: >-
    Получает маркер, идентифицирующий пользователя и надстройку Office.


    Маркер возвращается в качестве строки в `asyncResult.value` свойстве.
  remarks: >-
    **[Минимальный уровень разрешений:](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**`ReadItem`


    **[Применимый режим Outlook:](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->** составить или прочитать


    Метод возвращает маркер, который можно использовать для идентификации и проверки подлинности надстройки и пользователя в `getUserIdentityTokenAsync` [стороной системе](https://docs.microsoft.com/office/dev/add-ins/outlook/authentication)<!-- -->.


    **Ошибки:**


    - `HTTPRequestFailure`<!-- -->: Запрос не удалось. Просмотрите объект диагностики для кода ошибки HTTP.


    - `InternalServerError`<!-- -->: Сервер Exchange Server возвратил ошибку. Для получения дополнительных сведений просмотрите объект диагностики.


    - `NetworkError`<!-- -->: пользователь больше не подключен к сети. Проверьте сетевое подключение и повторите попытку.


    #### <a name="examples"></a>Примеры


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/85-tokens-and-service-calls/user-identity-token.yaml

    Office.context.mailbox.getUserIdentityTokenAsync(function (result) {
        if (result.status !== Office.AsyncResultStatus.Succeeded) {
            console.error(`Token retrieval failed with message: ${result.error.message}`);
        } else {
            console.log(result.value);
        }
    });

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getUserIdentityTokenAsync(callback: (asyncResult: Office.AsyncResult<string>) => void, userContext?: any): void;'
    parameters:
    - id: callback
      description: После завершения работы метода функция, переданная в параметре callback, будет вызываться с одним параметром типа `Office.AsyncResult`<!-- -->. Маркер возвращается в качестве строки в `asyncResult.value` свойстве. При наличии ошибки свойства `asyncResult.error` и `asyncResult.diagnostics` могут предоставлять дополнительные сведения.
      type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;string&gt;) =&gt; void'
    - id: userContext
      description: Необязательный. Данные о состоянии, передаваемые в асинхронный метод.
      type: any
    return:
      type: void
      description: ''
- name: makeEwsRequestAsync(data, callback, userContext)
  uid: outlook!Office.Mailbox#makeEwsRequestAsync:member(1)
  package: outlook!
  fullName: makeEwsRequestAsync(data, callback, userContext)
  summary: >-
    Делает асинхронный запрос к службе веб-служб Exchange (EWS) на сервере Exchange, на котором размещен почтовый ящик пользователя.


    В таких случаях надстройка должна использовать REST API для доступа к почтовому ящику пользователя.


    Метод `makeEwsRequestAsync` отправляет запрос EWS от имени надстройки в Exchange.


    С помощью метода `makeEwsRequestAsync` невозможно запрашивать элементы, связанные с папкой.


    XML-запрос должен указывать кодику UTF-8: `\<?xml version="1.0" encoding="utf-8"?\>`<!-- -->.


    Надстройка должна иметь `ReadWriteMailbox` разрешение на использование `makeEwsRequestAsync` метода. Сведения об использовании разрешения и операций EWS, которые можно вызвать с помощью `ReadWriteMailbox` `makeEwsRequestAsync` метода, [](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) см. в подстройке "Указание разрешений на доступ к почтовому ящику пользователя"<!-- -->.


    Результат XML вызова EWS указывается в виде строки в свойстве `asyncResult.value`. Если размер результата превышает 1 МБ, возвращается сообщение об ошибке.


    **Примечание.** Этот метод не поддерживается в следующих сценариях:


    - В Outlook для iOS или Android.


    - Когда надстройка загружается в почтовый ящик Gmail.


    **Примечание.** Администратор сервера должен установить в каталоге EWS сервера клиентского доступа, чтобы включить метод для `OAuthAuthentication` `true` запросов `makeEwsRequestAsync` EWS.


    *Различия версий*


    При использовании метода в почтовых приложениях, работающих в версиях Outlook более ранних версий, чем `makeEwsRequestAsync` 15.0.4535.1004, следует установить значение кодирового значения ISO-8859-1.


    `<?xml version="1.0" encoding="iso-8859-1"?>`


    Значение кодировки не нужно указывать, если почтовое приложение выполняется в Outlook в Интернете. С помощью свойства можно определить, работает ли ваше почтовое приложение в Outlook или Outlook в `mailbox.diagnostics.hostName` Интернете. С помощью свойства можно определить, какая версия Outlook `mailbox.diagnostics.hostVersion` запущена.
  remarks: >-
    **[Минимальный уровень разрешений:](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**`ReadWriteMailbox`


    **[Применимый режим Outlook:](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->** составить или прочитать


    #### <a name="examples"></a>Примеры


    ```javascript

    function getSubjectRequest(id) {
        // Return a GetItem operation request for the subject of the specified item.
        var request =
            '<?xml version="1.0" encoding="utf-8"?>' +
            '<soap:Envelope xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"' +
            '               xmlns:xsd="http://www.w3.org/2001/XMLSchema"' +
            '               xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/"' +
            '               xmlns:t="http://schemas.microsoft.com/exchange/services/2006/types">' +
            '  <soap:Header>' +
            '    <RequestServerVersion Version="Exchange2013" xmlns="http://schemas.microsoft.com/exchange/services/2006/types" soap:mustUnderstand="0" />' +
            '  </soap:Header>' +
            '  <soap:Body>' +
            '    <GetItem xmlns="http://schemas.microsoft.com/exchange/services/2006/messages">' +
            '      <ItemShape>' +
            '        <t:BaseShape>IdOnly</t:BaseShape>' +
            '        <t:AdditionalProperties>' +
            '            <t:FieldURI FieldURI="item:Subject"/>' +
            '        </t:AdditionalProperties>' +
            '      </ItemShape>' +
            '      <ItemIds><t:ItemId Id="' + id + '"/></ItemIds>' +
            '    </GetItem>' +
            '  </soap:Body>' +
            '</soap:Envelope>';

        return request;
    }


    function sendRequest() {
        // Create a local variable that contains the mailbox.
        Office.context.mailbox.makeEwsRequestAsync(
            getSubjectRequest(mailbox.item.itemId), callback);
    }


    function callback(asyncResult)  {
        var result = asyncResult.value;
        var context = asyncResult.asyncContext;

        // Process the returned response here.
    }

    ```

    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/85-tokens-and-service-calls/make-ews-request-async.yaml

    var ewsId = Office.context.mailbox.item.itemId;

    var request = '<soap:Envelope xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:m="http://schemas.microsoft.com/exchange/services/2006/messages" xmlns:t="http://schemas.microsoft.com/exchange/services/2006/types" xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">' +
        '  <soap:Header><t:RequestServerVersion Version="Exchange2013" /></soap:Header>' +
        '  <soap:Body>' +
        '    <m:GetItem>' +
        '      <m:ItemShape>' +
        '        <t:BaseShape>IdOnly</t:BaseShape>' +
        '      </m:ItemShape >' +
        '      <m:ItemIds>' +
        '        <t:ItemId Id="' + ewsId + '" />' +
        '      </m:ItemIds>' +
        '    </m:GetItem>' +
        '  </soap:Body>' +
        '</soap:Envelope>';

    Office.context.mailbox.makeEwsRequestAsync(request, function (result) {
        console.log(result);
    });

    ```

    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/85-tokens-and-service-calls/send-message-using-make-ews-request-async.yaml

    var request = '<soap:Envelope xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:m="http://schemas.microsoft.com/exchange/services/2006/messages" xmlns:t="http://schemas.microsoft.com/exchange/services/2006/types" xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">'+
        '  <soap:Header><t:RequestServerVersion Version="Exchange2010" /></soap:Header>'+
        '  <soap:Body>'+
        '    <m:CreateItem MessageDisposition="SendAndSaveCopy">'+
        '      <m:SavedItemFolderId><t:DistinguishedFolderId Id="sentitems" /></m:SavedItemFolderId>'+
        '      <m:Items>'+
        '        <t:Message>'+
        '          <t:Subject>Hello, Outlook!</t:Subject>'+
        '          <t:Body BodyType="HTML">This message was sent from a ScriptLab code sample, used from ' + Office.context.mailbox.diagnostics.hostName + ', version ' + Office.context.mailbox.diagnostics.hostVersion + '!</t:Body>'+
        '          <t:ToRecipients>'+
        '            <t:Mailbox><t:EmailAddress>' + Office.context.mailbox.userProfile.emailAddress + '</t:EmailAddress></t:Mailbox>'+
        '          </t:ToRecipients>'+
        '        </t:Message>'+
        '      </m:Items>'+
        '    </m:CreateItem>'+
        '  </soap:Body>'+
        '</soap:Envelope>';

    Office.context.mailbox.makeEwsRequestAsync(request, function (result) {
        console.log(result);
    });

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'makeEwsRequestAsync(data: any, callback: (asyncResult: Office.AsyncResult<string>) => void, userContext?: any): void;'
    parameters:
    - id: data
      description: Запрос EWS.
      type: any
    - id: callback
      description: После завершения работы метода функция, переданная в параметре callback, будет вызываться с одним параметром типа `Office.AsyncResult`<!-- -->. Свойством `value` результата является XML-запрос EWS, предоставленный в качестве строки. Если размер результата превышает 1 МБ, возвращается сообщение об ошибке.
      type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;string&gt;) =&gt; void'
    - id: userContext
      description: Необязательный. Данные о состоянии, передаваемые в асинхронный метод.
      type: any
    return:
      type: void
      description: ''
- name: removeHandlerAsync(eventType, options, callback)
  uid: outlook!Office.Mailbox#removeHandlerAsync:member(1)
  package: outlook!
  fullName: removeHandlerAsync(eventType, options, callback)
  summary: >-
    Удаляет обработчиков для поддерживаемого типа события. **Примечание.** События доступны только в области задач.


    Поддерживаемые события можно найти в разделе "События объектной [модели](https://docs.microsoft.com/office/dev/add-ins/reference/objectmodel/requirement-set-1.5/office.context.mailbox#events) почтового ящика".


    \[[Набор API: Mailbox 1.5](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **[Минимальный уровень разрешений:](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**`ReadItem`


    **[Применимый режим Outlook:](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->** составить или прочитать
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'removeHandlerAsync(eventType: Office.EventType | string, options?: Office.AsyncContextOptions, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
    parameters:
    - id: eventType
      description: Событие, которое должно отменить обработчик.
      type: <xref uid="office!Office.EventType:enum" /> | string
    - id: options
      description: Необязательный. Предоставляет возможность сохранения контекстных данных любого типа без изменений для использования в вызове.
      type: <xref uid="office!Office.AsyncContextOptions:interface" />
    - id: callback
      description: Необязательный. После завершения работы метода функция, переданная в параметре, будет вызвана с `callback` одним параметром типа `Office.AsyncResult`<!-- -->.
      type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;void&gt;) =&gt; void'
    return:
      type: void
      description: ''
metadata:
  ms.openlocfilehash: b6ba7c802dac5dfbc93e2dfb84538f61550f879e
  ms.sourcegitcommit: d14ccd5d21286fdad1d3451f3ac745c603d9400d
  ms.translationtype: MT
  ms.contentlocale: ru-RU
  ms.lasthandoff: 01/13/2021
  ms.locfileid: "49856424"
