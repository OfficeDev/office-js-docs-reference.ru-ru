### YamlMime:UniversalReference
items:
  - uid: 'excel!Excel.Worksheet:class'
    summary: |-
      <span data-ttu-id="17dc7-101">Лист Excel представляет собой сетку ячеек.</span><span class="sxs-lookup"><span data-stu-id="17dc7-101">An Excel worksheet is a grid of cells.</span></span> <span data-ttu-id="17dc7-102">Она может содержать данные, таблицы, диаграммы и т. д. Чтобы узнать больше об объектной модели листа, прочтите [Работа с листами с помощью API JavaScript для Excel](https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-worksheets)</span><span class="sxs-lookup"><span data-stu-id="17dc7-102">It can contain data, tables, charts, etc. To learn more about the worksheet object model, read [Work with worksheets using the Excel JavaScript API](https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-worksheets)</span></span><!-- --><span data-ttu-id="17dc7-103">.</span><span class="sxs-lookup"><span data-stu-id="17dc7-103"></span></span>

      <span data-ttu-id="17dc7-104">\[[Набор API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="17dc7-104">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: Excel.Worksheet
    fullName: Excel.Worksheet
    langs:
      - typeScript
    type: class
    extends:
      - 'excel!OfficeExtension.ClientObject:class'
    package: excel!
    children:
      - 'excel!Excel.Worksheet#activate:member(1)'
      - 'excel!Excel.Worksheet#calculate:member(1)'
      - 'excel!Excel.Worksheet#charts:member'
      - 'excel!Excel.Worksheet#context:member'
      - 'excel!Excel.Worksheet#copy:member(1)'
      - 'excel!Excel.Worksheet#copy:member(2)'
      - 'excel!Excel.Worksheet#delete:member(1)'
      - 'excel!Excel.Worksheet#freezePanes:member'
      - 'excel!Excel.Worksheet#getCell:member(1)'
      - 'excel!Excel.Worksheet#getNext:member(1)'
      - 'excel!Excel.Worksheet#getNextOrNullObject:member(1)'
      - 'excel!Excel.Worksheet#getPrevious:member(1)'
      - 'excel!Excel.Worksheet#getPreviousOrNullObject:member(1)'
      - 'excel!Excel.Worksheet#getRange:member(1)'
      - 'excel!Excel.Worksheet#getRangeByIndexes:member(1)'
      - 'excel!Excel.Worksheet#getUsedRange:member(1)'
      - 'excel!Excel.Worksheet#getUsedRangeOrNullObject:member(1)'
      - 'excel!Excel.Worksheet#id:member'
      - 'excel!Excel.Worksheet#load:member(1)'
      - 'excel!Excel.Worksheet#load:member(2)'
      - 'excel!Excel.Worksheet#load:member(3)'
      - 'excel!Excel.Worksheet#name:member'
      - 'excel!Excel.Worksheet#names:member'
      - 'excel!Excel.Worksheet#onActivated:member'
      - 'excel!Excel.Worksheet#onChanged:member'
      - 'excel!Excel.Worksheet#onDeactivated:member'
      - 'excel!Excel.Worksheet#onSelectionChanged:member'
      - 'excel!Excel.Worksheet#pivotTables:member'
      - 'excel!Excel.Worksheet#position:member'
      - 'excel!Excel.Worksheet#protection:member'
      - 'excel!Excel.Worksheet#set:member(1)'
      - 'excel!Excel.Worksheet#set:member(2)'
      - 'excel!Excel.Worksheet#standardHeight:member'
      - 'excel!Excel.Worksheet#standardWidth:member'
      - 'excel!Excel.Worksheet#tabColor:member'
      - 'excel!Excel.Worksheet#tables:member'
      - 'excel!Excel.Worksheet#toJSON:member(1)'
      - 'excel!Excel.Worksheet#visibility:member'
  - uid: 'excel!Excel.Worksheet#activate:member(1)'
    summary: |-
      <span data-ttu-id="17dc7-105">Активация листа в пользовательском интерфейсе Excel.</span><span class="sxs-lookup"><span data-stu-id="17dc7-105">Activate the worksheet in the Excel UI.</span></span>

      <span data-ttu-id="17dc7-106">\[[Набор API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="17dc7-106">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: activate()
    fullName: activate()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'activate(): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a><span data-ttu-id="17dc7-107">Примеры</span><span class="sxs-lookup"><span data-stu-id="17dc7-107">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var wSheetName = 'Sheet1';
              var worksheet = ctx.workbook.worksheets.getItem(wSheetName);
              worksheet.activate();
              return ctx.sync(); 
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: 'excel!Excel.Worksheet#calculate:member(1)'
    summary: |-
      <span data-ttu-id="17dc7-108">Вычисляет все ячейки на листе.</span><span class="sxs-lookup"><span data-stu-id="17dc7-108">Calculates all cells on a worksheet.</span></span>

      <span data-ttu-id="17dc7-109">\[[Набор API: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="17dc7-109">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: calculate(markAllDirty)
    fullName: calculate(markAllDirty)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'calculate(markAllDirty: boolean): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: markAllDirty
          description: '<span data-ttu-id="17dc7-110">Значение true, чтобы пометить все как "грязный".</span><span class="sxs-lookup"><span data-stu-id="17dc7-110">True, to mark all as dirty.</span></span>'
          type:
            - boolean
  - uid: 'excel!Excel.Worksheet#charts:member'
    summary: |-
      <span data-ttu-id="17dc7-111">Возвращает коллекцию диаграмм, имеющихся на листе.</span><span class="sxs-lookup"><span data-stu-id="17dc7-111">Returns collection of charts that are part of the worksheet.</span></span> <span data-ttu-id="17dc7-112">Только для чтения.</span><span class="sxs-lookup"><span data-stu-id="17dc7-112">Read-only.</span></span>

      <span data-ttu-id="17dc7-113">\[[Набор API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="17dc7-113">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: charts
    fullName: charts
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly charts: Excel.ChartCollection;'
      return:
        type:
          - 'excel!Excel.ChartCollection:class'
  - uid: 'excel!Excel.Worksheet#context:member'
    summary: '<span data-ttu-id="17dc7-114">Контекст запроса, связанный с объектом.</span><span class="sxs-lookup"><span data-stu-id="17dc7-114">The request context associated with the object.</span></span> <span data-ttu-id="17dc7-115">Это подсоединяет процесс надстройки к процессу ведущего приложения Office.</span><span class="sxs-lookup"><span data-stu-id="17dc7-115">This connects the add-in''s process to the Office host application''s process.</span></span>'
    name: context
    fullName: context
    langs:
      - typeScript
    type: property
    syntax:
      content: 'context: RequestContext;'
      return:
        type:
          - 'excel!Excel.RequestContext:class'
  - uid: 'excel!Excel.Worksheet#copy:member(1)'
    summary: |-
      <span data-ttu-id="17dc7-116">Копирует лист и размещает его в указанном положении.</span><span class="sxs-lookup"><span data-stu-id="17dc7-116">Copy a worksheet and place it at the specified position.</span></span> <span data-ttu-id="17dc7-117">Возвращает скопированный лист.</span><span class="sxs-lookup"><span data-stu-id="17dc7-117">Return the copied worksheet.</span></span>

      <span data-ttu-id="17dc7-118">\[[Набор API: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="17dc7-118">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: 'copy(positionType, relativeTo)'
    fullName: 'copy(positionType, relativeTo)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'copy(positionType?: Excel.WorksheetPositionType, relativeTo?: Excel.Worksheet): Excel.Worksheet;'
      return:
        type:
          - 'excel!Excel.Worksheet:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="17dc7-119">Примеры</span><span class="sxs-lookup"><span data-stu-id="17dc7-119">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {

              let myWorkbook = context.workbook;
              let sampleSheet = myWorkbook.worksheets.getActiveWorksheet();
              let copiedSheet = sampleSheet.copy("End")

              sampleSheet.load("name");
              copiedSheet.load("name");

              await context.sync();

              console.log("'" + sampleSheet.name + "' was copied to '" + copiedSheet.name + "'")
          });
          ```
      parameters:
        - id: positionType
          description: <span data-ttu-id="17dc7-120">Необязательный.</span><span class="sxs-lookup"><span data-stu-id="17dc7-120">Optional.</span></span>
          type:
            - 'excel!Excel.WorksheetPositionType:enum'
        - id: relativeTo
          description: <span data-ttu-id="17dc7-121">Необязательный.</span><span class="sxs-lookup"><span data-stu-id="17dc7-121">Optional.</span></span>
          type:
            - 'excel!Excel.Worksheet:class'
  - uid: 'excel!Excel.Worksheet#copy:member(2)'
    summary: |-
      <span data-ttu-id="17dc7-122">Копирует лист и размещает его в указанном положении.</span><span class="sxs-lookup"><span data-stu-id="17dc7-122">Copy a worksheet and place it at the specified position.</span></span> <span data-ttu-id="17dc7-123">Возвращает скопированный лист.</span><span class="sxs-lookup"><span data-stu-id="17dc7-123">Return the copied worksheet.</span></span>

      <span data-ttu-id="17dc7-124">\[[Набор API: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="17dc7-124">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: 'copy(positionTypeString, relativeTo)'
    fullName: 'copy(positionTypeString, relativeTo)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'copy(positionTypeString?: "None" | "Before" | "After" | "Beginning" | "End", relativeTo?: Excel.Worksheet): Excel.Worksheet;'
      return:
        type:
          - 'excel!Excel.Worksheet:class'
        description: ''
      parameters:
        - id: positionTypeString
          description: <span data-ttu-id="17dc7-125">Необязательный.</span><span class="sxs-lookup"><span data-stu-id="17dc7-125">Optional.</span></span>
          type:
            - '"None" | "Before" | "After" | "Beginning" | "End"'
        - id: relativeTo
          description: <span data-ttu-id="17dc7-126">Необязательный.</span><span class="sxs-lookup"><span data-stu-id="17dc7-126">Optional.</span></span>
          type:
            - 'excel!Excel.Worksheet:class'
  - uid: 'excel!Excel.Worksheet#delete:member(1)'
    summary: |-
      <span data-ttu-id="17dc7-127">Удаляет лист из книги.</span><span class="sxs-lookup"><span data-stu-id="17dc7-127">Deletes the worksheet from the workbook.</span></span> <span data-ttu-id="17dc7-128">Обратите внимание, что если для отображения листа задано значение "Верихидден", операция удаления завершится с помощью GeneralException.</span><span class="sxs-lookup"><span data-stu-id="17dc7-128">Note that if the worksheet's visibility is set to "VeryHidden", the delete operation will fail with a GeneralException.</span></span>

      <span data-ttu-id="17dc7-129">\[[Набор API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="17dc7-129">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: delete()
    fullName: delete()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'delete(): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a><span data-ttu-id="17dc7-130">Примеры</span><span class="sxs-lookup"><span data-stu-id="17dc7-130">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var wSheetName = 'Sheet1';
              var worksheet = ctx.workbook.worksheets.getItem(wSheetName);
              worksheet.delete();
              return ctx.sync(); 
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: 'excel!Excel.Worksheet#freezePanes:member'
    summary: |-
      <span data-ttu-id="17dc7-131">Получает объект, который можно использовать для работы с замороженными областями на листе.</span><span class="sxs-lookup"><span data-stu-id="17dc7-131">Gets an object that can be used to manipulate frozen panes on the worksheet.</span></span> <span data-ttu-id="17dc7-132">Только для чтения.</span><span class="sxs-lookup"><span data-stu-id="17dc7-132">Read-only.</span></span>

      <span data-ttu-id="17dc7-133">\[[Набор API: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="17dc7-133">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: freezePanes
    fullName: freezePanes
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly freezePanes: Excel.WorksheetFreezePanes;'
      return:
        type:
          - 'excel!Excel.WorksheetFreezePanes:class'
  - uid: 'excel!Excel.Worksheet#getCell:member(1)'
    summary: |-
      <span data-ttu-id="17dc7-134">Получает объект диапазона, содержащий одну ячейку, по номеру строки и столбца.</span><span class="sxs-lookup"><span data-stu-id="17dc7-134">Gets the range object containing the single cell based on row and column numbers.</span></span> <span data-ttu-id="17dc7-135">Ячейка может находиться вне границ родительского диапазона, пока она остается в сетке листа.</span><span class="sxs-lookup"><span data-stu-id="17dc7-135">The cell can be outside the bounds of its parent range, so long as it stays within the worksheet grid.</span></span>

      <span data-ttu-id="17dc7-136">\[[Набор API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="17dc7-136">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: 'getCell(row, column)'
    fullName: 'getCell(row, column)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getCell(row: number, column: number): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="17dc7-137">Примеры</span><span class="sxs-lookup"><span data-stu-id="17dc7-137">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "A1:F8";
              var worksheet = ctx.workbook.worksheets.getItem(sheetName);
              var cell = worksheet.getCell(0,0);
              cell.load('address');
              return ctx.sync().then(function() {
                  console.log(cell.address);
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: row
          description: '<span data-ttu-id="17dc7-138">Номер строки ячейки, которую требуется извлечь.</span><span class="sxs-lookup"><span data-stu-id="17dc7-138">The row number of the cell to be retrieved.</span></span> <span data-ttu-id="17dc7-139">Используется нулевой индекс.</span><span class="sxs-lookup"><span data-stu-id="17dc7-139">Zero-indexed.</span></span>'
          type:
            - number
        - id: column
          description: '<span data-ttu-id="17dc7-140">Номер столбца ячейки, которую требуется извлечь.</span><span class="sxs-lookup"><span data-stu-id="17dc7-140">the column number of the cell to be retrieved.</span></span> <span data-ttu-id="17dc7-141">Используется нулевой индекс.</span><span class="sxs-lookup"><span data-stu-id="17dc7-141">Zero-indexed.</span></span>'
          type:
            - number
  - uid: 'excel!Excel.Worksheet#getNext:member(1)'
    summary: |-
      <span data-ttu-id="17dc7-142">Получает лист, следующий по отношению к элементу.</span><span class="sxs-lookup"><span data-stu-id="17dc7-142">Gets the worksheet that follows this one.</span></span> <span data-ttu-id="17dc7-143">При отсутствии листов, указанных ниже, этот метод вызовет ошибку.</span><span class="sxs-lookup"><span data-stu-id="17dc7-143">If there are no worksheets following this one, this method will throw an error.</span></span>

      <span data-ttu-id="17dc7-144">\[[Набор API: ExcelApi 1,5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="17dc7-144">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getNext(visibleOnly)
    fullName: getNext(visibleOnly)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getNext(visibleOnly?: boolean): Excel.Worksheet;'
      return:
        type:
          - 'excel!Excel.Worksheet:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="17dc7-145">Примеры</span><span class="sxs-lookup"><span data-stu-id="17dc7-145">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheets = context.workbook.worksheets;

              // We don't want to include the default worksheet that was created
              // when the workbook was created, so our "firstSheet" will be the one
              // after the literal first. Note chaining of navigation methods.
              const firstSheet = sheets.getFirst().getNext();
              const lastSheet = sheets.getLast();
              const firstTaxRateRange = firstSheet.getRange("B2");
              const lastTaxRateRange = lastSheet.getRange("B2");

              firstSheet.load("name");
              lastSheet.load("name");
              firstTaxRateRange.load("text");
              lastTaxRateRange.load("text");

              await context.sync();

              let firstYear = firstSheet.name.substr(5, 4);
              let lastYear = lastSheet.name.substr(5, 4);
              console.log(`Tax Rate change from ${firstYear} to ${lastYear}`, `Tax rate for ${firstYear}: ${firstTaxRateRange.text[0][0]}\nTax rate for ${lastYear}: ${lastTaxRateRange.text[0][0]}`)

              await context.sync();
          });
          ```
      parameters:
        - id: visibleOnly
          description: '<span data-ttu-id="17dc7-146">Необязательно.</span><span class="sxs-lookup"><span data-stu-id="17dc7-146">Optional.</span></span> <span data-ttu-id="17dc7-147">Если задано значение true, учитываются только видимые листы, пропуская все скрытые.</span><span class="sxs-lookup"><span data-stu-id="17dc7-147">If true, considers only visible worksheets, skipping over any hidden ones.</span></span>'
          type:
            - boolean
  - uid: 'excel!Excel.Worksheet#getNextOrNullObject:member(1)'
    summary: |-
      <span data-ttu-id="17dc7-148">Получает лист, следующий по отношению к элементу.</span><span class="sxs-lookup"><span data-stu-id="17dc7-148">Gets the worksheet that follows this one.</span></span> <span data-ttu-id="17dc7-149">Если после этого листа нет ни одного листа, этот метод возвратит нулевой объект.</span><span class="sxs-lookup"><span data-stu-id="17dc7-149">If there are no worksheets following this one, this method will return a null object.</span></span>

      <span data-ttu-id="17dc7-150">\[[Набор API: ExcelApi 1,5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="17dc7-150">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getNextOrNullObject(visibleOnly)
    fullName: getNextOrNullObject(visibleOnly)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getNextOrNullObject(visibleOnly?: boolean): Excel.Worksheet;'
      return:
        type:
          - 'excel!Excel.Worksheet:class'
        description: ''
      parameters:
        - id: visibleOnly
          description: '<span data-ttu-id="17dc7-151">Необязательно.</span><span class="sxs-lookup"><span data-stu-id="17dc7-151">Optional.</span></span> <span data-ttu-id="17dc7-152">Если задано значение true, учитываются только видимые листы, пропуская все скрытые.</span><span class="sxs-lookup"><span data-stu-id="17dc7-152">If true, considers only visible worksheets, skipping over any hidden ones.</span></span>'
          type:
            - boolean
  - uid: 'excel!Excel.Worksheet#getPrevious:member(1)'
    summary: |-
      <span data-ttu-id="17dc7-153">Получает лист, который предшествует этому.</span><span class="sxs-lookup"><span data-stu-id="17dc7-153">Gets the worksheet that precedes this one.</span></span> <span data-ttu-id="17dc7-154">Если нет предыдущих листов, этот метод выдаст ошибку.</span><span class="sxs-lookup"><span data-stu-id="17dc7-154">If there are no previous worksheets, this method will throw an error.</span></span>

      <span data-ttu-id="17dc7-155">\[[Набор API: ExcelApi 1,5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="17dc7-155">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getPrevious(visibleOnly)
    fullName: getPrevious(visibleOnly)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getPrevious(visibleOnly?: boolean): Excel.Worksheet;'
      return:
        type:
          - 'excel!Excel.Worksheet:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="17dc7-156">Примеры</span><span class="sxs-lookup"><span data-stu-id="17dc7-156">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheets = context.workbook.worksheets;
              const currentSheet = sheets.getActiveWorksheet();
              const previousYearSheet = currentSheet.getPrevious();
              const currentTaxDueRange = currentSheet.getRange("C2");
              const previousTaxDueRange = previousYearSheet.getRange("C2");

              currentSheet.load("name");
              previousYearSheet.load("name");
              currentTaxDueRange.load("text");
              previousTaxDueRange.load("text");

              await context.sync();

              let currentYear = currentSheet.name.substr(5, 4);
              let previousYear = previousYearSheet.name.substr(5, 4);
              console.log("Two Year Tax Due Comparison", `Tax due for ${currentYear} was ${currentTaxDueRange.text[0][0]}\nTax due for ${previousYear} was ${previousTaxDueRange.text[0][0]}`)

              await context.sync();
          });
          ```
      parameters:
        - id: visibleOnly
          description: '<span data-ttu-id="17dc7-157">Необязательно.</span><span class="sxs-lookup"><span data-stu-id="17dc7-157">Optional.</span></span> <span data-ttu-id="17dc7-158">Если задано значение true, учитываются только видимые листы, пропуская все скрытые.</span><span class="sxs-lookup"><span data-stu-id="17dc7-158">If true, considers only visible worksheets, skipping over any hidden ones.</span></span>'
          type:
            - boolean
  - uid: 'excel!Excel.Worksheet#getPreviousOrNullObject:member(1)'
    summary: |-
      <span data-ttu-id="17dc7-159">Получает лист, который предшествует этому.</span><span class="sxs-lookup"><span data-stu-id="17dc7-159">Gets the worksheet that precedes this one.</span></span> <span data-ttu-id="17dc7-160">Если нет предыдущих листов, этот метод возвратит значение NULL обжет.</span><span class="sxs-lookup"><span data-stu-id="17dc7-160">If there are no previous worksheets, this method will return a null objet.</span></span>

      <span data-ttu-id="17dc7-161">\[[Набор API: ExcelApi 1,5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="17dc7-161">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getPreviousOrNullObject(visibleOnly)
    fullName: getPreviousOrNullObject(visibleOnly)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getPreviousOrNullObject(visibleOnly?: boolean): Excel.Worksheet;'
      return:
        type:
          - 'excel!Excel.Worksheet:class'
        description: ''
      parameters:
        - id: visibleOnly
          description: '<span data-ttu-id="17dc7-162">Необязательно.</span><span class="sxs-lookup"><span data-stu-id="17dc7-162">Optional.</span></span> <span data-ttu-id="17dc7-163">Если задано значение true, учитываются только видимые листы, пропуская все скрытые.</span><span class="sxs-lookup"><span data-stu-id="17dc7-163">If true, considers only visible worksheets, skipping over any hidden ones.</span></span>'
          type:
            - boolean
  - uid: 'excel!Excel.Worksheet#getRange:member(1)'
    summary: |-
      <span data-ttu-id="17dc7-164">Получает объект Range, представляющий отдельный прямоугольный блок ячеек, заданный по адресу или имени.</span><span class="sxs-lookup"><span data-stu-id="17dc7-164">Gets the range object, representing a single rectangular block of cells, specified by the address or name.</span></span>

      <span data-ttu-id="17dc7-165">\[[Набор API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="17dc7-165">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getRange(address)
    fullName: getRange(address)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getRange(address?: string): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="17dc7-166">Примеры</span><span class="sxs-lookup"><span data-stu-id="17dc7-166">Examples</span></span>

          ```javascript
          // Below example uses range address to get the range object.
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "A1:F8";
              var worksheet = ctx.workbook.worksheets.getItem(sheetName);
              var range = worksheet.getRange(rangeAddress);
              range.load('cellCount');
              return ctx.sync().then(function() {
                  console.log(range.cellCount);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
          ```javascript
          // Below example uses a named-range to get the range object.
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeName = 'MyRange';
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeName);
              range.load('address');
              return ctx.sync().then(function() {
                  console.log(range.address);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: address
          description: '<span data-ttu-id="17dc7-167">Необязательно.</span><span class="sxs-lookup"><span data-stu-id="17dc7-167">Optional.</span></span> <span data-ttu-id="17dc7-168">Строка, представляющая адрес или имя диапазона.</span><span class="sxs-lookup"><span data-stu-id="17dc7-168">The string representing the address or name of the range.</span></span> <span data-ttu-id="17dc7-169">Например, "a1: B2".</span><span class="sxs-lookup"><span data-stu-id="17dc7-169">For example, "A1:B2".</span></span> <span data-ttu-id="17dc7-170">Если аргумент не указан, возвращается весь диапазон листа.</span><span class="sxs-lookup"><span data-stu-id="17dc7-170">If not specified, the entire worksheet range is returned.</span></span>'
          type:
            - string
  - uid: 'excel!Excel.Worksheet#getRangeByIndexes:member(1)'
    summary: |-
      <span data-ttu-id="17dc7-171">Получает объект диапазона, начинающегося с определенных строки и столбца и занимающего определенное количество строк и столбцов.</span><span class="sxs-lookup"><span data-stu-id="17dc7-171">Gets the range object beginning at a particular row index and column index, and spanning a certain number of rows and columns.</span></span>

      <span data-ttu-id="17dc7-172">\[[Набор API: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="17dc7-172">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: 'getRangeByIndexes(startRow, startColumn, rowCount, columnCount)'
    fullName: 'getRangeByIndexes(startRow, startColumn, rowCount, columnCount)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getRangeByIndexes(startRow: number, startColumn: number, rowCount: number, columnCount: number): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: ''
      parameters:
        - id: startRow
          description: <span data-ttu-id="17dc7-173">Строка начала (с нулевым индексированием).</span><span class="sxs-lookup"><span data-stu-id="17dc7-173">Start row (zero-indexed).</span></span>
          type:
            - number
        - id: startColumn
          description: <span data-ttu-id="17dc7-174">Столбец "начало" (с нулевым индексом).</span><span class="sxs-lookup"><span data-stu-id="17dc7-174">Start column (zero-indexed).</span></span>
          type:
            - number
        - id: rowCount
          description: '<span data-ttu-id="17dc7-175">Количество строк, включаемых в диапазон.</span><span class="sxs-lookup"><span data-stu-id="17dc7-175">Number of rows to include in the range.</span></span>'
          type:
            - number
        - id: columnCount
          description: '<span data-ttu-id="17dc7-176">Число столбцов, включаемых в диапазон.</span><span class="sxs-lookup"><span data-stu-id="17dc7-176">Number of columns to include in the range.</span></span>'
          type:
            - number
  - uid: 'excel!Excel.Worksheet#getUsedRange:member(1)'
    summary: |-
      <span data-ttu-id="17dc7-177">Используемый диапазон — это наименьший диапазон, включающий в себя все ячейки с определенным значением или форматированием.</span><span class="sxs-lookup"><span data-stu-id="17dc7-177">The used range is the smallest range that encompasses any cells that have a value or formatting assigned to them.</span></span> <span data-ttu-id="17dc7-178">Если лист пуст, эта функция возвратит верхнюю левую ячейку (то есть *не* выдает ошибку).</span><span class="sxs-lookup"><span data-stu-id="17dc7-178">If the entire worksheet is blank, this function will return the top left cell (i.e. it will *not* throw an error).</span></span>

      <span data-ttu-id="17dc7-179">\[[Набор API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="17dc7-179">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getUsedRange(valuesOnly)
    fullName: getUsedRange(valuesOnly)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getUsedRange(valuesOnly?: boolean): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="17dc7-180">Примеры</span><span class="sxs-lookup"><span data-stu-id="17dc7-180">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var wSheetName = 'Sheet1';
              var worksheet = ctx.workbook.worksheets.getItem(wSheetName);
              var usedRange = worksheet.getUsedRange();
              usedRange.load('address');
              return ctx.sync().then(function() {
                      console.log(usedRange.address);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: valuesOnly
          description: '<span data-ttu-id="17dc7-181">Необязательно.</span><span class="sxs-lookup"><span data-stu-id="17dc7-181">Optional.</span></span> <span data-ttu-id="17dc7-182">Если этот параметр имеет значение true, учитываются только ячейки со значениями в качестве используемых ячеек (игнорируя форматирование).</span><span class="sxs-lookup"><span data-stu-id="17dc7-182">If true, considers only cells with values as used cells (ignoring formatting).</span></span> <span data-ttu-id="17dc7-183">\[Набор API: ExcelApi 1,2\]</span><span class="sxs-lookup"><span data-stu-id="17dc7-183">\[Api set: ExcelApi 1.2\]</span></span>'
          type:
            - boolean
  - uid: 'excel!Excel.Worksheet#getUsedRangeOrNullObject:member(1)'
    summary: "<span data-ttu-id=\"17dc7-p122\">Используемый диапазон\_— это наименьший диапазон, включающий в себя все ячейки, которые содержат значение или форматирование. Если весь лист пустой, эта функция возвращает пустой объект.</span><span class=\"sxs-lookup\"><span data-stu-id=\"17dc7-p122\">The used range is the smallest range that encompasses any cells that have a value or formatting assigned to them. If the entire worksheet is blank, this function will return a null object.</span></span>\n\n<span data-ttu-id=\"17dc7-186\">\\[[Набор API: ExcelApi 1,4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\\]</span><span class=\"sxs-lookup\"><span data-stu-id=\"17dc7-186\">\\[ [API set: ExcelApi 1.4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \\]</span></span>"
    name: getUsedRangeOrNullObject(valuesOnly)
    fullName: getUsedRangeOrNullObject(valuesOnly)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getUsedRangeOrNullObject(valuesOnly?: boolean): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: ''
      parameters:
        - id: valuesOnly
          description: <span data-ttu-id="17dc7-187">Необязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="17dc7-187">Optional.</span></span> <span data-ttu-id="17dc7-188">Учитывает только ячейки со значениями.</span><span class="sxs-lookup"><span data-stu-id="17dc7-188">Considers only cells with values as used cells.</span></span>
          type:
            - boolean
  - uid: 'excel!Excel.Worksheet#id:member'
    summary: |-
      <span data-ttu-id="17dc7-p124">Возвращает значение, однозначно идентифицирующее лист в данной книге. Значение идентификатора остается прежним, даже если переименовать или переместить лист. Только для чтения.</span><span class="sxs-lookup"><span data-stu-id="17dc7-p124">Returns a value that uniquely identifies the worksheet in a given workbook. The value of the identifier remains the same even when the worksheet is renamed or moved. Read-only.</span></span>

      <span data-ttu-id="17dc7-192">\[[Набор API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="17dc7-192">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: id
    fullName: id
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly id: string;'
      return:
        type:
          - string
  - uid: 'excel!Excel.Worksheet#load:member(1)'
    summary: <span data-ttu-id="17dc7-193">Добавляет в очередь команду для загрузки указанных свойств объекта.</span><span class="sxs-lookup"><span data-stu-id="17dc7-193">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="17dc7-194">Перед чтением свойств необходимо вызвать метод context.sync().</span><span class="sxs-lookup"><span data-stu-id="17dc7-194">You must call "context.sync()" before reading the properties.</span></span>
    remarks: |-
      <span data-ttu-id="17dc7-195">В дополнение к этой подписи этот метод имеет следующие подписи:</span><span class="sxs-lookup"><span data-stu-id="17dc7-195">In addition to this signature, this method has the following signatures:</span></span>

      <span data-ttu-id="17dc7-196">`load(option?: string | string[]): Excel.Worksheet`-WHERE — это строка с разделителями-запятыми или массив строк, указывающий свойства для загрузки.</span><span class="sxs-lookup"><span data-stu-id="17dc7-196">`load(option?: string | string[]): Excel.Worksheet` - Where option is a comma-delimited string or an array of strings that specify the properties to load.</span></span>

      <span data-ttu-id="17dc7-197">`load(option?: { select?: string; expand?: string; }): Excel.Worksheet`-WHERE. Select — это строка с разделителями-запятыми, указывающая свойства для загрузки и параметры. Expand — это строка с разделителями-запятыми, указывающая свойства навигации для загрузки.</span><span class="sxs-lookup"><span data-stu-id="17dc7-197">`load(option?: { select?: string; expand?: string; }): Excel.Worksheet` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.</span></span>

      <span data-ttu-id="17dc7-198">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.Worksheet`— Доступно только для типов коллекций.</span><span class="sxs-lookup"><span data-stu-id="17dc7-198">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.Worksheet` - Only available on collection types.</span></span> <span data-ttu-id="17dc7-199">Он аналогичен предыдущей подписи.</span><span class="sxs-lookup"><span data-stu-id="17dc7-199">It is similar to the preceding signature.</span></span> <span data-ttu-id="17dc7-200">Option. Top указывает максимальное количество элементов коллекции, которые можно включить в результат.</span><span class="sxs-lookup"><span data-stu-id="17dc7-200">Option.top specifies the maximum number of collection items that can be included in the result.</span></span> <span data-ttu-id="17dc7-201">Option. skip указывает количество элементов, которые будут пропущены и не включены в результат.</span><span class="sxs-lookup"><span data-stu-id="17dc7-201">Option.skip specifies the number of items that are to be skipped and not included in the result.</span></span> <span data-ttu-id="17dc7-202">Если указан параметр Option. Top, результирующий набор начнется после пропуска указанного числа элементов.</span><span class="sxs-lookup"><span data-stu-id="17dc7-202">If option.top is specified, the result set will start after skipping the specified number of items.</span></span>
    name: load(option)
    fullName: load(option)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(option?: Excel.Interfaces.WorksheetLoadOptions): Excel.Worksheet;'
      return:
        type:
          - 'excel!Excel.Worksheet:class'
        description: ''
      parameters:
        - id: option
          description: ''
          type:
            - 'excel!Excel.Interfaces.WorksheetLoadOptions:interface'
  - uid: 'excel!Excel.Worksheet#load:member(2)'
    summary: <span data-ttu-id="17dc7-203">Добавляет в очередь команду для загрузки указанных свойств объекта.</span><span class="sxs-lookup"><span data-stu-id="17dc7-203">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="17dc7-204">Перед чтением свойств `context.sync()` необходимо вызвать метод.</span><span class="sxs-lookup"><span data-stu-id="17dc7-204">You must call `context.sync()` before reading the properties.</span></span>
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): Excel.Worksheet;'
      return:
        type:
          - 'excel!Excel.Worksheet:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="17dc7-205">Примеры</span><span class="sxs-lookup"><span data-stu-id="17dc7-205">Examples</span></span>

          ```javascript
          // Get worksheet properties based on sheet name.
          Excel.run(function (ctx) { 
              var wSheetName = 'Sheet1';
              var worksheet = ctx.workbook.worksheets.getItem(wSheetName);
              worksheet.load('position')
              return ctx.sync().then(function() {
                      console.log(worksheet.position);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
          ```javascript
          // Set worksheet position. 
          Excel.run(function (ctx) { 
              var wSheetName = 'Sheet1';
              var worksheet = ctx.workbook.worksheets.getItem(wSheetName);
              worksheet.position = 2;
              return ctx.sync(); 
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: propertyNames
          description: '<span data-ttu-id="17dc7-206">Строка, разделенная запятыми, или массив строк, указывающий свойства для загрузки.</span><span class="sxs-lookup"><span data-stu-id="17dc7-206">A comma-delimited string or an array of strings that specify the properties to load.</span></span>'
          type:
            - 'string | string[]'
  - uid: 'excel!Excel.Worksheet#load:member(3)'
    summary: <span data-ttu-id="17dc7-207">Добавляет в очередь команду для загрузки указанных свойств объекта.</span><span class="sxs-lookup"><span data-stu-id="17dc7-207">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="17dc7-208">Перед чтением свойств `context.sync()` необходимо вызвать метод.</span><span class="sxs-lookup"><span data-stu-id="17dc7-208">You must call `context.sync()` before reading the properties.</span></span>
    name: load(propertyNamesAndPaths)
    fullName: load(propertyNamesAndPaths)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNamesAndPaths?: { select?: string; expand?: string; }): Excel.Worksheet;'
      return:
        type:
          - 'excel!Excel.Worksheet:class'
        description: ''
      parameters:
        - id: propertyNamesAndPaths
          description: '<span data-ttu-id="17dc7-209">Где Пропертинамесандпасс. Select — это строка с разделителями-запятыми, задающая свойства для загрузки, и Пропертинамесандпасс. Expand — это строка с разделителями-запятыми, указывающая свойства навигации для загрузки.</span><span class="sxs-lookup"><span data-stu-id="17dc7-209">Where propertyNamesAndPaths.select is a comma-delimited string that specifies the properties to load, and propertyNamesAndPaths.expand is a comma-delimited string that specifies the navigation properties to load.</span></span>'
          type:
            - '{ select?: string; expand?: string; }'
  - uid: 'excel!Excel.Worksheet#name:member'
    summary: |-
      <span data-ttu-id="17dc7-210">Отображаемое имя листа.</span><span class="sxs-lookup"><span data-stu-id="17dc7-210">The display name of the worksheet.</span></span>

      <span data-ttu-id="17dc7-211">\[[Набор API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="17dc7-211">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: name
    fullName: name
    langs:
      - typeScript
    type: property
    syntax:
      content: 'name: string;'
      return:
        type:
          - string
  - uid: 'excel!Excel.Worksheet#names:member'
    summary: |-
      <span data-ttu-id="17dc7-212">Коллекция имен, относящих к текущему листу.</span><span class="sxs-lookup"><span data-stu-id="17dc7-212">Collection of names scoped to the current worksheet.</span></span> <span data-ttu-id="17dc7-213">Только для чтения.</span><span class="sxs-lookup"><span data-stu-id="17dc7-213">Read-only.</span></span>

      <span data-ttu-id="17dc7-214">\[[Набор API: ExcelApi 1,4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="17dc7-214">\[ [API set: ExcelApi 1.4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: names
    fullName: names
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly names: Excel.NamedItemCollection;'
      return:
        type:
          - 'excel!Excel.NamedItemCollection:class'
  - uid: 'excel!Excel.Worksheet#onActivated:member'
    summary: |-
      <span data-ttu-id="17dc7-215">Возникает при активации листа.</span><span class="sxs-lookup"><span data-stu-id="17dc7-215">Occurs when the worksheet is activated.</span></span>

      <span data-ttu-id="17dc7-216">\[[Набор API: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="17dc7-216">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: onActivated
    fullName: onActivated
    langs:
      - typeScript
    type: event
    syntax:
      content: 'readonly onActivated: OfficeExtension.EventHandlers<Excel.WorksheetActivatedEventArgs>;'
      return:
        type:
          - 'excel!Excel.Worksheet#onActivated~0:complex'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="17dc7-217">Примеры</span><span class="sxs-lookup"><span data-stu-id="17dc7-217">Examples</span></span>

          ```javascript
          Excel.run(function (context) {
              var sheet = context.workbook.worksheets.getItem("Sample");
              sheet.onActivated.add(function (event) {
                  return Excel.run((context) => {
                      console.log("The activated worksheet ID is: " + event.worksheetId);
                      return context.sync();
                  });
              });
              return context.sync();
          });
          ```
  - uid: 'excel!Excel.Worksheet#onChanged:member'
    summary: |-
      <span data-ttu-id="17dc7-218">Происходит при изменении данных на конкретном листе.</span><span class="sxs-lookup"><span data-stu-id="17dc7-218">Occurs when data changed on a specific worksheet.</span></span>

      <span data-ttu-id="17dc7-219">\[[Набор API: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="17dc7-219">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: onChanged
    fullName: onChanged
    langs:
      - typeScript
    type: event
    syntax:
      content: 'readonly onChanged: OfficeExtension.EventHandlers<Excel.WorksheetChangedEventArgs>;'
      return:
        type:
          - 'excel!Excel.Worksheet#onChanged~0:complex'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="17dc7-220">Примеры</span><span class="sxs-lookup"><span data-stu-id="17dc7-220">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              let sheet = context.workbook.worksheets.getItem("Sample");
              sheet.onChanged.add(onChange);

              await context.sync();
              console.log("A handler has been registered for the onChanged event.");
          });
          ```
  - uid: 'excel!Excel.Worksheet#onDeactivated:member'
    summary: |-
      <span data-ttu-id="17dc7-221">Возникает при отключении рабочего листа.</span><span class="sxs-lookup"><span data-stu-id="17dc7-221">Occurs when the worksheet is deactivated.</span></span>

      <span data-ttu-id="17dc7-222">\[[Набор API: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="17dc7-222">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: onDeactivated
    fullName: onDeactivated
    langs:
      - typeScript
    type: event
    syntax:
      content: 'readonly onDeactivated: OfficeExtension.EventHandlers<Excel.WorksheetDeactivatedEventArgs>;'
      return:
        type:
          - 'excel!Excel.Worksheet#onDeactivated~0:complex'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="17dc7-223">Примеры</span><span class="sxs-lookup"><span data-stu-id="17dc7-223">Examples</span></span>

          ```javascript
          Excel.run(function (context) {
              var sheet = context.workbook.worksheets.getItem("Sample");
              sheet.onDeactivated.add(function (event) {
                  return Excel.run((context) => {
                      console.log("The deactivated worksheet is: " + event.worksheetId);
                      return context.sync();
                  });
              });
              return context.sync();
          });
          ```
  - uid: 'excel!Excel.Worksheet#onSelectionChanged:member'
    summary: |-
      <span data-ttu-id="17dc7-224">Возникает при изменении выделенного фрагмента на определенном листе.</span><span class="sxs-lookup"><span data-stu-id="17dc7-224">Occurs when the selection changes on a specific worksheet.</span></span>

      <span data-ttu-id="17dc7-225">\[[Набор API: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="17dc7-225">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: onSelectionChanged
    fullName: onSelectionChanged
    langs:
      - typeScript
    type: event
    syntax:
      content: 'readonly onSelectionChanged: OfficeExtension.EventHandlers<Excel.WorksheetSelectionChangedEventArgs>;'
      return:
        type:
          - 'excel!Excel.Worksheet#onSelectionChanged~0:complex'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="17dc7-226">Примеры</span><span class="sxs-lookup"><span data-stu-id="17dc7-226">Examples</span></span>

          ```javascript
          Excel.run(function (context) {
              var sheet = context.workbook.worksheets.getItem("Sample");
              sheet.onSelectionChanged.add(function (event) {
                  return Excel.run((context) => {
                      console.log("The selected range has changed to: " + event.address);
                      return context.sync();
                  });
              });
              return context.sync();
          });
          ```
  - uid: 'excel!Excel.Worksheet#pivotTables:member'
    summary: |-
      <span data-ttu-id="17dc7-227">Коллекция сводных таблиц на листе.</span><span class="sxs-lookup"><span data-stu-id="17dc7-227">Collection of PivotTables that are part of the worksheet.</span></span> <span data-ttu-id="17dc7-228">Только для чтения.</span><span class="sxs-lookup"><span data-stu-id="17dc7-228">Read-only.</span></span>

      <span data-ttu-id="17dc7-229">\[[Набор API: ExcelApi 1,3](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="17dc7-229">\[ [API set: ExcelApi 1.3](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: pivotTables
    fullName: pivotTables
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly pivotTables: Excel.PivotTableCollection;'
      return:
        type:
          - 'excel!Excel.PivotTableCollection:class'
  - uid: 'excel!Excel.Worksheet#position:member'
    summary: |-
      <span data-ttu-id="17dc7-230">Положение листа (начиная с нуля) в книге.</span><span class="sxs-lookup"><span data-stu-id="17dc7-230">The zero-based position of the worksheet within the workbook.</span></span>

      <span data-ttu-id="17dc7-231">\[[Набор API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="17dc7-231">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: position
    fullName: position
    langs:
      - typeScript
    type: property
    syntax:
      content: 'position: number;'
      return:
        type:
          - number
  - uid: 'excel!Excel.Worksheet#protection:member'
    summary: |-
      <span data-ttu-id="17dc7-232">Возвращает объект защиты листа.</span><span class="sxs-lookup"><span data-stu-id="17dc7-232">Returns sheet protection object for a worksheet.</span></span> <span data-ttu-id="17dc7-233">Только для чтения.</span><span class="sxs-lookup"><span data-stu-id="17dc7-233">Read-only.</span></span>

      <span data-ttu-id="17dc7-234">\[[Набор API: ExcelApi 1,2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="17dc7-234">\[ [API set: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: protection
    fullName: protection
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly protection: Excel.WorksheetProtection;'
      return:
        type:
          - 'excel!Excel.WorksheetProtection:class'
  - uid: 'excel!Excel.Worksheet#set:member(1)'
    summary: '<span data-ttu-id="17dc7-235">Задает одновременно несколько свойств объекта.</span><span class="sxs-lookup"><span data-stu-id="17dc7-235">Sets multiple properties of an object at the same time.</span></span> <span data-ttu-id="17dc7-236">Можно передать либо простой объект с соответствующими свойствами, либо другой объект API того же типа.</span><span class="sxs-lookup"><span data-stu-id="17dc7-236">You can pass either a plain object with the appropriate properties, or another API object of the same type.</span></span>'
    remarks: |-
      <span data-ttu-id="17dc7-237">Этот метод имеет следующую дополнительную подпись:</span><span class="sxs-lookup"><span data-stu-id="17dc7-237">This method has the following additional signature:</span></span>

      `set(properties: Excel.Worksheet): void`
    name: 'set(properties, options)'
    fullName: 'set(properties, options)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'set(properties: Interfaces.WorksheetUpdateData, options?: OfficeExtension.UpdateOptions): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: properties
          description: '<span data-ttu-id="17dc7-238">Объект JavaScript со свойствами, которые структурированы исоморфикалли к свойствам объекта, для которого вызывается метод.</span><span class="sxs-lookup"><span data-stu-id="17dc7-238">A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.</span></span>'
          type:
            - 'excel!Excel.Interfaces.WorksheetUpdateData:interface'
        - id: options
          description: '<span data-ttu-id="17dc7-239">Предоставляет возможность подавлять ошибки, если объект Properties пытается задать любые свойства, предназначенные только для чтения.</span><span class="sxs-lookup"><span data-stu-id="17dc7-239">Provides an option to suppress errors if the properties object tries to set any read-only properties.</span></span>'
          type:
            - 'excel!OfficeExtension.UpdateOptions:interface'
  - uid: 'excel!Excel.Worksheet#set:member(2)'
    summary: '<span data-ttu-id="17dc7-240">Задает одновременно несколько свойств объекта на основе существующего загруженного объекта.</span><span class="sxs-lookup"><span data-stu-id="17dc7-240">Sets multiple properties on the object at the same time, based on an existing loaded object.</span></span>'
    name: set(properties)
    fullName: set(properties)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'set(properties: Excel.Worksheet): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: properties
          description: ''
          type:
            - 'excel!Excel.Worksheet:class'
  - uid: 'excel!Excel.Worksheet#standardHeight:member'
    summary: |-
      <span data-ttu-id="17dc7-241">Возвращает стандартную (по умолчанию) высоту всех строк на листе (в пунктах).</span><span class="sxs-lookup"><span data-stu-id="17dc7-241">Returns the standard (default) height of all the rows in the worksheet, in points.</span></span> <span data-ttu-id="17dc7-242">Только для чтения.</span><span class="sxs-lookup"><span data-stu-id="17dc7-242">Read-only.</span></span>

      <span data-ttu-id="17dc7-243">\[[Набор API: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="17dc7-243">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: standardHeight
    fullName: standardHeight
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly standardHeight: number;'
      return:
        type:
          - number
  - uid: 'excel!Excel.Worksheet#standardWidth:member'
    summary: |-
      <span data-ttu-id="17dc7-244">Возвращает или задает стандартную (по умолчанию) ширину всех столбцов на листе.</span><span class="sxs-lookup"><span data-stu-id="17dc7-244">Returns or sets the standard (default) width of all the columns in the worksheet.</span></span> <span data-ttu-id="17dc7-245">Одна единица измерения ширины столбца равна ширине одного символа в стиле Normal.</span><span class="sxs-lookup"><span data-stu-id="17dc7-245">One unit of column width is equal to the width of one character in the Normal style.</span></span> <span data-ttu-id="17dc7-246">Для пропорциональных шрифтов используется ширина знака 0 (ноль).</span><span class="sxs-lookup"><span data-stu-id="17dc7-246">For proportional fonts, the width of the character 0 (zero) is used.</span></span>

      <span data-ttu-id="17dc7-247">\[[Набор API: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="17dc7-247">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: standardWidth
    fullName: standardWidth
    langs:
      - typeScript
    type: property
    syntax:
      content: 'standardWidth: number;'
      return:
        type:
          - number
  - uid: 'excel!Excel.Worksheet#tabColor:member'
    summary: |-
      <span data-ttu-id="17dc7-248">Получает или задает цвет вкладки листа.</span><span class="sxs-lookup"><span data-stu-id="17dc7-248">Gets or sets the worksheet tab color.</span></span> <span data-ttu-id="17dc7-249">При получении цвета вкладки, если лист невидим, значение будет равно null.</span><span class="sxs-lookup"><span data-stu-id="17dc7-249">When retrieving the tab color, if the worksheet is invisible, the value will be null.</span></span> <span data-ttu-id="17dc7-250">Если лист является видимым, но для цвета вкладки задано значение Авто, возвращается пустая строка.</span><span class="sxs-lookup"><span data-stu-id="17dc7-250">If the worksheet is visible but the tab color is set to auto, an empty string will be returned.</span></span> <span data-ttu-id="17dc7-251">В противном случае для свойства задается цвет, в виде "\#123456" при задании цвета используйте пустую строку для установки "Авто" или "реальный цвет" в противном случае.</span><span class="sxs-lookup"><span data-stu-id="17dc7-251">Otherwise, the property will be set to a color, in the form "\#123456" When setting the color, use an empty-string to set an "auto" color, or a real color otherwise.</span></span>

      <span data-ttu-id="17dc7-252">\[[Набор API: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="17dc7-252">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: tabColor
    fullName: tabColor
    langs:
      - typeScript
    type: property
    syntax:
      content: 'tabColor: string;'
      return:
        type:
          - string
        description: |-


          #### <a name="examples"></a><span data-ttu-id="17dc7-253">Примеры</span><span class="sxs-lookup"><span data-stu-id="17dc7-253">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const activeSheet = context.workbook.worksheets.getActiveWorksheet();
              activeSheet.tabColor = "#FF0000";

              await context.sync();
          });
          ```
  - uid: 'excel!Excel.Worksheet#tables:member'
    summary: |-
      <span data-ttu-id="17dc7-254">Коллекция таблиц, имеющихся на листе.</span><span class="sxs-lookup"><span data-stu-id="17dc7-254">Collection of tables that are part of the worksheet.</span></span> <span data-ttu-id="17dc7-255">Только для чтения.</span><span class="sxs-lookup"><span data-stu-id="17dc7-255">Read-only.</span></span>

      <span data-ttu-id="17dc7-256">\[[Набор API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="17dc7-256">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: tables
    fullName: tables
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly tables: Excel.TableCollection;'
      return:
        type:
          - 'excel!Excel.TableCollection:class'
  - uid: 'excel!Excel.Worksheet#toJSON:member(1)'
    summary: '<span data-ttu-id="17dc7-257">Переопределяет метод `toJSON()` JavaScript для предоставления более удобного вывода при передаче объекта API`JSON.stringify()`</span><span class="sxs-lookup"><span data-stu-id="17dc7-257">Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`</span></span><!-- --><span data-ttu-id="17dc7-258">.</span><span class="sxs-lookup"><span data-stu-id="17dc7-258"></span></span> <span data-ttu-id="17dc7-259">(`JSON.stringify`</span><span class="sxs-lookup"><span data-stu-id="17dc7-259"></span></span><!-- --><span data-ttu-id="17dc7-260">, в свою очередь, вызывает `toJSON` метод объекта, который передается ему.) В то время как исходный объект Excel. лист является объектом API, `toJSON` метод возвращает простой объект JavaScript (тип`Excel.Interfaces.WorksheetData`</span><span class="sxs-lookup"><span data-stu-id="17dc7-260">, in turn, calls the `toJSON` method of the object that is passed to it.) Whereas the original Excel.Worksheet object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.WorksheetData`</span></span><!-- --><span data-ttu-id="17dc7-261">), который содержит неполные копии загруженных дочерних свойств из исходного объекта.</span><span class="sxs-lookup"><span data-stu-id="17dc7-261">) that contains shallow copies of any loaded child properties from the original object.</span></span>'
    name: toJSON()
    fullName: toJSON()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON(): Excel.Interfaces.WorksheetData;'
      return:
        type:
          - 'excel!Excel.Interfaces.WorksheetData:interface'
        description: ''
  - uid: 'excel!Excel.Worksheet#visibility:member'
    summary: |-
      <span data-ttu-id="17dc7-262">Видимость листа.</span><span class="sxs-lookup"><span data-stu-id="17dc7-262">The Visibility of the worksheet.</span></span>

      <span data-ttu-id="17dc7-263">\[[Набор API: ExcelApi 1,1 для чтения видимости; 1,2 — для его установки.](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)</span><span class="sxs-lookup"><span data-stu-id="17dc7-263">\[ [API set: ExcelApi 1.1 for reading visibility; 1.2 for setting it.](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)</span></span> <span data-ttu-id="17dc7-264">\]</span><span class="sxs-lookup"><span data-stu-id="17dc7-264"></span></span>
    name: visibility
    fullName: visibility
    langs:
      - typeScript
    type: property
    syntax:
      content: 'visibility: Excel.SheetVisibility | "Visible" | "Hidden" | "VeryHidden";'
      return:
        type:
          - 'excel!Excel.Worksheet#visibility~0:complex'
references:
  - uid: 'excel!OfficeExtension.ClientObject:class'
    name: OfficeExtension.ClientObject
  - uid: 'excel!Excel.ChartCollection:class'
    name: Excel.ChartCollection
  - uid: 'excel!Excel.RequestContext:class'
    name: RequestContext
  - uid: 'excel!Excel.Worksheet:class'
    name: Excel.Worksheet
  - uid: 'excel!Excel.WorksheetPositionType:enum'
    name: Excel.WorksheetPositionType
  - uid: 'excel!Excel.WorksheetFreezePanes:class'
    name: Excel.WorksheetFreezePanes
  - uid: 'excel!Excel.Range:class'
    name: Excel.Range
  - uid: 'excel!Excel.Interfaces.WorksheetLoadOptions:interface'
    name: Excel.Interfaces.WorksheetLoadOptions
  - uid: 'excel!Excel.NamedItemCollection:class'
    name: Excel.NamedItemCollection
  - uid: 'excel!Excel.Worksheet#onActivated~0:complex'
    name: OfficeExtension.EventHandlers<Excel.WorksheetActivatedEventArgs>
    fullName: OfficeExtension.EventHandlers<Excel.WorksheetActivatedEventArgs>
    spec.typeScript:
      - uid: 'excel!OfficeExtension.EventHandlers:class'
        name: OfficeExtension.EventHandlers
        fullName: OfficeExtension.EventHandlers
      - name: <
        fullName: <
      - uid: 'excel!Excel.WorksheetActivatedEventArgs:interface'
        name: Excel.WorksheetActivatedEventArgs
        fullName: Excel.WorksheetActivatedEventArgs
      - name: '>'
        fullName: '>'
  - uid: 'excel!Excel.Worksheet#onChanged~0:complex'
    name: OfficeExtension.EventHandlers<Excel.WorksheetChangedEventArgs>
    fullName: OfficeExtension.EventHandlers<Excel.WorksheetChangedEventArgs>
    spec.typeScript:
      - uid: 'excel!OfficeExtension.EventHandlers:class'
        name: OfficeExtension.EventHandlers
        fullName: OfficeExtension.EventHandlers
      - name: <
        fullName: <
      - uid: 'excel!Excel.WorksheetChangedEventArgs:interface'
        name: Excel.WorksheetChangedEventArgs
        fullName: Excel.WorksheetChangedEventArgs
      - name: '>'
        fullName: '>'
  - uid: 'excel!Excel.Worksheet#onDeactivated~0:complex'
    name: OfficeExtension.EventHandlers<Excel.WorksheetDeactivatedEventArgs>
    fullName: OfficeExtension.EventHandlers<Excel.WorksheetDeactivatedEventArgs>
    spec.typeScript:
      - uid: 'excel!OfficeExtension.EventHandlers:class'
        name: OfficeExtension.EventHandlers
        fullName: OfficeExtension.EventHandlers
      - name: <
        fullName: <
      - uid: 'excel!Excel.WorksheetDeactivatedEventArgs:interface'
        name: Excel.WorksheetDeactivatedEventArgs
        fullName: Excel.WorksheetDeactivatedEventArgs
      - name: '>'
        fullName: '>'
  - uid: 'excel!Excel.Worksheet#onSelectionChanged~0:complex'
    name: OfficeExtension.EventHandlers<Excel.WorksheetSelectionChangedEventArgs>
    fullName: OfficeExtension.EventHandlers<Excel.WorksheetSelectionChangedEventArgs>
    spec.typeScript:
      - uid: 'excel!OfficeExtension.EventHandlers:class'
        name: OfficeExtension.EventHandlers
        fullName: OfficeExtension.EventHandlers
      - name: <
        fullName: <
      - uid: 'excel!Excel.WorksheetSelectionChangedEventArgs:interface'
        name: Excel.WorksheetSelectionChangedEventArgs
        fullName: Excel.WorksheetSelectionChangedEventArgs
      - name: '>'
        fullName: '>'
  - uid: 'excel!Excel.PivotTableCollection:class'
    name: Excel.PivotTableCollection
  - uid: 'excel!Excel.WorksheetProtection:class'
    name: Excel.WorksheetProtection
  - uid: 'excel!Excel.Interfaces.WorksheetUpdateData:interface'
    name: Interfaces.WorksheetUpdateData
  - uid: 'excel!OfficeExtension.UpdateOptions:interface'
    name: OfficeExtension.UpdateOptions
  - uid: 'excel!Excel.TableCollection:class'
    name: Excel.TableCollection
  - uid: 'excel!Excel.Interfaces.WorksheetData:interface'
    name: Excel.Interfaces.WorksheetData
  - uid: 'excel!Excel.Worksheet#visibility~0:complex'
    name: Excel.SheetVisibility | "Visible" | "Hidden" | "VeryHidden"
    fullName: Excel.SheetVisibility | "Visible" | "Hidden" | "VeryHidden"
    spec.typeScript:
      - uid: 'excel!Excel.SheetVisibility:enum'
        name: Excel.SheetVisibility
        fullName: Excel.SheetVisibility
      - name: ' | "Visible" | "Hidden" | "VeryHidden"'
        fullName: ' | "Visible" | "Hidden" | "VeryHidden"'