### YamlMime:UniversalReference
items:
  - uid: office.Office.Settings
    summary: 'Представляет пользовательские параметры для надстройки области задач или контентной надстройки, которые хранятся в документе ведущего приложения как пары "имя-значение".'
    remarks: |-
      **Hosts**: Excel, PowerPoint, Word

      Параметры, созданные с помощью методов объекта Settings, сохраняются для каждой надстройки и документа. Таким образом, они доступны только для создавшего их приложения и только из того документа, в котором они сохранены.

      Имя параметра — это строка, а значение может быть String, Number, Boolean, null, Object или Array.

      Объект Settings автоматически загружается как часть объекта Document и доступен с помощью вызова свойства Settings этого объекта при активации надстройки.

      Разработчик должен предусмотреть вызов метода saveAsync после добавления или удаления параметров, чтобы сохранить параметры в документе.
    name: Office.Settings
    fullName: Office.Settings
    langs:
      - typeScript
    type: interface
    package: office
    children:
      - office.Office.Settings.addHandlerAsync
      - office.Office.Settings.addHandlerAsync_1
      - office.Office.Settings.get
      - office.Office.Settings.refreshAsync
      - office.Office.Settings.remove
      - office.Office.Settings.removeHandlerAsync
      - office.Office.Settings.removeHandlerAsync_1
      - office.Office.Settings.saveAsync
      - office.Office.Settings.saveAsync_1
      - office.Office.Settings.set
  - uid: office.Office.Settings.addHandlerAsync
    summary: |-
      Добавляет обработчик событий для события settingsChanged.

      **Важно!** код надстройки может зарегистрировать обработчик для события settingsChanged при запуске надстройки с помощью любого клиента Excel, но событие будет срабатывать, только когда надстройка будет загружена с помощью электронной таблицы, открытой в Excel в Интернете, и более одной пользователь редактирует электронную таблицу (совместное редактирование). Таким образом, событие settingsChanged поддерживается только в Excel в Интернете в сценариях совместного редактирования.
    remarks: |-
      **Набор**обязательных элементов: [не в наборе](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#methods-that-arent-part-of-a-requirement-set)

      Можно добавить несколько обработчиков событий для указанного объекта eventType, если имя каждой функции обработчика событий уникально.
    name: 'addHandlerAsync(eventType, handler, options, callback)'
    fullName: 'addHandlerAsync(eventType, handler, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addHandlerAsync(eventType: Office.EventType, handler: any, options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: eventType
          description: Указывает тип добавляемого события. Обязательный.
          type:
            - Office.EventType
        - id: handler
          description: 'Добавляемая функция обработчика событий, единственный параметр которой имеет тип [Office. SettingsChangedEventArgs](xref:office.Office.SettingsChangedEventArgs)<!-- -->. Обязательно.'
          type:
            - any
        - id: options
          description: Предоставляет параметр для сохранения данных контекста любого типа без изменений для использования при обратном вызове.
          type:
            - office.Office.AsyncContextOptions
        - id: callback
          description: |-
            Необязательно. Функция, вызываемая при возвращении обратного вызова, единственный параметр которой имеет тип [Office. AsyncResult](xref:office.Office.AsyncResult)<!-- -->.

            <table> <tr> <th>Свойство</th> <th>Назначение</th> </tr> <tr> <td>AsyncResult.value</td> <td>Всегда возвращает значение undefined, так как при добавлении обработчика события нет данных или объектов, которые можно вернуть.</td> </tr> <tr> <td>AsyncResult.status</td> <td>Определяет, удалось ли выполнить операцию.</td> </tr> <tr> <td>AsyncResult.error</td> <td>Доступ к объекту Error, который предоставляет сведения об ошибке, если операция завершилась неудачно.</td> </tr> <tr> <td>AsyncResult.asyncContext</td> <td>Определяемый пользователем элемент любого типа, который возвращается в объекте AsyncResult без изменения.</td> </tr> </table>
          type:
            - '(result: AsyncResult<void>) => void'
  - uid: office.Office.Settings.addHandlerAsync_1
    summary: |-
      Добавляет обработчик событий для события settingsChanged.

      **Важно!** код надстройки может зарегистрировать обработчик для события settingsChanged при запуске надстройки с помощью любого клиента Excel, но событие будет срабатывать, только когда надстройка будет загружена с помощью электронной таблицы, открытой в Excel в Интернете, и более одной пользователь редактирует электронную таблицу (совместное редактирование). Таким образом, событие settingsChanged поддерживается только в Excel в Интернете в сценариях совместного редактирования.
    remarks: |-
      **Набор**обязательных элементов: [не в наборе](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#methods-that-arent-part-of-a-requirement-set)

      Можно добавить несколько обработчиков событий для указанного объекта eventType, если имя каждой функции обработчика событий уникально.

      #### <a name="examples"></a>Примеры

      ```javascript
      function addSelectionChangedEventHandler() {
          Office.context.document.settings.addHandlerAsync(Office.EventType.SettingsChanged, MyHandler);
      }

      function MyHandler(eventArgs) {
          write('Event raised: ' + eventArgs.type);
          doSomethingWithSettings(eventArgs.settings);
      }

      // Function that writes to a div with id='message' on the page.
      function write(message){
          document.getElementById('message').innerText += message; 
      }
      ```
    name: 'addHandlerAsync(eventType, handler, callback)'
    fullName: 'addHandlerAsync(eventType, handler, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addHandlerAsync(eventType: Office.EventType, handler: any, callback?: (result: AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: eventType
          description: Указывает тип добавляемого события. Обязательный.
          type:
            - Office.EventType
        - id: handler
          description: 'Добавляемая функция обработчика событий, единственный параметр которой имеет тип [Office. SettingsChangedEventArgs](xref:office.Office.SettingsChangedEventArgs)<!-- -->. Обязательно.'
          type:
            - any
        - id: callback
          description: |-
            Необязательно. Функция, вызываемая при возвращении обратного вызова, единственный параметр которой имеет тип [Office. AsyncResult](xref:office.Office.AsyncResult)<!-- -->.

            <table> <tr> <th>Свойство</th> <th>Назначение</th> </tr> <tr> <td>AsyncResult.value</td> <td>Всегда возвращает значение undefined, так как при добавлении обработчика события нет данных или объектов, которые можно вернуть.</td> </tr> <tr> <td>AsyncResult.status</td> <td>Определяет, удалось ли выполнить операцию.</td> </tr> <tr> <td>AsyncResult.error</td> <td>Доступ к объекту Error, который предоставляет сведения об ошибке, если операция завершилась неудачно.</td> </tr> <tr> <td>AsyncResult.asyncContext</td> <td>Определяемый пользователем элемент любого типа, который возвращается в объекте AsyncResult без изменения.</td> </tr> </table>
          type:
            - '(result: AsyncResult<void>) => void'
  - uid: office.Office.Settings.get
    summary: Извлекает указанный параметр.
    remarks: |-
      **Набор требований**: [Параметры](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#settings)

      #### <a name="examples"></a>Примеры

      ```javascript
      function displayMySetting() {
          write('Current value for mySetting: ' + Office.context.document.settings.get('mySetting'));
      }
      // Function that writes to a div with id='message' on the page.
      function write(message){
          document.getElementById('message').innerText += message; 
      }
      ```
    name: get(name)
    fullName: get(name)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'get(name: string): any;'
      return:
        type:
          - any
        description: 'Объект, содержащий имена свойств, сопоставленные с сериализованными значениями JSON.'
      parameters:
        - id: name
          description: ''
          type:
            - string
  - uid: office.Office.Settings.refreshAsync
    summary: 'Считывает все параметры, сохраненные в документе, и обновляет копию этих параметров в памяти для контентной надстройки или надстройки области задач.'
    remarks: |-
      **Набор**обязательных элементов: [не в наборе](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#methods-that-arent-part-of-a-requirement-set)

      Этот метод полезен в сценариях совместного редактирования Excel, Word и PowerPoint, когда несколько экземпляров одной и той же надстройки работают с одним и тем же документом. Так как каждая надстройка работает с копией параметров, загруженных из памяти документа, на момент открытия его пользователем, значения параметров, используемых каждым пользователем, могут быть получены из синхронизации. Это может произойти, когда экземпляр надстройки вызывает метод Settings. saveAsync для сохранения всех параметров этого пользователя в документе. Вызов метода refreshAsync из обработчика событий для события settingsChanged надстройки приведет к обновлению значений параметров для всех пользователей.

      Если функция обратного вызова передана методу refreshAsync, можно использовать свойства объекта AsyncResult для возврата следующей информации.

      <table> <tr> <th>Свойство</th> <th>Назначение</th> </tr> <tr> <td>AsyncResult.value</td> <td>Получает доступ к объекту Settings с обновленными значениями.</td> </tr> <tr> <td>AsyncResult.status</td> <td>Определяет, удалось ли выполнить операцию.</td> </tr> <tr> <td>AsyncResult.error</td> <td>Доступ к объекту Error, который предоставляет сведения об ошибке, если операция завершилась неудачно.</td> </tr> <tr> <td>AsyncResult.asyncContext</td> <td>Определяемый пользователем элемент любого типа, который возвращается в объекте AsyncResult без изменения.</td> </tr> </table>

      #### <a name="examples"></a>Примеры

      ```javascript
      function refreshSettings() {
          Office.context.document.settings.refreshAsync(function (asyncResult) {
              write('Settings refreshed with status: ' + asyncResult.status);
          });
      }
      // Function that writes to a div with id='message' on the page.
      function write(message){
          document.getElementById('message').innerText += message; 
      }
      ```
    name: refreshAsync(callback)
    fullName: refreshAsync(callback)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'refreshAsync(callback?: (result: AsyncResult<Office.Settings>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: callback
          description: 'Необязательно. Функция, вызываемая при возвращении обратного вызова, единственный параметр которой имеет тип [Office. AsyncResult](xref:office.Office.AsyncResult)<!-- -->. Значением `value` свойства является объект [Office. Settings](xref:office.Office.Settings) с обновленными значениями.'
          type:
            - '(result: AsyncResult<Office.Settings>) => void'
  - uid: office.Office.Settings.remove
    summary: |-
      Удаляет указанный параметр.

      **Важно!** Обратите внимание на то, что метод Settings. Remove влияет только на копию контейнера свойств параметров параметров, нашедшегося в памяти. To persist the removal of the specified setting in the document, at some point after calling the Settings.remove method and before the add-in is closed, you must call the Settings.saveAsync method.
    remarks: |-
      **Набор требований**: [Параметры](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#settings)

      Для параметра допустимо значение null. Таким образом, назначение параметру значения null не приведет к его удалению из контейнера свойств параметров.

      #### <a name="examples"></a>Примеры

      ```javascript
      function removeMySetting() {
          Office.context.document.settings.remove('mySetting');
      }
      ```
    name: remove(name)
    fullName: remove(name)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'remove(name: string): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: name
          description: ''
          type:
            - string
  - uid: office.Office.Settings.removeHandlerAsync
    summary: Удаляет обработчик события settingsChanged.
    remarks: |-
      **Набор**обязательных элементов: [не в наборе](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#methods-that-arent-part-of-a-requirement-set)

      Если необязательный параметр Handler опущен при вызове метода removeHandlerAsync, все обработчики событий для указанного объекта eventType будут удалены.

      При выполнении функции, переданной в параметр callback, она получает объект AsyncResult, к которому можно получить доступ с помощью единственного параметра функции обратного вызова.

      В функции обратного вызова, переданной в метод removeHandlerAsync, можно использовать свойства объекта AsyncResult, чтобы получить следующие сведения.
    name: 'removeHandlerAsync(eventType, options, callback)'
    fullName: 'removeHandlerAsync(eventType, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'removeHandlerAsync(eventType: Office.EventType, options?: RemoveHandlerOptions, callback?: (result: AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: eventType
          description: Указывает тип удаляемого события. Обязательный параметр.
          type:
            - Office.EventType
        - id: options
          description: 'Предоставляет параметры для определения обработчика событий или обработчиков, которые удаляются.'
          type:
            - office.Office.RemoveHandlerOptions
        - id: callback
          description: 'Необязательно. Функция, вызываемая при возвращении обратного вызова, единственный параметр которой имеет тип [Office. AsyncResult](xref:office.Office.AsyncResult)<!-- -->.'
          type:
            - '(result: AsyncResult<void>) => void'
  - uid: office.Office.Settings.removeHandlerAsync_1
    summary: Удаляет обработчик события settingsChanged.
    remarks: |-
      **Набор**обязательных элементов: [не в наборе](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#methods-that-arent-part-of-a-requirement-set)

      Если необязательный параметр Handler опущен при вызове метода removeHandlerAsync, все обработчики событий для указанного объекта eventType будут удалены.

      При выполнении функции, переданной в параметр callback, она получает объект AsyncResult, к которому можно получить доступ с помощью единственного параметра функции обратного вызова.

      В функции обратного вызова, переданной в метод removeHandlerAsync, можно использовать свойства объекта AsyncResult, чтобы получить следующие сведения.

      #### <a name="examples"></a>Примеры

      ```javascript
      function removeSettingsChangedEventHandler() {
          Office.context.document.settings.removeHandlerAsync(Office.EventType.SettingsChanged, MyHandler);
      }

      function MyHandler(eventArgs) {
          write('Event raised: ' + eventArgs.type);
          doSomethingWithSettings(eventArgs.settings);
      }

      // Function that writes to a div with id='message' on the page.
      function write(message){
          document.getElementById('message').innerText += message; 
      }
      ```
    name: 'removeHandlerAsync(eventType, callback)'
    fullName: 'removeHandlerAsync(eventType, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'removeHandlerAsync(eventType: Office.EventType, callback?: (result: AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: eventType
          description: Указывает тип удаляемого события. Обязательный параметр.
          type:
            - Office.EventType
        - id: callback
          description: 'Необязательно. Функция, вызываемая при возвращении обратного вызова, единственный параметр которой имеет тип [Office. AsyncResult](xref:office.Office.AsyncResult)<!-- -->.'
          type:
            - '(result: AsyncResult<void>) => void'
  - uid: office.Office.Settings.saveAsync
    summary: 'Хранится в копии контейнера свойств параметров в документе, содержащейся в памяти.'
    remarks: |-
      **Набор требований**: [Параметры](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#settings)

      Все параметры, ранее сохраненные надстройкой, загружаются при ее инициализации, поэтому на протяжении всего сеанса можно использовать только методы set и get для работы с копией контейнера свойств в памяти. Если требуется сохранить параметры, чтобы они были доступны при следующем использовании надстройки, воспользуйтесь методом saveAsync.

      **Note**: метод saveAsync сохраняет в файле документа контейнер свойств параметров в памяти. Однако изменения в самом файле документа сохраняются только в том случае, если пользователь (или параметр автосохранения) сохраняет документ в файловой системе. Метод refreshAsync полезен только в сценариях совместного редактирования, если другие экземпляры одной и той же надстройки могут изменить параметры, и эти изменения должны быть сделаны доступными для всех экземпляров.

      <table> <tr> <th>Свойство</th> <th>Назначение</th> </tr> <tr> <td>AsyncResult.value</td> <td>Всегда возвращает значение undefined, так как нет объекта или данных для извлечения.</td> </tr> <tr> <td>AsyncResult.status</td> <td>Определяет, удалось ли выполнить операцию.</td> </tr> <tr> <td>AsyncResult.error</td> <td>Доступ к объекту Error, который предоставляет сведения об ошибке, если операция завершилась неудачно.</td> </tr> <tr> <td>AsyncResult.asyncContext</td> <td>Определяемый пользователем элемент любого типа, который возвращается в объекте AsyncResult без изменения.</td> </tr> </table>
    name: 'saveAsync(options, callback)'
    fullName: 'saveAsync(options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'saveAsync(options?: SaveSettingsOptions, callback?: (result: AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: options
          description: Предоставляет параметры для сохранения параметров.
          type:
            - office.Office.SaveSettingsOptions
        - id: callback
          description: 'Необязательно. Функция, вызываемая при возвращении обратного вызова, единственный параметр которой имеет тип [Office. AsyncResult](xref:office.Office.AsyncResult)<!-- -->.'
          type:
            - '(result: AsyncResult<void>) => void'
  - uid: office.Office.Settings.saveAsync_1
    summary: 'Хранится в копии контейнера свойств параметров в документе, содержащейся в памяти.'
    remarks: |-
      **Набор требований**: [Параметры](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#settings)

      Все параметры, ранее сохраненные надстройкой, загружаются при ее инициализации, поэтому на протяжении всего сеанса можно использовать только методы set и get для работы с копией контейнера свойств в памяти. Если требуется сохранить параметры, чтобы они были доступны при следующем использовании надстройки, воспользуйтесь методом saveAsync.

      **Note**: метод saveAsync сохраняет в файле документа контейнер свойств параметров в памяти. Однако изменения в самом файле документа сохраняются только в том случае, если пользователь (или параметр автосохранения) сохраняет документ в файловой системе. Метод refreshAsync полезен только в сценариях совместного редактирования, если другие экземпляры одной и той же надстройки могут изменить параметры, и эти изменения должны быть сделаны доступными для всех экземпляров.

      <table> <tr> <th>Свойство</th> <th>Назначение</th> </tr> <tr> <td>AsyncResult.value</td> <td>Всегда возвращает значение undefined, так как нет объекта или данных для извлечения.</td> </tr> <tr> <td>AsyncResult.status</td> <td>Определяет, удалось ли выполнить операцию.</td> </tr> <tr> <td>AsyncResult.error</td> <td>Доступ к объекту Error, который предоставляет сведения об ошибке, если операция завершилась неудачно.</td> </tr> <tr> <td>AsyncResult.asyncContext</td> <td>Определяемый пользователем элемент любого типа, который возвращается в объекте AsyncResult без изменения.</td> </tr> </table>

      #### <a name="examples"></a>Примеры

      ```javascript
      function persistSettings() {
          Office.context.document.settings.saveAsync(function (asyncResult) {
              write('Settings saved with status: ' + asyncResult.status);
          });
      }
      // Function that writes to a div with id='message' on the page.
      function write(message){
          document.getElementById('message').innerText += message; 
      }
      ```
    name: saveAsync(callback)
    fullName: saveAsync(callback)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'saveAsync(callback?: (result: AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: callback
          description: 'Необязательно. Функция, вызываемая при возвращении обратного вызова, единственный параметр которой имеет тип [Office. AsyncResult](xref:office.Office.AsyncResult)<!-- -->.'
          type:
            - '(result: AsyncResult<void>) => void'
  - uid: office.Office.Settings.set
    summary: |-
      Устанавливает или создает указанный параметр.

      **Важно!** Обратите внимание на то, что метод Settings. Set влияет только на копию контейнера свойств параметров параметров, нашедшегося в памяти. To make sure that additions or changes to settings will be available to your add-in the next time the document is opened, at some point after calling the Settings.set method and before the add-in is closed, you must call the Settings.saveAsync method to persist settings in the document.
    remarks: |-
      **Набор требований**: [Параметры](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#settings)

      Метод Set создает новое значение указанного имени, если оно еще не существует, или задает существующее значение указанного имени в копии контейнера свойств параметров в памяти. После вызова метода Settings.saveAsync значение сохраняется в документе в виде сериализованного JSON-представления своего типа данных. Максимальный размер параметров для каждой надстройки составляет 2 МБ.

      #### <a name="examples"></a>Примеры

      ```javascript
      function setMySetting() {
          Office.context.document.settings.set('mySetting', 'mySetting value');
      }
      ```
    name: 'set(name, value)'
    fullName: 'set(name, value)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'set(name: string, value: any): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: name
          description: ''
          type:
            - string
        - id: value
          description: Задает сохраняемое значение.
          type:
            - any