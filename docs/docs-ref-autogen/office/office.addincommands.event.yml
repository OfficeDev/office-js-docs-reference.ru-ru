### YamlMime:UniversalReference
items:
  - uid: office.Office.AddinCommands.Event
    summary: '<span data-ttu-id="cd9f2-101">Объект Event передается в качестве параметра функциям надстроек, вызываемым кнопками команд без пользовательского интерфейса.</span><span class="sxs-lookup"><span data-stu-id="cd9f2-101">The event object is passed as a parameter to add-in functions invoked by UI-less command buttons.</span></span> <span data-ttu-id="cd9f2-102">Этот объект позволяет надстройке определить нажатую кнопку и уведомить узел о завершении обработки.</span><span class="sxs-lookup"><span data-stu-id="cd9f2-102">The object allows the add-in to identify which button was clicked and to signal the host that it has completed its processing.</span></span>'
    remarks: |-
      <span data-ttu-id="cd9f2-103">Для получения дополнительных сведений о поддержке обратитесь к разделу [наборы требований для команд надстройки](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/add-in-commands-requirement-sets) .</span><span class="sxs-lookup"><span data-stu-id="cd9f2-103">See [Add-in commands requirement sets](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/add-in-commands-requirement-sets) for more support information.</span></span>

      <span data-ttu-id="cd9f2-104">\*\* [Минимальный уровень](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->разрешений**: ограниченный \*\* [режим](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->Outlook**: создание или чтение</span><span class="sxs-lookup"><span data-stu-id="cd9f2-104">**[Minimum permission level](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->**: Restricted **[Applicable Outlook mode](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->**: Compose or Read</span></span>
    name: Office.AddinCommands.Event
    fullName: Office.AddinCommands.Event
    langs:
      - typeScript
    type: interface
    package: office
    children:
      - office.Office.AddinCommands.Event.completed
      - office.Office.AddinCommands.Event.source
  - uid: office.Office.AddinCommands.Event.completed
    summary: |-
      <span data-ttu-id="cd9f2-105">Указывает на то, что надстройка завершила обработку, активированную с помощью кнопки надстройки или обработчика события.</span><span class="sxs-lookup"><span data-stu-id="cd9f2-105">Indicates that the add-in has completed processing that was triggered by an add-in command button or event handler.</span></span>

      <span data-ttu-id="cd9f2-106">Этот метод должен вызываться в конце функции, которая была вызвана командой надстройки, определенной с помощью элемента Action, для атрибута xsi: Type задано значение ExecuteFunction.</span><span class="sxs-lookup"><span data-stu-id="cd9f2-106">This method must be called at the end of a function which was invoked by an add-in command defined with an Action element with an xsi:type attribute set to ExecuteFunction.</span></span> <span data-ttu-id="cd9f2-107">При вызове этого метода клиент узла узнает, что функция завершена и что он может очистить любое состояние, связанное с вызовом функции.</span><span class="sxs-lookup"><span data-stu-id="cd9f2-107">Calling this method signals the host client that the function is complete and that it can clean up any state involved with invoking the function.</span></span> <span data-ttu-id="cd9f2-108">Например, если пользователь закроет Outlook до вызова этого метода, Outlook предупредит его, что функция по-прежнему выполняется.</span><span class="sxs-lookup"><span data-stu-id="cd9f2-108">For example, if the user closes Outlook before this method is called, Outlook will warn that a function is still executing.</span></span>

      <span data-ttu-id="cd9f2-109">Этот метод необходимо вызывать в обработчике событий, добавленном с помощью метода Office.context.mailbox.addHandlerAsync, по завершении обработки события.</span><span class="sxs-lookup"><span data-stu-id="cd9f2-109">This method must be called in an event handler added via Office.context.mailbox.addHandlerAsync after completing processing of the event.</span></span>

      <span data-ttu-id="cd9f2-110">\[[Набор API: Mailbox 1,3](/office/dev/add-ins/reference/javascript-api-for-office)\]</span><span class="sxs-lookup"><span data-stu-id="cd9f2-110">\[ [API set: Mailbox 1.3](/office/dev/add-ins/reference/javascript-api-for-office) \]</span></span>
    remarks: |-
      <span data-ttu-id="cd9f2-111">\*\* [Минимальный уровень](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->разрешений**: ограниченный \*\* [режим](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->Outlook**: создание или чтение</span><span class="sxs-lookup"><span data-stu-id="cd9f2-111">**[Minimum permission level](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->**: Restricted **[Applicable Outlook mode](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->**: Compose or Read</span></span>

      <span data-ttu-id="cd9f2-112">В почтовом ящике 1,3 `options` нет параметра, в то время как предварительный просмотр почтового ящика поддерживает `options` параметр.</span><span class="sxs-lookup"><span data-stu-id="cd9f2-112">Mailbox 1.3 does not have the `options` parameter while Mailbox Preview does have support for `options` parameter.</span></span>

      #### <a name="examples"></a><span data-ttu-id="cd9f2-113">Примеры</span><span class="sxs-lookup"><span data-stu-id="cd9f2-113">Examples</span></span>

      ```javascript
      function processItem (event) {
          // Do some processing

          event.completed();
      }

      // In the following example, the checkMessage function has
      // been registered as an event handler for ItemSend.
      function checkMessage(event) {
          // Get the item being sent
          var outgoingMsg = Office.context.mailbox.item;

          // Check if subject contains "BLOCK"
          outgoingMsg.subject.getAsync(function (result) {
              // Subject is in result.value
              if (result.value.indexOf('BLOCK') != -1) {
                  // Value is found, stop send
                  event.completed({allowEvent = false});
              } else {
                  // Value wasn't found, allow send
                  event.completed({allowEvent = true});
              }
          });
      }
      ```
    name: completed(options)
    fullName: completed(options)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'completed(options?: EventCompletedOptions): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: options
          description: '<span data-ttu-id="cd9f2-114">Необязательно.</span><span class="sxs-lookup"><span data-stu-id="cd9f2-114">Optional.</span></span> <span data-ttu-id="cd9f2-115">Объект, определяющий параметры поведения при завершении события.</span><span class="sxs-lookup"><span data-stu-id="cd9f2-115">An object that specifies behavior options for when the event is completed.</span></span>'
          type:
            - office.Office.AddinCommands.EventCompletedOptions
  - uid: office.Office.AddinCommands.Event.source
    summary: '<span data-ttu-id="cd9f2-116">Сведения об элементе управления, который инициировал вызов этой функции.</span><span class="sxs-lookup"><span data-stu-id="cd9f2-116">Information about the control that triggered calling this function.</span></span>'
    remarks: |-
      <span data-ttu-id="cd9f2-117">Это свойство поддерживается только в Outlook в [наборе](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets) обязательных элементов почтовых ящиков 1,3 и более поздних версий.</span><span class="sxs-lookup"><span data-stu-id="cd9f2-117">This property is only supported in Outlook in [requirement set](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets) Mailbox 1.3 and later.</span></span>

      #### <a name="examples"></a><span data-ttu-id="cd9f2-118">Примеры</span><span class="sxs-lookup"><span data-stu-id="cd9f2-118">Examples</span></span>

      ```javascript
      // In this example, consider a button defined in an add-in manifest as follows:
      //<Control xsi:type="Button" id="eventTestButton">
      //    <Label resid="eventButtonLabel" />
      //    <Tooltip resid="eventButtonTooltip" />
      //    <Supertip>
      //        <Title resid="eventSuperTipTitle" />
      //        <Description resid="eventSuperTipDescription" />
      //    </Supertip>
      //    <Icon>
      //        <bt:Image size="16" resid="blue-icon-16" />
      //        <bt:Image size="32" resid="blue-icon-32" />
      //        <bt:Image size="80" resid="blue-icon-80" />
      //    </Icon>
      //    <Action xsi:type="ExecuteFunction">
      //        <FunctionName>testEventObject</FunctionName>
      //    </Action>
      //</Control>

      // The button has an id attribute set to eventTestButton, and will invoke
      // the testEventObject function defined in the add-in.
      // That function looks like this:
      function testEventObject(event) {
          // The event object implements the Event interface.

          // This value will be "eventTestButton".
          var buttonId = event.source.id;

          // Signal to the host app that processing is complete.
          event.completed();
      }
      ```
      ```javascript
      // Function is used by two buttons:
      // button1 and button2
      function multiButton (event) {
          // Check which button was clicked.
          var buttonId = event.source.id;

          if (buttonId === 'button1') {
              doButton1Action();
          } else {
              doButton2Action();
          }

          event.completed();
      }
      ```
    name: source
    fullName: source
    langs:
      - typeScript
    type: property
    syntax:
      content: 'source:Source;'
      return:
        type:
          - office.Office.AddinCommands.Source