### YamlMime:UniversalReference
ms.openlocfilehash: ba7e8d8b1e7b4afc784463798ff695d4fabab33c
ms.sourcegitcommit: 262b7c417245b7b61a57d53eee33a477a722ca6e
ms.translationtype: MT
ms.contentlocale: ru-RU
ms.lasthandoff: 09/28/2018
ms.locfileid: "24051903"
items:
- uid: office.Office.CustomXmlPart
  summary: <span data-ttu-id="587b3-101">Представляет один элемент CustomXMLPart в коллекции [Office.CustomXmlParts](xref:office.Office.CustomXmlParts) .</span><span class="sxs-lookup"><span data-stu-id="587b3-101">Represents a single CustomXMLPart in an [Office.CustomXmlParts](xref:office.Office.CustomXmlParts) collection.</span></span>
  remarks: >-
    <table><tr><td><span data-ttu-id="587b3-102">Наборы требований</span><span class="sxs-lookup"><span data-stu-id="587b3-102">Requirement Sets</span></span></td><td><span data-ttu-id="587b3-103">CustomXmlParts</span><span class="sxs-lookup"><span data-stu-id="587b3-103">CustomXmlParts</span></span></td></tr></table>


    <span data-ttu-id="587b3-104">**Сведения о поддержке**</span><span class="sxs-lookup"><span data-stu-id="587b3-104">**Support details**</span></span>


    <span data-ttu-id="587b3-105">Прописная Y в следующих матрицы указывает, что этот интерфейс поддерживается в соответствующем ведущего приложения Office.</span><span class="sxs-lookup"><span data-stu-id="587b3-105">A capital Y in the following matrix indicates that this interface is supported in the corresponding Office host application.</span></span> <span data-ttu-id="587b3-106">Пустая ячейка указывает, что ведущего приложения Office не поддерживает этот интерфейс.</span><span class="sxs-lookup"><span data-stu-id="587b3-106">An empty cell indicates that the Office host application doesn't support this interface.</span></span>


    <span data-ttu-id="587b3-107">Дополнительные сведения о требованиях к приложения и сервера узла Office можно [требования для запуска надстроек Office](https://docs.microsoft.com/office/dev/add-ins/concepts/requirements-for-running-office-add-ins)<!-- -->.</span><span class="sxs-lookup"><span data-stu-id="587b3-107">For more information about Office host application and server requirements, see [Requirements for running Office Add-ins](https://docs.microsoft.com/office/dev/add-ins/concepts/requirements-for-running-office-add-ins)<!-- -->.</span></span>


    <span data-ttu-id="587b3-108">*Поддерживаемые ведущие приложения на разных платформах*</span><span class="sxs-lookup"><span data-stu-id="587b3-108">*Supported hosts, by platform*</span></span> <table> <tr><th> </th><th> <span data-ttu-id="587b3-109">Office для компьютера с Windows</span><span class="sxs-lookup"><span data-stu-id="587b3-109">Office for Windows desktop</span></span> </th><th> <span data-ttu-id="587b3-110">Office Online (в браузере)</span><span class="sxs-lookup"><span data-stu-id="587b3-110">Office Online (in browser)</span></span> </th><th> <span data-ttu-id="587b3-111">Office для iPad</span><span class="sxs-lookup"><span data-stu-id="587b3-111">Office for iPad</span></span> </th></tr> <tr><td><span data-ttu-id="587b3-112"><strong>Word</strong></span><span class="sxs-lookup"><span data-stu-id="587b3-112"><strong> Word </strong></span></span></td><td> <span data-ttu-id="587b3-113">Да</span><span class="sxs-lookup"><span data-stu-id="587b3-113">Y</span></span> </td><td> <span data-ttu-id="587b3-114">Да</span><span class="sxs-lookup"><span data-stu-id="587b3-114">Y</span></span> </td><td> <span data-ttu-id="587b3-115">Да</span><span class="sxs-lookup"><span data-stu-id="587b3-115">Y</span></span> </td></tr> </table>
  name: Office.CustomXmlPart
  fullName: office.Office.CustomXmlPart
  langs:
  - typeScript
  type: interface
  package: office
  children:
  - office.Office.CustomXmlPart.addHandlerAsync
  - office.Office.CustomXmlPart.builtIn
  - office.Office.CustomXmlPart.deleteAsync
  - office.Office.CustomXmlPart.getNodesAsync
  - office.Office.CustomXmlPart.getXmlAsync
  - office.Office.CustomXmlPart.id
  - office.Office.CustomXmlPart.namespaceManager
  - office.Office.CustomXmlPart.removeHandlerAsync
- uid: office.Office.CustomXmlPart.addHandlerAsync
  summary: <span data-ttu-id="587b3-116">Добавляет обработчик событий для объекта, с помощью указанного типа события.</span><span class="sxs-lookup"><span data-stu-id="587b3-116">Adds an event handler to the object using the specified event type.</span></span>
  remarks: >-
    <span data-ttu-id="587b3-117">Можно добавить несколько обработчиков событий для указанного объекта eventType, поскольку имя каждой функции обработчика событий является уникальным.</span><span class="sxs-lookup"><span data-stu-id="587b3-117">You can add multiple event handlers for the specified eventType as long as the name of each event handler function is unique.</span></span>

    #### <a name="examples"></a><span data-ttu-id="587b3-118">Примеры</span><span class="sxs-lookup"><span data-stu-id="587b3-118">Examples</span></span>


    ```javascript

    // To add an event handler for the NodeDeleted event, use the addHandlerAsync method of the CustomXmlPart object.

    function addNodeDeletedEvent() {
        Office.context.document.customXmlParts.getByIdAsync(
            "{3BC85265-09D6-4205-B665-8EB239A8B9A1}", function (result) {
            var xmlPart = result.value;
            xmlPart.addHandlerAsync(Office.EventType.NodeDeleted, function (eventArgs) {
                write("A node has been deleted.");
            });
        });
    }

    // Function that writes to a div with id='message' on the page.

    function write(message){
        document.getElementById('message').innerText += message;
    }

    ```

    ```javascript

    // To add an event handler for the NodeInserted event, use the addHandlerAsync method of the CustomXmlPart object.

    function addNodeInsertedEvent() {
        Office.context.document.customXmlParts.getByIdAsync(
            "{3BC85265-09D6-4205-B665-8EB239A8B9A1}", function (result) {
            var xmlPart = result.value;
            xmlPart.addHandlerAsync(Office.EventType.NodeInserted, function (eventArgs) {
                write("A node has been inserted.");
            });
        });
    }

    // Function that writes to a div with id='message' on the page.

    function write(message){
        document.getElementById('message').innerText += message;
    }

    ```

    ```javascript

    // To add an event handler for the NodeReplaced event, use the addHandlerAsync method of the CustomXmlPart object.

    function addNodeReplacedEvent() {
        Office.context.document.customXmlParts.getByIdAsync(
            "{3BC85265-09D6-4205-B665-8EB239A8B9A1}", function (result) {
            var xmlPart = result.value;
            xmlPart.addHandlerAsync(Office.EventType.NodeReplaced, function (eventArgs) {
                write("A node has been replaced.");
            });
        });
    }

    // Function that writes to a div with id='message' on the page.

    function write(message){
        document.getElementById('message').innerText += message;
    }

    ```
  name: addHandlerAsync(eventType, handler, options, callback)
  fullName: office.Office.CustomXmlPart.addHandlerAsync
  langs:
  - typeScript
  type: method
  syntax:
    content: 'addHandlerAsync(eventType: Office.EventType, handler: (result: any) => void, options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<void>) => void): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: eventType
      description: <span data-ttu-id="587b3-119">Указывает тип события, чтобы добавить.</span><span class="sxs-lookup"><span data-stu-id="587b3-119">Specifies the type of event to add.</span></span> <span data-ttu-id="587b3-120">Для объекта CustomXmlPart параметру eventType могут быть присвоены как `Office.EventType.NodeDeleted`, `Office.EventType.NodeInserted`, и `Office.EventType.NodeReplaced`.</span><span class="sxs-lookup"><span data-stu-id="587b3-120">For a CustomXmlPart object, the eventType parameter can be specified as `Office.EventType.NodeDeleted`, `Office.EventType.NodeInserted`, and `Office.EventType.NodeReplaced`.</span></span>
      type:
      - Office.EventType
    - id: handler
      description: <span data-ttu-id="587b3-121">Функцию обработчика событий для добавления, единственный параметр которой имеет тип[Office.NodeDeletedEventArgs](xref:office.Office.NodeDeletedEventArgs)<!-- -->, [Office.NodeInsertedEventArgs](xref:office.Office.NodeInsertedEventArgs)<!-- -->, или [Office.NodeReplacedEventArgs](xref:office.Office.NodeReplacedEventArgs)</span><span class="sxs-lookup"><span data-stu-id="587b3-121">The event handler function to add, whose only parameter is of type[Office.NodeDeletedEventArgs](xref:office.Office.NodeDeletedEventArgs)<!-- -->, [Office.NodeInsertedEventArgs](xref:office.Office.NodeInsertedEventArgs)<!-- -->, or [Office.NodeReplacedEventArgs](xref:office.Office.NodeReplacedEventArgs)</span></span>
      type:
      - '(result: any) => void'
    - id: options
      description: <span data-ttu-id="587b3-122">Предоставляет возможность сохранения данных контекста любого типа, без изменений, для использования в функции обратного вызова.</span><span class="sxs-lookup"><span data-stu-id="587b3-122">Provides an option for preserving context data of any type, unchanged, for use in a callback.</span></span>
      type:
      - office.Office.AsyncContextOptions
    - id: callback
      description: <span data-ttu-id="587b3-123">Необязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="587b3-123">Optional.</span></span> <span data-ttu-id="587b3-124">Функция, вызываемая при возвращении обратного вызова, единственный параметр которой имеет тип[Office.AsyncResult](xref:office.Office.AsyncResult)<!-- -->.</span><span class="sxs-lookup"><span data-stu-id="587b3-124">A function that is invoked when the callback returns, whose only parameter is of type[Office.AsyncResult](xref:office.Office.AsyncResult)<!-- -->.</span></span>
      type:
      - '(result: AsyncResult<void>) => void'
- uid: office.Office.CustomXmlPart.builtIn
  summary: <span data-ttu-id="587b3-125">Значение true, если сборка пользовательской XML-части в; в противном случае — false.</span><span class="sxs-lookup"><span data-stu-id="587b3-125">True, if the custom XML part is built in; otherwise false.</span></span>
  name: builtIn
  fullName: office.Office.CustomXmlPart.builtIn
  langs:
  - typeScript
  type: property
  syntax:
    content: 'builtIn: boolean;'
    return:
      type:
      - boolean
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"587b3-126\">Примеры</span><span class=\"sxs-lookup\"><span data-stu-id=\"587b3-126\">Examples</span></span>\n\n```javascript\nfunction showXMLPartBuiltIn() {\n    Office.context.document.customXmlParts.getByIdAsync(\n        \"{3BC85265-09D6-4205-B665-8EB239A8B9A1}\", function (result) {\n        var xmlPart = result.value;\n        write(xmlPart.builtIn);\n    });\n}\n\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n```"
- uid: office.Office.CustomXmlPart.deleteAsync
  summary: <span data-ttu-id="587b3-127">Удаление пользовательской XML-части.</span><span class="sxs-lookup"><span data-stu-id="587b3-127">Deletes the Custom XML Part.</span></span>
  name: deleteAsync(options, callback)
  fullName: office.Office.CustomXmlPart.deleteAsync
  langs:
  - typeScript
  type: method
  syntax:
    content: 'deleteAsync(options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<void>) => void): void;'
    return:
      type:
      - void
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"587b3-128\">Примеры</span><span class=\"sxs-lookup\"><span data-stu-id=\"587b3-128\">Examples</span></span>\n\n```javascript\nfunction deleteXMLPart() {\n    Office.context.document.customXmlParts.getByIdAsync(\n        \"{3BC85265-09D6-4205-B665-8EB239A8B9A1}\", function (result) {\n        var xmlPart = result.value;\n        xmlPart.deleteAsync(function (eventArgs) {\n            write(\"The XML Part has been deleted.\");\n        });\n    });\n}\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n```"
    parameters:
    - id: options
      description: <span data-ttu-id="587b3-129">Предоставляет возможность сохранения данных контекста любого типа, без изменений, для использования в функции обратного вызова.</span><span class="sxs-lookup"><span data-stu-id="587b3-129">Provides an option for preserving context data of any type, unchanged, for use in a callback.</span></span>
      type:
      - office.Office.AsyncContextOptions
    - id: callback
      description: <span data-ttu-id="587b3-130">Необязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="587b3-130">Optional.</span></span> <span data-ttu-id="587b3-131">Функция, вызываемая при возвращении обратного вызова, единственный параметр которой имеет тип[Office.AsyncResult](xref:office.Office.AsyncResult)<!-- -->.</span><span class="sxs-lookup"><span data-stu-id="587b3-131">A function that is invoked when the callback returns, whose only parameter is of type[Office.AsyncResult](xref:office.Office.AsyncResult)<!-- -->.</span></span>
      type:
      - '(result: AsyncResult<void>) => void'
- uid: office.Office.CustomXmlPart.getNodesAsync
  summary: <span data-ttu-id="587b3-132">Асинхронно получает все объекты CustomXmlNode в настраиваемой XML-части, соответствующие указанному параметру XPath.</span><span class="sxs-lookup"><span data-stu-id="587b3-132">Asynchronously gets any CustomXmlNodes in this custom XML part which match the specified XPath.</span></span>
  name: getNodesAsync(xPath, options, callback)
  fullName: office.Office.CustomXmlPart.getNodesAsync
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getNodesAsync(xPath: string, options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<CustomXmlNode[]>) => void): void;'
    return:
      type:
      - void
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"587b3-133\">Примеры</span><span class=\"sxs-lookup\"><span data-stu-id=\"587b3-133\">Examples</span></span>\n\n```javascript\nfunction showXmlNodeType() {\n    Office.context.document.customXmlParts.getByIdAsync(\n        \"{3BC85265-09D6-4205-B665-8EB239A8B9A1}\", function (result) {\n        var xmlPart = result.value;\n        xmlPart.getNodesAsync('*/*', function (nodeResults) {\n            for (i = 0; i < nodeResults.value.length; i++) {\n                var node = nodeResults.value[i];\n                write(node.nodeType);\n            }\n        });\n    });\n}\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n```"
    parameters:
    - id: xPath
      description: <span data-ttu-id="587b3-p105">Выражение XPath, определяющее возвращаемые узлы. Обязательный.</span><span class="sxs-lookup"><span data-stu-id="587b3-p105">An XPath expression that specifies the nodes you want returned. Required.</span></span>
      type:
      - string
    - id: options
      description: <span data-ttu-id="587b3-136">Предоставляет возможность сохранения данных контекста любого типа, без изменений, для использования в функции обратного вызова.</span><span class="sxs-lookup"><span data-stu-id="587b3-136">Provides an option for preserving context data of any type, unchanged, for use in a callback.</span></span>
      type:
      - office.Office.AsyncContextOptions
    - id: callback
      description: <span data-ttu-id="587b3-137">Необязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="587b3-137">Optional.</span></span> <span data-ttu-id="587b3-138">Функция, вызываемая при возвращении обратного вызова, единственный параметр которой имеет тип[Office.AsyncResult](xref:office.Office.AsyncResult)<!-- -->.</span><span class="sxs-lookup"><span data-stu-id="587b3-138">A function that is invoked when the callback returns, whose only parameter is of type[Office.AsyncResult](xref:office.Office.AsyncResult)<!-- -->.</span></span> <span data-ttu-id="587b3-139">`value` Свойства результата представляет собой массив объектов CustomXmlNode, представляющих узлы, указанные выражением XPath, переданной в параметр xPath.</span><span class="sxs-lookup"><span data-stu-id="587b3-139">The `value` property of the result is an array of CustomXmlNode objects that represent the nodes specified by the XPath expression passed to the xPath parameter.</span></span>
      type:
      - '(result: AsyncResult<CustomXmlNode[]>) => void'
- uid: office.Office.CustomXmlPart.getXmlAsync
  summary: <span data-ttu-id="587b3-140">Асинхронно получает XML внутри настраиваемой XML-части.</span><span class="sxs-lookup"><span data-stu-id="587b3-140">Asynchronously gets the XML inside this custom XML part.</span></span>
  name: getXmlAsync(options, callback)
  fullName: office.Office.CustomXmlPart.getXmlAsync
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getXmlAsync(options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<string>) => void): void;'
    return:
      type:
      - void
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"587b3-141\">Примеры</span><span class=\"sxs-lookup\"><span data-stu-id=\"587b3-141\">Examples</span></span>\n\n```javascript\nfunction showXMLPartInnerXML() {\n    Office.context.document.customXmlParts.getByIdAsync(\n        \"{3BC85265-09D6-4205-B665-8EB239A8B9A1}\", function (result) {\n        var xmlPart = result.value;\n        xmlPart.getXmlAsync({}, function (eventArgs) {\n            write(eventArgs.value);\n        });\n    });\n}\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n```"
    parameters:
    - id: options
      description: <span data-ttu-id="587b3-142">Предоставляет возможность сохранения данных контекста любого типа, без изменений, для использования в функции обратного вызова.</span><span class="sxs-lookup"><span data-stu-id="587b3-142">Provides an option for preserving context data of any type, unchanged, for use in a callback.</span></span>
      type:
      - office.Office.AsyncContextOptions
    - id: callback
      description: <span data-ttu-id="587b3-143">Необязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="587b3-143">Optional.</span></span> <span data-ttu-id="587b3-144">Функция, вызываемая при возвращении обратного вызова, единственный параметр которой имеет тип[Office.AsyncResult](xref:office.Office.AsyncResult)<!-- -->.</span><span class="sxs-lookup"><span data-stu-id="587b3-144">A function that is invoked when the callback returns, whose only parameter is of type[Office.AsyncResult](xref:office.Office.AsyncResult)<!-- -->.</span></span> <span data-ttu-id="587b3-145">`value` Свойства результата — это строка, содержащая XML указанного объекта CustomXmlPart.</span><span class="sxs-lookup"><span data-stu-id="587b3-145">The `value` property of the result is a string that contains the XML of the referenced CustomXmlPart object.</span></span>
      type:
      - '(result: AsyncResult<string>) => void'
- uid: office.Office.CustomXmlPart.id
  summary: <span data-ttu-id="587b3-146">Получает GUID объекта CustomXMLPart.</span><span class="sxs-lookup"><span data-stu-id="587b3-146">Gets the GUID of the CustomXMLPart.</span></span>
  name: id
  fullName: office.Office.CustomXmlPart.id
  langs:
  - typeScript
  type: property
  syntax:
    content: 'id: string;'
    return:
      type:
      - string
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"587b3-147\">Примеры</span><span class=\"sxs-lookup\"><span data-stu-id=\"587b3-147\">Examples</span></span>\n\n```javascript\nfunction showXMLPartBuiltId() {\n    Office.context.document.customXmlParts.getByIdAsync(\n        \"{3BC85265-09D6-4205-B665-8EB239A8B9A1}\", function (result) {\n        var xmlPart = result.value;\n        write(xmlPart.id);\n    });\n}\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n```"
- uid: office.Office.CustomXmlPart.namespaceManager
  summary: <span data-ttu-id="587b3-148">Получает или задает пространство имен сопоставлений префиксов ([Office.CustomXmlPrefixMappings](xref:office.Office.CustomXmlPrefixMappings)<!-- -->) используется для текущего объекта CustomXmlPart.</span><span class="sxs-lookup"><span data-stu-id="587b3-148">Gets the set of namespace prefix mappings ([Office.CustomXmlPrefixMappings](xref:office.Office.CustomXmlPrefixMappings)<!-- -->) used against the current CustomXmlPart.</span></span>
  name: namespaceManager
  fullName: office.Office.CustomXmlPart.namespaceManager
  langs:
  - typeScript
  type: property
  syntax:
    content: 'namespaceManager: CustomXmlPrefixMappings;'
    return:
      type:
      - office.Office.CustomXmlPrefixMappings
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"587b3-149\">Примеры</span><span class=\"sxs-lookup\"><span data-stu-id=\"587b3-149\">Examples</span></span>\n\n```javascript\nfunction setXMLPartNamespaceManagerNamespace() {\n    Office.context.document.customXmlParts.getByIdAsync(\n        \"{3BC85265-09D6-4205-B665-8EB239A8B9A1}\", function (result) {\n        var xmlPart = result.value;\n        xmlPart.namespaceManager.addNamespaceAsync(\"myPrefix\", \"myNamespace\");\n    });\n}\n```"
- uid: office.Office.CustomXmlPart.removeHandlerAsync
  summary: <span data-ttu-id="587b3-150">Удаляет обработчик событий для указанного типа события.</span><span class="sxs-lookup"><span data-stu-id="587b3-150">Removes an event handler for the specified event type.</span></span>
  name: removeHandlerAsync(eventType, handler, options, callback)
  fullName: office.Office.CustomXmlPart.removeHandlerAsync
  langs:
  - typeScript
  type: method
  syntax:
    content: 'removeHandlerAsync(eventType: Office.EventType, handler?: (result: any) => void, options?: RemoveHandlerOptions, callback?: (result: AsyncResult<void>) => void): void;'
    return:
      type:
      - void
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"587b3-151\">Примеры</span><span class=\"sxs-lookup\"><span data-stu-id=\"587b3-151\">Examples</span></span>\n\n```javascript\nfunction removeNodeInsertedEventHandler() {\n    Office.context.document.customXmlParts.getByIdAsync(\n        \"{3BC85265-09D6-4205-B665-8EB239A8B9A1}\",\n        function (result) {\n            var xmlPart = result.value;\n            xmlPart.removeHandlerAsync(Office.EventType.DataNodeInserted, {handler:myHandler});\n    });\n}\n```"
    parameters:
    - id: eventType
      description: <span data-ttu-id="587b3-152">Указывает тип события для удаления.</span><span class="sxs-lookup"><span data-stu-id="587b3-152">Specifies the type of event to remove.</span></span> <span data-ttu-id="587b3-153">Для объекта CustomXmlPart параметру eventType могут быть присвоены как `Office.EventType.NodeDeleted`, `Office.EventType.NodeInserted`, и `Office.EventType.NodeReplaced`.</span><span class="sxs-lookup"><span data-stu-id="587b3-153">For a CustomXmlPart object, the eventType parameter can be specified as `Office.EventType.NodeDeleted`, `Office.EventType.NodeInserted`, and `Office.EventType.NodeReplaced`.</span></span>
      type:
      - Office.EventType
    - id: handler
      description: <span data-ttu-id="587b3-154">Имя обработчик для удаления.</span><span class="sxs-lookup"><span data-stu-id="587b3-154">The name of the handler to remove.</span></span>
      type:
      - '(result: any) => void'
    - id: options
      description: <span data-ttu-id="587b3-155">Содержит параметры, чтобы определить, какой обработчик событий или обработчики удаляются.</span><span class="sxs-lookup"><span data-stu-id="587b3-155">Provides options to determine which event handler or handlers are removed.</span></span>
      type:
      - office.Office.RemoveHandlerOptions
    - id: callback
      description: <span data-ttu-id="587b3-156">Необязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="587b3-156">Optional.</span></span> <span data-ttu-id="587b3-157">Функция, вызываемая при возвращении обратного вызова, единственный параметр которой имеет тип[Office.AsyncResult](xref:office.Office.AsyncResult)<!-- -->.</span><span class="sxs-lookup"><span data-stu-id="587b3-157">A function that is invoked when the callback returns, whose only parameter is of type[Office.AsyncResult](xref:office.Office.AsyncResult)<!-- -->.</span></span>
      type:
      - '(result: AsyncResult<void>) => void'
