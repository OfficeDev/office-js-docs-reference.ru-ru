### YamlMime:TSType
name: OfficeExtension.LoadOption
uid: office!OfficeExtension.LoadOption:interface
package: office!
fullName: OfficeExtension.LoadOption
summary: Указывает, какие свойства объекта должны загружаться. Эта загрузка происходит при выполнении метода Sync (). Это синхронизирует состояния между объектами Office и соответствующими прокси-объектами JavaScript.
remarks: >-
  Для Word предпочтительным способом указания свойств и сведений о разбиении на страницы является использование строкового литерала. В первых двух примерах показан предпочтительный способ запроса свойств размера текста и шрифта для абзацев в коллекции абзацев:


  `context.load(paragraphs, 'text, font/size');`


  `paragraphs.load('text, font/size');`


  Вот аналогичный пример с использованием нотации объектов (включающий подкачку):


  `context.load(paragraphs, {select: 'text, font/size', expand: 'font', top: 50, skip: 0});`


  `paragraphs.load({select: 'text, font/size', expand: 'font', top: 50, skip: 0});`


  Обратите внимание, что если не задать определенные свойства объекта шрифта в инструкцию select, инструкция expand сама по себе означает, что загружаются все свойства шрифта.


  #### <a name="examples"></a>Примеры


  ```javascript

  // This example shows how to get the paragraphs in the Word document

  // along with their text and font size properties.


  // Run a batch operation against the Word object model.

  Word.run(function (context) {
      // Create a proxy object for the paragraphs collection.
      var paragraphs = context.document.body.paragraphs;

      // Queue a commmand to load the text and font properties.
      // It is best practice to always specify the property set.
      // Otherwise, all properties are returned on the object.
      context.load(paragraphs, 'text, font/size');

      // Synchronize the document state by executing the queued commands,
      // and return a promise to indicate task completion.
      return context.sync().then(function () {
          // Insert code that works with the paragraphs loaded by context.load().
      })
  })

  .catch(function (error) {
      console.log('Error: ' + JSON.stringify(error));
      if (error instanceof OfficeExtension.Error) {
          console.log('Debug info: ' + JSON.stringify(error.debugInfo));
      }
  });

  ```
isPreview: false
isDeprecated: false
type: interface
properties:
- name: expand
  uid: office!OfficeExtension.LoadOption#expand:member
  package: office!
  fullName: expand
  summary: Разделенная запятыми строка или массив строк, указывающая свойства навигации, которые необходимо загрузить.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'expand?: string | string[];'
    return:
      type: string | string[]
- name: select
  uid: office!OfficeExtension.LoadOption#select:member
  package: office!
  fullName: select
  summary: Строка, разделенная запятыми, или массив строк, указывающая свойства для загрузки.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'select?: string | string[];'
    return:
      type: string | string[]
- name: skip
  uid: office!OfficeExtension.LoadOption#skip:member
  package: office!
  fullName: skip
  summary: Можно использовать только для типов коллекций. Указывает количество элементов в коллекции, которые должны быть пропущены и не включены в результат. Если указан параметр Top, результирующий набор начнется после пропуска указанного числа элементов.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'skip?: number;'
    return:
      type: number
- name: top
  uid: office!OfficeExtension.LoadOption#top:member
  package: office!
  fullName: top
  summary: Можно использовать только для типов коллекций. Указывает максимальное число элементов в коллекции, которые можно включить в результат.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'top?: number;'
    return:
      type: number
      description: "\n\n#### <a name=\"examples\"></a>Примеры\n\n```javascript\n// This OneNote example shows how to get the page title and indentation level\n// of the top five pages in the current section.\nOneNote.run(function (context) {\n    // Get the pages in the current section.\n    var pages = context.application.getActiveSection().pages;\n\n    // Queue a command to load the pages.           \n    pages.load({ \"select\":\"title,pageLevel\", \"top\":5, \"skip\":0 });\n    return context.sync()\n        .then(function() {\n            // Iterate through the collection of pages.    \n            $.each(pages.items, function(index, page) {\n                // Show some properties.\n                console.log(\"Page title: \" + page.title);\n                console.log(\"Indentation level: \" + page.pageLevel);\n            });\n        }).catch(function(error) {\n            console.log(\"Error: \" + error);\n            if (error instanceof OfficeExtension.Error) {\n                console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n            }\n        })\n    });\n```"
metadata:
  ms.openlocfilehash: 293c68d45ae2d6fb3d4e8d8e2bdb9db0641b769e
  ms.sourcegitcommit: 3bab97ab3b91da7cca497f6fc895408a76bd8b46
  ms.translationtype: MT
  ms.contentlocale: ru-RU
  ms.lasthandoff: 11/18/2020
  ms.locfileid: "49136822"
