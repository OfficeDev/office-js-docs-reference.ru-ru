### YamlMime:TSType
name: Office.Document
uid: office!Office.Document:interface
package: office!
fullName: Office.Document
summary: Абстрактный класс, представляющий документ, с которым взаимодействует надстройка.
remarks: '**Hosts**: Excel, PowerPoint, Project, Word'
isPreview: false
isDeprecated: false
type: interface
properties:
- name: bindings
  uid: office!Office.Document#bindings:member
  package: office!
  fullName: bindings
  summary: Получает объект, предоставляющий доступ к привязкам, определенным в документе.
  remarks: "Вы не создаете экземпляр объекта Document непосредственно в вашем скрипте. Чтобы вызвать элементы объекта Document для взаимодействия с текущим документом или листом, используйте объект `Office.context.document`.\n\n#### <a name=\"examples\"></a>Примеры\n\n```javascript\nfunction displayAllBindings() {\n    Office.context.document.bindings.getAllAsync(function (asyncResult) {\n        var bindingString = '';\n        for (var i in asyncResult.value) {\n            bindingString += asyncResult.value[i].id + '\\n';\n        }\n        write('Existing bindings: ' + bindingString);\n    });\n}\n\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n```"
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'bindings: Bindings;'
    return:
      type: <xref uid="office!Office.Bindings:interface" />
- name: customXmlParts
  uid: office!Office.Document#customXmlParts:member
  package: office!
  fullName: customXmlParts
  summary: Получает объект, представляющий настраиваемые XML-части в документе.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'customXmlParts: CustomXmlParts;'
    return:
      type: <xref uid="office!Office.CustomXmlParts:interface" />
      description: "\n\n#### <a name=\"examples\"></a>Примеры\n\n```javascript\nfunction getCustomXmlParts(){\n    Office.context.document.customXmlParts.getByNamespaceAsync('http://tempuri.org', function (asyncResult) {\n        write('Retrieved ' + asyncResult.value.length + ' custom XML parts');\n    });\n}\n\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n```"
- name: mode
  uid: office!Office.Document#mode:member
  package: office!
  fullName: mode
  summary: Получает режим, в котором находится документ.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'mode: DocumentMode;'
    return:
      type: <xref uid="office!Office.DocumentMode:enum" />
      description: "\n\n#### <a name=\"examples\"></a>Примеры\n\n```javascript\nfunction displayDocumentMode() {\n    write(Office.context.document.mode);\n}\n\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n```\n```javascript\n// The following example initializes the add-in and then gets properties of the\n// Document object that are available in the context of a Project document.\n// A Project document is the opened, active project. To access members of the\n// ProjectDocument object, use the Office.context.document object as shown in\n// the code examples for ProjectDocument methods and events.\n// The example assumes your add-in has a reference to the jQuery library and\n// that the following page control is defined in the content div in the page body:\n// <span id=\"message\"></span>\n\n(function () {\n    \"use strict\";\n\n    // The initialize function must be run each time a new page is loaded.\n    Office.initialize = function (reason) {\n        $(document).ready(function () {\n\n            // Get information about the document.\n            showDocumentProperties();\n        });\n    };\n\n    // Get the document mode and the URL of the active project.\n    function showDocumentProperties() {\n        var output = String.format(\n            'The document mode is {0}.<br/>The URL of the active project is {1}.',\n            Office.context.document.mode,\n            Office.context.document.url);\n        $('#message').html(output);\n    }\n})();\n```"
- name: settings
  uid: office!Office.Document#settings:member
  package: office!
  fullName: settings
  summary: Получает объект, который представляет сохраненные настраиваемые параметры надстройки области задач или контентной надстройки для текущего документа.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'settings: Settings;'
    return:
      type: <xref uid="office!Office.Settings:interface" />
- name: url
  uid: office!Office.Document#url:member
  package: office!
  fullName: url
  summary: Получает URL-адрес документа, открытого ведущим приложением. Возвращает значение null, если URL-адрес недоступен.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'url: string;'
    return:
      type: string
      description: "\n\n#### <a name=\"examples\"></a>Примеры\n\n```javascript\nfunction displayDocumentUrl() {\n    write(Office.context.document.url);\n}\n\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n```"
methods:
- name: addHandlerAsync(eventType, handler, options, callback)
  uid: office!Office.Document#addHandlerAsync:member(1)
  package: office!
  fullName: addHandlerAsync(eventType, handler, options, callback)
  summary: Добавляет обработчик событий для события объекта Document.
  remarks: >-
    **Набор требований**: [документевентс](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#documentevents)


    Можно добавить несколько обработчиков событий для указанного объекта eventType, если имя каждой функции обработчика событий уникально.
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'addHandlerAsync(eventType: Office.EventType, handler: any, options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<void>) => void): void;'
    parameters:
    - id: eventType
      description: Для события объекта Document параметру eventType может быть присвоено значение `Office.EventType.Document.SelectionChanged` или `Office.EventType.Document.ActiveViewChanged`<!-- -->или соответствующее текстовое значение этого перечисления.
      type: <xref uid="office!Office.EventType:enum" />
    - id: handler
      description: Добавляемая функция обработчика событий, единственный параметр которой имеет тип [Office.Docументселектиончанжедевентаргс](xref:office!Office.DocumentSelectionChangedEventArgs:interface)<!-- -->. Обязательный.
      type: any
    - id: options
      description: Предоставляет параметр для сохранения данных контекста любого типа без изменений для использования при обратном вызове.
      type: <xref uid="office!Office.AsyncContextOptions:interface" />
    - id: callback
      description: Необязательный атрибут. Функция, вызываемая при возвращении обратного вызова, единственный параметр которой имеет тип [Office. AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;void&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: addHandlerAsync(eventType, handler, callback)
  uid: office!Office.Document#addHandlerAsync:member(2)
  package: office!
  fullName: addHandlerAsync(eventType, handler, callback)
  summary: Добавляет обработчик событий для события объекта Document.
  remarks: "**Набор требований**: [документевентс](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#documentevents)\n\nМожно добавить несколько обработчиков событий для указанного объекта eventType, если имя каждой функции обработчика событий уникально.\n\n#### <a name=\"examples\"></a>Примеры\n\n```javascript\n// The following example adds an event handler for the SelectionChanged event of a document\nfunction addSelectionChangedEventHandler() {\n    Office.context.document.addHandlerAsync(Office.EventType.DocumentSelectionChanged, MyHandler);\n}\n\nfunction MyHandler(eventArgs) {\n    write('Event raised: ' + eventArgs.type);\n    doSomethingWithDocument(eventArgs.document);\n}\n\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n```\n```javascript\n// The following code example adds a handler for the ResourceSelectionChanged event.\n// When the resource selection changes in the document, it gets the GUID of the selected resource.\n// The example assumes your add-in has a reference to the jQuery library and that the\n// following page control is defined in the content div in the page body:\n// <span id=\"message\"></span>\n\n(function () {\n    \"use strict\";\n\n    // The initialize function must be run each time a new page is loaded.\n    Office.initialize = function (reason) {\n        $(document).ready(function () {\n\n            // After the DOM is loaded, add-in-specific code can run.\n            Office.context.document.addHandlerAsync(\n                Office.EventType.ResourceSelectionChanged,\n                getResourceGuid);\n        });\n    };\n\n    // Get the GUID of the selected resource and display it in the add-in.\n    function getResourceGuid() {\n        Office.context.document.getSelectedResourceAsync(\n            function (result) {\n                if (result.status === Office.AsyncResultStatus.Failed) {\n                    onError(result.error);\n                }\n                else {\n                    $('#message').html(result.value);\n                }\n            }\n        );\n    }\n\n    function onError(error) {\n        $('#message').html(error.name + ' ' + error.code + ': ' + error.message);\n    }\n})();\n\n// For a complete code sample that shows how to use a ResourceSelectionChanged\n// event handler in a Project add-in, see \"Create your first task pane add-in\n// for Project 2013 by using a text editor.\"\n// https://docs.microsoft.com/office/dev/add-ins/project/create-your-first-task-pane-add-in-for-project-by-using-a-text-editor\n```\n```javascript\n// The following code example adds a handler for the TaskSelectionChanged event.\n// When the task selection changes in the document, it gets the GUID of the\n// selected task.\n// The example assumes your add-in has a reference to the jQuery library and that\n// the following page control is defined in the content div in the page body:\n// <span id=\"message\"></span>\n\n(function () {\n    \"use strict\";\n\n    // The initialize function must be run each time a new page is loaded.\n    Office.initialize = function (reason) {\n        $(document).ready(function () {\n\n            // After the DOM is loaded, add-in-specific code can run.\n            Office.context.document.addHandlerAsync(\n                Office.EventType.TaskSelectionChanged,\n                getTaskGuid);\n            getTaskGuid();\n        });\n    };\n\n    // Get the GUID of the selected task and display it in the add-in.\n    function getTaskGuid() {\n        Office.context.document.getSelectedTaskAsync(\n            function (result) {\n                if (result.status === Office.AsyncResultStatus.Failed) {\n                    onError(result.error);\n                }\n                else {\n                    $('#message').html(result.value);\n                }\n            }\n        );\n    }\n\n    function onError(error) {\n        $('#message').html(error.name + ' ' + error.code + ': ' + error.message);\n    }\n})();\n```\n```javascript\n// The following code example adds a handler for the ViewSelectionChanged\n// event. When the active view changes, it gets the name and type of the active view.\n// The example assumes your add-in has a reference to the jQuery library and that\n// the following page control is defined in the content div in the page body:\n// <span id=\"message\"></span>\n\n(function () {\n    \"use strict\";\n\n    // The initialize function must be run each time a new page is loaded.\n    Office.initialize = function (reason) {\n        $(document).ready(function () {\n\n            // After the DOM is loaded, add-in-specific code can run.\n            Office.context.document.addHandlerAsync(\n                Office.EventType.ViewSelectionChanged,\n                getActiveView);\n            getActiveView();\n        });\n    };\n\n    // Get the name and type of the active view and display it in the add-in.\n    function getActiveView() {\n        Office.context.document.getSelectedViewAsync(\n            function (result) {\n                if (result.status === Office.AsyncResultStatus.Failed) {\n                    onError(result.error);\n                }\n                else {\n                    var output = String.format(\n                        'View name: {0}<br/>View type: {1}',\n                        result.value.viewName, result.value.viewType);\n                    $('#message').html(output);\n                }\n            }\n        );\n    }\n\n    function onError(error) {\n        $('#message').html(error.name + ' ' + error.code + ': ' + error.message);\n    }\n})();\n\n// For an example that shows how to use a ViewSelectionChanged event handler in a\n// Project add-in, see \"Create your first task pane add-in for Project 2013 by\n// using a text editor.\"\n// https://docs.microsoft.com/office/dev/add-ins/project/create-your-first-task-pane-add-in-for-project-by-using-a-text-editor\n```\n```javascript\n// The following code example uses addHandlerAsync to add an event handler for the ViewSelectionChanged event.\n// When the active view changes, the handler checks the view type. It enables a button if the view is a resource\n// view and disables the button if it isn't a resource view. Choosing the button gets the GUID of the selected\n// resource and displays it in the add-in.\n// The example assumes that your add-in has a reference to the jQuery library and that the following page controls\n// are defined in the content div in the page body:\n// <input id=\"get-info\" type=\"button\" value=\"Get info\" disabled=\"disabled\" /><br />\n// <span id=\"message\"></span>\n\n(function () {\n    \"use strict\";\n\n    // The initialize function must be run each time a new page is loaded.\n    Office.initialize = function (reason) {\n        $(document).ready(function () {\n\n            // After the DOM is loaded, add-in-specific code can run.\n            // Add a ViewSelectionChanged event handler.\n            Office.context.document.addHandlerAsync(\n                Office.EventType.ViewSelectionChanged,\n                getActiveView);\n            $('#get-info').click(getResourceGuid);\n\n            // This example calls the handler on page load to get the active view\n            // of the default page.\n            getActiveView();\n        });\n    };\n\n    // Activate the button based on the active view type of the document.\n    // This is the ViewSelectionChanged event handler.\n    function getActiveView() {\n        Office.context.document.getSelectedViewAsync(\n            function (result) {\n                if (result.status === Office.AsyncResultStatus.Failed) {\n                    onError(result.error);\n                }\n                else {\n                    var viewType = result.value.viewType;\n                    if (viewType == 6 ||   // ResourceForm\n                        viewType == 7 ||   // ResourceSheet\n                        viewType == 8 ||   // ResourceGraph\n                        viewType == 15) {  // ResourceUsage\n                        $('#get-info').removeAttr('disabled');\n                    }\n                    else {\n                        $('#get-info').attr('disabled', 'disabled');\n                    }\n                    var output = String.format(\n                        'View name: {0}<br/>View type: {1}',\n                        result.value.viewName, viewType);\n                    $('#message').html(output);\n                }\n            }\n        );\n    }\n\n    // Get the GUID of the currently selected resource and display it in the add-in.\n    function getResourceGuid() {\n        Office.context.document.getSelectedResourceAsync(\n            function (result) {\n                if (result.status === Office.AsyncResultStatus.Failed) {\n                    onError(result.error);\n                }\n                else {\n                    $('#message').html('Resource GUID: ' + result.value);\n                }\n            }\n        );\n    }\n\n    function onError(error) {\n        $('#message').html(error.name + ' ' + error.code + ': ' + error.message);\n    }\n})();\n\n// For a complete code sample that shows how to use a ViewSelectionChanged event handler in a Project add-in,\n// see \"Create your first task pane add-in for Project by using a text editor.\"\n// https://docs.microsoft.com/office/dev/add-ins/project/create-your-first-task-pane-add-in-for-project-by-using-a-text-editor\n```"
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'addHandlerAsync(eventType: Office.EventType, handler: any, callback?: (result: AsyncResult<void>) => void): void;'
    parameters:
    - id: eventType
      description: Для события объекта Document параметру eventType может быть присвоено значение `Office.EventType.Document.SelectionChanged` или `Office.EventType.Document.ActiveViewChanged`<!-- -->или соответствующее текстовое значение этого перечисления.
      type: <xref uid="office!Office.EventType:enum" />
    - id: handler
      description: Добавляемая функция обработчика событий, единственный параметр которой имеет тип [Office.Docументселектиончанжедевентаргс](xref:office!Office.DocumentSelectionChangedEventArgs:interface)<!-- -->. Обязательный.
      type: any
    - id: callback
      description: Необязательный атрибут. Функция, вызываемая при возвращении обратного вызова, единственный параметр которой имеет тип [Office. AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;void&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: getActiveViewAsync(options, callback)
  uid: office!Office.Document#getActiveViewAsync:member(1)
  package: office!
  fullName: getActiveViewAsync(options, callback)
  summary: Возвращает состояние текущего представления презентации (редактирование или чтение).
  remarks: >-
    **Набор требований**: [ActiveView](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#activeview)


    Может активировать событие при изменении представления.
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getActiveViewAsync(options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<"edit" | "read">) => void): void;'
    parameters:
    - id: options
      description: Предоставляет параметр для сохранения данных контекста любого типа без изменений для использования при обратном вызове.
      type: <xref uid="office!Office.AsyncContextOptions:interface" />
    - id: callback
      description: Необязательный атрибут. Функция, вызываемая при возвращении обратного вызова, единственный параметр которой имеет тип [Office. AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. `value`Свойство Result является состоянием текущего представления презентации. Возвращаемое значение может быть "Edit" или "Read". "Изменить" соответствует любому из представлений, в котором можно редактировать слайды, такие как обычный режим или режим структуры. "Read" соответствует либо режиму показа слайдов, либо режиму чтения.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;"edit" | "read"&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: getActiveViewAsync(callback)
  uid: office!Office.Document#getActiveViewAsync:member(2)
  package: office!
  fullName: getActiveViewAsync(callback)
  summary: Возвращает состояние текущего представления презентации (редактирование или чтение).
  remarks: >-
    **Набор требований**: [ActiveView](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#activeview)


    Может активировать событие при изменении представления.


    #### <a name="examples"></a>Примеры


    ```javascript

    function getFileView() {
        // Get whether the current view is edit or read.
        Office.context.document.getActiveViewAsync(function (asyncResult) {
            if (asyncResult.status == "failed") {
                showMessage("Action failed with error: " + asyncResult.error.message);
            }
            else {
                showMessage(asyncResult.value);
            }
        });
    }

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getActiveViewAsync(callback?: (result: AsyncResult<"edit" | "read">) => void): void;'
    parameters:
    - id: callback
      description: Необязательный атрибут. Функция, вызываемая при возвращении обратного вызова, единственный параметр которой имеет тип [Office. AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. `value`Свойство Result является состоянием текущего представления презентации. Возвращаемое значение может быть "Edit" или "Read". "Изменить" соответствует любому из представлений, в котором можно редактировать слайды, такие как обычный режим или режим структуры. "Read" соответствует либо режиму показа слайдов, либо режиму чтения.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;"edit" | "read"&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: getFileAsync(fileType, options, callback)
  uid: office!Office.Document#getFileAsync:member(1)
  package: office!
  fullName: getFileAsync(fileType, options, callback)
  summary: Возвращает полный файл документа по фрагментам размером до 4194304 байт (4 МБ). Для надстроек на iPad файловый фрагмент поддерживается до 65536 (64 КБ). Обратите внимание, что если указать размер фрагмента выше допустимого, возникнет сбой "Внутренняя ошибка".
  remarks: "**Наборы требований**:\n\n- [Компресседфиле](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#compressedfile) (при использовании `Office.FileType.Compressed`<!-- -->)\n\n- [File](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#file)\n\n- [Текстфиле](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#textfile) (при использовании `Office.FileType.Text`<!-- -->)\n\nДля надстроек, работающих в ведущих приложениях Office, отличных от Office на iPad, `getFileAsync` метод поддерживает извлечение файлов в секторах размером до 4194304 байт (4 МБ). Для надстроек, работающих в приложениях Office на iPad, `getFileAsync` метод поддерживает извлечение файлов фрагментов размером до 65536 (64 КБ).\n\n`fileType`Параметр можно указать с помощью перечисления [Office. filetype](xref:office!Office.FileType:enum) или текстовых значений. Но возможные значения могут зависеть от ведущего приложения:\n\n*Поддерживаемые FileTypes, по платформам* <table> <tr><th> </th><th> Office для Windows </th><th> Office в Интернете </th><th> Office для iPad </th><th> Office для Mac </th></tr> <tr><td><strong> Невозможно </strong></td><td> `Compressed`<!-- -->, `Pdf`<!-- -->, `Text` </td><td> `Compressed`<!-- -->, `Pdf` </td><td> </td><td> `Compressed`<!-- -->, `Pdf`<!-- -->, `Text` </td></tr> <tr><td><strong> PowerPoint </strong></td><td> `Compressed`<!-- -->, `Pdf` </td><td> `Compressed`<!-- -->, `Pdf` </td><td> `Compressed`<!-- -->, `Pdf` </td><td> `Compressed`<!-- -->, `Pdf` </td></tr> <tr><td><strong> Текстовых </strong></td><td> `Compressed`<!-- -->, `Pdf`<!-- -->, `Text` </td><td> `Compressed`<!-- -->, `Pdf`<!-- -->, `Text` </td><td> `Compressed` </td><td> `Compressed`<!-- -->, `Pdf`<!-- -->, `Text` </td></tr> </table>\n\n#### <a name=\"examples\"></a>Примеры\n\n```javascript\n// The following example gets the document in Office Open XML (\"compressed\") format in 65536 bytes (64 KB) slices.\n// Note: The implementation of app.showNotification in this example is from the Visual Studio template for Office Add-ins.\nfunction getDocumentAsCompressed() {\n    Office.context.document.getFileAsync(Office.FileType.Compressed, { sliceSize: 65536 /*64 KB*/ }, \n        function (result) {\n            if (result.status == \"succeeded\") {\n                // If the getFileAsync call succeeded, then\n                // result.value will return a valid File Object.\n                var myFile = result.value;\n                var sliceCount = myFile.sliceCount;\n                var slicesReceived = 0, gotAllSlices = true, docdataSlices = [];\n                app.showNotification(\"File size:\" + myFile.size + \" #Slices: \" + sliceCount);\n\n                // Get the file slices.\n                getSliceAsync(myFile, 0, sliceCount, gotAllSlices, docdataSlices, slicesReceived);\n            }\n            else {\n                app.showNotification(\"Error:\", result.error.message);\n            }\n    });\n}\n\nfunction getSliceAsync(file, nextSlice, sliceCount, gotAllSlices, docdataSlices, slicesReceived) {\n    file.getSliceAsync(nextSlice, function (sliceResult) {\n        if (sliceResult.status == \"succeeded\") {\n            if (!gotAllSlices) { // Failed to get all slices, no need to continue.\n                return;\n            }\n\n            // Got one slice, store it in a temporary array.\n            // (Or you can do something else, such as\n            // send it to a third-party server.)\n            docdataSlices[sliceResult.value.index] = sliceResult.value.data;\n            if (++slicesReceived == sliceCount) {\n              // All slices have been received.\n              file.closeAsync();\n              onGotAllSlices(docdataSlices);\n            }\n            else {\n                getSliceAsync(file, ++nextSlice, sliceCount, gotAllSlices, docdataSlices, slicesReceived);\n            }\n        }\n            else {\n                gotAllSlices = false;\n                file.closeAsync();\n                app.showNotification(\"getSliceAsync Error:\", sliceResult.error.message);\n            }\n    });\n}\n\nfunction onGotAllSlices(docdataSlices) {\n    var docdata = [];\n    for (var i = 0; i < docdataSlices.length; i++) {\n        docdata = docdata.concat(docdataSlices[i]);\n    }\n\n    var fileContent = new String();\n    for (var j = 0; j < docdata.length; j++) {\n        fileContent += String.fromCharCode(docdata[j]);\n    }\n\n    // Now all the file content is stored in 'fileContent' variable,\n    // you can do something with it, such as print, fax...\n}\n\n// The following example gets the document in PDF format.\nOffice.context.document.getFileAsync(Office.FileType.Pdf,\n    function(result) {\n        if (result.status == \"succeeded\") {\n            var myFile = result.value;\n            var sliceCount = myFile.sliceCount;\n            app.showNotification(\"File size:\" + myFile.size + \" #Slices: \" + sliceCount);\n            // Now, you can call getSliceAsync to download the files,\n            // as described in the previous code segment (compressed format).\n            \n            myFile.closeAsync();\n        }\n        else {\n            app.showNotification(\"Error:\", result.error.message);\n        }\n}\n);\n```"
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getFileAsync(fileType: FileType, options?: GetFileOptions, callback?: (result: AsyncResult<Office.File>) => void): void;'
    parameters:
    - id: fileType
      description: Формат, в котором возвращается файл
      type: <xref uid="office!Office.FileType:enum" />
    - id: options
      description: Предоставляет параметры для задания размера срезов, на которые будет разбит документ.
      type: <xref uid="office!Office.GetFileOptions:interface" />
    - id: callback
      description: Необязательный атрибут. Функция, вызываемая при возвращении обратного вызова, единственный параметр которой имеет тип [Office. AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. `value`Результатом этого свойства является объект File.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;<xref uid="office!Office.File:interface" />&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: getFileAsync(fileType, callback)
  uid: office!Office.Document#getFileAsync:member(2)
  package: office!
  fullName: getFileAsync(fileType, callback)
  summary: Возвращает полный файл документа по фрагментам размером до 4194304 байт (4 МБ). Для надстроек на iPad файловый фрагмент поддерживается до 65536 (64 КБ). Обратите внимание, что если указать размер фрагмента выше допустимого, возникнет сбой "Внутренняя ошибка".
  remarks: >-
    **Наборы требований**:


    - [Компресседфиле](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#compressedfile) (при использовании `Office.FileType.Compressed`<!-- -->)


    - [File](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#file)


    - [Текстфиле](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#textfile) (при использовании `Office.FileType.Text`<!-- -->)


    Для надстроек, работающих в ведущих приложениях Office, отличных от Office на iPad, `getFileAsync` метод поддерживает извлечение файлов в секторах размером до 4194304 байт (4 МБ). Для надстроек, работающих в приложениях Office в iPad, `getFileAsync` метод поддерживает получать файлы фрагментов до 65536 (64 КБ).


    `fileType`Параметр можно указать с помощью перечисления [Office. filetype](xref:office!Office.FileType:enum) или текстовых значений. Но возможные значения могут зависеть от ведущего приложения:


    *Поддерживаемые FileTypes, по платформам* <table> <tr><th> </th><th> Office для Windows </th><th> Office в Интернете </th><th> Office для iPad </th><th> Office для Mac </th></tr> <tr><td><strong> Невозможно </strong></td><td> `Compressed`<!-- -->, `Pdf`<!-- -->, `Text` </td><td> `Compressed`<!-- -->, `Pdf` </td><td> </td><td> `Compressed`<!-- -->, `Pdf`<!-- -->, `Text` </td></tr> <tr><td><strong> PowerPoint </strong></td><td> `Compressed`<!-- -->, `Pdf` </td><td> `Compressed`<!-- -->, `Pdf` </td><td> `Compressed`<!-- -->, `Pdf` </td><td> `Compressed`<!-- -->, `Pdf` </td></tr> <tr><td><strong> Текстовых </strong></td><td> `Compressed`<!-- -->, `Pdf`<!-- -->, `Text` </td><td> `Compressed`<!-- -->, `Pdf`<!-- -->, `Text` </td><td> `Compressed` </td><td> `Compressed`<!-- -->, `Pdf`<!-- -->, `Text` </td></tr> </table>
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getFileAsync(fileType: FileType, callback?: (result: AsyncResult<Office.File>) => void): void;'
    parameters:
    - id: fileType
      description: Формат, в котором возвращается файл
      type: <xref uid="office!Office.FileType:enum" />
    - id: callback
      description: Необязательный атрибут. Функция, вызываемая при возвращении обратного вызова, единственный параметр которой имеет тип [Office. AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. `value`Результатом этого свойства является объект File.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;<xref uid="office!Office.File:interface" />&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: getFilePropertiesAsync(options, callback)
  uid: office!Office.Document#getFilePropertiesAsync:member(1)
  package: office!
  fullName: getFilePropertiesAsync(options, callback)
  summary: Получает свойства текущего документа.
  remarks: >-
    **Наборы** обязательных элементов: [не в наборе](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#methods-that-arent-part-of-a-requirement-set)


    URL-адрес файла возвращается с помощью свойства URL `asyncResult.value.url`<!-- -->.
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getFilePropertiesAsync(options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<Office.FileProperties>) => void): void;'
    parameters:
    - id: options
      description: Предоставляет параметр для сохранения данных контекста любого типа без изменений для использования при обратном вызове.
      type: <xref uid="office!Office.AsyncContextOptions:interface" />
    - id: callback
      description: Функция, вызываемая при возвращении обратного вызова, единственный параметр которой имеет тип [Office. AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. `value`Результатом этого свойства является свойство файла (URL-адрес которого находится по адресу`asyncResult.value.url`<!-- -->).
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;<xref uid="office!Office.FileProperties:interface" />&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: getFilePropertiesAsync(callback)
  uid: office!Office.Document#getFilePropertiesAsync:member(2)
  package: office!
  fullName: getFilePropertiesAsync(callback)
  summary: Получает свойства текущего документа.
  remarks: >-
    **Наборы** обязательных элементов: [не в наборе](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#methods-that-arent-part-of-a-requirement-set)


    URL-адрес файла возвращается с помощью свойства URL `asyncResult.value.url`<!-- -->.


    #### <a name="examples"></a>Примеры


    ```javascript

    // To read the URL of the current file, you need to write a callback function that returns the URL.

    // The following example shows how to:

    // 1. Pass an anonymous callback function that returns the value of the file's URL

    //    to the callback parameter of the getFilePropertiesAsync method.

    // 2. Display the value on the add-in's page.

    function getFileUrl() {
        // Get the URL of the current file.
        Office.context.document.getFilePropertiesAsync(function (asyncResult) {
            var fileUrl = asyncResult.value.url;
            if (fileUrl == "") {
                showMessage("The file hasn't been saved yet. Save the file and try again");
            }
            else {
                showMessage(fileUrl);
            }
        });
    }

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getFilePropertiesAsync(callback?: (result: AsyncResult<Office.FileProperties>) => void): void;'
    parameters:
    - id: callback
      description: Функция, вызываемая при возвращении обратного вызова, единственный параметр которой имеет тип [Office. AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. `value`Результатом этого свойства является свойство файла (URL-адрес которого находится по адресу`asyncResult.value.url`<!-- -->).
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;<xref uid="office!Office.FileProperties:interface" />&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: getMaxResourceIndexAsync(options, callback)
  uid: office!Office.Document#getMaxResourceIndexAsync:member(1)
  package: office!
  fullName: getMaxResourceIndexAsync(options, callback)
  summary: >-
    Только документы Project. Получение максимального индекса коллекции ресурсов в текущем проекте.


    **Важно!** этот API работает только в Project 2016 на настольном компьютере с Windows.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getMaxResourceIndexAsync(options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<number>) => void): void;'
    parameters:
    - id: options
      description: Предоставляет параметр для сохранения данных контекста любого типа без изменений для использования при обратном вызове.
      type: <xref uid="office!Office.AsyncContextOptions:interface" />
    - id: callback
      description: Необязательный атрибут. Функция, вызываемая при возвращении обратного вызова, единственный параметр которой имеет тип [Office. AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. `value`Свойство Result — это максимальный номер индекса в коллекции ресурсов текущего проекта.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;number&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: getMaxResourceIndexAsync(callback)
  uid: office!Office.Document#getMaxResourceIndexAsync:member(2)
  package: office!
  fullName: getMaxResourceIndexAsync(callback)
  summary: >-
    Только документы Project. Получение максимального индекса коллекции ресурсов в текущем проекте.


    **Важно!** этот API работает только в Project 2016 на настольном компьютере с Windows.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getMaxResourceIndexAsync(callback?: (result: AsyncResult<number>) => void): void;'
    parameters:
    - id: callback
      description: Необязательный атрибут. Функция, вызываемая при возвращении обратного вызова, единственный параметр которой имеет тип [Office. AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. `value`Свойство Result — это максимальный номер индекса в коллекции ресурсов текущего проекта.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;number&gt;) =&gt; void'
    return:
      type: void
      description: "\n\n#### <a name=\"examples\"></a>Примеры\n\n```javascript\n// The following code example calls getResourceTaskIndexAsync to get the maximum index of the collection \n// of resources in the current project. Then it uses the returned value and the getResourceByIndexAsync\n// method to get each resource GUID. The example assumes that your add-in has a reference to the \n// jQuery library and that the following page controls are defined in the content div in the page body:\n// <input id=\"get-info\" type=\"button\" value=\"Get info\" /><br />\n// <span id=\"message\"></span>\n\n(function () {\n    \"use strict\";\n    var resourceGuids = ;\n\n    // The initialize function must be run each time a new page is loaded.\n    Office.initialize = function (reason) {\n        $(document).ready(function () {\n\n            // After the DOM is loaded, add-in-specific code can run.\n            app.initialize();\n            $('#get-info').click(getResourceInfo);\n        });\n    };\n\n    // Get the maximum resource index, and then get the resource GUIDs.\n    function getResourceInfo() {\n        getMaxResourceIndex().then(\n            function (data) {\n                getResourceGuids(data);\n            }\n        );\n    }\n\n    // Get the maximum index of the resources for the current project.\n    function getMaxResourceIndex() {\n        var defer = $.Deferred();\n        Office.context.document.getMaxResourceIndexAsync(\n            function (result) {\n                if (result.status === Office.AsyncResultStatus.Failed) {\n                    onError(result.error);\n                }\n                else {\n                    defer.resolve(result.value);\n                }\n            }\n        );\n        return defer.promise();\n    }\n\n    // Get each resource GUID, and then display the GUIDs in the add-in.\n    // There is no 0 index for resources, so start with index 1.\n    function getResourceGuids(maxResourceIndex) {\n        var defer = $.Deferred();\n        for (var i = 1; i <= maxResourceIndex; i++) {\n            getResourceGuid(i);\n        }\n        return defer.promise();\n        function getResourceGuid(index) {\n            Office.context.document.getResourceByIndexAsync(index,\n                function (result) {\n                    if (result.status === Office.AsyncResultStatus.Succeeded) {\n                        resourceGuids.push(result.value);\n                        if (index == maxResourceIndex) {\n                            defer.resolve();\n                            $('#message').html(resourceGuids.toString());\n                        }\n                    }\n                    else {\n                        onError(result.error);\n                    }\n                }\n            );\n        }\n    }\n    function onError(error) {\n        app.showNotification(error.name + ' ' + error.code + ': ' + error.message);\n    }\n})();\n```"
- name: getMaxTaskIndexAsync(options, callback)
  uid: office!Office.Document#getMaxTaskIndexAsync:member(1)
  package: office!
  fullName: getMaxTaskIndexAsync(options, callback)
  summary: >-
    Только документы Project. Получение максимального индекса коллекции задач в текущем проекте.


    **Важно!** этот API работает только в Project 2016 на настольном компьютере с Windows.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getMaxTaskIndexAsync(options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<number>) => void): void;'
    parameters:
    - id: options
      description: Предоставляет параметр для сохранения данных контекста любого типа без изменений для использования при обратном вызове.
      type: <xref uid="office!Office.AsyncContextOptions:interface" />
    - id: callback
      description: Необязательный атрибут. Функция, вызываемая при возвращении обратного вызова, единственный параметр которой имеет тип [Office. AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. `value`Свойство Result — это наибольший номер индекса в коллекции задач текущего проекта.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;number&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: getMaxTaskIndexAsync(callback)
  uid: office!Office.Document#getMaxTaskIndexAsync:member(2)
  package: office!
  fullName: getMaxTaskIndexAsync(callback)
  summary: >-
    Только документы Project. Получение максимального индекса коллекции задач в текущем проекте.


    **Важно!** этот API работает только в Project 2016 на настольном компьютере с Windows.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getMaxTaskIndexAsync(callback?: (result: AsyncResult<number>) => void): void;'
    parameters:
    - id: callback
      description: Необязательный атрибут. Функция, вызываемая при возвращении обратного вызова, единственный параметр которой имеет тип [Office. AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. `value`Свойство Result — это наибольший номер индекса в коллекции задач текущего проекта.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;number&gt;) =&gt; void'
    return:
      type: void
      description: "\n\n#### <a name=\"examples\"></a>Примеры\n\n```javascript\n// The following code example calls getMaxTaskIndexAsync to get the maximum index\n// of the collection of tasks in the current project. Then it uses the returned value\n// with the getTaskByIndexAsync method to get each task GUID.\n// The example assumes your add-in has a reference to the jQuery library and that the\n// following page controls are defined in the content div in the page body:\n// <input id=\"get-info\" type=\"button\" value=\"Get info\" /><br />\n// <span id=\"message\"></span>\n\n(function () {\n    \"use strict\";\n    var taskGuids = ;\n\n    // The initialize function must be run each time a new page is loaded.\n    Office.initialize = function (reason) {\n        $(document).ready(function () {\n\n            // After the DOM is loaded, add-in-specific code can run.\n            app.initialize();\n            $('#get-info').click(getTaskInfo);\n        });\n    };\n\n    // Get the maximum task index, and then get the task GUIDs.\n    function getTaskInfo() {\n        getMaxTaskIndex().then(\n            function (data) {\n                getTaskGuids(data);\n            }\n        );\n    }\n\n    // Get the maximum index of the tasks for the current project.\n    function getMaxTaskIndex() {\n        var defer = $.Deferred();\n        Office.context.document.getMaxTaskIndexAsync(\n            function (result) {\n                if (result.status === Office.AsyncResultStatus.Failed) {\n                    onError(result.error);\n                }\n                else {\n                    defer.resolve(result.value);\n                }\n            }\n        );\n        return defer.promise();\n    }\n\n    // Get each task GUID, and then display the GUIDs in the add-in.\n    function getTaskGuids(maxTaskIndex) {\n        var defer = $.Deferred();\n        for (var i = 0; i <= maxTaskIndex; i++) {\n            getTaskGuid(i);\n        }\n        return defer.promise();\n        function getTaskGuid(index) {\n            Office.context.document.getTaskByIndexAsync(index,\n                function (result) {\n                    if (result.status === Office.AsyncResultStatus.Succeeded) {\n                        taskGuids.push(result.value);\n                        if (index == maxTaskIndex) {\n                            defer.resolve();\n                            $('#message').html(taskGuids.toString());\n                        }\n                    }\n                    else {\n                        onError(result.error);\n                    }\n                }\n            );\n        }\n    }\n    function onError(error) {\n        app.showNotification(error.name + ' ' + error.code + ': ' + error.message);\n    }\n})();\n```"
- name: getProjectFieldAsync(fieldId, options, callback)
  uid: office!Office.Document#getProjectFieldAsync:member(1)
  package: office!
  fullName: getProjectFieldAsync(fieldId, options, callback)
  summary: Только документы Project. Получение поля проекта (например, Прожектвебакцессурл).
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getProjectFieldAsync(fieldId: number, options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<any>) => void): void;'
    parameters:
    - id: fieldId
      description: Поля уровня проекта.
      type: number
    - id: options
      description: Предоставляет параметр для сохранения данных контекста любого типа без изменений для использования при обратном вызове.
      type: <xref uid="office!Office.AsyncContextOptions:interface" />
    - id: callback
      description: Необязательный атрибут. Функция, вызываемая при возвращении обратного вызова, единственный параметр которой имеет тип [Office. AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. `value`Свойство Result содержит `fieldValue` свойство, которое представляет значение указанного поля.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;any&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: getProjectFieldAsync(fieldId, callback)
  uid: office!Office.Document#getProjectFieldAsync:member(2)
  package: office!
  fullName: getProjectFieldAsync(fieldId, callback)
  summary: Только документы Project. Получение поля проекта (например, Прожектвебакцессурл).
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getProjectFieldAsync(fieldId: number, callback?: (result: AsyncResult<any>) => void): void;'
    parameters:
    - id: fieldId
      description: Поля уровня проекта.
      type: number
    - id: callback
      description: Необязательный атрибут. Функция, вызываемая при возвращении обратного вызова, единственный параметр которой имеет тип [Office. AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. `value`Свойство Result содержит `fieldValue` свойство, которое представляет значение указанного поля.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;any&gt;) =&gt; void'
    return:
      type: void
      description: "\n\n#### <a name=\"examples\"></a>Примеры\n\n```javascript\n// The following code example gets the values of three specified fields for the active project, \n// and then displays the values in the add-in.\n// The example calls getProjectFieldAsync recursively, after the previous call returns successfully.\n// It also tracks the calls to determine when all calls are sent.\n// The example assumes your add-in has a reference to the jQuery library and that the \n// following page control is defined in the content div in the page body:\n// <span id=\"message\"></span>\n\n(function () {\n    \"use strict\";\n\n    // The initialize function must be run each time a new page is loaded.\n    Office.initialize = function (reason) {\n        $(document).ready(function () {\n\n            // Get information for the active project.\n            getProjectInformation();\n        });\n    };\n\n    // Get the specified fields for the active project.\n    function getProjectInformation() {\n        var fields =\n            [Office.ProjectProjectFields.Start, \n             Office.ProjectProjectFields.Finish, \n             Office.ProjectProjectFields.GUID];\n        var fieldValues = ['Start: ', 'Finish: ', 'GUID: '];\n        var index = 0; \n        getField();\n\n        // Get each field, and then display the field values in the add-in.\n        function getField() {\n            if (index == fields.length) {\n                var output = '';\n                for (var i = 0; i < fieldValues.length; i++) {\n                    output += fieldValues[i] + '<br />';\n                }\n                $('#message').html(output);\n            }\n            else {\n                Office.context.document.getProjectFieldAsync(\n                    fields[index],\n                    function (result) {\n\n                        // If the call is successful, get the field value and then get the next field.\n                        if (result.status === Office.AsyncResultStatus.Succeeded) {\n                            fieldValues[index] += result.value.fieldValue;\n                            getField(index++);\n                        }\n                        else {\n                            onError(result.error);\n                        }\n                    }\n                );\n            }\n        }\n    }\n\n    function onError(error) {\n        $('#message').html(error.name + ' ' + error.code + ': ' + error.message);\n    }\n})();\n```"
- name: getResourceByIndexAsync(resourceIndex, options, callback)
  uid: office!Office.Document#getResourceByIndexAsync:member(1)
  package: office!
  fullName: getResourceByIndexAsync(resourceIndex, options, callback)
  summary: >-
    Только документы Project. Получение GUID ресурса с указанным индексом в коллекции ресурсов.


    **Важно!** этот API работает только в Project 2016 на настольном компьютере с Windows.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getResourceByIndexAsync(resourceIndex: number, options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<string>) => void): void;'
    parameters:
    - id: resourceIndex
      description: Индекс ресурса в коллекции ресурсов для проекта.
      type: number
    - id: options
      description: Предоставляет параметр для сохранения данных контекста любого типа без изменений для использования при обратном вызове.
      type: <xref uid="office!Office.AsyncContextOptions:interface" />
    - id: callback
      description: Необязательный атрибут. Функция, вызываемая при возвращении обратного вызова, единственный параметр которой имеет тип [Office. AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. `value`Значением свойства Result является идентификатор GUID ресурса в виде String.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;string&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: getResourceByIndexAsync(resourceIndex, callback)
  uid: office!Office.Document#getResourceByIndexAsync:member(2)
  package: office!
  fullName: getResourceByIndexAsync(resourceIndex, callback)
  summary: >-
    Только документы Project. Получение GUID ресурса с указанным индексом в коллекции ресурсов.


    **Важно!** этот API работает только в Project 2016 на настольном компьютере с Windows.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getResourceByIndexAsync(resourceIndex: number, callback?: (result: AsyncResult<string>) => void): void;'
    parameters:
    - id: resourceIndex
      description: Индекс ресурса в коллекции ресурсов для проекта.
      type: number
    - id: callback
      description: Необязательный атрибут. Функция, вызываемая при возвращении обратного вызова, единственный параметр которой имеет тип [Office. AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. `value`Значением свойства Result является идентификатор GUID ресурса в виде String.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;string&gt;) =&gt; void'
    return:
      type: void
      description: "\n\n#### <a name=\"examples\"></a>Примеры\n\n```javascript\n// The following code example calls getMaxResourceIndexAsync to get the maximum index in the project's resource\n// collection, and then calls getResourceByIndexAsync to get the GUID for each resource.\n// The example assumes that your add-in has a reference to the jQuery library and that the following \n// page controls are defined in the content div in the page body:\n// <input id=\"get-info\" type=\"button\" value=\"Get info\" /><br />\n// <span id=\"message\"></span>\n\n(function () {\n    \"use strict\";\n    var resourceGuids = ;\n\n    // The initialize function must be run each time a new page is loaded.\n    Office.initialize = function (reason) {\n        $(document).ready(function () {\n\n            // After the DOM is loaded, add-in-specific code can run.\n            app.initialize();\n            $('#get-info').click(getResourceInfo);\n        });\n    };\n\n    // Get the maximum resource index, and then get the resource GUIDs.\n    function getResourceInfo() {\n        getMaxResourceIndex().then(\n            function (data) {\n                getResourceGuids(data);\n            }\n        );\n    }\n\n    // Get the maximum index of the resources for the current project.\n    function getMaxResourceIndex() {\n        var defer = $.Deferred();\n        Office.context.document.getMaxResourceIndexAsync(\n            function (result) {\n                if (result.status === Office.AsyncResultStatus.Failed) {\n                    onError(result.error);\n                }\n                else {\n                    defer.resolve(result.value);\n                }\n            }\n        );\n        return defer.promise();\n    }\n\n    // Get each resource GUID, and then display the GUIDs in the add-in.\n    // There is no 0 index for resources, so start with index 1.\n    function getResourceGuids(maxResourceIndex) {\n        var defer = $.Deferred();\n        for (var i = 1; i <= maxResourceIndex; i++) {\n            getResourceGuid(i);\n        }\n        return defer.promise();\n        function getResourceGuid(index) {\n            Office.context.document.getResourceByIndexAsync(index,\n                function (result) {\n                    if (result.status === Office.AsyncResultStatus.Succeeded) {\n                        resourceGuids.push(result.value);\n                        if (index == maxResourceIndex) {\n                            defer.resolve();\n                            $('#message').html(resourceGuids.toString());\n                        }\n                    }\n                    else {\n                        onError(result.error);\n                    }\n                }\n            );\n        }\n    }\n    function onError(error) {\n        app.showNotification(error.name + ' ' + error.code + ': ' + error.message);\n    }\n})();\n```"
- name: getResourceFieldAsync(resourceId, fieldId, options, callback)
  uid: office!Office.Document#getResourceFieldAsync:member(1)
  package: office!
  fullName: getResourceFieldAsync(resourceId, fieldId, options, callback)
  summary: Только документы Project. Получение поля ресурса для указанного идентификатора ресурса. (ex. ResourceName)
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getResourceFieldAsync(resourceId: string, fieldId: number, options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<string>) => void): void;'
    parameters:
    - id: resourceId
      description: Строка или значение идентификатора ресурса.
      type: string
    - id: fieldId
      description: Поля ресурсов.
      type: number
    - id: options
      description: Предоставляет параметр для сохранения данных контекста любого типа без изменений для использования при обратном вызове.
      type: <xref uid="office!Office.AsyncContextOptions:interface" />
    - id: callback
      description: Необязательный атрибут. Функция, вызываемая при возвращении обратного вызова, единственный параметр которой имеет тип [Office. AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. `value`Значением свойства Result является идентификатор GUID ресурса в виде String.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;string&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: getResourceFieldAsync(resourceId, fieldId, callback)
  uid: office!Office.Document#getResourceFieldAsync:member(2)
  package: office!
  fullName: getResourceFieldAsync(resourceId, fieldId, callback)
  summary: Только документы Project. Получение поля ресурса для указанного идентификатора ресурса. (ex. ResourceName)
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getResourceFieldAsync(resourceId: string, fieldId: number, callback?: (result: AsyncResult<string>) => void): void;'
    parameters:
    - id: resourceId
      description: Строка или значение идентификатора ресурса.
      type: string
    - id: fieldId
      description: Поля ресурсов.
      type: number
    - id: callback
      description: Необязательный атрибут. Функция, вызываемая при возвращении обратного вызова, единственный параметр которой имеет тип [Office. AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. `value`Значением свойства Result является идентификатор GUID ресурса в виде String.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;string&gt;) =&gt; void'
    return:
      type: void
      description: "\n\n#### <a name=\"examples\"></a>Примеры\n\n```javascript\n// The following code example calls getSelectedResourceAsync to get the GUID of the resource\n// that's currently selected in a resource view. Then it gets three resource field values by calling \n// getResourceFieldAsync recursively.\n// The example assumes your add-in has a reference to the jQuery library and that the following \n// page controls are defined in the content div in the page body:\n// <input id=\"get-info\" type=\"button\" value=\"Get info\" /><br />\n// <span id=\"message\"></span>\n\n(function () {\n    \"use strict\";\n\n    // The initialize function must be run each time a new page is loaded.\n    Office.initialize = function (reason) {\n        $(document).ready(function () {\n\n            // After the DOM is loaded, add-in-specific code can run.\n            $('#get-info').click(getResourceInfo);\n        });\n    };\n\n    // Get the GUID of the resource and then get the resource fields.\n    function getResourceInfo() {\n        getResourceGuid().then(\n            function (data) {\n                getResourceFields(data);\n            }\n        );\n    }\n\n    // Get the GUID of the selected resource.\n    function getResourceGuid() {\n        var defer = $.Deferred();\n        Office.context.document.getSelectedResourceAsync(\n            function (result) {\n                if (result.status === Office.AsyncResultStatus.Failed) {\n                    onError(result.error);\n                }\n                else {\n                    defer.resolve(result.value);\n                }\n            }\n        );\n        return defer.promise();\n    }\n\n    // Get the specified fields for the selected resource.\n    function getResourceFields(resourceGuid) {\n        var targetFields =\n            [Office.ProjectResourceFields.Name,\n             Office.ProjectResourceFields.Units, \n             Office.ProjectResourceFields.BaseCalendar];\n        var fieldValues = ['Name: ', 'Units: ', 'Base calendar: '];\n        var index = 0; \n        getField();\n\n        // Get each field, and then display the field values in the add-in.\n        function getField() {\n            if (index == targetFields.length) {\n                var output = '';\n                for (var i = 0; i < fieldValues.length; i++) {\n                    output += fieldValues[i] + '<br />';\n                }\n                $('#message').html(output);\n            }\n\n            // If the call is successful, get the field value and then get the next field.\n            else {\n                Office.context.document.getResourceFieldAsync(\n                    resourceGuid,\n                    targetFields[index],\n                    function (result) {\n                        if (result.status === Office.AsyncResultStatus.Succeeded) {\n                            fieldValues[index] += result.value.fieldValue;\n                            getField(index++);\n                        }\n                        else {\n                            onError(result.error);\n                        }\n                    }\n                );\n            }\n        }\n    }\n\n    function onError(error) {\n        $('#message').html(error.name + ' ' + error.code + ': ' + error.message);\n    }\n})();\n```"
- name: getSelectedDataAsync(coercionType, options, callback)
  uid: office!Office.Document#getSelectedDataAsync:member(1)
  package: office!
  fullName: getSelectedDataAsync(coercionType, options, callback)
  summary: Считывает данные в текущем выделенном фрагменте документа.
  remarks: "**Наборы требований**:\n\n- [ХтмлкоерЦион](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#htmlcoercion) (при использовании `Office.CoercionType.Html`<!-- -->)\n\n- [МатрикскоерЦион](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#matrixcoercion) (при использовании `Office.CoercionType.Matrix`<!-- -->)\n\n- [УксмлкоерЦион](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#ooxmlcoercion) (при использовании `Office.CoercionType.Ooxml`<!-- -->)\n\n- [Selection](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#selection)\n\n- [ТаблекоерЦион](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#tablecoercion) (при использовании `Office.CoercionType.Table`<!-- -->)\n\n- [ТексткоерЦион](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#textcoercion) (при использовании `Office.CoercionType.Text`<!-- -->)\n\nВ функции обратного вызова, которая передается в метод getSelectedDataAsync, можно использовать свойства объекта AsyncResult, чтобы получить следующие сведения.\n\n<table> <tr> <th>Свойство</th> <th>Назначение</th> </tr> <tr> <td>AsyncResult.value</td> <td>Всегда возвращает значение undefined, так как нет объекта или данных для извлечения.</td> </tr> <tr> <td>AsyncResult. status</td> <td>Определяет, удалось ли выполнить операцию.</td> </tr> <tr> <td>AsyncResult.error</td> <td>Доступ к объекту Error, который предоставляет сведения об ошибке, если операция завершилась неудачно.</td> </tr> <tr> <td>AsyncResult.asyncContext</td> <td>Определяемый пользователем элемент любого типа, который возвращается в объекте AsyncResult без изменения.</td> </tr> </table>\n\nДопустимые значения параметра [Office. CoercionType](xref:office!Office.CoercionType:enum) зависят от узла.\n\n<table> <tr> <th>Host</th> <th>Поддерживаемое значение coercionType</th> </tr> <tr> <td>Excel, PowerPoint, Project и Word</td> <td>`Office.CoercionType.Text` substring</td> </tr> <tr> <td>Excel и Word</td> <td>`Office.CoercionType.Matrix` (массив массивов)</td> </tr> <tr> <td>Excel и Word</td> <td>`Office.CoercionType.Table` (Объект TableData)</td> </tr> <tr> <td>Word</td> <td>`Office.CoercionType.Html`</td> </tr> <tr> <td>Word</td> <td>`Office.CoercionType.Ooxml` (Office Open XML)</td> </tr> <tr> <td>PowerPoint в Интернете и Windows</td> <td>`Office.CoercionType.SlideRange`</td> </tr> <tr> <td>Excel, PowerPoint и Word</td> <td>`Office.CoercionType.XmlSvg`</td> </tr> </table>\n\n#### <a name=\"examples\"></a>Примеры\n\n```javascript\n// The following example uses the getSelectedDataAsync method of the Document object to retrieve the\n// user's current selection as text, and then display it in the add-in's page.\n\n// Display the user's current selection.\nfunction showSelection() {\n    Office.context.document.getSelectedDataAsync(\n        \"text\",                        // coercionType\n        {valueFormat: \"unformatted\",   // valueFormat\n        filterType: \"all\"},            // filterType\n        function (result) {            // callback\n            var dataValue; \n            dataValue = result.value;\n            write('Selected data is: ' + dataValue);\n        });\n}\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n```\n```javascript\n// To read the value of the current selection, you need to write a callback function that reads the selection.\n// The following example shows how to:\n// 1. Pass an anonymous callback function that reads the value of the current selection\n//    to the callback parameter of the getSelectedDataAsync method.\n// 2. Read the selection as text, unformatted, and not filtered.\n// 3. Display the value on the add-in's page.\nfunction getText() {\n    Office.context.document.getSelectedDataAsync(Office.CoercionType.Text, \n        { valueFormat: \"unformatted\", filterType: \"all\" },\n        function (asyncResult) {\n            var error = asyncResult.error;\n            if (asyncResult.status === Office.AsyncResultStatus.Failed) {\n                write(error.name + \": \" + error.message);\n            } \n            else {\n                // Get selected data.\n                var dataValue = asyncResult.value; \n                write('Selected data is ' + dataValue);\n            }            \n        });\n}\n\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n```\n```javascript\n// The following code example gets the values of the selected cells. It uses the optional\n// asyncContext parameter to pass some text to the callback function.\n// The example assumes your add-in has a reference to the jQuery library and that the\n// following page controls are defined in the content div in the page body:\n// <input id=\"get-info\" type=\"button\" value=\"Get info\" /><br />\n// <span id=\"message\"></span>\n\n(function () {\n    \"use strict\";\n\n    // The initialize function must be run each time a new page is loaded.\n    Office.initialize = function (reason) {\n        $(document).ready(function () {\n\n            // After the DOM is loaded, add-in-specific code can run.\n            $('#get-info').click(getSelectedText);\n        });\n    };\n\n    // Get the text from the selected cells in the document, and display it in the add-in.\n    function getSelectedText() {\n        Office.context.document.getSelectedDataAsync(\n            Office.CoercionType.Text,\n            {asyncContext: 'Some related info'},\n            function (result) {\n                if (result.status === Office.AsyncResultStatus.Failed) {\n                    onError(result.error);\n                }\n                else {\n                    var output = String.format(\n                        'Selected text: {0}<br/>Passed info: {1}',\n                        result.value, result.asyncContext);\n                    $('#message').html(output);\n                }\n            }\n        );\n    }\n\n    function onError(error) {\n        $('#message').html(error.name + ' ' + error.code + ': ' + error.message);\n    }\n})();\n```"
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getSelectedDataAsync<T>(coercionType: Office.CoercionType, options?: GetSelectedDataOptions, callback?: (result: AsyncResult<T>) => void): void;'
    parameters:
    - id: coercionType
      description: Тип возвращаемой структуры данных. В разделе "Примечания" представлены поддерживаемые типы приведения для каждого узла.
      type: <xref uid="office!Office.CoercionType:enum" />
    - id: options
      description: Предоставляет параметры для настройки возвращаемых данных и их форматирования.
      type: <xref uid="office!Office.GetSelectedDataOptions:interface" />
    - id: callback
      description: Необязательный атрибут. Функция, вызываемая при возвращении обратного вызова, единственный параметр которой имеет тип [Office. AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. `value`Свойство Result представляет данные в текущем выделенном фрагменте. Он возвращается в структуре данных или формате, указанном с помощью параметра coercionType. (Дополнительные сведения о приведении типов данных см. в разделе Замечания.)
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;T&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: getSelectedDataAsync(coercionType, callback)
  uid: office!Office.Document#getSelectedDataAsync:member(2)
  package: office!
  fullName: getSelectedDataAsync(coercionType, callback)
  summary: Считывает данные в текущем выделенном фрагменте документа.
  remarks: >-
    **Наборы требований**:


    - [ХтмлкоерЦион](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#htmlcoercion) (при использовании `Office.CoercionType.Html`<!-- -->)


    - [МатрикскоерЦион](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#matrixcoercion) (при использовании `Office.CoercionType.Matrix`<!-- -->)


    - [УксмлкоерЦион](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#ooxmlcoercion) (при использовании `Office.CoercionType.Ooxml`<!-- -->)


    - [Selection](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#selection)


    - [ТаблекоерЦион](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#tablecoercion) (при использовании `Office.CoercionType.Table`<!-- -->)


    - [ТексткоерЦион](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#textcoercion) (при использовании `Office.CoercionType.Text`<!-- -->)


    В функции обратного вызова, которая передается в метод getSelectedDataAsync, можно использовать свойства объекта AsyncResult, чтобы получить следующие сведения.


    <table> <tr> <th>Свойство</th> <th>Назначение</th> </tr> <tr> <td>AsyncResult.value</td> <td>Всегда возвращает значение undefined, так как нет объекта или данных для извлечения.</td> </tr> <tr> <td>AsyncResult. status</td> <td>Определяет, удалось ли выполнить операцию.</td> </tr> <tr> <td>AsyncResult.error</td> <td>Доступ к объекту Error, который предоставляет сведения об ошибке, если операция завершилась неудачно.</td> </tr> <tr> <td>AsyncResult.asyncContext</td> <td>Определяемый пользователем элемент любого типа, который возвращается в объекте AsyncResult без изменения.</td> </tr> </table>


    Допустимые значения параметра [Office. CoercionType](xref:office!Office.CoercionType:enum) зависят от узла.


    <table> <tr> <th>Host</th> <th>Поддерживаемое значение coercionType</th> </tr> <tr> <td>Excel, PowerPoint, Project и Word</td> <td>`Office.CoercionType.Text` substring</td> </tr> <tr> <td>Excel и Word</td> <td>`Office.CoercionType.Matrix` (массив массивов)</td> </tr> <tr> <td>Excel и Word</td> <td>`Office.CoercionType.Table` (Объект TableData)</td> </tr> <tr> <td>Word</td> <td>`Office.CoercionType.Html`</td> </tr> <tr> <td>Word</td> <td>`Office.CoercionType.Ooxml` (Office Open XML)</td> </tr> <tr> <td>PowerPoint в Интернете и Windows</td> <td>`Office.CoercionType.SlideRange`</td> </tr> <tr> <td>Excel, PowerPoint и Word</td> <td>`Office.CoercionType.XmlSvg`</td> </tr> </table>
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getSelectedDataAsync<T>(coercionType: Office.CoercionType, callback?: (result: AsyncResult<T>) => void): void;'
    parameters:
    - id: coercionType
      description: Тип возвращаемой структуры данных. В разделе "Примечания" представлены поддерживаемые типы приведения для каждого узла.
      type: <xref uid="office!Office.CoercionType:enum" />
    - id: callback
      description: Необязательный атрибут. Функция, вызываемая при возвращении обратного вызова, единственный параметр которой имеет тип [Office. AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. `value`Свойство Result представляет данные в текущем выделенном фрагменте. Он возвращается в структуре данных или формате, указанном с помощью параметра coercionType. (Дополнительные сведения о приведении типов данных см. в разделе Замечания.)
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;T&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: getSelectedResourceAsync(options, callback)
  uid: office!Office.Document#getSelectedResourceAsync:member(1)
  package: office!
  fullName: getSelectedResourceAsync(options, callback)
  summary: Только документы Project. Получение идентификатора текущего выбранного ресурса.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getSelectedResourceAsync(options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<string>) => void): void;'
    parameters:
    - id: options
      description: Предоставляет параметр для сохранения данных контекста любого типа без изменений для использования при обратном вызове.
      type: <xref uid="office!Office.AsyncContextOptions:interface" />
    - id: callback
      description: Необязательный атрибут. Функция, вызываемая при возвращении обратного вызова, единственный параметр которой имеет тип [Office. AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. `value`Значением свойства Result является идентификатор GUID ресурса в виде String.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;string&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: getSelectedResourceAsync(callback)
  uid: office!Office.Document#getSelectedResourceAsync:member(2)
  package: office!
  fullName: getSelectedResourceAsync(callback)
  summary: Только документы Project. Получение идентификатора текущего выбранного ресурса.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getSelectedResourceAsync(callback?: (result: AsyncResult<string>) => void): void;'
    parameters:
    - id: callback
      description: Необязательный атрибут. Функция, вызываемая при возвращении обратного вызова, единственный параметр которой имеет тип [Office. AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. `value`Значением свойства Result является идентификатор GUID ресурса в виде String.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;string&gt;) =&gt; void'
    return:
      type: void
      description: "\n\n#### <a name=\"examples\"></a>Примеры\n\n```javascript\n// The following code example calls getSelectedResourceAsync to get the GUID of the resource that's \n// currently selected in a resource view. Then it gets three resource field values by calling \n// getResourceFieldAsync recursively.\n// The example assumes your add-in has a reference to the jQuery library and that the following page controls are\n// defined in the content div in the page body:\n// <input id=\"get-info\" type=\"button\" value=\"Get info\" /><br />\n// <span id=\"message\"></span>\n\n(function () {\n    \"use strict\";\n\n    // The initialize function must be run each time a new page is loaded.\n    Office.initialize = function (reason) {\n        $(document).ready(function () {\n\n            // After the DOM is loaded, add-in-specific code can run.\n            $('#get-info').click(getResourceInfo);\n        });\n    };\n\n    // Get the GUID of the resource and then get the resource fields.\n    function getResourceInfo() {\n        getResourceGuid().then(\n            function (data) {\n                getResourceFields(data);\n            }\n        );\n    }\n\n    // Get the GUID of the selected resource.\n    function getResourceGuid() {\n        var defer = $.Deferred();\n        Office.context.document.getSelectedResourceAsync(\n            function (result) {\n                if (result.status === Office.AsyncResultStatus.Failed) {\n                    onError(result.error);\n                }\n                else {\n                    defer.resolve(result.value);\n                }\n            }\n        );\n        return defer.promise();\n    }\n\n    // Get the specified fields for the selected resource.\n    function getResourceFields(resourceGuid) {\n        var targetFields =\n            [Office.ProjectResourceFields.Name,\n             Office.ProjectResourceFields.Units, \n             Office.ProjectResourceFields.BaseCalendar];\n        var fieldValues = ['Name: ', 'Units: ', 'Base calendar: '];\n        var index = 0; \n        getField();\n\n        // Get each field, and then display the field values in the add-in.\n        function getField() {\n            if (index == targetFields.length) {\n                var output = '';\n                for (var i = 0; i < fieldValues.length; i++) {\n                    output += fieldValues[i] + '<br />';\n                }\n                $('#message').html(output);\n            }\n\n            // If the call is successful, get the field value and then get the next field.\n            else {\n                Office.context.document.getResourceFieldAsync(\n                    resourceGuid,\n                    targetFields[index],\n                    function (result) {\n                        if (result.status === Office.AsyncResultStatus.Succeeded) {\n                            fieldValues[index] += result.value.fieldValue;\n                            getField(index++);\n                        }\n                        else {\n                            onError(result.error);\n                        }\n                    }\n                );\n            }\n        }\n    }\n\n    function onError(error) {\n        $('#message').html(error.name + ' ' + error.code + ': ' + error.message);\n    }\n})();\n```"
- name: getSelectedTaskAsync(options, callback)
  uid: office!Office.Document#getSelectedTaskAsync:member(1)
  package: office!
  fullName: getSelectedTaskAsync(options, callback)
  summary: Только документы Project. Получение идентификатора текущей выбранной задачи.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getSelectedTaskAsync(options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<string>) => void): void;'
    parameters:
    - id: options
      description: Предоставляет параметр для сохранения данных контекста любого типа без изменений для использования при обратном вызове.
      type: <xref uid="office!Office.AsyncContextOptions:interface" />
    - id: callback
      description: Необязательный атрибут. Функция, вызываемая при возвращении обратного вызова, единственный параметр которой имеет тип [Office. AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. `value`Значением свойства Result является идентификатор GUID ресурса в виде String.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;string&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: getSelectedTaskAsync(callback)
  uid: office!Office.Document#getSelectedTaskAsync:member(2)
  package: office!
  fullName: getSelectedTaskAsync(callback)
  summary: Только документы Project. Получение идентификатора текущей выбранной задачи.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getSelectedTaskAsync(callback?: (result: AsyncResult<string>) => void): void;'
    parameters:
    - id: callback
      description: Необязательный атрибут. Функция, вызываемая при возвращении обратного вызова, единственный параметр которой имеет тип [Office. AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. `value`Значением свойства Result является идентификатор GUID ресурса в виде String.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;string&gt;) =&gt; void'
    return:
      type: void
      description: "\n\n#### <a name=\"examples\"></a>Примеры\n\n```javascript\n// The following code example calls getSelectedTaskAsync to get the GUID of the task that's currently\n// selected in a task view. Then it gets task properties by calling getTaskAsync.\n// The example assumes your add-in has a reference to the jQuery library and that the following page\n// controls are defined in the content div in the page body:\n// <input id=\"get-info\" type=\"button\" value=\"Get info\" /><br />\n// <span id=\"message\"></span>\n\n(function () {\n    \"use strict\";\n\n    // The initialize function must be run each time a new page is loaded.\n    Office.initialize = function (reason) {\n        $(document).ready(function () {\n\n            // After the DOM is loaded, add-in-specific code can run.\n            $('#get-info').click(getTaskInfo);\n        });\n    };\n\n    // // Get the GUID of the task, and then get local task properties.\n    function getTaskInfo() {\n        getTaskGuid().then(\n            function (data) {\n                getTaskProperties(data);\n            }\n        );\n    }\n\n    // Get the GUID of the selected task.\n    function getTaskGuid() {\n        var defer = $.Deferred();\n        Office.context.document.getSelectedTaskAsync(\n            function (result) {\n                if (result.status === Office.AsyncResultStatus.Failed) {\n                    onError(result.error);\n                }\n                else {\n                    defer.resolve(result.value);\n                }\n            }\n        );\n        return defer.promise();\n    }\n\n    // Get local properties for the selected task, and then display it in the add-in.\n    function getTaskProperties(taskGuid) {\n        Office.context.document.getTaskAsync(\n            taskGuid,\n            function (result) {\n                if (result.status === Office.AsyncResultStatus.Failed) {\n                    onError(result.error);\n                }\n                else {\n                    var taskInfo = result.value;\n                    var output = String.format(\n                        'Name: {0}<br/>GUID: {1}<br/>SharePoint task ID: {2}<br/>Resource names: {3}',\n                        taskInfo.taskName, taskGuid, taskInfo.wssTaskId, taskInfo.resourceNames);\n                    $('#message').html(output);\n                }\n            }\n        );\n    }\n\n    function onError(error) {\n        $('#message').html(error.name + ' ' + error.code + ': ' + error.message);\n    }\n})();\n```"
- name: getSelectedViewAsync(options, callback)
  uid: office!Office.Document#getSelectedViewAsync:member(1)
  package: office!
  fullName: getSelectedViewAsync(options, callback)
  summary: Только документы Project. Получение текущего выбранного типа представления (например, Диаграмма Ганта) и имя представления.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getSelectedViewAsync(options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<any>) => void): void;'
    parameters:
    - id: options
      description: Предоставляет параметр для сохранения данных контекста любого типа без изменений для использования при обратном вызове.
      type: <xref uid="office!Office.AsyncContextOptions:interface" />
    - id: callback
      description: 'Необязательный атрибут. Функция, вызываемая при возвращении обратного вызова, единственный параметр которой имеет тип [Office. AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. `value`Свойство Result содержит следующие свойства: `viewName` — имя представления в виде константы ProjectViewTypes. `viewType` — Тип представления в виде целого значения константы ProjectViewTypes.'
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;any&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: getSelectedViewAsync(callback)
  uid: office!Office.Document#getSelectedViewAsync:member(2)
  package: office!
  fullName: getSelectedViewAsync(callback)
  summary: Только документы Project. Получение текущего выбранного типа представления (например, Диаграмма Ганта) и имя представления.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getSelectedViewAsync(callback?: (result: AsyncResult<any>) => void): void;'
    parameters:
    - id: callback
      description: 'Необязательный атрибут. Функция, вызываемая при возвращении обратного вызова, единственный параметр которой имеет тип [Office. AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. `value`Свойство Result содержит следующие свойства: `viewName` — имя представления в виде константы ProjectViewTypes. `viewType` — Тип представления в виде целого значения константы ProjectViewTypes.'
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;any&gt;) =&gt; void'
    return:
      type: void
      description: "\n\n#### <a name=\"examples\"></a>Примеры\n\n```javascript\n// The following code example calls adds a ViewSelectionChanged event handler that\n// calls getSelectedViewAsync to get the name and type of the active view in the document.\n// The example assumes your add-in has a reference to the jQuery library and that\n// the following page control is defined in the content div in the page body:\n// <span id=\"message\"></span>\n\n(function () {\n    \"use strict\";\n\n    // The initialize function must be run each time a new page is loaded.\n    Office.initialize = function (reason) {\n        $(document).ready(function () {\n\n            // After the DOM is loaded, add-in-specific code can run.\n            Office.context.document.addHandlerAsync(\n                Office.EventType.ViewSelectionChanged,\n                getActiveView);\n            getActiveView();\n        });\n    };\n\n    // Get the active view's name and type.\n    function getActiveView() {\n        Office.context.document.getSelectedViewAsync(\n            function (result) {\n                if (result.status === Office.AsyncResultStatus.Failed) {\n                    onError(result.error);\n                }\n                else {\n                    var output = String.format(\n                        'View name: {0}<br/>View type: {1}',\n                        result.value.viewName, viewType);\n                    $('#message').html(output);\n                }\n            }\n        );\n    }\n\n    function onError(error) {\n        $('#message').html(error.name + ' ' + error.code + ': ' + error.message);\n    }\n})();\n```"
- name: getTaskAsync(taskId, options, callback)
  uid: office!Office.Document#getTaskAsync:member(1)
  package: office!
  fullName: getTaskAsync(taskId, options, callback)
  summary: Только документы Project. Получение имени задачи, идентификатора задачи WSS и ResourceNames для данного taskId.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getTaskAsync(taskId: string, options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<any>) => void): void;'
    parameters:
    - id: taskId
      description: Строка или значение идентификатора задачи.
      type: string
    - id: options
      description: Предоставляет параметр для сохранения данных контекста любого типа без изменений для использования при обратном вызове.
      type: <xref uid="office!Office.AsyncContextOptions:interface" />
    - id: callback
      description: 'Необязательный атрибут. Функция, вызываемая при возвращении обратного вызова, единственный параметр которой имеет тип [Office. AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. `value`Свойство Result содержит следующие свойства: `taskName` — имя задачи. `wssTaskId` — Идентификатор задачи в синхронизированном списке задач SharePoint. Если проект не синхронизирован со списком задач, значение будет 0. `resourceNames` — Разделенный запятыми список имен ресурсов, назначенных задаче.'
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;any&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: getTaskAsync(taskId, callback)
  uid: office!Office.Document#getTaskAsync:member(2)
  package: office!
  fullName: getTaskAsync(taskId, callback)
  summary: Только документы Project. Получение имени задачи, идентификатора задачи WSS и ResourceNames для данного taskId.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getTaskAsync(taskId: string, callback?: (result: AsyncResult<any>) => void): void;'
    parameters:
    - id: taskId
      description: Строка или значение идентификатора задачи.
      type: string
    - id: callback
      description: 'Необязательный атрибут. Функция, вызываемая при возвращении обратного вызова, единственный параметр которой имеет тип [Office. AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. `value`Свойство Result содержит следующие свойства: `taskName` — имя задачи. `wssTaskId` — Идентификатор задачи в синхронизированном списке задач SharePoint. Если проект не синхронизирован со списком задач, значение будет 0. `resourceNames` — Разделенный запятыми список имен ресурсов, назначенных задаче.'
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;any&gt;) =&gt; void'
    return:
      type: void
      description: "\n\n#### <a name=\"examples\"></a>Примеры\n\n```javascript\n// The following code example calls getSelectedTaskAsync to get the task GUID of the currently\n// selected task. Then it calls getTaskAsync to get the properties for the task that are\n// available from the JavaScript API for Office.\n// The example assumes your add-in has a reference to the jQuery library and that the\n// following page controls are defined in the content div in the page body:\n// <input id=\"get-info\" type=\"button\" value=\"Get info\" /><br />\n// <span id=\"message\"></span>\n\n(function () {\n    \"use strict\";\n\n    // The initialize function must be run each time a new page is loaded.\n    Office.initialize = function (reason) {\n        $(document).ready(function () {\n\n            // After the DOM is loaded, add-in-specific code can run.\n            $('#get-info').click(getTaskInfo);\n        });\n    };\n\n    // Get the GUID of the task, and then get local task properties.\n    function getTaskInfo() {\n        getTaskGuid().then(\n            function (data) {\n                getTaskProperties(data);\n            }\n        );\n    }\n\n    // Get the GUID of the selected task.\n    function getTaskGuid() {\n        var defer = $.Deferred();\n        Office.context.document.getSelectedTaskAsync(\n            function (result) {\n                if (result.status === Office.AsyncResultStatus.Failed) {\n                    onError(result.error);\n                }\n                else {\n                    defer.resolve(result.value);\n                }\n            }\n        );\n        return defer.promise();\n    }\n\n    // Get local properties for the selected task, and then display it in the add-in.\n    function getTaskProperties(taskGuid) {\n        Office.context.document.getTaskAsync(\n            taskGuid,\n            function (result) {\n                if (result.status === Office.AsyncResultStatus.Failed) {\n                    onError(result.error);\n                }\n                else {\n                    var taskInfo = result.value;\n                    var output = String.format(\n                        'Name: {0}<br/>GUID: {1}<br/>SharePoint task ID: {2}<br/>Resource names: {3}',\n                        taskInfo.taskName, taskGuid, taskInfo.wssTaskId, taskInfo.resourceNames);\n                    $('#message').html(output);\n                }\n            }\n        );\n    }\n\n    function onError(error) {\n        $('#message').html(error.name + ' ' + error.code + ': ' + error.message);\n    }\n})();\n```"
- name: getTaskByIndexAsync(taskIndex, options, callback)
  uid: office!Office.Document#getTaskByIndexAsync:member(1)
  package: office!
  fullName: getTaskByIndexAsync(taskIndex, options, callback)
  summary: >-
    Только документы Project. Получение идентификатора GUID задачи с указанным индексом в коллекции задач.


    **Важно!** этот API работает только в Project 2016 на настольном компьютере с Windows.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getTaskByIndexAsync(taskIndex: number, options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<string>) => void): void;'
    parameters:
    - id: taskIndex
      description: Индекс задачи в коллекции задач для проекта.
      type: number
    - id: options
      description: Предоставляет параметр для сохранения данных контекста любого типа без изменений для использования при обратном вызове.
      type: <xref uid="office!Office.AsyncContextOptions:interface" />
    - id: callback
      description: Необязательный атрибут. Функция, вызываемая при возвращении обратного вызова, единственный параметр которой имеет тип [Office. AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. `value`Значением свойства является идентификатор GUID задачи в виде String.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;string&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: getTaskByIndexAsync(taskIndex, callback)
  uid: office!Office.Document#getTaskByIndexAsync:member(2)
  package: office!
  fullName: getTaskByIndexAsync(taskIndex, callback)
  summary: >-
    Только документы Project. Получение идентификатора GUID задачи с указанным индексом в коллекции задач.


    **Важно!** этот API работает только в Project 2016 на настольном компьютере с Windows.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getTaskByIndexAsync(taskIndex: number, callback?: (result: AsyncResult<string>) => void): void;'
    parameters:
    - id: taskIndex
      description: Индекс задачи в коллекции задач для проекта.
      type: number
    - id: callback
      description: Необязательный атрибут. Функция, вызываемая при возвращении обратного вызова, единственный параметр которой имеет тип [Office. AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. `value`Значением свойства является идентификатор GUID задачи в виде String.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;string&gt;) =&gt; void'
    return:
      type: void
      description: "\n\n#### <a name=\"examples\"></a>Примеры\n\n```javascript\n// The following code example calls getMaxTaskIndexAsync to get the\n// maximum index in the project's task collection, and then\n// calls getTaskByIndexAsync to get the GUID for each task.\n// The example assumes that your add-in has a reference to the\n// jQuery library and that the following page controls are defined\n// in the content div in the page body:\n// <input id=\"get-info\" type=\"button\" value=\"Get info\" /><br />\n// <span id=\"message\"></span>\n\n(function () {\n    \"use strict\";\n    var taskGuids = ;\n\n    // The initialize function must be run each time a new page is loaded.\n    Office.initialize = function (reason) {\n        $(document).ready(function () {\n\n            // After the DOM is loaded, add-in-specific code can run.\n            app.initialize();\n            $('#get-info').click(getTaskInfo);\n        });\n    };\n\n    // Get the maximum task index, and then get the task GUIDs.\n    function getTaskInfo() {\n        getMaxTaskIndex().then(\n            function (data) {\n                getTaskGuids(data);\n            }\n        );\n    }\n\n    // Get the maximum index of the tasks for the current project.\n    function getMaxTaskIndex() {\n        var defer = $.Deferred();\n        Office.context.document.getMaxTaskIndexAsync(\n            function (result) {\n                if (result.status === Office.AsyncResultStatus.Failed) {\n                    onError(result.error);\n                }\n                else {\n                    defer.resolve(result.value);\n                }\n            }\n        );\n        return defer.promise();\n    }\n\n    // Get each task GUID, and then display the GUIDs in the add-in.\n    function getTaskGuids(maxTaskIndex) {\n        var defer = $.Deferred();\n        for (var i = 0; i <= maxTaskIndex; i++) {\n            getTaskGuid(i);\n        }\n        return defer.promise();\n        function getTaskGuid(index) {\n            Office.context.document.getTaskByIndexAsync(index,\n                function (result) {\n                    if (result.status === Office.AsyncResultStatus.Succeeded) {\n                        taskGuids.push(result.value);\n                        if (index == maxTaskIndex) {\n                            defer.resolve();\n                            $('#message').html(taskGuids.toString());\n                        }\n                    }\n                    else {\n                        onError(result.error);\n                    }\n                }\n            );\n        }\n    }\n    function onError(error) {\n        app.showNotification(error.name + ' ' + error.code + ': ' + error.message);\n    }\n})();\n```"
- name: getTaskFieldAsync(taskId, fieldId, options, callback)
  uid: office!Office.Document#getTaskFieldAsync:member(1)
  package: office!
  fullName: getTaskFieldAsync(taskId, fieldId, options, callback)
  summary: Только документы Project. Получение поля задачи для указанного идентификатора задачи (например, StartDate).
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getTaskFieldAsync(taskId: string, fieldId: number, options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<any>) => void): void;'
    parameters:
    - id: taskId
      description: Строка или значение идентификатора задачи.
      type: string
    - id: fieldId
      description: Поля задач.
      type: number
    - id: options
      description: Предоставляет параметр для сохранения данных контекста любого типа без изменений для использования при обратном вызове.
      type: <xref uid="office!Office.AsyncContextOptions:interface" />
    - id: callback
      description: Необязательный атрибут. Функция, вызываемая при возвращении обратного вызова, единственный параметр которой имеет тип [Office. AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. `value`Свойство Result содержит `fieldValue` свойство, которое представляет значение указанного поля.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;any&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: getTaskFieldAsync(taskId, fieldId, callback)
  uid: office!Office.Document#getTaskFieldAsync:member(2)
  package: office!
  fullName: getTaskFieldAsync(taskId, fieldId, callback)
  summary: Только документы Project. Получение поля задачи для указанного идентификатора задачи (например, StartDate).
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getTaskFieldAsync(taskId: string, fieldId: number, callback?: (result: AsyncResult<any>) => void): void;'
    parameters:
    - id: taskId
      description: Строка или значение идентификатора задачи.
      type: string
    - id: fieldId
      description: Поля задач.
      type: number
    - id: callback
      description: Необязательный атрибут. Функция, вызываемая при возвращении обратного вызова, единственный параметр которой имеет тип [Office. AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. `value`Свойство Result содержит `fieldValue` свойство, которое представляет значение указанного поля.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;any&gt;) =&gt; void'
    return:
      type: void
      description: "\n\n#### <a name=\"examples\"></a>Примеры\n\n```javascript\n// The following code example calls getSelectedTaskAsync to get the GUID of the task that's currently\n// selected in a task view. Then it gets two task field values by calling getTaskFieldAsync recursively.\n// The example assumes your add-in has a reference to the jQuery library and that the following page\n// controls are defined in the content div in the page body:\n// <input id=\"get-info\" type=\"button\" value=\"Get info\" /><br />\n// <span id=\"message\"></span>\n\n(function () {\n    \"use strict\";\n\n    // The initialize function must be run each time a new page is loaded.\n    Office.initialize = function (reason) {\n        $(document).ready(function () {\n            \n            // After the DOM is loaded, add-in-specific code can run.\n            $('#get-info').click(getTaskInfo);\n        });\n    };\n\n    // Get the GUID of the task, and then get the task fields.\n    function getTaskInfo() {\n        getTaskGuid().then(\n            function (data) {\n                getTaskFields(data);\n            }\n        );\n    }\n\n    // Get the GUID of the selected task.\n    function getTaskGuid() {\n        var defer = $.Deferred();\n        Office.context.document.getSelectedTaskAsync(\n            function (result) {\n                if (result.status === Office.AsyncResultStatus.Failed) {\n                    onError(result.error);\n                }\n                else {\n                    defer.resolve(result.value);\n                }\n            }\n        );\n        return defer.promise();\n    }\n\n    // Get the specified fields for the selected task.\n    function getTaskFields(taskGuid) {\n        var output = '';\n        var targetFields = [Office.ProjectTaskFields.Priority, Office.ProjectTaskFields.PercentComplete];\n        var fieldValues = ['Priority: ', '% Complete: '];\n        var index = 0;\n        getField();\n\n        // Get each field, and then display the field values in the add-in.\n        function getField() {\n            if (index == targetFields.length) {\n                for (var i = 0; i < fieldValues.length; i++) {\n                    output += fieldValues[i] + '<br />';\n                }\n                $('#message').html(output);\n            }\n\n            // Get the field value. If the call is successful, then get the next field.\n            else {\n                Office.context.document.getTaskFieldAsync(\n                    taskGuid,\n                    targetFields[index],\n                    function (result) {\n                        if (result.status === Office.AsyncResultStatus.Succeeded) {\n                            fieldValues[index] += result.value.fieldValue;\n                            getField(index++);\n                        }\n                        else {\n                            onError(result.error);\n                        }\n                    }\n                );\n            }\n        }\n    }\n\n    function onError(error) {\n        $('#message').html(error.name + ' ' + error.code + ': ' + error.message);\n    }\n})();\n```"
- name: getWSSUrlAsync(options, callback)
  uid: office!Office.Document#getWSSUrlAsync:member(1)
  package: office!
  fullName: getWSSUrlAsync(options, callback)
  summary: Только документы Project. Получение URL-адреса и имени списка для списка задач. MPP также синхронизируется.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getWSSUrlAsync(options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<any>) => void): void;'
    parameters:
    - id: options
      description: Предоставляет параметр для сохранения данных контекста любого типа без изменений для использования при обратном вызове.
      type: <xref uid="office!Office.AsyncContextOptions:interface" />
    - id: callback
      description: 'Необязательный атрибут. Функция, вызываемая при возвращении обратного вызова, единственный параметр которой имеет тип [Office. AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. `value`Свойство Result содержит следующие свойства: `listName` — имя синхронизированного списка задач SharePoint. `serverUrl` — URL-адрес синхронизированного списка задач SharePoint.'
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;any&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: getWSSUrlAsync(callback)
  uid: office!Office.Document#getWSSUrlAsync:member(2)
  package: office!
  fullName: getWSSUrlAsync(callback)
  summary: Только документы Project. Получение URL-адреса и имени списка для списка задач. MPP также синхронизируется.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getWSSUrlAsync(callback?: (result: AsyncResult<any>) => void): void;'
    parameters:
    - id: callback
      description: 'Необязательный атрибут. Функция, вызываемая при возвращении обратного вызова, единственный параметр которой имеет тип [Office. AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. `value`Свойство Result содержит следующие свойства: `listName` — имя синхронизированного списка задач SharePoint. `serverUrl` — URL-адрес синхронизированного списка задач SharePoint.'
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;any&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: goToByIdAsync(id, goToType, options, callback)
  uid: office!Office.Document#goToByIdAsync:member(1)
  package: office!
  fullName: goToByIdAsync(id, goToType, options, callback)
  summary: Переходит к указанному объекту или месту в документе.
  remarks: >-
    **Набор** обязательных элементов: [не в наборе](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#methods-that-arent-part-of-a-requirement-set)


    PowerPoint не поддерживает метод goToByIdAsync в представлениях Master.


    Поведение, вызванное параметром selectionMode, зависит от узла:


    В Excel: `Office.SelectionMode.Selected` выделяет все содержимое в привязке или именованный элемент. Office.SelectionMode.None для привязок к тексту выбирает ячейку; для привязок к матрицам, таблицам и именованных элементов — выбирает первую ячейку с данными (а не первую ячейку в столбце заготовка таблицы).


    В PowerPoint: `Office.SelectionMode.Selected` выделяет заголовок слайда или первый элемент TextBox на слайде. `Office.SelectionMode.None` ничего не выбирается.


    В Word: `Office.SelectionMode.Selected` выделяет все содержимое в привязке. Office.SelectionMode.None для текстовых привязок перемещает указатель в начало текста, а для привязок к матрицам и таблицам выбирает первую ячейку с данными (а не первую ячейку строки заголовка таблицы).
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'goToByIdAsync(id: string | number, goToType: GoToType, options?: GoToByIdOptions, callback?: (result: AsyncResult<any>) => void): void;'
    parameters:
    - id: id
      description: Идентификатор объекта или расположения для перехода.
      type: string | number
    - id: goToType
      description: Тип расположения, к которому выполняется переход.
      type: <xref uid="office!Office.GoToType:enum" />
    - id: options
      description: Предоставляет параметры для выбора расположения, к которому выполняется переход.
      type: <xref uid="office!Office.GoToByIdOptions:interface" />
    - id: callback
      description: Необязательный атрибут. Функция, вызываемая при возвращении обратного вызова, единственный параметр которой имеет тип [Office. AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. `value`Свойство Result является текущим представлением.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;any&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: goToByIdAsync(id, goToType, callback)
  uid: office!Office.Document#goToByIdAsync:member(2)
  package: office!
  fullName: goToByIdAsync(id, goToType, callback)
  summary: Переходит к указанному объекту или месту в документе.
  remarks: >-
    **Набор** обязательных элементов: [не в наборе](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#methods-that-arent-part-of-a-requirement-set)


    PowerPoint не поддерживает метод goToByIdAsync в представлениях Master.


    Поведение, вызванное параметром selectionMode, зависит от узла:


    В Excel: `Office.SelectionMode.Selected` выделяет все содержимое в привязке или именованный элемент. Office.SelectionMode.None для привязок к тексту выбирает ячейку; для привязок к матрицам, таблицам и именованных элементов — выбирает первую ячейку с данными (а не первую ячейку в столбце заготовка таблицы).


    В PowerPoint: `Office.SelectionMode.Selected` выделяет заголовок слайда или первый элемент TextBox на слайде. `Office.SelectionMode.None` ничего не выбирается.


    В Word: `Office.SelectionMode.Selected` выделяет все содержимое в привязке. Office.SelectionMode.None для текстовых привязок перемещает указатель в начало текста, а для привязок к матрицам и таблицам выбирает первую ячейку с данными (а не первую ячейку строки заголовка таблицы).


    #### <a name="examples"></a>Примеры


    ```javascript

    // Go to a binding by id (Word and Excel)

    // The following example shows how to:

    // 1. Create a table binding using the addFromSelectionAsync method as a sample binding to work with.

    // 2. Specify that binding as the binding to go to.

    // 3. Pass an anonymous callback function that returns the status of the operation

    //    to the callback parameter of the goToByIdAsync method.

    // 4. Display the value on the add-in's page.

    function gotoBinding() {
        // Create a new table binding for the selected table.
        Office.context.document.bindings.addFromSelectionAsync("table",{ id: "MyTableBinding" }, function (asyncResult) {
        if (asyncResult.status == "failed") {
                  showMessage("Action failed with error: " + asyncResult.error.message);
              }
              else {
                  showMessage("Added new binding with type: " + asyncResult.value.type +" and id: " + asyncResult.value.id);
              }
        });

        // Go to binding by id.
        Office.context.document.goToByIdAsync("MyTableBinding", Office.GoToType.Binding, function (asyncResult) {
            if (asyncResult.status == "failed") {
                showMessage("Action failed with error: " + asyncResult.error.message);
            }
            else {
                showMessage("Navigation successful");
            }
        });
    }


    // Go to a table in a spreadsheet (Excel)

    // The following example shows how to:

    // 1. Specify a table by name as the table to go to.

    // 2. Pass an anonymous callback function that returns the status of the operation

    //    to the callback parameter of the goToByIdAsync method.

    // 3. Display the value on the add-in's page.

    function goToTable() {
        Office.context.document.goToByIdAsync("Table1", Office.GoToType.NamedItem, function (asyncResult) {
            if (asyncResult.status == "failed") {
                showMessage("Action failed with error: " + asyncResult.error.message);
            }
            else {
                showMessage("Navigation successful");
            }
        });
    }


    // Go to the currently selected slide by id (PowerPoint)

    // The following example shows how to:

    // 1. Get the id of the currently selected slides using the getSelectedDataAsync method.

    // 2. Specify the returned id as the slide to go to.

    // 3. Pass an anonymous callback function that returns the status of the operation

    //    to the callback parameter of the goToByIdAsync method.

    // 4. Display the value of the stringified JSON object returned by asyncResult.value,

    //    which contains information about the selected slides, on the add-in's page.

    var firstSlideId = 0;

    function gotoSelectedSlide() {
        //Get currently selected slide's id
        Office.context.document.getSelectedDataAsync(Office.CoercionType.SlideRange, function (asyncResult) {
            if (asyncResult.status == "failed") {
                app.showNotification("Action failed with error: " + asyncResult.error.message);
            }
            else {
                firstSlideId = asyncResult.value.slides[0].id;
                app.showNotification(JSON.stringify(asyncResult.value));
            }
        });
        //Go to slide by id.
        Office.context.document.goToByIdAsync(firstSlideId, Office.GoToType.Slide, function (asyncResult) {
            if (asyncResult.status == "failed") {
                app.showNotification("Action failed with error: " + asyncResult.error.message);
            }
            else {
                app.showNotification("Navigation successful");
            }
        });
    }


    // Go to slide by index (PowerPoint)

    // The following example shows how to:

    // 1. Specify the index of the first, last, previous, or next slide to go to.

    // 2. Pass an anonymous callback function that returns the status of the operation

    //    to the callback parameter of the goToByIdAsync method.

    // 3. Display the value on the add-in's page.

    function goToSlideByIndex() {
        var goToFirst = Office.Index.First;
        var goToLast = Office.Index.Last;
        var goToPrevious = Office.Index.Previous;
        var goToNext = Office.Index.Next;

        Office.context.document.goToByIdAsync(goToNext, Office.GoToType.Index, function (asyncResult) {
            if (asyncResult.status == "failed") {
                showMessage("Action failed with error: " + asyncResult.error.message);
            }
            else {
                showMessage("Navigation successful");
            }
        });
    }

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'goToByIdAsync(id: string | number, goToType: GoToType, callback?: (result: AsyncResult<any>) => void): void;'
    parameters:
    - id: id
      description: Идентификатор объекта или расположения для перехода.
      type: string | number
    - id: goToType
      description: Тип расположения, к которому выполняется переход.
      type: <xref uid="office!Office.GoToType:enum" />
    - id: callback
      description: Необязательный атрибут. Функция, вызываемая при возвращении обратного вызова, единственный параметр которой имеет тип [Office. AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. `value`Свойство Result является текущим представлением.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;any&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: removeHandlerAsync(eventType, options, callback)
  uid: office!Office.Document#removeHandlerAsync:member(1)
  package: office!
  fullName: removeHandlerAsync(eventType, options, callback)
  summary: Удаляет обработчик событий для указанного типа события.
  remarks: '**Набор требований**: [документевентс](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#documentevents)'
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'removeHandlerAsync(eventType: Office.EventType, options?: RemoveHandlerOptions, callback?: (result: AsyncResult<void>) => void): void;'
    parameters:
    - id: eventType
      description: Тип события. Для Document можно указать "Document. SelectionChanged" или "Document. ActiveViewChanged".
      type: <xref uid="office!Office.EventType:enum" />
    - id: options
      description: Предоставляет параметры для определения обработчика событий или обработчиков, которые удаляются.
      type: <xref uid="office!Office.RemoveHandlerOptions:interface" />
    - id: callback
      description: Необязательный атрибут. Функция, вызываемая при возвращении обратного вызова, единственный параметр которой имеет тип [Office. AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;void&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: removeHandlerAsync(eventType, callback)
  uid: office!Office.Document#removeHandlerAsync:member(2)
  package: office!
  fullName: removeHandlerAsync(eventType, callback)
  summary: Удаляет обработчик событий для указанного типа события.
  remarks: >-
    **Набор требований**: [документевентс](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#documentevents)


    #### <a name="examples"></a>Примеры


    ```javascript

    // The following example removes the event handler named 'MyHandler'.

    function removeSelectionChangedEventHandler() {
        Office.context.document.removeHandlerAsync(Office.EventType.DocumentSelectionChanged, {handler:MyHandler});
    }


    function MyHandler(eventArgs) {
        doSomethingWithDocument(eventArgs.document);
    }

    ```

    ```javascript

    // The following code example uses addHandlerAsync to add an event handler for the

    // ResourceSelectionChanged event and removeHandlerAsync to remove the handler.

    // When a resource is selected in a resource view, the handler displays the

    // resource GUID. When the handler is removed, the GUID is not displayed.

    // The example assumes that your add-in has a reference to the jQuery library and

    // that the following page control is defined in the content div in the page body:

    // <input id="remove-handler" type="button" value="Remove handler" /><br />

    // <span id="message"></span>


    (function () {
        "use strict";

        // The initialize function must be run each time a new page is loaded.
        Office.initialize = function (reason) {
            $(document).ready(function () {

                // After the DOM is loaded, add-in-specific code can run.
                Office.context.document.addHandlerAsync(
                    Office.EventType.ResourceSelectionChanged,
                    getResourceGuid);
                $('#remove-handler').click(removeEventHandler);
            });
        };

        // Remove the event handler.
        function removeEventHandler() {
            Office.context.document.removeHandlerAsync(
                Office.EventType.ResourceSelectionChanged,
                {handler:getResourceGuid,
                asyncContext:'The handler is removed.'},
                function (result) {
                    if (result.status === Office.AsyncResultStatus.Failed) {
                        onError(result.error);
                    }
                    else {
                        $('#remove-handler').attr('disabled', 'disabled');
                        $('#message').html(result.asyncContext);
                    }
                }
            );
        }

        // Get the GUID of the currently selected resource and display it in the add-in.
        function getResourceGuid() {
            Office.context.document.getSelectedResourceAsync(
                function (result) {
                    if (result.status === Office.AsyncResultStatus.Failed) {
                        onError(result.error);
                    }
                    else {
                        $('#message').html('Resource GUID: ' + result.value);
                    }
                }
            );
        }

        function onError(error) {
            $('#message').html(error.name + ' ' + error.code + ': ' + error.message);
        }
    })();

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'removeHandlerAsync(eventType: Office.EventType, callback?: (result: AsyncResult<void>) => void): void;'
    parameters:
    - id: eventType
      description: Тип события. Для Document можно указать "Document. SelectionChanged" или "Document. ActiveViewChanged".
      type: <xref uid="office!Office.EventType:enum" />
    - id: callback
      description: Необязательный атрибут. Функция, вызываемая при возвращении обратного вызова, единственный параметр которой имеет тип [Office. AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;void&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: setResourceFieldAsync(resourceId, fieldId, fieldValue, options, callback)
  uid: office!Office.Document#setResourceFieldAsync:member(1)
  package: office!
  fullName: setResourceFieldAsync(resourceId, fieldId, fieldValue, options, callback)
  summary: >-
    Только документы Project. Задание поля ресурса для указанного идентификатора ресурса.


    **Важно!** этот API работает только в Project 2016 на настольном компьютере с Windows.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'setResourceFieldAsync(resourceId: string, fieldId: number, fieldValue: string | number | boolean | object, options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<void>) => void): void;'
    parameters:
    - id: resourceId
      description: Строка или значение идентификатора ресурса.
      type: string
    - id: fieldId
      description: Поля ресурсов.
      type: number
    - id: fieldValue
      description: Значение целевого поля.
      type: string | number | boolean | object
    - id: options
      description: Предоставляет параметр для сохранения данных контекста любого типа без изменений для использования при обратном вызове.
      type: <xref uid="office!Office.AsyncContextOptions:interface" />
    - id: callback
      description: Необязательный атрибут. Функция, вызываемая при возвращении обратного вызова, единственный параметр которой имеет тип [Office. AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;void&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: setResourceFieldAsync(resourceId, fieldId, fieldValue, callback)
  uid: office!Office.Document#setResourceFieldAsync:member(2)
  package: office!
  fullName: setResourceFieldAsync(resourceId, fieldId, fieldValue, callback)
  summary: >-
    Только документы Project. Задание поля ресурса для указанного идентификатора ресурса.


    **Важно!** этот API работает только в Project 2016 на настольном компьютере с Windows.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'setResourceFieldAsync(resourceId: string, fieldId: number, fieldValue: string | number | boolean | object, callback?: (result: AsyncResult<void>) => void): void;'
    parameters:
    - id: resourceId
      description: Строка или значение идентификатора ресурса.
      type: string
    - id: fieldId
      description: Поля ресурсов.
      type: number
    - id: fieldValue
      description: Значение целевого поля.
      type: string | number | boolean | object
    - id: callback
      description: Необязательный атрибут. Функция, вызываемая при возвращении обратного вызова, единственный параметр которой имеет тип [Office. AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;void&gt;) =&gt; void'
    return:
      type: void
      description: "\n\n#### <a name=\"examples\"></a>Примеры\n\n```javascript\n// The following code example calls getSelectedResourceAsync to get the GUID of the resource that's\n// currently selected in a resource view. Then it sets two resource field values by calling\n// setResourceFieldAsync recursively.\n// The getSelectedTaskAsync method used in the example requires that a task view\n// (for example, Task Usage) is the active view and that a task is selected. See the addHandlerAsync\n// method for an example that activates a button based on the active view type.\n// The example assumes your add-in has a reference to the jQuery library and that the\n// following page controls are defined in the content div in the page body:\n// <input id=\"set-info\" type=\"button\" value=\"Set info\" /><br />\n// <span id=\"message\"></span>\n\n(function () {\n    \"use strict\";\n\n    // The initialize function must be run each time a new page is loaded.\n    Office.initialize = function (reason) {\n        $(document).ready(function () {\n\n            // After the DOM is loaded, add-in-specific code can run.\n            app.initialize();\n            $('#set-info').click(setResourceInfo);\n        });\n    };\n\n    // Get the GUID of the resource, and then get the resource fields.\n    function setResourceInfo() {\n        getResourceGuid().then(\n            function (data) {\n                setResourceFields(data);\n            }\n        );\n    }\n\n    // Get the GUID of the selected resource.\n    function getResourceGuid() {\n        var defer = $.Deferred();\n        Office.context.document.getSelectedResourceAsync(\n            function (result) {\n                if (result.status === Office.AsyncResultStatus.Failed) {\n                    onError(result.error);\n                }\n                else {\n                    defer.resolve(result.value);\n                }\n            }\n        );\n        return defer.promise();\n    }\n\n    // Set the specified fields for the selected resource.\n    function setResourceFields(resourceGuid) {\n        var targetFields = [Office.ProjectResourceFields.StandardRate, Office.ProjectResourceFields.Notes];\n        var fieldValues = [.28, 'Notes for the resource.'];\n\n        // Set the field value. If the call is successful, set the next field.\n        for (var i = 0; i < targetFields.length; i++) {\n            Office.context.document.setResourceFieldAsync(\n                resourceGuid,\n                targetFields[i],\n                fieldValues[i],\n                function (result) {\n                    if (result.status === Office.AsyncResultStatus.Succeeded) {\n                        i++;\n                    }\n                    else {\n                        onError(result.error);\n                    }\n                }\n            );\n        }\n        $('#message').html('Field values set');\n    }\n\n    function onError(error) {\n        app.showNotification(error.name + ' ' + error.code + ': ' + error.message);\n    }\n})();\n```"
- name: setSelectedDataAsync(data, options, callback)
  uid: office!Office.Document#setSelectedDataAsync:member(1)
  package: office!
  fullName: setSelectedDataAsync(data, options, callback)
  summary: Записывает указанные данные в текущий выделенный фрагмент.
  remarks: "**Наборы требований**:\n\n- [HtmlCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#htmlcoercion)<!-- -->(при использовании `Office.CoercionType.Html`<!-- -->)\n\n- [Использовать imagecoercion 1,1](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/image-coercion-requirement-sets) (при использовании `Office.CoercionType.Image`<!-- -->)\n\n- [МатрикскоерЦион](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#matrixcoercion) (при использовании `Office.CoercionType.Matrix`<!-- -->)\n\n- [УксмлкоерЦион](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#ooxmlcoercion) (при использовании `Office.CoercionType.Ooxml`<!-- -->)\n\n- [Selection](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#selection)\n\n- [ТаблекоерЦион](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#tablecoercion) (при использовании `Office.CoercionType.Table`<!-- -->)\n\n- [ТексткоерЦион](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#textcoercion) (при использовании `Office.CoercionType.Text`<!-- -->)\n\n- [Использовать imagecoercion 1,2](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/image-coercion-requirement-sets#imagecoercion-12) (при использовании `Office.CoercionType.XmlSvg`<!-- -->)\n\n**Поведение, связанное с определенными приложениями**\n\nПри записи данных в выделенный фрагмент применяются следующие действия, зависящие от приложения.\n\n<table> <tr> <td>Word</td> <td>Если выделенный фрагмент отсутствует, а точка вставки находится в допустимом расположении, то заданное положение `data` вставляется в точку вставки.</td> <td>Если `data` строка является строкой, вставляется указанный текст.</td> </tr> <tr> <td></td> <td></td> <td>Если `data` это массив массивов (\"Matrix\") или объект TableData, вставляется новая таблица Word.</td> </tr> <tr> <td></td> <td></td> <td>Если `data` это HTML-код, вставляется указанный HTML-код. (**Важно**! если какой-либо из вставленных вами HTML не является допустимым, Word не будет возникнет ошибка. Word вставит как можно больше кода HTML, так как он может опускать недопустимые данные.</td> </tr> <tr> <td></td> <td></td> <td>Если `data` это Office Open XML, вставляется указанный XML-код.</td> </tr> <tr> <td></td> <td></td> <td>Если `data` это поток образа с кодировкой base64, вставляется указанный образ.</td> </tr> <tr> <td></td> <td>Если выделен фрагмент</td> <td>Он будет заменен на указанные ниже правила, описанные `data` ниже.</td> </tr> <tr> <td></td> <td>Вставка изображений</td> <td>Вставленные изображения помещаются в тексте. Параметры imageLeft и imageTop игнорируются. Пропорции изображения всегда блокируются. Если задан только параметр imageWidth или imageHeight, второе значение будет подобрано автоматически с учетом исходных пропорций.</td> </tr>\n\n<tr> <td>Excel</td> <td>Если выбрана одна ячейка</td> <td>Если `data` строка является строкой, указанный текст вставляется в качестве значения текущей ячейки.</td> </tr> <tr> <td></td> <td></td> <td>Если `data` это массив массивов (\"Matrix\"), вставляется заданный набор строк и столбцов, если при этом не будут перезаписаны другие данные в соседних ячейках.</td> </tr> <tr> <td></td> <td></td> <td>Если `data` объект TableData, вставляется новая таблица Excel с заданным набором строк и заголовков, если при этом не будут перезаписаны другие данные в соседних ячейках.</td> </tr> <tr> <td></td> <td>Если выделено несколько ячеек</td> <td>If the shape does not match the shape of `data`<!-- -->, возвращается ошибка.</td> </tr> <tr> <td></td> <td></td> <td>If the shape of the selection exactly matches the shape of `data`<!-- -->значения выбранных ячеек обновляются в соответствии со значениями в `data`<!-- -->.</td> </tr> <tr> <td></td> <td>Вставка изображений</td> <td>Вставляются плавающие изображения. Параметры положения imageLeft и imageTop указываются относительно выделенных ячеек. Отрицательные значения imageLeft и imageTop допустимы и могут быть откорректированы Excel для размещения изображения в пределах листа. Пропорции изображения блокируются, если не указан каждый из параметров imageWidth и imageHeight. Если задан только параметр imageWidth или только параметр imageHeight, второе значение будет подобрано автоматически с учетом исходных пропорций.</td> </tr> <tr> <td></td> <td>Все остальные случаи</td> <td>Возвращается ошибка.</td> </tr>\n\n<tr> <td>Excel в Интернете</td> <td>В дополнение к поведению, описанному для Excel выше, эти пределы применяются при записи данных в Excel в Интернете</td> <td>Общее число ячеек, которые можно записать на лист с `data` параметром, не может превышать 20 000 в отдельном вызове этого метода.</td> </tr> <tr> <td></td> <td></td> <td>Количество групп форматирования, переданных в `cellFormat` параметр, не может превышать 100. Одна группа форматирования состоит из набора вариантов форматирования, применяемого к указанному диапазону ячеек.</td> </tr>\n\n<tr> <td>PowerPoint</td> <td>Вставка изображения</td> <td>Вставляются плавающие изображения. Параметры Position imageLeft и imageTop необязательны, но если указаны, оба должны присутствовать. Если указано одно значение, оно игнорируется. Отрицательные значения imageLeft и imageTop допустимы и позволяют разместить изображение за пределами слайда. Если не указано ни одного необязательного параметра, а слайд содержит заполнитель, изображение заменит заполнитель в слайде. Пропорции изображения блокируются, если не указан каждый из параметров imageWidth и imageHeight. Если задан только параметр imageWidth или только параметр imageHeight, второе значение будет подобрано автоматически с учетом исходных пропорций.</td> </tr> </table>\n\n**Поведение, зависящее от типа**\n\n<table> <tr> <td>`Office.CoercionType.XmlSvg`</td> <td>(Только для Excel): в сборках Excel между 16.0.11526.10000 и 16.0.12309.10000 для вставок SVG существует ограничение размера в 64 КБ.</td> </tr> </table>\n\n**Hosts**\n\nДопустимые значения параметра [Office. CoercionType](xref:office!Office.CoercionType:enum) зависят от узла.\n\n<table> <tr> <th>Host</th> <th>Поддерживаемое значение coercionType</th> </tr> <tr> <td>Excel, PowerPoint, Project и Word</td> <td>`Office.CoercionType.Text` substring</td> </tr> <tr> <td>Excel и Word</td> <td>`Office.CoercionType.Matrix` (массив массивов)</td> </tr> <tr> <td>Excel и Word</td> <td>`Office.CoercionType.Table` (Объект TableData)</td> </tr> <tr> <td>Word</td> <td>`Office.CoercionType.Html`</td> </tr> <tr> <td>Word</td> <td>`Office.CoercionType.Ooxml` (Office Open XML)</td> </tr> <tr> <td>PowerPoint в Интернете и Windows</td> <td>`Office.CoercionType.SlideRange`</td> </tr> <tr> <td>Excel, PowerPoint и Word</td> <td>`Office.CoercionType.XmlSvg`</td> </tr> </table>\n\n#### <a name=\"examples\"></a>Примеры\n\n```javascript\n// The following example sets the selected text or cell to \"Hello World!\", \n// and if that fails, displays the value of the error.message property.\nfunction writeText() {\n    Office.context.document.setSelectedDataAsync(\"Hello World!\",\n        function (asyncResult) {\n            var error = asyncResult.error;\n            if (asyncResult.status === Office.AsyncResultStatus.Failed){\n                write(error.name + \": \" + error.message);\n            }\n        });\n}\n\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n\n// Specifying the optional coercionType parameter lets you specify the kind of data you want to write\n// to a selection. The following example writes data as an array of three rows of two columns, \n// specifying the coercionType as `Matrix` for that data structure, and if that fails, \n// displays the value of the error.message property.\nfunction writeMatrix() {\n    Office.context.document.setSelectedDataAsync(\n        [[\"Red\", \"Rojo\"], [\"Green\", \"Verde\"], [\"Blue\", \"Azul\"]],\n        {coercionType: Office.CoercionType.Matrix}\n        function (asyncResult) {\n            var error = asyncResult.error;\n            if (asyncResult.status === Office.AsyncResultStatus.Failed){\n                write(error.name + \": \" + error.message);\n            }\n        });\n}\n\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n\n// The following example writes data as a one column table with a header and four rows, \n// specifying the coercionType as `Table` for that data structure, and if that fails, \n// displays the value of the error.message property.\nfunction writeTable() {\n    // Build table.\n    var myTable = new Office.TableData();\n    myTable.headers = [[\"Cities\"]];\n    myTable.rows = [['Berlin'], ['Roma'], ['Tokyo'], ['Seattle']];\n\n    // Write table.\n    Office.context.document.setSelectedDataAsync(myTable, {coercionType: Office.CoercionType.Table},\n        function (result) {\n            var error = result.error\n            if (result.status === Office.AsyncResultStatus.Failed) {\n                write(error.name + \": \" + error.message);\n            }\n    });\n}\n\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n\n// In Word if you want to write HTML to the selection, you can specify the coercionType parameter as `Html`\n// as shown in the following example, which uses HTML <b> tags to make \"Hello\" bold.\nfunction writeHtmlData() {\n    Office.context.document.setSelectedDataAsync(\n        \"<b>Hello</b> World!\", {coercionType: Office.CoercionType.Html}, function (asyncResult) {\n            if (asyncResult.status === Office.AsyncResultStatus.Failed) {\n                write('Error: ' + asyncResult.error.message);\n            }\n    });\n}\n\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n\n// In Word, PowerPoint, or Excel, if you want to write an image to the selection, you can specify the coercionType\n// parameter as `Image` as shown in the following example. Note that imageLeft and imageTop are ignored by Word.\nfunction insertPictureAtSelection(base64EncodedImageStr) {\n\n    Office.context.document.setSelectedDataAsync(base64EncodedImageStr, {\n        coercionType: Office.CoercionType.Image,\n        imageLeft: 50,\n        imageTop: 50,\n        imageWidth: 100,\n        imageHeight: 100\n    },\n    function (asyncResult) {\n        if (asyncResult.status === Office.AsyncResultStatus.Failed) {\n            console.log(\"Action failed with error: \" + asyncResult.error.message);\n        }\n    });\n}\n\n// In Word, PowerPoint, or Excel, if you want to write an scalable vector graphic (SVG) to the selection, you can specify the \n// coercionType parameter as `XmlSvg` as shown in the following example. Note that imageLeft and imageTop are ignored by Word.\nfunction insertSvgAtSelection(base64EncodedImageStr) {\n    Office.context.document.setSelectedDataAsync(getImageAsBase64String(), {\n        coercionType: Office.CoercionType.XmlSvg,\n        imageLeft: 50,\n        imageTop: 50,\n        imageWidth: 400\n    },\n        function (asyncResult) {\n            if (asyncResult.status === Office.AsyncResultStatus.Failed) {\n                console.log(asyncResult.error.message);\n            }\n        });\n}\n```"
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'setSelectedDataAsync(data: string | TableData | any[][], options?: SetSelectedDataOptions, callback?: (result: AsyncResult<void>) => void): void;'
    parameters:
    - id: data
      description: >-
        Данные, которые необходимо задать. Строка или значение [Office. CoercionType](xref:office!Office.CoercionType:enum) , 2D-массив или объект TableData.


        Если значение передано `data` :


        - Строка. Записывается обычный текст или другие данные, которые могут быть приведены к типу string. В Excel можно также указать данные в виде допустимой формулы, чтобы добавить эту формулу в выбранную ячейку. Например, если для data указать "=SUM(A1:A5)", будут получены итоговые значения в указанном диапазоне. Если задать формулу в связанной ячейке, добавленную (или существующую) формулу в этой ячейке будет невозможно считать. При вызове метода Document.getSelectedDataAsync в выделенной ячейке для считывания ее данных этот метод может возвращать только данные, отображаемые в ячейке (результат формулы).


        - Массив массивов ("matrix"). Будут вставлены табличные данные без заголовков. Например, чтобы записать данные в три строки в двух столбцах, можно передать массив следующим образом: \[ \[ "R1C1", "R1C2" \] , \[ "R2C1", "R2C2" \] , \[ "R3C1", "R3C2" \] \] . Чтобы записать один столбец из трех строк, передайте массив следующим образом: \[ \[ "R1C1" \] , \[ "R2C1" \] , \[ "R3C1"\]\]


        В Excel вы также можете указать data как массив массивов, содержащих допустимые формулы, чтобы добавить их в выбранные ячейки. Например, если никакие другие данные не будут перезаписаны, то для параметра data \[ \[ — "= Sum (a1: A5)", "= СРЗНАЧ (a1: A5)" \] \] будут добавлены эти две формулы к выделенному фрагменту. Как и при указании формулы в одной ячейке в текстовом виде, добавленные (или существующие) формулы невозможно считывать после того, как они заданы. Вы можете считывать только результаты формул.


        - Объект TableData Вставляются табличные данные с заголовками. Если вы укажете в Excel формулы в объекте TableData, который вы передаете для параметра data, вы можете не получить ожидаемые результаты, потому что функция "вычисляемые столбцы" Excel автоматически копирует формулы в столбце. Чтобы обойти эту проблему, если вы хотите записать `data` формулы в выбранную таблицу, попробуйте указать данные в виде массива массивов (вместо объекта TableData) и укажите coercionType как Microsoft. Office. Matrix или "Matrix". Однако этот метод блокирует функцию "вычисляемые столбцы" только при выполнении одного из следующих условий: (1) вы пишете во все ячейки столбца или (2) в столбце уже есть по крайней мере две разные формулы.
      type: string | <xref uid="office!Office.TableData:class" /> | any[][]
    - id: options
      description: Предоставляет варианты вставки данных в выделенный фрагмент.
      type: <xref uid="office!Office.SetSelectedDataOptions:interface" />
    - id: callback
      description: Необязательный атрибут. Функция, вызываемая при возвращении обратного вызова, единственный параметр которой имеет тип [Office. AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. Свойство AsyncResult. Value всегда возвращает значение undefine, так как нет объекта или данных для извлечения.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;void&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: setSelectedDataAsync(data, callback)
  uid: office!Office.Document#setSelectedDataAsync:member(2)
  package: office!
  fullName: setSelectedDataAsync(data, callback)
  summary: Записывает указанные данные в текущий выделенный фрагмент.
  remarks: >-
    **Наборы требований**:


    - [HtmlCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#htmlcoercion)<!-- -->(при использовании `Office.CoercionType.Html`<!-- -->)


    - [Использовать imagecoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/image-coercion-requirement-sets) (при использовании `Office.CoercionType.Image`<!-- -->)


    - [МатрикскоерЦион](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#matrixcoercion) (при использовании `Office.CoercionType.Matrix`<!-- -->)


    - [УксмлкоерЦион](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#ooxmlcoercion) (при использовании `Office.CoercionType.Ooxml`<!-- -->)


    - [Selection](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#selection)


    - [ТаблекоерЦион](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#tablecoercion) (при использовании `Office.CoercionType.Table`<!-- -->)


    - [ТексткоерЦион](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#textcoercion) (при использовании `Office.CoercionType.Text`<!-- -->)


    - [Использовать imagecoercion 1,2](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/image-coercion-requirement-sets#imagecoercion-12) (при использовании `Office.CoercionType.XmlSvg`<!-- -->)


    **Поведение, связанное с определенными приложениями**


    При записи данных в выделенный фрагмент применяются следующие действия, зависящие от приложения.


    <table> <tr> <td>Word</td> <td>Если выделенный фрагмент отсутствует, а точка вставки находится в допустимом расположении, то заданное положение `data` вставляется в точку вставки.</td> <td>Если `data` строка является строкой, вставляется указанный текст.</td> </tr> <tr> <td></td> <td></td> <td>Если `data` это массив массивов ("Matrix") или объект TableData, вставляется новая таблица Word.</td> </tr> <tr> <td></td> <td></td> <td>Если `data` это HTML-код, вставляется указанный HTML-код. (**Важно**! если какой-либо из вставленных вами HTML не является допустимым, Word не будет возникнет ошибка. Word вставит как можно больше кода HTML, так как он может опускать недопустимые данные.</td> </tr> <tr> <td></td> <td></td> <td>Если `data` это Office Open XML, вставляется указанный XML-код.</td> </tr> <tr> <td></td> <td></td> <td>Если `data` это поток образа с кодировкой base64, вставляется указанный образ.</td></tr></td> </tr> <tr> <td></td> <td>Если выделен фрагмент</td> <td>Он будет заменен на указанные ниже правила, описанные `data` ниже.</td> </tr> <tr> <td></td> <td>Вставка изображений</td> <td>Вставленные изображения помещаются в тексте. Параметры imageLeft и imageTop игнорируются. Пропорции изображения всегда блокируются. Если задан только параметр imageWidth или imageHeight, второе значение будет подобрано автоматически с учетом исходных пропорций.</td> </tr>


    <tr> <td>Excel</td> <td>Если выбрана одна ячейка</td> <td>Если `data` строка является строкой, указанный текст вставляется в качестве значения текущей ячейки.</td> </tr> <tr> <td></td> <td></td> <td>Если `data` это массив массивов ("Matrix"), вставляется заданный набор строк и столбцов, если при этом не будут перезаписаны другие данные в соседних ячейках.</td> </tr> <tr> <td></td> <td></td> <td>Если `data` объект TableData, вставляется новая таблица Excel с заданным набором строк и заголовков, если при этом не будут перезаписаны другие данные в соседних ячейках.</td> </tr> <tr> <td></td> <td>Если выделено несколько ячеек</td><td>If the shape does not match the shape of `data`<!-- -->, возвращается ошибка.</td> </tr> <tr> <td></td> <td></td> <td>If the shape of the selection exactly matches the shape of `data`<!-- -->значения выбранных ячеек обновляются в соответствии со значениями в `data`<!-- -->.</td> </tr> <tr> <td></td> <td>Вставка изображений</td> <td>Вставляются плавающие изображения. Параметры положения imageLeft и imageTop указываются относительно выделенных ячеек. Отрицательные значения imageLeft и imageTop допустимы и могут быть откорректированы Excel для размещения изображения в пределах листа. Пропорции изображения блокируются, если не указан каждый из параметров imageWidth и imageHeight. Если задан только параметр imageWidth или только параметр imageHeight, второе значение будет подобрано автоматически с учетом исходных пропорций.</td> </tr> <tr> <td></td> <td>Все остальные случаи</td> <td>Возвращается ошибка.</td> </tr>


    <tr> <td>Excel в Интернете</td> <td>В дополнение к поведению, описанному для Excel выше, эти пределы применяются при записи данных в Excel в Интернете</td> <td>Общее число ячеек, которые можно записать на лист с `data` параметром, не может превышать 20 000 в отдельном вызове этого метода.</td> </tr> <tr> <td></td> <td></td> <td>Количество групп форматирования, переданных в `cellFormat` параметр, не может превышать 100. Одна группа форматирования состоит из набора вариантов форматирования, применяемого к указанному диапазону ячеек.</td> </tr>


    <tr> <td>PowerPoint</td> <td>Вставка изображения</td> <td>Вставляются плавающие изображения. Параметры Position imageLeft и imageTop необязательны, но если указаны, оба должны присутствовать. Если указано одно значение, оно игнорируется. Отрицательные значения imageLeft и imageTop допустимы и позволяют разместить изображение за пределами слайда. Если не указано ни одного необязательного параметра, а слайд содержит заполнитель, изображение заменит заполнитель в слайде. Пропорции изображения блокируются, если не указан каждый из параметров imageWidth и imageHeight. Если задан только параметр imageWidth или только параметр imageHeight, второе значение будет подобрано автоматически с учетом исходных пропорций.</td> </tr> </table>


    **Поведение, зависящее от типа**


    <table> <tr> <td>`Office.CoercionType.XmlSvg`</td> <td>(Только для Excel): существуют ограничения на размер 64 КБ для вставок SVG в соответствии с построением 16.0.11526.10000.</td> </tr> </table>


    **Hosts**


    Допустимые значения параметра [Office. CoercionType](xref:office!Office.CoercionType:enum) зависят от узла.


    <table> <tr> <th>Host</th> <th>Поддерживаемое значение coercionType</th> </tr> <tr> <td>Excel, PowerPoint, Project и Word</td> <td>`Office.CoercionType.Text` substring</td> </tr> <tr> <td>Excel и Word</td> <td>`Office.CoercionType.Matrix` (массив массивов)</td> </tr> <tr> <td>Excel и Word</td> <td>`Office.CoercionType.Table` (Объект TableData)</td> </tr> <tr> <td>Word</td> <td>`Office.CoercionType.Html`</td> </tr> <tr> <td>Word</td> <td>`Office.CoercionType.Ooxml` (Office Open XML)</td> </tr> <tr> <td>PowerPoint в Интернете и Windows</td> <td>`Office.CoercionType.SlideRange`</td> </tr> <tr> <td>Excel, PowerPoint и Word</td> <td>`Office.CoercionType.XmlSvg`</td> </tr> </table>
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'setSelectedDataAsync(data: string | TableData | any[][], callback?: (result: AsyncResult<void>) => void): void;'
    parameters:
    - id: data
      description: >-
        Данные, которые необходимо задать. Строка или значение [Office. CoercionType](xref:office!Office.CoercionType:enum) , 2D-массив или объект TableData.


        Если значение передано `data` :


        - Строка. Записывается обычный текст или другие данные, которые могут быть приведены к типу string. В Excel можно также указать данные в виде допустимой формулы, чтобы добавить эту формулу в выбранную ячейку. Например, если для data указать "=SUM(A1:A5)", будут получены итоговые значения в указанном диапазоне. Если задать формулу в связанной ячейке, добавленную (или существующую) формулу в этой ячейке будет невозможно считать. При вызове метода Document.getSelectedDataAsync в выделенной ячейке для считывания ее данных этот метод может возвращать только данные, отображаемые в ячейке (результат формулы).


        - Массив массивов ("matrix"). Будут вставлены табличные данные без заголовков. Например, чтобы записать данные в три строки в двух столбцах, можно передать массив следующим образом: \[ \[ "R1C1", "R1C2" \] , \[ "R2C1", "R2C2" \] , \[ "R3C1", "R3C2" \] \] . Чтобы записать один столбец из трех строк, передайте массив следующим образом: \[ \[ "R1C1" \] , \[ "R2C1" \] , \[ "R3C1"\]\]


        В Excel вы также можете указать data как массив массивов, содержащих допустимые формулы, чтобы добавить их в выбранные ячейки. Например, если никакие другие данные не будут перезаписаны, то для параметра data \[ \[ — "= Sum (a1: A5)", "= СРЗНАЧ (a1: A5)" \] \] будут добавлены эти две формулы к выделенному фрагменту. Как и при указании формулы в одной ячейке в текстовом виде, добавленные (или существующие) формулы невозможно считывать после того, как они заданы. Вы можете считывать только результаты формул.


        - Объект TableData Вставляются табличные данные с заголовками. Если вы укажете в Excel формулы в объекте TableData, который вы передаете для параметра data, вы можете не получить ожидаемые результаты, потому что функция "вычисляемые столбцы" Excel автоматически копирует формулы в столбце. Чтобы обойти эту проблему, если вы хотите записать `data` формулы в выбранную таблицу, попробуйте указать данные в виде массива массивов (вместо объекта TableData) и укажите coercionType как Microsoft. Office. Matrix или "Matrix". Однако этот метод блокирует функцию "вычисляемые столбцы" только при выполнении одного из следующих условий: (1) вы пишете во все ячейки столбца или (2) в столбце уже есть по крайней мере две разные формулы.
      type: string | <xref uid="office!Office.TableData:class" /> | any[][]
    - id: callback
      description: Необязательный атрибут. Функция, вызываемая при возвращении обратного вызова, единственный параметр которой имеет тип [Office. AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. Свойство AsyncResult. Value всегда возвращает значение undefine, так как нет объекта или данных для извлечения.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;void&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: setTaskFieldAsync(taskId, fieldId, fieldValue, options, callback)
  uid: office!Office.Document#setTaskFieldAsync:member(1)
  package: office!
  fullName: setTaskFieldAsync(taskId, fieldId, fieldValue, options, callback)
  summary: >-
    Только документы Project. Задание поля задачи для указанного идентификатора задачи.


    **Важно!** этот API работает только в Project 2016 на настольном компьютере с Windows.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'setTaskFieldAsync(taskId: string, fieldId: number, fieldValue: string | number | boolean | object, options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<void>) => void): void;'
    parameters:
    - id: taskId
      description: Строка или значение идентификатора задачи.
      type: string
    - id: fieldId
      description: Поля задач.
      type: number
    - id: fieldValue
      description: Значение целевого поля.
      type: string | number | boolean | object
    - id: options
      description: Предоставляет параметр для сохранения данных контекста любого типа без изменений для использования при обратном вызове.
      type: <xref uid="office!Office.AsyncContextOptions:interface" />
    - id: callback
      description: Необязательный атрибут. Функция, вызываемая при возвращении обратного вызова, единственный параметр которой имеет тип [Office. AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;void&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: setTaskFieldAsync(taskId, fieldId, fieldValue, callback)
  uid: office!Office.Document#setTaskFieldAsync:member(2)
  package: office!
  fullName: setTaskFieldAsync(taskId, fieldId, fieldValue, callback)
  summary: >-
    Только документы Project. Задание поля задачи для указанного идентификатора задачи.


    **Важно!** этот API работает только в Project 2016 на настольном компьютере с Windows.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'setTaskFieldAsync(taskId: string, fieldId: number, fieldValue: string | number | boolean | object, callback?: (result: AsyncResult<void>) => void): void;'
    parameters:
    - id: taskId
      description: Строка или значение идентификатора задачи.
      type: string
    - id: fieldId
      description: Поля задач.
      type: number
    - id: fieldValue
      description: Значение целевого поля.
      type: string | number | boolean | object
    - id: callback
      description: Необязательный атрибут. Функция, вызываемая при возвращении обратного вызова, единственный параметр которой имеет тип [Office. AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;void&gt;) =&gt; void'
    return:
      type: void
      description: "\n\n#### <a name=\"examples\"></a>Примеры\n\n```javascript\n// The following code example calls getSelectedTaskAsync to get the GUID of the task that's\n// currently selected in a task view. Then it sets two task field values by calling\n// setTaskFieldAsync recursively.\n// The getSelectedTaskAsync method used in the example requires that a task view\n// (for example, Task Usage) is the active view and that a task is selected. See the\n// addHandlerAsync method for an example that activates a button based on the active view type.\n// The example assumes your add-in has a reference to the jQuery library and that the\n// following page controls are defined in the content div in the page body:\n// <input id=\"set-info\" type=\"button\" value=\"Set info\" /><br />\n// <span id=\"message\"></span>\n\n(function () {\n    \"use strict\";\n\n    // The initialize function must be run each time a new page is loaded.\n    Office.initialize = function (reason) {\n        $(document).ready(function () {\n            \n            // After the DOM is loaded, add-in-specific code can run.\n            app.initialize();\n            $('#set-info').click(setTaskInfo);\n        });\n    };\n\n    // Get the GUID of the task, and then get the task fields.\n    function setTaskInfo() {\n        getTaskGuid().then(\n            function (data) {\n                setTaskFields(data);\n            }\n        );\n    }\n\n    // Get the GUID of the selected task.\n    function getTaskGuid() {\n        var defer = $.Deferred();\n        Office.context.document.getSelectedTaskAsync(\n            function (result) {\n                if (result.status === Office.AsyncResultStatus.Failed) {\n                    onError(result.error);\n                }\n                else {\n                    defer.resolve(result.value);\n                }\n            }\n        );\n        return defer.promise();\n    }\n\n    // Set the specified fields for the selected task.\n    function setTaskFields(taskGuid) {\n        var targetFields = [Office.ProjectTaskFields.Active, Office.ProjectTaskFields.Notes];\n        var fieldValues = [true, 'Notes for the task.'];\n\n        // Set the field value. If the call is successful, set the next field.\n        for (var i = 0; i < targetFields.length; i++) {\n            Office.context.document.setTaskFieldAsync(\n                taskGuid,\n                targetFields[i],\n                fieldValues[i],\n                function (result) {\n                    if (result.status === Office.AsyncResultStatus.Succeeded) {\n                        i++;\n                    }\n                    else {\n                        onError(result.error);\n                    }\n                }\n            );\n        }\n        $('#message').html('Field values set');\n    }\n\n    function onError(error) {\n        app.showNotification(error.name + ' ' + error.code + ': ' + error.message);\n    }\n})();\n```"
metadata:
  ms.openlocfilehash: 2a56c1459ba92f4cc0062babd1a613bbbd51928f
  ms.sourcegitcommit: 3bab97ab3b91da7cca497f6fc895408a76bd8b46
  ms.translationtype: MT
  ms.contentlocale: ru-RU
  ms.lasthandoff: 11/18/2020
  ms.locfileid: "49143542"
