### YamlMime:TSType
name: Office.TableBinding
uid: office!Office.TableBinding:interface
package: office!
fullName: Office.TableBinding
summary: Представляет привязку в двух измерениях строк и столбцов, при желании с заголовками.
remarks: >-
  Объект TableBinding наследует `id` `type` свойство, свойство, метод и метод от объекта `getDataAsync` `setDataAsync` [Office.Binding.](xref:office!Office.Binding:interface)


  Для Excel обратите внимание, что после создания привязки таблицы каждая новая строка, которую пользователь добавляет в таблицу, автоматически включается в привязку, а строка Увеличивается.
isPreview: false
isDeprecated: false
type: interface
properties:
- name: columnCount
  uid: office!Office.TableBinding#columnCount:member
  package: office!
  fullName: columnCount
  summary: Получает количество столбцов в TableBinding в качестве значения integer.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'columnCount: number;'
    return:
      type: number
      description: "\n\n#### <a name=\"examples\"></a>Примеры\n\n```javascript\nfunction showBindingColumnCount() {\n    Office.context.document.bindings.getByIdAsync(\"myBinding\", function (asyncResult) {\n        write(\"Column: \" + asyncResult.value.columnCount);\n    });\n}\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n```"
- name: hasHeaders
  uid: office!Office.TableBinding#hasHeaders:member
  package: office!
  fullName: hasHeaders
  summary: Правда, если в таблице есть заготки; в противном случае false.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'hasHeaders: boolean;'
    return:
      type: boolean
      description: "\n\n#### <a name=\"examples\"></a>Примеры\n\n```javascript\nfunction showBindingHasHeaders() {\n    Office.context.document.bindings.getByIdAsync(\"myBinding\", function (asyncResult) {\n        write(\"Binding has headers: \" + asyncResult.value.hasHeaders);\n    });\n}\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n```"
- name: rowCount
  uid: office!Office.TableBinding#rowCount:member
  package: office!
  fullName: rowCount
  summary: Получает количество строк в TableBinding в качестве значения integer.
  remarks: "Если вставить пустую таблицу, выбрав одну строку в Excel 2013 и Excel в Интернете (с помощью таблицы на вкладке Вставить), оба приложения-хост Office создают одну строку заглавных заглавок, а затем одну пустую строку. Однако если сценарий надстройки создает привязку для этой недавно вставленной таблицы (например, с помощью [Office.Bindings](xref:office!Office.Bindings:interface)<!-- -->Метод .addFromSelectionAsync, а затем проверяет значение свойства rowCount, возвращаемого значения будет отличаться в зависимости от того, открыта ли таблица в Excel 2013 или Excel в Интернете.\n\n- В Excel на рабочем столе rowCount возвращает 0 (пустая строка, следующая за заглавными, не учитывается).\n\n- В Excel в Интернете rowCount возвращает 1 (засчитываются пустые строки, следующие за заглавными).\n\nЧтобы избежать разницы в сценарии, проверьте значение rowCount == 1, если да, проверьте все ли строки являются незаполненными.\n\n#### <a name=\"examples\"></a>Примеры\n\n```javascript\nfunction showBindingRowCount() {\n    Office.context.document.bindings.getByIdAsync(\"myBinding\", function (asyncResult) {\n        write(\"Rows: \" + asyncResult.value.rowCount);\n    });\n}\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n```"
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'rowCount: number;'
    return:
      type: number
methods:
- name: addColumnsAsync(tableData, options, callback)
  uid: office!Office.TableBinding#addColumnsAsync:member(1)
  package: office!
  fullName: addColumnsAsync(tableData, options, callback)
  summary: Добавляет указанные данные в таблицу в качестве дополнительных столбцов.
  remarks: >-
    Чтобы добавить один или несколько столбцов с указанием значений данных и загона, передайте объект TableData в качестве параметра данных. Чтобы добавить один или несколько столбцов только с данными, передайте в качестве параметра data массив массивов ("матрицу").


    Успех или сбой операции addColumnsAsync является атомной. То есть либо вся операция добавления столбцов выполняется успешно, либо происходит полный откат (и свойство AsyncResult.status, возвращенное в обратный вызов, будет содержать сведения об ошибке).


    - Каждая строка в массиве, который вы передаете в качестве аргумента данных, должна иметь такое же количество строк, как и обновляемая таблица. В противном случае вся операция завершится ошибкой.


    - Все строки и ячейки массива должны быть успешно добавлены в новые столбцы таблицы. Если какая-либо строка или ячейка по какой-то причине не добавляется, вся операция завершается ошибкой.


    - Если вы передаете объект TableData в качестве аргумента данных, число строк заглавных строк должно совпадать с числом обновляемой таблицы.


    Дополнительное замечание для Excel в Интернете: общее число ячеек в объекте TableData, переданном параметру данных, не может превышать 20 000 в одном вызове этого метода.


    #### <a name="examples"></a>Примеры


    ```javascript

    // The following example adds a single column with three rows to a bound table with the id "myTable"

    // by passing a TableData object as the data argument of the addColumnsAsync method. To succeed,

    // the table being updated must have three rows.


    // Add a column to a binding of type table by passing a TableData object.

    function addColumns() {
        var myTable = new Office.TableData();
        myTable.headers = [["Cities"]];
        myTable.rows = [["Berlin"], ["Roma"], ["Tokyo"]];

        Office.context.document.bindings.getByIdAsync("myTable", function (result) {
            result.value.addColumnsAsync(myTable);
        });
    }


    // The following example adds a single column with three rows to a bound table with the id myTable

    // by passing an array of arrays ("matrix") as the data argument of the addColumnsAsync method.

    // To succeed, the table being updated must have three rows.


    // Add a column to a binding of type table by passing an array of arrays.

    function addColumns() {
        var myTable = [["Berlin"], ["Roma"], ["Tokyo"]];

        Office.context.document.bindings.getByIdAsync("myTable", function (result) {
            result.value.addColumnsAsync(myTable);
        });
    }

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'addColumnsAsync(tableData: TableData | any[][], options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<void>) => void): void;'
    parameters:
    - id: tableData
      description: Массив массивов ("матрица") или объекта TableData, который содержит один или несколько столбцов данных для добавления в таблицу. Обязательное.
      type: <xref uid="office!Office.TableData:class" /> | any[][]
    - id: options
      description: Предоставляет возможность сохранения контекстных данных любого типа без изменений для использования в вызове.
      type: <xref uid="office!Office.AsyncContextOptions:interface" />
    - id: callback
      description: Необязательное свойство. Функция, вызываемая при возвращении обратного вызова, единственным параметром которой является [тип Office.AsyncResult.](xref:office!Office.AsyncResult:interface)<!-- -->.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;void&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: addColumnsAsync(tableData, callback)
  uid: office!Office.TableBinding#addColumnsAsync:member(2)
  package: office!
  fullName: addColumnsAsync(tableData, callback)
  summary: Добавляет указанные данные в таблицу в качестве дополнительных столбцов.
  remarks: >-
    Чтобы добавить один или несколько столбцов с указанием значений данных и загона, передайте объект TableData в качестве параметра данных. Чтобы добавить один или несколько столбцов только с данными, передайте в качестве параметра data массив массивов ("матрицу").


    Успех или сбой операции addColumnsAsync является атомной. То есть либо вся операция добавления столбцов выполняется успешно, либо происходит полный откат (и свойство AsyncResult.status, возвращенное в обратный вызов, будет содержать сведения об ошибке).


    - Каждая строка в массиве, который вы передаете в качестве аргумента данных, должна иметь такое же количество строк, как и обновляемая таблица. В противном случае вся операция завершится ошибкой.


    - Все строки и ячейки массива должны быть успешно добавлены в новые столбцы таблицы. Если какая-либо строка или ячейка по какой-то причине не добавляется, вся операция завершается ошибкой.


    - Если вы передаете объект TableData в качестве аргумента данных, число строк заглавных строк должно совпадать с числом обновляемой таблицы.


    Дополнительное замечание для Excel в Интернете: общее число ячеек в объекте TableData, переданном параметру данных, не может превышать 20 000 в одном вызове этого метода.
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'addColumnsAsync(tableData: TableData | any[][], callback?: (result: AsyncResult<void>) => void): void;'
    parameters:
    - id: tableData
      description: Массив массивов ("матрица") или объекта TableData, который содержит один или несколько столбцов данных для добавления в таблицу. Обязательное.
      type: <xref uid="office!Office.TableData:class" /> | any[][]
    - id: callback
      description: Необязательное свойство. Функция, вызываемая при возвращении обратного вызова, единственным параметром которой является [тип Office.AsyncResult.](xref:office!Office.AsyncResult:interface)<!-- -->.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;void&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: addRowsAsync(rows, options, callback)
  uid: office!Office.TableBinding#addRowsAsync:member(1)
  package: office!
  fullName: addRowsAsync(rows, options, callback)
  summary: Добавляет указанные данные в таблицу в качестве дополнительных строк.
  remarks: >-
    Успех или сбой операции addRowsAsync является атомной. То есть либо вся операция добавления столбцов выполняется успешно, либо происходит полный откат (и свойство AsyncResult.status, возвращенное в обратный вызов, будет содержать сведения об ошибке).


    - Каждая строка в массиве, который вы передаете в качестве аргумента данных, должна иметь такое же количество столбцов, как и обновляемая таблица. В противном случае вся операция завершится ошибкой.


    - Каждый столбец и ячейка массива должны успешно добавлять столбец или ячейку в таблицу в добавленных строках (ы). Если какой-либо столбец или ячейка по какой-либо причине не задают, вся операция будет неудачной.


    - Если вы передаете объект TableData в качестве аргумента данных, число строк заглавных строк должно совпадать с числом обновляемой таблицы.


    Дополнительное замечание для Excel в Интернете: общее число ячеек в объекте TableData, переданном параметру данных, не может превышать 20 000 в одном вызове этого метода.


    #### <a name="examples"></a>Примеры


    ```javascript

    function addRowsToTable() {
        Office.context.document.bindings.getByIdAsync("myBinding", function (asyncResult) {
            var binding = asyncResult.value;
            binding.addRowsAsync([["6", "k"], ["7", "j"]]);
        });
    }

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'addRowsAsync(rows: TableData | any[][], options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<void>) => void): void;'
    parameters:
    - id: rows
      description: Массив массивов ("матрица") или объекта TableData, который содержит один или несколько строк данных для добавления в таблицу. Обязательное.
      type: <xref uid="office!Office.TableData:class" /> | any[][]
    - id: options
      description: Предоставляет возможность сохранения контекстных данных любого типа без изменений для использования в вызове.
      type: <xref uid="office!Office.AsyncContextOptions:interface" />
    - id: callback
      description: Необязательное свойство. Функция, вызываемая при возвращении обратного вызова, единственным параметром которой является [тип Office.AsyncResult.](xref:office!Office.AsyncResult:interface)<!-- -->.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;void&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: addRowsAsync(rows, callback)
  uid: office!Office.TableBinding#addRowsAsync:member(2)
  package: office!
  fullName: addRowsAsync(rows, callback)
  summary: Добавляет указанные данные в таблицу в качестве дополнительных строк.
  remarks: >-
    Успех или сбой операции addRowsAsync является атомной. То есть либо вся операция добавления столбцов выполняется успешно, либо происходит полный откат (и свойство AsyncResult.status, возвращенное в обратный вызов, будет содержать сведения об ошибке).


    - Каждая строка в массиве, который вы передаете в качестве аргумента данных, должна иметь такое же количество столбцов, как и обновляемая таблица. В противном случае вся операция завершится ошибкой.


    - Каждый столбец и ячейка массива должны успешно добавлять столбец или ячейку в таблицу в добавленных строках (ы). Если какой-либо столбец или ячейка по какой-либо причине не задают, вся операция будет неудачной.


    - Если вы передаете объект TableData в качестве аргумента данных, число строк заглавных строк должно совпадать с числом обновляемой таблицы.


    Дополнительное замечание для Excel в Интернете: общее число ячеек в объекте TableData, переданном параметру данных, не может превышать 20 000 в одном вызове этого метода.
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'addRowsAsync(rows: TableData | any[][], callback?: (result: AsyncResult<void>) => void): void;'
    parameters:
    - id: rows
      description: Массив массивов ("матрица") или объекта TableData, который содержит один или несколько строк данных для добавления в таблицу. Обязательное.
      type: <xref uid="office!Office.TableData:class" /> | any[][]
    - id: callback
      description: Необязательное свойство. Функция, вызываемая при возвращении обратного вызова, единственным параметром которой является [тип Office.AsyncResult.](xref:office!Office.AsyncResult:interface)<!-- -->.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;void&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: clearFormatsAsync(options, callback)
  uid: office!Office.TableBinding#clearFormatsAsync:member(1)
  package: office!
  fullName: clearFormatsAsync(options, callback)
  summary: Очищает форматирование в привязанной таблице.
  remarks: >-
    Дополнительные сведения см. в таблицах [Format в надстройки для Excel.](https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-tables#format-a-table)


    #### <a name="examples"></a>Примеры


    ```javascript

    // The following example shows how to clear the formatting of the bound table with an ID of "myBinding":

    Office.select("bindings#myBinding").clearFormatsAsync();

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'clearFormatsAsync(options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<void>) => void): void;'
    parameters:
    - id: options
      description: Предоставляет возможность сохранения контекстных данных любого типа без изменений для использования в вызове.
      type: <xref uid="office!Office.AsyncContextOptions:interface" />
    - id: callback
      description: Необязательное свойство. Функция, вызываемая при возвращении обратного вызова, единственным параметром которой является [тип Office.AsyncResult.](xref:office!Office.AsyncResult:interface)<!-- -->.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;void&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: clearFormatsAsync(callback)
  uid: office!Office.TableBinding#clearFormatsAsync:member(2)
  package: office!
  fullName: clearFormatsAsync(callback)
  summary: Очищает форматирование в привязанной таблице.
  remarks: Дополнительные сведения см. в таблицах [Format в надстройки для Excel.](https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-tables#format-a-table)
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'clearFormatsAsync(callback?: (result: AsyncResult<void>) => void): void;'
    parameters:
    - id: callback
      description: Необязательное свойство. Функция, вызываемая при возвращении обратного вызова, единственным параметром которой является [тип Office.AsyncResult.](xref:office!Office.AsyncResult:interface)<!-- -->.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;void&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: deleteAllDataValuesAsync(options, callback)
  uid: office!Office.TableBinding#deleteAllDataValuesAsync:member(1)
  package: office!
  fullName: deleteAllDataValuesAsync(options, callback)
  summary: Удаляет из таблицы все строки и их значения, кроме строк заголовка; сдвиг зависит от ведущего приложения.
  remarks: >-
    В Excel, если в таблице нет строки заголовка, этот метод удалит всю таблицу.


    #### <a name="examples"></a>Примеры


    ```javascript

    function deleteAllRowsFromTable() {
        Office.context.document.bindings.getByIdAsync("myBinding", function (asyncResult) {
            var binding = asyncResult.value;
            binding.deleteAllDataValuesAsync();
        });
    }

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'deleteAllDataValuesAsync(options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<void>) => void): void;'
    parameters:
    - id: options
      description: Предоставляет возможность сохранения контекстных данных любого типа без изменений для использования в вызове.
      type: <xref uid="office!Office.AsyncContextOptions:interface" />
    - id: callback
      description: Необязательное свойство. Функция, вызываемая при возвращении обратного вызова, единственным параметром которой является [тип Office.AsyncResult.](xref:office!Office.AsyncResult:interface)<!-- -->.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;void&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: deleteAllDataValuesAsync(callback)
  uid: office!Office.TableBinding#deleteAllDataValuesAsync:member(2)
  package: office!
  fullName: deleteAllDataValuesAsync(callback)
  summary: Удаляет из таблицы все строки и их значения, кроме строк заголовка; сдвиг зависит от ведущего приложения.
  remarks: В Excel, если в таблице нет строки заголовка, этот метод удалит всю таблицу.
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'deleteAllDataValuesAsync(callback?: (result: AsyncResult<void>) => void): void;'
    parameters:
    - id: callback
      description: Необязательное свойство. Функция, вызываемая при возвращении обратного вызова, единственным параметром которой является [тип Office.AsyncResult.](xref:office!Office.AsyncResult:interface)<!-- -->.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;void&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: getFormatsAsync(cellReference, formats, options, callback)
  uid: office!Office.TableBinding#getFormatsAsync:member(1)
  package: office!
  fullName: getFormatsAsync(cellReference, formats, options, callback)
  summary: Получает форматирование указанных элементов в таблице.
  remarks: >-
    **Структура возвращенного формата**


    Каждый объект JavaScript в массиве возвращаемого значения имеет эту форму: `{cells:{ cell_range }, format:{ format_definition }}`


    Свойство указывает нужный формат с помощью одного `cells:` из следующих значений:


    **Поддерживаемые диапазоны в свойстве ячеек**


    <table> <tr> <th>параметры диапазона ячеек</th> <th>Описание</th> </tr> <tr> <td>`{row: n}`</td> <td>Указывает диапазон, который является нулевой строкой данных nth в таблице.</td> </tr> <tr> <td>`{column: n}`</td> <td>Указывает диапазон, который является столбцом nth с нулевой базой данных в таблице.</td> </tr> <tr> <td>`{row: i, column: j}`</td> <td>Указывает одну ячейку, которая является столбцом ith row и jth таблицы.</td> </tr> <tr> <td>`Office.Table.All`</td> <td>Указывает всю таблицу, включая заголовки столбцов, данные и итоги (если они имеются)</td> </tr> <tr> <td>`Office.Table.Data`</td> <td>Указывает только данные в таблице (без заголовков и итогов).</td> </tr> <tr> <td>`Office.Table.Headers`</td> <td>Указывает только строку заголовков.</td> </tr> </table>


    Свойство указывает значения, соответствующие подмножество параметров, доступных в диалоговом окне Ячейки формата в Excel (ячейки формата правой кнопкой мыши или ячейки формата домашнего `format:` &gt; &gt; &gt; формата).
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getFormatsAsync(cellReference?: any, formats?: any[], options?: Office.AsyncContextOptions, callback?: (result: AsyncResult< ({ cells: any, format: any})[]>) => void): void;'
    parameters:
    - id: cellReference
      description: Буквальный объект, содержащий пары имен и значений, которые указывают диапазон ячеек для получения форматирования.
      type: any
    - id: formats
      description: Массив, указывающий свойства формата.
      type: any[]
    - id: options
      description: Предоставляет возможность сохранения контекстных данных любого типа без изменений для использования в вызове.
      type: <xref uid="office!Office.AsyncContextOptions:interface" />
    - id: callback
      description: Необязательное свойство. Функция, вызываемая при возвращении обратного вызова, единственным параметром которой является [тип Office.AsyncResult.](xref:office!Office.AsyncResult:interface)<!-- -->. Свойством результата является массив, содержащий один или несколько объектов JavaScript с указанием `value` форматирования соответствующих ячеек.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt; ({ cells: any, format: any})[]&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: getFormatsAsync(cellReference, formats, callback)
  uid: office!Office.TableBinding#getFormatsAsync:member(2)
  package: office!
  fullName: getFormatsAsync(cellReference, formats, callback)
  summary: Получает форматирование указанных элементов в таблице.
  remarks: >-
    **Структура возвращенного формата**


    Каждый объект JavaScript в массиве возвращаемого значения имеет эту форму: `{cells:{ cell_range }, format:{ format_definition }}`


    Свойство указывает нужный формат с помощью одного `cells:` из следующих значений:


    **Поддерживаемые диапазоны в свойстве ячеек**


    <table> <tr> <th>параметры диапазона ячеек</th> <th>Описание</th> </tr> <tr> <td>`{row: n}`</td> <td>Указывает диапазон, который является нулевой строкой данных nth в таблице.</td> </tr> <tr> <td>`{column: n}`</td> <td>Указывает диапазон, который является столбцом nth с нулевой базой данных в таблице.</td> </tr> <tr> <td>`{row: i, column: j}`</td> <td>Указывает одну ячейку, которая является столбцом ith row и jth таблицы.</td> </tr> <tr> <td>`Office.Table.All`</td> <td>Указывает всю таблицу, включая заголовки столбцов, данные и итоги (если они имеются)</td> </tr> <tr> <td>`Office.Table.Data`</td> <td>Указывает только данные в таблице (без заголовков и итогов).</td> </tr> <tr> <td>`Office.Table.Headers`</td> <td>Указывает только строку заголовков.</td> </tr> </table>


    Свойство указывает значения, соответствующие подмножество параметров, доступных в диалоговом окне Ячейки формата в Excel (ячейки формата правой кнопкой мыши или ячейки формата домашнего `format:` &gt; &gt; &gt; формата).
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getFormatsAsync(cellReference?: any, formats?: any[], callback?: (result: AsyncResult< ({ cells: any, format: any})[]>) => void): void;'
    parameters:
    - id: cellReference
      description: Буквальный объект, содержащий пары имен и значений, которые указывают диапазон ячеек для получения форматирования.
      type: any
    - id: formats
      description: Массив, указывающий свойства формата.
      type: any[]
    - id: callback
      description: Необязательное свойство. Функция, вызываемая при возвращении обратного вызова, единственным параметром которой является [тип Office.AsyncResult.](xref:office!Office.AsyncResult:interface)<!-- -->. Свойством результата является массив, содержащий один или несколько объектов JavaScript с указанием `value` форматирования соответствующих ячеек.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt; ({ cells: any, format: any})[]&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: setFormatsAsync(cellFormat, options, callback)
  uid: office!Office.TableBinding#setFormatsAsync:member(1)
  package: office!
  fullName: setFormatsAsync(cellFormat, options, callback)
  summary: Задает форматирование указанных элементов и данных в таблице.
  remarks: "**Указание параметра cellFormat**\n\nИспользуйте параметр cellFormat для набора или изменения значений форматирования ячейки, таких как ширина, высота, шрифт, фон, выравнивание и так далее. Значение, которое вы передаете в качестве параметра cellFormat, — массив, содержащий список одного или более объектов JavaScript, которые указывают, какие ячейки нужно нацелить (`cells:`<!-- -->) и форматы (`format:`<!-- -->) применять к ним.\n\nКаждый объект JavaScript в массиве cellFormat имеет эту форму: `{cells:{ cell_range }, format:{ format_definition }}`\n\nСвойство указывает нужный формат с помощью одного `cells:` из следующих значений:\n\n**Поддерживаемые диапазоны в свойстве ячеек**\n\n<table> <tr> <th>параметры диапазона ячеек</th> <th>Описание</th> </tr> <tr> <td>`{row: n}`</td> <td>Указывает диапазон, который является нулевой строкой данных nth в таблице.</td> </tr> <tr> <td>`{column: n}`</td> <td>Указывает диапазон, который является столбцом nth с нулевой базой данных в таблице.</td> </tr> <tr> <td>`{row: i, column: j}`</td> <td>Указывает одну ячейку, которая является столбцом ith row и jth таблицы.</td> </tr> <tr> <td>`Office.Table.All`</td> <td>Указывает всю таблицу, включая заголовки столбцов, данные и итоги (если они имеются)</td> </tr> <tr> <td>`Office.Table.Data`</td> <td>Указывает только данные в таблице (без заголовков и итогов).</td> </tr> <tr> <td>`Office.Table.Headers`</td> <td>Указывает только строку заголовков.</td> </tr> </table>\n\nСвойство указывает значения, соответствующие подмножество параметров, доступных в диалоговом окне Ячейки формата в Excel (ячейки формата правой кнопкой мыши или ячейки формата домашнего `format:` &gt; &gt; &gt; формата).\n\nВы указываете значение свойства в качестве списка одного или более имени свойства — пар значений в литерале `format:` объекта JavaScript. Имя свойства обозначает имя устанавливаемого свойства, а значение — значение этого свойства. Вы можете указать несколько значений формата, например цвет и размер шрифта.\n\nНиже приводятся три примера значений свойства `format:`:\n\n`//Set cells: font color to green and size to 15 points.`\n\n`format: {fontColor : \"green\", fontSize : 15}`\n\n`//Set cells: border to dotted blue.`\n\n`format: {borderStyle: \"dotted\", borderColor: \"blue\"}`\n\n`//Set cells: background to red and alignment to centered.`\n\n`format: {backgroundColor: \"red\", alignHorizontal: \"center\"}`\n\nМожно указать форматы номеров, указав строку форматирования номеров \"код\" в `numberFormat:` свойстве. Строки формата чисел, которые можно указывать, соответствуют параметрам Excel, доступным в категории Дополнительный на вкладке Число диалогового окна Формат ячеек. В этом примере показано, как отформатировать число в виде процентного значения с двумя десятичными знаками:\n\n`format: {numberFormat:\"0.00%\"}`\n\nДополнительные подробности см. в дополнительных подробностях [создания настраиваемого формата номеров](https://support.office.com/article/create-or-delete-a-custom-number-format-78f2a361-936b-4c03-8772-09fab54be7f4)<!-- -->.\n\nЧтобы настроить форматирование на таблицах при написании данных, используйте параметры tableOptions и cellFormat необязательными параметрами `Document.setSelectedDataAsync` или `TableBinding.setDataAsync` методами.\n\nНастройка форматирования с необязательными параметрами и методами работает только для установки форматирования при первом `Document.setSelectedDataAsync` `TableBinding.setDataAsync` написании данных. Чтобы изменить форматирование после записи данных, используйте следующие методы:\n\n- Чтобы обновить форматирование ячейки, например цвет шрифта и стиль, используйте `TableBinding.setFormatsAsync` метод (этот метод).\n\n- Чтобы обновить параметры таблицы, такие как полосатая строка и кнопки фильтрации, используйте `TableBinding.setTableOptions` метод.\n\n- Чтобы очистить форматирование, используйте `TableBinding.clearFormats` метод.\n\nДополнительные сведения и примеры см. в материале [How to format tables in add-ins for Excel](https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-tables#format-a-table)<!-- -->.\n\n#### <a name=\"examples\"></a>Примеры\n\n```javascript\n// Specifying a single target\n// The following example shows a cellFormat value that sets the font color of the header row to red.\nOffice.select(\"bindings#myBinding\").setFormatsAsync(\n    [{cells: Office.Table.Headers, format: {fontColor: \"red\"}}], \n    function (asyncResult){});\n\n// Specifying multiple targets\n// The setFormatsAsync method can support formatting multiple targets within the bound table in a \n// single function call. To do that, you pass a list of objects in the cellFormat array \n// for each target that you want to format.\n// For example, the following line of code will set the font color of the first row yellow, \n// and the fourth cell in the third row to have a white border and bold text.\nOffice.select(\"bindings#myBinding\").setFormatsAsync(\n    [{cells: {row: 1}, format: {fontColor: \"yellow\"}}, \n        {cells: {row: 3, column: 4}, format: {borderColor: \"white\", fontStyle: \"bold\"}}], \n    function (asyncResult){});\n\n// Additional remarks for Excel Online\n// The number of formatting groups passed to the cellFormat parameter can't exceed 100. \n// A single formatting group consists of a set of formatting applied to a specified range of cells. \n// For example, the following call passes two formatting groups to cellFormat.\nOffice.select(\"bindings#myBinding\").setFormatsAsync(\n    [{cells: {row: 1}, format: {fontColor: \"yellow\"}}, \n        {cells: {row: 3, column: 4}, format: {borderColor: \"white\", fontStyle: \"bold\"}}], \n    function (asyncResult){});\n```"
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'setFormatsAsync(cellFormat: any[], options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<void>) => void): void;'
    parameters:
    - id: cellFormat
      description: Массив, содержащий один или несколько объектов JavaScript, указывающих целевые ячейки и форматирование, которое необходимо к ним применить.
      type: any[]
    - id: options
      description: Предоставляет возможность сохранения контекстных данных любого типа без изменений для использования в вызове.
      type: <xref uid="office!Office.AsyncContextOptions:interface" />
    - id: callback
      description: Необязательное свойство. Функция, вызываемая при возвращении обратного вызова, единственным параметром которой является [тип Office.AsyncResult.](xref:office!Office.AsyncResult:interface)<!-- -->.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;void&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: setFormatsAsync(cellFormat, callback)
  uid: office!Office.TableBinding#setFormatsAsync:member(2)
  package: office!
  fullName: setFormatsAsync(cellFormat, callback)
  summary: Задает форматирование указанных элементов и данных в таблице.
  remarks: >-
    **Указание параметра cellFormat**


    Используйте параметр cellFormat для набора или изменения значений форматирования ячейки, таких как ширина, высота, шрифт, фон, выравнивание и так далее. Значение, которое вы передаете в качестве параметра cellFormat, — массив, содержащий список одного или более объектов JavaScript, которые указывают, какие ячейки нужно нацелить (`cells:`<!-- -->) и форматы (`format:`<!-- -->) применять к ним.


    Каждый объект JavaScript в массиве cellFormat имеет эту форму: `{cells:{ cell_range }, format:{ format_definition }}`


    Свойство указывает нужный формат с помощью одного `cells:` из следующих значений:


    **Поддерживаемые диапазоны в свойстве ячеек**


    <table> <tr> <th>параметры диапазона ячеек</th> <th>Описание</th> </tr> <tr> <td>`{row: n}`</td> <td>Указывает диапазон, который является нулевой строкой данных nth в таблице.</td> </tr> <tr> <td>`{column: n}`</td> <td>Указывает диапазон, который является столбцом nth с нулевой базой данных в таблице.</td> </tr> <tr> <td>`{row: i, column: j}`</td> <td>Указывает одну ячейку, которая является столбцом ith row и jth таблицы.</td> </tr> <tr> <td>`Office.Table.All`</td> <td>Указывает всю таблицу, включая заголовки столбцов, данные и итоги (если они имеются)</td> </tr> <tr> <td>`Office.Table.Data`</td> <td>Указывает только данные в таблице (без заголовков и итогов).</td> </tr> <tr> <td>`Office.Table.Headers`</td> <td>Указывает только строку заголовков.</td> </tr> </table>


    Свойство указывает значения, соответствующие подмножество параметров, доступных в диалоговом окне Ячейки формата в Excel (ячейки формата правой кнопкой мыши или ячейки формата домашнего `format:` &gt; &gt; &gt; формата).


    Вы указываете значение свойства в качестве списка одного или более имени свойства — пар значений в литерале `format:` объекта JavaScript. Имя свойства обозначает имя устанавливаемого свойства, а значение — значение этого свойства. Вы можете указать несколько значений формата, например цвет и размер шрифта.


    Ниже приводятся три примера значений свойства `format:`:


    `//Set cells: font color to green and size to 15 points.`


    `format: {fontColor : "green", fontSize : 15}`


    `//Set cells: border to dotted blue.`


    `format: {borderStyle: "dotted", borderColor: "blue"}`


    `//Set cells: background to red and alignment to centered.`


    `format: {backgroundColor: "red", alignHorizontal: "center"}`


    Можно указать форматы номеров, указав строку форматирования номеров "код" в `numberFormat:` свойстве. Строки формата чисел, которые можно указывать, соответствуют параметрам Excel, доступным в категории Дополнительный на вкладке Число диалогового окна Формат ячеек. В этом примере показано, как отформатировать число в виде процентного значения с двумя десятичными знаками:


    `format: {numberFormat:"0.00%"}`


    Дополнительные подробности см. в дополнительных подробностях [создания настраиваемого формата номеров](https://support.office.com/article/create-or-delete-a-custom-number-format-78f2a361-936b-4c03-8772-09fab54be7f4)<!-- -->.


    Чтобы настроить форматирование на таблицах при написании данных, используйте параметры tableOptions и cellFormat необязательными параметрами `Document.setSelectedDataAsync` или `TableBinding.setDataAsync` методами.


    Настройка форматирования с необязательными параметрами и методами работает только для установки форматирования при первом `Document.setSelectedDataAsync` `TableBinding.setDataAsync` написании данных. Чтобы изменить форматирование после записи данных, используйте следующие методы:


    - Чтобы обновить форматирование ячейки, например цвет шрифта и стиль, используйте `TableBinding.setFormatsAsync` метод (этот метод).


    - Чтобы обновить параметры таблицы, такие как полосатая строка и кнопки фильтрации, используйте `TableBinding.setTableOptions` метод.


    - Чтобы очистить форматирование, используйте `TableBinding.clearFormats` метод.


    Дополнительные сведения и примеры см. в материале [How to format tables in add-ins for Excel](https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-tables#format-a-table)<!-- -->.
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'setFormatsAsync(cellFormat: any[], callback?: (result: AsyncResult<void>) => void): void;'
    parameters:
    - id: cellFormat
      description: Массив, содержащий один или несколько объектов JavaScript, указывающих целевые ячейки и форматирование, которое необходимо к ним применить.
      type: any[]
    - id: callback
      description: Необязательное свойство. Функция, вызываемая при возвращении обратного вызова, единственным параметром которой является [тип Office.AsyncResult.](xref:office!Office.AsyncResult:interface)<!-- -->.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;void&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: setTableOptionsAsync(tableOptions, options, callback)
  uid: office!Office.TableBinding#setTableOptionsAsync:member(1)
  package: office!
  fullName: setTableOptionsAsync(tableOptions, options, callback)
  summary: Обновляет параметры форматирования привязанной таблицы.
  remarks: "**Набор требований.** [Не в наборе](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#methods-that-arent-part-of-a-requirement-set)\n\nВ функции обратного вызова, переданной методу goToByIdAsync, вы можете использовать свойства объекта AsyncResult, чтобы получить следующие сведения.\n\n<table> <tr> <th>Свойство</th> <th>Назначение</th> </tr> <tr> <td>AsyncResult.value</td> <td>Всегда возвращается неопределяемо, так как при настройке форматов нет данных или объектов, которые можно получить.</td> </tr> <tr> <td>AsyncResult.status</td> <td>Определяет, удалось ли выполнить операцию.</td> </tr> <tr> <td>AsyncResult.error</td> <td>Доступ к объекту Error, который предоставляет сведения об ошибке, если операция завершилась неудачно.</td> </tr> <tr> <td>AsyncResult.asyncContext</td> <td>Определяемый пользователем элемент любого типа, который возвращается в объекте AsyncResult без изменения.</td> </tr> </table>\n\n#### <a name=\"examples\"></a>Примеры\n\n```javascript\n// The following example shows how to:\n// 1. Create an object literal that specifies the table formatting options to update on the bound table.\n// 2. Call setTableOptions on a previously bound table (with an id of myBinding) passing the object\n//    with formatting setting as the tableOptions parameter.\nfunction updateTableFormatting(){\n    var tableOptions = {bandedRows: true, filterButton: false, style: \"TableStyleMedium3\"}; \n\n    Office.select(\"bindings#myBinding\").setTableOptionsAsync(tableOptions, function(asyncResult){});\n}\n```"
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'setTableOptionsAsync(tableOptions: any, options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<void>) => void): void;'
    parameters:
    - id: tableOptions
      description: Литерал объекта, содержащий список пар "имя-значение" для свойств, определяющих применяемые параметры таблицы.
      type: any
    - id: options
      description: Предоставляет возможность сохранения контекстных данных любого типа без изменений для использования в вызове.
      type: <xref uid="office!Office.AsyncContextOptions:interface" />
    - id: callback
      description: Необязательное свойство. Функция, вызываемая при возвращении обратного вызова, единственным параметром которой является [тип Office.AsyncResult.](xref:office!Office.AsyncResult:interface)<!-- -->.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;void&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: setTableOptionsAsync(tableOptions, callback)
  uid: office!Office.TableBinding#setTableOptionsAsync:member(2)
  package: office!
  fullName: setTableOptionsAsync(tableOptions, callback)
  summary: Обновляет параметры форматирования привязанной таблицы.
  remarks: >-
    **Набор требований.** [Не в наборе](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#methods-that-arent-part-of-a-requirement-set)


    В функции обратного вызова, переданной методу goToByIdAsync, вы можете использовать свойства объекта AsyncResult, чтобы получить следующие сведения.


    <table> <tr> <th>Свойство</th> <th>Назначение</th> </tr> <tr> <td>AsyncResult.value</td> <td>Всегда возвращается неопределяемо, так как при настройке форматов нет данных или объектов, которые можно получить.</td> </tr> <tr> <td>AsyncResult.status</td> <td>Определяет, удалось ли выполнить операцию.</td> </tr> <tr> <td>AsyncResult.error</td> <td>Доступ к объекту Error, который предоставляет сведения об ошибке, если операция завершилась неудачно.</td> </tr> <tr> <td>AsyncResult.asyncContext</td> <td>Определяемый пользователем элемент любого типа, который возвращается в объекте AsyncResult без изменения.</td> </tr> </table>
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'setTableOptionsAsync(tableOptions: any, callback?: (result: AsyncResult<void>) => void): void;'
    parameters:
    - id: tableOptions
      description: Литерал объекта, содержащий список пар "имя-значение" для свойств, определяющих применяемые параметры таблицы.
      type: any
    - id: callback
      description: Необязательное свойство. Функция, вызываемая при возвращении обратного вызова, единственным параметром которой является [тип Office.AsyncResult.](xref:office!Office.AsyncResult:interface)<!-- -->.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;void&gt;) =&gt; void'
    return:
      type: void
      description: ''
extends: <xref uid="office!Office.Binding:interface" />
metadata:
  ms.openlocfilehash: eba42decba936cb9ed58e860528e54426a18d879
  ms.sourcegitcommit: a8a86cfcaff5ad7dacc653d63502c76b1fedbebe
  ms.translationtype: MT
  ms.contentlocale: ru-RU
  ms.lasthandoff: 03/26/2021
  ms.locfileid: "51329381"
