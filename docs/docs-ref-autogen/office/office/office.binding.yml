### YamlMime:UniversalReference
items:
  - uid: office.Office.Binding
    summary: |-
      Представляет привязку к разделу документа.

      Объект Binding предоставляет функциональные возможности, которыми обладают все привязки, независимо от типа.

      Объект Binding никогда не вызывается напрямую. Это абстрактный родительский класс объектов, представляющих каждый тип привязки: [Office. MatrixBinding](xref:office.Office.MatrixBinding)<!-- -->, [Office. TableBinding](xref:office.Office.TableBinding)<!-- -->или [Office. TextBinding](xref:office.Office.TextBinding)<!-- -->. Все три из этих объектов наследуют методы getDataAsync и setDataAsync из объекта Binding, которые позволяют взаимодействовать с данными в привязке. Они также наследуют свойства id и type и позволяют запрашивать значения этих свойств. Кроме того, объекты MatrixBinding и TableBinding предоставляют дополнительные методы для работы с матрицами и таблицами, например, для подсчета количества строк и столбцов.
    remarks: |-
      **Узлы**: Excel, Word

      **Наборы требований**:

      - [Матриксбиндингс](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#matrixbindings)

      - [TableBindings](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#tablebindings)

      - [Текстбиндингс](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#textbindings)
    name: Office.Binding
    fullName: Office.Binding
    langs:
      - typeScript
    type: interface
    package: office
    children:
      - office.Office.Binding.addHandlerAsync
      - office.Office.Binding.addHandlerAsync_1
      - office.Office.Binding.getDataAsync
      - office.Office.Binding.getDataAsync_1
      - office.Office.Binding.removeHandlerAsync
      - office.Office.Binding.removeHandlerAsync_1
      - office.Office.Binding.setDataAsync
      - office.Office.Binding.setDataAsync_1
      - office.Office.Binding.document
      - office.Office.Binding.id
      - office.Office.Binding.type
  - uid: office.Office.Binding.addHandlerAsync
    summary: 'Добавляет обработчик событий для объекта для указанного элемента [Office. EventType](xref:office.Office.EventType)<!-- -->. Поддерживаемые Евенттипес `Office.EventType.BindingDataChanged``Office.EventType.BindingSelectionChanged`<!-- -->.'
    remarks: |-
      **Набор требований**: [BindingEvents](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#bindingevents)

      Можно добавить несколько обработчиков событий для указанного объекта eventType, если имя каждой функции обработчика событий уникально.
    name: 'addHandlerAsync(eventType, handler, options, callback)'
    fullName: 'addHandlerAsync(eventType, handler, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addHandlerAsync(eventType: Office.EventType, handler: any, options?: Office.AsyncContextOptions, callback?: (result: Office.AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: eventType
          description: Тип события. Для привязок можно `Office.EventType.BindingDataChanged` или`Office.EventType.BindingSelectionChanged`<!-- -->.
          type:
            - office.Office.EventType
        - id: handler
          description: 'Добавляемая функция обработчика событий, единственный параметр которой имеет тип [Office. BindingDataChangedEventArgs](xref:office.Office.BindingDataChangedEventArgs) или [Office. свойство bindingselectionchangedeventargs](xref:office.Office.BindingSelectionChangedEventArgs)<!-- -->.'
          type:
            - any
        - id: options
          description: Предоставляет параметр для сохранения данных контекста любого типа без изменений для использования при обратном вызове.
          type:
            - office.Office.AsyncContextOptions
        - id: callback
          description: 'Необязательно. Функция, вызываемая при возвращении обратного вызова, единственный параметр которой имеет тип [Office. AsyncResult](xref:office.Office.AsyncResult)<!-- -->.'
          type:
            - '(result: Office.AsyncResult<void>) => void'
  - uid: office.Office.Binding.addHandlerAsync_1
    summary: 'Добавляет обработчик событий для объекта для указанного элемента [Office. EventType](xref:office.Office.EventType)<!-- -->. Поддерживаемые Евенттипес `Office.EventType.BindingDataChanged``Office.EventType.BindingSelectionChanged`<!-- -->.'
    remarks: |-
      **Набор требований**: [BindingEvents](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#bindingevents)

      Можно добавить несколько обработчиков событий для указанного объекта eventType, если имя каждой функции обработчика событий уникально.

      #### <a name="examples"></a>Примеры

      ```javascript
      // The following code sample calls the select method of the Office object to access the binding
      // with ID "MyBinding", and then calls the addHandlerAsync method to add a handler function 
      // for the bindingDataChanged event of that binding.
      function addEventHandlerToBinding() {
          Office.select("bindings#MyBinding").addHandlerAsync(
              Office.EventType.BindingDataChanged, onBindingDataChanged);
      }

      function onBindingDataChanged(eventArgs) {
          write("Data has changed in binding: " + eventArgs.binding.id);
      }

      // Function that writes to a div with id='message' on the page.
      function write(message){
          document.getElementById('message').innerText += message; 
      }
      ```
      ```javascript
      // To add an event handler for the BindingSelectionChanged event of a binding, 
      // use the addHandlerAsync method of the Binding object.
      // The event handler receives an argument of type BindingSelectionChangedEventArgs.
      function addEventHandlerToBinding() {
          Office.select("bindings#MyBinding").addHandlerAsync(
              Office.EventType.BindingSelectionChanged, onBindingSelectionChanged);
      }

      function onBindingSelectionChanged(eventArgs) {
          write(eventArgs.binding.id + " has been selected.");
      }
      // Function that writes to a div with id='message' on the page.
      function write(message){
          document.getElementById('message').innerText += message; 
      }
      ```
    name: 'addHandlerAsync(eventType, handler, callback)'
    fullName: 'addHandlerAsync(eventType, handler, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addHandlerAsync(eventType: Office.EventType, handler: any, callback?: (result: Office.AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: eventType
          description: Тип события. Для привязок можно `Office.EventType.BindingDataChanged` или`Office.EventType.BindingSelectionChanged`<!-- -->.
          type:
            - office.Office.EventType
        - id: handler
          description: 'Добавляемая функция обработчика событий, единственный параметр которой имеет тип [Office. BindingDataChangedEventArgs](xref:office.Office.BindingDataChangedEventArgs) или [Office. свойство bindingselectionchangedeventargs](xref:office.Office.BindingSelectionChangedEventArgs)<!-- -->.'
          type:
            - any
        - id: callback
          description: 'Необязательно. Функция, вызываемая при возвращении обратного вызова, единственный параметр которой имеет тип [Office. AsyncResult](xref:office.Office.AsyncResult)<!-- -->.'
          type:
            - '(result: Office.AsyncResult<void>) => void'
  - uid: office.Office.Binding.getDataAsync
    summary: 'Возвращает данные, содержащиеся в привязке.'
    remarks: |-
      **Наборы требований**:

      - [ХтмлкоерЦион](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#htmlcoercion) (при использовании`Office.CoercionType.Html`<!-- -->),

      - [Матриксбиндингс](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#matrixbindings)

      - [МатрикскоерЦион](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#matrixcoercion) (при использовании`Office.CoercionType.Matrix`<!-- -->)

      - [УксмлкоерЦион](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#ooxmlcoercion) (при использовании`Office.CoercionType.Ooxml`<!-- -->)

      - [TableBindings](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#tablebindings)

      - [ТаблекоерЦион](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#tablecoercion) (при использовании`Office.CoercionType.Table`<!-- -->)

      - [Текстбиндингс](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#textbindings)

      - [ТексткоерЦион](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#textcoercion) (при использовании`Office.CoercionType.Text`<!-- -->)

      При вызове из MatrixBinding или TableBinding метод getDataAsync будет возвращать подмножество связанных значений, если указаны необязательные параметры startRow, startColumn, rowCount и columnCount (и они указывают непрерывный и допустимый диапазон).
    name: 'getDataAsync(options, callback)'
    fullName: 'getDataAsync(options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getDataAsync<T>(options?: GetBindingDataOptions, callback?: (result: AsyncResult<T>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: options
          description: Предоставляет параметры для получения данных в привязке.
          type:
            - office.Office.GetBindingDataOptions
        - id: callback
          description: 'Необязательно. Функция, вызываемая при возвращении обратного вызова, единственный параметр которой имеет тип [Office. AsyncResult](xref:office.Office.AsyncResult)<!-- -->. `value` Свойство Result имеет значения в указанной привязке. Если `coercionType` параметр указан (при успешном вызове), данные возвращаются в формате, описанном в разделе Перечисление CoercionType.'
          type:
            - '(result: AsyncResult<T>) => void'
      typeParameters:
        - id: T
  - uid: office.Office.Binding.getDataAsync_1
    summary: 'Возвращает данные, содержащиеся в привязке.'
    remarks: |-
      **Наборы требований**:

      - [ХтмлкоерЦион](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#htmlcoercion) (при использовании`Office.CoercionType.Html`<!-- -->)

      - [Матриксбиндингс](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#matrixbindings)

      - [МатрикскоерЦион](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#matrixcoercion) (при использовании`Office.CoercionType.Matrix`<!-- -->)

      - [УксмлкоерЦион](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#ooxmlcoercion) (при использовании`Office.CoercionType.Ooxml`<!-- -->)

      - [TableBindings](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#tablebindings)

      - [ТаблекоерЦион](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#tablecoercion) (при использовании`Office.CoercionType.Table`<!-- -->)

      - [Текстбиндингс](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#textbindings)

      - [ТексткоерЦион](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#textcoercion) (при использовании`Office.CoercionType.Text`<!-- -->)

      При вызове из MatrixBinding или TableBinding метод getDataAsync будет возвращать подмножество связанных значений, если указаны необязательные параметры startRow, startColumn, rowCount и columnCount (и они указывают непрерывный и допустимый диапазон).

      #### <a name="examples"></a>Примеры

      ```javascript
      function showBindingData() {
          Office.select("bindings#MyBinding").getDataAsync(function (asyncResult) {
              write(asyncResult.value)
          });
      }

      // Function that writes to a div with id='message' on the page.
      function write(message){
          document.getElementById('message').innerText += message; 
      }

      // There is an important difference in behavior between using the "table" and "matrix" coercionType with the
      // Binding.getDataAsync method, with respect to data formatted with header rows, as shown in the following
      // two examples. These code examples show event handler functions for the Binding.SelectionChanged event.

      // If you specify the "table" coercionType, the TableData.rows property ( result.value.rows in the following
      // code example) returns an array that contains only the body rows of the table. So, its 0th row will be the
      // first non-header row in the table.
      function selectionChanged(evtArgs) { 
          Office.select("bindings#TableTranslate").getDataAsync(
              { coercionType: 'table', 
                startRow: evtArgs.startRow, 
                startCol: 0, 
                rowCount: 1, 
                columnCount: 1 },  
              function (result) { 
                  if (result.status == 'succeeded') { 
                      write("Image to find: " + result.value.rows[0][0]); 
                  } 
                  else 
                      write(result.error.message); 
          }); 
      }     
      // Function that writes to a div with id='message' on the page. 
      function write(message){ 
          document.getElementById('message').innerText += message; 
      }

      // However, if you specify the "matrix" coercionType, result.value in the following code example returns an array
      // that contains the table header in the 0th row. If the table header contains multiple rows, then these are all
      // included in the result.value matrix as separate rows before the table body rows are included.
      function selectionChanged(evtArgs) { 
          Office.select("bindings#TableTranslate").getDataAsync(
              { coercionType: 'matrix', 
                startRow: evtArgs.startRow, 
                startCol: 0, 
                rowCount: 1, 
                columnCount: 1 },  
              function (result) { 
                  if (result.status == 'succeeded') { 
                      write("Image to find: " + result.value[1][0]); 
                  } 
                  else 
                      write(result.error.message); 
          }); 
      }     
      // Function that writes to a div with id='message' on the page. 
      function write(message){ 
          document.getElementById('message').innerText += message; 
      }
      ```
    name: getDataAsync(callback)
    fullName: getDataAsync(callback)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getDataAsync<T>(callback?: (result: AsyncResult<T>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: callback
          description: 'Необязательно. Функция, вызываемая при возвращении обратного вызова, единственный параметр которой имеет тип [Office. AsyncResult](xref:office.Office.AsyncResult)<!-- -->. `value` Свойство Result имеет значения в указанной привязке. Если `coercionType` параметр указан (при успешном вызове), данные возвращаются в формате, описанном в разделе Перечисление CoercionType.'
          type:
            - '(result: AsyncResult<T>) => void'
      typeParameters:
        - id: T
  - uid: office.Office.Binding.removeHandlerAsync
    summary: Удаляет указанный обработчик из привязки для указанного типа события.
    remarks: '**Набор требований**: [BindingEvents](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#bindingevents)'
    name: 'removeHandlerAsync(eventType, options, callback)'
    fullName: 'removeHandlerAsync(eventType, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'removeHandlerAsync(eventType: Office.EventType, options?: RemoveHandlerOptions, callback?: (result: AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: eventType
          description: Тип события. Для привязок можно `Office.EventType.BindingDataChanged` или`Office.EventType.BindingSelectionChanged`<!-- -->.
          type:
            - office.Office.EventType
        - id: options
          description: 'Предоставляет параметры для определения обработчика событий или обработчиков, которые удаляются.'
          type:
            - office.Office.RemoveHandlerOptions
        - id: callback
          description: 'Необязательно. Функция, вызываемая при возвращении обратного вызова, единственный параметр которой имеет тип [Office. AsyncResult](xref:office.Office.AsyncResult)<!-- -->.'
          type:
            - '(result: AsyncResult<void>) => void'
  - uid: office.Office.Binding.removeHandlerAsync_1
    summary: Удаляет указанный обработчик из привязки для указанного типа события.
    remarks: |-
      **Набор требований**: [BindingEvents](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#bindingevents)

      #### <a name="examples"></a>Примеры

      ```javascript
      function removeEventHandlerFromBinding() {
          Office.select("bindings#MyBinding").removeHandlerAsync(
              Office.EventType.BindingDataChanged, {handler:onBindingDataChanged});
      }
      ```
    name: 'removeHandlerAsync(eventType, callback)'
    fullName: 'removeHandlerAsync(eventType, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'removeHandlerAsync(eventType: Office.EventType, callback?: (result: AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: eventType
          description: Тип события. Для привязок можно `Office.EventType.BindingDataChanged` или`Office.EventType.BindingSelectionChanged`<!-- -->.
          type:
            - office.Office.EventType
        - id: callback
          description: 'Необязательно. Функция, вызываемая при возвращении обратного вызова, единственный параметр которой имеет тип [Office. AsyncResult](xref:office.Office.AsyncResult)<!-- -->.'
          type:
            - '(result: AsyncResult<void>) => void'
  - uid: office.Office.Binding.setDataAsync
    summary: 'Записывает данные в привязанный раздел документа, представленный указанным объектом привязки.'
    remarks: |-
      **Наборы требований**:

      - [ХтмлкоерЦион](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#htmlcoercion) (при использовании`Office.CoercionType.Html`<!-- -->)

      - [Матриксбиндингс](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#matrixbindings)

      - [МатрикскоерЦион](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#matrixcoercion) (при использовании`Office.CoercionType.Matrix`<!-- -->)

      - [УксмлкоерЦион](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#ooxmlcoercion) (при использовании`Office.CoercionType.Ooxml`<!-- -->)

      - [TableBindings](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#tablebindings)

      - [ТаблекоерЦион](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#tablecoercion) (при использовании`Office.CoercionType.Table`<!-- -->)

      - [Текстбиндингс](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#textbindings)

      - [ТексткоерЦион](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#textcoercion) (при использовании`Office.CoercionType.Text`<!-- -->)

      Значение, передаваемое для данных, содержит данные, которые будут записаны в привязке. Тип передаваемых значений определяет, что будет записано, как описано в следующей таблице.

      <table> <tr> <th>`data`оно</th> <th>Записываемые данные</th> </tr> <tr> <td>Строка</td> <td>Записывается обычный текст или все данные, которые можно привести к строке.</td> </tr> <tr> <td>Массив массивов (матрица)</td> <td>Tabular data without headers will be written. For example, to write data to three rows in two columns, you can pass an array like this: `[["R1C1", "R1C2"], ["R2C1", "R2C2"], ["R3C1", "R3C2"]]`<!-- -->. Чтобы записать один столбец из трех строк, передайте массив следующим образом:`[["R1C1"], ["R2C1"], ["R3C1"]]`<!-- -->.</td> </tr> <tr> <td>`TableData` Объект</td> <td>Записываются табличные данные с заголовками.</td> </tr> </table>

      Кроме того, при записи данных в привязку применяются следующие действия, соответствующие конкретному приложению. Для Word указанные данные записываются в привязку следующим образом:

      <table> <tr> <th>`data`оно</th> <th>Записываемые данные</th> </tr> <tr> <td>Строка</td> <td>Записывается указанный текст.</td> </tr> <tr> <td>Массив массивов (матрица) или `TableData` объект</td> <td>Записывается таблица Word.</td> </tr> <tr> <td>HTML</td> <td>Записывается указанный HTML-код. Если указанный HTML-код содержит недопустимые фрагменты, Word не вызовет ошибку. Word запишет весь допустимый HTML-код и пропустит недопустимые данные.</td> </tr> <tr> <td>Office Open XML (Open XML)</td> <td>Записывается указанный XML-код.</td> </tr> </table>

      В Excel указанное значение параметра data записывается в привязку таким образом:

      <table> <tr> <th>`data`оно</th> <th>Записываемые данные</th> </tr> <tr> <td>Строка</td> <td>Указанный текст вставляется в качестве значения первой привязанной ячейки. Кроме того, можно указать допустимую формулу, чтобы добавить эту формулу в связанную ячейку. Например, если задать для параметра data значение `"=SUM(A1:A5)"`, значения в указанном диапазоне будут суммироваться. Если задать формулу в связанной ячейке, добавленную (или существующую) формулу в этой ячейке будет невозможно считать. Когда вызывается метод Binding.getDataAsync для привязанной ячейки для чтения этих данных, метод может вернуть только данные, отображенные в ячейке (результат формулы).</td> </tr> <tr> <td>Массив массивов (матрица) и форма точно соответствует форме указанной привязки</td> <td>Записывается набор строк и столбцов. Кроме того, можно указать массив массивов, содержащий допустимые формулы, чтобы добавить их в связанные ячейки. Например, если задать для `[["=SUM(A1:A5)","=AVERAGE(A1:A5)"]]` параметра data значение, в привязку, которая содержит две ячейки, будут добавлены эти две формулы. Как и при задании формулы в одной связанной ячейке, невозможно считать добавленные формулы (или все существующие формулы) из привязки с помощью `Binding.getDataAsync` метода — она возвращает только те данные, которые отображаются в связанных ячейках.</td> </tr> <tr> <td>`TableData` Объект, а форма таблицы соответствует связанной таблице.</td> <td>Записывается указанный набор строк или заголовков, если никакие другие данные в окружающих ячейках не перезаписываются. **Note**: Если вы задаете формулы в объекте TableData, который вы передаете в качестве параметра *Data* , вы можете не получить ожидаемые результаты из-за функции "вычисляемые столбцы" в Excel, которая автоматически дублирует формулы в столбце. Чтобы обойти это, когда вы хотите записать *data* с формулами в привязанную таблицу, попробуйте указать данные как массив массивов (вместо объекта TableData) и для *coercionType* указать Microsoft.Office.Matrix или "матрица".</td> </tr> </table>

      Для Excel в Интернете:

      - Общее число ячеек в значении, переданном параметру Data, не может превышать 20 000 в отдельном вызове этого метода.

      - Количество групп форматирования, переданных параметру cellFormat, не может превышать 100. Одна группа форматирования состоит из набора вариантов форматирования, применяемого к указанному диапазону ячеек.

      Во всех остальных случаях возвращается ошибка.

      Метод setDataAsync записывает данные в подмножество таблицы или привязки матрицы, если указаны необязательные параметры startRow и startColumn, и они указывают допустимый диапазон.

      В функции обратного вызова, переданной в метод setDataAsync, можно использовать свойства объекта AsyncResult, чтобы возвратить такие сведения:

      <table> <tr> <th>Свойство</th> <th>Назначение</th> </tr> <tr> <td>AsyncResult.value</td> <td>Всегда возвращает значение undefined, так как нет объекта или данных для извлечения.</td> </tr> <tr> <td>AsyncResult.status</td> <td>Определяет, удалось ли выполнить операцию.</td> </tr> <tr> <td>AsyncResult.error</td> <td>Доступ к объекту Error, который предоставляет сведения об ошибке, если операция завершилась неудачно.</td> </tr> <tr> <td>AsyncResult.asyncContext</td> <td>Определяемый пользователем элемент любого типа, который возвращается в объекте AsyncResult без изменения.</td> </tr> </table>
    name: 'setDataAsync(data, options, callback)'
    fullName: 'setDataAsync(data, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setDataAsync(data: TableData | any, options?: SetBindingDataOptions, callback?: (result: AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: data
          description: |-
            Данные, записываемые в текущий выделенный фрагмент. Возможные типы данных для узла:

            строка: Excel в Интернете и Windows, Word только в Интернете и Windows

            массив массивов: только Excel и Word

            [Office. TableData](xref:office.Office.TableData)<!-- -->: Только Excel и Word

            HTML: Word только в Интернете и Windows

            Office Open XML: только Word
          type:
            - TableData | any
        - id: options
          description: Предоставляет параметры для настройки данных в привязке.
          type:
            - office.Office.SetBindingDataOptions
        - id: callback
          description: 'Необязательно. Функция, вызываемая при возвращении обратного вызова, единственный параметр которой имеет тип [Office. AsyncResult](xref:office.Office.AsyncResult)<!-- -->.'
          type:
            - '(result: AsyncResult<void>) => void'
  - uid: office.Office.Binding.setDataAsync_1
    summary: 'Записывает данные в привязанный раздел документа, представленный указанным объектом привязки.'
    remarks: |-
      **Наборы требований**:

      - [ХтмлкоерЦион](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#htmlcoercion) (при использовании`Office.CoercionType.Html`<!-- -->)

      - [Матриксбиндингс](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#matrixbindings)

      - [МатрикскоерЦион](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#matrixcoercion) (при использовании`Office.CoercionType.Matrix`<!-- -->)

      - [УксмлкоерЦион](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#ooxmlcoercion) (при использовании`Office.CoercionType.Ooxml`<!-- -->)

      - [TableBindings](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#tablebindings)

      - [ТаблекоерЦион](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#tablecoercion) (при использовании`Office.CoercionType.Table`<!-- -->)

      - [Текстбиндингс](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#textbindings)

      - [ТексткоерЦион](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#textcoercion) (при использовании`Office.CoercionType.Text`<!-- -->)

      Значение, передаваемое для данных, содержит данные, которые будут записаны в привязке. Тип передаваемых значений определяет, что будет записано, как описано в следующей таблице.

      <table> <tr> <th>`data`оно</th> <th>Записываемые данные</th> </tr> <tr> <td>Строка</td> <td>Записывается обычный текст или все данные, которые можно привести к строке.</td> </tr> <tr> <td>Массив массивов (матрица)</td> <td>Tabular data without headers will be written. For example, to write data to three rows in two columns, you can pass an array like this: `[["R1C1", "R1C2"], ["R2C1", "R2C2"], ["R3C1", "R3C2"]]`<!-- -->. Чтобы записать один столбец из трех строк, передайте массив следующим образом:`[["R1C1"], ["R2C1"], ["R3C1"]]`<!-- -->.</td> </tr> <tr> <td>`TableData` Объект</td> <td>Записываются табличные данные с заголовками.</td> </tr> </table>

      Кроме того, при записи данных в привязку применяются следующие действия, соответствующие конкретному приложению. Для Word указанные данные записываются в привязку следующим образом:

      <table> <tr> <th>`data`оно</th> <th>Записываемые данные</th> </tr> <tr> <td>Строка</td> <td>Записывается указанный текст.</td> </tr> <tr> <td>Массив массивов (матрица) или `TableData` объект</td> <td>Записывается таблица Word.</td> </tr> <tr> <td>HTML</td> <td>Записывается указанный HTML-код. Если указанный HTML-код содержит недопустимые фрагменты, Word не вызовет ошибку. Word запишет весь допустимый HTML-код и пропустит недопустимые данные.</td> </tr> <tr> <td>Office Open XML (Open XML)</td> <td>Записывается указанный XML-код.</td> </tr> </table>

      В Excel указанное значение параметра data записывается в привязку таким образом:

      <table> <tr> <th>`data`оно</th> <th>Записываемые данные</th> </tr> <tr> <td>Строка</td> <td>Указанный текст вставляется в качестве значения первой привязанной ячейки. Кроме того, можно указать допустимую формулу, чтобы добавить эту формулу в связанную ячейку. Например, если задать для параметра data значение `"=SUM(A1:A5)"`, значения в указанном диапазоне будут суммироваться. Если задать формулу в связанной ячейке, добавленную (или существующую) формулу в этой ячейке будет невозможно считать. Когда вызывается метод Binding.getDataAsync для привязанной ячейки для чтения этих данных, метод может вернуть только данные, отображенные в ячейке (результат формулы).</td> </tr> <tr> <td>Массив массивов (матрица) и форма точно соответствует форме указанной привязки</td> <td>Записывается набор строк и столбцов. Кроме того, можно указать массив массивов, содержащий допустимые формулы, чтобы добавить их в связанные ячейки. Например, если задать для `[["=SUM(A1:A5)","=AVERAGE(A1:A5)"]]` параметра data значение, в привязку, которая содержит две ячейки, будут добавлены эти две формулы. Как и при задании формулы в одной связанной ячейке, невозможно считать добавленные формулы (или все существующие формулы) из привязки с помощью `Binding.getDataAsync` метода — она возвращает только те данные, которые отображаются в связанных ячейках.</td> </tr> <tr> <td>`TableData` Объект, а форма таблицы соответствует связанной таблице.</td> <td>Записывается указанный набор строк или заголовков, если никакие другие данные в окружающих ячейках не перезаписываются. **Note**: Если вы задаете формулы в объекте TableData, который вы передаете в качестве параметра *Data* , вы можете не получить ожидаемые результаты из-за функции "вычисляемые столбцы" в Excel, которая автоматически дублирует формулы в столбце. Чтобы обойти это, когда вы хотите записать *data* с формулами в привязанную таблицу, попробуйте указать данные как массив массивов (вместо объекта TableData) и для *coercionType* указать Microsoft.Office.Matrix или "матрица".</td> </tr> </table>

      Для Excel в Интернете:

      - Общее число ячеек в значении, переданном параметру Data, не может превышать 20 000 в отдельном вызове этого метода.

      - Количество групп форматирования, переданных параметру cellFormat, не может превышать 100. Одна группа форматирования состоит из набора вариантов форматирования, применяемого к указанному диапазону ячеек.

      Во всех остальных случаях возвращается ошибка.

      Метод setDataAsync записывает данные в подмножество таблицы или привязки матрицы, если указаны необязательные параметры startRow и startColumn, и они указывают допустимый диапазон.

      В функции обратного вызова, переданной в метод setDataAsync, можно использовать свойства объекта AsyncResult, чтобы возвратить такие сведения:

      <table> <tr> <th>Свойство</th> <th>Назначение</th> </tr> <tr> <td>AsyncResult.value</td> <td>Всегда возвращает значение undefined, так как нет объекта или данных для извлечения.</td> </tr> <tr> <td>AsyncResult.status</td> <td>Определяет, удалось ли выполнить операцию.</td> </tr> <tr> <td>AsyncResult.error</td> <td>Доступ к объекту Error, который предоставляет сведения об ошибке, если операция завершилась неудачно.</td> </tr> <tr> <td>AsyncResult.asyncContext</td> <td>Определяемый пользователем элемент любого типа, который возвращается в объекте AsyncResult без изменения.</td> </tr> </table>

      #### <a name="examples"></a>Примеры

      ```javascript
      function setBindingData() {
          Office.select("bindings#MyBinding").setDataAsync('Hello World!', function (asyncResult) { });
      }

      // Specifying the optional coercionType parameter lets you specify the kind of data you want to write to a binding.
      // For example, in Word if you want to write HTML to a text binding, you can specify the coercionType parameter 
      // as "html" as shown in the following example, which uses HTML <b> tags to make "Hello" bold.
      function writeHtmlData() {
          Office.select("bindings#myBinding").setDataAsync(
              "<b>Hello</b> World!", {coercionType: "html"}, function (asyncResult) {
              if (asyncResult.status == "failed") {
                  write('Error: ' + asyncResult.error.message);
              }
          });
      }

      // Function that writes to a div with id='message' on the page.
      function write(message){
          document.getElementById('message').innerText += message; 
      }

      // In this example, the call to setDataAsync passes the data parameter as an array of arrays
      // (to create a single column of three rows), and specifies the data structure with the 
      // coercionType parameter as a "matrix".
      function writeBoundDataMatrix() {
          Office.select("bindings#myBinding").setDataAsync(
              [['Berlin'],['Munich'],['Duisburg']],{ coercionType: "matrix" }, function (asyncResult) {
              if (asyncResult.status == "failed") {
                  write('Error: ' + asyncResult.error.message);
              } else {
                  write('Bound data: ' + asyncResult.value);
              }
          });
      }
      // Function that writes to a div with id='message' on the page.
      function write(message){
          document.getElementById('message').innerText += message; 
      }

      // In the writeBoundDataTable function in this example, the call to setDataAsync passes the data parameter 
      // as a TableData object (to write three columns and three rows), and specifies the data structure
      // with the coercionType parameter as a "table".

      // In the updateTableData function, the call to setDataAsync again passes the data parameter as a TableData object,
      // but as a single column with a new header and three rows, to update the values in the last column 
      // of the table created with the writeBoundDataTable function. The optional zero-based startColumn parameter 
      // is specified as 2 to replace the values in the third column of the table.
      function writeBoundDataTable() {
          // Create a TableData object.
          var myTable = new Office.TableData();
          myTable.headers = ['First Name', 'Last Name', 'Grade'];
          myTable.rows = [['Kim', 'Abercrombie', 'A'], ['Junmin','Hao', 'C'],['Toni','Poe','B']];

          // Set myTable in the binding.
          Office.select("bindings#myBinding").setDataAsync(myTable, { coercionType: "table" }, 
              function (asyncResult) {
                  if (asyncResult.status == Office.AsyncResultStatus.Failed) {
                      write('Error: '+ asyncResult.error.message);
              } else {
                  write('Bound data: ' + asyncResult.value);
              }
          });
      }

      // Replace last column with different data.
      function updateTableData() {
          var newTable = new Office.TableData();
          newTable.headers = ["Gender"];
          newTable.rows = [["M"],["M"],["F"]];
          Office.select("bindings#myBinding").setDataAsync(newTable, { coercionType: "table", startColumn:2 }, 
              function (asyncResult) {
                  if (asyncResult.status == Office.AsyncResultStatus.Failed) {
                      write('Error: '+ asyncResult.error.message);
              } else {
                  write('Bound data: ' + asyncResult.value);
              }     
          });   
      }

      // In this example, the following call passes two formatting groups to cellFormat.
      Office.select("bindings#myBinding").setDataAsync([['Berlin'],['Munich'],['Duisburg']],
        {cellFormat:[{cells: {row: 1}, format: {fontColor: "yellow"}}, 
            {cells: {row: 3, column: 4}, format: {borderColor: "white", fontStyle: "bold"}}]}, 
        function (asyncResult){});
      ```
    name: 'setDataAsync(data, callback)'
    fullName: 'setDataAsync(data, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setDataAsync(data: TableData | any, callback?: (result: AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: data
          description: |-
            Данные, записываемые в текущий выделенный фрагмент. Возможные типы данных для узла:

            строка: Excel в Интернете и Windows, Word только в Интернете и Windows

            массив массивов: только Excel и Word

            `TableData`<!-- -->: Только Excel и Word

            HTML: Word только в Интернете и Windows

            Office Open XML: только Word
          type:
            - TableData | any
        - id: callback
          description: 'Необязательно. Функция, вызываемая при возвращении обратного вызова, единственный параметр которой имеет тип [Office. AsyncResult](xref:office.Office.AsyncResult)<!-- -->.'
          type:
            - '(result: AsyncResult<void>) => void'
  - uid: office.Office.Binding.document
    summary: 'Получение объекта Document, связанного с привязкой.'
    name: document
    fullName: document
    langs:
      - typeScript
    type: property
    syntax:
      content: 'document: Office.Document;'
      return:
        type:
          - office.Office.Document
        description: |-


          #### <a name="examples"></a>Примеры

          ```javascript
          Office.context.document.bindings.getByIdAsync("myBinding", function (asyncResult) {
              write(asyncResult.value.document.url);
          });

          // Function that writes to a div with id='message' on the page.
          function write(message){
              document.getElementById('message').innerText += message; 
          }
          ```
  - uid: office.Office.Binding.id
    summary: 'Строка, однозначно идентифицирующая эту привязку между привязками в одном объекте [Office. Document](xref:office.Office.Document) .'
    name: id
    fullName: id
    langs:
      - typeScript
    type: property
    syntax:
      content: 'id: string;'
      return:
        type:
          - string
        description: |-


          #### <a name="examples"></a>Примеры

          ```javascript
          Office.context.document.bindings.getByIdAsync("myBinding", function (asyncResult) {
              write(asyncResult.value.id);
          });

          // Function that writes to a div with id='message' on the page.
          function write(message){
              document.getElementById('message').innerText += message; 
          }
          ```
  - uid: office.Office.Binding.type
    summary: Получает тип привязки.
    name: type
    fullName: type
    langs:
      - typeScript
    type: property
    syntax:
      content: 'type: Office.BindingType;'
      return:
        type:
          - office.Office.BindingType
        description: |-


          #### <a name="examples"></a>Примеры

          ```javascript
          Office.context.document.bindings.getByIdAsync("MyBinding", function (asyncResult) { 
              write(asyncResult.value.type); 
          }) 

          // Function that writes to a div with id='message' on the page. 
          function write(message){ 
              document.getElementById('message').innerText += message;  
          }
          ```