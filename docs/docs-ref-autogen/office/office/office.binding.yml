### YamlMime:TSType
name: Office.Binding
uid: office!Office.Binding:interface
package: office!
fullName: Office.Binding
summary: >-
  Представляет привязку к разделу документа.


  Объект Binding предоставляет функциональные возможности, которыми обладают все привязки, независимо от типа.


  Объект Binding никогда не вызывается напрямую. Это абстрактный родительский класс объектов, представляющих каждый тип привязки: [Office. MatrixBinding](xref:office!Office.MatrixBinding:interface)<!-- -->, [Office. TableBinding](xref:office!Office.TableBinding:interface)<!-- -->или [Office. TextBinding](xref:office!Office.TextBinding:interface)<!-- -->. Все три из этих объектов наследуют методы getDataAsync и setDataAsync из объекта Binding, которые позволяют взаимодействовать с данными в привязке. Они также наследуют свойства id и type и позволяют запрашивать значения этих свойств. Кроме того, объекты MatrixBinding и TableBinding предоставляют дополнительные методы для работы с матрицами и таблицами, например, для подсчета количества строк и столбцов.
remarks: >-
  **Узлы**: Excel, Word


  **Наборы требований**:


  - [MatrixBindings](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#matrixbindings)


  - [TableBindings](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#tablebindings)


  - [TextBindings](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#textbindings)
isPreview: false
isDeprecated: false
type: interface
properties:
- name: document
  uid: office!Office.Binding#document:member
  package: office!
  fullName: document
  summary: Получение объекта Document, связанного с привязкой.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'document: Office.Document;'
    return:
      type: <xref uid="office!Office.Document:interface" />
      description: "\n\n#### <a name=\"examples\"></a>Примеры\n\n```javascript\nOffice.context.document.bindings.getByIdAsync(\"myBinding\", function (asyncResult) {\n    write(asyncResult.value.document.url);\n});\n\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n```"
- name: id
  uid: office!Office.Binding#id:member
  package: office!
  fullName: id
  summary: Строка, однозначно идентифицирующая эту привязку между привязками в одном [Office.Docом объекте умент](xref:office!Office.Document:interface) .
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'id: string;'
    return:
      type: string
      description: "\n\n#### <a name=\"examples\"></a>Примеры\n\n```javascript\nOffice.context.document.bindings.getByIdAsync(\"myBinding\", function (asyncResult) {\n    write(asyncResult.value.id);\n});\n\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n```"
- name: type
  uid: office!Office.Binding#type:member
  package: office!
  fullName: type
  summary: Получает тип привязки.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'type: Office.BindingType;'
    return:
      type: <xref uid="office!Office.BindingType:enum" />
      description: "\n\n#### <a name=\"examples\"></a>Примеры\n\n```javascript\nOffice.context.document.bindings.getByIdAsync(\"MyBinding\", function (asyncResult) { \n    write(asyncResult.value.type); \n}) \n\n// Function that writes to a div with id='message' on the page. \nfunction write(message){ \n    document.getElementById('message').innerText += message;  \n}\n```"
methods:
- name: addHandlerAsync(eventType, handler, options, callback)
  uid: office!Office.Binding#addHandlerAsync:member(1)
  package: office!
  fullName: addHandlerAsync(eventType, handler, options, callback)
  summary: Добавляет обработчик событий для объекта для указанного элемента [Office. EventType](xref:office!Office.EventType:enum)<!-- -->. Поддерживаемые Евенттипес `Office.EventType.BindingDataChanged``Office.EventType.BindingSelectionChanged`<!-- -->.
  remarks: >-
    **Набор требований**: [BindingEvents](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#bindingevents)


    Можно добавить несколько обработчиков событий для указанного объекта eventType, если имя каждой функции обработчика событий уникально.
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'addHandlerAsync(eventType: Office.EventType, handler: any, options?: Office.AsyncContextOptions, callback?: (result: Office.AsyncResult<void>) => void): void;'
    parameters:
    - id: eventType
      description: Тип события. Для привязок можно `Office.EventType.BindingDataChanged` или `Office.EventType.BindingSelectionChanged`<!-- -->.
      type: <xref uid="office!Office.EventType:enum" />
    - id: handler
      description: Добавляемая функция обработчика событий, единственный параметр которой имеет тип [Office. BindingDataChangedEventArgs](xref:office!Office.BindingDataChangedEventArgs:interface) или [Office. свойство bindingselectionchangedeventargs](xref:office!Office.BindingSelectionChangedEventArgs:interface)<!-- -->.
      type: any
    - id: options
      description: Предоставляет параметр для сохранения данных контекста любого типа без изменений для использования при обратном вызове.
      type: <xref uid="office!Office.AsyncContextOptions:interface" />
    - id: callback
      description: Необязательный атрибут. Функция, вызываемая при возвращении обратного вызова, единственный параметр которой имеет тип [Office. AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;void&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: addHandlerAsync(eventType, handler, callback)
  uid: office!Office.Binding#addHandlerAsync:member(2)
  package: office!
  fullName: addHandlerAsync(eventType, handler, callback)
  summary: Добавляет обработчик событий для объекта для указанного элемента [Office. EventType](xref:office!Office.EventType:enum)<!-- -->. Поддерживаемые Евенттипес `Office.EventType.BindingDataChanged``Office.EventType.BindingSelectionChanged`<!-- -->.
  remarks: "**Набор требований**: [BindingEvents](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#bindingevents)\n\nМожно добавить несколько обработчиков событий для указанного объекта eventType, если имя каждой функции обработчика событий уникально.\n\n#### <a name=\"examples\"></a>Примеры\n\n```javascript\n// The following code sample calls the select method of the Office object to access the binding\n// with ID \"MyBinding\", and then calls the addHandlerAsync method to add a handler function \n// for the bindingDataChanged event of that binding.\nfunction addEventHandlerToBinding() {\n    Office.select(\"bindings#MyBinding\").addHandlerAsync(\n        Office.EventType.BindingDataChanged, onBindingDataChanged);\n}\n\nfunction onBindingDataChanged(eventArgs) {\n    write(\"Data has changed in binding: \" + eventArgs.binding.id);\n}\n\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n```\n```javascript\n// To add an event handler for the BindingSelectionChanged event of a binding, \n// use the addHandlerAsync method of the Binding object.\n// The event handler receives an argument of type BindingSelectionChangedEventArgs.\nfunction addEventHandlerToBinding() {\n    Office.select(\"bindings#MyBinding\").addHandlerAsync(\n        Office.EventType.BindingSelectionChanged, onBindingSelectionChanged);\n}\n\nfunction onBindingSelectionChanged(eventArgs) {\n    write(eventArgs.binding.id + \" has been selected.\");\n}\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n```"
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'addHandlerAsync(eventType: Office.EventType, handler: any, callback?: (result: Office.AsyncResult<void>) => void): void;'
    parameters:
    - id: eventType
      description: Тип события. Для привязок можно `Office.EventType.BindingDataChanged` или `Office.EventType.BindingSelectionChanged`<!-- -->.
      type: <xref uid="office!Office.EventType:enum" />
    - id: handler
      description: Добавляемая функция обработчика событий, единственный параметр которой имеет тип [Office. BindingDataChangedEventArgs](xref:office!Office.BindingDataChangedEventArgs:interface) или [Office. свойство bindingselectionchangedeventargs](xref:office!Office.BindingSelectionChangedEventArgs:interface)<!-- -->.
      type: any
    - id: callback
      description: Необязательный атрибут. Функция, вызываемая при возвращении обратного вызова, единственный параметр которой имеет тип [Office. AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;void&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: getDataAsync(options, callback)
  uid: office!Office.Binding#getDataAsync:member(1)
  package: office!
  fullName: getDataAsync(options, callback)
  summary: Возвращает данные, содержащиеся в привязке.
  remarks: >-
    **Наборы требований**:


    - [ХтмлкоерЦион](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#htmlcoercion) (при использовании `Office.CoercionType.Html`<!-- -->)


    - [MatrixBindings](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#matrixbindings)


    - [МатрикскоерЦион](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#matrixcoercion) (при использовании `Office.CoercionType.Matrix`<!-- -->)


    - [УксмлкоерЦион](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#ooxmlcoercion) (при использовании `Office.CoercionType.Ooxml`<!-- -->)


    - [TableBindings](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#tablebindings)


    - [ТаблекоерЦион](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#tablecoercion) (при использовании `Office.CoercionType.Table`<!-- -->)


    - [TextBindings](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#textbindings)


    - [ТексткоерЦион](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#textcoercion) (при использовании `Office.CoercionType.Text`<!-- -->)


    При вызове из MatrixBinding или TableBinding метод getDataAsync будет возвращать подмножество связанных значений, если указаны необязательные параметры startRow, startColumn, rowCount и columnCount (и они указывают непрерывный и допустимый диапазон).
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getDataAsync<T>(options?: GetBindingDataOptions, callback?: (result: AsyncResult<T>) => void): void;'
    parameters:
    - id: options
      description: Предоставляет параметры для получения данных в привязке.
      type: <xref uid="office!Office.GetBindingDataOptions:interface" />
    - id: callback
      description: Необязательный атрибут. Функция, вызываемая при возвращении обратного вызова, единственный параметр которой имеет тип [Office. AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. `value`Свойство Result имеет значения в указанной привязке. Если `coercionType` параметр указан (при успешном вызове), данные возвращаются в формате, описанном в разделе Перечисление CoercionType.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;T&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: getDataAsync(callback)
  uid: office!Office.Binding#getDataAsync:member(2)
  package: office!
  fullName: getDataAsync(callback)
  summary: Возвращает данные, содержащиеся в привязке.
  remarks: "**Наборы требований**:\n\n- [ХтмлкоерЦион](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#htmlcoercion) (при использовании `Office.CoercionType.Html`<!-- -->)\n\n- [MatrixBindings](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#matrixbindings)\n\n- [МатрикскоерЦион](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#matrixcoercion) (при использовании `Office.CoercionType.Matrix`<!-- -->)\n\n- [УксмлкоерЦион](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#ooxmlcoercion) (при использовании `Office.CoercionType.Ooxml`<!-- -->)\n\n- [TableBindings](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#tablebindings)\n\n- [ТаблекоерЦион](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#tablecoercion) (при использовании `Office.CoercionType.Table`<!-- -->)\n\n- [TextBindings](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#textbindings)\n\n- [ТексткоерЦион](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#textcoercion) (при использовании `Office.CoercionType.Text`<!-- -->)\n\nПри вызове из MatrixBinding или TableBinding метод getDataAsync будет возвращать подмножество связанных значений, если указаны необязательные параметры startRow, startColumn, rowCount и columnCount (и они указывают непрерывный и допустимый диапазон).\n\n#### <a name=\"examples\"></a>Примеры\n\n```javascript\nfunction showBindingData() {\n    Office.select(\"bindings#MyBinding\").getDataAsync(function (asyncResult) {\n        write(asyncResult.value)\n    });\n}\n\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n\n// There is an important difference in behavior between using the \"table\" and \"matrix\" coercionType with the\n// Binding.getDataAsync method, with respect to data formatted with header rows, as shown in the following\n// two examples. These code examples show event handler functions for the Binding.SelectionChanged event.\n\n// If you specify the \"table\" coercionType, the TableData.rows property ( result.value.rows in the following\n// code example) returns an array that contains only the body rows of the table. So, its 0th row will be the\n// first non-header row in the table.\nfunction selectionChanged(evtArgs) { \n    Office.select(\"bindings#TableTranslate\").getDataAsync(\n        { coercionType: 'table', \n          startRow: evtArgs.startRow, \n          startCol: 0, \n          rowCount: 1, \n          columnCount: 1 },  \n        function (result) { \n            if (result.status == 'succeeded') { \n                write(\"Image to find: \" + result.value.rows[0][0]); \n            } \n            else \n                write(result.error.message); \n    }); \n}     \n// Function that writes to a div with id='message' on the page. \nfunction write(message){ \n    document.getElementById('message').innerText += message; \n}\n\n// However, if you specify the \"matrix\" coercionType, result.value in the following code example returns an array\n// that contains the table header in the 0th row. If the table header contains multiple rows, then these are all\n// included in the result.value matrix as separate rows before the table body rows are included.\nfunction selectionChanged(evtArgs) { \n    Office.select(\"bindings#TableTranslate\").getDataAsync(\n        { coercionType: 'matrix', \n          startRow: evtArgs.startRow, \n          startCol: 0, \n          rowCount: 1, \n          columnCount: 1 },  \n        function (result) { \n            if (result.status == 'succeeded') { \n                write(\"Image to find: \" + result.value[1][0]); \n            } \n            else \n                write(result.error.message); \n    }); \n}     \n// Function that writes to a div with id='message' on the page. \nfunction write(message){ \n    document.getElementById('message').innerText += message; \n}\n```"
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getDataAsync<T>(callback?: (result: AsyncResult<T>) => void): void;'
    parameters:
    - id: callback
      description: Необязательный атрибут. Функция, вызываемая при возвращении обратного вызова, единственный параметр которой имеет тип [Office. AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. `value`Свойство Result имеет значения в указанной привязке. Если `coercionType` параметр указан (при успешном вызове), данные возвращаются в формате, описанном в разделе Перечисление CoercionType.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;T&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: removeHandlerAsync(eventType, options, callback)
  uid: office!Office.Binding#removeHandlerAsync:member(1)
  package: office!
  fullName: removeHandlerAsync(eventType, options, callback)
  summary: Удаляет указанный обработчик из привязки для указанного типа события.
  remarks: '**Набор требований**: [BindingEvents](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#bindingevents)'
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'removeHandlerAsync(eventType: Office.EventType, options?: RemoveHandlerOptions, callback?: (result: AsyncResult<void>) => void): void;'
    parameters:
    - id: eventType
      description: Тип события. Для привязок можно `Office.EventType.BindingDataChanged` или `Office.EventType.BindingSelectionChanged`<!-- -->.
      type: <xref uid="office!Office.EventType:enum" />
    - id: options
      description: Предоставляет параметры для определения обработчика событий или обработчиков, которые удаляются.
      type: <xref uid="office!Office.RemoveHandlerOptions:interface" />
    - id: callback
      description: Необязательный атрибут. Функция, вызываемая при возвращении обратного вызова, единственный параметр которой имеет тип [Office. AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;void&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: removeHandlerAsync(eventType, callback)
  uid: office!Office.Binding#removeHandlerAsync:member(2)
  package: office!
  fullName: removeHandlerAsync(eventType, callback)
  summary: Удаляет указанный обработчик из привязки для указанного типа события.
  remarks: >-
    **Набор требований**: [BindingEvents](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#bindingevents)


    #### <a name="examples"></a>Примеры


    ```javascript

    function removeEventHandlerFromBinding() {
        Office.select("bindings#MyBinding").removeHandlerAsync(
            Office.EventType.BindingDataChanged, {handler:onBindingDataChanged});
    }

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'removeHandlerAsync(eventType: Office.EventType, callback?: (result: AsyncResult<void>) => void): void;'
    parameters:
    - id: eventType
      description: Тип события. Для привязок можно `Office.EventType.BindingDataChanged` или `Office.EventType.BindingSelectionChanged`<!-- -->.
      type: <xref uid="office!Office.EventType:enum" />
    - id: callback
      description: Необязательный атрибут. Функция, вызываемая при возвращении обратного вызова, единственный параметр которой имеет тип [Office. AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;void&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: setDataAsync(data, options, callback)
  uid: office!Office.Binding#setDataAsync:member(1)
  package: office!
  fullName: setDataAsync(data, options, callback)
  summary: Записывает данные в привязанный раздел документа, представленный указанным объектом привязки.
  remarks: >-
    **Наборы требований**:


    - [ХтмлкоерЦион](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#htmlcoercion) (при использовании `Office.CoercionType.Html`<!-- -->)


    - [MatrixBindings](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#matrixbindings)


    - [МатрикскоерЦион](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#matrixcoercion) (при использовании `Office.CoercionType.Matrix`<!-- -->)


    - [УксмлкоерЦион](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#ooxmlcoercion) (при использовании `Office.CoercionType.Ooxml`<!-- -->)


    - [TableBindings](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#tablebindings)


    - [ТаблекоерЦион](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#tablecoercion) (при использовании `Office.CoercionType.Table`<!-- -->)


    - [TextBindings](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#textbindings)


    - [ТексткоерЦион](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#textcoercion) (при использовании `Office.CoercionType.Text`<!-- -->)


    Значение, передаваемое для данных, содержит данные, которые будут записаны в привязке. Тип передаваемых значений определяет, что будет записано, как описано в следующей таблице.


    <table> <tr> <th>`data` оно</th> <th>Записываемые данные</th> </tr> <tr> <td>Строка</td> <td>Записывается обычный текст или все данные, которые можно привести к строке.</td> </tr> <tr> <td>Массив массивов (матрица)</td> <td>Tabular data without headers will be written. For example, to write data to three rows in two columns, you can pass an array like this: `[["R1C1", "R1C2"], ["R2C1", "R2C2"], ["R3C1", "R3C2"]]`<!-- -->. Чтобы записать один столбец из трех строк, передайте массив следующим образом: `[["R1C1"], ["R2C1"], ["R3C1"]]`<!-- -->.</td> </tr> <tr> <td>`TableData`Объект</td> <td>Записываются табличные данные с заголовками.</td> </tr> </table>


    Кроме того, при записи данных в привязку применяются следующие действия, соответствующие конкретному приложению. Для Word указанные данные записываются в привязку следующим образом:


    <table> <tr> <th>`data` оно</th> <th>Записываемые данные</th> </tr> <tr> <td>Строка</td> <td>Записывается указанный текст.</td> </tr> <tr> <td>Массив массивов (матрица) или `TableData` объект</td> <td>Записывается таблица Word.</td> </tr> <tr> <td>HTML</td> <td>Записывается указанный HTML-код. Если указанный HTML-код содержит недопустимые фрагменты, Word не вызовет ошибку. Word запишет весь допустимый HTML-код и пропустит недопустимые данные.</td> </tr> <tr> <td>Office Open XML (Open XML)</td> <td>Записывается указанный XML-код.</td> </tr> </table>


    В Excel указанное значение параметра data записывается в привязку таким образом:


    <table> <tr> <th>`data` оно</th> <th>Записываемые данные</th> </tr> <tr> <td>Строка</td> <td>Указанный текст вставляется в качестве значения первой привязанной ячейки. Кроме того, можно указать допустимую формулу, чтобы добавить эту формулу в связанную ячейку. Например, если задать для параметра data значение `"=SUM(A1:A5)"`, значения в указанном диапазоне будут суммироваться. Если задать формулу в связанной ячейке, добавленную (или существующую) формулу в этой ячейке будет невозможно считать. Когда вызывается метод Binding.getDataAsync для привязанной ячейки для чтения этих данных, метод может вернуть только данные, отображенные в ячейке (результат формулы).</td> </tr> <tr> <td>Массив массивов (матрица) и форма точно соответствует форме указанной привязки</td> <td>Записывается набор строк и столбцов. Кроме того, можно указать массив массивов, содержащий допустимые формулы, чтобы добавить их в связанные ячейки. Например, если задать для параметра data значение, в `[["=SUM(A1:A5)","=AVERAGE(A1:A5)"]]` привязку, которая содержит две ячейки, будут добавлены эти две формулы. Как и при задании формулы в одной связанной ячейке, невозможно считать добавленные формулы (или все существующие формулы) из привязки с помощью `Binding.getDataAsync` метода — она возвращает только те данные, которые отображаются в связанных ячейках.</td> </tr> <tr> <td>`TableData`Объект, а форма таблицы соответствует связанной таблице.</td> <td>Записывается указанный набор строк или заголовков, если никакие другие данные в окружающих ячейках не перезаписываются. **Note**: Если вы задаете формулы в объекте TableData, который вы передаете в качестве параметра *Data* , вы можете не получить ожидаемые результаты из-за функции "вычисляемые столбцы" в Excel, которая автоматически дублирует формулы в столбце. Чтобы обойти это, когда вы хотите записать *data* с формулами в привязанную таблицу, попробуйте указать данные как массив массивов (вместо объекта TableData) и для *coercionType* указать Microsoft.Office.Matrix или "матрица".</td> </tr> </table>


    Для Excel в Интернете:


    - Общее число ячеек в значении, переданном параметру Data, не может превышать 20 000 в отдельном вызове этого метода.


    - Количество групп форматирования, переданных параметру cellFormat, не может превышать 100. Одна группа форматирования состоит из набора вариантов форматирования, применяемого к указанному диапазону ячеек.


    Во всех остальных случаях возвращается ошибка.


    Метод setDataAsync записывает данные в подмножество таблицы или привязки матрицы, если указаны необязательные параметры startRow и startColumn, и они указывают допустимый диапазон.


    В функции обратного вызова, переданной в метод setDataAsync, можно использовать свойства объекта AsyncResult, чтобы возвратить такие сведения:


    <table> <tr> <th>Свойство</th> <th>Назначение</th> </tr> <tr> <td>AsyncResult.value</td> <td>Всегда возвращает значение undefined, так как нет объекта или данных для извлечения.</td> </tr> <tr> <td>AsyncResult. status</td> <td>Определяет, удалось ли выполнить операцию.</td> </tr> <tr> <td>AsyncResult.error</td> <td>Доступ к объекту Error, который предоставляет сведения об ошибке, если операция завершилась неудачно.</td> </tr> <tr> <td>AsyncResult.asyncContext</td> <td>Определяемый пользователем элемент любого типа, который возвращается в объекте AsyncResult без изменения.</td> </tr> </table>
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'setDataAsync(data: TableData | any, options?: SetBindingDataOptions, callback?: (result: AsyncResult<void>) => void): void;'
    parameters:
    - id: data
      description: >-
        Данные, записываемые в текущий выделенный фрагмент. Возможные типы данных для узла:


        строка: Excel в Интернете и Windows, Word только в Интернете и Windows


        массив массивов: только Excel и Word


        [Office. TableData](xref:office!Office.TableData:class)<!-- -->: Только Excel и Word


        HTML: Word только в Интернете и Windows


        Office Open XML: только Word
      type: <xref uid="office!Office.TableData:class" /> | any
    - id: options
      description: Предоставляет параметры для настройки данных в привязке.
      type: <xref uid="office!Office.SetBindingDataOptions:interface" />
    - id: callback
      description: Необязательный атрибут. Функция, вызываемая при возвращении обратного вызова, единственный параметр которой имеет тип [Office. AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;void&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: setDataAsync(data, callback)
  uid: office!Office.Binding#setDataAsync:member(2)
  package: office!
  fullName: setDataAsync(data, callback)
  summary: Записывает данные в привязанный раздел документа, представленный указанным объектом привязки.
  remarks: "**Наборы требований**:\n\n- [ХтмлкоерЦион](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#htmlcoercion) (при использовании `Office.CoercionType.Html`<!-- -->)\n\n- [MatrixBindings](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#matrixbindings)\n\n- [МатрикскоерЦион](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#matrixcoercion) (при использовании `Office.CoercionType.Matrix`<!-- -->)\n\n- [УксмлкоерЦион](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#ooxmlcoercion) (при использовании `Office.CoercionType.Ooxml`<!-- -->)\n\n- [TableBindings](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#tablebindings)\n\n- [ТаблекоерЦион](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#tablecoercion) (при использовании `Office.CoercionType.Table`<!-- -->)\n\n- [TextBindings](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#textbindings)\n\n- [ТексткоерЦион](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#textcoercion) (при использовании `Office.CoercionType.Text`<!-- -->)\n\nЗначение, передаваемое для данных, содержит данные, которые будут записаны в привязке. Тип передаваемых значений определяет, что будет записано, как описано в следующей таблице.\n\n<table> <tr> <th>`data` оно</th> <th>Записываемые данные</th> </tr> <tr> <td>Строка</td> <td>Записывается обычный текст или все данные, которые можно привести к строке.</td> </tr> <tr> <td>Массив массивов (матрица)</td> <td>Tabular data without headers will be written. For example, to write data to three rows in two columns, you can pass an array like this: `[[\"R1C1\", \"R1C2\"], [\"R2C1\", \"R2C2\"], [\"R3C1\", \"R3C2\"]]`<!-- -->. Чтобы записать один столбец из трех строк, передайте массив следующим образом: `[[\"R1C1\"], [\"R2C1\"], [\"R3C1\"]]`<!-- -->.</td> </tr> <tr> <td>`TableData`Объект</td> <td>Записываются табличные данные с заголовками.</td> </tr> </table>\n\nКроме того, при записи данных в привязку применяются следующие действия, соответствующие конкретному приложению. Для Word указанные данные записываются в привязку следующим образом:\n\n<table> <tr> <th>`data` оно</th> <th>Записываемые данные</th> </tr> <tr> <td>Строка</td> <td>Записывается указанный текст.</td> </tr> <tr> <td>Массив массивов (матрица) или `TableData` объект</td> <td>Записывается таблица Word.</td> </tr> <tr> <td>HTML</td> <td>Записывается указанный HTML-код. Если указанный HTML-код содержит недопустимые фрагменты, Word не вызовет ошибку. Word запишет весь допустимый HTML-код и пропустит недопустимые данные.</td> </tr> <tr> <td>Office Open XML (Open XML)</td> <td>Записывается указанный XML-код.</td> </tr> </table>\n\nВ Excel указанное значение параметра data записывается в привязку таким образом:\n\n<table> <tr> <th>`data` оно</th> <th>Записываемые данные</th> </tr> <tr> <td>Строка</td> <td>Указанный текст вставляется в качестве значения первой привязанной ячейки. Кроме того, можно указать допустимую формулу, чтобы добавить эту формулу в связанную ячейку. Например, если задать для параметра data значение `\"=SUM(A1:A5)\"`, значения в указанном диапазоне будут суммироваться. Если задать формулу в связанной ячейке, добавленную (или существующую) формулу в этой ячейке будет невозможно считать. Когда вызывается метод Binding.getDataAsync для привязанной ячейки для чтения этих данных, метод может вернуть только данные, отображенные в ячейке (результат формулы).</td> </tr> <tr> <td>Массив массивов (матрица) и форма точно соответствует форме указанной привязки</td> <td>Записывается набор строк и столбцов. Кроме того, можно указать массив массивов, содержащий допустимые формулы, чтобы добавить их в связанные ячейки. Например, если задать для параметра data значение, в `[[\"=SUM(A1:A5)\",\"=AVERAGE(A1:A5)\"]]` привязку, которая содержит две ячейки, будут добавлены эти две формулы. Как и при задании формулы в одной связанной ячейке, невозможно считать добавленные формулы (или все существующие формулы) из привязки с помощью `Binding.getDataAsync` метода — она возвращает только те данные, которые отображаются в связанных ячейках.</td> </tr> <tr> <td>`TableData`Объект, а форма таблицы соответствует связанной таблице.</td> <td>Записывается указанный набор строк или заголовков, если никакие другие данные в окружающих ячейках не перезаписываются. **Note**: Если вы задаете формулы в объекте TableData, который вы передаете в качестве параметра *Data* , вы можете не получить ожидаемые результаты из-за функции \"вычисляемые столбцы\" в Excel, которая автоматически дублирует формулы в столбце. Чтобы обойти это, когда вы хотите записать *data* с формулами в привязанную таблицу, попробуйте указать данные как массив массивов (вместо объекта TableData) и для *coercionType* указать Microsoft.Office.Matrix или \"матрица\".</td> </tr> </table>\n\nДля Excel в Интернете:\n\n- Общее число ячеек в значении, переданном параметру Data, не может превышать 20 000 в отдельном вызове этого метода.\n\n- Количество групп форматирования, переданных параметру cellFormat, не может превышать 100. Одна группа форматирования состоит из набора вариантов форматирования, применяемого к указанному диапазону ячеек.\n\nВо всех остальных случаях возвращается ошибка.\n\nМетод setDataAsync записывает данные в подмножество таблицы или привязки матрицы, если указаны необязательные параметры startRow и startColumn, и они указывают допустимый диапазон.\n\nВ функции обратного вызова, переданной в метод setDataAsync, можно использовать свойства объекта AsyncResult, чтобы возвратить такие сведения:\n\n<table> <tr> <th>Свойство</th> <th>Назначение</th> </tr> <tr> <td>AsyncResult.value</td> <td>Всегда возвращает значение undefined, так как нет объекта или данных для извлечения.</td> </tr> <tr> <td>AsyncResult. status</td> <td>Определяет, удалось ли выполнить операцию.</td> </tr> <tr> <td>AsyncResult.error</td> <td>Доступ к объекту Error, который предоставляет сведения об ошибке, если операция завершилась неудачно.</td> </tr> <tr> <td>AsyncResult.asyncContext</td> <td>Определяемый пользователем элемент любого типа, который возвращается в объекте AsyncResult без изменения.</td> </tr> </table>\n\n#### <a name=\"examples\"></a>Примеры\n\n```javascript\nfunction setBindingData() {\n    Office.select(\"bindings#MyBinding\").setDataAsync('Hello World!', function (asyncResult) { });\n}\n\n// Specifying the optional coercionType parameter lets you specify the kind of data you want to write to a binding.\n// For example, in Word if you want to write HTML to a text binding, you can specify the coercionType parameter \n// as \"html\" as shown in the following example, which uses HTML <b> tags to make \"Hello\" bold.\nfunction writeHtmlData() {\n    Office.select(\"bindings#myBinding\").setDataAsync(\n        \"<b>Hello</b> World!\", {coercionType: \"html\"}, function (asyncResult) {\n        if (asyncResult.status == \"failed\") {\n            write('Error: ' + asyncResult.error.message);\n        }\n    });\n}\n\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n\n// In this example, the call to setDataAsync passes the data parameter as an array of arrays\n// (to create a single column of three rows), and specifies the data structure with the \n// coercionType parameter as a \"matrix\".\nfunction writeBoundDataMatrix() {\n    Office.select(\"bindings#myBinding\").setDataAsync(\n        [['Berlin'],['Munich'],['Duisburg']],{ coercionType: \"matrix\" }, function (asyncResult) {\n        if (asyncResult.status == \"failed\") {\n            write('Error: ' + asyncResult.error.message);\n        } else {\n            write('Bound data: ' + asyncResult.value);\n        }\n    });\n}\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n\n// In the writeBoundDataTable function in this example, the call to setDataAsync passes the data parameter \n// as a TableData object (to write three columns and three rows), and specifies the data structure\n// with the coercionType parameter as a \"table\".\n\n// In the updateTableData function, the call to setDataAsync again passes the data parameter as a TableData object,\n// but as a single column with a new header and three rows, to update the values in the last column \n// of the table created with the writeBoundDataTable function. The optional zero-based startColumn parameter \n// is specified as 2 to replace the values in the third column of the table.\nfunction writeBoundDataTable() {\n    // Create a TableData object.\n    var myTable = new Office.TableData();\n    myTable.headers = ['First Name', 'Last Name', 'Grade'];\n    myTable.rows = [['Kim', 'Abercrombie', 'A'], ['Junmin','Hao', 'C'],['Toni','Poe','B']];\n\n    // Set myTable in the binding.\n    Office.select(\"bindings#myBinding\").setDataAsync(myTable, { coercionType: \"table\" }, \n        function (asyncResult) {\n            if (asyncResult.status == Office.AsyncResultStatus.Failed) {\n                write('Error: '+ asyncResult.error.message);\n        } else {\n            write('Bound data: ' + asyncResult.value);\n        }\n    });\n}\n\n// Replace last column with different data.\nfunction updateTableData() {\n    var newTable = new Office.TableData();\n    newTable.headers = [\"Gender\"];\n    newTable.rows = [[\"M\"],[\"M\"],[\"F\"]];\n    Office.select(\"bindings#myBinding\").setDataAsync(newTable, { coercionType: \"table\", startColumn:2 }, \n        function (asyncResult) {\n            if (asyncResult.status == Office.AsyncResultStatus.Failed) {\n                write('Error: '+ asyncResult.error.message);\n        } else {\n            write('Bound data: ' + asyncResult.value);\n        }     \n    });   \n}\n\n// In this example, the following call passes two formatting groups to cellFormat.\nOffice.select(\"bindings#myBinding\").setDataAsync([['Berlin'],['Munich'],['Duisburg']],\n  {cellFormat:[{cells: {row: 1}, format: {fontColor: \"yellow\"}}, \n      {cells: {row: 3, column: 4}, format: {borderColor: \"white\", fontStyle: \"bold\"}}]}, \n  function (asyncResult){});\n```"
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'setDataAsync(data: TableData | any, callback?: (result: AsyncResult<void>) => void): void;'
    parameters:
    - id: data
      description: >-
        Данные, записываемые в текущий выделенный фрагмент. Возможные типы данных для узла:


        строка: Excel в Интернете и Windows, Word только в Интернете и Windows


        массив массивов: только Excel и Word


        `TableData`<!-- -->: Только Excel и Word


        HTML: Word только в Интернете и Windows


        Office Open XML: только Word
      type: <xref uid="office!Office.TableData:class" /> | any
    - id: callback
      description: Необязательный атрибут. Функция, вызываемая при возвращении обратного вызова, единственный параметр которой имеет тип [Office. AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;void&gt;) =&gt; void'
    return:
      type: void
      description: ''
metadata:
  ms.openlocfilehash: 911e6146ab18fe4fbc4129b3e53d72949dbccd6f
  ms.sourcegitcommit: 3bab97ab3b91da7cca497f6fc895408a76bd8b46
  ms.translationtype: MT
  ms.contentlocale: ru-RU
  ms.lasthandoff: 11/18/2020
  ms.locfileid: "49151368"
