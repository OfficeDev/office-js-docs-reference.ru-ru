### YamlMime:TSType
name: Office.CustomXmlPart
uid: office!Office.CustomXmlPart:interface
package: office!
fullName: Office.CustomXmlPart
summary: Представляет один CustomXMLPart в [коллекции Office.CustomXmlParts.](xref:office!Office.CustomXmlParts:interface)
remarks: '**Хосты**: Word'
isPreview: false
isDeprecated: false
type: interface
properties:
- name: builtIn
  uid: office!Office.CustomXmlPart#builtIn:member
  package: office!
  fullName: builtIn
  summary: Правда, если встроена настраиваемая часть XML; в противном случае false.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'builtIn: boolean;'
    return:
      type: boolean
      description: "\n\n#### <a name=\"examples\"></a>Примеры\n\n```javascript\nfunction showXMLPartBuiltIn() {\n    Office.context.document.customXmlParts.getByIdAsync(\n        \"{3BC85265-09D6-4205-B665-8EB239A8B9A1}\", function (result) {\n        var xmlPart = result.value;\n        write(xmlPart.builtIn);\n    });\n}\n\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n```"
- name: id
  uid: office!Office.CustomXmlPart#id:member
  package: office!
  fullName: id
  summary: Получает GUID объекта CustomXMLPart.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'id: string;'
    return:
      type: string
      description: "\n\n#### <a name=\"examples\"></a>Примеры\n\n```javascript\nfunction showXMLPartBuiltId() {\n    Office.context.document.customXmlParts.getByIdAsync(\n        \"{3BC85265-09D6-4205-B665-8EB239A8B9A1}\", function (result) {\n        var xmlPart = result.value;\n        write(xmlPart.id);\n    });\n}\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n```"
- name: namespaceManager
  uid: office!Office.CustomXmlPart#namespaceManager:member
  package: office!
  fullName: namespaceManager
  summary: Получает набор сопоставлений префиксов пространства имен[(Office.CustomXmlPrefixMappings](xref:office!Office.CustomXmlPrefixMappings:interface)<!-- -->) используется в отношении текущего CustomXmlPart.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'namespaceManager: CustomXmlPrefixMappings;'
    return:
      type: <xref uid="office!Office.CustomXmlPrefixMappings:interface" />
      description: "\n\n#### <a name=\"examples\"></a>Примеры\n\n```javascript\nfunction setXMLPartNamespaceManagerNamespace() {\n    Office.context.document.customXmlParts.getByIdAsync(\n        \"{3BC85265-09D6-4205-B665-8EB239A8B9A1}\", function (result) {\n        var xmlPart = result.value;\n        xmlPart.namespaceManager.addNamespaceAsync(\"myPrefix\", \"myNamespace\");\n    });\n}\n```"
methods:
- name: addHandlerAsync(eventType, handler, options, callback)
  uid: office!Office.CustomXmlPart#addHandlerAsync:member(1)
  package: office!
  fullName: addHandlerAsync(eventType, handler, options, callback)
  summary: Добавляет обработник событий в объект с помощью указанного типа события.
  remarks: >-
    **Набор требований:** [CustomXmlParts](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#customxmlparts)


    Вы можете добавить несколько обработчиков событий для указанного eventType до тех пор, пока имя каждой функции обработщика событий является уникальным.
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'addHandlerAsync(eventType: Office.EventType, handler: (result: any) => void, options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<void>) => void): void;'
    parameters:
    - id: eventType
      description: Указывает тип добавляемого события. Для объекта CustomXmlPart параметр eventType может быть указан как `Office.EventType.NodeDeleted`<!-- -->, `Office.EventType.NodeInserted`<!-- -->, и `Office.EventType.NodeReplaced`<!-- -->.
      type: <xref uid="office!Office.EventType:enum" />
    - id: handler
      description: Добавлена функция обработера событий, единственным параметром которой является [тип Office.NodeDeletedEventArgs.](xref:office!Office.NodeDeletedEventArgs:interface)<!-- -->, [Office.NodeInsertedEventArgs](xref:office!Office.NodeInsertedEventArgs:interface)<!-- -->, или [Office.NodeReplacedEventArgs](xref:office!Office.NodeReplacedEventArgs:interface)
      type: '(result: any) =&gt; void'
    - id: options
      description: Предоставляет возможность сохранения контекстных данных любого типа без изменений для использования в вызове.
      type: <xref uid="office!Office.AsyncContextOptions:interface" />
    - id: callback
      description: Необязательное свойство. Функция, вызываемая при возвращении обратного вызова, единственным параметром которой является [тип Office.AsyncResult.](xref:office!Office.AsyncResult:interface)<!-- -->.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;void&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: addHandlerAsync(eventType, handler, callback)
  uid: office!Office.CustomXmlPart#addHandlerAsync:member(2)
  package: office!
  fullName: addHandlerAsync(eventType, handler, callback)
  summary: Добавляет обработник событий в объект с помощью указанного типа события.
  remarks: >-
    **Набор требований:** [CustomXmlParts](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#customxmlparts)


    Вы можете добавить несколько обработчиков событий для указанного eventType до тех пор, пока имя каждой функции обработщика событий является уникальным.


    #### <a name="examples"></a>Примеры


    ```javascript

    // To add an event handler for the NodeDeleted event, use the addHandlerAsync method of the CustomXmlPart object.

    function addNodeDeletedEvent() {
        Office.context.document.customXmlParts.getByIdAsync(
            "{3BC85265-09D6-4205-B665-8EB239A8B9A1}", function (result) {
            var xmlPart = result.value;
            xmlPart.addHandlerAsync(Office.EventType.NodeDeleted, function (eventArgs) {
                write("A node has been deleted.");
            });
        });
    }

    // Function that writes to a div with id='message' on the page.

    function write(message){
        document.getElementById('message').innerText += message;
    }

    ```

    ```javascript

    // To add an event handler for the NodeInserted event, use the addHandlerAsync method of the CustomXmlPart object.

    function addNodeInsertedEvent() {
        Office.context.document.customXmlParts.getByIdAsync(
            "{3BC85265-09D6-4205-B665-8EB239A8B9A1}", function (result) {
            var xmlPart = result.value;
            xmlPart.addHandlerAsync(Office.EventType.NodeInserted, function (eventArgs) {
                write("A node has been inserted.");
            });
        });
    }

    // Function that writes to a div with id='message' on the page.

    function write(message){
        document.getElementById('message').innerText += message;
    }

    ```

    ```javascript

    // To add an event handler for the NodeReplaced event, use the addHandlerAsync method of the CustomXmlPart object.

    function addNodeReplacedEvent() {
        Office.context.document.customXmlParts.getByIdAsync(
            "{3BC85265-09D6-4205-B665-8EB239A8B9A1}", function (result) {
            var xmlPart = result.value;
            xmlPart.addHandlerAsync(Office.EventType.NodeReplaced, function (eventArgs) {
                write("A node has been replaced.");
            });
        });
    }

    // Function that writes to a div with id='message' on the page.

    function write(message){
        document.getElementById('message').innerText += message;
    }

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'addHandlerAsync(eventType: Office.EventType, handler: (result: any) => void, callback?: (result: AsyncResult<void>) => void): void;'
    parameters:
    - id: eventType
      description: Указывает тип добавляемого события. Для объекта CustomXmlPart параметр eventType может быть указан как `Office.EventType.NodeDeleted`<!-- -->, `Office.EventType.NodeInserted`<!-- -->, и `Office.EventType.NodeReplaced`<!-- -->.
      type: <xref uid="office!Office.EventType:enum" />
    - id: handler
      description: Добавлена функция обработера событий, единственным параметром которой является [тип Office.NodeDeletedEventArgs.](xref:office!Office.NodeDeletedEventArgs:interface)<!-- -->, [Office.NodeInsertedEventArgs](xref:office!Office.NodeInsertedEventArgs:interface)<!-- -->, или [Office.NodeReplacedEventArgs](xref:office!Office.NodeReplacedEventArgs:interface)
      type: '(result: any) =&gt; void'
    - id: callback
      description: Необязательное свойство. Функция, вызываемая при возвращении обратного вызова, единственным параметром которой является [тип Office.AsyncResult.](xref:office!Office.AsyncResult:interface)<!-- -->.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;void&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: deleteAsync(options, callback)
  uid: office!Office.CustomXmlPart#deleteAsync:member(1)
  package: office!
  fullName: deleteAsync(options, callback)
  summary: Удаляет настраиваемую XML-часть.
  remarks: '**Набор требований:** [CustomXmlParts](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#customxmlparts)'
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'deleteAsync(options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<void>) => void): void;'
    parameters:
    - id: options
      description: Предоставляет возможность сохранения контекстных данных любого типа без изменений для использования в вызове.
      type: <xref uid="office!Office.AsyncContextOptions:interface" />
    - id: callback
      description: Необязательное свойство. Функция, вызываемая при возвращении обратного вызова, единственным параметром которой является [тип Office.AsyncResult.](xref:office!Office.AsyncResult:interface)<!-- -->.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;void&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: deleteAsync(callback)
  uid: office!Office.CustomXmlPart#deleteAsync:member(2)
  package: office!
  fullName: deleteAsync(callback)
  summary: Удаляет настраиваемую XML-часть.
  remarks: "**Набор требований:** [CustomXmlParts](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#customxmlparts)\n\n#### <a name=\"examples\"></a>Примеры\n\n```javascript\nfunction deleteXMLPart() {\n    Office.context.document.customXmlParts.getByIdAsync(\n        \"{3BC85265-09D6-4205-B665-8EB239A8B9A1}\", function (result) {\n        var xmlPart = result.value;\n        xmlPart.deleteAsync(function (eventArgs) {\n            write(\"The XML Part has been deleted.\");\n        });\n    });\n}\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n```"
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'deleteAsync(callback?: (result: AsyncResult<void>) => void): void;'
    parameters:
    - id: callback
      description: Необязательное свойство. Функция, вызываемая при возвращении обратного вызова, единственным параметром которой является [тип Office.AsyncResult.](xref:office!Office.AsyncResult:interface)<!-- -->.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;void&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: getNodesAsync(xPath, options, callback)
  uid: office!Office.CustomXmlPart#getNodesAsync:member(1)
  package: office!
  fullName: getNodesAsync(xPath, options, callback)
  summary: Асинхронно получает все объекты CustomXmlNode в настраиваемой XML-части, соответствующие указанному параметру XPath.
  remarks: '**Набор требований:** [CustomXmlParts](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#customxmlparts)'
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getNodesAsync(xPath: string, options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<CustomXmlNode[]>) => void): void;'
    parameters:
    - id: xPath
      description: Выражение XPath, определяющее возвращаемые узлы. Обязательный.
      type: string
    - id: options
      description: Предоставляет возможность сохранения контекстных данных любого типа без изменений для использования в вызове.
      type: <xref uid="office!Office.AsyncContextOptions:interface" />
    - id: callback
      description: Необязательное свойство. Функция, вызываемая при возвращении обратного вызова, единственным параметром которой является [тип Office.AsyncResult.](xref:office!Office.AsyncResult:interface)<!-- -->. Свойством результата является массив объектов CustomXmlNode, которые представляют узлы, указанные выражением XPath, переданным `value` параметру xPath.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;<xref uid="office!Office.CustomXmlNode:interface" />[]&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: getNodesAsync(xPath, callback)
  uid: office!Office.CustomXmlPart#getNodesAsync:member(2)
  package: office!
  fullName: getNodesAsync(xPath, callback)
  summary: Асинхронно получает все объекты CustomXmlNode в настраиваемой XML-части, соответствующие указанному параметру XPath.
  remarks: "**Набор требований:** [CustomXmlParts](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#customxmlparts)\n\n#### <a name=\"examples\"></a>Примеры\n\n```javascript\nfunction showXmlNodeType() {\n    Office.context.document.customXmlParts.getByIdAsync(\n        \"{3BC85265-09D6-4205-B665-8EB239A8B9A1}\", function (result) {\n        var xmlPart = result.value;\n        xmlPart.getNodesAsync('*/*', function (nodeResults) {\n            for (i = 0; i < nodeResults.value.length; i++) {\n                var node = nodeResults.value[i];\n                write(node.nodeType);\n            }\n        });\n    });\n}\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n```"
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getNodesAsync(xPath: string, callback?: (result: AsyncResult<CustomXmlNode[]>) => void): void;'
    parameters:
    - id: xPath
      description: Выражение XPath, определяющее возвращаемые узлы. Обязательный.
      type: string
    - id: callback
      description: Необязательное свойство. Функция, вызываемая при возвращении обратного вызова, единственным параметром которой является [тип Office.AsyncResult.](xref:office!Office.AsyncResult:interface)<!-- -->. Свойством результата является массив объектов CustomXmlNode, которые представляют узлы, указанные выражением XPath, переданным `value` параметру xPath.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;<xref uid="office!Office.CustomXmlNode:interface" />[]&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: getXmlAsync(options, callback)
  uid: office!Office.CustomXmlPart#getXmlAsync:member(1)
  package: office!
  fullName: getXmlAsync(options, callback)
  summary: Асинхронно получает XML внутри настраиваемой XML-части.
  remarks: '**Набор требований:** [CustomXmlParts](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#customxmlparts)'
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getXmlAsync(options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<string>) => void): void;'
    parameters:
    - id: options
      description: Предоставляет возможность сохранения контекстных данных любого типа без изменений для использования в вызове.
      type: <xref uid="office!Office.AsyncContextOptions:interface" />
    - id: callback
      description: Необязательное свойство. Функция, вызываемая при возвращении обратного вызова, единственным параметром которой является [тип Office.AsyncResult.](xref:office!Office.AsyncResult:interface)<!-- -->. Свойством результата является строка, которая содержит XML ссылаемого `value` объекта CustomXmlPart.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;string&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: getXmlAsync(callback)
  uid: office!Office.CustomXmlPart#getXmlAsync:member(2)
  package: office!
  fullName: getXmlAsync(callback)
  summary: Асинхронно получает XML внутри настраиваемой XML-части.
  remarks: "**Набор требований:** [CustomXmlParts](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#customxmlparts)\n\n#### <a name=\"examples\"></a>Примеры\n\n```javascript\nfunction showXMLPartInnerXML() {\n    Office.context.document.customXmlParts.getByIdAsync(\n        \"{3BC85265-09D6-4205-B665-8EB239A8B9A1}\", function (result) {\n        var xmlPart = result.value;\n        xmlPart.getXmlAsync(function (eventArgs) {\n            write(eventArgs.value);\n        });\n    });\n}\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n```"
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getXmlAsync(callback?: (result: AsyncResult<string>) => void): void;'
    parameters:
    - id: callback
      description: Необязательное свойство. Функция, вызываемая при возвращении обратного вызова, единственным параметром которой является [тип Office.AsyncResult.](xref:office!Office.AsyncResult:interface)<!-- -->. Свойством результата является строка, которая содержит XML ссылаемого `value` объекта CustomXmlPart.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;string&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: removeHandlerAsync(eventType, handler, options, callback)
  uid: office!Office.CustomXmlPart#removeHandlerAsync:member(1)
  package: office!
  fullName: removeHandlerAsync(eventType, handler, options, callback)
  summary: Удаляет обработник событий для указанного типа событий.
  remarks: '**Набор требований:** [CustomXmlParts](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#customxmlparts)'
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'removeHandlerAsync(eventType: Office.EventType, handler?: (result: any) => void, options?: RemoveHandlerOptions, callback?: (result: AsyncResult<void>) => void): void;'
    parameters:
    - id: eventType
      description: Указывает тип удаляемого события. Для объекта CustomXmlPart параметр eventType может быть указан как `Office.EventType.NodeDeleted`<!-- -->, `Office.EventType.NodeInserted`<!-- -->, и `Office.EventType.NodeReplaced`<!-- -->.
      type: <xref uid="office!Office.EventType:enum" />
    - id: handler
      description: Имя обработера, которое необходимо удалить.
      type: '(result: any) =&gt; void'
    - id: options
      description: Предоставляет параметры, чтобы определить, какой обработчик событий или обработчики удалены.
      type: <xref uid="office!Office.RemoveHandlerOptions:interface" />
    - id: callback
      description: Необязательное свойство. Функция, вызываемая при возвращении обратного вызова, единственным параметром которой является [тип Office.AsyncResult.](xref:office!Office.AsyncResult:interface)<!-- -->.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;void&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: removeHandlerAsync(eventType, handler, callback)
  uid: office!Office.CustomXmlPart#removeHandlerAsync:member(2)
  package: office!
  fullName: removeHandlerAsync(eventType, handler, callback)
  summary: Удаляет обработник событий для указанного типа событий.
  remarks: >-
    **Набор требований:** [CustomXmlParts](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#customxmlparts)


    #### <a name="examples"></a>Примеры


    ```javascript

    function removeNodeInsertedEventHandler() {
        Office.context.document.customXmlParts.getByIdAsync(
            "{3BC85265-09D6-4205-B665-8EB239A8B9A1}",
            function (result) {
                var xmlPart = result.value;
                xmlPart.removeHandlerAsync(Office.EventType.DataNodeInserted, {handler:myHandler});
        });
    }

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'removeHandlerAsync(eventType: Office.EventType, handler?: (result: any) => void, callback?: (result: AsyncResult<void>) => void): void;'
    parameters:
    - id: eventType
      description: Указывает тип удаляемого события. Для объекта CustomXmlPart параметр eventType может быть указан как `Office.EventType.NodeDeleted`<!-- -->, `Office.EventType.NodeInserted`<!-- -->, и `Office.EventType.NodeReplaced`<!-- -->.
      type: <xref uid="office!Office.EventType:enum" />
    - id: handler
      description: Имя обработера, которое необходимо удалить.
      type: '(result: any) =&gt; void'
    - id: callback
      description: Необязательное свойство. Функция, вызываемая при возвращении обратного вызова, единственным параметром которой является [тип Office.AsyncResult.](xref:office!Office.AsyncResult:interface)<!-- -->.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;void&gt;) =&gt; void'
    return:
      type: void
      description: ''
metadata:
  ms.openlocfilehash: 024573fe1f9f8f6c8f1d10c51c698d67f94cfe47
  ms.sourcegitcommit: a8a86cfcaff5ad7dacc653d63502c76b1fedbebe
  ms.translationtype: MT
  ms.contentlocale: ru-RU
  ms.lasthandoff: 03/26/2021
  ms.locfileid: "51358825"
