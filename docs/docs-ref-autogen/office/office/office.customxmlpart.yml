### YamlMime:UniversalReference
items:
  - uid: office.Office.CustomXmlPart
    summary: '<span data-ttu-id="a8bb4-101">Представляет один объект CustomXMLPart в семействе [Office. CustomXmlParts](xref:office.Office.CustomXmlParts) .</span><span class="sxs-lookup"><span data-stu-id="a8bb4-101">Represents a single CustomXMLPart in an [Office.CustomXmlParts](xref:office.Office.CustomXmlParts) collection.</span></span>'
    remarks: '<span data-ttu-id="a8bb4-102">**Hosts**: Word</span><span class="sxs-lookup"><span data-stu-id="a8bb4-102">**Hosts**: Word</span></span>'
    name: Office.CustomXmlPart
    fullName: Office.CustomXmlPart
    langs:
      - typeScript
    type: interface
    package: office
    children:
      - office.Office.CustomXmlPart.addHandlerAsync
      - office.Office.CustomXmlPart.addHandlerAsync_1
      - office.Office.CustomXmlPart.deleteAsync
      - office.Office.CustomXmlPart.deleteAsync_1
      - office.Office.CustomXmlPart.getNodesAsync
      - office.Office.CustomXmlPart.getNodesAsync_1
      - office.Office.CustomXmlPart.getXmlAsync
      - office.Office.CustomXmlPart.getXmlAsync_1
      - office.Office.CustomXmlPart.removeHandlerAsync
      - office.Office.CustomXmlPart.removeHandlerAsync_1
      - office.Office.CustomXmlPart.builtIn
      - office.Office.CustomXmlPart.id
      - office.Office.CustomXmlPart.namespaceManager
  - uid: office.Office.CustomXmlPart.addHandlerAsync
    summary: '<span data-ttu-id="a8bb4-103">Добавляет обработчик событий в объект, используя указанный тип события.</span><span class="sxs-lookup"><span data-stu-id="a8bb4-103">Adds an event handler to the object using the specified event type.</span></span>'
    remarks: |-
      <span data-ttu-id="a8bb4-104">**Набор требований**: [CustomXmlParts](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#customxmlparts)</span><span class="sxs-lookup"><span data-stu-id="a8bb4-104">**Requirement set**: [CustomXmlParts](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#customxmlparts)</span></span>

      <span data-ttu-id="a8bb4-105">Можно добавить несколько обработчиков событий для указанного объекта eventType, если имя каждой функции обработчика событий уникально.</span><span class="sxs-lookup"><span data-stu-id="a8bb4-105">You can add multiple event handlers for the specified eventType as long as the name of each event handler function is unique.</span></span>
    name: 'addHandlerAsync(eventType, handler, options, callback)'
    fullName: 'addHandlerAsync(eventType, handler, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addHandlerAsync(eventType: Office.EventType, handler: (result: any) => void, options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: eventType
          description: '<span data-ttu-id="a8bb4-106">Указывает тип добавляемого события.</span><span class="sxs-lookup"><span data-stu-id="a8bb4-106">Specifies the type of event to add.</span></span> <span data-ttu-id="a8bb4-107">Для объекта CustomXmlPart параметр eventType может быть указан как`Office.EventType.NodeDeleted`</span><span class="sxs-lookup"><span data-stu-id="a8bb4-107">For a CustomXmlPart object, the eventType parameter can be specified as `Office.EventType.NodeDeleted`</span></span><!-- --><span data-ttu-id="a8bb4-108">, `Office.EventType.NodeInserted`</span><span class="sxs-lookup"><span data-stu-id="a8bb4-108"></span></span><!-- --><span data-ttu-id="a8bb4-109">, а`Office.EventType.NodeReplaced`</span><span class="sxs-lookup"><span data-stu-id="a8bb4-109">, and `Office.EventType.NodeReplaced`</span></span><!-- --><span data-ttu-id="a8bb4-110">.</span><span class="sxs-lookup"><span data-stu-id="a8bb4-110"></span></span>'
          type:
            - office.Office.EventType
        - id: handler
          description: '<span data-ttu-id="a8bb4-111">Добавляемая функция обработчика событий, единственный параметр которой имеет тип [Office. свойство nodedeletedeventargs](xref:office.Office.NodeDeletedEventArgs)</span><span class="sxs-lookup"><span data-stu-id="a8bb4-111">The event handler function to add, whose only parameter is of type [Office.NodeDeletedEventArgs](xref:office.Office.NodeDeletedEventArgs)</span></span><!-- --><span data-ttu-id="a8bb4-112">, [Office. NodeInsertedEventArgs](xref:office.Office.NodeInsertedEventArgs)</span><span class="sxs-lookup"><span data-stu-id="a8bb4-112">, [Office.NodeInsertedEventArgs](xref:office.Office.NodeInsertedEventArgs)</span></span><!-- --><span data-ttu-id="a8bb4-113">или [Office. свойство nodereplacedeventargs](xref:office.Office.NodeReplacedEventArgs)</span><span class="sxs-lookup"><span data-stu-id="a8bb4-113">, or [Office.NodeReplacedEventArgs](xref:office.Office.NodeReplacedEventArgs)</span></span>'
          type:
            - '(result: any) => void'
        - id: options
          description: '<span data-ttu-id="a8bb4-114">Предоставляет параметр для сохранения данных контекста любого типа без изменений для использования при обратном вызове.</span><span class="sxs-lookup"><span data-stu-id="a8bb4-114">Provides an option for preserving context data of any type, unchanged, for use in a callback.</span></span>'
          type:
            - office.Office.AsyncContextOptions
        - id: callback
          description: '<span data-ttu-id="a8bb4-115">Необязательно.</span><span class="sxs-lookup"><span data-stu-id="a8bb4-115">Optional.</span></span> <span data-ttu-id="a8bb4-116">Функция, вызываемая при возвращении обратного вызова, единственный параметр которой имеет тип [Office. AsyncResult](xref:office.Office.AsyncResult)</span><span class="sxs-lookup"><span data-stu-id="a8bb4-116">A function that is invoked when the callback returns, whose only parameter is of type [Office.AsyncResult](xref:office.Office.AsyncResult)</span></span><!-- --><span data-ttu-id="a8bb4-117">.</span><span class="sxs-lookup"><span data-stu-id="a8bb4-117"></span></span>'
          type:
            - '(result: AsyncResult<void>) => void'
  - uid: office.Office.CustomXmlPart.addHandlerAsync_1
    summary: '<span data-ttu-id="a8bb4-118">Добавляет обработчик событий в объект, используя указанный тип события.</span><span class="sxs-lookup"><span data-stu-id="a8bb4-118">Adds an event handler to the object using the specified event type.</span></span>'
    remarks: |-
      <span data-ttu-id="a8bb4-119">**Набор требований**: [CustomXmlParts](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#customxmlparts)</span><span class="sxs-lookup"><span data-stu-id="a8bb4-119">**Requirement set**: [CustomXmlParts](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#customxmlparts)</span></span>

      <span data-ttu-id="a8bb4-120">Можно добавить несколько обработчиков событий для указанного объекта eventType, если имя каждой функции обработчика событий уникально.</span><span class="sxs-lookup"><span data-stu-id="a8bb4-120">You can add multiple event handlers for the specified eventType as long as the name of each event handler function is unique.</span></span>

      #### <a name="examples"></a><span data-ttu-id="a8bb4-121">Примеры</span><span class="sxs-lookup"><span data-stu-id="a8bb4-121">Examples</span></span>

      ```javascript
      // To add an event handler for the NodeDeleted event, use the addHandlerAsync method of the CustomXmlPart object.
      function addNodeDeletedEvent() {
          Office.context.document.customXmlParts.getByIdAsync(
              "{3BC85265-09D6-4205-B665-8EB239A8B9A1}", function (result) {
              var xmlPart = result.value;
              xmlPart.addHandlerAsync(Office.EventType.NodeDeleted, function (eventArgs) {
                  write("A node has been deleted.");
              });
          });
      }
      // Function that writes to a div with id='message' on the page.
      function write(message){
          document.getElementById('message').innerText += message;
      }
      ```
      ```javascript
      // To add an event handler for the NodeInserted event, use the addHandlerAsync method of the CustomXmlPart object.
      function addNodeInsertedEvent() {
          Office.context.document.customXmlParts.getByIdAsync(
              "{3BC85265-09D6-4205-B665-8EB239A8B9A1}", function (result) {
              var xmlPart = result.value;
              xmlPart.addHandlerAsync(Office.EventType.NodeInserted, function (eventArgs) {
                  write("A node has been inserted.");
              });
          });
      }
      // Function that writes to a div with id='message' on the page.
      function write(message){
          document.getElementById('message').innerText += message;
      }
      ```
      ```javascript
      // To add an event handler for the NodeReplaced event, use the addHandlerAsync method of the CustomXmlPart object.
      function addNodeReplacedEvent() {
          Office.context.document.customXmlParts.getByIdAsync(
              "{3BC85265-09D6-4205-B665-8EB239A8B9A1}", function (result) {
              var xmlPart = result.value;
              xmlPart.addHandlerAsync(Office.EventType.NodeReplaced, function (eventArgs) {
                  write("A node has been replaced.");
              });
          });
      }
      // Function that writes to a div with id='message' on the page.
      function write(message){
          document.getElementById('message').innerText += message;
      }
      ```
    name: 'addHandlerAsync(eventType, handler, callback)'
    fullName: 'addHandlerAsync(eventType, handler, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addHandlerAsync(eventType: Office.EventType, handler: (result: any) => void, callback?: (result: AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: eventType
          description: '<span data-ttu-id="a8bb4-122">Указывает тип добавляемого события.</span><span class="sxs-lookup"><span data-stu-id="a8bb4-122">Specifies the type of event to add.</span></span> <span data-ttu-id="a8bb4-123">Для объекта CustomXmlPart параметр eventType может быть указан как`Office.EventType.NodeDeleted`</span><span class="sxs-lookup"><span data-stu-id="a8bb4-123">For a CustomXmlPart object, the eventType parameter can be specified as `Office.EventType.NodeDeleted`</span></span><!-- --><span data-ttu-id="a8bb4-124">, `Office.EventType.NodeInserted`</span><span class="sxs-lookup"><span data-stu-id="a8bb4-124"></span></span><!-- --><span data-ttu-id="a8bb4-125">, а`Office.EventType.NodeReplaced`</span><span class="sxs-lookup"><span data-stu-id="a8bb4-125">, and `Office.EventType.NodeReplaced`</span></span><!-- --><span data-ttu-id="a8bb4-126">.</span><span class="sxs-lookup"><span data-stu-id="a8bb4-126"></span></span>'
          type:
            - office.Office.EventType
        - id: handler
          description: '<span data-ttu-id="a8bb4-127">Добавляемая функция обработчика событий, единственный параметр которой имеет тип [Office. свойство nodedeletedeventargs](xref:office.Office.NodeDeletedEventArgs)</span><span class="sxs-lookup"><span data-stu-id="a8bb4-127">The event handler function to add, whose only parameter is of type [Office.NodeDeletedEventArgs](xref:office.Office.NodeDeletedEventArgs)</span></span><!-- --><span data-ttu-id="a8bb4-128">, [Office. NodeInsertedEventArgs](xref:office.Office.NodeInsertedEventArgs)</span><span class="sxs-lookup"><span data-stu-id="a8bb4-128">, [Office.NodeInsertedEventArgs](xref:office.Office.NodeInsertedEventArgs)</span></span><!-- --><span data-ttu-id="a8bb4-129">или [Office. свойство nodereplacedeventargs](xref:office.Office.NodeReplacedEventArgs)</span><span class="sxs-lookup"><span data-stu-id="a8bb4-129">, or [Office.NodeReplacedEventArgs](xref:office.Office.NodeReplacedEventArgs)</span></span>'
          type:
            - '(result: any) => void'
        - id: callback
          description: '<span data-ttu-id="a8bb4-130">Необязательно.</span><span class="sxs-lookup"><span data-stu-id="a8bb4-130">Optional.</span></span> <span data-ttu-id="a8bb4-131">Функция, вызываемая при возвращении обратного вызова, единственный параметр которой имеет тип [Office. AsyncResult](xref:office.Office.AsyncResult)</span><span class="sxs-lookup"><span data-stu-id="a8bb4-131">A function that is invoked when the callback returns, whose only parameter is of type [Office.AsyncResult](xref:office.Office.AsyncResult)</span></span><!-- --><span data-ttu-id="a8bb4-132">.</span><span class="sxs-lookup"><span data-stu-id="a8bb4-132"></span></span>'
          type:
            - '(result: AsyncResult<void>) => void'
  - uid: office.Office.CustomXmlPart.deleteAsync
    summary: <span data-ttu-id="a8bb4-133">Удаляет пользовательскую XML-часть.</span><span class="sxs-lookup"><span data-stu-id="a8bb4-133">Deletes the Custom XML Part.</span></span>
    remarks: '<span data-ttu-id="a8bb4-134">**Набор требований**: [CustomXmlParts](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#customxmlparts)</span><span class="sxs-lookup"><span data-stu-id="a8bb4-134">**Requirement set**: [CustomXmlParts](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#customxmlparts)</span></span>'
    name: 'deleteAsync(options, callback)'
    fullName: 'deleteAsync(options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'deleteAsync(options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: options
          description: '<span data-ttu-id="a8bb4-135">Предоставляет параметр для сохранения данных контекста любого типа без изменений для использования при обратном вызове.</span><span class="sxs-lookup"><span data-stu-id="a8bb4-135">Provides an option for preserving context data of any type, unchanged, for use in a callback.</span></span>'
          type:
            - office.Office.AsyncContextOptions
        - id: callback
          description: '<span data-ttu-id="a8bb4-136">Необязательно.</span><span class="sxs-lookup"><span data-stu-id="a8bb4-136">Optional.</span></span> <span data-ttu-id="a8bb4-137">Функция, вызываемая при возвращении обратного вызова, единственный параметр которой имеет тип [Office. AsyncResult](xref:office.Office.AsyncResult)</span><span class="sxs-lookup"><span data-stu-id="a8bb4-137">A function that is invoked when the callback returns, whose only parameter is of type [Office.AsyncResult](xref:office.Office.AsyncResult)</span></span><!-- --><span data-ttu-id="a8bb4-138">.</span><span class="sxs-lookup"><span data-stu-id="a8bb4-138"></span></span>'
          type:
            - '(result: AsyncResult<void>) => void'
  - uid: office.Office.CustomXmlPart.deleteAsync_1
    summary: <span data-ttu-id="a8bb4-139">Удаляет пользовательскую XML-часть.</span><span class="sxs-lookup"><span data-stu-id="a8bb4-139">Deletes the Custom XML Part.</span></span>
    remarks: |-
      <span data-ttu-id="a8bb4-140">**Набор требований**: [CustomXmlParts](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#customxmlparts)</span><span class="sxs-lookup"><span data-stu-id="a8bb4-140">**Requirement set**: [CustomXmlParts](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#customxmlparts)</span></span>

      #### <a name="examples"></a><span data-ttu-id="a8bb4-141">Примеры</span><span class="sxs-lookup"><span data-stu-id="a8bb4-141">Examples</span></span>

      ```javascript
      function deleteXMLPart() {
          Office.context.document.customXmlParts.getByIdAsync(
              "{3BC85265-09D6-4205-B665-8EB239A8B9A1}", function (result) {
              var xmlPart = result.value;
              xmlPart.deleteAsync(function (eventArgs) {
                  write("The XML Part has been deleted.");
              });
          });
      }
      // Function that writes to a div with id='message' on the page.
      function write(message){
          document.getElementById('message').innerText += message; 
      }
      ```
    name: deleteAsync(callback)
    fullName: deleteAsync(callback)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'deleteAsync(callback?: (result: AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: callback
          description: '<span data-ttu-id="a8bb4-142">Необязательно.</span><span class="sxs-lookup"><span data-stu-id="a8bb4-142">Optional.</span></span> <span data-ttu-id="a8bb4-143">Функция, вызываемая при возвращении обратного вызова, единственный параметр которой имеет тип [Office. AsyncResult](xref:office.Office.AsyncResult)</span><span class="sxs-lookup"><span data-stu-id="a8bb4-143">A function that is invoked when the callback returns, whose only parameter is of type [Office.AsyncResult](xref:office.Office.AsyncResult)</span></span><!-- --><span data-ttu-id="a8bb4-144">.</span><span class="sxs-lookup"><span data-stu-id="a8bb4-144"></span></span>'
          type:
            - '(result: AsyncResult<void>) => void'
  - uid: office.Office.CustomXmlPart.getNodesAsync
    summary: '<span data-ttu-id="a8bb4-145">Асинхронно получает все объекты CustomXmlNode в настраиваемой XML-части, соответствующие указанному параметру XPath.</span><span class="sxs-lookup"><span data-stu-id="a8bb4-145">Asynchronously gets any CustomXmlNodes in this custom XML part which match the specified XPath.</span></span>'
    remarks: '<span data-ttu-id="a8bb4-146">**Набор требований**: [CustomXmlParts](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#customxmlparts)</span><span class="sxs-lookup"><span data-stu-id="a8bb4-146">**Requirement set**: [CustomXmlParts](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#customxmlparts)</span></span>'
    name: 'getNodesAsync(xPath, options, callback)'
    fullName: 'getNodesAsync(xPath, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getNodesAsync(xPath: string, options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<CustomXmlNode[]>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: xPath
          description: '<span data-ttu-id="a8bb4-147">Выражение XPath, определяющее возвращаемые узлы.</span><span class="sxs-lookup"><span data-stu-id="a8bb4-147">An XPath expression that specifies the nodes you want returned.</span></span> <span data-ttu-id="a8bb4-148">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="a8bb4-148">Required.</span></span>'
          type:
            - string
        - id: options
          description: '<span data-ttu-id="a8bb4-149">Предоставляет параметр для сохранения данных контекста любого типа без изменений для использования при обратном вызове.</span><span class="sxs-lookup"><span data-stu-id="a8bb4-149">Provides an option for preserving context data of any type, unchanged, for use in a callback.</span></span>'
          type:
            - office.Office.AsyncContextOptions
        - id: callback
          description: '<span data-ttu-id="a8bb4-150">Необязательно.</span><span class="sxs-lookup"><span data-stu-id="a8bb4-150">Optional.</span></span> <span data-ttu-id="a8bb4-151">Функция, вызываемая при возвращении обратного вызова, единственный параметр которой имеет тип [Office. AsyncResult](xref:office.Office.AsyncResult)</span><span class="sxs-lookup"><span data-stu-id="a8bb4-151">A function that is invoked when the callback returns, whose only parameter is of type [Office.AsyncResult](xref:office.Office.AsyncResult)</span></span><!-- --><span data-ttu-id="a8bb4-152">.</span><span class="sxs-lookup"><span data-stu-id="a8bb4-152"></span></span> <span data-ttu-id="a8bb4-153">`value` Свойство Result представляет собой массив объектов CustomXmlNode, представляющих узлы, указанные выражением XPath, которое передается в параметр XPath.</span><span class="sxs-lookup"><span data-stu-id="a8bb4-153">The `value` property of the result is an array of CustomXmlNode objects that represent the nodes specified by the XPath expression passed to the xPath parameter.</span></span>'
          type:
            - '(result: AsyncResult<CustomXmlNode[]>) => void'
  - uid: office.Office.CustomXmlPart.getNodesAsync_1
    summary: '<span data-ttu-id="a8bb4-154">Асинхронно получает все объекты CustomXmlNode в настраиваемой XML-части, соответствующие указанному параметру XPath.</span><span class="sxs-lookup"><span data-stu-id="a8bb4-154">Asynchronously gets any CustomXmlNodes in this custom XML part which match the specified XPath.</span></span>'
    remarks: |-
      <span data-ttu-id="a8bb4-155">**Набор требований**: [CustomXmlParts](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#customxmlparts)</span><span class="sxs-lookup"><span data-stu-id="a8bb4-155">**Requirement set**: [CustomXmlParts](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#customxmlparts)</span></span>

      #### <a name="examples"></a><span data-ttu-id="a8bb4-156">Примеры</span><span class="sxs-lookup"><span data-stu-id="a8bb4-156">Examples</span></span>

      ```javascript
      function showXmlNodeType() {
          Office.context.document.customXmlParts.getByIdAsync(
              "{3BC85265-09D6-4205-B665-8EB239A8B9A1}", function (result) {
              var xmlPart = result.value;
              xmlPart.getNodesAsync('*/*', function (nodeResults) {
                  for (i = 0; i < nodeResults.value.length; i++) {
                      var node = nodeResults.value[i];
                      write(node.nodeType);
                  }
              });
          });
      }
      // Function that writes to a div with id='message' on the page.
      function write(message){
          document.getElementById('message').innerText += message; 
      }
      ```
    name: 'getNodesAsync(xPath, callback)'
    fullName: 'getNodesAsync(xPath, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getNodesAsync(xPath: string, callback?: (result: AsyncResult<CustomXmlNode[]>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: xPath
          description: '<span data-ttu-id="a8bb4-157">Выражение XPath, определяющее возвращаемые узлы.</span><span class="sxs-lookup"><span data-stu-id="a8bb4-157">An XPath expression that specifies the nodes you want returned.</span></span> <span data-ttu-id="a8bb4-158">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="a8bb4-158">Required.</span></span>'
          type:
            - string
        - id: callback
          description: '<span data-ttu-id="a8bb4-159">Необязательно.</span><span class="sxs-lookup"><span data-stu-id="a8bb4-159">Optional.</span></span> <span data-ttu-id="a8bb4-160">Функция, вызываемая при возвращении обратного вызова, единственный параметр которой имеет тип [Office. AsyncResult](xref:office.Office.AsyncResult)</span><span class="sxs-lookup"><span data-stu-id="a8bb4-160">A function that is invoked when the callback returns, whose only parameter is of type [Office.AsyncResult](xref:office.Office.AsyncResult)</span></span><!-- --><span data-ttu-id="a8bb4-161">.</span><span class="sxs-lookup"><span data-stu-id="a8bb4-161"></span></span> <span data-ttu-id="a8bb4-162">`value` Свойство Result представляет собой массив объектов CustomXmlNode, представляющих узлы, указанные выражением XPath, которое передается в параметр XPath.</span><span class="sxs-lookup"><span data-stu-id="a8bb4-162">The `value` property of the result is an array of CustomXmlNode objects that represent the nodes specified by the XPath expression passed to the xPath parameter.</span></span>'
          type:
            - '(result: AsyncResult<CustomXmlNode[]>) => void'
  - uid: office.Office.CustomXmlPart.getXmlAsync
    summary: <span data-ttu-id="a8bb4-163">Асинхронно получает XML внутри настраиваемой XML-части.</span><span class="sxs-lookup"><span data-stu-id="a8bb4-163">Asynchronously gets the XML inside this custom XML part.</span></span>
    remarks: '<span data-ttu-id="a8bb4-164">**Набор требований**: [CustomXmlParts](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#customxmlparts)</span><span class="sxs-lookup"><span data-stu-id="a8bb4-164">**Requirement set**: [CustomXmlParts](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#customxmlparts)</span></span>'
    name: 'getXmlAsync(options, callback)'
    fullName: 'getXmlAsync(options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getXmlAsync(options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<string>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: options
          description: '<span data-ttu-id="a8bb4-165">Предоставляет параметр для сохранения данных контекста любого типа без изменений для использования при обратном вызове.</span><span class="sxs-lookup"><span data-stu-id="a8bb4-165">Provides an option for preserving context data of any type, unchanged, for use in a callback.</span></span>'
          type:
            - office.Office.AsyncContextOptions
        - id: callback
          description: '<span data-ttu-id="a8bb4-166">Необязательно.</span><span class="sxs-lookup"><span data-stu-id="a8bb4-166">Optional.</span></span> <span data-ttu-id="a8bb4-167">Функция, вызываемая при возвращении обратного вызова, единственный параметр которой имеет тип [Office. AsyncResult](xref:office.Office.AsyncResult)</span><span class="sxs-lookup"><span data-stu-id="a8bb4-167">A function that is invoked when the callback returns, whose only parameter is of type [Office.AsyncResult](xref:office.Office.AsyncResult)</span></span><!-- --><span data-ttu-id="a8bb4-168">.</span><span class="sxs-lookup"><span data-stu-id="a8bb4-168"></span></span> <span data-ttu-id="a8bb4-169">`value` Свойство Result является строкой, содержащей XML объекта CustomXMLPart, на который указывает ссылка.</span><span class="sxs-lookup"><span data-stu-id="a8bb4-169">The `value` property of the result is a string that contains the XML of the referenced CustomXmlPart object.</span></span>'
          type:
            - '(result: AsyncResult<string>) => void'
  - uid: office.Office.CustomXmlPart.getXmlAsync_1
    summary: <span data-ttu-id="a8bb4-170">Асинхронно получает XML внутри настраиваемой XML-части.</span><span class="sxs-lookup"><span data-stu-id="a8bb4-170">Asynchronously gets the XML inside this custom XML part.</span></span>
    remarks: |-
      <span data-ttu-id="a8bb4-171">**Набор требований**: [CustomXmlParts](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#customxmlparts)</span><span class="sxs-lookup"><span data-stu-id="a8bb4-171">**Requirement set**: [CustomXmlParts](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#customxmlparts)</span></span>

      #### <a name="examples"></a><span data-ttu-id="a8bb4-172">Примеры</span><span class="sxs-lookup"><span data-stu-id="a8bb4-172">Examples</span></span>

      ```javascript
      function showXMLPartInnerXML() {
          Office.context.document.customXmlParts.getByIdAsync(
              "{3BC85265-09D6-4205-B665-8EB239A8B9A1}", function (result) {
              var xmlPart = result.value;
              xmlPart.getXmlAsync(function (eventArgs) {
                  write(eventArgs.value);
              });
          });
      }
      // Function that writes to a div with id='message' on the page.
      function write(message){
          document.getElementById('message').innerText += message; 
      }
      ```
    name: getXmlAsync(callback)
    fullName: getXmlAsync(callback)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getXmlAsync(callback?: (result: AsyncResult<string>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: callback
          description: '<span data-ttu-id="a8bb4-173">Необязательно.</span><span class="sxs-lookup"><span data-stu-id="a8bb4-173">Optional.</span></span> <span data-ttu-id="a8bb4-174">Функция, вызываемая при возвращении обратного вызова, единственный параметр которой имеет тип [Office. AsyncResult](xref:office.Office.AsyncResult)</span><span class="sxs-lookup"><span data-stu-id="a8bb4-174">A function that is invoked when the callback returns, whose only parameter is of type [Office.AsyncResult](xref:office.Office.AsyncResult)</span></span><!-- --><span data-ttu-id="a8bb4-175">.</span><span class="sxs-lookup"><span data-stu-id="a8bb4-175"></span></span> <span data-ttu-id="a8bb4-176">`value` Свойство Result является строкой, содержащей XML объекта CustomXMLPart, на который указывает ссылка.</span><span class="sxs-lookup"><span data-stu-id="a8bb4-176">The `value` property of the result is a string that contains the XML of the referenced CustomXmlPart object.</span></span>'
          type:
            - '(result: AsyncResult<string>) => void'
  - uid: office.Office.CustomXmlPart.removeHandlerAsync
    summary: <span data-ttu-id="a8bb4-177">Удаляет обработчик событий для указанного типа события.</span><span class="sxs-lookup"><span data-stu-id="a8bb4-177">Removes an event handler for the specified event type.</span></span>
    remarks: '<span data-ttu-id="a8bb4-178">**Набор требований**: [CustomXmlParts](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#customxmlparts)</span><span class="sxs-lookup"><span data-stu-id="a8bb4-178">**Requirement set**: [CustomXmlParts](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#customxmlparts)</span></span>'
    name: 'removeHandlerAsync(eventType, handler, options, callback)'
    fullName: 'removeHandlerAsync(eventType, handler, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'removeHandlerAsync(eventType: Office.EventType, handler?: (result: any) => void, options?: RemoveHandlerOptions, callback?: (result: AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: eventType
          description: '<span data-ttu-id="a8bb4-179">Указывает тип удаляемого события.</span><span class="sxs-lookup"><span data-stu-id="a8bb4-179">Specifies the type of event to remove.</span></span> <span data-ttu-id="a8bb4-180">Для объекта CustomXmlPart параметр eventType может быть указан как`Office.EventType.NodeDeleted`</span><span class="sxs-lookup"><span data-stu-id="a8bb4-180">For a CustomXmlPart object, the eventType parameter can be specified as `Office.EventType.NodeDeleted`</span></span><!-- --><span data-ttu-id="a8bb4-181">, `Office.EventType.NodeInserted`</span><span class="sxs-lookup"><span data-stu-id="a8bb4-181"></span></span><!-- --><span data-ttu-id="a8bb4-182">, а`Office.EventType.NodeReplaced`</span><span class="sxs-lookup"><span data-stu-id="a8bb4-182">, and `Office.EventType.NodeReplaced`</span></span><!-- --><span data-ttu-id="a8bb4-183">.</span><span class="sxs-lookup"><span data-stu-id="a8bb4-183"></span></span>'
          type:
            - office.Office.EventType
        - id: handler
          description: '<span data-ttu-id="a8bb4-184">Имя обработчика, который требуется удалить.</span><span class="sxs-lookup"><span data-stu-id="a8bb4-184">The name of the handler to remove.</span></span>'
          type:
            - '(result: any) => void'
        - id: options
          description: '<span data-ttu-id="a8bb4-185">Предоставляет параметры для определения обработчика событий или обработчиков, которые удаляются.</span><span class="sxs-lookup"><span data-stu-id="a8bb4-185">Provides options to determine which event handler or handlers are removed.</span></span>'
          type:
            - office.Office.RemoveHandlerOptions
        - id: callback
          description: '<span data-ttu-id="a8bb4-186">Необязательно.</span><span class="sxs-lookup"><span data-stu-id="a8bb4-186">Optional.</span></span> <span data-ttu-id="a8bb4-187">Функция, вызываемая при возвращении обратного вызова, единственный параметр которой имеет тип [Office. AsyncResult](xref:office.Office.AsyncResult)</span><span class="sxs-lookup"><span data-stu-id="a8bb4-187">A function that is invoked when the callback returns, whose only parameter is of type [Office.AsyncResult](xref:office.Office.AsyncResult)</span></span><!-- --><span data-ttu-id="a8bb4-188">.</span><span class="sxs-lookup"><span data-stu-id="a8bb4-188"></span></span>'
          type:
            - '(result: AsyncResult<void>) => void'
  - uid: office.Office.CustomXmlPart.removeHandlerAsync_1
    summary: <span data-ttu-id="a8bb4-189">Удаляет обработчик событий для указанного типа события.</span><span class="sxs-lookup"><span data-stu-id="a8bb4-189">Removes an event handler for the specified event type.</span></span>
    remarks: |-
      <span data-ttu-id="a8bb4-190">**Набор требований**: [CustomXmlParts](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#customxmlparts)</span><span class="sxs-lookup"><span data-stu-id="a8bb4-190">**Requirement set**: [CustomXmlParts](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#customxmlparts)</span></span>

      #### <a name="examples"></a><span data-ttu-id="a8bb4-191">Примеры</span><span class="sxs-lookup"><span data-stu-id="a8bb4-191">Examples</span></span>

      ```javascript
      function removeNodeInsertedEventHandler() {
          Office.context.document.customXmlParts.getByIdAsync(
              "{3BC85265-09D6-4205-B665-8EB239A8B9A1}",
              function (result) {
                  var xmlPart = result.value;
                  xmlPart.removeHandlerAsync(Office.EventType.DataNodeInserted, {handler:myHandler});
          });
      }
      ```
    name: 'removeHandlerAsync(eventType, handler, callback)'
    fullName: 'removeHandlerAsync(eventType, handler, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'removeHandlerAsync(eventType: Office.EventType, handler?: (result: any) => void, callback?: (result: AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: eventType
          description: '<span data-ttu-id="a8bb4-192">Указывает тип удаляемого события.</span><span class="sxs-lookup"><span data-stu-id="a8bb4-192">Specifies the type of event to remove.</span></span> <span data-ttu-id="a8bb4-193">Для объекта CustomXmlPart параметр eventType может быть указан как`Office.EventType.NodeDeleted`</span><span class="sxs-lookup"><span data-stu-id="a8bb4-193">For a CustomXmlPart object, the eventType parameter can be specified as `Office.EventType.NodeDeleted`</span></span><!-- --><span data-ttu-id="a8bb4-194">, `Office.EventType.NodeInserted`</span><span class="sxs-lookup"><span data-stu-id="a8bb4-194"></span></span><!-- --><span data-ttu-id="a8bb4-195">, а`Office.EventType.NodeReplaced`</span><span class="sxs-lookup"><span data-stu-id="a8bb4-195">, and `Office.EventType.NodeReplaced`</span></span><!-- --><span data-ttu-id="a8bb4-196">.</span><span class="sxs-lookup"><span data-stu-id="a8bb4-196"></span></span>'
          type:
            - office.Office.EventType
        - id: handler
          description: '<span data-ttu-id="a8bb4-197">Имя обработчика, который требуется удалить.</span><span class="sxs-lookup"><span data-stu-id="a8bb4-197">The name of the handler to remove.</span></span>'
          type:
            - '(result: any) => void'
        - id: callback
          description: '<span data-ttu-id="a8bb4-198">Необязательно.</span><span class="sxs-lookup"><span data-stu-id="a8bb4-198">Optional.</span></span> <span data-ttu-id="a8bb4-199">Функция, вызываемая при возвращении обратного вызова, единственный параметр которой имеет тип [Office. AsyncResult](xref:office.Office.AsyncResult)</span><span class="sxs-lookup"><span data-stu-id="a8bb4-199">A function that is invoked when the callback returns, whose only parameter is of type [Office.AsyncResult](xref:office.Office.AsyncResult)</span></span><!-- --><span data-ttu-id="a8bb4-200">.</span><span class="sxs-lookup"><span data-stu-id="a8bb4-200"></span></span>'
          type:
            - '(result: AsyncResult<void>) => void'
  - uid: office.Office.CustomXmlPart.builtIn
    summary: '<span data-ttu-id="a8bb4-201">True, если настраиваемая XML-часть является встроенной; в противном случае — false.</span><span class="sxs-lookup"><span data-stu-id="a8bb4-201">True, if the custom XML part is built in; otherwise false.</span></span>'
    name: builtIn
    fullName: builtIn
    langs:
      - typeScript
    type: property
    syntax:
      content: 'builtIn: boolean;'
      return:
        type:
          - boolean
        description: |-


          #### <a name="examples"></a><span data-ttu-id="a8bb4-202">Примеры</span><span class="sxs-lookup"><span data-stu-id="a8bb4-202">Examples</span></span>

          ```javascript
          function showXMLPartBuiltIn() {
              Office.context.document.customXmlParts.getByIdAsync(
                  "{3BC85265-09D6-4205-B665-8EB239A8B9A1}", function (result) {
                  var xmlPart = result.value;
                  write(xmlPart.builtIn);
              });
          }

          // Function that writes to a div with id='message' on the page.
          function write(message){
              document.getElementById('message').innerText += message; 
          }
          ```
  - uid: office.Office.CustomXmlPart.id
    summary: <span data-ttu-id="a8bb4-203">Получает GUID объекта CustomXMLPart.</span><span class="sxs-lookup"><span data-stu-id="a8bb4-203">Gets the GUID of the CustomXMLPart.</span></span>
    name: id
    fullName: id
    langs:
      - typeScript
    type: property
    syntax:
      content: 'id: string;'
      return:
        type:
          - string
        description: |-


          #### <a name="examples"></a><span data-ttu-id="a8bb4-204">Примеры</span><span class="sxs-lookup"><span data-stu-id="a8bb4-204">Examples</span></span>

          ```javascript
          function showXMLPartBuiltId() {
              Office.context.document.customXmlParts.getByIdAsync(
                  "{3BC85265-09D6-4205-B665-8EB239A8B9A1}", function (result) {
                  var xmlPart = result.value;
                  write(xmlPart.id);
              });
          }
          // Function that writes to a div with id='message' on the page.
          function write(message){
              document.getElementById('message').innerText += message; 
          }
          ```
  - uid: office.Office.CustomXmlPart.namespaceManager
    summary: '<span data-ttu-id="a8bb4-205">Получает набор сопоставлений префиксов пространств имен ([Office. CustomXmlPrefixMappings](xref:office.Office.CustomXmlPrefixMappings)</span><span class="sxs-lookup"><span data-stu-id="a8bb4-205">Gets the set of namespace prefix mappings ([Office.CustomXmlPrefixMappings](xref:office.Office.CustomXmlPrefixMappings)</span></span><!-- --><span data-ttu-id="a8bb4-206">), используемый для текущего CustomXmlPart.</span><span class="sxs-lookup"><span data-stu-id="a8bb4-206">) used against the current CustomXmlPart.</span></span>'
    name: namespaceManager
    fullName: namespaceManager
    langs:
      - typeScript
    type: property
    syntax:
      content: 'namespaceManager: CustomXmlPrefixMappings;'
      return:
        type:
          - office.Office.CustomXmlPrefixMappings
        description: |-


          #### <a name="examples"></a><span data-ttu-id="a8bb4-207">Примеры</span><span class="sxs-lookup"><span data-stu-id="a8bb4-207">Examples</span></span>

          ```javascript
          function setXMLPartNamespaceManagerNamespace() {
              Office.context.document.customXmlParts.getByIdAsync(
                  "{3BC85265-09D6-4205-B665-8EB239A8B9A1}", function (result) {
                  var xmlPart = result.value;
                  xmlPart.namespaceManager.addNamespaceAsync("myPrefix", "myNamespace");
              });
          }
          ```