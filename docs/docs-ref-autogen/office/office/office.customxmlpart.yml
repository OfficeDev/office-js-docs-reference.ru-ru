### YamlMime:UniversalReference
items:
  - uid: 'office!Office.CustomXmlPart:interface'
    summary: '<span data-ttu-id="fc616-101">Представляет один объект CustomXMLPart в семействе [Office. CustomXmlParts](xref:office!Office.CustomXmlParts:interface) .</span><span class="sxs-lookup"><span data-stu-id="fc616-101">Represents a single CustomXMLPart in an [Office.CustomXmlParts](xref:office!Office.CustomXmlParts:interface) collection.</span></span>'
    remarks: '<span data-ttu-id="fc616-102">**Hosts**: Word</span><span class="sxs-lookup"><span data-stu-id="fc616-102">**Hosts**: Word</span></span>'
    name: Office.CustomXmlPart
    fullName: Office.CustomXmlPart
    langs:
      - typeScript
    type: interface
    package: office!
    children:
      - 'office!Office.CustomXmlPart#addHandlerAsync:member(1)'
      - 'office!Office.CustomXmlPart#addHandlerAsync:member(2)'
      - 'office!Office.CustomXmlPart#builtIn:member'
      - 'office!Office.CustomXmlPart#deleteAsync:member(1)'
      - 'office!Office.CustomXmlPart#deleteAsync:member(2)'
      - 'office!Office.CustomXmlPart#getNodesAsync:member(1)'
      - 'office!Office.CustomXmlPart#getNodesAsync:member(2)'
      - 'office!Office.CustomXmlPart#getXmlAsync:member(1)'
      - 'office!Office.CustomXmlPart#getXmlAsync:member(2)'
      - 'office!Office.CustomXmlPart#id:member'
      - 'office!Office.CustomXmlPart#namespaceManager:member'
      - 'office!Office.CustomXmlPart#removeHandlerAsync:member(1)'
      - 'office!Office.CustomXmlPart#removeHandlerAsync:member(2)'
  - uid: 'office!Office.CustomXmlPart#addHandlerAsync:member(1)'
    summary: '<span data-ttu-id="fc616-103">Добавляет обработчик событий в объект, используя указанный тип события.</span><span class="sxs-lookup"><span data-stu-id="fc616-103">Adds an event handler to the object using the specified event type.</span></span>'
    remarks: |-
      <span data-ttu-id="fc616-104">**Набор требований**: [CustomXmlParts](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#customxmlparts)</span><span class="sxs-lookup"><span data-stu-id="fc616-104">**Requirement set**: [CustomXmlParts](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#customxmlparts)</span></span>

      <span data-ttu-id="fc616-105">Можно добавить несколько обработчиков событий для указанного объекта eventType, если имя каждой функции обработчика событий уникально.</span><span class="sxs-lookup"><span data-stu-id="fc616-105">You can add multiple event handlers for the specified eventType as long as the name of each event handler function is unique.</span></span>
    name: 'addHandlerAsync(eventType, handler, options, callback)'
    fullName: 'addHandlerAsync(eventType, handler, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addHandlerAsync(eventType: Office.EventType, handler: (result: any) => void, options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: eventType
          description: '<span data-ttu-id="fc616-106">Указывает тип добавляемого события.</span><span class="sxs-lookup"><span data-stu-id="fc616-106">Specifies the type of event to add.</span></span> <span data-ttu-id="fc616-107">Для объекта CustomXmlPart параметр eventType может быть указан как`Office.EventType.NodeDeleted`</span><span class="sxs-lookup"><span data-stu-id="fc616-107">For a CustomXmlPart object, the eventType parameter can be specified as `Office.EventType.NodeDeleted`</span></span><!-- --><span data-ttu-id="fc616-108">, `Office.EventType.NodeInserted`</span><span class="sxs-lookup"><span data-stu-id="fc616-108"></span></span><!-- --><span data-ttu-id="fc616-109">, а`Office.EventType.NodeReplaced`</span><span class="sxs-lookup"><span data-stu-id="fc616-109">, and `Office.EventType.NodeReplaced`</span></span><!-- --><span data-ttu-id="fc616-110">.</span><span class="sxs-lookup"><span data-stu-id="fc616-110"></span></span>'
          type:
            - 'office!Office.EventType:enum'
        - id: handler
          description: '<span data-ttu-id="fc616-111">Добавляемая функция обработчика событий, единственный параметр которой имеет тип [Office. свойство nodedeletedeventargs](xref:office!Office.NodeDeletedEventArgs:interface)</span><span class="sxs-lookup"><span data-stu-id="fc616-111">The event handler function to add, whose only parameter is of type [Office.NodeDeletedEventArgs](xref:office!Office.NodeDeletedEventArgs:interface)</span></span><!-- --><span data-ttu-id="fc616-112">, [Office. NodeInsertedEventArgs](xref:office!Office.NodeInsertedEventArgs:interface)</span><span class="sxs-lookup"><span data-stu-id="fc616-112">, [Office.NodeInsertedEventArgs](xref:office!Office.NodeInsertedEventArgs:interface)</span></span><!-- --><span data-ttu-id="fc616-113">или [Office. свойство nodereplacedeventargs](xref:office!Office.NodeReplacedEventArgs:interface)</span><span class="sxs-lookup"><span data-stu-id="fc616-113">, or [Office.NodeReplacedEventArgs](xref:office!Office.NodeReplacedEventArgs:interface)</span></span>'
          type:
            - '(result: any) => void'
        - id: options
          description: '<span data-ttu-id="fc616-114">Предоставляет параметр для сохранения данных контекста любого типа без изменений для использования при обратном вызове.</span><span class="sxs-lookup"><span data-stu-id="fc616-114">Provides an option for preserving context data of any type, unchanged, for use in a callback.</span></span>'
          type:
            - 'office!Office.AsyncContextOptions:interface'
        - id: callback
          description: '<span data-ttu-id="fc616-115">Необязательно.</span><span class="sxs-lookup"><span data-stu-id="fc616-115">Optional.</span></span> <span data-ttu-id="fc616-116">Функция, вызываемая при возвращении обратного вызова, единственный параметр которой имеет тип [Office. AsyncResult](xref:office!Office.AsyncResult:interface)</span><span class="sxs-lookup"><span data-stu-id="fc616-116">A function that is invoked when the callback returns, whose only parameter is of type [Office.AsyncResult](xref:office!Office.AsyncResult:interface)</span></span><!-- --><span data-ttu-id="fc616-117">.</span><span class="sxs-lookup"><span data-stu-id="fc616-117"></span></span>'
          type:
            - 'office!Office.CustomXmlPart#addHandlerAsync~0:complex'
  - uid: 'office!Office.CustomXmlPart#addHandlerAsync:member(2)'
    summary: '<span data-ttu-id="fc616-118">Добавляет обработчик событий в объект, используя указанный тип события.</span><span class="sxs-lookup"><span data-stu-id="fc616-118">Adds an event handler to the object using the specified event type.</span></span>'
    remarks: |-
      <span data-ttu-id="fc616-119">**Набор требований**: [CustomXmlParts](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#customxmlparts)</span><span class="sxs-lookup"><span data-stu-id="fc616-119">**Requirement set**: [CustomXmlParts](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#customxmlparts)</span></span>

      <span data-ttu-id="fc616-120">Можно добавить несколько обработчиков событий для указанного объекта eventType, если имя каждой функции обработчика событий уникально.</span><span class="sxs-lookup"><span data-stu-id="fc616-120">You can add multiple event handlers for the specified eventType as long as the name of each event handler function is unique.</span></span>

      #### <a name="examples"></a><span data-ttu-id="fc616-121">Примеры</span><span class="sxs-lookup"><span data-stu-id="fc616-121">Examples</span></span>

      ```javascript
      // To add an event handler for the NodeDeleted event, use the addHandlerAsync method of the CustomXmlPart object.
      function addNodeDeletedEvent() {
          Office.context.document.customXmlParts.getByIdAsync(
              "{3BC85265-09D6-4205-B665-8EB239A8B9A1}", function (result) {
              var xmlPart = result.value;
              xmlPart.addHandlerAsync(Office.EventType.NodeDeleted, function (eventArgs) {
                  write("A node has been deleted.");
              });
          });
      }
      // Function that writes to a div with id='message' on the page.
      function write(message){
          document.getElementById('message').innerText += message;
      }
      ```
      ```javascript
      // To add an event handler for the NodeInserted event, use the addHandlerAsync method of the CustomXmlPart object.
      function addNodeInsertedEvent() {
          Office.context.document.customXmlParts.getByIdAsync(
              "{3BC85265-09D6-4205-B665-8EB239A8B9A1}", function (result) {
              var xmlPart = result.value;
              xmlPart.addHandlerAsync(Office.EventType.NodeInserted, function (eventArgs) {
                  write("A node has been inserted.");
              });
          });
      }
      // Function that writes to a div with id='message' on the page.
      function write(message){
          document.getElementById('message').innerText += message;
      }
      ```
      ```javascript
      // To add an event handler for the NodeReplaced event, use the addHandlerAsync method of the CustomXmlPart object.
      function addNodeReplacedEvent() {
          Office.context.document.customXmlParts.getByIdAsync(
              "{3BC85265-09D6-4205-B665-8EB239A8B9A1}", function (result) {
              var xmlPart = result.value;
              xmlPart.addHandlerAsync(Office.EventType.NodeReplaced, function (eventArgs) {
                  write("A node has been replaced.");
              });
          });
      }
      // Function that writes to a div with id='message' on the page.
      function write(message){
          document.getElementById('message').innerText += message;
      }
      ```
    name: 'addHandlerAsync(eventType, handler, callback)'
    fullName: 'addHandlerAsync(eventType, handler, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addHandlerAsync(eventType: Office.EventType, handler: (result: any) => void, callback?: (result: AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: eventType
          description: '<span data-ttu-id="fc616-122">Указывает тип добавляемого события.</span><span class="sxs-lookup"><span data-stu-id="fc616-122">Specifies the type of event to add.</span></span> <span data-ttu-id="fc616-123">Для объекта CustomXmlPart параметр eventType может быть указан как`Office.EventType.NodeDeleted`</span><span class="sxs-lookup"><span data-stu-id="fc616-123">For a CustomXmlPart object, the eventType parameter can be specified as `Office.EventType.NodeDeleted`</span></span><!-- --><span data-ttu-id="fc616-124">, `Office.EventType.NodeInserted`</span><span class="sxs-lookup"><span data-stu-id="fc616-124"></span></span><!-- --><span data-ttu-id="fc616-125">, а`Office.EventType.NodeReplaced`</span><span class="sxs-lookup"><span data-stu-id="fc616-125">, and `Office.EventType.NodeReplaced`</span></span><!-- --><span data-ttu-id="fc616-126">.</span><span class="sxs-lookup"><span data-stu-id="fc616-126"></span></span>'
          type:
            - 'office!Office.EventType:enum'
        - id: handler
          description: '<span data-ttu-id="fc616-127">Добавляемая функция обработчика событий, единственный параметр которой имеет тип [Office. свойство nodedeletedeventargs](xref:office!Office.NodeDeletedEventArgs:interface)</span><span class="sxs-lookup"><span data-stu-id="fc616-127">The event handler function to add, whose only parameter is of type [Office.NodeDeletedEventArgs](xref:office!Office.NodeDeletedEventArgs:interface)</span></span><!-- --><span data-ttu-id="fc616-128">, [Office. NodeInsertedEventArgs](xref:office!Office.NodeInsertedEventArgs:interface)</span><span class="sxs-lookup"><span data-stu-id="fc616-128">, [Office.NodeInsertedEventArgs](xref:office!Office.NodeInsertedEventArgs:interface)</span></span><!-- --><span data-ttu-id="fc616-129">или [Office. свойство nodereplacedeventargs](xref:office!Office.NodeReplacedEventArgs:interface)</span><span class="sxs-lookup"><span data-stu-id="fc616-129">, or [Office.NodeReplacedEventArgs](xref:office!Office.NodeReplacedEventArgs:interface)</span></span>'
          type:
            - '(result: any) => void'
        - id: callback
          description: '<span data-ttu-id="fc616-130">Необязательно.</span><span class="sxs-lookup"><span data-stu-id="fc616-130">Optional.</span></span> <span data-ttu-id="fc616-131">Функция, вызываемая при возвращении обратного вызова, единственный параметр которой имеет тип [Office. AsyncResult](xref:office!Office.AsyncResult:interface)</span><span class="sxs-lookup"><span data-stu-id="fc616-131">A function that is invoked when the callback returns, whose only parameter is of type [Office.AsyncResult](xref:office!Office.AsyncResult:interface)</span></span><!-- --><span data-ttu-id="fc616-132">.</span><span class="sxs-lookup"><span data-stu-id="fc616-132"></span></span>'
          type:
            - 'office!Office.CustomXmlPart#addHandlerAsync~1:complex'
  - uid: 'office!Office.CustomXmlPart#builtIn:member'
    summary: '<span data-ttu-id="fc616-133">True, если настраиваемая XML-часть является встроенной; в противном случае — false.</span><span class="sxs-lookup"><span data-stu-id="fc616-133">True, if the custom XML part is built in; otherwise false.</span></span>'
    name: builtIn
    fullName: builtIn
    langs:
      - typeScript
    type: property
    syntax:
      content: 'builtIn: boolean;'
      return:
        type:
          - boolean
        description: |-


          #### <a name="examples"></a><span data-ttu-id="fc616-134">Примеры</span><span class="sxs-lookup"><span data-stu-id="fc616-134">Examples</span></span>

          ```javascript
          function showXMLPartBuiltIn() {
              Office.context.document.customXmlParts.getByIdAsync(
                  "{3BC85265-09D6-4205-B665-8EB239A8B9A1}", function (result) {
                  var xmlPart = result.value;
                  write(xmlPart.builtIn);
              });
          }

          // Function that writes to a div with id='message' on the page.
          function write(message){
              document.getElementById('message').innerText += message; 
          }
          ```
  - uid: 'office!Office.CustomXmlPart#deleteAsync:member(1)'
    summary: <span data-ttu-id="fc616-135">Удаляет пользовательскую XML-часть.</span><span class="sxs-lookup"><span data-stu-id="fc616-135">Deletes the Custom XML Part.</span></span>
    remarks: '<span data-ttu-id="fc616-136">**Набор требований**: [CustomXmlParts](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#customxmlparts)</span><span class="sxs-lookup"><span data-stu-id="fc616-136">**Requirement set**: [CustomXmlParts](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#customxmlparts)</span></span>'
    name: 'deleteAsync(options, callback)'
    fullName: 'deleteAsync(options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'deleteAsync(options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: options
          description: '<span data-ttu-id="fc616-137">Предоставляет параметр для сохранения данных контекста любого типа без изменений для использования при обратном вызове.</span><span class="sxs-lookup"><span data-stu-id="fc616-137">Provides an option for preserving context data of any type, unchanged, for use in a callback.</span></span>'
          type:
            - 'office!Office.AsyncContextOptions:interface'
        - id: callback
          description: '<span data-ttu-id="fc616-138">Необязательно.</span><span class="sxs-lookup"><span data-stu-id="fc616-138">Optional.</span></span> <span data-ttu-id="fc616-139">Функция, вызываемая при возвращении обратного вызова, единственный параметр которой имеет тип [Office. AsyncResult](xref:office!Office.AsyncResult:interface)</span><span class="sxs-lookup"><span data-stu-id="fc616-139">A function that is invoked when the callback returns, whose only parameter is of type [Office.AsyncResult](xref:office!Office.AsyncResult:interface)</span></span><!-- --><span data-ttu-id="fc616-140">.</span><span class="sxs-lookup"><span data-stu-id="fc616-140"></span></span>'
          type:
            - 'office!Office.CustomXmlPart#deleteAsync~0:complex'
  - uid: 'office!Office.CustomXmlPart#deleteAsync:member(2)'
    summary: <span data-ttu-id="fc616-141">Удаляет пользовательскую XML-часть.</span><span class="sxs-lookup"><span data-stu-id="fc616-141">Deletes the Custom XML Part.</span></span>
    remarks: |-
      <span data-ttu-id="fc616-142">**Набор требований**: [CustomXmlParts](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#customxmlparts)</span><span class="sxs-lookup"><span data-stu-id="fc616-142">**Requirement set**: [CustomXmlParts](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#customxmlparts)</span></span>

      #### <a name="examples"></a><span data-ttu-id="fc616-143">Примеры</span><span class="sxs-lookup"><span data-stu-id="fc616-143">Examples</span></span>

      ```javascript
      function deleteXMLPart() {
          Office.context.document.customXmlParts.getByIdAsync(
              "{3BC85265-09D6-4205-B665-8EB239A8B9A1}", function (result) {
              var xmlPart = result.value;
              xmlPart.deleteAsync(function (eventArgs) {
                  write("The XML Part has been deleted.");
              });
          });
      }
      // Function that writes to a div with id='message' on the page.
      function write(message){
          document.getElementById('message').innerText += message; 
      }
      ```
    name: deleteAsync(callback)
    fullName: deleteAsync(callback)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'deleteAsync(callback?: (result: AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: callback
          description: '<span data-ttu-id="fc616-144">Необязательно.</span><span class="sxs-lookup"><span data-stu-id="fc616-144">Optional.</span></span> <span data-ttu-id="fc616-145">Функция, вызываемая при возвращении обратного вызова, единственный параметр которой имеет тип [Office. AsyncResult](xref:office!Office.AsyncResult:interface)</span><span class="sxs-lookup"><span data-stu-id="fc616-145">A function that is invoked when the callback returns, whose only parameter is of type [Office.AsyncResult](xref:office!Office.AsyncResult:interface)</span></span><!-- --><span data-ttu-id="fc616-146">.</span><span class="sxs-lookup"><span data-stu-id="fc616-146"></span></span>'
          type:
            - 'office!Office.CustomXmlPart#deleteAsync~1:complex'
  - uid: 'office!Office.CustomXmlPart#getNodesAsync:member(1)'
    summary: '<span data-ttu-id="fc616-147">Асинхронно получает все объекты CustomXmlNode в настраиваемой XML-части, соответствующие указанному параметру XPath.</span><span class="sxs-lookup"><span data-stu-id="fc616-147">Asynchronously gets any CustomXmlNodes in this custom XML part which match the specified XPath.</span></span>'
    remarks: '<span data-ttu-id="fc616-148">**Набор требований**: [CustomXmlParts](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#customxmlparts)</span><span class="sxs-lookup"><span data-stu-id="fc616-148">**Requirement set**: [CustomXmlParts](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#customxmlparts)</span></span>'
    name: 'getNodesAsync(xPath, options, callback)'
    fullName: 'getNodesAsync(xPath, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getNodesAsync(xPath: string, options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<CustomXmlNode[]>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: xPath
          description: '<span data-ttu-id="fc616-149">Выражение XPath, определяющее возвращаемые узлы.</span><span class="sxs-lookup"><span data-stu-id="fc616-149">An XPath expression that specifies the nodes you want returned.</span></span> <span data-ttu-id="fc616-150">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="fc616-150">Required.</span></span>'
          type:
            - string
        - id: options
          description: '<span data-ttu-id="fc616-151">Предоставляет параметр для сохранения данных контекста любого типа без изменений для использования при обратном вызове.</span><span class="sxs-lookup"><span data-stu-id="fc616-151">Provides an option for preserving context data of any type, unchanged, for use in a callback.</span></span>'
          type:
            - 'office!Office.AsyncContextOptions:interface'
        - id: callback
          description: '<span data-ttu-id="fc616-152">Необязательно.</span><span class="sxs-lookup"><span data-stu-id="fc616-152">Optional.</span></span> <span data-ttu-id="fc616-153">Функция, вызываемая при возвращении обратного вызова, единственный параметр которой имеет тип [Office. AsyncResult](xref:office!Office.AsyncResult:interface)</span><span class="sxs-lookup"><span data-stu-id="fc616-153">A function that is invoked when the callback returns, whose only parameter is of type [Office.AsyncResult](xref:office!Office.AsyncResult:interface)</span></span><!-- --><span data-ttu-id="fc616-154">.</span><span class="sxs-lookup"><span data-stu-id="fc616-154"></span></span> <span data-ttu-id="fc616-155">`value` Свойство Result представляет собой массив объектов CustomXmlNode, представляющих узлы, указанные выражением XPath, которое передается в параметр XPath.</span><span class="sxs-lookup"><span data-stu-id="fc616-155">The `value` property of the result is an array of CustomXmlNode objects that represent the nodes specified by the XPath expression passed to the xPath parameter.</span></span>'
          type:
            - 'office!Office.CustomXmlPart#getNodesAsync~0:complex'
  - uid: 'office!Office.CustomXmlPart#getNodesAsync:member(2)'
    summary: '<span data-ttu-id="fc616-156">Асинхронно получает все объекты CustomXmlNode в настраиваемой XML-части, соответствующие указанному параметру XPath.</span><span class="sxs-lookup"><span data-stu-id="fc616-156">Asynchronously gets any CustomXmlNodes in this custom XML part which match the specified XPath.</span></span>'
    remarks: |-
      <span data-ttu-id="fc616-157">**Набор требований**: [CustomXmlParts](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#customxmlparts)</span><span class="sxs-lookup"><span data-stu-id="fc616-157">**Requirement set**: [CustomXmlParts](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#customxmlparts)</span></span>

      #### <a name="examples"></a><span data-ttu-id="fc616-158">Примеры</span><span class="sxs-lookup"><span data-stu-id="fc616-158">Examples</span></span>

      ```javascript
      function showXmlNodeType() {
          Office.context.document.customXmlParts.getByIdAsync(
              "{3BC85265-09D6-4205-B665-8EB239A8B9A1}", function (result) {
              var xmlPart = result.value;
              xmlPart.getNodesAsync('*/*', function (nodeResults) {
                  for (i = 0; i < nodeResults.value.length; i++) {
                      var node = nodeResults.value[i];
                      write(node.nodeType);
                  }
              });
          });
      }
      // Function that writes to a div with id='message' on the page.
      function write(message){
          document.getElementById('message').innerText += message; 
      }
      ```
    name: 'getNodesAsync(xPath, callback)'
    fullName: 'getNodesAsync(xPath, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getNodesAsync(xPath: string, callback?: (result: AsyncResult<CustomXmlNode[]>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: xPath
          description: '<span data-ttu-id="fc616-159">Выражение XPath, определяющее возвращаемые узлы.</span><span class="sxs-lookup"><span data-stu-id="fc616-159">An XPath expression that specifies the nodes you want returned.</span></span> <span data-ttu-id="fc616-160">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="fc616-160">Required.</span></span>'
          type:
            - string
        - id: callback
          description: '<span data-ttu-id="fc616-161">Необязательно.</span><span class="sxs-lookup"><span data-stu-id="fc616-161">Optional.</span></span> <span data-ttu-id="fc616-162">Функция, вызываемая при возвращении обратного вызова, единственный параметр которой имеет тип [Office. AsyncResult](xref:office!Office.AsyncResult:interface)</span><span class="sxs-lookup"><span data-stu-id="fc616-162">A function that is invoked when the callback returns, whose only parameter is of type [Office.AsyncResult](xref:office!Office.AsyncResult:interface)</span></span><!-- --><span data-ttu-id="fc616-163">.</span><span class="sxs-lookup"><span data-stu-id="fc616-163"></span></span> <span data-ttu-id="fc616-164">`value` Свойство Result представляет собой массив объектов CustomXmlNode, представляющих узлы, указанные выражением XPath, которое передается в параметр XPath.</span><span class="sxs-lookup"><span data-stu-id="fc616-164">The `value` property of the result is an array of CustomXmlNode objects that represent the nodes specified by the XPath expression passed to the xPath parameter.</span></span>'
          type:
            - 'office!Office.CustomXmlPart#getNodesAsync~1:complex'
  - uid: 'office!Office.CustomXmlPart#getXmlAsync:member(1)'
    summary: <span data-ttu-id="fc616-165">Асинхронно получает XML внутри настраиваемой XML-части.</span><span class="sxs-lookup"><span data-stu-id="fc616-165">Asynchronously gets the XML inside this custom XML part.</span></span>
    remarks: '<span data-ttu-id="fc616-166">**Набор требований**: [CustomXmlParts](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#customxmlparts)</span><span class="sxs-lookup"><span data-stu-id="fc616-166">**Requirement set**: [CustomXmlParts](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#customxmlparts)</span></span>'
    name: 'getXmlAsync(options, callback)'
    fullName: 'getXmlAsync(options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getXmlAsync(options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<string>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: options
          description: '<span data-ttu-id="fc616-167">Предоставляет параметр для сохранения данных контекста любого типа без изменений для использования при обратном вызове.</span><span class="sxs-lookup"><span data-stu-id="fc616-167">Provides an option for preserving context data of any type, unchanged, for use in a callback.</span></span>'
          type:
            - 'office!Office.AsyncContextOptions:interface'
        - id: callback
          description: '<span data-ttu-id="fc616-168">Необязательно.</span><span class="sxs-lookup"><span data-stu-id="fc616-168">Optional.</span></span> <span data-ttu-id="fc616-169">Функция, вызываемая при возвращении обратного вызова, единственный параметр которой имеет тип [Office. AsyncResult](xref:office!Office.AsyncResult:interface)</span><span class="sxs-lookup"><span data-stu-id="fc616-169">A function that is invoked when the callback returns, whose only parameter is of type [Office.AsyncResult](xref:office!Office.AsyncResult:interface)</span></span><!-- --><span data-ttu-id="fc616-170">.</span><span class="sxs-lookup"><span data-stu-id="fc616-170"></span></span> <span data-ttu-id="fc616-171">`value` Свойство Result является строкой, содержащей XML объекта CustomXMLPart, на который указывает ссылка.</span><span class="sxs-lookup"><span data-stu-id="fc616-171">The `value` property of the result is a string that contains the XML of the referenced CustomXmlPart object.</span></span>'
          type:
            - 'office!Office.CustomXmlPart#getXmlAsync~0:complex'
  - uid: 'office!Office.CustomXmlPart#getXmlAsync:member(2)'
    summary: <span data-ttu-id="fc616-172">Асинхронно получает XML внутри настраиваемой XML-части.</span><span class="sxs-lookup"><span data-stu-id="fc616-172">Asynchronously gets the XML inside this custom XML part.</span></span>
    remarks: |-
      <span data-ttu-id="fc616-173">**Набор требований**: [CustomXmlParts](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#customxmlparts)</span><span class="sxs-lookup"><span data-stu-id="fc616-173">**Requirement set**: [CustomXmlParts](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#customxmlparts)</span></span>

      #### <a name="examples"></a><span data-ttu-id="fc616-174">Примеры</span><span class="sxs-lookup"><span data-stu-id="fc616-174">Examples</span></span>

      ```javascript
      function showXMLPartInnerXML() {
          Office.context.document.customXmlParts.getByIdAsync(
              "{3BC85265-09D6-4205-B665-8EB239A8B9A1}", function (result) {
              var xmlPart = result.value;
              xmlPart.getXmlAsync(function (eventArgs) {
                  write(eventArgs.value);
              });
          });
      }
      // Function that writes to a div with id='message' on the page.
      function write(message){
          document.getElementById('message').innerText += message; 
      }
      ```
    name: getXmlAsync(callback)
    fullName: getXmlAsync(callback)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getXmlAsync(callback?: (result: AsyncResult<string>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: callback
          description: '<span data-ttu-id="fc616-175">Необязательно.</span><span class="sxs-lookup"><span data-stu-id="fc616-175">Optional.</span></span> <span data-ttu-id="fc616-176">Функция, вызываемая при возвращении обратного вызова, единственный параметр которой имеет тип [Office. AsyncResult](xref:office!Office.AsyncResult:interface)</span><span class="sxs-lookup"><span data-stu-id="fc616-176">A function that is invoked when the callback returns, whose only parameter is of type [Office.AsyncResult](xref:office!Office.AsyncResult:interface)</span></span><!-- --><span data-ttu-id="fc616-177">.</span><span class="sxs-lookup"><span data-stu-id="fc616-177"></span></span> <span data-ttu-id="fc616-178">`value` Свойство Result является строкой, содержащей XML объекта CustomXMLPart, на который указывает ссылка.</span><span class="sxs-lookup"><span data-stu-id="fc616-178">The `value` property of the result is a string that contains the XML of the referenced CustomXmlPart object.</span></span>'
          type:
            - 'office!Office.CustomXmlPart#getXmlAsync~1:complex'
  - uid: 'office!Office.CustomXmlPart#id:member'
    summary: <span data-ttu-id="fc616-179">Получает GUID объекта CustomXMLPart.</span><span class="sxs-lookup"><span data-stu-id="fc616-179">Gets the GUID of the CustomXMLPart.</span></span>
    name: id
    fullName: id
    langs:
      - typeScript
    type: property
    syntax:
      content: 'id: string;'
      return:
        type:
          - string
        description: |-


          #### <a name="examples"></a><span data-ttu-id="fc616-180">Примеры</span><span class="sxs-lookup"><span data-stu-id="fc616-180">Examples</span></span>

          ```javascript
          function showXMLPartBuiltId() {
              Office.context.document.customXmlParts.getByIdAsync(
                  "{3BC85265-09D6-4205-B665-8EB239A8B9A1}", function (result) {
                  var xmlPart = result.value;
                  write(xmlPart.id);
              });
          }
          // Function that writes to a div with id='message' on the page.
          function write(message){
              document.getElementById('message').innerText += message; 
          }
          ```
  - uid: 'office!Office.CustomXmlPart#namespaceManager:member'
    summary: '<span data-ttu-id="fc616-181">Получает набор сопоставлений префиксов пространств имен ([Office. CustomXmlPrefixMappings](xref:office!Office.CustomXmlPrefixMappings:interface)</span><span class="sxs-lookup"><span data-stu-id="fc616-181">Gets the set of namespace prefix mappings ([Office.CustomXmlPrefixMappings](xref:office!Office.CustomXmlPrefixMappings:interface)</span></span><!-- --><span data-ttu-id="fc616-182">), используемый для текущего CustomXmlPart.</span><span class="sxs-lookup"><span data-stu-id="fc616-182">) used against the current CustomXmlPart.</span></span>'
    name: namespaceManager
    fullName: namespaceManager
    langs:
      - typeScript
    type: property
    syntax:
      content: 'namespaceManager: CustomXmlPrefixMappings;'
      return:
        type:
          - 'office!Office.CustomXmlPrefixMappings:interface'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="fc616-183">Примеры</span><span class="sxs-lookup"><span data-stu-id="fc616-183">Examples</span></span>

          ```javascript
          function setXMLPartNamespaceManagerNamespace() {
              Office.context.document.customXmlParts.getByIdAsync(
                  "{3BC85265-09D6-4205-B665-8EB239A8B9A1}", function (result) {
                  var xmlPart = result.value;
                  xmlPart.namespaceManager.addNamespaceAsync("myPrefix", "myNamespace");
              });
          }
          ```
  - uid: 'office!Office.CustomXmlPart#removeHandlerAsync:member(1)'
    summary: <span data-ttu-id="fc616-184">Удаляет обработчик событий для указанного типа события.</span><span class="sxs-lookup"><span data-stu-id="fc616-184">Removes an event handler for the specified event type.</span></span>
    remarks: '<span data-ttu-id="fc616-185">**Набор требований**: [CustomXmlParts](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#customxmlparts)</span><span class="sxs-lookup"><span data-stu-id="fc616-185">**Requirement set**: [CustomXmlParts](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#customxmlparts)</span></span>'
    name: 'removeHandlerAsync(eventType, handler, options, callback)'
    fullName: 'removeHandlerAsync(eventType, handler, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'removeHandlerAsync(eventType: Office.EventType, handler?: (result: any) => void, options?: RemoveHandlerOptions, callback?: (result: AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: eventType
          description: '<span data-ttu-id="fc616-186">Указывает тип удаляемого события.</span><span class="sxs-lookup"><span data-stu-id="fc616-186">Specifies the type of event to remove.</span></span> <span data-ttu-id="fc616-187">Для объекта CustomXmlPart параметр eventType может быть указан как`Office.EventType.NodeDeleted`</span><span class="sxs-lookup"><span data-stu-id="fc616-187">For a CustomXmlPart object, the eventType parameter can be specified as `Office.EventType.NodeDeleted`</span></span><!-- --><span data-ttu-id="fc616-188">, `Office.EventType.NodeInserted`</span><span class="sxs-lookup"><span data-stu-id="fc616-188"></span></span><!-- --><span data-ttu-id="fc616-189">, а`Office.EventType.NodeReplaced`</span><span class="sxs-lookup"><span data-stu-id="fc616-189">, and `Office.EventType.NodeReplaced`</span></span><!-- --><span data-ttu-id="fc616-190">.</span><span class="sxs-lookup"><span data-stu-id="fc616-190"></span></span>'
          type:
            - 'office!Office.EventType:enum'
        - id: handler
          description: '<span data-ttu-id="fc616-191">Имя обработчика, который требуется удалить.</span><span class="sxs-lookup"><span data-stu-id="fc616-191">The name of the handler to remove.</span></span>'
          type:
            - '(result: any) => void'
        - id: options
          description: '<span data-ttu-id="fc616-192">Предоставляет параметры для определения обработчика событий или обработчиков, которые удаляются.</span><span class="sxs-lookup"><span data-stu-id="fc616-192">Provides options to determine which event handler or handlers are removed.</span></span>'
          type:
            - 'office!Office.RemoveHandlerOptions:interface'
        - id: callback
          description: '<span data-ttu-id="fc616-193">Необязательно.</span><span class="sxs-lookup"><span data-stu-id="fc616-193">Optional.</span></span> <span data-ttu-id="fc616-194">Функция, вызываемая при возвращении обратного вызова, единственный параметр которой имеет тип [Office. AsyncResult](xref:office!Office.AsyncResult:interface)</span><span class="sxs-lookup"><span data-stu-id="fc616-194">A function that is invoked when the callback returns, whose only parameter is of type [Office.AsyncResult](xref:office!Office.AsyncResult:interface)</span></span><!-- --><span data-ttu-id="fc616-195">.</span><span class="sxs-lookup"><span data-stu-id="fc616-195"></span></span>'
          type:
            - 'office!Office.CustomXmlPart#removeHandlerAsync~0:complex'
  - uid: 'office!Office.CustomXmlPart#removeHandlerAsync:member(2)'
    summary: <span data-ttu-id="fc616-196">Удаляет обработчик событий для указанного типа события.</span><span class="sxs-lookup"><span data-stu-id="fc616-196">Removes an event handler for the specified event type.</span></span>
    remarks: |-
      <span data-ttu-id="fc616-197">**Набор требований**: [CustomXmlParts](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#customxmlparts)</span><span class="sxs-lookup"><span data-stu-id="fc616-197">**Requirement set**: [CustomXmlParts](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#customxmlparts)</span></span>

      #### <a name="examples"></a><span data-ttu-id="fc616-198">Примеры</span><span class="sxs-lookup"><span data-stu-id="fc616-198">Examples</span></span>

      ```javascript
      function removeNodeInsertedEventHandler() {
          Office.context.document.customXmlParts.getByIdAsync(
              "{3BC85265-09D6-4205-B665-8EB239A8B9A1}",
              function (result) {
                  var xmlPart = result.value;
                  xmlPart.removeHandlerAsync(Office.EventType.DataNodeInserted, {handler:myHandler});
          });
      }
      ```
    name: 'removeHandlerAsync(eventType, handler, callback)'
    fullName: 'removeHandlerAsync(eventType, handler, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'removeHandlerAsync(eventType: Office.EventType, handler?: (result: any) => void, callback?: (result: AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: eventType
          description: '<span data-ttu-id="fc616-199">Указывает тип удаляемого события.</span><span class="sxs-lookup"><span data-stu-id="fc616-199">Specifies the type of event to remove.</span></span> <span data-ttu-id="fc616-200">Для объекта CustomXmlPart параметр eventType может быть указан как`Office.EventType.NodeDeleted`</span><span class="sxs-lookup"><span data-stu-id="fc616-200">For a CustomXmlPart object, the eventType parameter can be specified as `Office.EventType.NodeDeleted`</span></span><!-- --><span data-ttu-id="fc616-201">, `Office.EventType.NodeInserted`</span><span class="sxs-lookup"><span data-stu-id="fc616-201"></span></span><!-- --><span data-ttu-id="fc616-202">, а`Office.EventType.NodeReplaced`</span><span class="sxs-lookup"><span data-stu-id="fc616-202">, and `Office.EventType.NodeReplaced`</span></span><!-- --><span data-ttu-id="fc616-203">.</span><span class="sxs-lookup"><span data-stu-id="fc616-203"></span></span>'
          type:
            - 'office!Office.EventType:enum'
        - id: handler
          description: '<span data-ttu-id="fc616-204">Имя обработчика, который требуется удалить.</span><span class="sxs-lookup"><span data-stu-id="fc616-204">The name of the handler to remove.</span></span>'
          type:
            - '(result: any) => void'
        - id: callback
          description: '<span data-ttu-id="fc616-205">Необязательно.</span><span class="sxs-lookup"><span data-stu-id="fc616-205">Optional.</span></span> <span data-ttu-id="fc616-206">Функция, вызываемая при возвращении обратного вызова, единственный параметр которой имеет тип [Office. AsyncResult](xref:office!Office.AsyncResult:interface)</span><span class="sxs-lookup"><span data-stu-id="fc616-206">A function that is invoked when the callback returns, whose only parameter is of type [Office.AsyncResult](xref:office!Office.AsyncResult:interface)</span></span><!-- --><span data-ttu-id="fc616-207">.</span><span class="sxs-lookup"><span data-stu-id="fc616-207"></span></span>'
          type:
            - 'office!Office.CustomXmlPart#removeHandlerAsync~1:complex'
references:
  - uid: 'office!Office.EventType:enum'
    name: Office.EventType
  - uid: 'office!Office.AsyncContextOptions:interface'
    name: Office.AsyncContextOptions
  - uid: 'office!Office.CustomXmlPart#addHandlerAsync~0:complex'
    name: '(result: AsyncResult<void>) => void'
    fullName: '(result: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(result: '
        fullName: '(result: '
      - uid: 'office!Office.AsyncResult:interface'
        name: AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void
  - uid: 'office!Office.CustomXmlPart#addHandlerAsync~1:complex'
    name: '(result: AsyncResult<void>) => void'
    fullName: '(result: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(result: '
        fullName: '(result: '
      - uid: 'office!Office.AsyncResult:interface'
        name: AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void
  - uid: 'office!Office.CustomXmlPart#deleteAsync~0:complex'
    name: '(result: AsyncResult<void>) => void'
    fullName: '(result: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(result: '
        fullName: '(result: '
      - uid: 'office!Office.AsyncResult:interface'
        name: AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void
  - uid: 'office!Office.CustomXmlPart#deleteAsync~1:complex'
    name: '(result: AsyncResult<void>) => void'
    fullName: '(result: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(result: '
        fullName: '(result: '
      - uid: 'office!Office.AsyncResult:interface'
        name: AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void
  - uid: 'office!Office.CustomXmlPart#getNodesAsync~0:complex'
    name: '(result: AsyncResult<CustomXmlNode[]>) => void'
    fullName: '(result: Office.AsyncResult<Office.CustomXmlNode[]>) => void'
    spec.typeScript:
      - name: '(result: '
        fullName: '(result: '
      - uid: 'office!Office.AsyncResult:interface'
        name: AsyncResult
        fullName: Office.AsyncResult
      - name: <
        fullName: <
      - uid: 'office!Office.CustomXmlNode:interface'
        name: CustomXmlNode
        fullName: Office.CustomXmlNode
      - name: '[]>) => void'
        fullName: '[]>) => void'
  - uid: 'office!Office.CustomXmlPart#getNodesAsync~1:complex'
    name: '(result: AsyncResult<CustomXmlNode[]>) => void'
    fullName: '(result: Office.AsyncResult<Office.CustomXmlNode[]>) => void'
    spec.typeScript:
      - name: '(result: '
        fullName: '(result: '
      - uid: 'office!Office.AsyncResult:interface'
        name: AsyncResult
        fullName: Office.AsyncResult
      - name: <
        fullName: <
      - uid: 'office!Office.CustomXmlNode:interface'
        name: CustomXmlNode
        fullName: Office.CustomXmlNode
      - name: '[]>) => void'
        fullName: '[]>) => void'
  - uid: 'office!Office.CustomXmlPart#getXmlAsync~0:complex'
    name: '(result: AsyncResult<string>) => void'
    fullName: '(result: Office.AsyncResult<string>) => void'
    spec.typeScript:
      - name: '(result: '
        fullName: '(result: '
      - uid: 'office!Office.AsyncResult:interface'
        name: AsyncResult
        fullName: Office.AsyncResult
      - name: <string>) => void
        fullName: <string>) => void
  - uid: 'office!Office.CustomXmlPart#getXmlAsync~1:complex'
    name: '(result: AsyncResult<string>) => void'
    fullName: '(result: Office.AsyncResult<string>) => void'
    spec.typeScript:
      - name: '(result: '
        fullName: '(result: '
      - uid: 'office!Office.AsyncResult:interface'
        name: AsyncResult
        fullName: Office.AsyncResult
      - name: <string>) => void
        fullName: <string>) => void
  - uid: 'office!Office.CustomXmlPrefixMappings:interface'
    name: CustomXmlPrefixMappings
  - uid: 'office!Office.RemoveHandlerOptions:interface'
    name: RemoveHandlerOptions
  - uid: 'office!Office.CustomXmlPart#removeHandlerAsync~0:complex'
    name: '(result: AsyncResult<void>) => void'
    fullName: '(result: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(result: '
        fullName: '(result: '
      - uid: 'office!Office.AsyncResult:interface'
        name: AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void
  - uid: 'office!Office.CustomXmlPart#removeHandlerAsync~1:complex'
    name: '(result: AsyncResult<void>) => void'
    fullName: '(result: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(result: '
        fullName: '(result: '
      - uid: 'office!Office.AsyncResult:interface'
        name: AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void