### YamlMime:UniversalReference
ms.openlocfilehash: 8e6f1c0b95578a9182695fba84f5bc90232a9d84
ms.sourcegitcommit: b0b614f5315ab2e5c1e0ea51c687498f87684a07
ms.translationtype: MT
ms.contentlocale: ru-RU
ms.lasthandoff: 02/15/2019
ms.locfileid: "30055019"
items:
- uid: office.Office.CustomXmlNode
  summary: <span data-ttu-id="a6e20-101">Представляет XML-узел в дереве документа.</span><span class="sxs-lookup"><span data-stu-id="a6e20-101">Represents an XML node in a tree in a document.</span></span>
  remarks: >-
    <table><tr><td><span data-ttu-id="a6e20-102">Наборы требований</span><span class="sxs-lookup"><span data-stu-id="a6e20-102">Requirement Sets</span></span></td><td><span data-ttu-id="a6e20-103">CustomXmlParts</span><span class="sxs-lookup"><span data-stu-id="a6e20-103">CustomXmlParts</span></span></td></tr></table>


    <span data-ttu-id="a6e20-104">**Сведения о поддержке**</span><span class="sxs-lookup"><span data-stu-id="a6e20-104">**Support details**</span></span>


    <span data-ttu-id="a6e20-105">Прописная Y в следующей матрице указывает на то, что этот интерфейс поддерживается в соответствующем ведущем приложении Office.</span><span class="sxs-lookup"><span data-stu-id="a6e20-105">A capital Y in the following matrix indicates that this interface is supported in the corresponding Office host application.</span></span> <span data-ttu-id="a6e20-106">Пустая ячейка указывает на то, что ведущее приложение Office не поддерживает этот интерфейс.</span><span class="sxs-lookup"><span data-stu-id="a6e20-106">An empty cell indicates that the Office host application doesn't support this interface.</span></span>


    <span data-ttu-id="a6e20-107">Дополнительные сведения о требованиях к ведущему приложению и серверу Office приведены в разделе Требования к запуску надстроек [Office](https://docs.microsoft.com/office/dev/add-ins/concepts/requirements-for-running-office-add-ins)<!-- -->.</span><span class="sxs-lookup"><span data-stu-id="a6e20-107">For more information about Office host application and server requirements, see [Requirements for running Office Add-ins](https://docs.microsoft.com/office/dev/add-ins/concepts/requirements-for-running-office-add-ins)<!-- -->.</span></span>


    <span data-ttu-id="a6e20-108">*Поддерживаемые ведущие приложения на разных платформах*</span><span class="sxs-lookup"><span data-stu-id="a6e20-108">*Supported hosts, by platform*</span></span> <table> <tr><th> </th><th> <span data-ttu-id="a6e20-109">Office для компьютера с Windows</span><span class="sxs-lookup"><span data-stu-id="a6e20-109">Office for Windows desktop</span></span> </th><th> <span data-ttu-id="a6e20-110">Office Online (в браузере)</span><span class="sxs-lookup"><span data-stu-id="a6e20-110">Office Online (in browser)</span></span> </th><th> <span data-ttu-id="a6e20-111">Office for iPad</span><span class="sxs-lookup"><span data-stu-id="a6e20-111">Office for iPad</span></span> </th><th> <span data-ttu-id="a6e20-112">Office for Mac</span><span class="sxs-lookup"><span data-stu-id="a6e20-112">Office for Mac</span></span> </th></tr> <tr><td><span data-ttu-id="a6e20-113"><strong>Текстовых</strong></span><span class="sxs-lookup"><span data-stu-id="a6e20-113"><strong> Word </strong></span></span></td><td> <span data-ttu-id="a6e20-114">Да</span><span class="sxs-lookup"><span data-stu-id="a6e20-114">Y</span></span> </td><td> <span data-ttu-id="a6e20-115">Да</span><span class="sxs-lookup"><span data-stu-id="a6e20-115">Y</span></span> </td><td> <span data-ttu-id="a6e20-116">Да</span><span class="sxs-lookup"><span data-stu-id="a6e20-116">Y</span></span> </td><td> <span data-ttu-id="a6e20-117">Да</span><span class="sxs-lookup"><span data-stu-id="a6e20-117">Y</span></span> </td></tr> </table>
  name: Office.CustomXmlNode
  fullName: Office.CustomXmlNode
  langs:
  - typeScript
  type: interface
  package: office
  children:
  - office.Office.CustomXmlNode.getNodesAsync
  - office.Office.CustomXmlNode.getNodesAsync_1
  - office.Office.CustomXmlNode.getNodeValueAsync
  - office.Office.CustomXmlNode.getNodeValueAsync_1
  - office.Office.CustomXmlNode.getTextAsync
  - office.Office.CustomXmlNode.getTextAsync_1
  - office.Office.CustomXmlNode.getXmlAsync
  - office.Office.CustomXmlNode.getXmlAsync_1
  - office.Office.CustomXmlNode.setNodeValueAsync
  - office.Office.CustomXmlNode.setNodeValueAsync_1
  - office.Office.CustomXmlNode.setTextAsync
  - office.Office.CustomXmlNode.setTextAsync_1
  - office.Office.CustomXmlNode.setXmlAsync
  - office.Office.CustomXmlNode.setXmlAsync_1
  - office.Office.CustomXmlNode.baseName
  - office.Office.CustomXmlNode.namespaceUri
  - office.Office.CustomXmlNode.nodeType
- uid: office.Office.CustomXmlNode.getNodesAsync
  summary: <span data-ttu-id="a6e20-118">Возвращает узлы, связанные с выражением XPath.</span><span class="sxs-lookup"><span data-stu-id="a6e20-118">Gets the nodes associated with the XPath expression.</span></span>
  remarks: <table><tr><td><span data-ttu-id="a6e20-119">Наборы требований</span><span class="sxs-lookup"><span data-stu-id="a6e20-119">Requirement Sets</span></span></td><td><span data-ttu-id="a6e20-120">CustomXmlParts</span><span class="sxs-lookup"><span data-stu-id="a6e20-120">CustomXmlParts</span></span></td></tr></table>
  name: getNodesAsync(xPath, options, callback)
  fullName: getNodesAsync(xPath, options, callback)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getNodesAsync(xPath: string, options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<CustomXmlNode[]>) => void): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: xPath
      description: <span data-ttu-id="a6e20-121">Выражение XPath, задающее узлы, которые требуется получить.</span><span class="sxs-lookup"><span data-stu-id="a6e20-121">The XPath expression that specifies the nodes to get.</span></span> <span data-ttu-id="a6e20-122">Обязательно указывать.</span><span class="sxs-lookup"><span data-stu-id="a6e20-122">Required.</span></span>
      type:
      - string
    - id: options
      description: <span data-ttu-id="a6e20-123">Предоставляет параметр для сохранения данных контекста любого типа без изменений для использования при обратном вызове.</span><span class="sxs-lookup"><span data-stu-id="a6e20-123">Provides an option for preserving context data of any type, unchanged, for use in a callback.</span></span>
      type:
      - office.Office.AsyncContextOptions
    - id: callback
      description: <span data-ttu-id="a6e20-124">Необязательное свойство.</span><span class="sxs-lookup"><span data-stu-id="a6e20-124">Optional.</span></span> <span data-ttu-id="a6e20-125">Функция, вызываемая при возвращении обратного вызова, единственный параметр которой имеет тип [Office. AsyncResult](xref:office.Office.AsyncResult)<!-- -->.</span><span class="sxs-lookup"><span data-stu-id="a6e20-125">A function that is invoked when the callback returns, whose only parameter is of type [Office.AsyncResult](xref:office.Office.AsyncResult)<!-- -->.</span></span> <span data-ttu-id="a6e20-126">`value` Свойство Result представляет собой массив объектов CustomXmlNode, представляющих узлы, указанные выражением XPath, передаваемым в `xPath` параметр.</span><span class="sxs-lookup"><span data-stu-id="a6e20-126">The `value` property of the result is an array of CustomXmlNode objects that represent the nodes specified by the XPath expression passed to the `xPath` parameter.</span></span>
      type:
      - '(result: AsyncResult<CustomXmlNode[]>) => void'
- uid: office.Office.CustomXmlNode.getNodesAsync_1
  summary: <span data-ttu-id="a6e20-127">Возвращает узлы, связанные с выражением XPath.</span><span class="sxs-lookup"><span data-stu-id="a6e20-127">Gets the nodes associated with the XPath expression.</span></span>
  remarks: "<table><tr><td><span data-ttu-id=\"a6e20-128\">Наборы требований</span><span class=\"sxs-lookup\"><span data-stu-id=\"a6e20-128\">Requirement Sets</span></span></td><td><span data-ttu-id=\"a6e20-129\">CustomXmlParts</span><span class=\"sxs-lookup\"><span data-stu-id=\"a6e20-129\">CustomXmlParts</span></span></td></tr></table>\n#### <span data-ttu-id=\"a6e20-130\">Примеры</span><span class=\"sxs-lookup\"><span data-stu-id=\"a6e20-130\">Examples</span></span>\n\n```javascript\nfunction showXmlChildNodes() {\n    Office.context.document.customXmlParts.getByIdAsync(\n        \"{3BC85265-09D6-4205-B665-8EB239A8B9A1}\", function (result) {\n        var xmlPart = result.value;\n        xmlPart.getNodesAsync('*', function (nodeResults) {\n            for (i = 0; i < nodeResults.value.length; i++) {\n                var node = nodeResults.value[i];\n                node.getNodesAsync('*', function (nodeResults) {\n                    write(nodeResults.value.length + \" childNodes\");\n                });\n            }\n        });\n    });\n}\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n```"
  name: getNodesAsync(xPath, callback)
  fullName: getNodesAsync(xPath, callback)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getNodesAsync(xPath: string, callback?: (result: AsyncResult<CustomXmlNode[]>) => void): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: xPath
      description: <span data-ttu-id="a6e20-131">Выражение XPath, задающее узлы, которые требуется получить.</span><span class="sxs-lookup"><span data-stu-id="a6e20-131">The XPath expression that specifies the nodes to get.</span></span> <span data-ttu-id="a6e20-132">Обязательно указывать.</span><span class="sxs-lookup"><span data-stu-id="a6e20-132">Required.</span></span>
      type:
      - string
    - id: callback
      description: <span data-ttu-id="a6e20-133">Необязательное свойство.</span><span class="sxs-lookup"><span data-stu-id="a6e20-133">Optional.</span></span> <span data-ttu-id="a6e20-134">Функция, вызываемая при возвращении обратного вызова, единственный параметр которой имеет тип [Office. AsyncResult](xref:office.Office.AsyncResult)<!-- -->.</span><span class="sxs-lookup"><span data-stu-id="a6e20-134">A function that is invoked when the callback returns, whose only parameter is of type [Office.AsyncResult](xref:office.Office.AsyncResult)<!-- -->.</span></span> <span data-ttu-id="a6e20-135">`value` Свойство Result представляет собой массив объектов CustomXmlNode, представляющих узлы, указанные выражением XPath, передаваемым в `xPath` параметр.</span><span class="sxs-lookup"><span data-stu-id="a6e20-135">The `value` property of the result is an array of CustomXmlNode objects that represent the nodes specified by the XPath expression passed to the `xPath` parameter.</span></span>
      type:
      - '(result: AsyncResult<CustomXmlNode[]>) => void'
- uid: office.Office.CustomXmlNode.getNodeValueAsync
  summary: <span data-ttu-id="a6e20-136">Получает значение узла.</span><span class="sxs-lookup"><span data-stu-id="a6e20-136">Gets the node value.</span></span>
  remarks: <table><tr><td><span data-ttu-id="a6e20-137">Наборы требований</span><span class="sxs-lookup"><span data-stu-id="a6e20-137">Requirement Sets</span></span></td><td><span data-ttu-id="a6e20-138">CustomXmlParts</span><span class="sxs-lookup"><span data-stu-id="a6e20-138">CustomXmlParts</span></span></td></tr></table>
  name: getNodeValueAsync(options, callback)
  fullName: getNodeValueAsync(options, callback)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getNodeValueAsync(options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<string>) => void): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: options
      description: <span data-ttu-id="a6e20-139">Предоставляет параметр для сохранения данных контекста любого типа без изменений для использования при обратном вызове.</span><span class="sxs-lookup"><span data-stu-id="a6e20-139">Provides an option for preserving context data of any type, unchanged, for use in a callback.</span></span>
      type:
      - office.Office.AsyncContextOptions
    - id: callback
      description: <span data-ttu-id="a6e20-140">Необязательное свойство.</span><span class="sxs-lookup"><span data-stu-id="a6e20-140">Optional.</span></span> <span data-ttu-id="a6e20-141">Функция, вызываемая при возвращении обратного вызова, единственный параметр которой имеет тип [Office. AsyncResult](xref:office.Office.AsyncResult)<!-- -->.</span><span class="sxs-lookup"><span data-stu-id="a6e20-141">A function that is invoked when the callback returns, whose only parameter is of type [Office.AsyncResult](xref:office.Office.AsyncResult)<!-- -->.</span></span> <span data-ttu-id="a6e20-142">`value` Свойство Result является строкой, которая содержит значение узла, на который указывает ссылка.</span><span class="sxs-lookup"><span data-stu-id="a6e20-142">The `value` property of the result is a string that contains the value of the referenced node.</span></span>
      type:
      - '(result: AsyncResult<string>) => void'
- uid: office.Office.CustomXmlNode.getNodeValueAsync_1
  summary: <span data-ttu-id="a6e20-143">Получает значение узла.</span><span class="sxs-lookup"><span data-stu-id="a6e20-143">Gets the node value.</span></span>
  remarks: "<table><tr><td><span data-ttu-id=\"a6e20-144\">Наборы требований</span><span class=\"sxs-lookup\"><span data-stu-id=\"a6e20-144\">Requirement Sets</span></span></td><td><span data-ttu-id=\"a6e20-145\">CustomXmlParts</span><span class=\"sxs-lookup\"><span data-stu-id=\"a6e20-145\">CustomXmlParts</span></span></td></tr></table>\n#### <span data-ttu-id=\"a6e20-146\">Примеры</span><span class=\"sxs-lookup\"><span data-stu-id=\"a6e20-146\">Examples</span></span>\n\n```javascript\nfunction showXmlNodeValues() {\n    Office.context.document.customXmlParts.getByIdAsync(\n        \"{3BC85265-09D6-4205-B665-8EB239A8B9A1}\", function (result) {\n        var xmlPart = result.value;\n        xmlPart.getNodesAsync('*/*', function (nodeResults) {\n            for (i = 0; i < nodeResults.value.length; i++) {\n                var node = nodeResults.value[i];\n                node.getNodeValueAsync(function (asyncResult) {\n                    write(asyncResult.value);\n                });\n            }\n        });\n    });\n}\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n```"
  name: getNodeValueAsync(callback)
  fullName: getNodeValueAsync(callback)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getNodeValueAsync(callback?: (result: AsyncResult<string>) => void): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: callback
      description: <span data-ttu-id="a6e20-147">Необязательное свойство.</span><span class="sxs-lookup"><span data-stu-id="a6e20-147">Optional.</span></span> <span data-ttu-id="a6e20-148">Функция, вызываемая при возвращении обратного вызова, единственный параметр которой имеет тип [Office. AsyncResult](xref:office.Office.AsyncResult)<!-- -->.</span><span class="sxs-lookup"><span data-stu-id="a6e20-148">A function that is invoked when the callback returns, whose only parameter is of type [Office.AsyncResult](xref:office.Office.AsyncResult)<!-- -->.</span></span> <span data-ttu-id="a6e20-149">`value` Свойство Result является строкой, которая содержит значение узла, на который указывает ссылка.</span><span class="sxs-lookup"><span data-stu-id="a6e20-149">The `value` property of the result is a string that contains the value of the referenced node.</span></span>
      type:
      - '(result: AsyncResult<string>) => void'
- uid: office.Office.CustomXmlNode.getTextAsync
  summary: <span data-ttu-id="a6e20-150">Получает текст XML-узла в пользовательской XML-части.</span><span class="sxs-lookup"><span data-stu-id="a6e20-150">Gets the text of an XML node in a custom XML part.</span></span>
  remarks: "<table><tr><td><span data-ttu-id=\"a6e20-151\">Наборы требований</span><span class=\"sxs-lookup\"><span data-stu-id=\"a6e20-151\">Requirement Sets</span></span></td><td><span data-ttu-id=\"a6e20-152\">CustomXmlParts</span><span class=\"sxs-lookup\"><span data-stu-id=\"a6e20-152\">CustomXmlParts</span></span></td></tr></table>\n#### <span data-ttu-id=\"a6e20-153\">Примеры</span><span class=\"sxs-lookup\"><span data-stu-id=\"a6e20-153\">Examples</span></span>\n\n```javascript\n// Get the built-in core properties XML part by using its ID. This results in a call to Word.\nOffice.context.document.customXmlParts.getByIdAsync(\n    \"{6C3C8BC8-F283-45AE-878A-BAB7291924A1}\", function (getByIdAsyncResult) {\n    \n    // Access the XML part.\n    var xmlPart = getByIdAsyncResult.value;\n    \n    // Add namespaces to the namespace manager. These two calls result in two calls to Word.\n    xmlPart.namespaceManager.addNamespaceAsync(\n        'cp',\n        'http://schemas.openxmlformats.org/package/2006/metadata/core-properties',\n        function () {\n        xmlPart.namespaceManager.addNamespaceAsync(\n            'dc', \n            'http://purl.org/dc/elements/1.1/', \n            function () {\n\n            // Get XML nodes by using an Xpath expression. This results in a call to Word.\n            xmlPart.getNodesAsync(\"/cp:coreProperties/dc:title\", function (getNodesAsyncResult) {\n                \n                // Get the first node returned by using the Xpath expression. \n                var node = getNodesAsyncResult.value[0];\n                \n                // Get the text value of the node and use the asyncContext. This results in a call to Word. \n                // The results are logged to the browser console.\n                node.getTextAsync({asyncContext: \"StateNormal\"}, function (getTextAsyncResult) {\n                  console.log(\"Text of the title element = \" + getTextAsyncResult.value;\n                  console.log(\"The asyncContext value = \" + getTextAsyncResult.asyncContext;\n                });\n            });\n        });\n    });\n});\n```"
  name: getTextAsync(options, callback)
  fullName: getTextAsync(options, callback)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getTextAsync(options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<string>) => void): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: options
      description: <span data-ttu-id="a6e20-154">Предоставляет параметр для сохранения данных контекста любого типа без изменений для использования при обратном вызове.</span><span class="sxs-lookup"><span data-stu-id="a6e20-154">Provides an option for preserving context data of any type, unchanged, for use in a callback.</span></span>
      type:
      - office.Office.AsyncContextOptions
    - id: callback
      description: <span data-ttu-id="a6e20-155">Необязательное свойство.</span><span class="sxs-lookup"><span data-stu-id="a6e20-155">Optional.</span></span> <span data-ttu-id="a6e20-156">Функция, вызываемая при возвращении обратного вызова, единственный параметр которой имеет тип [Office. AsyncResult](xref:office.Office.AsyncResult)<!-- -->.</span><span class="sxs-lookup"><span data-stu-id="a6e20-156">A function that is invoked when the callback returns, whose only parameter is of type [Office.AsyncResult](xref:office.Office.AsyncResult)<!-- -->.</span></span> <span data-ttu-id="a6e20-157">`value` Свойство Result — это строка, содержащая внутренний текст узлов, на которые указывают ссылки.</span><span class="sxs-lookup"><span data-stu-id="a6e20-157">The `value` property of the result is a string that contains the inner text of the referenced nodes.</span></span>
      type:
      - '(result: AsyncResult<string>) => void'
- uid: office.Office.CustomXmlNode.getTextAsync_1
  summary: <span data-ttu-id="a6e20-158">Получает текст XML-узла в пользовательской XML-части.</span><span class="sxs-lookup"><span data-stu-id="a6e20-158">Gets the text of an XML node in a custom XML part.</span></span>
  remarks: <table><tr><td><span data-ttu-id="a6e20-159">Наборы требований</span><span class="sxs-lookup"><span data-stu-id="a6e20-159">Requirement Sets</span></span></td><td><span data-ttu-id="a6e20-160">CustomXmlParts</span><span class="sxs-lookup"><span data-stu-id="a6e20-160">CustomXmlParts</span></span></td></tr></table>
  name: getTextAsync(callback)
  fullName: getTextAsync(callback)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getTextAsync(callback?: (result: AsyncResult<string>) => void): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: callback
      description: <span data-ttu-id="a6e20-161">Необязательное свойство.</span><span class="sxs-lookup"><span data-stu-id="a6e20-161">Optional.</span></span> <span data-ttu-id="a6e20-162">Функция, вызываемая при возвращении обратного вызова, единственный параметр которой имеет тип [Office. AsyncResult](xref:office.Office.AsyncResult)<!-- -->.</span><span class="sxs-lookup"><span data-stu-id="a6e20-162">A function that is invoked when the callback returns, whose only parameter is of type [Office.AsyncResult](xref:office.Office.AsyncResult)<!-- -->.</span></span> <span data-ttu-id="a6e20-163">`value` Свойство Result — это строка, содержащая внутренний текст узлов, на которые указывают ссылки.</span><span class="sxs-lookup"><span data-stu-id="a6e20-163">The `value` property of the result is a string that contains the inner text of the referenced nodes.</span></span>
      type:
      - '(result: AsyncResult<string>) => void'
- uid: office.Office.CustomXmlNode.getXmlAsync
  summary: <span data-ttu-id="a6e20-164">Получает XML-файл узла.</span><span class="sxs-lookup"><span data-stu-id="a6e20-164">Gets the node's XML.</span></span>
  remarks: <table><tr><td><span data-ttu-id="a6e20-165">Наборы требований</span><span class="sxs-lookup"><span data-stu-id="a6e20-165">Requirement Sets</span></span></td><td><span data-ttu-id="a6e20-166">CustomXmlParts</span><span class="sxs-lookup"><span data-stu-id="a6e20-166">CustomXmlParts</span></span></td></tr></table>
  name: getXmlAsync(options, callback)
  fullName: getXmlAsync(options, callback)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getXmlAsync(options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<string>) => void): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: options
      description: <span data-ttu-id="a6e20-167">Предоставляет параметр для сохранения данных контекста любого типа без изменений для использования при обратном вызове.</span><span class="sxs-lookup"><span data-stu-id="a6e20-167">Provides an option for preserving context data of any type, unchanged, for use in a callback.</span></span>
      type:
      - office.Office.AsyncContextOptions
    - id: callback
      description: <span data-ttu-id="a6e20-168">Необязательное свойство.</span><span class="sxs-lookup"><span data-stu-id="a6e20-168">Optional.</span></span> <span data-ttu-id="a6e20-169">Функция, вызываемая при возвращении обратного вызова, единственный параметр которой имеет тип [Office. AsyncResult](xref:office.Office.AsyncResult)<!-- -->.</span><span class="sxs-lookup"><span data-stu-id="a6e20-169">A function that is invoked when the callback returns, whose only parameter is of type [Office.AsyncResult](xref:office.Office.AsyncResult)<!-- -->.</span></span> <span data-ttu-id="a6e20-170">`value` Свойство Result — это строка, содержащая XML узла, на который указывает ссылка.</span><span class="sxs-lookup"><span data-stu-id="a6e20-170">The `value` property of the result is a string that contains the XML of the referenced node.</span></span>
      type:
      - '(result: AsyncResult<string>) => void'
- uid: office.Office.CustomXmlNode.getXmlAsync_1
  summary: <span data-ttu-id="a6e20-171">Получает XML-файл узла.</span><span class="sxs-lookup"><span data-stu-id="a6e20-171">Gets the node's XML.</span></span>
  remarks: "<table><tr><td><span data-ttu-id=\"a6e20-172\">Наборы требований</span><span class=\"sxs-lookup\"><span data-stu-id=\"a6e20-172\">Requirement Sets</span></span></td><td><span data-ttu-id=\"a6e20-173\">CustomXmlParts</span><span class=\"sxs-lookup\"><span data-stu-id=\"a6e20-173\">CustomXmlParts</span></span></td></tr></table>\n#### <span data-ttu-id=\"a6e20-174\">Примеры</span><span class=\"sxs-lookup\"><span data-stu-id=\"a6e20-174\">Examples</span></span>\n\n```javascript\nfunction showXmlNodeInnerXml() {\n    Office.context.document.customXmlParts.getByIdAsync(\n        \"{3BC85265-09D6-4205-B665-8EB239A8B9A1}\", function (result) {\n        var xmlPart = result.value;\n        xmlPart.getNodesAsync('*', function (nodeResults) {\n            for (i = 0; i < nodeResults.value.length; i++) {\n                var node = nodeResults.value[i];\n                node.getXmlAsync(function (asyncResult) {\n                    write(asyncResult.value);\n                });\n            }\n        });\n    });\n}\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n```"
  name: getXmlAsync(callback)
  fullName: getXmlAsync(callback)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getXmlAsync(callback?: (result: AsyncResult<string>) => void): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: callback
      description: <span data-ttu-id="a6e20-175">Необязательное свойство.</span><span class="sxs-lookup"><span data-stu-id="a6e20-175">Optional.</span></span> <span data-ttu-id="a6e20-176">Функция, вызываемая при возвращении обратного вызова, единственный параметр которой имеет тип [Office. AsyncResult](xref:office.Office.AsyncResult)<!-- -->.</span><span class="sxs-lookup"><span data-stu-id="a6e20-176">A function that is invoked when the callback returns, whose only parameter is of type [Office.AsyncResult](xref:office.Office.AsyncResult)<!-- -->.</span></span> <span data-ttu-id="a6e20-177">`value` Свойство Result — это строка, содержащая XML узла, на который указывает ссылка.</span><span class="sxs-lookup"><span data-stu-id="a6e20-177">The `value` property of the result is a string that contains the XML of the referenced node.</span></span>
      type:
      - '(result: AsyncResult<string>) => void'
- uid: office.Office.CustomXmlNode.setNodeValueAsync
  summary: <span data-ttu-id="a6e20-178">Задает значение узла.</span><span class="sxs-lookup"><span data-stu-id="a6e20-178">Sets the node value.</span></span>
  remarks: <table><tr><td><span data-ttu-id="a6e20-179">Наборы требований</span><span class="sxs-lookup"><span data-stu-id="a6e20-179">Requirement Sets</span></span></td><td><span data-ttu-id="a6e20-180">CustomXmlParts</span><span class="sxs-lookup"><span data-stu-id="a6e20-180">CustomXmlParts</span></span></td></tr></table>
  name: setNodeValueAsync(value, options, callback)
  fullName: setNodeValueAsync(value, options, callback)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'setNodeValueAsync(value: string, options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<void>) => void): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: value
      description: <span data-ttu-id="a6e20-181">Значение, которое необходимо задать для узла.</span><span class="sxs-lookup"><span data-stu-id="a6e20-181">The value to be set on the node</span></span>
      type:
      - string
    - id: options
      description: <span data-ttu-id="a6e20-182">Предоставляет параметр для сохранения данных контекста любого типа без изменений для использования при обратном вызове.</span><span class="sxs-lookup"><span data-stu-id="a6e20-182">Provides an option for preserving context data of any type, unchanged, for use in a callback.</span></span>
      type:
      - office.Office.AsyncContextOptions
    - id: callback
      description: <span data-ttu-id="a6e20-183">Необязательное свойство.</span><span class="sxs-lookup"><span data-stu-id="a6e20-183">Optional.</span></span> <span data-ttu-id="a6e20-184">Функция, вызываемая при возвращении обратного вызова, единственный параметр которой имеет тип [Office. AsyncResult](xref:office.Office.AsyncResult)<!-- -->.</span><span class="sxs-lookup"><span data-stu-id="a6e20-184">A function that is invoked when the callback returns, whose only parameter is of type [Office.AsyncResult](xref:office.Office.AsyncResult)<!-- -->.</span></span>
      type:
      - '(result: AsyncResult<void>) => void'
- uid: office.Office.CustomXmlNode.setNodeValueAsync_1
  summary: <span data-ttu-id="a6e20-185">Задает значение узла.</span><span class="sxs-lookup"><span data-stu-id="a6e20-185">Sets the node value.</span></span>
  remarks: "<table><tr><td><span data-ttu-id=\"a6e20-186\">Наборы требований</span><span class=\"sxs-lookup\"><span data-stu-id=\"a6e20-186\">Requirement Sets</span></span></td><td><span data-ttu-id=\"a6e20-187\">CustomXmlParts</span><span class=\"sxs-lookup\"><span data-stu-id=\"a6e20-187\">CustomXmlParts</span></span></td></tr></table>\n#### <span data-ttu-id=\"a6e20-188\">Примеры</span><span class=\"sxs-lookup\"><span data-stu-id=\"a6e20-188\">Examples</span></span>\n\n```javascript\nfunction setXmlNodeValue() {\n    Office.context.document.customXmlParts.getByIdAsync(\n        \"{3BC85265-09D6-4205-B665-8EB239A8B9A1}\", function (result) {\n        var xmlPart = result.value;\n        xmlPart.getNodesAsync('*/*', function (nodeResults) {\n            for (i = 0; i < nodeResults.value.length; i++) {\n                var node = nodeResults.value[i];\n                write(node);\n                node.setNodeValueAsync(\"item number\" + i, function (result) { });\n            }\n        });\n    });\n}\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n```"
  name: setNodeValueAsync(value, callback)
  fullName: setNodeValueAsync(value, callback)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'setNodeValueAsync(value: string, callback?: (result: AsyncResult<void>) => void): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: value
      description: <span data-ttu-id="a6e20-189">Значение, которое необходимо задать для узла.</span><span class="sxs-lookup"><span data-stu-id="a6e20-189">The value to be set on the node</span></span>
      type:
      - string
    - id: callback
      description: <span data-ttu-id="a6e20-190">Необязательное свойство.</span><span class="sxs-lookup"><span data-stu-id="a6e20-190">Optional.</span></span> <span data-ttu-id="a6e20-191">Функция, вызываемая при возвращении обратного вызова, единственный параметр которой имеет тип [Office. AsyncResult](xref:office.Office.AsyncResult)<!-- -->.</span><span class="sxs-lookup"><span data-stu-id="a6e20-191">A function that is invoked when the callback returns, whose only parameter is of type [Office.AsyncResult](xref:office.Office.AsyncResult)<!-- -->.</span></span>
      type:
      - '(result: AsyncResult<void>) => void'
- uid: office.Office.CustomXmlNode.setTextAsync
  summary: <span data-ttu-id="a6e20-192">Асинхронно задает текст XML-узла в настраиваемой XML-части.</span><span class="sxs-lookup"><span data-stu-id="a6e20-192">Asynchronously sets the text of an XML node in a custom XML part.</span></span>
  remarks: "<table> <tr><td><span data-ttu-id=\"a6e20-193\">Узлы</span><span class=\"sxs-lookup\"><span data-stu-id=\"a6e20-193\">Hosts</span></span></td><td><span data-ttu-id=\"a6e20-194\">Word</span><span class=\"sxs-lookup\"><span data-stu-id=\"a6e20-194\">Word</span></span></td></tr> <tr><td><span data-ttu-id=\"a6e20-195\">Наборы требований</span><span class=\"sxs-lookup\"><span data-stu-id=\"a6e20-195\">Requirement Sets</span></span></td><td><span data-ttu-id=\"a6e20-196\">CustomXmlParts</span><span class=\"sxs-lookup\"><span data-stu-id=\"a6e20-196\">CustomXmlParts</span></span></td></tr> </table>\n#### <span data-ttu-id=\"a6e20-197\">Примеры</span><span class=\"sxs-lookup\"><span data-stu-id=\"a6e20-197\">Examples</span></span>\n\n```javascript\n// Learn how to set the text value of a node in a custom XML part from the following example.\n\n// Get the built-in core properties XML part by using its ID. This results in a call to Word.\nOffice.context.document.customXmlParts.getByIdAsync(\n    \"{6C3C8BC8-F283-45AE-878A-BAB7291924A1}\",\n    function (getByIdAsyncResult) {\n    \n    // Access the XML part.\n    var xmlPart = getByIdAsyncResult.value;\n    \n    // Add namespaces to the namespace manager. These two calls result in two calls to Word.\n    xmlPart.namespaceManager.addNamespaceAsync(\n        'cp', \n        'http://schemas.openxmlformats.org/package/2006/metadata/core-properties', \n        function () {\n        xmlPart.namespaceManager.addNamespaceAsync(\n            'dc', \n            'http://purl.org/dc/elements/1.1/', \n            function () {\n\n            // Get XML nodes by using an Xpath expression. This results in a call to the host.\n            xmlPart.getNodesAsync(\"/cp:coreProperties/dc:subject\", function (getNodesAsyncResult) {\n                \n                // Get the first node returned by using the Xpath expression.\n                // This will be the subject element in this example.\n                var subjectNode = getNodesAsyncResult.value[0];\n                \n                // Set the text value of the subject node and use the asyncContext. \n                // This results in a call to the host.  The results are logged to the browser console.\n                subjectNode.setTextAsync(\n                    \"newSubject\", \n                    {asyncContext: \"StateNormal\"}, \n                    function (setTextAsyncResult) {\n                        console.log(\"The status of the call: \" + setTextAsyncResult.status);\n                        console.log(\"The asyncContext value = \" + setTextAsyncResult.asyncContext);\n                });\n            });\n        });\n    });\n});\n```"
  name: setTextAsync(text, options, callback)
  fullName: setTextAsync(text, options, callback)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'setTextAsync(text: string, options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<void>) => void): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: text
      description: <span data-ttu-id="a6e20-p114">Обязательный параметр. Текстовое значение XML-узла.</span><span class="sxs-lookup"><span data-stu-id="a6e20-p114">Required. The text value of the XML node.</span></span>
      type:
      - string
    - id: options
      description: <span data-ttu-id="a6e20-200">Предоставляет параметр для сохранения данных контекста любого типа без изменений для использования при обратном вызове.</span><span class="sxs-lookup"><span data-stu-id="a6e20-200">Provides an option for preserving context data of any type, unchanged, for use in a callback.</span></span>
      type:
      - office.Office.AsyncContextOptions
    - id: callback
      description: <span data-ttu-id="a6e20-201">Необязательное свойство.</span><span class="sxs-lookup"><span data-stu-id="a6e20-201">Optional.</span></span> <span data-ttu-id="a6e20-202">Функция, вызываемая при возвращении обратного вызова, единственный параметр которой имеет тип [Office. AsyncResult](xref:office.Office.AsyncResult)<!-- -->.</span><span class="sxs-lookup"><span data-stu-id="a6e20-202">A function that is invoked when the callback returns, whose only parameter is of type [Office.AsyncResult](xref:office.Office.AsyncResult)<!-- -->.</span></span>
      type:
      - '(result: AsyncResult<void>) => void'
- uid: office.Office.CustomXmlNode.setTextAsync_1
  summary: <span data-ttu-id="a6e20-203">Асинхронно задает текст XML-узла в настраиваемой XML-части.</span><span class="sxs-lookup"><span data-stu-id="a6e20-203">Asynchronously sets the text of an XML node in a custom XML part.</span></span>
  remarks: <table> <tr><td><span data-ttu-id="a6e20-204">Узлы</span><span class="sxs-lookup"><span data-stu-id="a6e20-204">Hosts</span></span></td><td><span data-ttu-id="a6e20-205">Word</span><span class="sxs-lookup"><span data-stu-id="a6e20-205">Word</span></span></td></tr> <tr><td><span data-ttu-id="a6e20-206">Наборы требований</span><span class="sxs-lookup"><span data-stu-id="a6e20-206">Requirement Sets</span></span></td><td><span data-ttu-id="a6e20-207">CustomXmlParts</span><span class="sxs-lookup"><span data-stu-id="a6e20-207">CustomXmlParts</span></span></td></tr> </table>
  name: setTextAsync(text, callback)
  fullName: setTextAsync(text, callback)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'setTextAsync(text: string, callback?: (result: AsyncResult<void>) => void): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: text
      description: <span data-ttu-id="a6e20-p116">Обязательный параметр. Текстовое значение XML-узла.</span><span class="sxs-lookup"><span data-stu-id="a6e20-p116">Required. The text value of the XML node.</span></span>
      type:
      - string
    - id: callback
      description: <span data-ttu-id="a6e20-210">Необязательное свойство.</span><span class="sxs-lookup"><span data-stu-id="a6e20-210">Optional.</span></span> <span data-ttu-id="a6e20-211">Функция, вызываемая при возвращении обратного вызова, единственный параметр которой имеет тип [Office. AsyncResult](xref:office.Office.AsyncResult)<!-- -->.</span><span class="sxs-lookup"><span data-stu-id="a6e20-211">A function that is invoked when the callback returns, whose only parameter is of type [Office.AsyncResult](xref:office.Office.AsyncResult)<!-- -->.</span></span>
      type:
      - '(result: AsyncResult<void>) => void'
- uid: office.Office.CustomXmlNode.setXmlAsync
  summary: <span data-ttu-id="a6e20-212">Задает XML-файл узла.</span><span class="sxs-lookup"><span data-stu-id="a6e20-212">Sets the node XML.</span></span>
  remarks: >-
    <table><tr><td><span data-ttu-id="a6e20-213">Наборы требований</span><span class="sxs-lookup"><span data-stu-id="a6e20-213">Requirement Sets</span></span></td><td><span data-ttu-id="a6e20-214">CustomXmlParts</span><span class="sxs-lookup"><span data-stu-id="a6e20-214">CustomXmlParts</span></span></td></tr></table>

    #### <span data-ttu-id="a6e20-215">Примеры</span><span class="sxs-lookup"><span data-stu-id="a6e20-215">Examples</span></span>


    ```javascript

    function setXmlNodeInnerXml() {
        Office.context.document.customXmlParts.getByIdAsync(
            "{3BC85265-09D6-4205-B665-8EB239A8B9A1}", function (result) {
            var xmlPart = result.value;
            xmlPart.getNodesAsync('*', function (nodeResults) {
                for (i = 0; i < nodeResults.value.length; i++) {
                    var node = nodeResults.value[i];
                    node.setXmlAsync("<childNode>" + i + "</childNode>");
                }
            });
        });
    }

    ```
  name: setXmlAsync(xml, options, callback)
  fullName: setXmlAsync(xml, options, callback)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'setXmlAsync(xml: string, options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<void>) => void): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: xml
      description: <span data-ttu-id="a6e20-216">XML-код, который необходимо задать для узла.</span><span class="sxs-lookup"><span data-stu-id="a6e20-216">The XML to be set on the node</span></span>
      type:
      - string
    - id: options
      description: <span data-ttu-id="a6e20-217">Предоставляет параметр для сохранения данных контекста любого типа без изменений для использования при обратном вызове.</span><span class="sxs-lookup"><span data-stu-id="a6e20-217">Provides an option for preserving context data of any type, unchanged, for use in a callback.</span></span>
      type:
      - office.Office.AsyncContextOptions
    - id: callback
      description: <span data-ttu-id="a6e20-218">Необязательное свойство.</span><span class="sxs-lookup"><span data-stu-id="a6e20-218">Optional.</span></span> <span data-ttu-id="a6e20-219">Функция, вызываемая при возвращении обратного вызова, единственный параметр которой имеет тип [Office. AsyncResult](xref:office.Office.AsyncResult)<!-- -->.</span><span class="sxs-lookup"><span data-stu-id="a6e20-219">A function that is invoked when the callback returns, whose only parameter is of type [Office.AsyncResult](xref:office.Office.AsyncResult)<!-- -->.</span></span>
      type:
      - '(result: AsyncResult<void>) => void'
- uid: office.Office.CustomXmlNode.setXmlAsync_1
  summary: <span data-ttu-id="a6e20-220">Задает XML-файл узла.</span><span class="sxs-lookup"><span data-stu-id="a6e20-220">Sets the node XML.</span></span>
  remarks: <table><tr><td><span data-ttu-id="a6e20-221">Наборы требований</span><span class="sxs-lookup"><span data-stu-id="a6e20-221">Requirement Sets</span></span></td><td><span data-ttu-id="a6e20-222">CustomXmlParts</span><span class="sxs-lookup"><span data-stu-id="a6e20-222">CustomXmlParts</span></span></td></tr></table>
  name: setXmlAsync(xml, callback)
  fullName: setXmlAsync(xml, callback)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'setXmlAsync(xml: string, callback?: (result: AsyncResult<void>) => void): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: xml
      description: <span data-ttu-id="a6e20-223">XML-код, который необходимо задать для узла.</span><span class="sxs-lookup"><span data-stu-id="a6e20-223">The XML to be set on the node</span></span>
      type:
      - string
    - id: callback
      description: <span data-ttu-id="a6e20-224">Необязательное свойство.</span><span class="sxs-lookup"><span data-stu-id="a6e20-224">Optional.</span></span> <span data-ttu-id="a6e20-225">Функция, вызываемая при возвращении обратного вызова, единственный параметр которой имеет тип [Office. AsyncResult](xref:office.Office.AsyncResult)<!-- -->.</span><span class="sxs-lookup"><span data-stu-id="a6e20-225">A function that is invoked when the callback returns, whose only parameter is of type [Office.AsyncResult](xref:office.Office.AsyncResult)<!-- -->.</span></span>
      type:
      - '(result: AsyncResult<void>) => void'
- uid: office.Office.CustomXmlNode.baseName
  summary: <span data-ttu-id="a6e20-226">Получает базовое имя узла без префикса пространства имен (если оно существует).</span><span class="sxs-lookup"><span data-stu-id="a6e20-226">Gets the base name of the node without the namespace prefix, if one exists.</span></span>
  remarks: "<table><tr><td><span data-ttu-id=\"a6e20-227\">Наборы требований</span><span class=\"sxs-lookup\"><span data-stu-id=\"a6e20-227\">Requirement Sets</span></span></td><td><span data-ttu-id=\"a6e20-228\">CustomXmlParts</span><span class=\"sxs-lookup\"><span data-stu-id=\"a6e20-228\">CustomXmlParts</span></span></td></tr></table>\n#### <span data-ttu-id=\"a6e20-229\">Примеры</span><span class=\"sxs-lookup\"><span data-stu-id=\"a6e20-229\">Examples</span></span>\n\n```javascript\nfunction showXmlNodeBaseNames() {\n    Office.context.document.customXmlParts.getByIdAsync(\n        \"{3BC85265-09D6-4205-B665-8EB239A8B9A1}\", function (result) {\n        var xmlPart = result.value;\n        xmlPart.getNodesAsync('*/*', function (nodeResults) {\n            for (i = 0; i < nodeResults.value.length; i++) {\n                var node = nodeResults.value[i];\n                write(node.baseName);\n            }\n        });\n    });\n}\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n```"
  name: baseName
  fullName: baseName
  langs:
  - typeScript
  type: property
  syntax:
    content: 'baseName: string;'
    return:
      type:
      - string
- uid: office.Office.CustomXmlNode.namespaceUri
  summary: <span data-ttu-id="a6e20-230">Получает GUID строки CustomXMLPart.</span><span class="sxs-lookup"><span data-stu-id="a6e20-230">Retrieves the string GUID of the CustomXMLPart.</span></span>
  remarks: "<table><tr><td><span data-ttu-id=\"a6e20-231\">Наборы требований</span><span class=\"sxs-lookup\"><span data-stu-id=\"a6e20-231\">Requirement Sets</span></span></td><td><span data-ttu-id=\"a6e20-232\">CustomXmlParts</span><span class=\"sxs-lookup\"><span data-stu-id=\"a6e20-232\">CustomXmlParts</span></span></td></tr></table>\n#### <span data-ttu-id=\"a6e20-233\">Примеры</span><span class=\"sxs-lookup\"><span data-stu-id=\"a6e20-233\">Examples</span></span>\n\n```javascript\nfunction showXmlNamespaceUri() {\n    Office.context.document.customXmlParts.getByIdAsync(\n        \"{3BC85265-09D6-4205-B665-8EB239A8B9A1}\", function (result) {\n        var xmlPart = result.value;\n        xmlPart.getNodesAsync('*/*', function (nodeResults) {\n            for (i = 0; i < nodeResults.value.length; i++) {\n                var node = nodeResults.value[i];\n                write(node.namespaceUri);\n            }\n        });\n    });\n}\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n```"
  name: namespaceUri
  fullName: namespaceUri
  langs:
  - typeScript
  type: property
  syntax:
    content: 'namespaceUri: string;'
    return:
      type:
      - string
- uid: office.Office.CustomXmlNode.nodeType
  summary: <span data-ttu-id="a6e20-234">Получает тип CustomXMLNode.</span><span class="sxs-lookup"><span data-stu-id="a6e20-234">Gets the type of the CustomXMLNode.</span></span>
  remarks: "<table><tr><td><span data-ttu-id=\"a6e20-235\">Наборы требований</span><span class=\"sxs-lookup\"><span data-stu-id=\"a6e20-235\">Requirement Sets</span></span></td><td><span data-ttu-id=\"a6e20-236\">CustomXmlParts</span><span class=\"sxs-lookup\"><span data-stu-id=\"a6e20-236\">CustomXmlParts</span></span></td></tr></table>\n#### <span data-ttu-id=\"a6e20-237\">Примеры</span><span class=\"sxs-lookup\"><span data-stu-id=\"a6e20-237\">Examples</span></span>\n\n```javascript\nfunction showXmlNodeType() {\n    Office.context.document.customXmlParts.getByIdAsync(\n        \"{3BC85265-09D6-4205-B665-8EB239A8B9A1}\", function (result) {\n        var xmlPart = result.value;\n        xmlPart.getNodesAsync('*/*', function (nodeResults) {\n            for (i = 0; i < nodeResults.value.length; i++) {\n                var node = nodeResults.value[i];\n                write(node.nodeType);\n            }\n        });\n    });\n}\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n```"
  name: nodeType
  fullName: nodeType
  langs:
  - typeScript
  type: property
  syntax:
    content: 'nodeType: string;'
    return:
      type:
      - string
