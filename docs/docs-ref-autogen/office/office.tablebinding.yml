### YamlMime:UniversalReference
ms.openlocfilehash: f323ce2a7e2510f4309a37a7123c51dcbb36d5e4
ms.sourcegitcommit: b0b614f5315ab2e5c1e0ea51c687498f87684a07
ms.translationtype: MT
ms.contentlocale: ru-RU
ms.lasthandoff: 02/15/2019
ms.locfileid: "30055614"
items:
- uid: office.Office.TableBinding
  summary: Представляет привязку в двух измерениях строк и столбцов, при желании с заголовками.
  remarks: >-
    <table><tr><td>Наборы требований</td><td>TableBindings</td></tr></table>


    Объект `id` TableBinding наследует свойство, `type` свойство, `getDataAsync` метод и `setDataAsync` метод из объекта [Office. Binding](xref:office.Office.Binding) .


    Обратите внимание, что после создания привязки таблицы каждая новая строка, добавляемая пользователем в таблицу, автоматически включается в привязку и увеличивается значение rowCount.
  name: Office.TableBinding
  fullName: Office.TableBinding
  langs:
  - typeScript
  type: interface
  extends:
  - 'Binding '
  package: office
  children:
  - office.Office.TableBinding.addColumnsAsync
  - office.Office.TableBinding.addColumnsAsync_1
  - office.Office.TableBinding.addRowsAsync
  - office.Office.TableBinding.addRowsAsync_1
  - office.Office.TableBinding.clearFormatsAsync
  - office.Office.TableBinding.clearFormatsAsync_1
  - office.Office.TableBinding.deleteAllDataValuesAsync
  - office.Office.TableBinding.deleteAllDataValuesAsync_1
  - office.Office.TableBinding.getFormatsAsync
  - office.Office.TableBinding.getFormatsAsync_1
  - office.Office.TableBinding.setFormatsAsync
  - office.Office.TableBinding.setFormatsAsync_1
  - office.Office.TableBinding.setTableOptionsAsync
  - office.Office.TableBinding.setTableOptionsAsync_1
  - office.Office.TableBinding.columnCount
  - office.Office.TableBinding.hasHeaders
  - office.Office.TableBinding.rowCount
- uid: office.Office.TableBinding.addColumnsAsync
  summary: Добавляет указанные данные в таблицу в качестве дополнительных столбцов.
  remarks: >-
    Чтобы добавить один или несколько столбцов, указывающих значения данных и заголовков, передайте объект TableData в качестве параметра data. Чтобы добавить один или несколько столбцов, указывающих только данные, передайте массив массивов ("Matrix") в качестве параметра data.


    Успех или неудача операции addColumnsAsync является атомарной. То есть все операции Add Columns должны быть выполнены успешно или полностью откатить (и свойство AsyncResult. status, возвращенное для обратного вызова, сообщит об ошибке):


    - Каждая строка в массиве, передаваемой в качестве аргумента данных, должна иметь то же количество строк, что и обновляемая таблица. В противном случае вся операция завершится с ошибками.


    - Все строки и ячейки массива должны быть успешно добавлены в новые столбцы таблицы. Если какая-либо строка или ячейка по какой-то причине не добавляется, вся операция завершается ошибкой.


    - Если вы передаете объект TableData в качестве аргумента Data, число строк заголовков должно быть соответствующим для обновляемой таблицы.


    Дополнительная зазамечание для Excel Online: общее число ячеек в объекте TableData, переданном параметру Data, не может превышать 20 000 в отдельном вызове этого метода.


    **Сведения о поддержке**


    Заглавная буква Y в следующей матрице указывает на то, что этот метод поддерживается в соответствующем ведущем приложении Office. Пустая ячейка означает, что ведущее приложение Office не поддерживает этот метод.


    Дополнительные сведения о требованиях к ведущему приложению и серверу Office приведены в разделе Требования к запуску надстроек [Office](https://docs.microsoft.com/office/dev/add-ins/concepts/requirements-for-running-office-add-ins)<!-- -->.


    *Поддерживаемые ведущие приложения на разных платформах* <table> <tr><th> </th><th> Office для компьютера с Windows </th><th> Office Online (в браузере) </th><th> Office for iPad </th><th> Office for Mac </th></tr> <tr><td><strong>Обращения</strong></td><td> </td><td> Да </td><td> </td><td> </td></tr> <tr><td><strong>Невозможно</strong></td><td> Да </td><td> Да </td><td> Да </td><td> Да </td></tr> <tr><td><strong>Текстовых</strong></td><td> Да </td><td> Да </td><td> Да </td><td> Да </td></tr> </table>

    #### <a name="examples"></a>Примеры


    ```javascript

    // The following example adds a single column with three rows to a bound table with the id "myTable"

    // by passing a TableData object as the data argument of the addColumnsAsync method. To succeed,

    // the table being updated must have three rows.


    // Add a column to a binding of type table by passing a TableData object.

    function addColumns() {
        var myTable = new Office.TableData();
        myTable.headers = [["Cities"]];
        myTable.rows = [["Berlin"], ["Roma"], ["Tokyo"]];

        Office.context.document.bindings.getByIdAsync("myTable", function (result) {
            result.value.addColumnsAsync(myTable);
        });
    }


    // The following example adds a single column with three rows to a bound table with the id myTable

    // by passing an array of arrays ("matrix") as the data argument of the addColumnsAsync method.

    // To succeed, the table being updated must have three rows.


    // Add a column to a binding of type table by passing an array of arrays.

    function addColumns() {
        var myTable = [["Berlin"], ["Roma"], ["Tokyo"]];

        Office.context.document.bindings.getByIdAsync("myTable", function (result) {
            result.value.addColumnsAsync(myTable);
        });
    }

    ```
  name: addColumnsAsync(tableData, options, callback)
  fullName: addColumnsAsync(tableData, options, callback)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'addColumnsAsync(tableData: TableData | any[][], options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<void>) => void): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: tableData
      description: Массив массивов ("Matrix") или объект TableData, который содержит один или несколько столбцов данных для добавления в таблицу. Обязательно указывать.
      type:
      - TableData | any[][]
    - id: options
      description: Предоставляет параметр для сохранения данных контекста любого типа без изменений для использования при обратном вызове.
      type:
      - office.Office.AsyncContextOptions
    - id: callback
      description: Необязательное свойство. Функция, вызываемая при возвращении обратного вызова, единственный параметр которой имеет тип [Office. AsyncResult](xref:office.Office.AsyncResult)<!-- -->.
      type:
      - '(result: AsyncResult<void>) => void'
- uid: office.Office.TableBinding.addColumnsAsync_1
  summary: Добавляет указанные данные в таблицу в качестве дополнительных столбцов.
  remarks: >-
    Чтобы добавить один или несколько столбцов, указывающих значения данных и заголовков, передайте объект TableData в качестве параметра data. Чтобы добавить один или несколько столбцов, указывающих только данные, передайте массив массивов ("Matrix") в качестве параметра data.


    Успех или неудача операции addColumnsAsync является атомарной. То есть все операции Add Columns должны быть выполнены успешно или полностью откатить (и свойство AsyncResult. status, возвращенное для обратного вызова, сообщит об ошибке):


    - Каждая строка в массиве, передаваемой в качестве аргумента данных, должна иметь то же количество строк, что и обновляемая таблица. В противном случае вся операция завершится с ошибками.


    - Все строки и ячейки массива должны быть успешно добавлены в новые столбцы таблицы. Если какая-либо строка или ячейка по какой-то причине не добавляется, вся операция завершается ошибкой.


    - Если вы передаете объект TableData в качестве аргумента Data, число строк заголовков должно быть соответствующим для обновляемой таблицы.


    Дополнительная зазамечание для Excel Online: общее число ячеек в объекте TableData, переданном параметру Data, не может превышать 20 000 в отдельном вызове этого метода.


    **Сведения о поддержке**


    Заглавная буква Y в следующей матрице указывает на то, что этот метод поддерживается в соответствующем ведущем приложении Office. Пустая ячейка означает, что ведущее приложение Office не поддерживает этот метод.


    Дополнительные сведения о требованиях к ведущему приложению и серверу Office приведены в разделе Требования к запуску надстроек [Office](https://docs.microsoft.com/office/dev/add-ins/concepts/requirements-for-running-office-add-ins)<!-- -->.


    *Поддерживаемые ведущие приложения на разных платформах* <table> <tr><th> </th><th> Office для компьютера с Windows </th><th> Office Online (в браузере) </th><th> Office for iPad </th><th> Office for Mac </th></tr> <tr><td><strong>Обращения</strong></td><td> </td><td> Да </td><td> </td><td> </td></tr> <tr><td><strong>Невозможно</strong></td><td> Да </td><td> Да </td><td> Да </td><td> Да </td></tr> <tr><td><strong>Текстовых</strong></td><td> Да </td><td> Да </td><td> Да </td><td> Да </td></tr> </table>
  name: addColumnsAsync(tableData, callback)
  fullName: addColumnsAsync(tableData, callback)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'addColumnsAsync(tableData: TableData | any[][], callback?: (result: AsyncResult<void>) => void): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: tableData
      description: Массив массивов ("Matrix") или объект TableData, который содержит один или несколько столбцов данных для добавления в таблицу. Обязательно указывать.
      type:
      - TableData | any[][]
    - id: callback
      description: Необязательное свойство. Функция, вызываемая при возвращении обратного вызова, единственный параметр которой имеет тип [Office. AsyncResult](xref:office.Office.AsyncResult)<!-- -->.
      type:
      - '(result: AsyncResult<void>) => void'
- uid: office.Office.TableBinding.addRowsAsync
  summary: Добавляет указанные данные в таблицу в качестве дополнительных строк.
  remarks: >-
    Успех или неудача операции addRowsAsync является атомарной. То есть все операции Add Columns должны быть выполнены успешно или полностью откатить (и свойство AsyncResult. status, возвращенное для обратного вызова, сообщит об ошибке):


    - Каждая строка в массиве, передаваемой в качестве аргумента данных, должна иметь то же количество столбцов, что и обновляемая таблица. В противном случае вся операция завершится с ошибками.


    - Каждый столбец и ячейка в массиве должны успешно добавить этот столбец или ячейку в таблицу во вновь добавленных строках. Если по какой либо причине не удается задать любой из столбцов или ячеек, вся операция завершится ошибкой.


    - Если вы передаете объект TableData в качестве аргумента Data, число строк заголовков должно быть соответствующим для обновляемой таблицы.


    Дополнительная зазамечание для Excel Online: общее число ячеек в объекте TableData, переданном параметру Data, не может превышать 20 000 в отдельном вызове этого метода.


    **Сведения о поддержке**


    Заглавная буква Y в следующей матрице указывает на то, что этот метод поддерживается в соответствующем ведущем приложении Office. Пустая ячейка означает, что ведущее приложение Office не поддерживает этот метод.


    Дополнительные сведения о требованиях к ведущему приложению и серверу Office приведены в разделе Требования к запуску надстроек [Office](https://docs.microsoft.com/office/dev/add-ins/concepts/requirements-for-running-office-add-ins)<!-- -->.


    *Поддерживаемые ведущие приложения на разных платформах* <table> <tr><th> </th><th> Office для компьютера с Windows </th><th> Office Online (в браузере) </th><th> Office for iPad </th><th> Office for Mac </th></tr> <tr><td><strong>Обращения</strong></td><td> </td><td> Да </td><td> </td><td> </td></tr> <tr><td><strong>Невозможно</strong></td><td> Да </td><td> Да </td><td> Да </td><td> Да </td></tr> <tr><td><strong>Текстовых</strong></td><td> Да </td><td> Да </td><td> Да </td><td> Да </td></tr> </table>

    #### <a name="examples"></a>Примеры


    ```javascript

    function addRowsToTable() {
        Office.context.document.bindings.getByIdAsync("myBinding", function (asyncResult) {
            var binding = asyncResult.value;
            binding.addRowsAsync([["6", "k"], ["7", "j"]]);
        });
    }

    ```
  name: addRowsAsync(rows, options, callback)
  fullName: addRowsAsync(rows, options, callback)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'addRowsAsync(rows: TableData | any[][], options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<void>) => void): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: rows
      description: Массив массивов ("Matrix") или объект TableData, который содержит одну или несколько строк данных для добавления в таблицу. Обязательно указывать.
      type:
      - TableData | any[][]
    - id: options
      description: Предоставляет параметр для сохранения данных контекста любого типа без изменений для использования при обратном вызове.
      type:
      - office.Office.AsyncContextOptions
    - id: callback
      description: Необязательное свойство. Функция, вызываемая при возвращении обратного вызова, единственный параметр которой имеет тип [Office. AsyncResult](xref:office.Office.AsyncResult)<!-- -->.
      type:
      - '(result: AsyncResult<void>) => void'
- uid: office.Office.TableBinding.addRowsAsync_1
  summary: Добавляет указанные данные в таблицу в качестве дополнительных строк.
  remarks: >-
    Успех или неудача операции addRowsAsync является атомарной. То есть все операции Add Columns должны быть выполнены успешно или полностью откатить (и свойство AsyncResult. status, возвращенное для обратного вызова, сообщит об ошибке):


    - Каждая строка в массиве, передаваемой в качестве аргумента данных, должна иметь то же количество столбцов, что и обновляемая таблица. В противном случае вся операция завершится с ошибками.


    - Каждый столбец и ячейка в массиве должны успешно добавить этот столбец или ячейку в таблицу во вновь добавленных строках. Если по какой либо причине не удается задать любой из столбцов или ячеек, вся операция завершится ошибкой.


    - Если вы передаете объект TableData в качестве аргумента Data, число строк заголовков должно быть соответствующим для обновляемой таблицы.


    Дополнительная зазамечание для Excel Online: общее число ячеек в объекте TableData, переданном параметру Data, не может превышать 20 000 в отдельном вызове этого метода.


    **Сведения о поддержке**


    Заглавная буква Y в следующей матрице указывает на то, что этот метод поддерживается в соответствующем ведущем приложении Office. Пустая ячейка означает, что ведущее приложение Office не поддерживает этот метод.


    Дополнительные сведения о требованиях к ведущему приложению и серверу Office приведены в разделе Требования к запуску надстроек [Office](https://docs.microsoft.com/office/dev/add-ins/concepts/requirements-for-running-office-add-ins)<!-- -->.


    *Поддерживаемые ведущие приложения на разных платформах* <table> <tr><th> </th><th> Office для компьютера с Windows </th><th> Office Online (в браузере) </th><th> Office for iPad </th><th> Office for Mac </th></tr> <tr><td><strong>Обращения</strong></td><td> </td><td> Да </td><td> </td><td> </td></tr> <tr><td><strong>Невозможно</strong></td><td> Да </td><td> Да </td><td> Да </td><td> Да </td></tr> <tr><td><strong>Текстовых</strong></td><td> Да </td><td> Да </td><td> Да </td><td> Да </td></tr> </table>
  name: addRowsAsync(rows, callback)
  fullName: addRowsAsync(rows, callback)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'addRowsAsync(rows: TableData | any[][], callback?: (result: AsyncResult<void>) => void): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: rows
      description: Массив массивов ("Matrix") или объект TableData, который содержит одну или несколько строк данных для добавления в таблицу. Обязательно указывать.
      type:
      - TableData | any[][]
    - id: callback
      description: Необязательное свойство. Функция, вызываемая при возвращении обратного вызова, единственный параметр которой имеет тип [Office. AsyncResult](xref:office.Office.AsyncResult)<!-- -->.
      type:
      - '(result: AsyncResult<void>) => void'
- uid: office.Office.TableBinding.clearFormatsAsync
  summary: Очищает форматирование в привязанной таблице.
  remarks: >-
    Более подробную информацию можно узнать [в статье Format Tables in надстроек для Excel](https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-tables#format-a-table) .


    **Сведения о поддержке**


    Заглавная буква Y в следующей матрице указывает на то, что этот метод поддерживается в соответствующем ведущем приложении Office. Пустая ячейка означает, что ведущее приложение Office не поддерживает этот метод.


    Дополнительные сведения о требованиях к ведущему приложению и серверу Office приведены в разделе Требования к запуску надстроек [Office](https://docs.microsoft.com/office/dev/add-ins/concepts/requirements-for-running-office-add-ins)<!-- -->.


    *Поддерживаемые ведущие приложения на разных платформах* <table> <tr><th> </th><th> Office для компьютера с Windows </th><th> Office Online (в браузере) </th><th> Office for iPad </th><th> Office for Mac </th></tr> <tr><td><strong>Невозможно</strong></td><td> Да </td><td> Да </td><td> Да </td><td> Да </td></tr> </table>

    #### <a name="examples"></a>Примеры


    ```javascript

    // The following example shows how to clear the formatting of the bound table with an ID of "myBinding":

    Office.select("bindings#myBinding").clearFormatsAsync();

    ```
  name: clearFormatsAsync(options, callback)
  fullName: clearFormatsAsync(options, callback)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'clearFormatsAsync(options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<void>) => void): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: options
      description: Предоставляет параметр для сохранения данных контекста любого типа без изменений для использования при обратном вызове.
      type:
      - office.Office.AsyncContextOptions
    - id: callback
      description: Необязательное свойство. Функция, вызываемая при возвращении обратного вызова, единственный параметр которой имеет тип [Office. AsyncResult](xref:office.Office.AsyncResult)<!-- -->.
      type:
      - '(result: AsyncResult<void>) => void'
- uid: office.Office.TableBinding.clearFormatsAsync_1
  summary: Очищает форматирование в привязанной таблице.
  remarks: >-
    Более подробную информацию можно узнать [в статье Format Tables in надстроек для Excel](https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-tables#format-a-table) .


    **Сведения о поддержке**


    Заглавная буква Y в следующей матрице указывает на то, что этот метод поддерживается в соответствующем ведущем приложении Office. Пустая ячейка означает, что ведущее приложение Office не поддерживает этот метод.


    Дополнительные сведения о требованиях к ведущему приложению и серверу Office приведены в разделе Требования к запуску надстроек [Office](https://docs.microsoft.com/office/dev/add-ins/concepts/requirements-for-running-office-add-ins)<!-- -->.


    *Поддерживаемые ведущие приложения на разных платформах* <table> <tr><th> </th><th> Office для компьютера с Windows </th><th> Office Online (в браузере) </th><th> Office for iPad </th><th> Office for Mac </th></tr> <tr><td><strong>Невозможно</strong></td><td> Да </td><td> Да </td><td> Да </td><td> Да </td></tr> </table>
  name: clearFormatsAsync(callback)
  fullName: clearFormatsAsync(callback)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'clearFormatsAsync(callback?: (result: AsyncResult<void>) => void): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: callback
      description: Необязательное свойство. Функция, вызываемая при возвращении обратного вызова, единственный параметр которой имеет тип [Office. AsyncResult](xref:office.Office.AsyncResult)<!-- -->.
      type:
      - '(result: AsyncResult<void>) => void'
- uid: office.Office.TableBinding.deleteAllDataValuesAsync
  summary: Удаляет из таблицы все строки и их значения, кроме строк заголовка; сдвиг зависит от ведущего приложения.
  remarks: >-
    В Excel, если в таблице нет строки заголовка, этот метод удалит всю таблицу.


    **Сведения о поддержке**


    Заглавная буква Y в следующей матрице указывает на то, что этот метод поддерживается в соответствующем ведущем приложении Office. Пустая ячейка означает, что ведущее приложение Office не поддерживает этот метод.


    Дополнительные сведения о требованиях к ведущему приложению и серверу Office приведены в разделе Требования к запуску надстроек [Office](https://docs.microsoft.com/office/dev/add-ins/concepts/requirements-for-running-office-add-ins)<!-- -->.


    *Поддерживаемые ведущие приложения на разных платформах* <table> <tr><th> </th><th> Office для компьютера с Windows </th><th> Office Online (в браузере) </th><th> Office for iPad </th><th> Office for Mac </th></tr> <tr><td><strong>Обращения</strong></td><td> </td><td> Да </td><td> </td><td> </td></tr> <tr><td><strong>Невозможно</strong></td><td> Да </td><td> Да </td><td> Да </td><td> Да </td></tr> <tr><td><strong>Текстовых</strong></td><td> Да </td><td> Да </td><td> Да </td><td> Да </td></tr> </table>

    #### <a name="examples"></a>Примеры


    ```javascript

    function deleteAllRowsFromTable() {
        Office.context.document.bindings.getByIdAsync("myBinding", function (asyncResult) {
            var binding = asyncResult.value;
            binding.deleteAllDataValuesAsync();
        });
    }

    ```
  name: deleteAllDataValuesAsync(options, callback)
  fullName: deleteAllDataValuesAsync(options, callback)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'deleteAllDataValuesAsync(options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<void>) => void): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: options
      description: Предоставляет параметр для сохранения данных контекста любого типа без изменений для использования при обратном вызове.
      type:
      - office.Office.AsyncContextOptions
    - id: callback
      description: Необязательное свойство. Функция, вызываемая при возвращении обратного вызова, единственный параметр которой имеет тип [Office. AsyncResult](xref:office.Office.AsyncResult)<!-- -->.
      type:
      - '(result: AsyncResult<void>) => void'
- uid: office.Office.TableBinding.deleteAllDataValuesAsync_1
  summary: Удаляет из таблицы все строки и их значения, кроме строк заголовка; сдвиг зависит от ведущего приложения.
  remarks: >-
    В Excel, если в таблице нет строки заголовка, этот метод удалит всю таблицу.


    **Сведения о поддержке**


    Заглавная буква Y в следующей матрице указывает на то, что этот метод поддерживается в соответствующем ведущем приложении Office. Пустая ячейка означает, что ведущее приложение Office не поддерживает этот метод.


    Дополнительные сведения о требованиях к ведущему приложению и серверу Office приведены в разделе Требования к запуску надстроек [Office](https://docs.microsoft.com/office/dev/add-ins/concepts/requirements-for-running-office-add-ins)<!-- -->.


    *Поддерживаемые ведущие приложения на разных платформах* <table> <tr><th> </th><th> Office для компьютера с Windows </th><th> Office Online (в браузере) </th><th> Office for iPad </th><th> Office for Mac </th></tr> <tr><td><strong>Обращения</strong></td><td> </td><td> Да </td><td> </td><td> </td></tr> <tr><td><strong>Невозможно</strong></td><td> Да </td><td> Да </td><td> Да </td><td> Да </td></tr> <tr><td><strong>Текстовых</strong></td><td> Да </td><td> Да </td><td> Да </td><td> Да </td></tr> </table>
  name: deleteAllDataValuesAsync(callback)
  fullName: deleteAllDataValuesAsync(callback)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'deleteAllDataValuesAsync(callback?: (result: AsyncResult<void>) => void): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: callback
      description: Необязательное свойство. Функция, вызываемая при возвращении обратного вызова, единственный параметр которой имеет тип [Office. AsyncResult](xref:office.Office.AsyncResult)<!-- -->.
      type:
      - '(result: AsyncResult<void>) => void'
- uid: office.Office.TableBinding.getFormatsAsync
  summary: Получает форматирование указанных элементов в таблице.
  remarks: >-
    **Возвращаемая структура формата**


    Каждый объект JavaScript в массиве возвращаемых значений имеет следующую форму:`{cells:{ cell_range }, format:{ format_definition }}`


    `cells:` Свойство указывает диапазон, который необходимо отформатировать, используя одно из следующих значений:


    **Поддерживаемые диапазоны в свойстве ячеек**


    <table> <tr> <th>параметры диапазона ячеек</th> <th>Описание</th> </tr> <tr> <td>`{row: n}`</td> <td>Задает диапазон данных, отменяющий строку данных с отсчетом от нуля в таблице.</td> </tr> <tr> <td>`{column: n}`</td> <td>Задает диапазон данных, который является столбцом n (от нуля) данных в таблице.</td> </tr> <tr> <td>`{row: i, column: j}`</td> <td>Задает одну ячейку, которая является i-ой строкой и столбцом j таблицы.</td> </tr> <tr> <td>`Office.Table.All`</td> <td>Указывает всю таблицу, включая заголовки столбцов, данные и итоги (если они имеются)</td> </tr> <tr> <td>`Office.Table.Data`</td> <td>Указывает только данные в таблице (без заголовков и итогов).</td> </tr> <tr> <td>`Office.Table.Headers`</td> <td>Указывает только строку заголовков.</td> </tr> </table>


    `format:` Свойство указывает значения, соответствующие подмножеству параметров, доступных в диалоговом окне "Формат ячеек" в Excel (щелкните правой кнопкой &gt; мыши формат ячеек или &gt; ячеек &gt; формата основного формата).
  name: getFormatsAsync(cellReference, formats, options, callback)
  fullName: getFormatsAsync(cellReference, formats, options, callback)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getFormatsAsync(cellReference?: any, formats?: any[], options?: Office.AsyncContextOptions, callback?: (result: AsyncResult< ({ cells: any, format: any})[]>) => void): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: cellReference
      description: Литерал объекта, содержащий пары "имя — значение", указывающие диапазон ячеек, из которых нужно получить форматирование.
      type:
      - any
    - id: formats
      description: Массив, указывающий свойства формата, которые требуется получить.
      type:
      - any[]
    - id: options
      description: Предоставляет параметр для сохранения данных контекста любого типа без изменений для использования при обратном вызове.
      type:
      - office.Office.AsyncContextOptions
    - id: callback
      description: Необязательное свойство. Функция, вызываемая при возвращении обратного вызова, единственный параметр которой имеет тип [Office. AsyncResult](xref:office.Office.AsyncResult)<!-- -->. Результатом `value` этого свойства является массив, содержащий один или несколько объектов JavaScript, указывающих форматирование соответствующих ячеек.
      type:
      - '(result: AsyncResult< ({ cells: any, format: any})[]>) => void'
- uid: office.Office.TableBinding.getFormatsAsync_1
  summary: Получает форматирование указанных элементов в таблице.
  remarks: >-
    **Возвращаемая структура формата**


    Каждый объект JavaScript в массиве возвращаемых значений имеет следующую форму:`{cells:{ cell_range }, format:{ format_definition }}`


    `cells:` Свойство указывает диапазон, который необходимо отформатировать, используя одно из следующих значений:


    **Поддерживаемые диапазоны в свойстве ячеек**


    <table> <tr> <th>параметры диапазона ячеек</th> <th>Описание</th> </tr> <tr> <td>`{row: n}`</td> <td>Задает диапазон данных, отменяющий строку данных с отсчетом от нуля в таблице.</td> </tr> <tr> <td>`{column: n}`</td> <td>Задает диапазон данных, который является столбцом n (от нуля) данных в таблице.</td> </tr> <tr> <td>`{row: i, column: j}`</td> <td>Задает одну ячейку, которая является i-ой строкой и столбцом j таблицы.</td> </tr> <tr> <td>`Office.Table.All`</td> <td>Указывает всю таблицу, включая заголовки столбцов, данные и итоги (если они имеются)</td> </tr> <tr> <td>`Office.Table.Data`</td> <td>Указывает только данные в таблице (без заголовков и итогов).</td> </tr> <tr> <td>`Office.Table.Headers`</td> <td>Указывает только строку заголовков.</td> </tr> </table>


    `format:` Свойство указывает значения, соответствующие подмножеству параметров, доступных в диалоговом окне "Формат ячеек" в Excel (щелкните правой кнопкой &gt; мыши формат ячеек или &gt; ячеек &gt; формата основного формата).
  name: getFormatsAsync(cellReference, formats, callback)
  fullName: getFormatsAsync(cellReference, formats, callback)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getFormatsAsync(cellReference?: any, formats?: any[], callback?: (result: AsyncResult< ({ cells: any, format: any})[]>) => void): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: cellReference
      description: Литерал объекта, содержащий пары "имя — значение", указывающие диапазон ячеек, из которых нужно получить форматирование.
      type:
      - any
    - id: formats
      description: Массив, указывающий свойства формата, которые требуется получить.
      type:
      - any[]
    - id: callback
      description: Необязательное свойство. Функция, вызываемая при возвращении обратного вызова, единственный параметр которой имеет тип [Office. AsyncResult](xref:office.Office.AsyncResult)<!-- -->. Результатом `value` этого свойства является массив, содержащий один или несколько объектов JavaScript, указывающих форматирование соответствующих ячеек.
      type:
      - '(result: AsyncResult< ({ cells: any, format: any})[]>) => void'
- uid: office.Office.TableBinding.setFormatsAsync
  summary: Задает форматирование для указанных элементов и данных в таблице.
  remarks: "**Указание параметра cellFormat**\n\nИспользуйте параметр cellFormat, чтобы задать или изменить значения форматирования ячейки, такие как ширина, высота, шрифт, фон, выравнивание и т. д. Значение, передаваемое в качестве параметра cellFormat, представляет собой массив, содержащий список из одного или нескольких объектов JavaScript, которые указывают, какие ячейки необходимо`cells:`<!-- -->назначить () и форматы`format:`<!-- -->() для применения к ним.\n\nКаждый объект JavaScript в массиве cellFormat имеет следующую форму:`{cells:{ cell_range }, format:{ format_definition }}`\n\n`cells:` Свойство указывает диапазон, который необходимо отформатировать, используя одно из следующих значений:\n\n**Поддерживаемые диапазоны в свойстве ячеек**\n\n<table> <tr> <th>параметры диапазона ячеек</th> <th>Описание</th> </tr> <tr> <td>`{row: n}`</td> <td>Задает диапазон данных, отменяющий строку данных с отсчетом от нуля в таблице.</td> </tr> <tr> <td>`{column: n}`</td> <td>Задает диапазон данных, который является столбцом n (от нуля) данных в таблице.</td> </tr> <tr> <td>`{row: i, column: j}`</td> <td>Задает одну ячейку, которая является i-ой строкой и столбцом j таблицы.</td> </tr> <tr> <td>`Office.Table.All`</td> <td>Указывает всю таблицу, включая заголовки столбцов, данные и итоги (если они имеются)</td> </tr> <tr> <td>`Office.Table.Data`</td> <td>Указывает только данные в таблице (без заголовков и итогов).</td> </tr> <tr> <td>`Office.Table.Headers`</td> <td>Указывает только строку заголовков.</td> </tr> </table>\n\n`format:` Свойство указывает значения, соответствующие подмножеству параметров, доступных в диалоговом окне \"Формат ячеек\" в Excel (щелкните правой кнопкой &gt; мыши формат ячеек или &gt; ячеек &gt; формата основного формата).\n\nЗначение `format:` свойства задается в виде списка из одной или нескольких пар \"имя — значение свойства\" в литерале объекта JavaScript. Имя свойства указывает имя свойства форматирования, которое необходимо задать, а значение указывает значение свойства. Можно указать несколько значений для определенного формата, например, цвет и размер шрифта.\n\nНиже приведены три `format:` примера значений свойств.\n\n`//Set cells: font color to green and size to 15 points.`\n\n`format: {fontColor : \"green\", fontSize : 15}`\n\n`//Set cells: border to dotted blue.`\n\n`format: {borderStyle: \"dotted\", borderColor: \"blue\"}`\n\n`//Set cells: background to red and alignment to centered.`\n\n`format: {backgroundColor: \"red\", alignHorizontal: \"center\"}`\n\nВы можете указать числовые форматы, указав в `numberFormat:` свойстве строку \"код\" в формате \"код\". Строки числового формата, которые можно указать, соответствуют параметрам, которые можно задать в Excel с помощью настраиваемой категории на вкладке Число диалогового окна Формат ячеек. В этом примере показано, как отформатировать число в виде процента с двумя десятичными разрядами:\n\n`format: {numberFormat:\"0.00%\"}`\n\nБолее подробную информацию можно узнать в статье [Создание настраиваемого числового формата](https://support.office.com/article/create-or-delete-a-custom-number-format-78f2a361-936b-4c03-8772-09fab54be7f4)<!-- -->.\n\nЧтобы задать форматирование таблиц при записи данных, используйте необязательные параметры tableOptions и cellFormat для методов `Document.setSelectedDataAsync` или `TableBinding.setDataAsync` .\n\nЗадание форматирования с использованием необязательных параметров `Document.setSelectedDataAsync` методов `TableBinding.setDataAsync` and работает только для установки форматирования при первом написании данных. Чтобы внести изменения в форматирование после записи данных, используйте следующие методы:\n\n- Чтобы обновить форматирование ячеек, например, цвет и стиль шрифта, используйте `TableBinding.setFormatsAsync` метод (этот метод).\n\n- Чтобы обновить параметры таблицы, такие как чередующиеся строки и кнопки фильтра, используйте `TableBinding.setTableOptions` метод.\n\n- Чтобы очистить форматирование, используйте `TableBinding.clearFormats` метод.\n\nДополнительные сведения и примеры приведены в статье [Форматирование таблиц в надстройках для Excel](https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-tables#format-a-table)<!-- -->.\n\n**Сведения о поддержке**\n\nЗаглавная буква Y в следующей матрице указывает на то, что этот метод поддерживается в соответствующем ведущем приложении Office. Пустая ячейка означает, что ведущее приложение Office не поддерживает этот метод.\n\nДополнительные сведения о требованиях к ведущему приложению и серверу Office приведены в разделе Требования к запуску надстроек [Office](https://docs.microsoft.com/office/dev/add-ins/concepts/requirements-for-running-office-add-ins)<!-- -->.\n\n*Поддерживаемые ведущие приложения на разных платформах* <table> <tr><th> </th><th> Office для компьютера с Windows </th><th> Office Online (в браузере) </th><th> Office for iPad </th><th> Office for Mac </th></tr> <tr><td><strong>Невозможно</strong></td><td> Да </td><td> Да </td><td> Да </td><td> Да </td></tr> </table>\n#### <a name=\"examples\"></a>Примеры\n\n```javascript\n// Specifying a single target\n// The following example shows a cellFormat value that sets the font color of the header row to red.\nOffice.select(\"bindings#myBinding\").setFormatsAsync(\n    [{cells: Office.Table.Headers, format: {fontColor: \"red\"}}], \n    function (asyncResult){});\n\n// Specifying multiple targets\n// The setFormatsAsync method can support formatting multiple targets within the bound table in a \n// single function call. To do that, you pass a list of objects in the cellFormat array \n// for each target that you want to format.\n// For example, the following line of code will set the font color of the first row yellow, \n// and the fourth cell in the third row to have a white border and bold text.\nOffice.select(\"bindings#myBinding\").setFormatsAsync(\n    [{cells: {row: 1}, format: {fontColor: \"yellow\"}}, \n        {cells: {row: 3, column: 4}, format: {borderColor: \"white\", fontStyle: \"bold\"}}], \n    function (asyncResult){});\n\n// Additional remarks for Excel Online\n// The number of formatting groups passed to the cellFormat parameter can't exceed 100. \n// A single formatting group consists of a set of formatting applied to a specified range of cells. \n// For example, the following call passes two formatting groups to cellFormat.\nOffice.select(\"bindings#myBinding\").setFormatsAsync(\n    [{cells: {row: 1}, format: {fontColor: \"yellow\"}}, \n        {cells: {row: 3, column: 4}, format: {borderColor: \"white\", fontStyle: \"bold\"}}], \n    function (asyncResult){});\n```"
  name: setFormatsAsync(cellFormat, options, callback)
  fullName: setFormatsAsync(cellFormat, options, callback)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'setFormatsAsync(cellFormat: any[], options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<void>) => void): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: cellFormat
      description: Массив, содержащий один или несколько объектов JavaScript, которые указывают, к каким ячейкам следует относить целевой объект, и форматирование, которое необходимо применить к ним.
      type:
      - any[]
    - id: options
      description: Предоставляет параметр для сохранения данных контекста любого типа без изменений для использования при обратном вызове.
      type:
      - office.Office.AsyncContextOptions
    - id: callback
      description: Необязательное свойство. Функция, вызываемая при возвращении обратного вызова, единственный параметр которой имеет тип [Office. AsyncResult](xref:office.Office.AsyncResult)<!-- -->.
      type:
      - '(result: AsyncResult<void>) => void'
- uid: office.Office.TableBinding.setFormatsAsync_1
  summary: Задает форматирование для указанных элементов и данных в таблице.
  remarks: >-
    **Указание параметра cellFormat**


    Используйте параметр cellFormat, чтобы задать или изменить значения форматирования ячейки, такие как ширина, высота, шрифт, фон, выравнивание и т. д. Значение, передаваемое в качестве параметра cellFormat, представляет собой массив, содержащий список из одного или нескольких объектов JavaScript, которые указывают, какие ячейки необходимо`cells:`<!-- -->назначить () и форматы`format:`<!-- -->() для применения к ним.


    Каждый объект JavaScript в массиве cellFormat имеет следующую форму:`{cells:{ cell_range }, format:{ format_definition }}`


    `cells:` Свойство указывает диапазон, который необходимо отформатировать, используя одно из следующих значений:


    **Поддерживаемые диапазоны в свойстве ячеек**


    <table> <tr> <th>параметры диапазона ячеек</th> <th>Описание</th> </tr> <tr> <td>`{row: n}`</td> <td>Задает диапазон данных, отменяющий строку данных с отсчетом от нуля в таблице.</td> </tr> <tr> <td>`{column: n}`</td> <td>Задает диапазон данных, который является столбцом n (от нуля) данных в таблице.</td> </tr> <tr> <td>`{row: i, column: j}`</td> <td>Задает одну ячейку, которая является i-ой строкой и столбцом j таблицы.</td> </tr> <tr> <td>`Office.Table.All`</td> <td>Указывает всю таблицу, включая заголовки столбцов, данные и итоги (если они имеются)</td> </tr> <tr> <td>`Office.Table.Data`</td> <td>Указывает только данные в таблице (без заголовков и итогов).</td> </tr> <tr> <td>`Office.Table.Headers`</td> <td>Указывает только строку заголовков.</td> </tr> </table>


    `format:` Свойство указывает значения, соответствующие подмножеству параметров, доступных в диалоговом окне "Формат ячеек" в Excel (щелкните правой кнопкой &gt; мыши формат ячеек или &gt; ячеек &gt; формата основного формата).


    Значение `format:` свойства задается в виде списка из одной или нескольких пар "имя — значение свойства" в литерале объекта JavaScript. Имя свойства указывает имя свойства форматирования, которое необходимо задать, а значение указывает значение свойства. Можно указать несколько значений для определенного формата, например, цвет и размер шрифта.


    Ниже приведены три `format:` примера значений свойств.


    `//Set cells: font color to green and size to 15 points.`


    `format: {fontColor : "green", fontSize : 15}`


    `//Set cells: border to dotted blue.`


    `format: {borderStyle: "dotted", borderColor: "blue"}`


    `//Set cells: background to red and alignment to centered.`


    `format: {backgroundColor: "red", alignHorizontal: "center"}`


    Вы можете указать числовые форматы, указав в `numberFormat:` свойстве строку "код" в формате "код". Строки числового формата, которые можно указать, соответствуют параметрам, которые можно задать в Excel с помощью настраиваемой категории на вкладке Число диалогового окна Формат ячеек. В этом примере показано, как отформатировать число в виде процента с двумя десятичными разрядами:


    `format: {numberFormat:"0.00%"}`


    Более подробную информацию можно узнать в статье [Создание настраиваемого числового формата](https://support.office.com/article/create-or-delete-a-custom-number-format-78f2a361-936b-4c03-8772-09fab54be7f4)<!-- -->.


    Чтобы задать форматирование таблиц при записи данных, используйте необязательные параметры tableOptions и cellFormat для методов `Document.setSelectedDataAsync` или `TableBinding.setDataAsync` .


    Задание форматирования с использованием необязательных параметров `Document.setSelectedDataAsync` методов `TableBinding.setDataAsync` and работает только для установки форматирования при первом написании данных. Чтобы внести изменения в форматирование после записи данных, используйте следующие методы:


    - Чтобы обновить форматирование ячеек, например, цвет и стиль шрифта, используйте `TableBinding.setFormatsAsync` метод (этот метод).


    - Чтобы обновить параметры таблицы, такие как чередующиеся строки и кнопки фильтра, используйте `TableBinding.setTableOptions` метод.


    - Чтобы очистить форматирование, используйте `TableBinding.clearFormats` метод.


    Дополнительные сведения и примеры приведены в статье [Форматирование таблиц в надстройках для Excel](https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-tables#format-a-table)<!-- -->.


    **Сведения о поддержке**


    Заглавная буква Y в следующей матрице указывает на то, что этот метод поддерживается в соответствующем ведущем приложении Office. Пустая ячейка означает, что ведущее приложение Office не поддерживает этот метод.


    Дополнительные сведения о требованиях к ведущему приложению и серверу Office приведены в разделе Требования к запуску надстроек [Office](https://docs.microsoft.com/office/dev/add-ins/concepts/requirements-for-running-office-add-ins)<!-- -->.


    *Поддерживаемые ведущие приложения на разных платформах* <table> <tr><th> </th><th> Office для компьютера с Windows </th><th> Office Online (в браузере) </th><th> Office for iPad </th><th> Office for Mac </th></tr> <tr><td><strong>Невозможно</strong></td><td> Да </td><td> Да </td><td> Да </td><td> Да </td></tr> </table>
  name: setFormatsAsync(cellFormat, callback)
  fullName: setFormatsAsync(cellFormat, callback)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'setFormatsAsync(cellFormat: any[], callback?: (result: AsyncResult<void>) => void): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: cellFormat
      description: Массив, содержащий один или несколько объектов JavaScript, которые указывают, к каким ячейкам следует относить целевой объект, и форматирование, которое необходимо применить к ним.
      type:
      - any[]
    - id: callback
      description: Необязательное свойство. Функция, вызываемая при возвращении обратного вызова, единственный параметр которой имеет тип [Office. AsyncResult](xref:office.Office.AsyncResult)<!-- -->.
      type:
      - '(result: AsyncResult<void>) => void'
- uid: office.Office.TableBinding.setTableOptionsAsync
  summary: Обновляет параметры форматирования привязанной таблицы.
  remarks: "<table> <tr><td>Узлы</td><td>Excel</td></tr> <tr><td>Наборы требований</td><td>Не в наборе</td></tr> </table>\n\nВ функции обратного вызова, переданной в метод goToByIdAsync, можно использовать свойства объекта AsyncResult, чтобы получить следующие сведения.\n\n<table> <tr> <th>Свойство</th> <th>Применение</th> </tr> <tr> <td>AsyncResult.value</td> <td>Всегда возвращает значение undefine, так как данные или объекты, которые можно получить при задании форматов, отсутствуют.</td> </tr> <tr> <td>AsyncResult.status</td> <td>Определяет, удалось ли выполнить операцию.</td> </tr> <tr> <td>AsyncResult.error</td> <td>Получает доступ к объекту Error, который содержит сведения об ошибке, если операция завершилась неудачно.</td> </tr> <tr> <td>AsyncResult.asyncContext</td> <td>Определяемый пользователем элемент любого типа, который возвращается в объекте AsyncResult без изменения.</td> </tr> </table>\n\n**Сведения о поддержке**\n\nЗаглавная буква Y в следующей матрице указывает на то, что этот метод поддерживается в соответствующем ведущем приложении Office. Пустая ячейка означает, что ведущее приложение Office не поддерживает этот метод.\n\nДополнительные сведения о требованиях к ведущему приложению и серверу Office приведены в разделе Требования к запуску надстроек [Office](https://docs.microsoft.com/office/dev/add-ins/concepts/requirements-for-running-office-add-ins)<!-- -->.\n\n*Поддерживаемые ведущие приложения на разных платформах* <table> <tr><th> </th><th> Office для компьютера с Windows </th><th> Office Online (в браузере) </th><th> Office for iPad </th><th> Office for Mac </th></tr> <tr><td><strong>Невозможно</strong></td><td> Да </td><td> Да </td><td> Да </td><td> Да </td></tr> </table>\n#### <a name=\"examples\"></a>Примеры\n\n```javascript\n// The following example shows how to:\n// 1. Create an object literal that specifies the table formatting options to update on the bound table.\n// 2. Call setTableOptions on a previously bound table (with an id of myBinding) passing the object\n//    with formatting setting as the tableOptions parameter.\nfunction updateTableFormatting(){\n    var tableOptions = {bandedRows: true, filterButton: false, style: \"TableStyleMedium3\"}; \n\n    Office.select(\"bindings#myBinding\").setTableOptionsAsync(tableOptions, function(asyncResult){});\n}\n```"
  name: setTableOptionsAsync(tableOptions, options, callback)
  fullName: setTableOptionsAsync(tableOptions, options, callback)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'setTableOptionsAsync(tableOptions: any, options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<void>) => void): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: tableOptions
      description: Литерал объекта, содержащий список пар "имя — значение свойства", которые определяют применяемые параметры таблицы.
      type:
      - any
    - id: options
      description: Предоставляет параметр для сохранения данных контекста любого типа без изменений для использования при обратном вызове.
      type:
      - office.Office.AsyncContextOptions
    - id: callback
      description: Необязательное свойство. Функция, вызываемая при возвращении обратного вызова, единственный параметр которой имеет тип [Office. AsyncResult](xref:office.Office.AsyncResult)<!-- -->.
      type:
      - '(result: AsyncResult<void>) => void'
- uid: office.Office.TableBinding.setTableOptionsAsync_1
  summary: Обновляет параметры форматирования привязанной таблицы.
  remarks: >-
    <table> <tr><td>Узлы</td><td>Excel</td></tr> <tr><td>Наборы требований</td><td>Не в наборе</td></tr> </table>


    В функции обратного вызова, переданной в метод goToByIdAsync, можно использовать свойства объекта AsyncResult, чтобы получить следующие сведения.


    <table> <tr> <th>Свойство</th> <th>Применение</th> </tr> <tr> <td>AsyncResult.value</td> <td>Всегда возвращает значение undefine, так как данные или объекты, которые можно получить при задании форматов, отсутствуют.</td> </tr> <tr> <td>AsyncResult.status</td> <td>Определяет, удалось ли выполнить операцию.</td> </tr> <tr> <td>AsyncResult.error</td> <td>Получает доступ к объекту Error, который содержит сведения об ошибке, если операция завершилась неудачно.</td> </tr> <tr> <td>AsyncResult.asyncContext</td> <td>Определяемый пользователем элемент любого типа, который возвращается в объекте AsyncResult без изменения.</td> </tr> </table>


    **Заглавная буква Y в следующей матрице указывает на то, что этот метод поддерживается в соответствующем ведущем приложении Office.**


    Заглавная буква Y в следующей матрице указывает на то, что этот метод поддерживается в соответствующем ведущем приложении Office. Пустая ячейка означает, что ведущее приложение Office не поддерживает этот метод.


    Дополнительные сведения о требованиях к ведущему приложению и серверу Office приведены в разделе Требования к запуску надстроек [Office](https://docs.microsoft.com/office/dev/add-ins/concepts/requirements-for-running-office-add-ins)<!-- -->.


    *Поддерживаемые ведущие приложения на разных платформах* <table> <tr><th> </th><th> Office для компьютера с Windows </th><th> Office Online (в браузере) </th><th> Office for iPad </th><th> Office for Mac </th></tr> <tr><td><strong>Невозможно</strong></td><td> Да </td><td> Да </td><td> Да </td><td> Да </td></tr> </table>
  name: setTableOptionsAsync(tableOptions, callback)
  fullName: setTableOptionsAsync(tableOptions, callback)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'setTableOptionsAsync(tableOptions: any, callback?: (result: AsyncResult<void>) => void): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: tableOptions
      description: Литерал объекта, содержащий список пар "имя — значение свойства", которые определяют применяемые параметры таблицы.
      type:
      - any
    - id: callback
      description: Необязательное свойство. Функция, вызываемая при возвращении обратного вызова, единственный параметр которой имеет тип [Office. AsyncResult](xref:office.Office.AsyncResult)<!-- -->.
      type:
      - '(result: AsyncResult<void>) => void'
- uid: office.Office.TableBinding.columnCount
  summary: Получает количество столбцов в TableBinding в виде целого значения.
  remarks: "**Сведения о поддержке**\n\nЗаглавная буква Y в следующей матрице указывает на то, что это свойство поддерживается в соответствующем ведущем приложении Office. Пустая ячейка означает, что ведущее приложение Office не поддерживает это свойство.\n\nДополнительные сведения о требованиях к ведущему приложению и серверу Office приведены в разделе Требования к запуску надстроек [Office](https://docs.microsoft.com/office/dev/add-ins/concepts/requirements-for-running-office-add-ins)<!-- -->.\n\n*Поддерживаемые ведущие приложения на разных платформах* <table> <tr><th> </th><th> Office для компьютера с Windows </th><th> Office Online (в браузере) </th><th> Office for iPad </th><th> Office for Mac </th></tr> <tr><td><strong>Обращения</strong></td><td> </td><td> Да </td><td> </td><td> </td></tr> <tr><td><strong>Невозможно</strong></td><td> Да </td><td> Да </td><td> Да </td><td> Да </td></tr> <tr><td><strong>Текстовых</strong></td><td> Да </td><td> Да </td><td> Да </td><td> Да </td></tr> </table>\n#### <a name=\"examples\"></a>Примеры\n\n```javascript\nfunction showBindingColumnCount() {\n    Office.context.document.bindings.getByIdAsync(\"myBinding\", function (asyncResult) {\n        write(\"Column: \" + asyncResult.value.columnCount);\n    });\n}\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n```"
  name: columnCount
  fullName: columnCount
  langs:
  - typeScript
  type: property
  syntax:
    content: 'columnCount: number;'
    return:
      type:
      - number
- uid: office.Office.TableBinding.hasHeaders
  summary: Значение true, если в таблице есть заголовки; в противном случае — false.
  remarks: "**Сведения о поддержке**\n\nЗаглавная буква Y в следующей матрице указывает на то, что это свойство поддерживается в соответствующем ведущем приложении Office. Пустая ячейка означает, что ведущее приложение Office не поддерживает это свойство.\n\nДополнительные сведения о требованиях к ведущему приложению и серверу Office приведены в разделе Требования к запуску надстроек [Office](https://docs.microsoft.com/office/dev/add-ins/concepts/requirements-for-running-office-add-ins)<!-- -->.\n\n*Поддерживаемые ведущие приложения на разных платформах* <table> <tr><th> </th><th> Office для компьютера с Windows </th><th> Office Online (в браузере) </th><th> Office for iPad </th><th> Office for Mac </th></tr> <tr><td><strong>Обращения</strong></td><td> </td><td> Да </td><td> </td><td> </td></tr> <tr><td><strong>Невозможно</strong></td><td> Да </td><td> Да </td><td> Да </td><td> Да </td></tr> <tr><td><strong>Текстовых</strong></td><td> Да </td><td> Да </td><td> Да </td><td> Да </td></tr> </table>\n#### <a name=\"examples\"></a>Примеры\n\n```javascript\nfunction showBindingHasHeaders() {\n    Office.context.document.bindings.getByIdAsync(\"myBinding\", function (asyncResult) {\n        write(\"Binding has headers: \" + asyncResult.value.hasHeaders);\n    });\n}\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n```"
  name: hasHeaders
  fullName: hasHeaders
  langs:
  - typeScript
  type: property
  syntax:
    content: 'hasHeaders: boolean;'
    return:
      type:
      - boolean
- uid: office.Office.TableBinding.rowCount
  summary: Получает количество строк в TableBinding в виде целого значения.
  remarks: "Когда вы вставляете пустую таблицу, выбрав одну строку в Excel 2013 и Excel Online (с помощью таблицы на вкладке Вставка), ведущие приложения Office создают одну строку заголовков, а затем одну пустую строку. Тем не менее, если скрипт надстройки создает привязку для новой вставленной таблицы (например, с помощью метода [Office. Bindings](xref:office.Office.Bindings)<!-- -->. addFromSelectionAsync), а затем проверяет значение свойства rowCount, возвращаемое значение будет отличаться в зависимости от того, открыта ли электронная таблица в Excel 2013 или Excel Online.\n\n- В Excel на рабочем столе количество строк будет возвращать значение 0 (не учитывается пустая строка, следующая после заголовков).\n\n- В Excel Online rowCount возвращает значение 1 (учитывается пустая строка, следующая после заголовков).\n\nВы можете обойти эту разницу в скрипте, проверив значение rowCount = = 1, и если да, то проверяет, содержит ли строка все пустые строки.\n\nВ контентных надстройках для Access из соображений производительности свойство rowCount всегда возвращает значение – 1.\n\n**Сведения о поддержке**\n\nЗаглавная буква Y в следующей матрице указывает на то, что это свойство поддерживается в соответствующем ведущем приложении Office. Пустая ячейка означает, что ведущее приложение Office не поддерживает это свойство.\n\nДополнительные сведения о требованиях к ведущему приложению и серверу Office приведены в разделе Требования к запуску надстроек [Office](https://docs.microsoft.com/office/dev/add-ins/concepts/requirements-for-running-office-add-ins)<!-- -->.\n\n*Поддерживаемые ведущие приложения на разных платформах* <table> <tr><th> </th><th> Office для компьютера с Windows </th><th> Office Online (в браузере) </th><th> Office for iPad </th><th> Office for Mac </th></tr> <tr><td><strong>Обращения</strong></td><td> </td><td> Да </td><td> </td><td> </td></tr> <tr><td><strong>Невозможно</strong></td><td> Да </td><td> Да </td><td> Да </td><td> Да </td></tr> <tr><td><strong>Текстовых</strong></td><td> Да </td><td> Да </td><td> Да </td><td> Да </td></tr> </table>\n#### <a name=\"examples\"></a>Примеры\n\n```javascript\nfunction showBindingRowCount() {\n    Office.context.document.bindings.getByIdAsync(\"myBinding\", function (asyncResult) {\n        write(\"Rows: \" + asyncResult.value.rowCount);\n    });\n}\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n```"
  name: rowCount
  fullName: rowCount
  langs:
  - typeScript
  type: property
  syntax:
    content: 'rowCount: number;'
    return:
      type:
      - number
