### YamlMime:UniversalReference
items:
  - uid: office.OfficeExtension.LoadOption
    summary: '<span data-ttu-id="d7e96-101">Указывает, какие свойства объекта должны загружаться.</span><span class="sxs-lookup"><span data-stu-id="d7e96-101">Specifies which properties of an object should be loaded.</span></span> <span data-ttu-id="d7e96-102">Эта загрузка происходит при выполнении метода Sync ().</span><span class="sxs-lookup"><span data-stu-id="d7e96-102">This load happens when the sync() method is executed.</span></span> <span data-ttu-id="d7e96-103">Это синхронизирует состояния между объектами Office и соответствующими прокси-объектами JavaScript.</span><span class="sxs-lookup"><span data-stu-id="d7e96-103">This synchronizes the states between Office objects and corresponding JavaScript proxy objects.</span></span>'
    remarks: |-
      <span data-ttu-id="d7e96-104">Для Word предпочтительным способом указания свойств и сведений о разбиении на страницы является использование строкового литерала.</span><span class="sxs-lookup"><span data-stu-id="d7e96-104">For Word, the preferred method for specifying the properties and paging information is by using a string literal.</span></span> <span data-ttu-id="d7e96-105">В первых двух примерах показан предпочтительный способ запроса свойств размера текста и шрифта для абзацев в коллекции абзацев:</span><span class="sxs-lookup"><span data-stu-id="d7e96-105">The first two examples show the preferred way to request the text and font size properties for paragraphs in a paragraph collection:</span></span>

      `context.load(paragraphs, 'text, font/size');`

      `paragraphs.load('text, font/size');`

      <span data-ttu-id="d7e96-106">Вот аналогичный пример с использованием нотации объектов (включающий подкачку):</span><span class="sxs-lookup"><span data-stu-id="d7e96-106">Here is a similar example using object notation (includes paging):</span></span>

      `context.load(paragraphs, {select: 'text, font/size', expand: 'font', top: 50, skip: 0});`

      `paragraphs.load({select: 'text, font/size', expand: 'font', top: 50, skip: 0});`

      <span data-ttu-id="d7e96-107">Обратите внимание, что если не задать определенные свойства объекта шрифта в инструкцию select, инструкция expand сама по себе означает, что загружаются все свойства шрифта.</span><span class="sxs-lookup"><span data-stu-id="d7e96-107">Note that if we don't specify the specific properties on the font object in the select statement, the expand statement by itself would indicate that all of the font properties are loaded.</span></span>

      #### <a name="examples"></a><span data-ttu-id="d7e96-108">Примеры</span><span class="sxs-lookup"><span data-stu-id="d7e96-108">Examples</span></span>

      ```javascript
      // This example shows how to get the paragraphs in the Word document
      // along with their text and font size properties.

      // Run a batch operation against the Word object model.
      Word.run(function (context) {
          // Create a proxy object for the paragraphs collection.
          var paragraphs = context.document.body.paragraphs;

          // Queue a commmand to load the text and font properties.
          // It is best practice to always specify the property set.
          // Otherwise, all properties are returned on the object.
          context.load(paragraphs, 'text, font/size');

          // Synchronize the document state by executing the queued commands,
          // and return a promise to indicate task completion.
          return context.sync().then(function () {
              // Insert code that works with the paragraphs loaded by context.load().
          })
      })
      .catch(function (error) {
          console.log('Error: ' + JSON.stringify(error));
          if (error instanceof OfficeExtension.Error) {
              console.log('Debug info: ' + JSON.stringify(error.debugInfo));
          }
      });
      ```
    name: OfficeExtension.LoadOption
    fullName: OfficeExtension.LoadOption
    langs:
      - typeScript
    type: interface
    package: office
    children:
      - office.OfficeExtension.LoadOption.expand
      - office.OfficeExtension.LoadOption.select
      - office.OfficeExtension.LoadOption.skip
      - office.OfficeExtension.LoadOption.top
  - uid: office.OfficeExtension.LoadOption.expand
    summary: '<span data-ttu-id="d7e96-109">Разделенная запятыми строка или массив строк, указывающая свойства навигации, которые необходимо загрузить.</span><span class="sxs-lookup"><span data-stu-id="d7e96-109">A comma-delimited string, or array of strings, that specifies the navigation properties to load.</span></span>'
    name: expand
    fullName: expand
    langs:
      - typeScript
    type: property
    syntax:
      content: 'expand?: string | string[];'
      return:
        type:
          - 'string | string[]'
  - uid: office.OfficeExtension.LoadOption.select
    summary: '<span data-ttu-id="d7e96-110">Строка, разделенная запятыми, или массив строк, указывающая свойства для загрузки.</span><span class="sxs-lookup"><span data-stu-id="d7e96-110">A comma-delimited string, or array of strings, that specifies the properties to load.</span></span>'
    name: select
    fullName: select
    langs:
      - typeScript
    type: property
    syntax:
      content: 'select?: string | string[];'
      return:
        type:
          - 'string | string[]'
  - uid: office.OfficeExtension.LoadOption.skip
    summary: '<span data-ttu-id="d7e96-111">Можно использовать только для типов коллекций.</span><span class="sxs-lookup"><span data-stu-id="d7e96-111">Only usable on collection types.</span></span> <span data-ttu-id="d7e96-112">Указывает количество элементов в коллекции, которые должны быть пропущены и не включены в результат.</span><span class="sxs-lookup"><span data-stu-id="d7e96-112">Specifies the number of items in the collection that are to be skipped and not included in the result.</span></span> <span data-ttu-id="d7e96-113">Если указан параметр Top, результирующий набор начнется после пропуска указанного числа элементов.</span><span class="sxs-lookup"><span data-stu-id="d7e96-113">If top is specified, the result set will start after skipping the specified number of items.</span></span>'
    name: skip
    fullName: skip
    langs:
      - typeScript
    type: property
    syntax:
      content: 'skip?: number;'
      return:
        type:
          - number
  - uid: office.OfficeExtension.LoadOption.top
    summary: '<span data-ttu-id="d7e96-114">Можно использовать только для типов коллекций.</span><span class="sxs-lookup"><span data-stu-id="d7e96-114">Only usable on collection types.</span></span> <span data-ttu-id="d7e96-115">Указывает максимальное число элементов в коллекции, которые можно включить в результат.</span><span class="sxs-lookup"><span data-stu-id="d7e96-115">Specifies the maximum number of collection items that can be included in the result.</span></span>'
    name: top
    fullName: top
    langs:
      - typeScript
    type: property
    syntax:
      content: 'top?: number;'
      return:
        type:
          - number
        description: |-


          #### <a name="examples"></a><span data-ttu-id="d7e96-116">Примеры</span><span class="sxs-lookup"><span data-stu-id="d7e96-116">Examples</span></span>

          ```javascript
          // This OneNote example shows how to get the page title and indentation level
          // of the top five pages in the current section.
          OneNote.run(function (context) {
              // Get the pages in the current section.
              var pages = context.application.getActiveSection().pages;

              // Queue a command to load the pages.           
              pages.load({ "select":"title,pageLevel", "top":5, "skip":0 });
              return context.sync()
                  .then(function() {
                      // Iterate through the collection of pages.    
                      $.each(pages.items, function(index, page) {
                          // Show some properties.
                          console.log("Page title: " + page.title);
                          console.log("Indentation level: " + page.pageLevel);
                      });
                  }).catch(function(error) {
                      console.log("Error: " + error);
                      if (error instanceof OfficeExtension.Error) {
                          console.log("Debug info: " + JSON.stringify(error.debugInfo));
                      }
                  })
              });
          ```