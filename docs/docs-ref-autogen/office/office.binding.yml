### YamlMime:UniversalReference
ms.openlocfilehash: c4c679765c2366dc8b95782f0855853d6568ed53
ms.sourcegitcommit: 262b7c417245b7b61a57d53eee33a477a722ca6e
ms.translationtype: MT
ms.contentlocale: ru-RU
ms.lasthandoff: 09/28/2018
ms.locfileid: "24051777"
items:
- uid: office.Office.Binding
  summary: <span data-ttu-id="151d9-101">Представляет привязку к разделу документа.</span><span class="sxs-lookup"><span data-stu-id="151d9-101">Represents a binding to a section of the document.</span></span>
  remarks: >-
    <table><tr><td><span data-ttu-id="151d9-102">Наборы требований</span><span class="sxs-lookup"><span data-stu-id="151d9-102">Requirement Sets</span></span></td><td><span data-ttu-id="151d9-103">MatrixBinding, TableBinding, TextBinding</span><span class="sxs-lookup"><span data-stu-id="151d9-103">MatrixBinding, TableBinding, TextBinding</span></span></td></tr></table>


    <span data-ttu-id="151d9-104">Объект Binding предоставляет функциональные возможности, которыми обладают все привязки независимо от типа.</span><span class="sxs-lookup"><span data-stu-id="151d9-104">The Binding object exposes the functionality possessed by all bindings regardless of type.</span></span>


    <span data-ttu-id="151d9-105">Объект Binding никогда не вызывается напрямую.</span><span class="sxs-lookup"><span data-stu-id="151d9-105">The Binding object is never called directly.</span></span> <span data-ttu-id="151d9-106">Класс абстрактный родительских объектов, представляющих каждый тип привязки: [Office.MatrixBinding](xref:office.Office.MatrixBinding)<!-- -->, [Office.TableBinding](xref:office.Office.TableBinding)<!-- -->, или [Office.TextBinding](xref:office.Office.TextBinding)<!-- -->.</span><span class="sxs-lookup"><span data-stu-id="151d9-106">It is the abstract parent class of the objects that represent each type of binding: [Office.MatrixBinding](xref:office.Office.MatrixBinding)<!-- -->, [Office.TableBinding](xref:office.Office.TableBinding)<!-- -->, or [Office.TextBinding](xref:office.Office.TextBinding)<!-- -->.</span></span> <span data-ttu-id="151d9-107">Все три этих объектов наследуют getDataAsync и метода setDataAsync от объекта Binding, которые позволяют вам работать с данными в привязке.</span><span class="sxs-lookup"><span data-stu-id="151d9-107">All three of these objects inherit the getDataAsync and setDataAsync methods from the Binding object that enable to you interact with the data in the binding.</span></span> <span data-ttu-id="151d9-108">Они также наследуют идентификатор и тип свойства для запросов к их значения.</span><span class="sxs-lookup"><span data-stu-id="151d9-108">They also inherit the id and type properties for querying those property values.</span></span> <span data-ttu-id="151d9-109">Кроме того MatrixBinding и TableBinding объекты предоставляют дополнительные методы для конкретных таблица и таблица функции, например подсчет числа строк и столбцов.</span><span class="sxs-lookup"><span data-stu-id="151d9-109">Additionally, the MatrixBinding and TableBinding objects expose additional methods for matrix- and table-specific features, such as counting the number of rows and columns.</span></span>


    <span data-ttu-id="151d9-110">**Сведения о поддержке**</span><span class="sxs-lookup"><span data-stu-id="151d9-110">**Support details**</span></span>


    <span data-ttu-id="151d9-111">Прописная Y в следующих матрицы указывает, что этот интерфейс поддерживается в соответствующем ведущего приложения Office.</span><span class="sxs-lookup"><span data-stu-id="151d9-111">A capital Y in the following matrix indicates that this interface is supported in the corresponding Office host application.</span></span> <span data-ttu-id="151d9-112">Пустая ячейка указывает, что ведущего приложения Office не поддерживает этот интерфейс.</span><span class="sxs-lookup"><span data-stu-id="151d9-112">An empty cell indicates that the Office host application doesn't support this interface.</span></span>


    <span data-ttu-id="151d9-113">Дополнительные сведения о требованиях к приложения и сервера узла Office можно [требования для запуска надстроек Office](https://docs.microsoft.com/office/dev/add-ins/concepts/requirements-for-running-office-add-ins)<!-- -->.</span><span class="sxs-lookup"><span data-stu-id="151d9-113">For more information about Office host application and server requirements, see [Requirements for running Office Add-ins](https://docs.microsoft.com/office/dev/add-ins/concepts/requirements-for-running-office-add-ins)<!-- -->.</span></span>


    <span data-ttu-id="151d9-114">*Поддерживаемые ведущие приложения на разных платформах*</span><span class="sxs-lookup"><span data-stu-id="151d9-114">*Supported hosts, by platform*</span></span> <table> <tr><th> </th><th> <span data-ttu-id="151d9-115">Office для компьютера с Windows</span><span class="sxs-lookup"><span data-stu-id="151d9-115">Office for Windows desktop</span></span> </th><th> <span data-ttu-id="151d9-116">Office Online (в браузере)</span><span class="sxs-lookup"><span data-stu-id="151d9-116">Office Online (in browser)</span></span> </th><th> <span data-ttu-id="151d9-117">Office для iPad</span><span class="sxs-lookup"><span data-stu-id="151d9-117">Office for iPad</span></span> </th></tr> <tr><td><span data-ttu-id="151d9-118"><strong>Access</strong></span><span class="sxs-lookup"><span data-stu-id="151d9-118"><strong> Access </strong></span></span></td><td> </td><td> <span data-ttu-id="151d9-119">Да</span><span class="sxs-lookup"><span data-stu-id="151d9-119">Y</span></span> </td><td> </td></tr> <tr><td><span data-ttu-id="151d9-120"><strong>Excel</strong></span><span class="sxs-lookup"><span data-stu-id="151d9-120"><strong> Excel </strong></span></span></td><td> <span data-ttu-id="151d9-121">Да</span><span class="sxs-lookup"><span data-stu-id="151d9-121">Y</span></span> </td><td> <span data-ttu-id="151d9-122">Да</span><span class="sxs-lookup"><span data-stu-id="151d9-122">Y</span></span> </td><td> <span data-ttu-id="151d9-123">Да</span><span class="sxs-lookup"><span data-stu-id="151d9-123">Y</span></span> </td></tr> <tr><td><span data-ttu-id="151d9-124"><strong>Word</strong></span><span class="sxs-lookup"><span data-stu-id="151d9-124"><strong> Word </strong></span></span></td><td> <span data-ttu-id="151d9-125">Да</span><span class="sxs-lookup"><span data-stu-id="151d9-125">Y</span></span> </td><td> <span data-ttu-id="151d9-126">Да</span><span class="sxs-lookup"><span data-stu-id="151d9-126">Y</span></span> </td><td> <span data-ttu-id="151d9-127">Да</span><span class="sxs-lookup"><span data-stu-id="151d9-127">Y</span></span> </td></tr> </table>
  name: Office.Binding
  fullName: office.Office.Binding
  langs:
  - typeScript
  type: interface
  package: office
  children:
  - office.Office.Binding.addHandlerAsync
  - office.Office.Binding.document
  - office.Office.Binding.getDataAsync
  - office.Office.Binding.id
  - office.Office.Binding.removeHandlerAsync
  - office.Office.Binding.setDataAsync
  - office.Office.Binding.type
- uid: office.Office.Binding.addHandlerAsync
  summary: <span data-ttu-id="151d9-128">Добавляет обработчик событий к объекту для указанного [Office.EventType](xref:office.Office.EventType)<!-- -->.</span><span class="sxs-lookup"><span data-stu-id="151d9-128">Adds an event handler to the object for the specified [Office.EventType](xref:office.Office.EventType)<!-- -->.</span></span> <span data-ttu-id="151d9-129">Поддерживаемые EventTypes, `Office.EventType.BindingDataChanged` и `Office.EventType.BindingSelectionChanged`.</span><span class="sxs-lookup"><span data-stu-id="151d9-129">Supported EventTypes are `Office.EventType.BindingDataChanged` and `Office.EventType.BindingSelectionChanged`.</span></span>
  remarks: "<span data-ttu-id=\"151d9-130\">Можно добавить несколько обработчиков событий для указанного объекта eventType, поскольку имя каждой функции обработчика событий является уникальным.</span><span class=\"sxs-lookup\"><span data-stu-id=\"151d9-130\">You can add multiple event handlers for the specified eventType as long as the name of each event handler function is unique.</span></span>\n#### <a name=\"examples\"></a><span data-ttu-id=\"151d9-131\">Примеры</span><span class=\"sxs-lookup\"><span data-stu-id=\"151d9-131\">Examples</span></span>\n\n```javascript\n// The following code sample calls the select method of the Office object to access the binding\n// with ID \"MyBinding\", and then calls the addHandlerAsync method to add a handler function \n// for the bindingDataChanged event of that binding.\nfunction addEventHandlerToBinding() {\n    Office.select(\"bindings#MyBinding\").addHandlerAsync(\n        Office.EventType.BindingDataChanged, onBindingDataChanged);\n}\n\nfunction onBindingDataChanged(eventArgs) {\n    write(\"Data has changed in binding: \" + eventArgs.binding.id);\n}\n\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n```\n```javascript\n// To add an event handler for the BindingSelectionChanged event of a binding, \n// use the addHandlerAsync method of the Binding object.\n// The event handler receives an argument of type BindingSelectionChangedEventArgs.\nfunction addEventHandlerToBinding() {\n    Office.select(\"bindings#MyBinding\").addHandlerAsync(\n        Office.EventType.BindingSelectionChanged, onBindingSelectionChanged);\n}\n\nfunction onBindingSelectionChanged(eventArgs) {\n    write(eventArgs.binding.id + \" has been selected.\");\n}\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n```"
  name: addHandlerAsync(eventType, handler, options, callback)
  fullName: office.Office.Binding.addHandlerAsync
  langs:
  - typeScript
  type: method
  syntax:
    content: 'addHandlerAsync(eventType: Office.EventType, handler: any, options?: Office.AsyncContextOptions, callback?: (result: Office.AsyncResult<void>) => void): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: eventType
      description: <span data-ttu-id="151d9-132">Тип события.</span><span class="sxs-lookup"><span data-stu-id="151d9-132">The event type.</span></span> <span data-ttu-id="151d9-133">Для привязок, он может быть `Office.EventType.BindingDataChanged` или `Office.EventType.BindingSelectionChanged`.</span><span class="sxs-lookup"><span data-stu-id="151d9-133">For bindings, it can be `Office.EventType.BindingDataChanged` or `Office.EventType.BindingSelectionChanged`.</span></span>
      type:
      - Office.EventType
    - id: handler
      description: <span data-ttu-id="151d9-134">Функцию обработчика событий для добавления, единственный параметр которой имеет тип[Office.BindingDataChangedEventArgs](xref:office.Office.BindingDataChangedEventArgs) или [Office.BindingSelectionChangedEventArgs](xref:office.Office.BindingSelectionChangedEventArgs)<!-- -->.</span><span class="sxs-lookup"><span data-stu-id="151d9-134">The event handler function to add, whose only parameter is of type[Office.BindingDataChangedEventArgs](xref:office.Office.BindingDataChangedEventArgs) or [Office.BindingSelectionChangedEventArgs](xref:office.Office.BindingSelectionChangedEventArgs)<!-- -->.</span></span>
      type:
      - any
    - id: options
      description: <span data-ttu-id="151d9-135">Предоставляет возможность сохранения данных контекста любого типа, без изменений, для использования в функции обратного вызова.</span><span class="sxs-lookup"><span data-stu-id="151d9-135">Provides an option for preserving context data of any type, unchanged, for use in a callback.</span></span>
      type:
      - office.Office.AsyncContextOptions
    - id: callback
      description: <span data-ttu-id="151d9-136">Необязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="151d9-136">Optional.</span></span> <span data-ttu-id="151d9-137">Функция, вызываемая при возвращении обратного вызова, единственный параметр которой имеет тип[Office.AsyncResult](xref:office.Office.AsyncResult)<!-- -->.</span><span class="sxs-lookup"><span data-stu-id="151d9-137">A function that is invoked when the callback returns, whose only parameter is of type[Office.AsyncResult](xref:office.Office.AsyncResult)<!-- -->.</span></span>
      type:
      - '(result: Office.AsyncResult<void>) => void'
- uid: office.Office.Binding.document
  summary: <span data-ttu-id="151d9-138">Получает объект Document, связанный с привязкой.</span><span class="sxs-lookup"><span data-stu-id="151d9-138">Get the Document object associated with the binding.</span></span>
  name: document
  fullName: office.Office.Binding.document
  langs:
  - typeScript
  type: property
  syntax:
    content: 'document: Office.Document;'
    return:
      type:
      - office.Office.Document
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"151d9-139\">Примеры</span><span class=\"sxs-lookup\"><span data-stu-id=\"151d9-139\">Examples</span></span>\n\n```javascript\nOffice.context.document.bindings.getByIdAsync(\"myBinding\", function (asyncResult) {\n    write(asyncResult.value.document.url);\n});\n\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n```"
- uid: office.Office.Binding.getDataAsync
  summary: <span data-ttu-id="151d9-140">Возвращает данные, содержащиеся в привязке.</span><span class="sxs-lookup"><span data-stu-id="151d9-140">Returns the data contained within the binding.</span></span>
  remarks: "<table><tr><td><span data-ttu-id=\"151d9-141\">Наборы требований</span><span class=\"sxs-lookup\"><span data-stu-id=\"151d9-141\">Requirement Sets</span></span></td><td><span data-ttu-id=\"151d9-142\">MatrixBindings, TableBindings, TextBindings</span><span class=\"sxs-lookup\"><span data-stu-id=\"151d9-142\">MatrixBindings, TableBindings, TextBindings</span></span></td></tr></table>\n\n<span data-ttu-id=\"151d9-143\">При вызове из MatrixBinding или TableBinding метод getDataAsync вернет подмножество значений привязки, если указаны необязательные параметры startRow, startColumn, rowCount и columnCount (задают непрерывный и допустимый диапазон).</span><span class=\"sxs-lookup\"><span data-stu-id=\"151d9-143\">When called from a MatrixBinding or TableBinding, the getDataAsync method will return a subset of the bound values if the optional startRow, startColumn, rowCount, and columnCount parameters are specified (and they specify a contiguous and valid range).</span></span>\n#### <a name=\"examples\"></a><span data-ttu-id=\"151d9-144\">Примеры</span><span class=\"sxs-lookup\"><span data-stu-id=\"151d9-144\">Examples</span></span>\n\n```javascript\nfunction showBindingData() {\n    Office.select(\"bindings#MyBinding\").getDataAsync(function (asyncResult) {\n        write(asyncResult.value)\n    });\n}\n\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n\n// There is an important difference in behavior between using the \"table\" and \"matrix\" coercionType with the\n// Binding.getDataAsync method, with respect to data formatted with header rows, as shown in the following\n// two examples. These code examples show event handler functions for the Binding.SelectionChanged event.\n\n// If you specify the \"table\" coercionType, the TableData.rows property ( result.value.rows in the following\n// code example) returns an array that contains only the body rows of the table. So, its 0th row will be the\n// first non-header row in the table.\nfunction selectionChanged(evtArgs) { \n    Office.select(\"bindings#TableTranslate\").getDataAsync(\n        { coercionType: 'table', \n          startRow: evtArgs.startRow, \n          startCol: 0, \n          rowCount: 1, \n          columnCount: 1 },  \n        function (result) { \n            if (result.status == 'succeeded') { \n                write(\"Image to find: \" + result.value.rows[0][0]); \n            } \n            else \n                write(result.error.message); \n    }); \n}     \n// Function that writes to a div with id='message' on the page. \nfunction write(message){ \n    document.getElementById('message').innerText += message; \n}\n\n// However, if you specify the \"matrix\" coercionType, result.value in the following code example returns an array\n// that contains the table header in the 0th row. If the table header contains multiple rows, then these are all\n// included in the result.value matrix as separate rows before the table body rows are included.\nfunction selectionChanged(evtArgs) { \n    Office.select(\"bindings#TableTranslate\").getDataAsync(\n        { coercionType: 'matrix', \n          startRow: evtArgs.startRow, \n          startCol: 0, \n          rowCount: 1, \n          columnCount: 1 },  \n        function (result) { \n            if (result.status == 'succeeded') { \n                write(\"Image to find: \" + result.value[1][0]); \n            } \n            else \n                write(result.error.message); \n    }); \n}     \n// Function that writes to a div with id='message' on the page. \nfunction write(message){ \n    document.getElementById('message').innerText += message; \n}\n```"
  name: getDataAsync(options, callback)
  fullName: office.Office.Binding.getDataAsync
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getDataAsync<T>(options?: GetBindingDataOptions, callback?: (result: AsyncResult<T>) => void): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: options
      description: <span data-ttu-id="151d9-145">Предоставляет параметры для получения данных в привязке.</span><span class="sxs-lookup"><span data-stu-id="151d9-145">Provides options for how to get the data in a binding.</span></span>
      type:
      - office.Office.GetBindingDataOptions
    - id: callback
      description: <span data-ttu-id="151d9-146">Необязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="151d9-146">Optional.</span></span> <span data-ttu-id="151d9-147">Функция, вызываемая при возвращении обратного вызова, единственный параметр которой имеет тип[Office.AsyncResult](xref:office.Office.AsyncResult)<!-- -->.</span><span class="sxs-lookup"><span data-stu-id="151d9-147">A function that is invoked when the callback returns, whose only parameter is of type[Office.AsyncResult](xref:office.Office.AsyncResult)<!-- -->.</span></span> <span data-ttu-id="151d9-148">`value` Свойства результата — это значения в указанную привязку.</span><span class="sxs-lookup"><span data-stu-id="151d9-148">The `value` property of the result is the values in the specified binding.</span></span> <span data-ttu-id="151d9-149">Если `coercionType` указан параметр (и вызов выполнен успешно), данные возвращаются в формате, описанном в перечислении coerciontype.</span><span class="sxs-lookup"><span data-stu-id="151d9-149">If the `coercionType` parameter is specified (and the call is successful), the data is returned in the format described in the CoercionType enumeration topic.</span></span>
      type:
      - '(result: AsyncResult<T>) => void'
- uid: office.Office.Binding.id
  summary: <span data-ttu-id="151d9-150">Строка, однозначно идентифицирует данную привязку среди привязок в одном объекте [Office.Document](xref:office.Office.Document) .</span><span class="sxs-lookup"><span data-stu-id="151d9-150">A string that uniquely identifies this binding among the bindings in the same [Office.Document](xref:office.Office.Document) object.</span></span>
  name: id
  fullName: office.Office.Binding.id
  langs:
  - typeScript
  type: property
  syntax:
    content: 'id: string;'
    return:
      type:
      - string
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"151d9-151\">Примеры</span><span class=\"sxs-lookup\"><span data-stu-id=\"151d9-151\">Examples</span></span>\n\n```javascript\nOffice.context.document.bindings.getByIdAsync(\"myBinding\", function (asyncResult) {\n    write(asyncResult.value.id);\n});\n\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n```"
- uid: office.Office.Binding.removeHandlerAsync
  summary: <span data-ttu-id="151d9-152">Удаляет указанный обработчик из привязки для указанного типа события.</span><span class="sxs-lookup"><span data-stu-id="151d9-152">Removes the specified handler from the binding for the specified event type.</span></span>
  remarks: >-
    <table><tr><td><span data-ttu-id="151d9-153">Наборы требований</span><span class="sxs-lookup"><span data-stu-id="151d9-153">Requirement Sets</span></span></td><td><span data-ttu-id="151d9-154">BindingEvents</span><span class="sxs-lookup"><span data-stu-id="151d9-154">BindingEvents</span></span></td></tr></table>

    #### <span data-ttu-id="151d9-155">Примеры</span><span class="sxs-lookup"><span data-stu-id="151d9-155">Examples</span></span>


    ```javascript

    function removeEventHandlerFromBinding() {
        Office.select("bindings#MyBinding").removeHandlerAsync(
            Office.EventType.BindingDataChanged, {handler:onBindingDataChanged});
    }

    ```
  name: removeHandlerAsync(eventType, options, callback)
  fullName: office.Office.Binding.removeHandlerAsync
  langs:
  - typeScript
  type: method
  syntax:
    content: 'removeHandlerAsync(eventType: Office.EventType, options?: RemoveHandlerOptions, callback?: (result: AsyncResult<void>) => void): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: eventType
      description: <span data-ttu-id="151d9-156">Тип события.</span><span class="sxs-lookup"><span data-stu-id="151d9-156">The event type.</span></span> <span data-ttu-id="151d9-157">Для привязок, он может быть `Office.EventType.BindingDataChanged` или `Office.EventType.BindingSelectionChanged`.</span><span class="sxs-lookup"><span data-stu-id="151d9-157">For bindings, it can be `Office.EventType.BindingDataChanged` or `Office.EventType.BindingSelectionChanged`.</span></span>
      type:
      - Office.EventType
    - id: options
      description: <span data-ttu-id="151d9-158">Содержит параметры, чтобы определить, какой обработчик событий или обработчики удаляются.</span><span class="sxs-lookup"><span data-stu-id="151d9-158">Provides options to determine which event handler or handlers are removed.</span></span>
      type:
      - office.Office.RemoveHandlerOptions
    - id: callback
      description: <span data-ttu-id="151d9-159">Необязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="151d9-159">Optional.</span></span> <span data-ttu-id="151d9-160">Функция, вызываемая при возвращении обратного вызова, единственный параметр которой имеет тип[Office.AsyncResult](xref:office.Office.AsyncResult)<!-- -->.</span><span class="sxs-lookup"><span data-stu-id="151d9-160">A function that is invoked when the callback returns, whose only parameter is of type[Office.AsyncResult](xref:office.Office.AsyncResult)<!-- -->.</span></span>
      type:
      - '(result: AsyncResult<void>) => void'
- uid: office.Office.Binding.setDataAsync
  summary: <span data-ttu-id="151d9-161">Записывает данные в привязанный раздел документа, представленный указанным объектом привязки.</span><span class="sxs-lookup"><span data-stu-id="151d9-161">Writes data to the bound section of the document represented by the specified binding object.</span></span>
  remarks: "<table><tr><td><span data-ttu-id=\"151d9-162\">Наборы требований</span><span class=\"sxs-lookup\"><span data-stu-id=\"151d9-162\">Requirement Sets</span></span></td><td><span data-ttu-id=\"151d9-163\">MatrixBindings, TableBindings, TextBindings</span><span class=\"sxs-lookup\"><span data-stu-id=\"151d9-163\">MatrixBindings, TableBindings, TextBindings</span></span></td></tr></table>\n\n<span data-ttu-id=\"151d9-164\">Значение, переданное для данных содержит данные для записи в привязке.</span><span class=\"sxs-lookup\"><span data-stu-id=\"151d9-164\">The value passed for data contains the data to be written in the binding.</span></span> <span data-ttu-id=\"151d9-165\">Вид значение, переданное определяет, что будет записан, как описано в следующей таблице.</span><span class=\"sxs-lookup\"><span data-stu-id=\"151d9-165\">The kind of value passed determines what will be written as described in the following table.</span></span>\n\n<table> <tr> <th><span data-ttu-id=\"151d9-166\">`data`значение</span><span class=\"sxs-lookup\"><span data-stu-id=\"151d9-166\">`data` value</span></span></th> <th><span data-ttu-id=\"151d9-167\">Записываемые данные</span><span class=\"sxs-lookup\"><span data-stu-id=\"151d9-167\">Data written</span></span></th> </tr> <tr> <td><span data-ttu-id=\"151d9-168\">Строка.</span><span class=\"sxs-lookup\"><span data-stu-id=\"151d9-168\">A string</span></span></td> <td><span data-ttu-id=\"151d9-169\">Будет записан обычный текст или другие данные, которые могут быть приведены к типу string.</span><span class=\"sxs-lookup\"><span data-stu-id=\"151d9-169\">Plain text or anything that can be coerced to a string will be written.</span></span></td> </tr> <tr> <td><span data-ttu-id=\"151d9-170\">Массив массивов (матрица)</span><span class=\"sxs-lookup\"><span data-stu-id=\"151d9-170\">An array of arrays (\"matrix\")</span></span></td> <td><span data-ttu-id=\"151d9-171\">Записываются табличные данные без заголовков.</span><span class=\"sxs-lookup\"><span data-stu-id=\"151d9-171\">Tabular data without headers will be written.</span></span> <span data-ttu-id=\"151d9-172\">Например, чтобы записать данные в три строки двух столбцов, вы можете передать массив следующим образом: `[[\"R1C1\", \"R1C2\"], [\"R2C1\", \"R2C2\"], [\"R3C1\", \"R3C2\"]]`.</span><span class=\"sxs-lookup\"><span data-stu-id=\"151d9-172\">For example, to write data to three rows in two columns, you can pass an array like this: `[[\"R1C1\", \"R1C2\"], [\"R2C1\", \"R2C2\"], [\"R3C1\", \"R3C2\"]]`.</span></span> <span data-ttu-id=\"151d9-173\">Для записи одного столбца из трех строк передайте такой массив: `[[\"R1C1\"], [\"R2C1\"], [\"R3C1\"]]`.</span><span class=\"sxs-lookup\"><span data-stu-id=\"151d9-173\">To write a single column of three rows, pass an array like this: `[[\"R1C1\"], [\"R2C1\"], [\"R3C1\"]]`.</span></span></td> </tr> <tr> <td><span data-ttu-id=\"151d9-174\">Объект [Office.TableData](xref:office.Office.TableData)</span><span class=\"sxs-lookup\"><span data-stu-id=\"151d9-174\">An [Office.TableData](xref:office.Office.TableData) object</span></span></td> <td><span data-ttu-id=\"151d9-175\">Записываются табличные данные с заголовками.</span><span class=\"sxs-lookup\"><span data-stu-id=\"151d9-175\">A table with headers will be written.</span></span></td> </tr> </table>\n\n<span data-ttu-id=\"151d9-176\">Кроме того, при записи данных в привязку применяются следующие действия, соответствующие конкретному приложению.</span><span class=\"sxs-lookup\"><span data-stu-id=\"151d9-176\">Additionally, these application-specific actions apply when writing data to a binding.</span></span> <span data-ttu-id=\"151d9-177\">В Word указанное значение параметра data записывается в привязку таким образом:</span><span class=\"sxs-lookup\"><span data-stu-id=\"151d9-177\">For Word, the specified data is written to the binding as follows:</span></span>\n\n<table> <tr> <th><span data-ttu-id=\"151d9-178\">`data`значение</span><span class=\"sxs-lookup\"><span data-stu-id=\"151d9-178\">`data` value</span></span></th> <th><span data-ttu-id=\"151d9-179\">Записываемые данные</span><span class=\"sxs-lookup\"><span data-stu-id=\"151d9-179\">Data written</span></span></th> </tr> <tr> <td><span data-ttu-id=\"151d9-180\">Строка.</span><span class=\"sxs-lookup\"><span data-stu-id=\"151d9-180\">A string</span></span></td> <td><span data-ttu-id=\"151d9-181\">Записывается указанный текст.</span><span class=\"sxs-lookup\"><span data-stu-id=\"151d9-181\">The specified text is written.</span></span></td> </tr> <tr> <td><span data-ttu-id=\"151d9-182\">Массив массивов («матрицу») или объект [Office.TableData](xref:office.Office.TableData)</span><span class=\"sxs-lookup\"><span data-stu-id=\"151d9-182\">An array of arrays (\"matrix\") or an [Office.TableData](xref:office.Office.TableData) object</span></span></td> <td><span data-ttu-id=\"151d9-183\">Записывается таблица Word.</span><span class=\"sxs-lookup\"><span data-stu-id=\"151d9-183\">A Word table is written.</span></span></td> </tr> <tr> <td><span data-ttu-id=\"151d9-184\">HTML</span><span class=\"sxs-lookup\"><span data-stu-id=\"151d9-184\">HTML</span></span></td> <td><span data-ttu-id=\"151d9-185\">Записывается указанный HTML-код.</span><span class=\"sxs-lookup\"><span data-stu-id=\"151d9-185\">The specified HTML is written.</span></span> <span data-ttu-id=\"151d9-186\">Если какие-либо записи недопустимый HTML-код, Word не вызовет ошибку.</span><span class=\"sxs-lookup\"><span data-stu-id=\"151d9-186\">If any of the HTML you write is invalid, Word will not raise an error.</span></span> <span data-ttu-id=\"151d9-187\">Word запишет объем HTML-код, как его можно и будет пропущен любой недопустимые данные.</span><span class=\"sxs-lookup\"><span data-stu-id=\"151d9-187\">Word will write as much of the HTML as it can and will omit any invalid data.</span></span></td> </tr> <tr> <td><span data-ttu-id=\"151d9-188\">Office Open XML (Open XML)</span><span class=\"sxs-lookup\"><span data-stu-id=\"151d9-188\">Office Open XML (\"Open XML\")</span></span></td> <td><span data-ttu-id=\"151d9-189\">Записывается указанный XML-код.</span><span class=\"sxs-lookup\"><span data-stu-id=\"151d9-189\">The specified the XML is written.</span></span></td> </tr> </table>\n\n<span data-ttu-id=\"151d9-190\">В Excel указанное значение параметра data записывается в привязку таким образом:</span><span class=\"sxs-lookup\"><span data-stu-id=\"151d9-190\">For Excel, the specified data is written to the binding as follows:</span></span>\n\n<table> <tr> <th><span data-ttu-id=\"151d9-191\">`data`значение</span><span class=\"sxs-lookup\"><span data-stu-id=\"151d9-191\">`data` value</span></span></th> <th><span data-ttu-id=\"151d9-192\">Записываемые данные</span><span class=\"sxs-lookup\"><span data-stu-id=\"151d9-192\">Data written</span></span></th> </tr> <tr> <td><span data-ttu-id=\"151d9-193\">Строка.</span><span class=\"sxs-lookup\"><span data-stu-id=\"151d9-193\">A string</span></span></td> <td><span data-ttu-id=\"151d9-194\">Указанный текст вставляется в качестве значения первой ячейки привязки. Можно также указать допустимое формулу для добавления этой формуле ячейки привязки.</span><span class=\"sxs-lookup\"><span data-stu-id=\"151d9-194\">The specified text is inserted as the value of the first bound cell.You can also specify a valid formula to add that formula to the bound cell.</span></span> <span data-ttu-id=\"151d9-195\">Например, если задать для параметра data значение `\"=SUM(A1:A5)\"`, значения в указанном диапазоне будут суммироваться.</span><span class=\"sxs-lookup\"><span data-stu-id=\"151d9-195\">For example, setting data to `\"=SUM(A1:A5)\"` will total the values in the specified range.</span></span> <span data-ttu-id=\"151d9-196\">Тем не менее, если задать формулу в связанной ячейке, добавленную (или существующую) формулу будет невозможно считать.</span><span class=\"sxs-lookup\"><span data-stu-id=\"151d9-196\">However, when you set a formula on the bound cell, after doing so, you can't read the added formula (or any pre-existing formula) from the bound cell.</span></span> <span data-ttu-id=\"151d9-197\">Если вызвать метод Binding.getDataAsync для ячейки привязки для чтения данных, этот метод может возвращать только данные, показанные в ячейке (результат формулы).</span><span class=\"sxs-lookup\"><span data-stu-id=\"151d9-197\">If you call the Binding.getDataAsync method on the bound cell to read its data, the method can return only the data displayed in the cell (the formula's result).</span></span></td> </tr> <tr> <td><span data-ttu-id=\"151d9-198\">Массив массивов (матрица) и форма точно соответствует форме указанной привязки</span><span class=\"sxs-lookup\"><span data-stu-id=\"151d9-198\">An array of arrays (\"matrix\"), and the shape exactly matches the shape of the binding specified</span></span></td> <td><span data-ttu-id=\"151d9-199\">Записывается набор строк и столбцов. Также можно задать массив массивов, которые содержат допустимый формул, добавьте их в связанной ячейки.</span><span class=\"sxs-lookup\"><span data-stu-id=\"151d9-199\">The set of rows and columns are written.You can also specify an array of arrays that contain valid formulas to add them to the bound cells.</span></span> <span data-ttu-id=\"151d9-200\">Например, установка для данных `[[\"=SUM(A1:A5)\",\"=AVERAGE(A1:A5)\"]]` добавит эти две формулы привязку, которая содержит две ячейки.</span><span class=\"sxs-lookup\"><span data-stu-id=\"151d9-200\">For example, setting data to `[[\"=SUM(A1:A5)\",\"=AVERAGE(A1:A5)\"]]` will add those two formulas to a binding that contains two cells.</span></span> <span data-ttu-id=\"151d9-201\">Так же, как при установке формулы на одну ячейку привязки, не может читать добавлены формулы (или все существующие формулы) из привязки с `Binding.getDataAsync` метод - возвращает только данные, показанные в привязанной ячеек.</span><span class=\"sxs-lookup\"><span data-stu-id=\"151d9-201\">Just as when setting a formula on a single bound cell, you can't read the added formulas (or any pre-existing formulas) from the binding with the `Binding.getDataAsync` method - it returns only the data displayed in the bound cells.</span></span></td> </tr> <tr> <td><span data-ttu-id=\"151d9-202\">Объект [Office.TableData](xref:office.Office.TableData) и форма таблицы соответствует связанной таблице.</span><span class=\"sxs-lookup\"><span data-stu-id=\"151d9-202\">An [Office.TableData](xref:office.Office.TableData) object, and the shape of the table matches the bound table.</span></span></td> <td><span data-ttu-id=\"151d9-p115\">Записывается заданный набор строк и/или заголовков, если при этом не будут перезаписаны другие данные в соседних ячейках. Примечание. Если вы укажете формулы в объекте TableData, который вы передаете для параметра *data*, можно не получить ожидаемые результаты, потому что функция \"вычисляемые столбцы\" Excel автоматически копирует формулы в столбце. Чтобы обойти это, когда вы хотите записать *data* с формулами в привязанную таблицу, попробуйте указать данные как массив массивов (вместо объекта TableData) и для *coercionType* указать Microsoft.Office.Matrix или \"matrix\".</span><span class=\"sxs-lookup\"><span data-stu-id=\"151d9-p115\">The specified set of rows and/or headers are written, if no other data in surrounding cells will be overwritten. Note: If you specify formulas in the TableData object you pass for the *data* parameter, you might not get the results you expect due to the \"calculated columns\" feature of Excel, which automatically duplicates formulas within a column. To work around this when you want to write *data* that contains formulas to a bound table, try specifying the data as an array of arrays (instead of a TableData object), and specify the *coercionType* as Microsoft.Office.Matrix or \"matrix\".</span></span></td> </tr> </table>\n\n<span data-ttu-id=\"151d9-206\">Для Интернет-версия Excel:</span><span class=\"sxs-lookup\"><span data-stu-id=\"151d9-206\">For Excel Online:</span></span>\n\n- <span data-ttu-id=\"151d9-207\">Общее число ячеек в значение, переданное для параметра data не может превышать 20 000 один вызов в этот метод.</span><span class=\"sxs-lookup\"><span data-stu-id=\"151d9-207\">The total number of cells in the value passed to the data parameter can't exceed 20,000 in a single call to this method.</span></span>\n\n- <span data-ttu-id=\"151d9-208\">Количество групп форматирования, передаваемых в параметр cellFormat, не может превышать 100.</span><span class=\"sxs-lookup\"><span data-stu-id=\"151d9-208\">The number of formatting groups passed to the cellFormat parameter can't exceed 100.</span></span> <span data-ttu-id=\"151d9-209\">Одна группа форматирования состоит из набора параметров форматирования, применяемого к указанному диапазону ячеек.</span><span class=\"sxs-lookup\"><span data-stu-id=\"151d9-209\">A single formatting group consists of a set of formatting applied to a specified range of cells.</span></span>\n\n<span data-ttu-id=\"151d9-210\">Во всех остальных случаях возвращается ошибка.</span><span class=\"sxs-lookup\"><span data-stu-id=\"151d9-210\">In all other cases, an error is returned.</span></span>\n\n<span data-ttu-id=\"151d9-211\">Метод setDataAsync запишет данные в подмножество привязки таблицы или матрицы Если указаны необязательные параметры startRow и startColumn, задают допустимый диапазон.</span><span class=\"sxs-lookup\"><span data-stu-id=\"151d9-211\">The setDataAsync method will write data in a subset of a table or matrix binding if the optional startRow and startColumn parameters are specified, and they specify a valid range.</span></span>\n\n<span data-ttu-id=\"151d9-212\">В функции обратного вызова, переданной в метод setDataAsync можно использовать свойства объекта AsyncResult для возврата следующей информации.</span><span class=\"sxs-lookup\"><span data-stu-id=\"151d9-212\">In the callback function passed to the setDataAsync method, you can use the properties of the AsyncResult object to return the following information.</span></span>\n\n<table> <tr> <th><span data-ttu-id=\"151d9-213\">Свойство</span><span class=\"sxs-lookup\"><span data-stu-id=\"151d9-213\">Property</span></span></th> <th><span data-ttu-id=\"151d9-214\">Применение</span><span class=\"sxs-lookup\"><span data-stu-id=\"151d9-214\">Use to...</span></span></th> </tr> <tr> <td><span data-ttu-id=\"151d9-215\">AsyncResult.value</span><span class=\"sxs-lookup\"><span data-stu-id=\"151d9-215\">AsyncResult.value</span></span></td> <td><span data-ttu-id=\"151d9-216\">Всегда возвращает значение undefined, так как нет объекта или данных для извлечения.</span><span class=\"sxs-lookup\"><span data-stu-id=\"151d9-216\">Always returns undefined because there is no object or data to retrieve.</span></span></td> </tr> <tr> <td><span data-ttu-id=\"151d9-217\">AsyncResult.status</span><span class=\"sxs-lookup\"><span data-stu-id=\"151d9-217\">AsyncResult.status</span></span></td> <td><span data-ttu-id=\"151d9-218\">Определяет, удалось ли выполнить операцию.</span><span class=\"sxs-lookup\"><span data-stu-id=\"151d9-218\">Determine the success or failure of the operation.</span></span></td> </tr> <tr> <td><span data-ttu-id=\"151d9-219\">AsyncResult.error</span><span class=\"sxs-lookup\"><span data-stu-id=\"151d9-219\">AsyncResult.error</span></span></td> <td><span data-ttu-id=\"151d9-220\">Получает доступ к объекту Error, который содержит сведения об ошибке, если операция завершилась неудачно.</span><span class=\"sxs-lookup\"><span data-stu-id=\"151d9-220\">Access an Error object that provides error information if the operation failed.</span></span></td> </tr> <tr> <td><span data-ttu-id=\"151d9-221\">AsyncResult.asyncContext</span><span class=\"sxs-lookup\"><span data-stu-id=\"151d9-221\">AsyncResult.asyncContext</span></span></td> <td><span data-ttu-id=\"151d9-222\">Определяемый пользователем элемент любого типа, который возвращается в объекте AsyncResult без изменения.</span><span class=\"sxs-lookup\"><span data-stu-id=\"151d9-222\">A user-defined item of any type that is returned in the AsyncResult object without being altered.</span></span></td> </tr> </table>\n#### <span data-ttu-id=\"151d9-223\">Примеры</span><span class=\"sxs-lookup\"><span data-stu-id=\"151d9-223\">Examples</span></span>\n\n```javascript\nfunction setBindingData() {\n    Office.select(\"bindings#MyBinding\").setDataAsync('Hello World!', function (asyncResult) { });\n}\n\n// Specifying the optional coercionType parameter lets you specify the kind of data you want to write to a binding.\n// For example, in Word if you want to write HTML to a text binding, you can specify the coercionType parameter \n// as \"html\" as shown in the following example, which uses HTML <b> tags to make \"Hello\" bold.\nfunction writeHtmlData() {\n    Office.select(\"bindings#myBinding\").setDataAsync(\n        \"<b>Hello</b> World!\", {coercionType: \"html\"}, function (asyncResult) {\n        if (asyncResult.status == \"failed\") {\n            write('Error: ' + asyncResult.error.message);\n        }\n    });\n}\n\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n\n// In this example, the call to setDataAsync passes the data parameter as an array of arrays\n// (to create a single column of three rows), and specifies the data structure with the \n// coercionType parameter as a \"matrix\".\nfunction writeBoundDataMatrix() {\n    Office.select(\"bindings#myBinding\").setDataAsync(\n        [['Berlin'],['Munich'],['Duisburg']],{ coercionType: \"matrix\" }, function (asyncResult) {\n        if (asyncResult.status == \"failed\") {\n            write('Error: ' + asyncResult.error.message);\n        } else {\n            write('Bound data: ' + asyncResult.value);\n        }\n    });\n}\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n\n// In the writeBoundDataTable function in this example, the call to setDataAsync passes the data parameter \n// as a TableData object (to write three columns and three rows), and specifies the data structure\n// with the coercionType parameter as a \"table\".\n\n// In the updateTableData function, the call to setDataAsync again passes the data parameter as a TableData object,\n// but as a single column with a new header and three rows, to update the values in the last column \n// of the table created with the writeBoundDataTable function. The optional zero-based startColumn parameter \n// is specified as 2 to replace the values in the third column of the table.\nfunction writeBoundDataTable() {\n    // Create a TableData object.\n    var myTable = new Office.TableData();\n    myTable.headers = ['First Name', 'Last Name', 'Grade'];\n    myTable.rows = [['Kim', 'Abercrombie', 'A'], ['Junmin','Hao', 'C'],['Toni','Poe','B']];\n\n    // Set myTable in the binding.\n    Office.select(\"bindings#myBinding\").setDataAsync(myTable, { coercionType: \"table\" }, \n        function (asyncResult) {\n            if (asyncResult.status == Office.AsyncResultStatus.Failed) {\n                write('Error: '+ asyncResult.error.message);\n        } else {\n            write('Bound data: ' + asyncResult.value);\n        }\n    });\n}\n\n// Replace last column with different data.\nfunction updateTableData() {\n    var newTable = new Office.TableData();\n    newTable.headers = [\"Gender\"];\n    newTable.rows = [[\"M\"],[\"M\"],[\"F\"]];\n    Office.select(\"bindings#myBinding\").setDataAsync(newTable, { coercionType: \"table\", startColumn:2 }, \n        function (asyncResult) {\n            if (asyncResult.status == Office.AsyncResultStatus.Failed) {\n                write('Error: '+ asyncResult.error.message);\n        } else {\n            write('Bound data: ' + asyncResult.value);\n        }     \n    });   \n}\n\n// In this example, the following call passes two formatting groups to cellFormat.\nOffice.select(\"bindings#myBinding\").setDataAsync([['Berlin'],['Munich'],['Duisburg']],\n  {cellFormat:[{cells: {row: 1}, format: {fontColor: \"yellow\"}}, \n      {cells: {row: 3, column: 4}, format: {borderColor: \"white\", fontStyle: \"bold\"}}]}, \n  function (asyncResult){});\n```"
  name: setDataAsync(data, options, callback)
  fullName: office.Office.Binding.setDataAsync
  langs:
  - typeScript
  type: method
  syntax:
    content: 'setDataAsync(data: TableData | any, options?: SetBindingDataOptions, callback?: (result: AsyncResult<void>) => void): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: data
      description: >-
        <span data-ttu-id="151d9-224">Данные, записываемые в текущий выделенный фрагмент.</span><span class="sxs-lookup"><span data-stu-id="151d9-224">The data to be set in the current selection.</span></span> <span data-ttu-id="151d9-225">Возможных типов данных с узла: string: Excel Excel Online, Word и Word Online только массив массивов: приложения Excel и Word только[Office.TableData](xref:office.Office.TableData)<!-- -->: Access, Excel и только для Word</span><span class="sxs-lookup"><span data-stu-id="151d9-225">Possible data types by host: string: Excel, Excel Online, Word, and Word Online only array of arrays: Excel and Word only[Office.TableData](xref:office.Office.TableData)<!-- -->: Access, Excel, and Word only</span></span>


        <span data-ttu-id="151d9-226">HTML-код: Word и Интернет-версия только Word</span><span class="sxs-lookup"><span data-stu-id="151d9-226">HTML: Word and Word Online only</span></span>


        <span data-ttu-id="151d9-227">Office Open XML: Только Word</span><span class="sxs-lookup"><span data-stu-id="151d9-227">Office Open XML: Word only</span></span>
      type:
      - TableData | any
    - id: options
      description: <span data-ttu-id="151d9-228">Предоставляет параметры для определения данных в привязке.</span><span class="sxs-lookup"><span data-stu-id="151d9-228">Provides options for how to set the data in a binding.</span></span>
      type:
      - office.Office.SetBindingDataOptions
    - id: callback
      description: <span data-ttu-id="151d9-229">Необязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="151d9-229">Optional.</span></span> <span data-ttu-id="151d9-230">Функция, вызываемая при возвращении обратного вызова, единственный параметр которой имеет тип[Office.AsyncResult](xref:office.Office.AsyncResult)<!-- -->.</span><span class="sxs-lookup"><span data-stu-id="151d9-230">A function that is invoked when the callback returns, whose only parameter is of type[Office.AsyncResult](xref:office.Office.AsyncResult)<!-- -->.</span></span>
      type:
      - '(result: AsyncResult<void>) => void'
- uid: office.Office.Binding.type
  summary: <span data-ttu-id="151d9-231">Получает тип привязки.</span><span class="sxs-lookup"><span data-stu-id="151d9-231">Gets the type of the binding.</span></span>
  name: type
  fullName: office.Office.Binding.type
  langs:
  - typeScript
  type: property
  syntax:
    content: 'type: Office.BindingType;'
    return:
      type:
      - Office.BindingType
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"151d9-232\">Примеры</span><span class=\"sxs-lookup\"><span data-stu-id=\"151d9-232\">Examples</span></span>\n\n```javascript\nOffice.context.document.bindings.getByIdAsync(\"MyBinding\", function (asyncResult) { \n    write(asyncResult.value.type); \n}) \n\n// Function that writes to a div with id='message' on the page. \nfunction write(message){ \n    document.getElementById('message').innerText += message;  \n}\n```"
