### YamlMime:UniversalReference
ms.openlocfilehash: c188f127b540706dc459a9ea8dfdec041be486e5
ms.sourcegitcommit: d356f1545c328d4b59ce814fcab8191e4231f1dc
ms.translationtype: MT
ms.contentlocale: ru-RU
ms.lasthandoff: 02/13/2019
ms.locfileid: "29977400"
items:
- uid: office.Office.Binding
  summary: Представляет привязку к разделу документа.
  remarks: >-
    <table><tr><td>Наборы требований</td><td>MatrixBindings, TableBindings, TextBindings</td></tr></table>


    Объект Binding предоставляет функциональные возможности, которыми обладают все привязки независимо от типа.


    Объект Binding никогда не вызывается напрямую. Класс абстрактный родительских объектов, представляющих каждый тип привязки: [Office.MatrixBinding](xref:office.Office.MatrixBinding)<!-- -->, [Office.TableBinding](xref:office.Office.TableBinding)<!-- -->, или [Office.TextBinding](xref:office.Office.TextBinding)<!-- -->. Все три этих объектов наследуют getDataAsync и метода setDataAsync от объекта Binding, которые позволяют вам работать с данными в привязке. Они также наследуют идентификатор и тип свойства для запросов к их значения. Кроме того MatrixBinding и TableBinding объекты предоставляют дополнительные методы для конкретных таблица и таблица функции, например подсчет числа строк и столбцов.


    **Сведения о поддержке**


    Прописная Y в следующих матрицы указывает, что этот интерфейс поддерживается в соответствующем ведущего приложения Office. Пустая ячейка указывает, что ведущего приложения Office не поддерживает этот интерфейс.


    Дополнительные сведения о требованиях к приложения и сервера узла Office можно [требования для запуска надстроек Office](https://docs.microsoft.com/office/dev/add-ins/concepts/requirements-for-running-office-add-ins)<!-- -->.


    *Поддерживаемые ведущие приложения на разных платформах* <table> <tr><th> </th><th> Office для компьютера с Windows </th><th> Office Online (в браузере) </th><th> Office for iPad </th><th> Office for Mac </th></tr> <tr><td><strong>Access</strong></td><td> </td><td> Да </td><td> </td><td> </td></tr> <tr><td><strong>Excel</strong></td><td> Да </td><td> Да </td><td> Да </td><td> Да </td></tr> <tr><td><strong>Word</strong></td><td> Да </td><td> Да </td><td> Да </td><td> Да </td></tr> </table>
  name: Office.Binding
  fullName: Office.Binding
  langs:
  - typeScript
  type: interface
  package: office
  children:
  - office.Office.Binding.addHandlerAsync
  - office.Office.Binding.addHandlerAsync_1
  - office.Office.Binding.getDataAsync
  - office.Office.Binding.getDataAsync_1
  - office.Office.Binding.removeHandlerAsync
  - office.Office.Binding.removeHandlerAsync_1
  - office.Office.Binding.setDataAsync
  - office.Office.Binding.setDataAsync_1
  - office.Office.Binding.document
  - office.Office.Binding.id
  - office.Office.Binding.type
- uid: office.Office.Binding.addHandlerAsync
  summary: Добавляет обработчик событий к объекту для указанного [Office.EventType](xref:office.Office.EventType)<!-- -->. Поддерживаемые EventTypes, `Office.EventType.BindingDataChanged` и `Office.EventType.BindingSelectionChanged` <!-- -->.
  remarks: Можно добавить несколько обработчиков событий для указанного объекта eventType, поскольку имя каждой функции обработчика событий является уникальным.
  name: addHandlerAsync(eventType, handler, options, callback)
  fullName: addHandlerAsync(eventType, handler, options, callback)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'addHandlerAsync(eventType: Office.EventType, handler: any, options?: Office.AsyncContextOptions, callback?: (result: Office.AsyncResult<void>) => void): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: eventType
      description: Тип события. Для привязок, он может быть `Office.EventType.BindingDataChanged` или `Office.EventType.BindingSelectionChanged` <!-- -->.
      type:
      - Office.EventType
    - id: handler
      description: Функцию обработчика событий для добавления, единственный параметр которой имеет тип [Office.BindingDataChangedEventArgs](xref:office.Office.BindingDataChangedEventArgs) или [Office.BindingSelectionChangedEventArgs](xref:office.Office.BindingSelectionChangedEventArgs)<!-- -->.
      type:
      - any
    - id: options
      description: Предоставляет возможность сохранения данных контекста любого типа, без изменений, для использования в функции обратного вызова.
      type:
      - office.Office.AsyncContextOptions
    - id: callback
      description: Необязательное свойство. Функция, вызываемая при возвращении обратного вызова, единственный параметр которой имеет тип [Office.AsyncResult](xref:office.Office.AsyncResult)<!-- -->.
      type:
      - '(result: Office.AsyncResult<void>) => void'
- uid: office.Office.Binding.addHandlerAsync_1
  summary: Добавляет обработчик событий к объекту для указанного [Office.EventType](xref:office.Office.EventType)<!-- -->. Поддерживаемые EventTypes, `Office.EventType.BindingDataChanged` и `Office.EventType.BindingSelectionChanged` <!-- -->.
  remarks: "Можно добавить несколько обработчиков событий для указанного объекта eventType, поскольку имя каждой функции обработчика событий является уникальным.\n#### <a name=\"examples\"></a>Примеры\n\n```javascript\n// The following code sample calls the select method of the Office object to access the binding\n// with ID \"MyBinding\", and then calls the addHandlerAsync method to add a handler function \n// for the bindingDataChanged event of that binding.\nfunction addEventHandlerToBinding() {\n    Office.select(\"bindings#MyBinding\").addHandlerAsync(\n        Office.EventType.BindingDataChanged, onBindingDataChanged);\n}\n\nfunction onBindingDataChanged(eventArgs) {\n    write(\"Data has changed in binding: \" + eventArgs.binding.id);\n}\n\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n```\n```javascript\n// To add an event handler for the BindingSelectionChanged event of a binding, \n// use the addHandlerAsync method of the Binding object.\n// The event handler receives an argument of type BindingSelectionChangedEventArgs.\nfunction addEventHandlerToBinding() {\n    Office.select(\"bindings#MyBinding\").addHandlerAsync(\n        Office.EventType.BindingSelectionChanged, onBindingSelectionChanged);\n}\n\nfunction onBindingSelectionChanged(eventArgs) {\n    write(eventArgs.binding.id + \" has been selected.\");\n}\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n```"
  name: addHandlerAsync(eventType, handler, callback)
  fullName: addHandlerAsync(eventType, handler, callback)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'addHandlerAsync(eventType: Office.EventType, handler: any, callback?: (result: Office.AsyncResult<void>) => void): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: eventType
      description: Тип события. Для привязок, он может быть `Office.EventType.BindingDataChanged` или `Office.EventType.BindingSelectionChanged` <!-- -->.
      type:
      - Office.EventType
    - id: handler
      description: Функцию обработчика событий для добавления, единственный параметр которой имеет тип [Office.BindingDataChangedEventArgs](xref:office.Office.BindingDataChangedEventArgs) или [Office.BindingSelectionChangedEventArgs](xref:office.Office.BindingSelectionChangedEventArgs)<!-- -->.
      type:
      - any
    - id: callback
      description: Необязательное свойство. Функция, вызываемая при возвращении обратного вызова, единственный параметр которой имеет тип [Office.AsyncResult](xref:office.Office.AsyncResult)<!-- -->.
      type:
      - '(result: Office.AsyncResult<void>) => void'
- uid: office.Office.Binding.getDataAsync
  summary: Возвращает данные, содержащиеся в привязке.
  remarks: >-
    <table><tr><td>Наборы требований</td><td>MatrixBindings, TableBindings, TextBindings</td></tr></table>


    При вызове из MatrixBinding или TableBinding метод getDataAsync вернет подмножество значений привязки, если указаны необязательные параметры startRow, startColumn, rowCount и columnCount (задают непрерывный и допустимый диапазон).
  name: getDataAsync(options, callback)
  fullName: getDataAsync(options, callback)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getDataAsync<T>(options?: GetBindingDataOptions, callback?: (result: AsyncResult<T>) => void): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: options
      description: Предоставляет параметры для получения данных в привязке.
      type:
      - office.Office.GetBindingDataOptions
    - id: callback
      description: Необязательное свойство. Функция, вызываемая при возвращении обратного вызова, единственный параметр которой имеет тип [Office.AsyncResult](xref:office.Office.AsyncResult)<!-- -->. `value` Свойства результата — это значения в указанную привязку. Если `coercionType` указан параметр (и вызов выполнен успешно), данные возвращаются в формате, описанном в перечислении coerciontype.
      type:
      - '(result: AsyncResult<T>) => void'
- uid: office.Office.Binding.getDataAsync_1
  summary: Возвращает данные, содержащиеся в привязке.
  remarks: "<table><tr><td>Наборы требований</td><td>MatrixBindings, TableBindings, TextBindings</td></tr></table>\n\nПри вызове из MatrixBinding или TableBinding метод getDataAsync вернет подмножество значений привязки, если указаны необязательные параметры startRow, startColumn, rowCount и columnCount (задают непрерывный и допустимый диапазон).\n#### <a name=\"examples\"></a>Примеры\n\n```javascript\nfunction showBindingData() {\n    Office.select(\"bindings#MyBinding\").getDataAsync(function (asyncResult) {\n        write(asyncResult.value)\n    });\n}\n\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n\n// There is an important difference in behavior between using the \"table\" and \"matrix\" coercionType with the\n// Binding.getDataAsync method, with respect to data formatted with header rows, as shown in the following\n// two examples. These code examples show event handler functions for the Binding.SelectionChanged event.\n\n// If you specify the \"table\" coercionType, the TableData.rows property ( result.value.rows in the following\n// code example) returns an array that contains only the body rows of the table. So, its 0th row will be the\n// first non-header row in the table.\nfunction selectionChanged(evtArgs) { \n    Office.select(\"bindings#TableTranslate\").getDataAsync(\n        { coercionType: 'table', \n          startRow: evtArgs.startRow, \n          startCol: 0, \n          rowCount: 1, \n          columnCount: 1 },  \n        function (result) { \n            if (result.status == 'succeeded') { \n                write(\"Image to find: \" + result.value.rows[0][0]); \n            } \n            else \n                write(result.error.message); \n    }); \n}     \n// Function that writes to a div with id='message' on the page. \nfunction write(message){ \n    document.getElementById('message').innerText += message; \n}\n\n// However, if you specify the \"matrix\" coercionType, result.value in the following code example returns an array\n// that contains the table header in the 0th row. If the table header contains multiple rows, then these are all\n// included in the result.value matrix as separate rows before the table body rows are included.\nfunction selectionChanged(evtArgs) { \n    Office.select(\"bindings#TableTranslate\").getDataAsync(\n        { coercionType: 'matrix', \n          startRow: evtArgs.startRow, \n          startCol: 0, \n          rowCount: 1, \n          columnCount: 1 },  \n        function (result) { \n            if (result.status == 'succeeded') { \n                write(\"Image to find: \" + result.value[1][0]); \n            } \n            else \n                write(result.error.message); \n    }); \n}     \n// Function that writes to a div with id='message' on the page. \nfunction write(message){ \n    document.getElementById('message').innerText += message; \n}\n```"
  name: getDataAsync(callback)
  fullName: getDataAsync(callback)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getDataAsync<T>(callback?: (result: AsyncResult<T>) => void): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: callback
      description: Необязательное свойство. Функция, вызываемая при возвращении обратного вызова, единственный параметр которой имеет тип [Office.AsyncResult](xref:office.Office.AsyncResult)<!-- -->. `value` Свойства результата — это значения в указанную привязку. Если `coercionType` указан параметр (и вызов выполнен успешно), данные возвращаются в формате, описанном в перечислении coerciontype.
      type:
      - '(result: AsyncResult<T>) => void'
- uid: office.Office.Binding.removeHandlerAsync
  summary: Удаляет указанный обработчик из привязки для указанного типа события.
  remarks: <table><tr><td>Наборы требований</td><td>BindingEvents</td></tr></table>
  name: removeHandlerAsync(eventType, options, callback)
  fullName: removeHandlerAsync(eventType, options, callback)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'removeHandlerAsync(eventType: Office.EventType, options?: RemoveHandlerOptions, callback?: (result: AsyncResult<void>) => void): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: eventType
      description: Тип события. Для привязок, он может быть `Office.EventType.BindingDataChanged` или `Office.EventType.BindingSelectionChanged` <!-- -->.
      type:
      - Office.EventType
    - id: options
      description: Содержит параметры, чтобы определить, какой обработчик событий или обработчики удаляются.
      type:
      - office.Office.RemoveHandlerOptions
    - id: callback
      description: Необязательное свойство. Функция, вызываемая при возвращении обратного вызова, единственный параметр которой имеет тип [Office.AsyncResult](xref:office.Office.AsyncResult)<!-- -->.
      type:
      - '(result: AsyncResult<void>) => void'
- uid: office.Office.Binding.removeHandlerAsync_1
  summary: Удаляет указанный обработчик из привязки для указанного типа события.
  remarks: >-
    <table><tr><td>Наборы требований</td><td>BindingEvents</td></tr></table>

    #### Примеры


    ```javascript

    function removeEventHandlerFromBinding() {
        Office.select("bindings#MyBinding").removeHandlerAsync(
            Office.EventType.BindingDataChanged, {handler:onBindingDataChanged});
    }

    ```
  name: removeHandlerAsync(eventType, callback)
  fullName: removeHandlerAsync(eventType, callback)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'removeHandlerAsync(eventType: Office.EventType, callback?: (result: AsyncResult<void>) => void): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: eventType
      description: Тип события. Для привязок, он может быть `Office.EventType.BindingDataChanged` или `Office.EventType.BindingSelectionChanged` <!-- -->.
      type:
      - Office.EventType
    - id: callback
      description: Необязательное свойство. Функция, вызываемая при возвращении обратного вызова, единственный параметр которой имеет тип [Office.AsyncResult](xref:office.Office.AsyncResult)<!-- -->.
      type:
      - '(result: AsyncResult<void>) => void'
- uid: office.Office.Binding.setDataAsync
  summary: Записывает данные в привязанный раздел документа, представленный указанным объектом привязки.
  remarks: >-
    <table><tr><td>Наборы требований</td><td>MatrixBindings, TableBindings, TextBindings</td></tr></table>


    Значение, переданное для данных содержит данные для записи в привязке. Вид значение, переданное определяет, что будет записан, как описано в следующей таблице.


    <table> <tr> <th>`data`значение</th> <th>Записываемые данные</th> </tr> <tr> <td>Строка</td> <td>Будет записан обычный текст или другие данные, которые могут быть приведены к типу string.</td> </tr> <tr> <td>Массив массивов (матрица)</td> <td>Записываются табличные данные без заголовков. Например, для записи данных в три строки по два столбца, вы можете передать такой массив: `[["R1C1", "R1C2"], ["R2C1", "R2C2"], ["R3C1", "R3C2"]]` <!-- -->. Для записи одного столбца из трех строк передайте такой массив: `[["R1C1"], ["R2C1"], ["R3C1"]]` <!-- -->.</td> </tr> <tr> <td>Объект [Office.TableData](xref:office.Office.TableData)</td> <td>Записываются табличные данные с заголовками.</td> </tr> </table>


    Кроме того, при записи данных в привязку применяются следующие действия, соответствующие конкретному приложению. В Word указанное значение параметра data записывается в привязку таким образом:


    <table> <tr> <th>`data`значение</th> <th>Записываемые данные</th> </tr> <tr> <td>Строка</td> <td>Записывается указанный текст.</td> </tr> <tr> <td>Массив массивов («матрицу») или объект [Office.TableData](xref:office.Office.TableData)</td> <td>Записывается таблица Word.</td> </tr> <tr> <td>HTML</td> <td>Записывается указанный HTML-код. Если какие-либо записи недопустимый HTML-код, Word не вызовет ошибку. Word запишет объем HTML-код, как его можно и будет пропущен любой недопустимые данные.</td> </tr> <tr> <td>Office Open XML (Open XML)</td> <td>Записывается указанный XML-код.</td> </tr> </table>


    В Excel указанное значение параметра data записывается в привязку таким образом:


    <table> <tr> <th>`data`значение</th> <th>Записываемые данные</th> </tr> <tr> <td>Строка</td> <td>Указанный текст вставляется в качестве значения первой ячейки привязки. Можно также указать допустимое формулу для добавления этой формуле ячейки привязки. Например, если задать для параметра data значение `"=SUM(A1:A5)"`, значения в указанном диапазоне будут суммироваться. Тем не менее, если задать формулу в связанной ячейке, добавленную (или существующую) формулу будет невозможно считать. Если вызвать метод Binding.getDataAsync для ячейки привязки для чтения данных, этот метод может возвращать только данные, показанные в ячейке (результат формулы).</td> </tr> <tr> <td>Массив массивов (матрица) и форма точно соответствует форме указанной привязки</td> <td>Записывается набор строк и столбцов. Также можно задать массив массивов, которые содержат допустимый формул, добавьте их в связанной ячейки. Например, установка для данных `[["=SUM(A1:A5)","=AVERAGE(A1:A5)"]]` добавит эти две формулы привязку, которая содержит две ячейки. Так же, как при установке формулы на одну ячейку привязки, не может читать добавлены формулы (или все существующие формулы) из привязки с `Binding.getDataAsync` метод - возвращает только данные, показанные в привязанной ячеек.</td> </tr> <tr> <td>Объект [Office.TableData](xref:office.Office.TableData) и форма таблицы соответствует связанной таблице.</td> <td>Записывается указанный набор строк или заголовков, если никакие другие данные в окружающих ячейках не перезаписываются. **Примечание**: при указании формул в объект TableData, передайте для параметра *data* не может получить результаты, предполагается, что из-за компонента «вычисляемые столбцы» из Excel, который автоматически дублирует формул в пределах столбца. Чтобы обойти этот флажок записать *данные* , которые содержат формулы в связанной таблице, попробуйте определения данных в виде массива массивов (вместо объекта TableData) и укажите *coercionType* как Microsoft.Office.Matrix или «матрица».</td> </tr> </table>


    Для Интернет-версия Excel:


    - Общее число ячеек в значение, переданное для параметра data не может превышать 20 000 один вызов в этот метод.


    - Количество групп форматирования, передаваемых в параметр cellFormat, не может превышать 100. Одна группа форматирования состоит из набора параметров форматирования, применяемого к указанному диапазону ячеек.


    Во всех остальных случаях возвращается ошибка.


    Метод setDataAsync запишет данные в подмножество привязки таблицы или матрицы Если указаны необязательные параметры startRow и startColumn, задают допустимый диапазон.


    В функции обратного вызова, переданной в метод setDataAsync можно использовать свойства объекта AsyncResult для возврата следующей информации.


    <table> <tr> <th>Свойство</th> <th>Применение</th> </tr> <tr> <td>AsyncResult.value</td> <td>Всегда возвращает значение undefined, так как нет объекта или данных для извлечения.</td> </tr> <tr> <td>AsyncResult.status</td> <td>Определяет, удалось ли выполнить операцию.</td> </tr> <tr> <td>AsyncResult.error</td> <td>Получает доступ к объекту Error, который содержит сведения об ошибке, если операция завершилась неудачно.</td> </tr> <tr> <td>AsyncResult.asyncContext</td> <td>Определяемый пользователем элемент любого типа, который возвращается в объекте AsyncResult без изменения.</td> </tr> </table>
  name: setDataAsync(data, options, callback)
  fullName: setDataAsync(data, options, callback)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'setDataAsync(data: TableData | any, options?: SetBindingDataOptions, callback?: (result: AsyncResult<void>) => void): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: data
      description: >-
        Данные, записываемые в текущий выделенный фрагмент. Типы данных с узла.


        Строка: Excel Excel Online, Word и Word Online только


        Массив массивов: только Word и Excel.


        [Office.TableData](xref:office.Office.TableData)<!-- -->: Access, Excel и только для Word


        HTML-код: Word и Интернет-версия только Word


        Office Open XML: Только Word
      type:
      - TableData | any
    - id: options
      description: Предоставляет параметры для определения данных в привязке.
      type:
      - office.Office.SetBindingDataOptions
    - id: callback
      description: Необязательное свойство. Функция, вызываемая при возвращении обратного вызова, единственный параметр которой имеет тип [Office.AsyncResult](xref:office.Office.AsyncResult)<!-- -->.
      type:
      - '(result: AsyncResult<void>) => void'
- uid: office.Office.Binding.setDataAsync_1
  summary: Записывает данные в привязанный раздел документа, представленный указанным объектом привязки.
  remarks: "<table><tr><td>Наборы требований</td><td>MatrixBindings, TableBindings, TextBindings</td></tr></table>\n\nЗначение, переданное для данных содержит данные для записи в привязке. Вид значение, переданное определяет, что будет записан, как описано в следующей таблице.\n\n<table> <tr> <th>`data`значение</th> <th>Записываемые данные</th> </tr> <tr> <td>Строка</td> <td>Будет записан обычный текст или другие данные, которые могут быть приведены к типу string.</td> </tr> <tr> <td>Массив массивов (матрица)</td> <td>Записываются табличные данные без заголовков. Например, для записи данных в три строки по два столбца, вы можете передать такой массив: `[[\"R1C1\", \"R1C2\"], [\"R2C1\", \"R2C2\"], [\"R3C1\", \"R3C2\"]]` <!-- -->. Для записи одного столбца из трех строк передайте такой массив: `[[\"R1C1\"], [\"R2C1\"], [\"R3C1\"]]` <!-- -->.</td> </tr> <tr> <td>Объект [Office.TableData](xref:office.Office.TableData)</td> <td>Записываются табличные данные с заголовками.</td> </tr> </table>\n\nКроме того, при записи данных в привязку применяются следующие действия, соответствующие конкретному приложению. В Word указанное значение параметра data записывается в привязку таким образом:\n\n<table> <tr> <th>`data`значение</th> <th>Записываемые данные</th> </tr> <tr> <td>Строка</td> <td>Записывается указанный текст.</td> </tr> <tr> <td>Массив массивов («матрицу») или объект [Office.TableData](xref:office.Office.TableData)</td> <td>Записывается таблица Word.</td> </tr> <tr> <td>HTML</td> <td>Записывается указанный HTML-код. Если какие-либо записи недопустимый HTML-код, Word не вызовет ошибку. Word запишет объем HTML-код, как его можно и будет пропущен любой недопустимые данные.</td> </tr> <tr> <td>Office Open XML (Open XML)</td> <td>Записывается указанный XML-код.</td> </tr> </table>\n\nВ Excel указанное значение параметра data записывается в привязку таким образом:\n\n<table> <tr> <th>`data`значение</th> <th>Записываемые данные</th> </tr> <tr> <td>Строка</td> <td>Указанный текст вставляется в качестве значения первой ячейки привязки. Можно также указать допустимое формулу для добавления этой формуле ячейки привязки. Например, если задать для параметра data значение `\"=SUM(A1:A5)\"`, значения в указанном диапазоне будут суммироваться. Тем не менее, если задать формулу в связанной ячейке, добавленную (или существующую) формулу будет невозможно считать. Если вызвать метод Binding.getDataAsync для ячейки привязки для чтения данных, этот метод может возвращать только данные, показанные в ячейке (результат формулы).</td> </tr> <tr> <td>Массив массивов (матрица) и форма точно соответствует форме указанной привязки</td> <td>Записывается набор строк и столбцов. Также можно задать массив массивов, которые содержат допустимый формул, добавьте их в связанной ячейки. Например, установка для данных `[[\"=SUM(A1:A5)\",\"=AVERAGE(A1:A5)\"]]` добавит эти две формулы привязку, которая содержит две ячейки. Так же, как при установке формулы на одну ячейку привязки, не может читать добавлены формулы (или все существующие формулы) из привязки с `Binding.getDataAsync` метод - возвращает только данные, показанные в привязанной ячеек.</td> </tr> <tr> <td>Объект [Office.TableData](xref:office.Office.TableData) и форма таблицы соответствует связанной таблице.</td> <td>Записывается указанный набор строк или заголовков, если никакие другие данные в окружающих ячейках не перезаписываются. **Примечание**: при указании формул в объект TableData, передайте для параметра *data* не может получить результаты, предполагается, что из-за компонента «вычисляемые столбцы» из Excel, который автоматически дублирует формул в пределах столбца. Чтобы обойти этот флажок записать *данные* , которые содержат формулы в связанной таблице, попробуйте определения данных в виде массива массивов (вместо объекта TableData) и укажите *coercionType* как Microsoft.Office.Matrix или «матрица».</td> </tr> </table>\n\nДля Интернет-версия Excel:\n\n- Общее число ячеек в значение, переданное для параметра data не может превышать 20 000 один вызов в этот метод.\n\n- Количество групп форматирования, передаваемых в параметр cellFormat, не может превышать 100. Одна группа форматирования состоит из набора параметров форматирования, применяемого к указанному диапазону ячеек.\n\nВо всех остальных случаях возвращается ошибка.\n\nМетод setDataAsync запишет данные в подмножество привязки таблицы или матрицы Если указаны необязательные параметры startRow и startColumn, задают допустимый диапазон.\n\nВ функции обратного вызова, переданной в метод setDataAsync можно использовать свойства объекта AsyncResult для возврата следующей информации.\n\n<table> <tr> <th>Свойство</th> <th>Применение</th> </tr> <tr> <td>AsyncResult.value</td> <td>Всегда возвращает значение undefined, так как нет объекта или данных для извлечения.</td> </tr> <tr> <td>AsyncResult.status</td> <td>Определяет, удалось ли выполнить операцию.</td> </tr> <tr> <td>AsyncResult.error</td> <td>Получает доступ к объекту Error, который содержит сведения об ошибке, если операция завершилась неудачно.</td> </tr> <tr> <td>AsyncResult.asyncContext</td> <td>Определяемый пользователем элемент любого типа, который возвращается в объекте AsyncResult без изменения.</td> </tr> </table>\n#### Примеры\n\n```javascript\nfunction setBindingData() {\n    Office.select(\"bindings#MyBinding\").setDataAsync('Hello World!', function (asyncResult) { });\n}\n\n// Specifying the optional coercionType parameter lets you specify the kind of data you want to write to a binding.\n// For example, in Word if you want to write HTML to a text binding, you can specify the coercionType parameter \n// as \"html\" as shown in the following example, which uses HTML <b> tags to make \"Hello\" bold.\nfunction writeHtmlData() {\n    Office.select(\"bindings#myBinding\").setDataAsync(\n        \"<b>Hello</b> World!\", {coercionType: \"html\"}, function (asyncResult) {\n        if (asyncResult.status == \"failed\") {\n            write('Error: ' + asyncResult.error.message);\n        }\n    });\n}\n\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n\n// In this example, the call to setDataAsync passes the data parameter as an array of arrays\n// (to create a single column of three rows), and specifies the data structure with the \n// coercionType parameter as a \"matrix\".\nfunction writeBoundDataMatrix() {\n    Office.select(\"bindings#myBinding\").setDataAsync(\n        [['Berlin'],['Munich'],['Duisburg']],{ coercionType: \"matrix\" }, function (asyncResult) {\n        if (asyncResult.status == \"failed\") {\n            write('Error: ' + asyncResult.error.message);\n        } else {\n            write('Bound data: ' + asyncResult.value);\n        }\n    });\n}\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n\n// In the writeBoundDataTable function in this example, the call to setDataAsync passes the data parameter \n// as a TableData object (to write three columns and three rows), and specifies the data structure\n// with the coercionType parameter as a \"table\".\n\n// In the updateTableData function, the call to setDataAsync again passes the data parameter as a TableData object,\n// but as a single column with a new header and three rows, to update the values in the last column \n// of the table created with the writeBoundDataTable function. The optional zero-based startColumn parameter \n// is specified as 2 to replace the values in the third column of the table.\nfunction writeBoundDataTable() {\n    // Create a TableData object.\n    var myTable = new Office.TableData();\n    myTable.headers = ['First Name', 'Last Name', 'Grade'];\n    myTable.rows = [['Kim', 'Abercrombie', 'A'], ['Junmin','Hao', 'C'],['Toni','Poe','B']];\n\n    // Set myTable in the binding.\n    Office.select(\"bindings#myBinding\").setDataAsync(myTable, { coercionType: \"table\" }, \n        function (asyncResult) {\n            if (asyncResult.status == Office.AsyncResultStatus.Failed) {\n                write('Error: '+ asyncResult.error.message);\n        } else {\n            write('Bound data: ' + asyncResult.value);\n        }\n    });\n}\n\n// Replace last column with different data.\nfunction updateTableData() {\n    var newTable = new Office.TableData();\n    newTable.headers = [\"Gender\"];\n    newTable.rows = [[\"M\"],[\"M\"],[\"F\"]];\n    Office.select(\"bindings#myBinding\").setDataAsync(newTable, { coercionType: \"table\", startColumn:2 }, \n        function (asyncResult) {\n            if (asyncResult.status == Office.AsyncResultStatus.Failed) {\n                write('Error: '+ asyncResult.error.message);\n        } else {\n            write('Bound data: ' + asyncResult.value);\n        }     \n    });   \n}\n\n// In this example, the following call passes two formatting groups to cellFormat.\nOffice.select(\"bindings#myBinding\").setDataAsync([['Berlin'],['Munich'],['Duisburg']],\n  {cellFormat:[{cells: {row: 1}, format: {fontColor: \"yellow\"}}, \n      {cells: {row: 3, column: 4}, format: {borderColor: \"white\", fontStyle: \"bold\"}}]}, \n  function (asyncResult){});\n```"
  name: setDataAsync(data, callback)
  fullName: setDataAsync(data, callback)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'setDataAsync(data: TableData | any, callback?: (result: AsyncResult<void>) => void): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: data
      description: >-
        Данные, записываемые в текущий выделенный фрагмент. Типы данных с узла.


        Строка: Excel Excel Online, Word и Word Online только


        Массив массивов: только Word и Excel.


        [Office.TableData](xref:office.Office.TableData)<!-- -->: Access, Excel и только для Word


        HTML-код: Word и Интернет-версия только Word


        Office Open XML: Только Word
      type:
      - TableData | any
    - id: callback
      description: Необязательное свойство. Функция, вызываемая при возвращении обратного вызова, единственный параметр которой имеет тип [Office.AsyncResult](xref:office.Office.AsyncResult)<!-- -->.
      type:
      - '(result: AsyncResult<void>) => void'
- uid: office.Office.Binding.document
  summary: Получает объект Document, связанный с привязкой.
  name: document
  fullName: document
  langs:
  - typeScript
  type: property
  syntax:
    content: 'document: Office.Document;'
    return:
      type:
      - office.Office.Document
      description: "\n#### <a name=\"examples\"></a>Примеры\n\n```javascript\nOffice.context.document.bindings.getByIdAsync(\"myBinding\", function (asyncResult) {\n    write(asyncResult.value.document.url);\n});\n\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n```"
- uid: office.Office.Binding.id
  summary: Строка, однозначно идентифицирует данную привязку среди привязок в одном объекте [Office.Document](xref:office.Office.Document) .
  name: id
  fullName: id
  langs:
  - typeScript
  type: property
  syntax:
    content: 'id: string;'
    return:
      type:
      - string
      description: "\n#### <a name=\"examples\"></a>Примеры\n\n```javascript\nOffice.context.document.bindings.getByIdAsync(\"myBinding\", function (asyncResult) {\n    write(asyncResult.value.id);\n});\n\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n```"
- uid: office.Office.Binding.type
  summary: Получает тип привязки.
  name: type
  fullName: type
  langs:
  - typeScript
  type: property
  syntax:
    content: 'type: Office.BindingType;'
    return:
      type:
      - Office.BindingType
      description: "\n#### <a name=\"examples\"></a>Примеры\n\n```javascript\nOffice.context.document.bindings.getByIdAsync(\"MyBinding\", function (asyncResult) { \n    write(asyncResult.value.type); \n}) \n\n// Function that writes to a div with id='message' on the page. \nfunction write(message){ \n    document.getElementById('message').innerText += message;  \n}\n```"
