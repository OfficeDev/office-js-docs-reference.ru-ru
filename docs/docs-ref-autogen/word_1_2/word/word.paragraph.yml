### YamlMime:TSType
name: Word.Paragraph
uid: word!Word.Paragraph:class
package: word!
fullName: Word.Paragraph
summary: >-
  Представляет один абзац в выделении, диапазоне, элементе управления содержимым или тексте документа.


  \[[Набор API: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
remarks: ''
isPreview: false
isDeprecated: false
type: class
properties:
- name: alignment
  uid: word!Word.Paragraph#alignment:member
  package: word!
  fullName: alignment
  summary: >-
    Возвращает или задает выравнивание для абзаца. Возможные значения: left, centered, right и justified.


    \[[Набор API: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'alignment: Word.Alignment | "Mixed" | "Unknown" | "Left" | "Centered" | "Right" | "Justified";'
    return:
      type: <xref uid="word!Word.Alignment:enum" /> | "Mixed" | "Unknown" | "Left" | "Centered" | "Right" | "Justified"
      description: "\n\n#### <a name=\"examples\"></a>Примеры\n\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/25-paragraph/paragraph-properties.yaml\nawait Word.run(async (context) => {\n  // Centers last paragraph alignment.\n  context.document.body.paragraphs.getLast().alignment = \"Centered\";\n\n  await context.sync();\n});\n```"
- name: contentControls
  uid: word!Word.Paragraph#contentControls:member
  package: word!
  fullName: contentControls
  summary: >-
    Получает коллекцию объектов управления содержимым в абзаце. Только для чтения.


    \[[Набор API: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly contentControls: Word.ContentControlCollection;'
    return:
      type: <xref uid="word!Word.ContentControlCollection:class" />
- name: context
  uid: word!Word.Paragraph#context:member
  package: word!
  fullName: context
  summary: Контекст запроса, связанный с объектом. Это связывает процесс надстройки с процессом ведущего приложения Office.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'context: RequestContext;'
    return:
      type: <xref uid="word!Word.RequestContext:class" />
- name: firstLineIndent
  uid: word!Word.Paragraph#firstLineIndent:member
  package: word!
  fullName: firstLineIndent
  summary: >-
    Возвращает или задает значение отступа первой строки или выступа в пунктах. Для установки отступа первой строки укажите положительное значение и используйте отрицательное значение, чтобы задать выступ.


    \[[Набор API: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'firstLineIndent: number;'
    return:
      type: number
- name: font
  uid: word!Word.Paragraph#font:member
  package: word!
  fullName: font
  summary: >-
    Возвращает формат текста абзаца. Используйте это свойство для получения и задания имени, размера, цвета и других свойств шрифта. Только для чтения.


    \[[Набор API: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly font: Word.Font;'
    return:
      type: <xref uid="word!Word.Font:class" />
- name: inlinePictures
  uid: word!Word.Paragraph#inlinePictures:member
  package: word!
  fullName: inlinePictures
  summary: >-
    Получает коллекцию объектов InlinePicture в абзаце. Коллекция не содержит плавающие рисунки. Только для чтения.


    \[[Набор API: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly inlinePictures: Word.InlinePictureCollection;'
    return:
      type: <xref uid="word!Word.InlinePictureCollection:class" />
- name: leftIndent
  uid: word!Word.Paragraph#leftIndent:member
  package: word!
  fullName: leftIndent
  summary: >-
    Возвращает или задает значение отступа слева для абзаца (в пунктах).


    \[[Набор API: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'leftIndent: number;'
    return:
      type: number
      description: "\n\n#### <a name=\"examples\"></a>Примеры\n\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/25-paragraph/paragraph-properties.yaml\nawait Word.run(async (context) => {\n  // Indents the first paragraph.\n  context.document.body.paragraphs.getFirst().leftIndent = 75; //units = points\n\n  return context.sync();\n});\n```"
- name: lineSpacing
  uid: word!Word.Paragraph#lineSpacing:member
  package: word!
  fullName: lineSpacing
  summary: >-
    Возвращает или задает междустрочный интервал для указанного абзаца (в пунктах). В пользовательском интерфейсе Word это значение делится на 12.


    \[[Набор API: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'lineSpacing: number;'
    return:
      type: number
      description: "\n\n#### <a name=\"examples\"></a>Примеры\n\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/25-paragraph/paragraph-properties.yaml\nawait Word.run(async (context) => {\n  // Adjusts line spacing.\n  context.document.body.paragraphs.getFirst().lineSpacing = 20;\n\n  await context.sync();\n});\n```"
- name: lineUnitAfter
  uid: word!Word.Paragraph#lineUnitAfter:member
  package: word!
  fullName: lineUnitAfter
  summary: >-
    Получает или задает интервал между строками сетки после абзаца.


    \[[Набор API: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'lineUnitAfter: number;'
    return:
      type: number
- name: lineUnitBefore
  uid: word!Word.Paragraph#lineUnitBefore:member
  package: word!
  fullName: lineUnitBefore
  summary: >-
    Возвращает или устанавливает междустрочный интервал до абзаца (в линиях сетки).


    \[[Набор API: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'lineUnitBefore: number;'
    return:
      type: number
- name: outlineLevel
  uid: word!Word.Paragraph#outlineLevel:member
  package: word!
  fullName: outlineLevel
  summary: >-
    Возвращает или задает уровень структуры абзаца.


    \[[Набор API: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'outlineLevel: number;'
    return:
      type: number
- name: parentContentControl
  uid: word!Word.Paragraph#parentContentControl:member
  package: word!
  fullName: parentContentControl
  summary: >-
    Возвращает элемент управления содержимым, содержащий абзац. Если родительского управления содержимым не существует, высылается ошибка. Только для чтения.


    \[[Набор API: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly parentContentControl: Word.ContentControl;'
    return:
      type: <xref uid="word!Word.ContentControl:class" />
- name: rightIndent
  uid: word!Word.Paragraph#rightIndent:member
  package: word!
  fullName: rightIndent
  summary: >-
    Возвращает или задает значение отступа справа для абзаца (в пунктах).


    \[[Набор API: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'rightIndent: number;'
    return:
      type: number
- name: spaceAfter
  uid: word!Word.Paragraph#spaceAfter:member
  package: word!
  fullName: spaceAfter
  summary: >-
    Возвращает или задает междустрочный интервал после абзаца (в пунктах).


    \[[Набор API: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'spaceAfter: number;'
    return:
      type: number
      description: "\n\n#### <a name=\"examples\"></a>Примеры\n\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/25-paragraph/paragraph-properties.yaml\nawait Word.run(async (context) => {\n  // Adjust space between paragraphs.\n  context.document.body.paragraphs.getFirst().spaceAfter = 20;\n\n  await context.sync();\n});\n```"
- name: spaceBefore
  uid: word!Word.Paragraph#spaceBefore:member
  package: word!
  fullName: spaceBefore
  summary: >-
    Возвращает или задает междустрочный интервал до абзаца (в пунктах).


    \[[Набор API: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'spaceBefore: number;'
    return:
      type: number
- name: style
  uid: word!Word.Paragraph#style:member
  package: word!
  fullName: style
  summary: >-
    Получает или задает имя стиля абзаца. Используйте это свойство для пользовательских стилей и локализованных имен стилей. Чтобы использовать встроенные стили, поддерживающие несколько языковых стандартов, применяйте свойство styleBuiltIn.


    \[[Набор API: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'style: string;'
    return:
      type: string
- name: text
  uid: word!Word.Paragraph#text:member
  package: word!
  fullName: text
  summary: >-
    Возвращает текст абзаца. Только для чтения.


    \[[Набор API: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly text: string;'
    return:
      type: string
      description: "\n\n#### <a name=\"examples\"></a>Примеры\n\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/25-paragraph/get-paragraph-on-insertion-point.yaml\nawait Word.run(async (context) => {\n  // The collection of paragraphs of the current selection returns the full paragraphs contained in it.\n  let paragraph = context.document.getSelection().paragraphs.getFirst();\n  paragraph.load(\"text\");\n\n  await context.sync();\n  console.log(paragraph.text);\n});\n```"
methods:
- name: clear()
  uid: word!Word.Paragraph#clear:member(1)
  package: word!
  fullName: clear()
  summary: >-
    Очищает содержимое объекта абзаца. Пользователь может отменить операцию для очищенного содержимого.


    \[[Набор API: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'clear(): void;'
    return:
      type: void
      description: "\n\n#### <a name=\"examples\"></a>Примеры\n\n```javascript\n// Run a batch operation against the Word object model.\nWord.run(function (context) {\n\n    // Create a proxy object for the paragraphs collection.\n    var paragraphs = context.document.body.paragraphs;\n\n    // Queue a command to load the style property for all of the paragraphs.\n    context.load(paragraphs, 'style');\n\n    // Synchronize the document state by executing the queued commands,\n    // and return a promise to indicate task completion.\n    return context.sync().then(function () {\n\n        // Queue a command to clear the contents of the first paragraph.\n        paragraphs.items[0].clear();\n\n        // Synchronize the document state by executing the queued commands,\n        // and return a promise to indicate task completion.\n        return context.sync().then(function () {\n            console.log('Cleared the contents of the first paragraph.');\n        });\n    });\n})\n.catch(function (error) {\n    console.log('Error: ' + JSON.stringify(error));\n    if (error instanceof OfficeExtension.Error) {\n        console.log('Debug info: ' + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: delete()
  uid: word!Word.Paragraph#delete:member(1)
  package: word!
  fullName: delete()
  summary: >-
    Удаляет абзац и его содержимое из документа.


    \[[Набор API: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'delete(): void;'
    return:
      type: void
      description: "\n\n#### <a name=\"examples\"></a>Примеры\n\n```javascript\n// Run a batch operation against the Word object model.\nWord.run(function (context) {\n\n    // Create a proxy object for the paragraphs collection.\n    var paragraphs = context.document.body.paragraphs;\n\n    // Queue a command to load the text property for all of the paragraphs.\n    context.load(paragraphs, 'text');\n\n    // Synchronize the document state by executing the queued commands,\n    // and return a promise to indicate task completion.\n    return context.sync().then(function () {\n\n        // Queue a command to delete the first paragraph.\n        paragraphs.items[0].delete();\n\n        // Synchronize the document state by executing the queued commands,\n        // and return a promise to indicate task completion.\n        return context.sync().then(function () {\n            console.log('Deleted the first paragraph.');\n        });\n    });\n})\n.catch(function (error) {\n    console.log('Error: ' + JSON.stringify(error));\n    if (error instanceof OfficeExtension.Error) {\n        console.log('Debug info: ' + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: getHtml()
  uid: word!Word.Paragraph#getHtml:member(1)
  package: word!
  fullName: getHtml()
  summary: >-
    Получает HTML-представление объекта абзаца. При отрисовке на веб-странице или в htmL-представлении форматирование будет близко, но не точно, совпадает с форматированием документа. Этот метод не возвращает точно такой же HTML-код для одного и того же документа на различных платформах (Windows, Mac, Word в Интернете и т. д.). Если вам нужна точную точности или согласованность на разных платформах, используйте и преобразуем `Paragraph.getOoxml()` возвращенный XML-код в HTML.


    \[[Набор API: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getHtml(): OfficeExtension.ClientResult<string>;'
    return:
      type: <xref uid="office!OfficeExtension.ClientResult:class" />&lt;string&gt;
      description: "\n\n#### <a name=\"examples\"></a>Примеры\n\n```javascript\n// Run a batch operation against the Word object model.\nWord.run(function (context) {\n\n    // Create a proxy object for the paragraphs collection.\n    var paragraphs = context.document.body.paragraphs;\n\n    // Queue a command to load the style property for all of the paragraphs.\n    context.load(paragraphs, 'style');\n\n    // Synchronize the document state by executing the queued commands,\n    // and return a promise to indicate task completion.\n    return context.sync().then(function () {\n\n        // Queue a a set of commands to get the HTML of the first paragraph.\n        var html = paragraphs.items[0].getHtml();\n\n        // Synchronize the document state by executing the queued commands,\n        // and return a promise to indicate task completion.\n        return context.sync().then(function () {\n            console.log('Paragraph HTML: ' + html.value);\n        });\n    });\n})\n.catch(function (error) {\n    console.log('Error: ' + JSON.stringify(error));\n    if (error instanceof OfficeExtension.Error) {\n        console.log('Debug info: ' + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: getOoxml()
  uid: word!Word.Paragraph#getOoxml:member(1)
  package: word!
  fullName: getOoxml()
  summary: >-
    Возвращает OOXML-представление объекта абзаца.


    \[[Набор API: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getOoxml(): OfficeExtension.ClientResult<string>;'
    return:
      type: <xref uid="office!OfficeExtension.ClientResult:class" />&lt;string&gt;
      description: "\n\n#### <a name=\"examples\"></a>Примеры\n\n```javascript\n// Run a batch operation against the Word object model.\nWord.run(function (context) {\n\n    // Create a proxy object for the paragraphs collection.\n    var paragraphs = context.document.body.paragraphs;\n\n    // Queue a command to load the style property for the top 2 paragraphs.\n    context.load(paragraphs, {select: 'style', top: 2} );\n\n    // Synchronize the document state by executing the queued commands,\n    // and return a promise to indicate task completion.\n    return context.sync().then(function () {\n\n        // Queue a a set of commands to get the OOXML of the first paragraph.\n        var ooxml = paragraphs.items[0].getOoxml();\n\n        // Synchronize the document state by executing the queued commands,\n        // and return a promise to indicate task completion.\n        return context.sync().then(function () {\n            console.log('Paragraph OOXML: ' + ooxml.value);\n        });\n    });\n})\n.catch(function (error) {\n    console.log('Error: ' + JSON.stringify(error));\n    if (error instanceof OfficeExtension.Error) {\n        console.log('Debug info: ' + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: insertBreak(breakType, insertLocation)
  uid: word!Word.Paragraph#insertBreak:member(1)
  package: word!
  fullName: insertBreak(breakType, insertLocation)
  summary: >-
    Вставляет разрыв в указанном расположении в основном документе.


    \[[Набор API: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'insertBreak(breakType: Word.BreakType, insertLocation: Word.InsertLocation): void;'
    parameters:
    - id: breakType
      description: Обязательный параметр. Тип разрыва, который необходимо добавить в документ.
      type: <xref uid="word!Word.BreakType:enum" />
    - id: insertLocation
      description: 'Обязательный параметр. Возможные значения: Before и After.'
      type: <xref uid="word!Word.InsertLocation:enum" />
    return:
      type: void
      description: "\n\n#### <a name=\"examples\"></a>Примеры\n\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/25-paragraph/insert-line-and-page-breaks.yaml\nWord.run(async (context) => {\n  context.document.body.paragraphs.getFirst().insertBreak(Word.BreakType.line, \"After\");\n\n  await context.sync();\n  console.log(\"success\");\n});\n```"
- name: insertBreak(breakTypeString, insertLocation)
  uid: word!Word.Paragraph#insertBreak:member(2)
  package: word!
  fullName: insertBreak(breakTypeString, insertLocation)
  summary: >-
    Вставляет разрыв в указанном расположении в основном документе.


    \[[Набор API: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'insertBreak(breakTypeString: "Page" | "Next" | "SectionNext" | "SectionContinuous" | "SectionEven" | "SectionOdd" | "Line", insertLocation: "Before" | "After" | "Start" | "End" | "Replace"): void;'
    parameters:
    - id: breakTypeString
      description: Обязательный параметр. Тип разрыва, который необходимо добавить в документ.
      type: "\"Page\" | \"Next\" | \"SectionNext\" | \"SectionContinuous\" | \"SectionEven\" | \"SectionOdd\" | \"Line\""
    - id: insertLocation
      description: 'Обязательный параметр. Возможные значения: Before и After.'
      type: "\"Before\" | \"After\" | \"Start\" | \"End\" | \"Replace\""
    return:
      type: void
      description: "\n\n#### <a name=\"examples\"></a>Примеры\n\n```javascript\n// Run a batch operation against the Word object model.\nWord.run(function (context) {\n\n    // Create a proxy object for the paragraphs collection.\n    var paragraphs = context.document.body.paragraphs;\n\n    // Queue a command to load the style property for the top 2 paragraphs.\n    // We never perform an empty load. We always must request a property.\n    context.load(paragraphs, {select: 'style', top: 2} );\n\n    // Synchronize the document state by executing the queued commands,\n    // and return a promise to indicate task completion.\n    return context.sync().then(function () {\n\n        // Queue a command to get the first paragraph.\n        var paragraph = paragraphs.items[0];\n\n        // Queue a command to insert a page break after the first paragraph.\n        paragraph.insertBreak('page', 'After');\n\n        // Synchronize the document state by executing the queued commands,\n        // and return a promise to indicate task completion.\n        return context.sync().then(function () {\n            console.log('Inserted a page break after the paragraph.');\n        });\n    });\n})\n.catch(function (error) {\n    console.log('Error: ' + JSON.stringify(error));\n    if (error instanceof OfficeExtension.Error) {\n        console.log('Debug info: ' + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: insertContentControl()
  uid: word!Word.Paragraph#insertContentControl:member(1)
  package: word!
  fullName: insertContentControl()
  summary: >-
    Включает объект абзаца в элемент управления содержимым форматированного текста.


    \[[Набор API: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'insertContentControl(): Word.ContentControl;'
    return:
      type: <xref uid="word!Word.ContentControl:class" />
      description: "\n\n#### <a name=\"examples\"></a>Примеры\n\n```javascript\n// Run a batch operation against the Word object model.\nWord.run(function (context) {\n\n    // Create a proxy object for the paragraphs collection.\n    var paragraphs = context.document.body.paragraphs;\n\n    // Queue a command to load the style property for the top 2 paragraphs.\n    // We never perform an empty load. We always must request a property.\n    context.load(paragraphs, {select: 'style', top: 2} );\n\n    // Synchronize the document state by executing the queued commands,\n    // and return a promise to indicate task completion.\n    return context.sync().then(function () {\n\n        // Queue a command to get the first paragraph.\n        var paragraph = paragraphs.items[0];\n\n        // Queue a command to wrap the first paragraph in a rich text content control.\n        paragraph.insertContentControl();\n\n        // Synchronize the document state by executing the queued commands,\n        // and return a promise to indicate task completion.\n        return context.sync().then(function () {\n            console.log('Wrapped the first paragraph in a content control.');\n        });\n    });\n})\n.catch(function (error) {\n    console.log('Error: ' + JSON.stringify(error));\n    if (error instanceof OfficeExtension.Error) {\n        console.log('Debug info: ' + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: insertFileFromBase64(base64File, insertLocation)
  uid: word!Word.Paragraph#insertFileFromBase64:member(1)
  package: word!
  fullName: insertFileFromBase64(base64File, insertLocation)
  summary: >-
    Вставляет документ в абзац в указанном расположении.


    \[[Набор API: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'insertFileFromBase64(base64File: string, insertLocation: Word.InsertLocation): Word.Range;'
    parameters:
    - id: base64File
      description: Обязательный. Содержимое DOCX-файла в кодированном коде base64.
      type: string
    - id: insertLocation
      description: 'Обязательный параметр. Возможные значения: Replace, Start или End.'
      type: <xref uid="word!Word.InsertLocation:enum" />
    return:
      type: <xref uid="word!Word.Range:class" />
      description: ''
- name: insertFileFromBase64(base64File, insertLocationString)
  uid: word!Word.Paragraph#insertFileFromBase64:member(2)
  package: word!
  fullName: insertFileFromBase64(base64File, insertLocationString)
  summary: >-
    Вставляет документ в абзац в указанном расположении.


    \[[Набор API: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'insertFileFromBase64(base64File: string, insertLocationString: "Before" | "After" | "Start" | "End" | "Replace"): Word.Range;'
    parameters:
    - id: base64File
      description: Обязательный. Содержимое DOCX-файла в кодированном коде base64.
      type: string
    - id: insertLocationString
      description: 'Обязательный параметр. Возможные значения: Replace, Start или End.'
      type: "\"Before\" | \"After\" | \"Start\" | \"End\" | \"Replace\""
    return:
      type: <xref uid="word!Word.Range:class" />
      description: ''
- name: insertHtml(html, insertLocation)
  uid: word!Word.Paragraph#insertHtml:member(1)
  package: word!
  fullName: insertHtml(html, insertLocation)
  summary: >-
    Вставляет HTML в абзац в указанном расположении.


    \[[Набор API: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'insertHtml(html: string, insertLocation: Word.InsertLocation): Word.Range;'
    parameters:
    - id: html
      description: Обязательный параметр. HTML-код, который необходимо вставить в абзац.
      type: string
    - id: insertLocation
      description: 'Обязательный параметр. Возможные значения: Replace, Start или End.'
      type: <xref uid="word!Word.InsertLocation:enum" />
    return:
      type: <xref uid="word!Word.Range:class" />
      description: "\n\n#### <a name=\"examples\"></a>Примеры\n\n```javascript\n// Run a batch operation against the Word object model.\nWord.run(function (context) {\n\n    // Create a proxy object for the paragraphs collection.\n    var paragraphs = context.document.body.paragraphs;\n\n    // Queue a command to load the style property for the top 2 paragraphs.\n    // We never perform an empty load. We always must request a property.\n    context.load(paragraphs, {select: 'style', top: 2} );\n\n    // Synchronize the document state by executing the queued commands,\n    // and return a promise to indicate task completion.\n    return context.sync().then(function () {\n\n        // Queue a command to get the first paragraph.\n        var paragraph = paragraphs.items[0];\n\n        // Queue a command to insert HTML content at the end of the first paragraph.\n        paragraph.insertHtml('<strong>Inserted HTML.</strong>', Word.InsertLocation.end);\n\n        // Synchronize the document state by executing the queued commands,\n        // and return a promise to indicate task completion.\n        return context.sync().then(function () {\n            console.log('Inserted HTML content at the end of the first paragraph.');\n        });\n    });\n})\n.catch(function (error) {\n    console.log('Error: ' + JSON.stringify(error));\n    if (error instanceof OfficeExtension.Error) {\n        console.log('Debug info: ' + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: insertHtml(html, insertLocationString)
  uid: word!Word.Paragraph#insertHtml:member(2)
  package: word!
  fullName: insertHtml(html, insertLocationString)
  summary: >-
    Вставляет HTML в абзац в указанном расположении.


    \[[Набор API: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'insertHtml(html: string, insertLocationString: "Before" | "After" | "Start" | "End" | "Replace"): Word.Range;'
    parameters:
    - id: html
      description: Обязательный параметр. HTML-код, который необходимо вставить в абзац.
      type: string
    - id: insertLocationString
      description: 'Обязательный параметр. Возможные значения: Replace, Start или End.'
      type: "\"Before\" | \"After\" | \"Start\" | \"End\" | \"Replace\""
    return:
      type: <xref uid="word!Word.Range:class" />
      description: ''
- name: insertInlinePictureFromBase64(base64EncodedImage, insertLocation)
  uid: word!Word.Paragraph#insertInlinePictureFromBase64:member(1)
  package: word!
  fullName: insertInlinePictureFromBase64(base64EncodedImage, insertLocation)
  summary: >-
    Вставляет рисунок в абзац в указанном расположении.


    \[[Набор API: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'insertInlinePictureFromBase64(base64EncodedImage: string, insertLocation: Word.InsertLocation): Word.InlinePicture;'
    parameters:
    - id: base64EncodedImage
      description: Обязательный. Изображение в коде base64, которое необходимо вставить.
      type: string
    - id: insertLocation
      description: 'Обязательный параметр. Возможные значения: Replace, Start или End.'
      type: <xref uid="word!Word.InsertLocation:enum" />
    return:
      type: <xref uid="word!Word.InlinePicture:class" />
      description: "\n\n#### <a name=\"examples\"></a>Примеры\n\n```javascript\n// Run a batch operation against the Word object model.\nWord.run(function (context) {\n\n    // Create a proxy object for the paragraphs collection.\n    var paragraphs = context.document.body.paragraphs;\n\n    // Queue a command to load the style property for all of the paragraphs.\n    context.load(paragraphs, 'style');\n\n    // Synchronize the document state by executing the queued commands,\n    // and return a promise to indicate task completion.\n    return context.sync().then(function () {\n\n        // Queue a command to get the first paragraph.\n        var paragraph = paragraphs.items[0];\n\n        var b64encodedImg = \"iVBORw0KGgoAAAANSUhEUgAAAB4AAAANCAIAAAAxEEnAAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAACFSURBVDhPtY1BEoQwDMP6/0+XgIMTBAeYoTqso9Rkx1zG+tNj1H94jgGzeNSjteO5vtQQuG2seO0av8LzGbe3anzRoJ4ybm/VeKEerAEbAUpW4aWQCmrGFWykRzGBCnYy2ha3oAIq2MloW9yCCqhgJ6NtcQsqoIKdjLbFLaiACnYyf2fODbrjZcXfr2F4AAAAAElFTkSuQmCC\";\n\n        // Queue a command to insert a base64 encoded image at the beginning of the first paragraph.\n        paragraph.insertInlinePictureFromBase64(b64encodedImg, Word.InsertLocation.start);\n\n        // Synchronize the document state by executing the queued commands,\n        // and return a promise to indicate task completion.\n        return context.sync().then(function () {\n            console.log('Added an image to the first paragraph.');\n        });\n    });\n})\n.catch(function (error) {\n    console.log('Error: ' + JSON.stringify(error));\n    if (error instanceof OfficeExtension.Error) {\n        console.log('Debug info: ' + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: insertInlinePictureFromBase64(base64EncodedImage, insertLocationString)
  uid: word!Word.Paragraph#insertInlinePictureFromBase64:member(2)
  package: word!
  fullName: insertInlinePictureFromBase64(base64EncodedImage, insertLocationString)
  summary: >-
    Вставляет рисунок в абзац в указанном расположении.


    \[[Набор API: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'insertInlinePictureFromBase64(base64EncodedImage: string, insertLocationString: "Before" | "After" | "Start" | "End" | "Replace"): Word.InlinePicture;'
    parameters:
    - id: base64EncodedImage
      description: Обязательный. Изображение в коде base64, которое необходимо вставить.
      type: string
    - id: insertLocationString
      description: 'Обязательный параметр. Возможные значения: Replace, Start или End.'
      type: "\"Before\" | \"After\" | \"Start\" | \"End\" | \"Replace\""
    return:
      type: <xref uid="word!Word.InlinePicture:class" />
      description: ''
- name: insertOoxml(ooxml, insertLocation)
  uid: word!Word.Paragraph#insertOoxml:member(1)
  package: word!
  fullName: insertOoxml(ooxml, insertLocation)
  summary: >-
    Вставляет OOXML в абзац в указанном расположении.


    \[[Набор API: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'insertOoxml(ooxml: string, insertLocation: Word.InsertLocation): Word.Range;'
    parameters:
    - id: ooxml
      description: Обязательный. OOXML, который необходимо вставить в абзац.
      type: string
    - id: insertLocation
      description: 'Обязательный параметр. Возможные значения: Replace, Start или End.'
      type: <xref uid="word!Word.InsertLocation:enum" />
    return:
      type: <xref uid="word!Word.Range:class" />
      description: ''
- name: insertOoxml(ooxml, insertLocationString)
  uid: word!Word.Paragraph#insertOoxml:member(2)
  package: word!
  fullName: insertOoxml(ooxml, insertLocationString)
  summary: >-
    Вставляет OOXML в абзац в указанном расположении.


    \[[Набор API: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'insertOoxml(ooxml: string, insertLocationString: "Before" | "After" | "Start" | "End" | "Replace"): Word.Range;'
    parameters:
    - id: ooxml
      description: Обязательный. OOXML, который необходимо вставить в абзац.
      type: string
    - id: insertLocationString
      description: 'Обязательный параметр. Возможные значения: Replace, Start или End.'
      type: "\"Before\" | \"After\" | \"Start\" | \"End\" | \"Replace\""
    return:
      type: <xref uid="word!Word.Range:class" />
      description: ''
- name: insertParagraph(paragraphText, insertLocation)
  uid: word!Word.Paragraph#insertParagraph:member(1)
  package: word!
  fullName: insertParagraph(paragraphText, insertLocation)
  summary: >-
    Вставляет абзац в указанном расположении.


    \[[Набор API: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'insertParagraph(paragraphText: string, insertLocation: Word.InsertLocation): Word.Paragraph;'
    parameters:
    - id: paragraphText
      description: Обязательный параметр. Текст абзаца, который необходимо вставить.
      type: string
    - id: insertLocation
      description: 'Обязательный параметр. Возможные значения: Before и After.'
      type: <xref uid="word!Word.InsertLocation:enum" />
    return:
      type: <xref uid="word!Word.Paragraph:class" />
      description: "\n\n#### <a name=\"examples\"></a>Примеры\n\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/25-paragraph/insert-formatted-text.yaml\nawait Word.run(async (context) => {\n  // Second sentence, let's insert it as a paragraph after the previously inserted one.\n  let secondSentence = context.document.body.insertParagraph(\n    \"This is the first text with a custom style.\",\n    \"End\"\n  );\n  secondSentence.font.set({\n    bold: false,\n    italic: true,\n    name: \"Berlin Sans FB\",\n    color: \"blue\",\n    size: 30\n  });\n\n  await context.sync();\n});\n```"
- name: insertParagraph(paragraphText, insertLocationString)
  uid: word!Word.Paragraph#insertParagraph:member(2)
  package: word!
  fullName: insertParagraph(paragraphText, insertLocationString)
  summary: >-
    Вставляет абзац в указанном расположении.


    \[[Набор API: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'insertParagraph(paragraphText: string, insertLocationString: "Before" | "After" | "Start" | "End" | "Replace"): Word.Paragraph;'
    parameters:
    - id: paragraphText
      description: Обязательный параметр. Текст абзаца, который необходимо вставить.
      type: string
    - id: insertLocationString
      description: 'Обязательный параметр. Возможные значения: Before и After.'
      type: "\"Before\" | \"After\" | \"Start\" | \"End\" | \"Replace\""
    return:
      type: <xref uid="word!Word.Paragraph:class" />
      description: ''
- name: insertText(text, insertLocation)
  uid: word!Word.Paragraph#insertText:member(1)
  package: word!
  fullName: insertText(text, insertLocation)
  summary: >-
    Вставляет текст в абзац в указанном расположении.


    \[[Набор API: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'insertText(text: string, insertLocation: Word.InsertLocation): Word.Range;'
    parameters:
    - id: text
      description: Обязательный параметр. Текст, который необходимо вставить.
      type: string
    - id: insertLocation
      description: 'Обязательный параметр. Возможные значения: Replace, Start или End.'
      type: <xref uid="word!Word.InsertLocation:enum" />
    return:
      type: <xref uid="word!Word.Range:class" />
      description: "\n\n#### <a name=\"examples\"></a>Примеры\n\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/25-paragraph/insert-in-different-locations.yaml\nawait Word.run(async (context) => {\n  // Replace the last paragraph.\n  let range = context.document.body.paragraphs.getLast().insertText(\"Just replaced the last paragraph!\", \"Replace\");\n  range.font.highlightColor = \"black\";\n  range.font.color = \"white\";\n\n  await context.sync();\n});\n```"
- name: insertText(text, insertLocationString)
  uid: word!Word.Paragraph#insertText:member(2)
  package: word!
  fullName: insertText(text, insertLocationString)
  summary: >-
    Вставляет текст в абзац в указанном расположении.


    \[[Набор API: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'insertText(text: string, insertLocationString: "Before" | "After" | "Start" | "End" | "Replace"): Word.Range;'
    parameters:
    - id: text
      description: Обязательный параметр. Текст, который необходимо вставить.
      type: string
    - id: insertLocationString
      description: 'Обязательный параметр. Возможные значения: Replace, Start или End.'
      type: "\"Before\" | \"After\" | \"Start\" | \"End\" | \"Replace\""
    return:
      type: <xref uid="word!Word.Range:class" />
      description: ''
- name: load(options)
  uid: word!Word.Paragraph#load:member(1)
  package: word!
  fullName: load(options)
  summary: Добавляет в очередь команду для загрузки указанных свойств объекта. Перед чтением свойств требуется вызвать метод `context.sync()`.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'load(options?: Word.Interfaces.ParagraphLoadOptions): Word.Paragraph;'
    parameters:
    - id: options
      description: Предоставляет параметры, для которых загружаются свойства объекта.
      type: <xref uid="word!Word.Interfaces.ParagraphLoadOptions:interface" />
    return:
      type: <xref uid="word!Word.Paragraph:class" />
      description: ''
- name: load(propertyNames)
  uid: word!Word.Paragraph#load:member(2)
  package: word!
  fullName: load(propertyNames)
  summary: Добавляет в очередь команду для загрузки указанных свойств объекта. Перед чтением свойств требуется вызвать метод `context.sync()`.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'load(propertyNames?: string | string[]): Word.Paragraph;'
    parameters:
    - id: propertyNames
      description: Строка с делегировкой запятой или массив строк, которые указывают свойства для загрузки.
      type: string | string[]
    return:
      type: <xref uid="word!Word.Paragraph:class" />
      description: ''
- name: load(propertyNamesAndPaths)
  uid: word!Word.Paragraph#load:member(3)
  package: word!
  fullName: load(propertyNamesAndPaths)
  summary: Добавляет в очередь команду для загрузки указанных свойств объекта. Перед чтением свойств требуется вызвать метод `context.sync()`.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: >-
      load(propertyNamesAndPaths?: {
                  select?: string;
                  expand?: string;
              }): Word.Paragraph;
    parameters:
    - id: propertyNamesAndPaths
      description: '`propertyNamesAndPaths.select` — это строка с делегировкой запятой, которая указывает свойства для загрузки и является строкой с делегировкой запятой, которая определяет свойства навигации для `propertyNamesAndPaths.expand` загрузки.'
      type: >-
        {
                    select?: string;
                    expand?: string;
                }
    return:
      type: <xref uid="word!Word.Paragraph:class" />
      description: ''
- name: search(searchText, searchOptions)
  uid: word!Word.Paragraph#search:member(1)
  package: word!
  fullName: search(searchText, searchOptions)
  summary: >-
    Выполняет поиск с указанным Объектом SearchOptions в области объекта абзаца. Результат поиска — это коллекция объектов диапазона.


    \[[Набор API: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: >-
      search(searchText: string, searchOptions?: Word.SearchOptions | {
                  ignorePunct?: boolean;
                  ignoreSpace?: boolean;
                  matchCase?: boolean;
                  matchPrefix?: boolean;
                  matchSuffix?: boolean;
                  matchWholeWord?: boolean;
                  matchWildcards?: boolean;
              }): Word.RangeCollection;
    parameters:
    - id: searchText
      description: Обязательный параметр. Текст для поиска.
      type: string
    - id: searchOptions
      description: Необязательный параметр. Параметры поиска.
      type: >-
        <xref uid="word!Word.SearchOptions:class" /> | {
                    ignorePunct?: boolean;
                    ignoreSpace?: boolean;
                    matchCase?: boolean;
                    matchPrefix?: boolean;
                    matchSuffix?: boolean;
                    matchWholeWord?: boolean;
                    matchWildcards?: boolean;
                }
    return:
      type: <xref uid="word!Word.RangeCollection:class" />
      description: ''
- name: select(selectionMode)
  uid: word!Word.Paragraph#select:member(1)
  package: word!
  fullName: select(selectionMode)
  summary: >-
    Выбирает абзац и переходит к нему в пользовательском интерфейсе Word.


    \[[Набор API: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'select(selectionMode?: Word.SelectionMode): void;'
    parameters:
    - id: selectionMode
      description: 'Необязательный параметр. Возможные режимы выбора: Select, Start и End. Значение по умолчанию — Select.'
      type: <xref uid="word!Word.SelectionMode:enum" />
    return:
      type: void
      description: "\n\n#### <a name=\"examples\"></a>Примеры\n\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/35-ranges/scroll-to-range.yaml\nawait Word.run(async (context) => {\n  // If select is called with no parameters, it selects the object.\n  context.document.body.paragraphs.getLast().select();\n\n  await context.sync();\n});\n```\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/35-ranges/scroll-to-range.yaml\nawait Word.run(async (context) => {\n  // Select can be at the start or end of a range; this by definition moves the insertion point without selecting the range.\n  context.document.body.paragraphs.getLast().select(\"End\");\n\n  await context.sync();\n});\n```"
- name: select(selectionModeString)
  uid: word!Word.Paragraph#select:member(2)
  package: word!
  fullName: select(selectionModeString)
  summary: >-
    Выбирает абзац и переходит к нему в пользовательском интерфейсе Word.


    \[[Набор API: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'select(selectionModeString?: "Select" | "Start" | "End"): void;'
    parameters:
    - id: selectionModeString
      description: 'Необязательный параметр. Возможные режимы выбора: Select, Start и End. Значение по умолчанию — Select.'
      type: "\"Select\" | \"Start\" | \"End\""
    return:
      type: void
      description: ''
- name: set(properties, options)
  uid: word!Word.Paragraph#set:member(1)
  package: word!
  fullName: set(properties, options)
  summary: Задает несколько свойств объекта одновременно. Можно передать либо обычный объект с соответствующими свойствами, либо другой объект API того же типа.
  remarks: >-
    Этот метод имеет следующую дополнительную подпись:


    `set(properties: Word.Paragraph): void`


    #### <a name="examples"></a>Примеры


    ```typescript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/90-scenarios/multiple-property-set.yaml

    await Word.run(async (context) => {
      const paragraph = context.document.body.paragraphs.getFirst();
      paragraph.set({
        leftIndent: 30,
        font: {
          bold: true,
          color: "red"
        }
      });

      await context.sync();
    });

    ```

    ```typescript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/90-scenarios/multiple-property-set.yaml

    await Word.run(async (context) => {
      const firstParagraph = context.document.body.paragraphs.getFirst();
      const secondParagraph = firstParagraph.getNext();
      firstParagraph.load("text, font/color, font/bold, leftIndent");

      await context.sync();

      secondParagraph.set(firstParagraph);

      await context.sync();
    });

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'set(properties: Interfaces.ParagraphUpdateData, options?: OfficeExtension.UpdateOptions): void;'
    parameters:
    - id: properties
      description: Объект JavaScript со структурированными свойствами изоморфически перенастройно со свойствами объекта, для которого вызван метод.
      type: <xref uid="word!Word.Interfaces.ParagraphUpdateData:interface" />
    - id: options
      description: Предоставляет возможность подавления ошибок, если объект свойств пытается установить свойства только для чтения.
      type: <xref uid="office!OfficeExtension.UpdateOptions:interface" />
    return:
      type: void
      description: ''
- name: set(properties)
  uid: word!Word.Paragraph#set:member(2)
  package: word!
  fullName: set(properties)
  summary: Задает несколько свойств объекта одновременно на основе существующего загруженного объекта.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'set(properties: Word.Paragraph): void;'
    parameters:
    - id: properties
      description: ''
      type: <xref uid="word!Word.Paragraph:class" />
    return:
      type: void
      description: ''
- name: toJSON()
  uid: word!Word.Paragraph#toJSON:member(1)
  package: word!
  fullName: toJSON()
  summary: Переопределяет метод JavaScript, чтобы обеспечить более полезные выходные данные при передании объекта `toJSON()` API `JSON.stringify()`<!-- -->. (`JSON.stringify`<!-- -->, в свою очередь, вызывает метод объекта, `toJSON` который передается ему.) В то время как исходный объект Word.Paragraph является объектом API, метод возвращает обычный объект `toJSON` JavaScript (тип `Word.Interfaces.ParagraphData`<!-- -->), который содержит неглубокие копии всех загруженных свойств из исходного объекта.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'toJSON(): Word.Interfaces.ParagraphData;'
    return:
      type: <xref uid="word!Word.Interfaces.ParagraphData:interface" />
      description: ''
- name: track()
  uid: word!Word.Paragraph#track:member(1)
  package: word!
  fullName: track()
  summary: Отслеживает объект для автоматической корректировки с учетом окружающих изменений в документе. Этот вызов является кратким `context.trackedObjects.add(thisObject)`<!-- -->. Если вы используете этот объект во всех вызовах и вне последовательного выполнения пакета ".run" и получаете ошибку InvalidObjectPath при установке свойства или вызове метода для объекта, необходимо было добавить объект в отслеживаемую коллекцию объектов при первом создании `.sync` объекта.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'track(): Word.Paragraph;'
    return:
      type: <xref uid="word!Word.Paragraph:class" />
      description: ''
- name: untrack()
  uid: word!Word.Paragraph#untrack:member(1)
  package: word!
  fullName: untrack()
  summary: Освобождает память, связанную с этим объектом, если он ранее отслеживался. Этот вызов является кратким для `context.trackedObjects.remove(thisObject)`<!-- -->. Наличие большого количества отслеживаемых объектов замедляет ведущее приложение, поэтому не забывайте освобождать любые добавленные объекты после завершения их использования. Вам потребуется позвонить, `context.sync()` прежде чем выпуск памяти вступает в силу.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'untrack(): Word.Paragraph;'
    return:
      type: <xref uid="word!Word.Paragraph:class" />
      description: ''
extends: <xref uid="office!OfficeExtension.ClientObject:class" />
metadata:
  ms.openlocfilehash: 148283d4712bced65021abdb9273c093824aa8db
  ms.sourcegitcommit: d14ccd5d21286fdad1d3451f3ac745c603d9400d
  ms.translationtype: MT
  ms.contentlocale: ru-RU
  ms.lasthandoff: 01/13/2021
  ms.locfileid: "49856634"
