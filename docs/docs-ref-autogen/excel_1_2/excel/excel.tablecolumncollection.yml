### YamlMime:UniversalReference
items:
  - uid: 'excel!Excel.TableColumnCollection:class'
    summary: |-
      Представляет коллекцию всех столбцов, включенных в таблицу.

      \[[Набор API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: Excel.TableColumnCollection
    fullName: Excel.TableColumnCollection
    langs:
      - typeScript
    type: class
    extends:
      - 'office!OfficeExtension.ClientObject:class'
    package: excel!
    children:
      - 'excel!Excel.TableColumnCollection#add:member(1)'
      - 'excel!Excel.TableColumnCollection#context:member'
      - 'excel!Excel.TableColumnCollection#count:member'
      - 'excel!Excel.TableColumnCollection#getItem:member(1)'
      - 'excel!Excel.TableColumnCollection#getItemAt:member(1)'
      - 'excel!Excel.TableColumnCollection#items:member'
      - 'excel!Excel.TableColumnCollection#load:member(1)'
      - 'excel!Excel.TableColumnCollection#load:member(2)'
      - 'excel!Excel.TableColumnCollection#load:member(3)'
      - 'excel!Excel.TableColumnCollection#toJSON:member(1)'
  - uid: 'excel!Excel.TableColumnCollection#add:member(1)'
    summary: |-
      Добавляет новый столбец в таблицу.

      \[[Набор API: для ExcelApi 1,1 требуется индекс меньше, чем общее количество столбцов; 1,4 разрешает необязательный индекс (null или-1) и добавляет столбец в параметр End; 1,4 разрешает параметр Name во время создания.](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]
    name: 'add(index, values, name)'
    fullName: 'add(index, values, name)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'add(index?: number, values?: Array<Array<boolean | string | number>> | boolean | string | number, name?: string): Excel.TableColumn;'
      return:
        type:
          - 'excel!Excel.TableColumn:class'
        description: |-


          #### <a name="examples"></a>Примеры

          ```javascript
          Excel.run(function (ctx) { 
              var tables = ctx.workbook.tables;
              var values = [["Sample"], ["Values"], ["For"], ["New"], ["Column"]];
              var column = tables.getItem("Table1").columns.add(null, values);
              column.load('name');
              return ctx.sync().then(function() {
                  console.log(column.name);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: index
          description: 'Необязательный. Определяет относительную позицию нового столбца. Если задано значение null или -1, столбец добавляется в конце. Столбцы с более высокими значениями индекса смещаются в сторону. Используется нулевой индекс.'
          type:
            - number
        - id: values
          description: Необязательный. Двухмерный массив неформатированных значений столбца таблицы.
          type:
            - 'excel!Excel.TableColumnCollection#add~0:complex'
        - id: name
          description: 'Необязательный параметр. Задает имя нового столбца. Если значение пустое, используется имя по умолчанию.'
          type:
            - string
  - uid: 'excel!Excel.TableColumnCollection#context:member'
    summary: 'Контекст запроса, связанный с объектом. Это подсоединяет процесс надстройки к процессу ведущего приложения Office.'
    name: context
    fullName: context
    langs:
      - typeScript
    type: property
    syntax:
      content: 'context: RequestContext;'
      return:
        type:
          - 'excel!Excel.RequestContext:class'
  - uid: 'excel!Excel.TableColumnCollection#count:member'
    summary: |-
      Возвращает количество столбцов в таблице.

      \[[Набор API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: count
    fullName: count
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly count: number;'
      return:
        type:
          - number
  - uid: 'excel!Excel.TableColumnCollection#getItem:member(1)'
    summary: |-
      Возвращает объект column по имени или идентификатору.

      \[[Набор API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: getItem(key)
    fullName: getItem(key)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getItem(key: number | string): Excel.TableColumn;'
      return:
        type:
          - 'excel!Excel.TableColumn:class'
        description: |-


          #### <a name="examples"></a>Примеры

          ```javascript
          Excel.run(function (ctx) { 
              var tableColumn = ctx.workbook.tables.getItem('Table1').columns.getItem(0);
              tableColumn.load('name');
              return ctx.sync().then(function() {
                      console.log(tableColumn.name);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: key
          description: Имя или ИД столбца.
          type:
            - number | string
  - uid: 'excel!Excel.TableColumnCollection#getItemAt:member(1)'
    summary: |-
      Возвращает столбец на основании его позиции в коллекции.

      \[[Набор API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: getItemAt(index)
    fullName: getItemAt(index)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getItemAt(index: number): Excel.TableColumn;'
      return:
        type:
          - 'excel!Excel.TableColumn:class'
        description: |-


          #### <a name="examples"></a>Примеры

          ```javascript
          Excel.run(function (ctx) { 
              var tableColumn = ctx.workbook.tables.getItem['Table1'].columns.getItemAt(0);
              tableColumn.load('name');
              return ctx.sync().then(function() {
                      console.log(tableColumn.name);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: index
          description: Значение индекса получаемого объекта. Используется нулевой индекс.
          type:
            - number
  - uid: 'excel!Excel.TableColumnCollection#items:member'
    summary: Получает загруженные дочерние элементы в этой коллекции.
    name: items
    fullName: items
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly items: Excel.TableColumn[];'
      return:
        type:
          - 'excel!Excel.TableColumnCollection#items~0:complex'
  - uid: 'excel!Excel.TableColumnCollection#load:member(1)'
    summary: Добавляет в очередь команду для загрузки указанных свойств объекта. Перед чтением свойств `context.sync()` необходимо вызвать метод.
    name: load(options)
    fullName: load(options)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(options?: Excel.Interfaces.TableColumnCollectionLoadOptions & Excel.Interfaces.CollectionLoadOptions): Excel.TableColumnCollection;'
      return:
        type:
          - 'excel!Excel.TableColumnCollection:class'
        description: ''
      parameters:
        - id: options
          description: 'Предоставляет параметры, для которых загружается свойства объекта.'
          type:
            - 'excel!Excel.TableColumnCollection#load~0:complex'
  - uid: 'excel!Excel.TableColumnCollection#load:member(2)'
    summary: Добавляет в очередь команду для загрузки указанных свойств объекта. Перед чтением свойств `context.sync()` необходимо вызвать метод.
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): Excel.TableColumnCollection;'
      return:
        type:
          - 'excel!Excel.TableColumnCollection:class'
        description: |-


          #### <a name="examples"></a>Примеры

          ```javascript
          Excel.run(function (ctx) { 
              var tableColumns = ctx.workbook.tables.getItem('Table1').columns;
              tableColumns.load('items');
              return ctx.sync().then(function() {
                  console.log("tableColumns Count: " + tableColumns.count);
                  for (var i = 0; i < tableColumns.items.length; i++) {
                      console.log(tableColumns.items[i].name);
                  }
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: propertyNames
          description: 'Строка, разделенная запятыми, или массив строк, указывающий свойства для загрузки.'
          type:
            - 'string | string[]'
  - uid: 'excel!Excel.TableColumnCollection#load:member(3)'
    summary: Добавляет в очередь команду для загрузки указанных свойств объекта. Перед чтением свойств `context.sync()` необходимо вызвать метод.
    name: load(propertyNamesAndPaths)
    fullName: load(propertyNamesAndPaths)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNamesAndPaths?: OfficeExtension.LoadOption): Excel.TableColumnCollection;'
      return:
        type:
          - 'excel!Excel.TableColumnCollection:class'
        description: ''
      parameters:
        - id: propertyNamesAndPaths
          description: '`propertyNamesAndPaths.select`— Это строка с разделителями-запятыми, задающая свойства для `propertyNamesAndPaths.expand` загрузки и которая представляет собой строку с разделителями-запятыми, указывающую свойства навигации для загрузки.'
          type:
            - 'office!OfficeExtension.LoadOption:interface'
  - uid: 'excel!Excel.TableColumnCollection#toJSON:member(1)'
    summary: 'Переопределяет метод `toJSON()` JavaScript для предоставления более удобного вывода при передаче объекта API`JSON.stringify()`<!-- -->. (`JSON.stringify`<!-- -->, в свою очередь, вызывает `toJSON` метод объекта, который передается ему.) В то время как `Excel.TableColumnCollection` исходный объект является объектом API, `toJSON` метод возвращает простой объект JavaScript (тип`Excel.Interfaces.TableColumnCollectionData`<!-- -->), содержащий массив "Items" с неполноми копиями загруженных свойств из элементов коллекции.'
    name: toJSON()
    fullName: toJSON()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON(): Excel.Interfaces.TableColumnCollectionData;'
      return:
        type:
          - 'excel!Excel.Interfaces.TableColumnCollectionData:interface'
        description: ''
references:
  - uid: 'office!OfficeExtension.ClientObject:class'
    name: OfficeExtension.ClientObject
  - uid: 'excel!Excel.TableColumn:class'
    name: Excel.TableColumn
  - uid: 'excel!Excel.TableColumnCollection#add~0:complex'
    name: Array<Array<boolean | string | number>> | boolean | string | number
    fullName: Array<Array<boolean | string | number>> | boolean | string | number
    spec.typeScript:
      - uid: '!Array:interface'
        name: Array
        fullName: Array
      - name: <
        fullName: <
      - uid: '!Array:interface'
        name: Array
        fullName: Array
      - name: <boolean | string | number>> | boolean | string | number
        fullName: <boolean | string | number>> | boolean | string | number
  - uid: 'excel!Excel.RequestContext:class'
    name: RequestContext
  - uid: 'excel!Excel.TableColumnCollection#items~0:complex'
    name: 'Excel.TableColumn[]'
    fullName: 'Excel.TableColumn[]'
    spec.typeScript:
      - uid: 'excel!Excel.TableColumn:class'
        name: Excel.TableColumn
        fullName: Excel.TableColumn
      - name: '[]'
        fullName: '[]'
  - uid: 'excel!Excel.TableColumnCollection:class'
    name: Excel.TableColumnCollection
  - uid: 'excel!Excel.TableColumnCollection#load~0:complex'
    name: Excel.Interfaces.TableColumnCollectionLoadOptions & Excel.Interfaces.CollectionLoadOptions
    fullName: Excel.Interfaces.TableColumnCollectionLoadOptions & Excel.Interfaces.CollectionLoadOptions
    spec.typeScript:
      - uid: 'excel!Excel.Interfaces.TableColumnCollectionLoadOptions:interface'
        name: Excel.Interfaces.TableColumnCollectionLoadOptions
        fullName: Excel.Interfaces.TableColumnCollectionLoadOptions
      - name: ' & '
        fullName: ' & '
      - uid: 'excel!Excel.Interfaces.CollectionLoadOptions:interface'
        name: Excel.Interfaces.CollectionLoadOptions
        fullName: Excel.Interfaces.CollectionLoadOptions
  - uid: 'office!OfficeExtension.LoadOption:interface'
    name: OfficeExtension.LoadOption
  - uid: 'excel!Excel.Interfaces.TableColumnCollectionData:interface'
    name: Excel.Interfaces.TableColumnCollectionData