### YamlMime:UniversalReference
ms.openlocfilehash: c97558f3f40b4daa824c3cd7dd2feaea1d8164d2
ms.sourcegitcommit: beffe9455dace422e85b92f0105c54ff7b594cbf
ms.translationtype: MT
ms.contentlocale: ru-RU
ms.lasthandoff: 09/20/2018
ms.locfileid: "24050076"
items:
- uid: excel.Excel.TextConditionalFormat
  summary: >-
    <span data-ttu-id="fce16-101">Представляет условное форматирование текста.</span><span class="sxs-lookup"><span data-stu-id="fce16-101">Represents a specific text conditional format.</span></span>


    <span data-ttu-id="fce16-102">\[[Набор API-Интерфейсов: ExcelApi 1.6](/javascript/office/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="fce16-102">\[ [API set: ExcelApi 1.6](/javascript/office/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: Excel.TextConditionalFormat
  fullName: excel.Excel.TextConditionalFormat
  langs:
  - typeScript
  type: class
  extends:
  - OfficeExtension.ClientObject
  package: excel
  children:
  - excel.Excel.TextConditionalFormat.format
  - excel.Excel.TextConditionalFormat.load
  - excel.Excel.TextConditionalFormat.rule
  - excel.Excel.TextConditionalFormat.toJSON
- uid: excel.Excel.TextConditionalFormat.format
  summary: >-
    <span data-ttu-id="fce16-p101">Возвращает объект формата, который содержит шрифт, заливку, границы и другие свойства условного форматирования. Только для чтения.</span><span class="sxs-lookup"><span data-stu-id="fce16-p101">Returns a format object, encapsulating the conditional formats font, fill, borders, and other properties. Read-only.</span></span>


    <span data-ttu-id="fce16-105">\[[Набор API-Интерфейсов: ExcelApi 1.6](/javascript/office/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="fce16-105">\[ [API set: ExcelApi 1.6](/javascript/office/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: format
  fullName: excel.Excel.TextConditionalFormat.format
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly format: Excel.ConditionalRangeFormat;'
    return:
      type:
      - excel.Excel.ConditionalRangeFormat
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"fce16-106\">Примеры</span><span class=\"sxs-lookup\"><span data-stu-id=\"fce16-106\">Examples</span></span>\n\n```typescript\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\");\n    const range = sheet.getRange(\"B16:D18\");\n    const conditionalFormat = range.conditionalFormats\n        .add(Excel.ConditionalFormatType.containsText);\n    conditionalFormat.textComparison.format.font.color = \"red\";\n    conditionalFormat.textComparison.rule = { operator: Excel.ConditionalTextOperator.contains, text: \"Delayed\" };\n\n    await context.sync();\n});\n```"
- uid: excel.Excel.TextConditionalFormat.load
  summary: <span data-ttu-id="fce16-107">Очереди команды для загрузки указанного свойства объекта.</span><span class="sxs-lookup"><span data-stu-id="fce16-107">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="fce16-108">Перед чтением свойства необходимо вызвать «context.sync()».</span><span class="sxs-lookup"><span data-stu-id="fce16-108">You must call "context.sync()" before reading the properties.</span></span>
  remarks: >-
    <span data-ttu-id="fce16-109">В дополнение к подписи этот метод имеет следующие цифровые подписи.</span><span class="sxs-lookup"><span data-stu-id="fce16-109">In addition to this signature, this method has the following signatures:</span></span>


    <span data-ttu-id="fce16-110">`load(option?: { select?: string; expand?: string; }): Excel.TextConditionalFormat`-Option.select — это разделенный запятыми строка, указывающая свойства для загрузки, куда options.expand — это разделенный запятыми строка, указывающая свойства навигации для загрузки.</span><span class="sxs-lookup"><span data-stu-id="fce16-110">`load(option?: { select?: string; expand?: string; }): Excel.TextConditionalFormat` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.</span></span>


    <span data-ttu-id="fce16-111">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.TextConditionalFormat`-Доступно только на коллекцию типов.</span><span class="sxs-lookup"><span data-stu-id="fce16-111">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.TextConditionalFormat` - Only available on collection types.</span></span> <span data-ttu-id="fce16-112">Это похоже на предыдущую.</span><span class="sxs-lookup"><span data-stu-id="fce16-112">It is similar to the preceding signature.</span></span> <span data-ttu-id="fce16-113">Option.Top указывает максимальное число элементов коллекции, которые можно включить в результат.</span><span class="sxs-lookup"><span data-stu-id="fce16-113">Option.top specifies the maximum number of collection items that can be included in the result.</span></span> <span data-ttu-id="fce16-114">Option.Skip указывает количество элементов, которые пропускаются и не включенный в результате.</span><span class="sxs-lookup"><span data-stu-id="fce16-114">Option.skip specifies the number of items that are to be skipped and not included in the result.</span></span> <span data-ttu-id="fce16-115">Если option.top указан, результирующий набор будет запущен процесс после пропускает указанное число элементов.</span><span class="sxs-lookup"><span data-stu-id="fce16-115">If option.top is specified, the result set will start after skipping the specified number of items.</span></span>
  name: load(option)
  fullName: excel.Excel.TextConditionalFormat.load
  langs:
  - typeScript
  type: method
  syntax:
    content: 'load(option?: string | string[]): Excel.TextConditionalFormat;'
    return:
      type:
      - excel.Excel.TextConditionalFormat
      description: ''
    parameters:
    - id: option
      description: <span data-ttu-id="fce16-116">Строка, разделенных запятыми или массив строк, задающих свойства для загрузки.</span><span class="sxs-lookup"><span data-stu-id="fce16-116">A comma-delimited string or an array of strings that specify the properties to load.</span></span>
      type:
      - string | string[]
- uid: excel.Excel.TextConditionalFormat.rule
  summary: >-
    <span data-ttu-id="fce16-117">Правило условного форматирования.</span><span class="sxs-lookup"><span data-stu-id="fce16-117">The rule of the conditional format.</span></span>


    <span data-ttu-id="fce16-118">\[[Набор API-Интерфейсов: ExcelApi 1.6](/javascript/office/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="fce16-118">\[ [API set: ExcelApi 1.6](/javascript/office/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: rule
  fullName: excel.Excel.TextConditionalFormat.rule
  langs:
  - typeScript
  type: property
  syntax:
    content: 'rule: Excel.ConditionalTextComparisonRule;'
    return:
      type:
      - excel.Excel.ConditionalTextComparisonRule
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"fce16-119\">Примеры</span><span class=\"sxs-lookup\"><span data-stu-id=\"fce16-119\">Examples</span></span>\n\n```typescript\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\");\n    const range = sheet.getRange(\"B16:D18\");\n    const conditionalFormat = range.conditionalFormats\n        .add(Excel.ConditionalFormatType.containsText);\n    conditionalFormat.textComparison.format.font.color = \"red\";\n    conditionalFormat.textComparison.rule = { operator: Excel.ConditionalTextOperator.contains, text: \"Delayed\" };\n\n    await context.sync();\n});\n```"
- uid: excel.Excel.TextConditionalFormat.toJSON
  name: toJSON()
  fullName: excel.Excel.TextConditionalFormat.toJSON
  langs:
  - typeScript
  type: method
  syntax:
    content: 'toJSON(): Excel.Interfaces.TextConditionalFormatData;'
    return:
      type:
      - excel.Excel.Interfaces.TextConditionalFormatData
      description: ''
