### YamlMime:UniversalReference
ms.openlocfilehash: ccfdf73d1fc28144bb0ddd14401d9171e6de70e2
ms.sourcegitcommit: 016e17422cf62dc9f1de1809666e9244e41cc1a9
ms.translationtype: MT
ms.contentlocale: ru-RU
ms.lasthandoff: 11/09/2018
ms.locfileid: "26229433"
items:
- uid: excel.Excel.BindingCollection
  summary: >-
    Представляет коллекцию всех объектов привязки, включенных в книгу.


    \[[Набор API-Интерфейсов: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: Excel.BindingCollection
  fullName: Excel.BindingCollection
  langs:
  - typeScript
  type: class
  extends:
  - OfficeExtension.ClientObject
  package: excel
  children:
  - excel.Excel.BindingCollection.add
  - excel.Excel.BindingCollection.addFromNamedItem
  - excel.Excel.BindingCollection.addFromSelection
  - excel.Excel.BindingCollection.count
  - excel.Excel.BindingCollection.getCount
  - excel.Excel.BindingCollection.getItem
  - excel.Excel.BindingCollection.getItemAt
  - excel.Excel.BindingCollection.getItemOrNullObject
  - excel.Excel.BindingCollection.items
  - excel.Excel.BindingCollection.load
  - excel.Excel.BindingCollection.toJSON
- uid: excel.Excel.BindingCollection.add
  summary: >-
    Добавляет привязку к определенному объекту Range.


    \[[Набор API-Интерфейсов: ExcelApi 1.3](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: add(range, bindingType, id)
  fullName: add
  langs:
  - typeScript
  type: method
  syntax:
    content: 'add(range: Range | string, bindingType: Excel.BindingType, id: string): Excel.Binding;'
    return:
      type:
      - excel.Excel.Binding
      description: ''
    parameters:
    - id: range
      description: Диапазон для привязки. Это может быть определенный в Excel объект Range или строка. Строка должна включать полный адрес, включающий имя листа.
      type:
      - Range | string
    - id: bindingType
      description: Тип привязки. В разделе Excel.BindingType.
      type:
      - excel.Excel.BindingType
    - id: id
      description: Имя привязки.
      type:
      - string
- uid: excel.Excel.BindingCollection.addFromNamedItem
  summary: >-
    Добавляет новую привязку с учетом именованного элемента в книге. Если именованный элемент ссылки на несколько областей, будет возвращена ошибка «InvalidReference».


    \[[Набор API-Интерфейсов: ExcelApi 1.3](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: addFromNamedItem(name, bindingType, id)
  fullName: addFromNamedItem
  langs:
  - typeScript
  type: method
  syntax:
    content: 'addFromNamedItem(name: string, bindingType: Excel.BindingType, id: string): Excel.Binding;'
    return:
      type:
      - excel.Excel.Binding
      description: ''
    parameters:
    - id: name
      description: Имя элемента, на основе которого создается привязка.
      type:
      - string
    - id: bindingType
      description: Тип привязки. В разделе Excel.BindingType.
      type:
      - excel.Excel.BindingType
    - id: id
      description: Имя привязки.
      type:
      - string
- uid: excel.Excel.BindingCollection.addFromSelection
  summary: >-
    Добавляет новую привязку с учетом выделенного в настоящий момент фрагмента. Если выделение имеет несколько областей, будет возвращена ошибка «InvalidReference».


    \[[Набор API-Интерфейсов: ExcelApi 1.3](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: addFromSelection(bindingType, id)
  fullName: addFromSelection
  langs:
  - typeScript
  type: method
  syntax:
    content: 'addFromSelection(bindingType: Excel.BindingType, id: string): Excel.Binding;'
    return:
      type:
      - excel.Excel.Binding
      description: ''
    parameters:
    - id: bindingType
      description: Тип привязки. В разделе Excel.BindingType.
      type:
      - excel.Excel.BindingType
    - id: id
      description: Имя привязки.
      type:
      - string
- uid: excel.Excel.BindingCollection.count
  summary: >-
    Возвращает число привязок в коллекции. Только для чтения.


    \[[Набор API-Интерфейсов: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: count
  fullName: count
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly count: number;'
    return:
      type:
      - number
- uid: excel.Excel.BindingCollection.getCount
  summary: >-
    Получает количество привязок в коллекции.


    \[[Набор API-Интерфейсов: ExcelApi 1.4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: getCount()
  fullName: getCount
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getCount(): OfficeExtension.ClientResult<number>;'
    return:
      type:
      - OfficeExtension.ClientResult<number>
      description: ''
- uid: excel.Excel.BindingCollection.getItem
  summary: >-
    Возвращает объект привязки по идентификатору.


    \[[Набор API-Интерфейсов: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: getItem(id)
  fullName: getItem
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getItem(id: string): Excel.Binding;'
    return:
      type:
      - excel.Excel.Binding
      description: "\n#### <a name=\"examples\"></a>Примеры\n\n```javascript\n// Create a table binding to monitor data changes in the table. \n// When data is changed, the background color of the table will be changed to orange.\nfunction addEventHandler() {\n    //Create Table1\nExcel.run(function (ctx) { \n    ctx.workbook.tables.add(\"Sheet1!A1:C4\", true);\n    return ctx.sync().then(function() {\n             console.log(\"My Diet Data Inserted!\");\n    })\n    .catch(function (error) {\n             console.log(JSON.stringify(error));\n    });\n});\n    //Create a new table binding for Table1\nOffice.context.document.bindings.addFromNamedItemAsync(\n    \"Table1\", Office.CoercionType.Table, { id: \"myBinding\" }, function (asyncResult) {\n    if (asyncResult.status == \"failed\") {\n        console.log(\"Action failed with error: \" + asyncResult.error.message);\n    }\n    else {\n        // If succeeded, then add event handler to the table binding.\n        Office.select(\"bindings#myBinding\").addHandlerAsync(\n            Office.EventType.BindingDataChanged, onBindingDataChanged);\n    }\n});\n}\n    \n// when data in the table is changed, this event will be triggered.\nfunction onBindingDataChanged(eventArgs) {\nExcel.run(function (ctx) { \n    // highlight the table in orange to indicate data has been changed.\n    ctx.workbook.bindings.getItem(eventArgs.binding.id).getTable().getDataBodyRange().format.fill.color = \"Orange\";\n    return ctx.sync().then(function() {\n            console.log(\"The value in this table got changed!\");\n    })\n    .catch(function (error) {\n            console.log(JSON.stringify(error));\n    });\n});\n}\n```\n```javascript\nExcel.run(function (ctx) { \n    var lastPosition = ctx.workbook.bindings.count - 1;\n    var binding = ctx.workbook.bindings.getItemAt(lastPosition);\n    binding.load('type')\n    return ctx.sync().then(function() {\n            console.log(binding.type); \n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
    parameters:
    - id: id
      description: Идентификатор получаемого объекта привязки.
      type:
      - string
- uid: excel.Excel.BindingCollection.getItemAt
  summary: >-
    Возвращает объект привязки с учетом его положения в массиве элементов.


    \[[Набор API-Интерфейсов: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: getItemAt(index)
  fullName: getItemAt
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getItemAt(index: number): Excel.Binding;'
    return:
      type:
      - excel.Excel.Binding
      description: "\n#### <a name=\"examples\"></a>Примеры\n\n```javascript\nExcel.run(function (ctx) { \n    var lastPosition = ctx.workbook.bindings.count - 1;\n    var binding = ctx.workbook.bindings.getItemAt(lastPosition);\n    binding.load('type')\n    return ctx.sync().then(function() {\n            console.log(binding.type); \n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
    parameters:
    - id: index
      description: Значение индекса получаемого объекта. Используется нулевой индекс.
      type:
      - number
- uid: excel.Excel.BindingCollection.getItemOrNullObject
  summary: >-
    Получает объект привязки по идентификатору. Если объект привязки не существует, возвращает пустой объект.


    \[[Набор API-Интерфейсов: ExcelApi 1.4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: getItemOrNullObject(id)
  fullName: getItemOrNullObject
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getItemOrNullObject(id: string): Excel.Binding;'
    return:
      type:
      - excel.Excel.Binding
      description: ''
    parameters:
    - id: id
      description: Идентификатор получаемого объекта привязки.
      type:
      - string
- uid: excel.Excel.BindingCollection.items
  summary: Получает загруженных дочерних элементов в этом семействе.
  name: items
  fullName: items
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly items: Excel.Binding[];'
    return:
      type:
      - Excel.Binding[]
- uid: excel.Excel.BindingCollection.load
  summary: Очереди команды для загрузки указанного свойства объекта. Перед чтением свойства необходимо вызвать «context.sync()».
  remarks: "В дополнение к подписи этот метод имеет следующие цифровые подписи.\n\n`load(option?: { select?: string; expand?: string; }): Excel.BindingCollection`-Option.select — это разделенный запятыми строка, указывающая свойства для загрузки, куда options.expand — это разделенный запятыми строка, указывающая свойства навигации для загрузки.\n\n`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.BindingCollection`-Доступно только на коллекцию типов. Это похоже на предыдущую. Option.Top указывает максимальное число элементов коллекции, которые можно включить в результат. Option.Skip указывает количество элементов, которые пропускаются и не включенный в результате. Если option.top указан, результирующий набор будет запущен процесс после пропускает указанное число элементов.\n#### <a name=\"examples\"></a>Примеры\n\n```javascript\nExcel.run(function (ctx) { \n    var bindings = ctx.workbook.bindings;\n    bindings.load('items');\n    return ctx.sync().then(function() {\n        for (var i = 0; i < bindings.items.length; i++)\n        {\n            console.log(bindings.items[i].id);\n        }\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```\n```javascript\n// Get the number of bindings\nExcel.run(function (ctx) { \n    var bindings = ctx.workbook.bindings;\n    bindings.load('count');\n    return ctx.sync().then(function() {\n        console.log(\"Bindings: Count= \" + bindings.count);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
  name: load(option)
  fullName: load
  langs:
  - typeScript
  type: method
  syntax:
    content: 'load(option?: string | string[]): Excel.BindingCollection;'
    return:
      type:
      - excel.Excel.BindingCollection
      description: ''
    parameters:
    - id: option
      description: Строка, разделенных запятыми или массив строк, задающих свойства для загрузки.
      type:
      - string | string[]
- uid: excel.Excel.BindingCollection.toJSON
  name: toJSON()
  fullName: toJSON
  langs:
  - typeScript
  type: method
  syntax:
    content: 'toJSON(): Excel.Interfaces.BindingCollectionData;'
    return:
      type:
      - excel.Excel.Interfaces.BindingCollectionData
      description: ''
