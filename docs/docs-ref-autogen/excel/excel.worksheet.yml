### YamlMime:UniversalReference
ms.openlocfilehash: c01653f13dc4a6bf97747b8349a55a9068769571
ms.sourcegitcommit: 5e31602ed9cbddfcff2768b7ed69dd4821440b90
ms.translationtype: MT
ms.contentlocale: ru-RU
ms.lasthandoff: 03/14/2019
ms.locfileid: "30575958"
items:
- uid: excel.Excel.Worksheet
  summary: >-
    <span data-ttu-id="d3fe8-101">Лист Excel — это сетка ячеек.</span><span class="sxs-lookup"><span data-stu-id="d3fe8-101">An Excel worksheet is a grid of cells.</span></span> <span data-ttu-id="d3fe8-102">Она может содержать данные, таблицы, диаграммы и т. д.</span><span class="sxs-lookup"><span data-stu-id="d3fe8-102">It can contain data, tables, charts, etc.</span></span>


    <span data-ttu-id="d3fe8-103">\[[Набор API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d3fe8-103">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: Excel.Worksheet
  fullName: Excel.Worksheet
  langs:
  - typeScript
  type: class
  extends:
  - office.OfficeExtension.ClientObject
  package: excel
  children:
  - excel.Excel.Worksheet.activate
  - excel.Excel.Worksheet.autoFilter
  - excel.Excel.Worksheet.calculate
  - excel.Excel.Worksheet.charts
  - excel.Excel.Worksheet.comments
  - excel.Excel.Worksheet.context
  - excel.Excel.Worksheet.copy
  - excel.Excel.Worksheet.copy_1
  - excel.Excel.Worksheet.delete
  - excel.Excel.Worksheet.enableCalculation
  - excel.Excel.Worksheet.findAll
  - excel.Excel.Worksheet.findAllOrNullObject
  - excel.Excel.Worksheet.freezePanes
  - excel.Excel.Worksheet.getCell
  - excel.Excel.Worksheet.getNext
  - excel.Excel.Worksheet.getNextOrNullObject
  - excel.Excel.Worksheet.getPrevious
  - excel.Excel.Worksheet.getPreviousOrNullObject
  - excel.Excel.Worksheet.getRange
  - excel.Excel.Worksheet.getRangeByIndexes
  - excel.Excel.Worksheet.getRanges
  - excel.Excel.Worksheet.getUsedRange
  - excel.Excel.Worksheet.getUsedRangeOrNullObject
  - excel.Excel.Worksheet.horizontalPageBreaks
  - excel.Excel.Worksheet.id
  - excel.Excel.Worksheet.load
  - excel.Excel.Worksheet.load_1
  - excel.Excel.Worksheet.load_2
  - excel.Excel.Worksheet.name
  - excel.Excel.Worksheet.names
  - excel.Excel.Worksheet.onActivated
  - excel.Excel.Worksheet.onCalculated
  - excel.Excel.Worksheet.onChanged
  - excel.Excel.Worksheet.onDeactivated
  - excel.Excel.Worksheet.onFiltered
  - excel.Excel.Worksheet.onFormatChanged
  - excel.Excel.Worksheet.onSelectionChanged
  - excel.Excel.Worksheet.pageLayout
  - excel.Excel.Worksheet.pivotTables
  - excel.Excel.Worksheet.position
  - excel.Excel.Worksheet.protection
  - excel.Excel.Worksheet.replaceAll
  - excel.Excel.Worksheet.set
  - excel.Excel.Worksheet.set_1
  - excel.Excel.Worksheet.shapes
  - excel.Excel.Worksheet.showGridlines
  - excel.Excel.Worksheet.showHeadings
  - excel.Excel.Worksheet.slicers
  - excel.Excel.Worksheet.standardHeight
  - excel.Excel.Worksheet.standardWidth
  - excel.Excel.Worksheet.tabColor
  - excel.Excel.Worksheet.tables
  - excel.Excel.Worksheet.toJSON
  - excel.Excel.Worksheet.verticalPageBreaks
  - excel.Excel.Worksheet.visibility
- uid: excel.Excel.Worksheet.activate
  summary: >-
    <span data-ttu-id="d3fe8-104">Активация листа в пользовательском интерфейсе Excel.</span><span class="sxs-lookup"><span data-stu-id="d3fe8-104">Activate the worksheet in the Excel UI.</span></span>


    <span data-ttu-id="d3fe8-105">\[[Набор API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d3fe8-105">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: activate()
  fullName: activate()
  langs:
  - typeScript
  type: method
  syntax:
    content: 'activate(): void;'
    return:
      type:
      - void
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"d3fe8-106\">Примеры</span><span class=\"sxs-lookup\"><span data-stu-id=\"d3fe8-106\">Examples</span></span>\n\n```javascript\nExcel.run(function (ctx) { \n    var wSheetName = 'Sheet1';\n    var worksheet = ctx.workbook.worksheets.getItem(wSheetName);\n    worksheet.activate();\n    return ctx.sync(); \n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- uid: excel.Excel.Worksheet.autoFilter
  summary: >-
    <span data-ttu-id="d3fe8-107">Представляет объект AutoFilter листа.</span><span class="sxs-lookup"><span data-stu-id="d3fe8-107">Represents the AutoFilter object of the worksheet.</span></span> <span data-ttu-id="d3fe8-108">Только для чтения.</span><span class="sxs-lookup"><span data-stu-id="d3fe8-108">Read-Only.</span></span>


    <span data-ttu-id="d3fe8-109">\[[Набор API: EXCELAPI Beta (только ознакомительная версия)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d3fe8-109">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  isPreview: true
  name: autoFilter
  fullName: autoFilter
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly autoFilter: Excel.AutoFilter;'
    return:
      type:
      - excel.Excel.AutoFilter
- uid: excel.Excel.Worksheet.calculate
  summary: >-
    <span data-ttu-id="d3fe8-110">Вычисляет все ячейки на листе.</span><span class="sxs-lookup"><span data-stu-id="d3fe8-110">Calculates all cells on a worksheet.</span></span>


    <span data-ttu-id="d3fe8-111">\[[Набор API: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d3fe8-111">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: calculate(markAllDirty)
  fullName: calculate(markAllDirty)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'calculate(markAllDirty: boolean): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: markAllDirty
      description: <span data-ttu-id="d3fe8-112">Значение true, чтобы пометить все как "грязный".</span><span class="sxs-lookup"><span data-stu-id="d3fe8-112">True, to mark all as dirty.</span></span>
      type:
      - boolean
- uid: excel.Excel.Worksheet.charts
  summary: >-
    <span data-ttu-id="d3fe8-113">Возвращает коллекцию диаграмм, имеющихся на листе.</span><span class="sxs-lookup"><span data-stu-id="d3fe8-113">Returns collection of charts that are part of the worksheet.</span></span> <span data-ttu-id="d3fe8-114">Только для чтения.</span><span class="sxs-lookup"><span data-stu-id="d3fe8-114">Read-only.</span></span>


    <span data-ttu-id="d3fe8-115">\[[Набор API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d3fe8-115">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: charts
  fullName: charts
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly charts: Excel.ChartCollection;'
    return:
      type:
      - excel.Excel.ChartCollection
- uid: excel.Excel.Worksheet.comments
  summary: >-
    <span data-ttu-id="d3fe8-116">Возвращает коллекцию всех объектов Comments на листе.</span><span class="sxs-lookup"><span data-stu-id="d3fe8-116">Returns a collection of all the Comments objects on the worksheet.</span></span> <span data-ttu-id="d3fe8-117">Только для чтения.</span><span class="sxs-lookup"><span data-stu-id="d3fe8-117">Read-only.</span></span>


    <span data-ttu-id="d3fe8-118">\[[Набор API: EXCELAPI Beta (только ознакомительная версия)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d3fe8-118">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  isPreview: true
  name: comments
  fullName: comments
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly comments: Excel.CommentCollection;'
    return:
      type:
      - excel.Excel.CommentCollection
- uid: excel.Excel.Worksheet.context
  summary: <span data-ttu-id="d3fe8-119">Контекст запроса, связанный с объектом.</span><span class="sxs-lookup"><span data-stu-id="d3fe8-119">The request context associated with the object.</span></span> <span data-ttu-id="d3fe8-120">Это подсоединяет процесс надстройки к процессу ведущего приложения Office.</span><span class="sxs-lookup"><span data-stu-id="d3fe8-120">This connects the add-in's process to the Office host application's process.</span></span>
  name: context
  fullName: context
  langs:
  - typeScript
  type: property
  syntax:
    content: 'context: RequestContext;'
    return:
      type:
      - RequestContext
- uid: excel.Excel.Worksheet.copy
  summary: >-
    <span data-ttu-id="d3fe8-121">Копирует лист и размещает его в указанном положении.</span><span class="sxs-lookup"><span data-stu-id="d3fe8-121">Copy a worksheet and place it at the specified position.</span></span> <span data-ttu-id="d3fe8-122">Возвращает скопированный лист.</span><span class="sxs-lookup"><span data-stu-id="d3fe8-122">Return the copied worksheet.</span></span>


    <span data-ttu-id="d3fe8-123">\[[Набор API: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d3fe8-123">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: copy(positionType, relativeTo)
  fullName: copy(positionType, relativeTo)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'copy(positionType?: Excel.WorksheetPositionType, relativeTo?: Excel.Worksheet): Excel.Worksheet;'
    return:
      type:
      - excel.Excel.Worksheet
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"d3fe8-124\">Примеры</span><span class=\"sxs-lookup\"><span data-stu-id=\"d3fe8-124\">Examples</span></span>\n\n```typescript\nawait Excel.run(async (context) => {\n\n    let myWorkbook = context.workbook;\n    let sampleSheet = myWorkbook.worksheets.getActiveWorksheet();\n    let copiedSheet = sampleSheet.copy(\"End\")\n\n    sampleSheet.load(\"name\");\n    copiedSheet.load(\"name\");\n\n    await context.sync();\n\n    console.log(\"'\" + sampleSheet.name + \"' was copied to '\" + copiedSheet.name + \"'\")\n});\n```"
    parameters:
    - id: positionType
      description: <span data-ttu-id="d3fe8-125">Необязательный.</span><span class="sxs-lookup"><span data-stu-id="d3fe8-125">Optional.</span></span>
      type:
      - excel.Excel.WorksheetPositionType
    - id: relativeTo
      description: <span data-ttu-id="d3fe8-126">Необязательный.</span><span class="sxs-lookup"><span data-stu-id="d3fe8-126">Optional.</span></span>
      type:
      - excel.Excel.Worksheet
- uid: excel.Excel.Worksheet.copy_1
  summary: >-
    <span data-ttu-id="d3fe8-127">Копирует лист и размещает его в указанном положении.</span><span class="sxs-lookup"><span data-stu-id="d3fe8-127">Copy a worksheet and place it at the specified position.</span></span> <span data-ttu-id="d3fe8-128">Возвращает скопированный лист.</span><span class="sxs-lookup"><span data-stu-id="d3fe8-128">Return the copied worksheet.</span></span>


    <span data-ttu-id="d3fe8-129">\[[Набор API: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d3fe8-129">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: copy(positionTypeString, relativeTo)
  fullName: copy(positionTypeString, relativeTo)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'copy(positionTypeString?: "None" | "Before" | "After" | "Beginning" | "End", relativeTo?: Excel.Worksheet): Excel.Worksheet;'
    return:
      type:
      - excel.Excel.Worksheet
      description: ''
    parameters:
    - id: positionTypeString
      description: <span data-ttu-id="d3fe8-130">Необязательный.</span><span class="sxs-lookup"><span data-stu-id="d3fe8-130">Optional.</span></span>
      type:
      - "\"None\" | \"Before\" | \"After\" | \"Beginning\" | \"End\""
    - id: relativeTo
      description: <span data-ttu-id="d3fe8-131">Необязательный.</span><span class="sxs-lookup"><span data-stu-id="d3fe8-131">Optional.</span></span>
      type:
      - excel.Excel.Worksheet
- uid: excel.Excel.Worksheet.delete
  summary: >-
    <span data-ttu-id="d3fe8-132">Удаляет лист из книги.</span><span class="sxs-lookup"><span data-stu-id="d3fe8-132">Deletes the worksheet from the workbook.</span></span>


    <span data-ttu-id="d3fe8-133">\[[Набор API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d3fe8-133">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: delete()
  fullName: delete()
  langs:
  - typeScript
  type: method
  syntax:
    content: 'delete(): void;'
    return:
      type:
      - void
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"d3fe8-134\">Примеры</span><span class=\"sxs-lookup\"><span data-stu-id=\"d3fe8-134\">Examples</span></span>\n\n```javascript\nExcel.run(function (ctx) { \n    var wSheetName = 'Sheet1';\n    var worksheet = ctx.workbook.worksheets.getItem(wSheetName);\n    worksheet.delete();\n    return ctx.sync(); \n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- uid: excel.Excel.Worksheet.enableCalculation
  summary: >-
    <span data-ttu-id="d3fe8-135">Получает или задает свойство enableCalculation для листа.</span><span class="sxs-lookup"><span data-stu-id="d3fe8-135">Gets or sets the enableCalculation property of the worksheet.</span></span> <span data-ttu-id="d3fe8-136">Имеет значение true, если Excel пересчитывает лист при необходимости.</span><span class="sxs-lookup"><span data-stu-id="d3fe8-136">True if Excel recalculates the worksheet when necessary.</span></span> <span data-ttu-id="d3fe8-137">False, если Excel не пересчитывает лист.</span><span class="sxs-lookup"><span data-stu-id="d3fe8-137">False if Excel doesn't recalculate the sheet.</span></span>


    <span data-ttu-id="d3fe8-138">\[[Набор API: EXCELAPI Beta (только ознакомительная версия)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d3fe8-138">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  isPreview: true
  name: enableCalculation
  fullName: enableCalculation
  langs:
  - typeScript
  type: property
  syntax:
    content: 'enableCalculation: boolean;'
    return:
      type:
      - boolean
- uid: excel.Excel.Worksheet.findAll
  summary: >-
    <span data-ttu-id="d3fe8-139">Находит все вхождения определенной строки на основе указанных условий и возвращает их в виде объекта RangeAreas, состоящего из одного или нескольких прямоугольных диапазонов.</span><span class="sxs-lookup"><span data-stu-id="d3fe8-139">Finds all occurrences of the given string based on the criteria specified and returns them as a RangeAreas object, comprising one or more rectangular ranges.</span></span>


    <span data-ttu-id="d3fe8-140">\[[Набор API: EXCELAPI Beta (только ознакомительная версия)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d3fe8-140">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  isPreview: true
  name: findAll(text, criteria)
  fullName: findAll(text, criteria)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'findAll(text: string, criteria: Excel.WorksheetSearchCriteria): Excel.RangeAreas;'
    return:
      type:
      - excel.Excel.RangeAreas
      description: <span data-ttu-id="d3fe8-141">Объект Ранжеареа, состоящий из одного или нескольких прямоугольных диапазонов, которые соответствуют условиям поиска.</span><span class="sxs-lookup"><span data-stu-id="d3fe8-141">A RangeArea object, comprising one or more rectangular ranges, that matches the search criteria.</span></span> <span data-ttu-id="d3fe8-142">Если ни одна ячейка не соответствует этим условиям, будет выдано сообщение об ошибке ItemNotFound.</span><span class="sxs-lookup"><span data-stu-id="d3fe8-142">If no cells meet this criteria, an ItemNotFound error will be thrown.</span></span>
    parameters:
    - id: text
      description: <span data-ttu-id="d3fe8-143">Строка для поиска.</span><span class="sxs-lookup"><span data-stu-id="d3fe8-143">String to find.</span></span>
      type:
      - string
    - id: criteria
      description: <span data-ttu-id="d3fe8-144">Дополнительные условия.</span><span class="sxs-lookup"><span data-stu-id="d3fe8-144">Additional Criteria.</span></span>
      type:
      - excel.Excel.WorksheetSearchCriteria
- uid: excel.Excel.Worksheet.findAllOrNullObject
  summary: >-
    <span data-ttu-id="d3fe8-145">Находит все вхождения определенной строки на основе указанных условий и возвращает их в виде объекта RangeAreas, состоящего из одного или нескольких прямоугольных диапазонов.</span><span class="sxs-lookup"><span data-stu-id="d3fe8-145">Finds all occurrences of the given string based on the criteria specified and returns them as a RangeAreas object, comprising one or more rectangular ranges.</span></span>


    <span data-ttu-id="d3fe8-146">\[[Набор API: EXCELAPI Beta (только ознакомительная версия)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d3fe8-146">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  isPreview: true
  name: findAllOrNullObject(text, criteria)
  fullName: findAllOrNullObject(text, criteria)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'findAllOrNullObject(text: string, criteria: Excel.WorksheetSearchCriteria): Excel.RangeAreas;'
    return:
      type:
      - excel.Excel.RangeAreas
      description: >-
        <span data-ttu-id="d3fe8-147">Объект Ранжеареа, состоящий из одного или нескольких прямоугольных диапазонов, которые соответствуют условиям поиска.</span><span class="sxs-lookup"><span data-stu-id="d3fe8-147">A RangeArea object, comprising one or more rectangular ranges, that matches the search criteria.</span></span> <span data-ttu-id="d3fe8-148">Если совпадений нет, эта функция возвращает пустой объект.</span><span class="sxs-lookup"><span data-stu-id="d3fe8-148">If there are no matches, this function will return a null object.</span></span>

        #### <a name="examples"></a><span data-ttu-id="d3fe8-149">Примеры</span><span class="sxs-lookup"><span data-stu-id="d3fe8-149">Examples</span></span>


        ```typescript

        await Excel.run(async (context) => {
            const sheet = context.workbook.worksheets.getItem("Sample");
            const foundRanges = sheet.findAllOrNullObject("Complete", {
                completeMatch: true,
                matchCase: false
            });

            await context.sync();

            if (foundRanges.isNullObject) {
                console.log("No complete projects");
            } else {
                foundRanges.format.fill.color = "green"
            }
        });

        ```
    parameters:
    - id: text
      description: <span data-ttu-id="d3fe8-150">Строка для поиска.</span><span class="sxs-lookup"><span data-stu-id="d3fe8-150">String to find.</span></span>
      type:
      - string
    - id: criteria
      description: <span data-ttu-id="d3fe8-151">Дополнительные условия.</span><span class="sxs-lookup"><span data-stu-id="d3fe8-151">Additional Criteria.</span></span>
      type:
      - excel.Excel.WorksheetSearchCriteria
- uid: excel.Excel.Worksheet.freezePanes
  summary: >-
    <span data-ttu-id="d3fe8-152">Получает объект, который можно использовать для работы с замороженными областями на листе.</span><span class="sxs-lookup"><span data-stu-id="d3fe8-152">Gets an object that can be used to manipulate frozen panes on the worksheet.</span></span> <span data-ttu-id="d3fe8-153">Только для чтения.</span><span class="sxs-lookup"><span data-stu-id="d3fe8-153">Read-only.</span></span>


    <span data-ttu-id="d3fe8-154">\[[Набор API: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d3fe8-154">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: freezePanes
  fullName: freezePanes
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly freezePanes: Excel.WorksheetFreezePanes;'
    return:
      type:
      - excel.Excel.WorksheetFreezePanes
- uid: excel.Excel.Worksheet.getCell
  summary: >-
    <span data-ttu-id="d3fe8-155">Получает объект диапазона, содержащий одну ячейку, по номеру строки и столбца.</span><span class="sxs-lookup"><span data-stu-id="d3fe8-155">Gets the range object containing the single cell based on row and column numbers.</span></span> <span data-ttu-id="d3fe8-156">Ячейка может находиться вне границ родительского диапазона, пока она остается в сетке листа.</span><span class="sxs-lookup"><span data-stu-id="d3fe8-156">The cell can be outside the bounds of its parent range, so long as it stays within the worksheet grid.</span></span>


    <span data-ttu-id="d3fe8-157">\[[Набор API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d3fe8-157">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getCell(row, column)
  fullName: getCell(row, column)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getCell(row: number, column: number): Excel.Range;'
    return:
      type:
      - excel.Excel.Range
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"d3fe8-158\">Примеры</span><span class=\"sxs-lookup\"><span data-stu-id=\"d3fe8-158\">Examples</span></span>\n\n```javascript\nExcel.run(function (ctx) { \n    var sheetName = \"Sheet1\";\n    var rangeAddress = \"A1:F8\";\n    var worksheet = ctx.workbook.worksheets.getItem(sheetName);\n    var cell = worksheet.getCell(0,0);\n    cell.load('address');\n    return ctx.sync().then(function() {\n        console.log(cell.address);\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
    parameters:
    - id: row
      description: <span data-ttu-id="d3fe8-159">Номер строки ячейки, которую требуется извлечь.</span><span class="sxs-lookup"><span data-stu-id="d3fe8-159">The row number of the cell to be retrieved.</span></span> <span data-ttu-id="d3fe8-160">Используется нулевой индекс.</span><span class="sxs-lookup"><span data-stu-id="d3fe8-160">Zero-indexed.</span></span>
      type:
      - number
    - id: column
      description: <span data-ttu-id="d3fe8-161">Номер столбца ячейки, которую требуется извлечь.</span><span class="sxs-lookup"><span data-stu-id="d3fe8-161">the column number of the cell to be retrieved.</span></span> <span data-ttu-id="d3fe8-162">Используется нулевой индекс.</span><span class="sxs-lookup"><span data-stu-id="d3fe8-162">Zero-indexed.</span></span>
      type:
      - number
- uid: excel.Excel.Worksheet.getNext
  summary: >-
    <span data-ttu-id="d3fe8-163">Получает лист, следующий по отношению к элементу.</span><span class="sxs-lookup"><span data-stu-id="d3fe8-163">Gets the worksheet that follows this one.</span></span> <span data-ttu-id="d3fe8-164">При отсутствии листов, указанных ниже, этот метод вызовет ошибку.</span><span class="sxs-lookup"><span data-stu-id="d3fe8-164">If there are no worksheets following this one, this method will throw an error.</span></span>


    <span data-ttu-id="d3fe8-165">\[[Набор API: ExcelApi 1,5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d3fe8-165">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getNext(visibleOnly)
  fullName: getNext(visibleOnly)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getNext(visibleOnly?: boolean): Excel.Worksheet;'
    return:
      type:
      - excel.Excel.Worksheet
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"d3fe8-166\">Примеры</span><span class=\"sxs-lookup\"><span data-stu-id=\"d3fe8-166\">Examples</span></span>\n\n```typescript\nawait Excel.run(async (context) => {\n    const sheets = context.workbook.worksheets;\n\n    // We don't want to include the default worksheet that was created\n    // when the workbook was created, so our \"firstSheet\" will be the one\n    // after the literal first. Note chaining of navigation methods.\n    const firstSheet = sheets.getFirst().getNext();\n    const lastSheet = sheets.getLast();\n    const firstTaxRateRange = firstSheet.getRange(\"B2\");\n    const lastTaxRateRange = lastSheet.getRange(\"B2\");\n\n    firstSheet.load(\"name\");\n    lastSheet.load(\"name\");\n    firstTaxRateRange.load(\"text\");\n    lastTaxRateRange.load(\"text\");\n\n    await context.sync();\n\n    let firstYear = firstSheet.name.substr(5, 4);\n    let lastYear = lastSheet.name.substr(5, 4);\n    console.log(`Tax Rate change from ${firstYear} to ${lastYear}`, `Tax rate for ${firstYear}: ${firstTaxRateRange.text[0][0]}\\nTax rate for ${lastYear}: ${lastTaxRateRange.text[0][0]}`)\n\n    await context.sync();\n});\n```"
    parameters:
    - id: visibleOnly
      description: <span data-ttu-id="d3fe8-167">Необязательное свойство.</span><span class="sxs-lookup"><span data-stu-id="d3fe8-167">Optional.</span></span> <span data-ttu-id="d3fe8-168">Если задано значение true, учитываются только видимые листы, пропуская все скрытые.</span><span class="sxs-lookup"><span data-stu-id="d3fe8-168">If true, considers only visible worksheets, skipping over any hidden ones.</span></span>
      type:
      - boolean
- uid: excel.Excel.Worksheet.getNextOrNullObject
  summary: >-
    <span data-ttu-id="d3fe8-169">Получает лист, следующий по отношению к элементу.</span><span class="sxs-lookup"><span data-stu-id="d3fe8-169">Gets the worksheet that follows this one.</span></span> <span data-ttu-id="d3fe8-170">Если после этого листа нет ни одного листа, этот метод возвратит нулевой объект.</span><span class="sxs-lookup"><span data-stu-id="d3fe8-170">If there are no worksheets following this one, this method will return a null object.</span></span>


    <span data-ttu-id="d3fe8-171">\[[Набор API: ExcelApi 1,5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d3fe8-171">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getNextOrNullObject(visibleOnly)
  fullName: getNextOrNullObject(visibleOnly)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getNextOrNullObject(visibleOnly?: boolean): Excel.Worksheet;'
    return:
      type:
      - excel.Excel.Worksheet
      description: ''
    parameters:
    - id: visibleOnly
      description: <span data-ttu-id="d3fe8-172">Необязательное свойство.</span><span class="sxs-lookup"><span data-stu-id="d3fe8-172">Optional.</span></span> <span data-ttu-id="d3fe8-173">Если задано значение true, учитываются только видимые листы, пропуская все скрытые.</span><span class="sxs-lookup"><span data-stu-id="d3fe8-173">If true, considers only visible worksheets, skipping over any hidden ones.</span></span>
      type:
      - boolean
- uid: excel.Excel.Worksheet.getPrevious
  summary: >-
    <span data-ttu-id="d3fe8-174">Получает лист, который предшествует этому.</span><span class="sxs-lookup"><span data-stu-id="d3fe8-174">Gets the worksheet that precedes this one.</span></span> <span data-ttu-id="d3fe8-175">Если нет предыдущих листов, этот метод выдаст ошибку.</span><span class="sxs-lookup"><span data-stu-id="d3fe8-175">If there are no previous worksheets, this method will throw an error.</span></span>


    <span data-ttu-id="d3fe8-176">\[[Набор API: ExcelApi 1,5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d3fe8-176">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getPrevious(visibleOnly)
  fullName: getPrevious(visibleOnly)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getPrevious(visibleOnly?: boolean): Excel.Worksheet;'
    return:
      type:
      - excel.Excel.Worksheet
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"d3fe8-177\">Примеры</span><span class=\"sxs-lookup\"><span data-stu-id=\"d3fe8-177\">Examples</span></span>\n\n```typescript\nawait Excel.run(async (context) => {\n    const sheets = context.workbook.worksheets;\n    const currentSheet = sheets.getActiveWorksheet();\n    const previousYearSheet = currentSheet.getPrevious();\n    const currentTaxDueRange = currentSheet.getRange(\"C2\");\n    const previousTaxDueRange = previousYearSheet.getRange(\"C2\");\n\n    currentSheet.load(\"name\");\n    previousYearSheet.load(\"name\");\n    currentTaxDueRange.load(\"text\");\n    previousTaxDueRange.load(\"text\");\n\n    await context.sync();\n\n    let currentYear = currentSheet.name.substr(5, 4);\n    let previousYear = previousYearSheet.name.substr(5, 4);\n    console.log(\"Two Year Tax Due Comparison\", `Tax due for ${currentYear} was ${currentTaxDueRange.text[0][0]}\\nTax due for ${previousYear} was ${previousTaxDueRange.text[0][0]}`)\n\n    await context.sync();\n});\n```"
    parameters:
    - id: visibleOnly
      description: <span data-ttu-id="d3fe8-178">Необязательное свойство.</span><span class="sxs-lookup"><span data-stu-id="d3fe8-178">Optional.</span></span> <span data-ttu-id="d3fe8-179">Если задано значение true, учитываются только видимые листы, пропуская все скрытые.</span><span class="sxs-lookup"><span data-stu-id="d3fe8-179">If true, considers only visible worksheets, skipping over any hidden ones.</span></span>
      type:
      - boolean
- uid: excel.Excel.Worksheet.getPreviousOrNullObject
  summary: >-
    <span data-ttu-id="d3fe8-180">Получает лист, который предшествует этому.</span><span class="sxs-lookup"><span data-stu-id="d3fe8-180">Gets the worksheet that precedes this one.</span></span> <span data-ttu-id="d3fe8-181">Если нет предыдущих листов, этот метод возвратит значение NULL обжет.</span><span class="sxs-lookup"><span data-stu-id="d3fe8-181">If there are no previous worksheets, this method will return a null objet.</span></span>


    <span data-ttu-id="d3fe8-182">\[[Набор API: ExcelApi 1,5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d3fe8-182">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getPreviousOrNullObject(visibleOnly)
  fullName: getPreviousOrNullObject(visibleOnly)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getPreviousOrNullObject(visibleOnly?: boolean): Excel.Worksheet;'
    return:
      type:
      - excel.Excel.Worksheet
      description: ''
    parameters:
    - id: visibleOnly
      description: <span data-ttu-id="d3fe8-183">Необязательное свойство.</span><span class="sxs-lookup"><span data-stu-id="d3fe8-183">Optional.</span></span> <span data-ttu-id="d3fe8-184">Если задано значение true, учитываются только видимые листы, пропуская все скрытые.</span><span class="sxs-lookup"><span data-stu-id="d3fe8-184">If true, considers only visible worksheets, skipping over any hidden ones.</span></span>
      type:
      - boolean
- uid: excel.Excel.Worksheet.getRange
  summary: >-
    <span data-ttu-id="d3fe8-185">Получает объект Range, представляющий отдельный прямоугольный блок ячеек, заданный по адресу или имени.</span><span class="sxs-lookup"><span data-stu-id="d3fe8-185">Gets the range object, representing a single rectangular block of cells, specified by the address or name.</span></span>


    <span data-ttu-id="d3fe8-186">\[[Набор API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d3fe8-186">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getRange(address)
  fullName: getRange(address)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getRange(address?: string): Excel.Range;'
    return:
      type:
      - excel.Excel.Range
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"d3fe8-187\">Примеры</span><span class=\"sxs-lookup\"><span data-stu-id=\"d3fe8-187\">Examples</span></span>\n\n```javascript\n// Below example uses range address to get the range object.\nExcel.run(function (ctx) { \n    var sheetName = \"Sheet1\";\n    var rangeAddress = \"A1:F8\";\n    var worksheet = ctx.workbook.worksheets.getItem(sheetName);\n    var range = worksheet.getRange(rangeAddress);\n    range.load('cellCount');\n    return ctx.sync().then(function() {\n        console.log(range.cellCount);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```\n```javascript\n// Below example uses a named-range to get the range object.\nExcel.run(function (ctx) { \n    var sheetName = \"Sheet1\";\n    var rangeName = 'MyRange';\n    var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeName);\n    range.load('address');\n    return ctx.sync().then(function() {\n        console.log(range.address);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
    parameters:
    - id: address
      description: '<span data-ttu-id="d3fe8-188">Необязательное свойство.</span><span class="sxs-lookup"><span data-stu-id="d3fe8-188">Optional.</span></span> <span data-ttu-id="d3fe8-189">Строка, представляющая адрес или имя диапазона.</span><span class="sxs-lookup"><span data-stu-id="d3fe8-189">The string representing the address or name of the range.</span></span> <span data-ttu-id="d3fe8-190">Например, "a1: B2".</span><span class="sxs-lookup"><span data-stu-id="d3fe8-190">For example, "A1:B2".</span></span> <span data-ttu-id="d3fe8-191">Если аргумент не указан, возвращается весь диапазон листа.</span><span class="sxs-lookup"><span data-stu-id="d3fe8-191">If not specified, the entire worksheet range is returned.</span></span>'
      type:
      - string
- uid: excel.Excel.Worksheet.getRangeByIndexes
  summary: >-
    <span data-ttu-id="d3fe8-192">Получает объект диапазона, начинающегося с определенных строки и столбца и занимающего определенное количество строк и столбцов.</span><span class="sxs-lookup"><span data-stu-id="d3fe8-192">Gets the range object beginning at a particular row index and column index, and spanning a certain number of rows and columns.</span></span>


    <span data-ttu-id="d3fe8-193">\[[Набор API: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d3fe8-193">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getRangeByIndexes(startRow, startColumn, rowCount, columnCount)
  fullName: getRangeByIndexes(startRow, startColumn, rowCount, columnCount)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getRangeByIndexes(startRow: number, startColumn: number, rowCount: number, columnCount: number): Excel.Range;'
    return:
      type:
      - excel.Excel.Range
      description: ''
    parameters:
    - id: startRow
      description: <span data-ttu-id="d3fe8-194">Строка начала (с нулевым индексированием).</span><span class="sxs-lookup"><span data-stu-id="d3fe8-194">Start row (zero-indexed).</span></span>
      type:
      - number
    - id: startColumn
      description: <span data-ttu-id="d3fe8-195">Столбец "начало" (с нулевым индексом).</span><span class="sxs-lookup"><span data-stu-id="d3fe8-195">Start column (zero-indexed).</span></span>
      type:
      - number
    - id: rowCount
      description: <span data-ttu-id="d3fe8-196">Количество строк, включаемых в диапазон.</span><span class="sxs-lookup"><span data-stu-id="d3fe8-196">Number of rows to include in the range.</span></span>
      type:
      - number
    - id: columnCount
      description: <span data-ttu-id="d3fe8-197">Число столбцов, включаемых в диапазон.</span><span class="sxs-lookup"><span data-stu-id="d3fe8-197">Number of columns to include in the range.</span></span>
      type:
      - number
- uid: excel.Excel.Worksheet.getRanges
  summary: >-
    <span data-ttu-id="d3fe8-198">Получает объект RangeAreas, представляющий один или несколько блоков прямоугольных диапазонов, указанных по адресу или имени.</span><span class="sxs-lookup"><span data-stu-id="d3fe8-198">Gets the RangeAreas object, representing one or more blocks of rectangular ranges, specified by the address or name.</span></span>


    <span data-ttu-id="d3fe8-199">\[[Набор API: EXCELAPI Beta (только ознакомительная версия)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d3fe8-199">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  isPreview: true
  name: getRanges(address)
  fullName: getRanges(address)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getRanges(address?: string): Excel.RangeAreas;'
    return:
      type:
      - excel.Excel.RangeAreas
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"d3fe8-200\">Примеры</span><span class=\"sxs-lookup\"><span data-stu-id=\"d3fe8-200\">Examples</span></span>\n\n```typescript\nawait Excel.run(async (context) => {\n\n    const sheet = context.workbook.worksheets.getActiveWorksheet();\n    const specifiedRanges = sheet.getRanges(\"D3:D5, G3:G5\");\n    specifiedRanges.format.fill.color = \"pink\";\n\n    await context.sync();\n})\n```"
    parameters:
    - id: address
      description: '<span data-ttu-id="d3fe8-201">Необязательное свойство.</span><span class="sxs-lookup"><span data-stu-id="d3fe8-201">Optional.</span></span> <span data-ttu-id="d3fe8-202">Строка, содержащая разделенные запятыми адреса или имена отдельных диапазонов.</span><span class="sxs-lookup"><span data-stu-id="d3fe8-202">A string containing the comma-separated addresses or names of the individual ranges.</span></span> <span data-ttu-id="d3fe8-203">Например, "a1: B2, A5: B5".</span><span class="sxs-lookup"><span data-stu-id="d3fe8-203">For example, "A1:B2, A5:B5".</span></span> <span data-ttu-id="d3fe8-204">Если этот параметр не указан, возвращается объект Ранжеареа для всего листа.</span><span class="sxs-lookup"><span data-stu-id="d3fe8-204">If not specified, an RangeArea object for the entire worksheet is returned.</span></span>'
      type:
      - string
- uid: excel.Excel.Worksheet.getUsedRange
  summary: >-
    <span data-ttu-id="d3fe8-205">Используемый диапазон — это наименьший диапазон, включающий в себя все ячейки с определенным значением или форматированием.</span><span class="sxs-lookup"><span data-stu-id="d3fe8-205">The used range is the smallest range that encompasses any cells that have a value or formatting assigned to them.</span></span> <span data-ttu-id="d3fe8-206">Если лист пуст, эта функция возвратит верхнюю левую ячейку (то есть *не* выдает ошибку).</span><span class="sxs-lookup"><span data-stu-id="d3fe8-206">If the entire worksheet is blank, this function will return the top left cell (i.e. it will *not* throw an error).</span></span>


    <span data-ttu-id="d3fe8-207">\[[Набор API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d3fe8-207">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getUsedRange(valuesOnly)
  fullName: getUsedRange(valuesOnly)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getUsedRange(valuesOnly?: boolean): Excel.Range;'
    return:
      type:
      - excel.Excel.Range
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"d3fe8-208\">Примеры</span><span class=\"sxs-lookup\"><span data-stu-id=\"d3fe8-208\">Examples</span></span>\n\n```javascript\nExcel.run(function (ctx) { \n    var wSheetName = 'Sheet1';\n    var worksheet = ctx.workbook.worksheets.getItem(wSheetName);\n    var usedRange = worksheet.getUsedRange();\n    usedRange.load('address');\n    return ctx.sync().then(function() {\n            console.log(usedRange.address);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
    parameters:
    - id: valuesOnly
      description: '<span data-ttu-id="d3fe8-209">Необязательное свойство.</span><span class="sxs-lookup"><span data-stu-id="d3fe8-209">Optional.</span></span> <span data-ttu-id="d3fe8-210">Если этот параметр имеет значение true, учитываются только ячейки со значениями в качестве используемых ячеек (игнорируя форматирование).</span><span class="sxs-lookup"><span data-stu-id="d3fe8-210">If true, considers only cells with values as used cells (ignoring formatting).</span></span> <span data-ttu-id="d3fe8-211">\[Набор API: ExcelApi 1,2\]</span><span class="sxs-lookup"><span data-stu-id="d3fe8-211">\[Api set: ExcelApi 1.2\]</span></span>'
      type:
      - boolean
- uid: excel.Excel.Worksheet.getUsedRangeOrNullObject
  summary: >-
    <span data-ttu-id="d3fe8-p127">Используемый диапазон — это наименьший диапазон, включающий в себя все ячейки, которые содержат значение или форматирование. Если весь лист пустой, эта функция возвращает пустой объект.</span><span class="sxs-lookup"><span data-stu-id="d3fe8-p127">The used range is the smallest range that encompasses any cells that have a value or formatting assigned to them. If the entire worksheet is blank, this function will return a null object.</span></span>


    <span data-ttu-id="d3fe8-214">\[[Набор API: ExcelApi 1,4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d3fe8-214">\[ [API set: ExcelApi 1.4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getUsedRangeOrNullObject(valuesOnly)
  fullName: getUsedRangeOrNullObject(valuesOnly)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getUsedRangeOrNullObject(valuesOnly?: boolean): Excel.Range;'
    return:
      type:
      - excel.Excel.Range
      description: ''
    parameters:
    - id: valuesOnly
      description: <span data-ttu-id="d3fe8-215">Необязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="d3fe8-215">Optional.</span></span> <span data-ttu-id="d3fe8-216">Учитывает только ячейки со значениями.</span><span class="sxs-lookup"><span data-stu-id="d3fe8-216">Considers only cells with values as used cells.</span></span>
      type:
      - boolean
- uid: excel.Excel.Worksheet.horizontalPageBreaks
  summary: >-
    <span data-ttu-id="d3fe8-217">Получает коллекцию горизонтальных разрывов страницы для листа.</span><span class="sxs-lookup"><span data-stu-id="d3fe8-217">Gets the horizontal page break collection for the worksheet.</span></span> <span data-ttu-id="d3fe8-218">Эта коллекция содержит только добавленные вручную разрывы страниц.</span><span class="sxs-lookup"><span data-stu-id="d3fe8-218">This collection only contains manual page breaks.</span></span>


    <span data-ttu-id="d3fe8-219">\[[Набор API: EXCELAPI Beta (только ознакомительная версия)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d3fe8-219">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  isPreview: true
  name: horizontalPageBreaks
  fullName: horizontalPageBreaks
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly horizontalPageBreaks: Excel.PageBreakCollection;'
    return:
      type:
      - excel.Excel.PageBreakCollection
- uid: excel.Excel.Worksheet.id
  summary: >-
    <span data-ttu-id="d3fe8-p130">Возвращает значение, однозначно идентифицирующее лист в данной книге. Значение идентификатора остается прежним, даже если переименовать или переместить лист. Только для чтения.</span><span class="sxs-lookup"><span data-stu-id="d3fe8-p130">Returns a value that uniquely identifies the worksheet in a given workbook. The value of the identifier remains the same even when the worksheet is renamed or moved. Read-only.</span></span>


    <span data-ttu-id="d3fe8-223">\[[Набор API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d3fe8-223">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: id
  fullName: id
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly id: string;'
    return:
      type:
      - string
- uid: excel.Excel.Worksheet.load
  summary: <span data-ttu-id="d3fe8-224">Добавляет в очередь команду для загрузки указанных свойств объекта.</span><span class="sxs-lookup"><span data-stu-id="d3fe8-224">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="d3fe8-225">Перед чтением свойств необходимо вызвать метод context.sync().</span><span class="sxs-lookup"><span data-stu-id="d3fe8-225">You must call "context.sync()" before reading the properties.</span></span>
  remarks: >-
    <span data-ttu-id="d3fe8-226">В дополнение к этой подписи этот метод имеет следующие подписи:</span><span class="sxs-lookup"><span data-stu-id="d3fe8-226">In addition to this signature, this method has the following signatures:</span></span>


    <span data-ttu-id="d3fe8-227">`load(option?: string | string[]): Excel.Worksheet`-WHERE — это строка с разделителями-запятыми или массив строк, указывающий свойства для загрузки.</span><span class="sxs-lookup"><span data-stu-id="d3fe8-227">`load(option?: string | string[]): Excel.Worksheet` - Where option is a comma-delimited string or an array of strings that specify the properties to load.</span></span>


    <span data-ttu-id="d3fe8-228">`load(option?: { select?: string; expand?: string; }): Excel.Worksheet`-WHERE. Select — это строка с разделителями-запятыми, указывающая свойства для загрузки и параметры. Expand — это строка с разделителями-запятыми, указывающая свойства навигации для загрузки.</span><span class="sxs-lookup"><span data-stu-id="d3fe8-228">`load(option?: { select?: string; expand?: string; }): Excel.Worksheet` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.</span></span>


    <span data-ttu-id="d3fe8-229">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.Worksheet`— Доступно только для типов коллекций.</span><span class="sxs-lookup"><span data-stu-id="d3fe8-229">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.Worksheet` - Only available on collection types.</span></span> <span data-ttu-id="d3fe8-230">Он аналогичен предыдущей подписи.</span><span class="sxs-lookup"><span data-stu-id="d3fe8-230">It is similar to the preceding signature.</span></span> <span data-ttu-id="d3fe8-231">Option. Top указывает максимальное количество элементов коллекции, которые можно включить в результат.</span><span class="sxs-lookup"><span data-stu-id="d3fe8-231">Option.top specifies the maximum number of collection items that can be included in the result.</span></span> <span data-ttu-id="d3fe8-232">Option. skip указывает количество элементов, которые будут пропущены и не включены в результат.</span><span class="sxs-lookup"><span data-stu-id="d3fe8-232">Option.skip specifies the number of items that are to be skipped and not included in the result.</span></span> <span data-ttu-id="d3fe8-233">Если указан параметр Option. Top, результирующий набор начнется после пропуска указанного числа элементов.</span><span class="sxs-lookup"><span data-stu-id="d3fe8-233">If option.top is specified, the result set will start after skipping the specified number of items.</span></span>
  name: load(option)
  fullName: load(option)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'load(option?: Excel.Interfaces.WorksheetLoadOptions): Excel.Worksheet;'
    return:
      type:
      - excel.Excel.Worksheet
      description: ''
    parameters:
    - id: option
      description: ''
      type:
      - excel.Excel.Interfaces.WorksheetLoadOptions
- uid: excel.Excel.Worksheet.load_1
  summary: <span data-ttu-id="d3fe8-234">Добавляет в очередь команду для загрузки указанных свойств объекта.</span><span class="sxs-lookup"><span data-stu-id="d3fe8-234">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="d3fe8-235">Перед чтением свойств `context.sync()` необходимо вызвать метод.</span><span class="sxs-lookup"><span data-stu-id="d3fe8-235">You must call `context.sync()` before reading the properties.</span></span>
  name: load(propertyNames)
  fullName: load(propertyNames)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'load(propertyNames?: string | string[]): Excel.Worksheet;'
    return:
      type:
      - excel.Excel.Worksheet
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"d3fe8-236\">Примеры</span><span class=\"sxs-lookup\"><span data-stu-id=\"d3fe8-236\">Examples</span></span>\n\n```javascript\n// Get worksheet properties based on sheet name.\nExcel.run(function (ctx) { \n    var wSheetName = 'Sheet1';\n    var worksheet = ctx.workbook.worksheets.getItem(wSheetName);\n    worksheet.load('position')\n    return ctx.sync().then(function() {\n            console.log(worksheet.position);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```\n```javascript\n// Set worksheet position. \nExcel.run(function (ctx) { \n    var wSheetName = 'Sheet1';\n    var worksheet = ctx.workbook.worksheets.getItem(wSheetName);\n    worksheet.position = 2;\n    return ctx.sync(); \n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
    parameters:
    - id: propertyNames
      description: <span data-ttu-id="d3fe8-237">Строка, разделенная запятыми, или массив строк, указывающий свойства для загрузки.</span><span class="sxs-lookup"><span data-stu-id="d3fe8-237">A comma-delimited string or an array of strings that specify the properties to load.</span></span>
      type:
      - string | string[]
- uid: excel.Excel.Worksheet.load_2
  summary: <span data-ttu-id="d3fe8-238">Добавляет в очередь команду для загрузки указанных свойств объекта.</span><span class="sxs-lookup"><span data-stu-id="d3fe8-238">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="d3fe8-239">Перед чтением свойств `context.sync()` необходимо вызвать метод.</span><span class="sxs-lookup"><span data-stu-id="d3fe8-239">You must call `context.sync()` before reading the properties.</span></span>
  name: load(propertyNamesAndPaths)
  fullName: load(propertyNamesAndPaths)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'load(propertyNamesAndPaths?: { select?: string; expand?: string; }): Excel.Worksheet;'
    return:
      type:
      - excel.Excel.Worksheet
      description: ''
    parameters:
    - id: propertyNamesAndPaths
      description: <span data-ttu-id="d3fe8-240">Где Пропертинамесандпасс. Select — это строка с разделителями-запятыми, задающая свойства для загрузки, и Пропертинамесандпасс. Expand — это строка с разделителями-запятыми, указывающая свойства навигации для загрузки.</span><span class="sxs-lookup"><span data-stu-id="d3fe8-240">Where propertyNamesAndPaths.select is a comma-delimited string that specifies the properties to load, and propertyNamesAndPaths.expand is a comma-delimited string that specifies the navigation properties to load.</span></span>
      type:
      - '{ select?: string; expand?: string; }'
- uid: excel.Excel.Worksheet.name
  summary: >-
    <span data-ttu-id="d3fe8-241">Отображаемое имя листа.</span><span class="sxs-lookup"><span data-stu-id="d3fe8-241">The display name of the worksheet.</span></span>


    <span data-ttu-id="d3fe8-242">\[[Набор API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d3fe8-242">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: name
  fullName: name
  langs:
  - typeScript
  type: property
  syntax:
    content: 'name: string;'
    return:
      type:
      - string
- uid: excel.Excel.Worksheet.names
  summary: >-
    <span data-ttu-id="d3fe8-243">Коллекция имен, относящих к текущему листу.</span><span class="sxs-lookup"><span data-stu-id="d3fe8-243">Collection of names scoped to the current worksheet.</span></span> <span data-ttu-id="d3fe8-244">Только для чтения.</span><span class="sxs-lookup"><span data-stu-id="d3fe8-244">Read-only.</span></span>


    <span data-ttu-id="d3fe8-245">\[[Набор API: ExcelApi 1,4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d3fe8-245">\[ [API set: ExcelApi 1.4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: names
  fullName: names
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly names: Excel.NamedItemCollection;'
    return:
      type:
      - excel.Excel.NamedItemCollection
- uid: excel.Excel.Worksheet.onActivated
  summary: >-
    <span data-ttu-id="d3fe8-246">Возникает при активации листа.</span><span class="sxs-lookup"><span data-stu-id="d3fe8-246">Occurs when the worksheet is activated.</span></span>


    <span data-ttu-id="d3fe8-247">\[[Набор API: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d3fe8-247">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: onActivated
  fullName: onActivated
  langs:
  - typeScript
  type: event
  syntax:
    content: 'readonly onActivated: OfficeExtension.EventHandlers<Excel.WorksheetActivatedEventArgs>;'
    return:
      type:
      - OfficeExtension.EventHandlers<Excel.WorksheetActivatedEventArgs>
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"d3fe8-248\">Примеры</span><span class=\"sxs-lookup\"><span data-stu-id=\"d3fe8-248\">Examples</span></span>\n\n```javascript\nExcel.run(function (context) {\n    var sheet = context.workbook.worksheets.getItem(\"Sample\");\n    sheet.onActivated.add(function (event) {\n        return Excel.run((context) => {\n            console.log(\"The activated worksheet ID is: \" + event.worksheetId);\n            return context.sync();\n        });\n    });\n    return context.sync();\n});\n```"
- uid: excel.Excel.Worksheet.onCalculated
  summary: >-
    <span data-ttu-id="d3fe8-249">Возникает при вычислении листа.</span><span class="sxs-lookup"><span data-stu-id="d3fe8-249">Occurs when the worksheet is calculated.</span></span>


    <span data-ttu-id="d3fe8-250">\[[Набор API: ExcelApi 1,8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d3fe8-250">\[ [API set: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: onCalculated
  fullName: onCalculated
  langs:
  - typeScript
  type: event
  syntax:
    content: 'readonly onCalculated: OfficeExtension.EventHandlers<Excel.WorksheetCalculatedEventArgs>;'
    return:
      type:
      - OfficeExtension.EventHandlers<Excel.WorksheetCalculatedEventArgs>
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"d3fe8-251\">Примеры</span><span class=\"sxs-lookup\"><span data-stu-id=\"d3fe8-251\">Examples</span></span>\n\n```javascript\nExcel.run(function (context) {\n    var sheet = context.workbook.worksheets.getItem(\"Sample\");\n    sheet.onCalculated.add(function (event) {\n        return Excel.run((context) => {\n            console.log(\"The worksheet has recalculated.\");\n            return context.sync();\n        });\n    });\n    return context.sync();\n});\n```"
- uid: excel.Excel.Worksheet.onChanged
  summary: >-
    <span data-ttu-id="d3fe8-252">Происходит при изменении данных на конкретном листе.</span><span class="sxs-lookup"><span data-stu-id="d3fe8-252">Occurs when data changed on a specific worksheet.</span></span>


    <span data-ttu-id="d3fe8-253">\[[Набор API: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d3fe8-253">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: onChanged
  fullName: onChanged
  langs:
  - typeScript
  type: event
  syntax:
    content: 'readonly onChanged: OfficeExtension.EventHandlers<Excel.WorksheetChangedEventArgs>;'
    return:
      type:
      - OfficeExtension.EventHandlers<Excel.WorksheetChangedEventArgs>
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"d3fe8-254\">Примеры</span><span class=\"sxs-lookup\"><span data-stu-id=\"d3fe8-254\">Examples</span></span>\n\n```typescript\nawait Excel.run(async (context) => {\n    let sheet = context.workbook.worksheets.getItem(\"Sample\");\n    sheet.onChanged.add(onChange);\n\n    await context.sync();\n    console.log(\"A handler has been registered for the onChanged event.\");\n});\n```"
- uid: excel.Excel.Worksheet.onDeactivated
  summary: >-
    <span data-ttu-id="d3fe8-255">Возникает при отключении рабочего листа.</span><span class="sxs-lookup"><span data-stu-id="d3fe8-255">Occurs when the worksheet is deactivated.</span></span>


    <span data-ttu-id="d3fe8-256">\[[Набор API: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d3fe8-256">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: onDeactivated
  fullName: onDeactivated
  langs:
  - typeScript
  type: event
  syntax:
    content: 'readonly onDeactivated: OfficeExtension.EventHandlers<Excel.WorksheetDeactivatedEventArgs>;'
    return:
      type:
      - OfficeExtension.EventHandlers<Excel.WorksheetDeactivatedEventArgs>
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"d3fe8-257\">Примеры</span><span class=\"sxs-lookup\"><span data-stu-id=\"d3fe8-257\">Examples</span></span>\n\n```javascript\nExcel.run(function (context) {\n    var sheet = context.workbook.worksheets.getItem(\"Sample\");\n    sheet.onDeactivated.add(function (event) {\n        return Excel.run((context) => {\n            console.log(\"The deactivated worksheet is: \" + event.worksheetId);\n            return context.sync();\n        });\n    });\n    return context.sync();\n});\n```"
- uid: excel.Excel.Worksheet.onFiltered
  summary: >-
    <span data-ttu-id="d3fe8-258">Возникает, если применен фильтр к указанному листу.</span><span class="sxs-lookup"><span data-stu-id="d3fe8-258">Occurs when filter is applied on a specific worksheet.</span></span>


    <span data-ttu-id="d3fe8-259">\[[Набор API: EXCELAPI Beta (только ознакомительная версия)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d3fe8-259">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  isPreview: true
  name: onFiltered
  fullName: onFiltered
  langs:
  - typeScript
  type: event
  syntax:
    content: 'readonly onFiltered: OfficeExtension.EventHandlers<Excel.WorksheetFilteredEventArgs>;'
    return:
      type:
      - OfficeExtension.EventHandlers<Excel.WorksheetFilteredEventArgs>
- uid: excel.Excel.Worksheet.onFormatChanged
  summary: >-
    <span data-ttu-id="d3fe8-260">Возникает, если изменен формат указанного листа.</span><span class="sxs-lookup"><span data-stu-id="d3fe8-260">Occurs when format changed on a specific worksheet.</span></span>


    <span data-ttu-id="d3fe8-261">\[[Набор API: EXCELAPI Beta (только ознакомительная версия)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d3fe8-261">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  isPreview: true
  name: onFormatChanged
  fullName: onFormatChanged
  langs:
  - typeScript
  type: event
  syntax:
    content: 'readonly onFormatChanged: OfficeExtension.EventHandlers<Excel.WorksheetFormatChangedEventArgs>;'
    return:
      type:
      - OfficeExtension.EventHandlers<Excel.WorksheetFormatChangedEventArgs>
- uid: excel.Excel.Worksheet.onSelectionChanged
  summary: >-
    <span data-ttu-id="d3fe8-262">Возникает при изменении выделенного фрагмента на определенном листе.</span><span class="sxs-lookup"><span data-stu-id="d3fe8-262">Occurs when the selection changes on a specific worksheet.</span></span>


    <span data-ttu-id="d3fe8-263">\[[Набор API: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d3fe8-263">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: onSelectionChanged
  fullName: onSelectionChanged
  langs:
  - typeScript
  type: event
  syntax:
    content: 'readonly onSelectionChanged: OfficeExtension.EventHandlers<Excel.WorksheetSelectionChangedEventArgs>;'
    return:
      type:
      - OfficeExtension.EventHandlers<Excel.WorksheetSelectionChangedEventArgs>
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"d3fe8-264\">Примеры</span><span class=\"sxs-lookup\"><span data-stu-id=\"d3fe8-264\">Examples</span></span>\n\n```javascript\nExcel.run(function (context) {\n    var sheet = context.workbook.worksheets.getItem(\"Sample\");\n    sheet.onSelectionChanged.add(function (event) {\n        return Excel.run((context) => {\n            console.log(\"The selected range has changed to: \" + event.address);\n            return context.sync();\n        });\n    });\n    return context.sync();\n});\n```"
- uid: excel.Excel.Worksheet.pageLayout
  summary: >-
    <span data-ttu-id="d3fe8-265">Получает объект PageLayout листа.</span><span class="sxs-lookup"><span data-stu-id="d3fe8-265">Gets the PageLayout object of the worksheet.</span></span>


    <span data-ttu-id="d3fe8-266">\[[Набор API: EXCELAPI Beta (только ознакомительная версия)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d3fe8-266">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  isPreview: true
  name: pageLayout
  fullName: pageLayout
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly pageLayout: Excel.PageLayout;'
    return:
      type:
      - excel.Excel.PageLayout
- uid: excel.Excel.Worksheet.pivotTables
  summary: >-
    <span data-ttu-id="d3fe8-267">Коллекция сводных таблиц на листе.</span><span class="sxs-lookup"><span data-stu-id="d3fe8-267">Collection of PivotTables that are part of the worksheet.</span></span> <span data-ttu-id="d3fe8-268">Только для чтения.</span><span class="sxs-lookup"><span data-stu-id="d3fe8-268">Read-only.</span></span>


    <span data-ttu-id="d3fe8-269">\[[Набор API: ExcelApi 1,3](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d3fe8-269">\[ [API set: ExcelApi 1.3](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: pivotTables
  fullName: pivotTables
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly pivotTables: Excel.PivotTableCollection;'
    return:
      type:
      - excel.Excel.PivotTableCollection
- uid: excel.Excel.Worksheet.position
  summary: >-
    <span data-ttu-id="d3fe8-270">Положение листа (начиная с нуля) в книге.</span><span class="sxs-lookup"><span data-stu-id="d3fe8-270">The zero-based position of the worksheet within the workbook.</span></span>


    <span data-ttu-id="d3fe8-271">\[[Набор API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d3fe8-271">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: position
  fullName: position
  langs:
  - typeScript
  type: property
  syntax:
    content: 'position: number;'
    return:
      type:
      - number
- uid: excel.Excel.Worksheet.protection
  summary: >-
    <span data-ttu-id="d3fe8-272">Возвращает объект защиты листа.</span><span class="sxs-lookup"><span data-stu-id="d3fe8-272">Returns sheet protection object for a worksheet.</span></span> <span data-ttu-id="d3fe8-273">Только для чтения.</span><span class="sxs-lookup"><span data-stu-id="d3fe8-273">Read-only.</span></span>


    <span data-ttu-id="d3fe8-274">\[[Набор API: ExcelApi 1,2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d3fe8-274">\[ [API set: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: protection
  fullName: protection
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly protection: Excel.WorksheetProtection;'
    return:
      type:
      - excel.Excel.WorksheetProtection
- uid: excel.Excel.Worksheet.replaceAll
  summary: >-
    <span data-ttu-id="d3fe8-275">Находит и заменяет определенную строку на основе условий, указанных в текущем листе.</span><span class="sxs-lookup"><span data-stu-id="d3fe8-275">Finds and replaces the given string based on the criteria specified within the current worksheet.</span></span>


    <span data-ttu-id="d3fe8-276">\[[Набор API: EXCELAPI Beta (только ознакомительная версия)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d3fe8-276">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  isPreview: true
  name: replaceAll(text, replacement, criteria)
  fullName: replaceAll(text, replacement, criteria)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'replaceAll(text: string, replacement: string, criteria: Excel.ReplaceCriteria): OfficeExtension.ClientResult<number>;'
    return:
      type:
      - OfficeExtension.ClientResult<number>
      description: <span data-ttu-id="d3fe8-277">Количество выполненных замен.</span><span class="sxs-lookup"><span data-stu-id="d3fe8-277">The number of replacements performed.</span></span>
    parameters:
    - id: text
      description: <span data-ttu-id="d3fe8-278">Строка для поиска.</span><span class="sxs-lookup"><span data-stu-id="d3fe8-278">String to find.</span></span>
      type:
      - string
    - id: replacement
      description: <span data-ttu-id="d3fe8-279">Строка для замены оригинала на.</span><span class="sxs-lookup"><span data-stu-id="d3fe8-279">String to replace the original with.</span></span>
      type:
      - string
    - id: criteria
      description: <span data-ttu-id="d3fe8-280">Дополнительные условия замены.</span><span class="sxs-lookup"><span data-stu-id="d3fe8-280">Additional Replace Criteria.</span></span>
      type:
      - excel.Excel.ReplaceCriteria
- uid: excel.Excel.Worksheet.set
  summary: <span data-ttu-id="d3fe8-281">Задает одновременно несколько свойств объекта.</span><span class="sxs-lookup"><span data-stu-id="d3fe8-281">Sets multiple properties of an object at the same time.</span></span> <span data-ttu-id="d3fe8-282">Можно передать либо простой объект с соответствующими свойствами, либо другой объект API того же типа.</span><span class="sxs-lookup"><span data-stu-id="d3fe8-282">You can pass either a plain object with the appropriate properties, or another API object of the same type.</span></span>
  remarks: >-
    <span data-ttu-id="d3fe8-283">Этот метод имеет следующую дополнительную подпись:</span><span class="sxs-lookup"><span data-stu-id="d3fe8-283">This method has the following additional signature:</span></span>


    `set(properties: Excel.Worksheet): void`
  name: set(properties, options)
  fullName: set(properties, options)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'set(properties: Interfaces.WorksheetUpdateData, options?: OfficeExtension.UpdateOptions): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: properties
      description: <span data-ttu-id="d3fe8-284">Объект JavaScript со свойствами, которые структурированы исоморфикалли к свойствам объекта, для которого вызывается метод.</span><span class="sxs-lookup"><span data-stu-id="d3fe8-284">A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.</span></span>
      type:
      - Interfaces.WorksheetUpdateData
    - id: options
      description: <span data-ttu-id="d3fe8-285">Предоставляет возможность подавлять ошибки, если объект Properties пытается задать любые свойства, предназначенные только для чтения.</span><span class="sxs-lookup"><span data-stu-id="d3fe8-285">Provides an option to suppress errors if the properties object tries to set any read-only properties.</span></span>
      type:
      - office.OfficeExtension.UpdateOptions
- uid: excel.Excel.Worksheet.set_1
  summary: <span data-ttu-id="d3fe8-286">Задает одновременно несколько свойств объекта на основе существующего загруженного объекта.</span><span class="sxs-lookup"><span data-stu-id="d3fe8-286">Sets multiple properties on the object at the same time, based on an existing loaded object.</span></span>
  name: set(properties)
  fullName: set(properties)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'set(properties: Excel.Worksheet): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: properties
      description: ''
      type:
      - excel.Excel.Worksheet
- uid: excel.Excel.Worksheet.shapes
  summary: >-
    <span data-ttu-id="d3fe8-287">Возвращает коллекцию всех объектов Shape на листе.</span><span class="sxs-lookup"><span data-stu-id="d3fe8-287">Returns the collection of all the Shape objects on the worksheet.</span></span> <span data-ttu-id="d3fe8-288">Только для чтения.</span><span class="sxs-lookup"><span data-stu-id="d3fe8-288">Read-only.</span></span>


    <span data-ttu-id="d3fe8-289">\[[Набор API: EXCELAPI Beta (только ознакомительная версия)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d3fe8-289">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  isPreview: true
  name: shapes
  fullName: shapes
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly shapes: Excel.ShapeCollection;'
    return:
      type:
      - excel.Excel.ShapeCollection
- uid: excel.Excel.Worksheet.showGridlines
  summary: >-
    <span data-ttu-id="d3fe8-290">Получает или задает флаг линий сетки листа.</span><span class="sxs-lookup"><span data-stu-id="d3fe8-290">Gets or sets the worksheet's gridlines flag.</span></span> <span data-ttu-id="d3fe8-291">Этот флаг определяет, отображаются ли линии сетки для пользователя.</span><span class="sxs-lookup"><span data-stu-id="d3fe8-291">This flag determines whether gridlines are visible to the user.</span></span>


    <span data-ttu-id="d3fe8-292">\[[Набор API: ExcelApi 1,8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d3fe8-292">\[ [API set: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: showGridlines
  fullName: showGridlines
  langs:
  - typeScript
  type: property
  syntax:
    content: 'showGridlines: boolean;'
    return:
      type:
      - boolean
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"d3fe8-293\">Примеры</span><span class=\"sxs-lookup\"><span data-stu-id=\"d3fe8-293\">Examples</span></span>\n\n```typescript\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getActiveWorksheet();\n    sheet.showGridlines = true;\n\n    await context.sync();\n});\n```"
- uid: excel.Excel.Worksheet.showHeadings
  summary: >-
    <span data-ttu-id="d3fe8-294">Получает или задает флаг заголовков листа.</span><span class="sxs-lookup"><span data-stu-id="d3fe8-294">Gets or sets the worksheet's headings flag.</span></span> <span data-ttu-id="d3fe8-295">Этот флаг определяет, отображаются ли заголовки для пользователя.</span><span class="sxs-lookup"><span data-stu-id="d3fe8-295">This flag determines whether headings are visible to the user.</span></span>


    <span data-ttu-id="d3fe8-296">\[[Набор API: ExcelApi 1,8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d3fe8-296">\[ [API set: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: showHeadings
  fullName: showHeadings
  langs:
  - typeScript
  type: property
  syntax:
    content: 'showHeadings: boolean;'
    return:
      type:
      - boolean
- uid: excel.Excel.Worksheet.slicers
  summary: >-
    <span data-ttu-id="d3fe8-297">Возвращает коллекцию срезов, имеющихся на листе.</span><span class="sxs-lookup"><span data-stu-id="d3fe8-297">Returns collection of slicers that are part of the worksheet.</span></span> <span data-ttu-id="d3fe8-298">Только для чтения.</span><span class="sxs-lookup"><span data-stu-id="d3fe8-298">Read-only.</span></span>


    <span data-ttu-id="d3fe8-299">\[[Набор API: EXCELAPI Beta (только ознакомительная версия)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d3fe8-299">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  isPreview: true
  name: slicers
  fullName: slicers
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly slicers: Excel.SlicerCollection;'
    return:
      type:
      - excel.Excel.SlicerCollection
- uid: excel.Excel.Worksheet.standardHeight
  summary: >-
    <span data-ttu-id="d3fe8-300">Возвращает стандартную (по умолчанию) высоту всех строк на листе (в пунктах).</span><span class="sxs-lookup"><span data-stu-id="d3fe8-300">Returns the standard (default) height of all the rows in the worksheet, in points.</span></span> <span data-ttu-id="d3fe8-301">Только для чтения.</span><span class="sxs-lookup"><span data-stu-id="d3fe8-301">Read-only.</span></span>


    <span data-ttu-id="d3fe8-302">\[[Набор API: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d3fe8-302">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: standardHeight
  fullName: standardHeight
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly standardHeight: number;'
    return:
      type:
      - number
- uid: excel.Excel.Worksheet.standardWidth
  summary: >-
    <span data-ttu-id="d3fe8-303">Возвращает или задает стандартную (по умолчанию) ширину всех столбцов на листе.</span><span class="sxs-lookup"><span data-stu-id="d3fe8-303">Returns or sets the standard (default) width of all the columns in the worksheet.</span></span> <span data-ttu-id="d3fe8-304">Одна единица измерения ширины столбца равна ширине одного символа в стиле Normal.</span><span class="sxs-lookup"><span data-stu-id="d3fe8-304">One unit of column width is equal to the width of one character in the Normal style.</span></span> <span data-ttu-id="d3fe8-305">Для пропорциональных шрифтов используется ширина знака 0 (ноль).</span><span class="sxs-lookup"><span data-stu-id="d3fe8-305">For proportional fonts, the width of the character 0 (zero) is used.</span></span>


    <span data-ttu-id="d3fe8-306">\[[Набор API: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d3fe8-306">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: standardWidth
  fullName: standardWidth
  langs:
  - typeScript
  type: property
  syntax:
    content: 'standardWidth: number;'
    return:
      type:
      - number
- uid: excel.Excel.Worksheet.tabColor
  summary: >-
    <span data-ttu-id="d3fe8-307">Получает или задает цвет вкладки листа.</span><span class="sxs-lookup"><span data-stu-id="d3fe8-307">Gets or sets the worksheet tab color.</span></span> <span data-ttu-id="d3fe8-308">При получении цвета вкладки, если лист невидим, значение будет равно null.</span><span class="sxs-lookup"><span data-stu-id="d3fe8-308">When retrieving the tab color, if the worksheet is invisible, the value will be null.</span></span> <span data-ttu-id="d3fe8-309">Если лист является видимым, но для цвета вкладки задано значение Авто, возвращается пустая строка.</span><span class="sxs-lookup"><span data-stu-id="d3fe8-309">If the worksheet is visible but the tab color is set to auto, an empty string will be returned.</span></span> <span data-ttu-id="d3fe8-310">В противном случае для свойства задается цвет, в виде "\#123456" при задании цвета используйте пустую строку для установки "Авто" или "реальный цвет" в противном случае.</span><span class="sxs-lookup"><span data-stu-id="d3fe8-310">Otherwise, the property will be set to a color, in the form "\#123456" When setting the color, use an empty-string to set an "auto" color, or a real color otherwise.</span></span>


    <span data-ttu-id="d3fe8-311">\[[Набор API: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d3fe8-311">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: tabColor
  fullName: tabColor
  langs:
  - typeScript
  type: property
  syntax:
    content: 'tabColor: string;'
    return:
      type:
      - string
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"d3fe8-312\">Примеры</span><span class=\"sxs-lookup\"><span data-stu-id=\"d3fe8-312\">Examples</span></span>\n\n```typescript\nawait Excel.run(async (context) => {\n    const activeSheet = context.workbook.worksheets.getActiveWorksheet();\n    activeSheet.tabColor = \"#FF0000\";\n\n    await context.sync();\n});\n```"
- uid: excel.Excel.Worksheet.tables
  summary: >-
    <span data-ttu-id="d3fe8-313">Коллекция таблиц, имеющихся на листе.</span><span class="sxs-lookup"><span data-stu-id="d3fe8-313">Collection of tables that are part of the worksheet.</span></span> <span data-ttu-id="d3fe8-314">Только для чтения.</span><span class="sxs-lookup"><span data-stu-id="d3fe8-314">Read-only.</span></span>


    <span data-ttu-id="d3fe8-315">\[[Набор API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d3fe8-315">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: tables
  fullName: tables
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly tables: Excel.TableCollection;'
    return:
      type:
      - excel.Excel.TableCollection
- uid: excel.Excel.Worksheet.toJSON
  summary: <span data-ttu-id="d3fe8-316">ПереОпределяет метод `toJSON()` JavaScript для предоставления более удобного вывода при передаче объекта API`JSON.stringify()`</span><span class="sxs-lookup"><span data-stu-id="d3fe8-316">Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`</span></span><!-- --><span data-ttu-id="d3fe8-317">.</span><span class="sxs-lookup"><span data-stu-id="d3fe8-317"></span></span> <span data-ttu-id="d3fe8-318">(`JSON.stringify`</span><span class="sxs-lookup"><span data-stu-id="d3fe8-318"></span></span><!-- --><span data-ttu-id="d3fe8-319">, в свою очередь, вызывает `toJSON` метод объекта, который передается ему.) В то время как исходный объект Excel. лист является объектом API, `toJSON` метод возвращает простой объект JavaScript (тип`Excel.Interfaces.WorksheetData`</span><span class="sxs-lookup"><span data-stu-id="d3fe8-319">, in turn, calls the `toJSON` method of the object that is passed to it.) Whereas the original Excel.Worksheet object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.WorksheetData`</span></span><!-- --><span data-ttu-id="d3fe8-320">), который содержит неполные копии загруженных дочерних свойств из исходного объекта.</span><span class="sxs-lookup"><span data-stu-id="d3fe8-320">) that contains shallow copies of any loaded child properties from the original object.</span></span>
  name: toJSON()
  fullName: toJSON()
  langs:
  - typeScript
  type: method
  syntax:
    content: 'toJSON(): Excel.Interfaces.WorksheetData;'
    return:
      type:
      - excel.Excel.Interfaces.WorksheetData
      description: ''
- uid: excel.Excel.Worksheet.verticalPageBreaks
  summary: >-
    <span data-ttu-id="d3fe8-321">Получает коллекцию вертикальных разрывов страницы для листа.</span><span class="sxs-lookup"><span data-stu-id="d3fe8-321">Gets the vertical page break collection for the worksheet.</span></span> <span data-ttu-id="d3fe8-322">Эта коллекция содержит только добавленные вручную разрывы страниц.</span><span class="sxs-lookup"><span data-stu-id="d3fe8-322">This collection only contains manual page breaks.</span></span>


    <span data-ttu-id="d3fe8-323">\[[Набор API: EXCELAPI Beta (только ознакомительная версия)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d3fe8-323">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  isPreview: true
  name: verticalPageBreaks
  fullName: verticalPageBreaks
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly verticalPageBreaks: Excel.PageBreakCollection;'
    return:
      type:
      - excel.Excel.PageBreakCollection
- uid: excel.Excel.Worksheet.visibility
  summary: >-
    <span data-ttu-id="d3fe8-324">Видимость листа.</span><span class="sxs-lookup"><span data-stu-id="d3fe8-324">The Visibility of the worksheet.</span></span>


    <span data-ttu-id="d3fe8-325">\[[Набор API: ExcelApi 1,1 для чтения видимости; 1,2 — для его установки.](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)</span><span class="sxs-lookup"><span data-stu-id="d3fe8-325">\[ [API set: ExcelApi 1.1 for reading visibility; 1.2 for setting it.](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)</span></span> <span data-ttu-id="d3fe8-326">\]</span><span class="sxs-lookup"><span data-stu-id="d3fe8-326"></span></span>
  name: visibility
  fullName: visibility
  langs:
  - typeScript
  type: property
  syntax:
    content: 'visibility: Excel.SheetVisibility | "Visible" | "Hidden" | "VeryHidden";'
    return:
      type:
      - Excel.SheetVisibility | "Visible" | "Hidden" | "VeryHidden"
