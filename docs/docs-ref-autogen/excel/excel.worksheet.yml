### YamlMime:UniversalReference
ms.openlocfilehash: 1791fb762c7f00c3dac8e2491b925f5fe7c6362c
ms.sourcegitcommit: e9cb2f2717e1cf062a2f6ffe6a382d7b9b934ba0
ms.translationtype: MT
ms.contentlocale: ru-RU
ms.lasthandoff: 09/21/2018
ms.locfileid: "24063180"
items:
- uid: excel.Excel.Worksheet
  summary: >-
    <span data-ttu-id="7693e-p101">Лист Excel представляет собой сетку ячеек. Он может содержать данные, таблицы, диаграммы и т. д.</span><span class="sxs-lookup"><span data-stu-id="7693e-p101">An Excel worksheet is a grid of cells. It can contain data, tables, charts, etc.</span></span>


    <span data-ttu-id="7693e-103">\[[Набор API-Интерфейсов: ExcelApi 1.1](/javascript/office/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="7693e-103">\[ [API set: ExcelApi 1.1](/javascript/office/requirement-sets/excel-api-requirement-sets) \]</span></span>
  remarks: <span data-ttu-id="7693e-104">Наш [руководство по работе с листами](https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-worksheets) подробные пошаговые руководства и примеры кодов.</span><span class="sxs-lookup"><span data-stu-id="7693e-104">Our [how-to guide on working with worksheets](https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-worksheets) has detailed walkthroughs and code samples.</span></span>
  name: Excel.Worksheet
  fullName: excel.Excel.Worksheet
  langs:
  - typeScript
  type: class
  extends:
  - OfficeExtension.ClientObject
  package: excel
  children:
  - excel.Excel.Worksheet.activate
  - excel.Excel.Worksheet.calculate
  - excel.Excel.Worksheet.charts
  - excel.Excel.Worksheet.copy
  - excel.Excel.Worksheet.delete
  - excel.Excel.Worksheet.freezePanes
  - excel.Excel.Worksheet.getCell
  - excel.Excel.Worksheet.getNext
  - excel.Excel.Worksheet.getNextOrNullObject
  - excel.Excel.Worksheet.getPrevious
  - excel.Excel.Worksheet.getPreviousOrNullObject
  - excel.Excel.Worksheet.getRange
  - excel.Excel.Worksheet.getRangeByIndexes
  - excel.Excel.Worksheet.getUsedRange
  - excel.Excel.Worksheet.getUsedRangeOrNullObject
  - excel.Excel.Worksheet.id
  - excel.Excel.Worksheet.load
  - excel.Excel.Worksheet.name
  - excel.Excel.Worksheet.names
  - excel.Excel.Worksheet.onActivated
  - excel.Excel.Worksheet.onCalculated
  - excel.Excel.Worksheet.onChanged
  - excel.Excel.Worksheet.onDeactivated
  - excel.Excel.Worksheet.onSelectionChanged
  - excel.Excel.Worksheet.pivotTables
  - excel.Excel.Worksheet.position
  - excel.Excel.Worksheet.protection
  - excel.Excel.Worksheet.showGridlines
  - excel.Excel.Worksheet.showHeadings
  - excel.Excel.Worksheet.standardHeight
  - excel.Excel.Worksheet.standardWidth
  - excel.Excel.Worksheet.tabColor
  - excel.Excel.Worksheet.tables
  - excel.Excel.Worksheet.toJSON
  - excel.Excel.Worksheet.visibility
- uid: excel.Excel.Worksheet.activate
  summary: >-
    <span data-ttu-id="7693e-105">Активация листа в пользовательском интерфейсе Excel.</span><span class="sxs-lookup"><span data-stu-id="7693e-105">Activate the worksheet in the Excel UI.</span></span>


    <span data-ttu-id="7693e-106">\[[Набор API-Интерфейсов: ExcelApi 1.1](/javascript/office/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="7693e-106">\[ [API set: ExcelApi 1.1](/javascript/office/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: activate()
  fullName: excel.Excel.Worksheet.activate
  langs:
  - typeScript
  type: method
  syntax:
    content: 'activate(): void;'
    return:
      type:
      - void
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"7693e-107\">Примеры</span><span class=\"sxs-lookup\"><span data-stu-id=\"7693e-107\">Examples</span></span>\n\n```javascript\nExcel.run(function (ctx) { \n    var wSheetName = 'Sheet1';\n    var worksheet = ctx.workbook.worksheets.getItem(wSheetName);\n    worksheet.activate();\n    return ctx.sync(); \n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- uid: excel.Excel.Worksheet.calculate
  summary: >-
    <span data-ttu-id="7693e-108">Вычисляет все ячейки на листе.</span><span class="sxs-lookup"><span data-stu-id="7693e-108">Calculates all cells on a worksheet.</span></span>


    <span data-ttu-id="7693e-109">\[[Набор API-Интерфейсов: ExcelApi 1.6](/javascript/office/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="7693e-109">\[ [API set: ExcelApi 1.6](/javascript/office/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: calculate(markAllDirty)
  fullName: excel.Excel.Worksheet.calculate
  langs:
  - typeScript
  type: method
  syntax:
    content: 'calculate(markAllDirty: boolean): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: markAllDirty
      description: <span data-ttu-id="7693e-110">Значение true, чтобы пометить все как dirty.</span><span class="sxs-lookup"><span data-stu-id="7693e-110">True, to mark all as dirty.</span></span>
      type:
      - boolean
- uid: excel.Excel.Worksheet.charts
  summary: >-
    <span data-ttu-id="7693e-p102">Возвращает коллекцию диаграмм, имеющихся на листе. Только для чтения.</span><span class="sxs-lookup"><span data-stu-id="7693e-p102">Returns collection of charts that are part of the worksheet. Read-only.</span></span>


    <span data-ttu-id="7693e-113">\[[Набор API-Интерфейсов: ExcelApi 1.1](/javascript/office/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="7693e-113">\[ [API set: ExcelApi 1.1](/javascript/office/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: charts
  fullName: excel.Excel.Worksheet.charts
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly charts: Excel.ChartCollection;'
    return:
      type:
      - excel.Excel.ChartCollection
- uid: excel.Excel.Worksheet.copy
  summary: >-
    <span data-ttu-id="7693e-114">Скопируйте листа и поместите его в заданной позиции.</span><span class="sxs-lookup"><span data-stu-id="7693e-114">Copy a worksheet and place it at the specified position.</span></span> <span data-ttu-id="7693e-115">Возвращает копии листа.</span><span class="sxs-lookup"><span data-stu-id="7693e-115">Return the copied worksheet.</span></span>


    <span data-ttu-id="7693e-116">\[[Набор API-Интерфейсов: ExcelApi 1.7](/javascript/office/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="7693e-116">\[ [API set: ExcelApi 1.7](/javascript/office/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: copy(positionType, relativeTo)
  fullName: excel.Excel.Worksheet.copy
  langs:
  - typeScript
  type: method
  syntax:
    content: 'copy(positionType?: Excel.WorksheetPositionType, relativeTo?: Excel.Worksheet): Excel.Worksheet;'
    return:
      type:
      - excel.Excel.Worksheet
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"7693e-117\">Примеры</span><span class=\"sxs-lookup\"><span data-stu-id=\"7693e-117\">Examples</span></span>\n\n```typescript\nawait Excel.run(async (context) => {\n\n    let myWorkbook = context.workbook;\n    let sampleSheet = myWorkbook.worksheets.getActiveWorksheet();\n    let copiedSheet = sampleSheet.copy(\"End\")\n\n    sampleSheet.load(\"name\");\n    copiedSheet.load(\"name\");\n\n    await context.sync();\n\n    console.log(\"'\" + sampleSheet.name + \"' was copied to '\" + copiedSheet.name + \"'\")\n});\n```"
    parameters:
    - id: positionType
      description: <span data-ttu-id="7693e-118">Необязательный.</span><span class="sxs-lookup"><span data-stu-id="7693e-118">Optional.</span></span>
      type:
      - excel.Excel.WorksheetPositionType
    - id: relativeTo
      description: <span data-ttu-id="7693e-119">Необязательный.</span><span class="sxs-lookup"><span data-stu-id="7693e-119">Optional.</span></span>
      type:
      - excel.Excel.Worksheet
- uid: excel.Excel.Worksheet.delete
  summary: >-
    <span data-ttu-id="7693e-120">Удаляет лист из книги.</span><span class="sxs-lookup"><span data-stu-id="7693e-120">Deletes the worksheet from the workbook.</span></span>


    <span data-ttu-id="7693e-121">\[[Набор API-Интерфейсов: ExcelApi 1.1](/javascript/office/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="7693e-121">\[ [API set: ExcelApi 1.1](/javascript/office/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: delete()
  fullName: excel.Excel.Worksheet.delete
  langs:
  - typeScript
  type: method
  syntax:
    content: 'delete(): void;'
    return:
      type:
      - void
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"7693e-122\">Примеры</span><span class=\"sxs-lookup\"><span data-stu-id=\"7693e-122\">Examples</span></span>\n\n```javascript\nExcel.run(function (ctx) { \n    var wSheetName = 'Sheet1';\n    var worksheet = ctx.workbook.worksheets.getItem(wSheetName);\n    worksheet.delete();\n    return ctx.sync(); \n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- uid: excel.Excel.Worksheet.freezePanes
  summary: >-
    <span data-ttu-id="7693e-123">Получает объект, который можно использовать для работы с закрепление областей в рабочем листе.</span><span class="sxs-lookup"><span data-stu-id="7693e-123">Gets an object that can be used to manipulate frozen panes on the worksheet.</span></span> <span data-ttu-id="7693e-124">Только для чтения.</span><span class="sxs-lookup"><span data-stu-id="7693e-124">Read-only.</span></span>


    <span data-ttu-id="7693e-125">\[[Набор API-Интерфейсов: ExcelApi 1.7](/javascript/office/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="7693e-125">\[ [API set: ExcelApi 1.7](/javascript/office/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: freezePanes
  fullName: excel.Excel.Worksheet.freezePanes
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly freezePanes: Excel.WorksheetFreezePanes;'
    return:
      type:
      - excel.Excel.WorksheetFreezePanes
- uid: excel.Excel.Worksheet.getCell
  summary: >-
    <span data-ttu-id="7693e-p105">Получает объект диапазона, содержащий одну ячейку, на основе номера строки и столбца. Ячейка может быть вне родительского диапазона, если она расположена в таблице листа.</span><span class="sxs-lookup"><span data-stu-id="7693e-p105">Gets the range object containing the single cell based on row and column numbers. The cell can be outside the bounds of its parent range, so long as it stays within the worksheet grid.</span></span>


    <span data-ttu-id="7693e-128">\[[Набор API-Интерфейсов: ExcelApi 1.1](/javascript/office/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="7693e-128">\[ [API set: ExcelApi 1.1](/javascript/office/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getCell(row, column)
  fullName: excel.Excel.Worksheet.getCell
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getCell(row: number, column: number): Excel.Range;'
    return:
      type:
      - excel.Excel.Range
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"7693e-129\">Примеры</span><span class=\"sxs-lookup\"><span data-stu-id=\"7693e-129\">Examples</span></span>\n\n```javascript\nExcel.run(function (ctx) { \n    var sheetName = \"Sheet1\";\n    var rangeAddress = \"A1:F8\";\n    var worksheet = ctx.workbook.worksheets.getItem(sheetName);\n    var cell = worksheet.getCell(0,0);\n    cell.load('address');\n    return ctx.sync().then(function() {\n        console.log(cell.address);\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
    parameters:
    - id: row
      description: <span data-ttu-id="7693e-p106">Номер строки ячейки, которую требуется извлечь. Используется нулевой индекс.</span><span class="sxs-lookup"><span data-stu-id="7693e-p106">The row number of the cell to be retrieved. Zero-indexed.</span></span>
      type:
      - number
    - id: column
      description: <span data-ttu-id="7693e-p107">Номер столбца ячейки, которую требуется извлечь. Используется нулевой индекс.</span><span class="sxs-lookup"><span data-stu-id="7693e-p107">the column number of the cell to be retrieved. Zero-indexed.</span></span>
      type:
      - number
- uid: excel.Excel.Worksheet.getNext
  summary: >-
    <span data-ttu-id="7693e-p108">Получает следующий лист. Если следующего листа нет, возникает ошибка.</span><span class="sxs-lookup"><span data-stu-id="7693e-p108">Gets the worksheet that follows this one. If there are no worksheets following this one, this method will throw an error.</span></span>


    <span data-ttu-id="7693e-136">\[[Набор API-Интерфейсов: ExcelApi 1,5](/javascript/office/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="7693e-136">\[ [API set: ExcelApi 1.5](/javascript/office/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getNext(visibleOnly)
  fullName: excel.Excel.Worksheet.getNext
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getNext(visibleOnly?: boolean): Excel.Worksheet;'
    return:
      type:
      - excel.Excel.Worksheet
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"7693e-137\">Примеры</span><span class=\"sxs-lookup\"><span data-stu-id=\"7693e-137\">Examples</span></span>\n\n```typescript\nawait Excel.run(async (context) => {\n    const sheets = context.workbook.worksheets;\n\n    // We don't want to include the default worksheet that was created\n    // when the workbook was created, so our \"firstSheet\" will be the one\n    // after the literal first. Note chaining of navigation methods.\n    const firstSheet = sheets.getFirst().getNext();\n    const lastSheet = sheets.getLast();\n    const firstTaxRateRange = firstSheet.getRange(\"B2\");\n    const lastTaxRateRange = lastSheet.getRange(\"B2\");\n\n    firstSheet.load(\"name\");\n    lastSheet.load(\"name\");\n    firstTaxRateRange.load(\"text\");\n    lastTaxRateRange.load(\"text\");\n\n    await context.sync();\n\n    let firstYear = firstSheet.name.substr(5, 4);\n    let lastYear = lastSheet.name.substr(5, 4);\n    OfficeHelpers.UI.notify(`Tax Rate change from ${firstYear} to ${lastYear}`, `Tax rate for ${firstYear}: ${firstTaxRateRange.text[0][0]}\\nTax rate for ${lastYear}: ${lastTaxRateRange.text[0][0]}`)\n\n    await context.sync();\n});\n```"
    parameters:
    - id: visibleOnly
      description: <span data-ttu-id="7693e-p109">Необязательный. Если указано значение true, учитываются только видимые листы (скрытые пропускаются).</span><span class="sxs-lookup"><span data-stu-id="7693e-p109">Optional. If true, considers only visible worksheets, skipping over any hidden ones.</span></span>
      type:
      - boolean
- uid: excel.Excel.Worksheet.getNextOrNullObject
  summary: >-
    <span data-ttu-id="7693e-p110">Получает следующий лист. Если следующего листа нет, метод возвращает объект null.</span><span class="sxs-lookup"><span data-stu-id="7693e-p110">Gets the worksheet that follows this one. If there are no worksheets following this one, this method will return a null object.</span></span>


    <span data-ttu-id="7693e-142">\[[Набор API-Интерфейсов: ExcelApi 1,5](/javascript/office/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="7693e-142">\[ [API set: ExcelApi 1.5](/javascript/office/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getNextOrNullObject(visibleOnly)
  fullName: excel.Excel.Worksheet.getNextOrNullObject
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getNextOrNullObject(visibleOnly?: boolean): Excel.Worksheet;'
    return:
      type:
      - excel.Excel.Worksheet
      description: ''
    parameters:
    - id: visibleOnly
      description: <span data-ttu-id="7693e-p111">Необязательный. Если указано значение true, учитываются только видимые листы (скрытые пропускаются).</span><span class="sxs-lookup"><span data-stu-id="7693e-p111">Optional. If true, considers only visible worksheets, skipping over any hidden ones.</span></span>
      type:
      - boolean
- uid: excel.Excel.Worksheet.getPrevious
  summary: >-
    <span data-ttu-id="7693e-p112">Возвращает предыдущий лист. Если предыдущего листа нет, возникает ошибка.</span><span class="sxs-lookup"><span data-stu-id="7693e-p112">Gets the worksheet that precedes this one. If there are no previous worksheets, this method will throw an error.</span></span>


    <span data-ttu-id="7693e-147">\[[Набор API-Интерфейсов: ExcelApi 1,5](/javascript/office/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="7693e-147">\[ [API set: ExcelApi 1.5](/javascript/office/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getPrevious(visibleOnly)
  fullName: excel.Excel.Worksheet.getPrevious
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getPrevious(visibleOnly?: boolean): Excel.Worksheet;'
    return:
      type:
      - excel.Excel.Worksheet
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"7693e-148\">Примеры</span><span class=\"sxs-lookup\"><span data-stu-id=\"7693e-148\">Examples</span></span>\n\n```typescript\nawait Excel.run(async (context) => {\n    const sheets = context.workbook.worksheets;\n    const currentSheet = sheets.getActiveWorksheet();\n    const previousYearSheet = currentSheet.getPrevious();\n    const currentTaxDueRange = currentSheet.getRange(\"C2\");\n    const previousTaxDueRange = previousYearSheet.getRange(\"C2\");\n\n    currentSheet.load(\"name\");\n    previousYearSheet.load(\"name\");\n    currentTaxDueRange.load(\"text\");\n    previousTaxDueRange.load(\"text\");\n\n    await context.sync();\n\n    let currentYear = currentSheet.name.substr(5, 4);\n    let previousYear = previousYearSheet.name.substr(5, 4);\n    OfficeHelpers.UI.notify(\"Two Year Tax Due Comparison\", `Tax due for ${currentYear} was ${currentTaxDueRange.text[0][0]}\\nTax due for ${previousYear} was ${previousTaxDueRange.text[0][0]}`)\n\n    await context.sync();\n});\n```"
    parameters:
    - id: visibleOnly
      description: <span data-ttu-id="7693e-p113">Необязательный. Если указано значение true, учитываются только видимые листы (скрытые пропускаются).</span><span class="sxs-lookup"><span data-stu-id="7693e-p113">Optional. If true, considers only visible worksheets, skipping over any hidden ones.</span></span>
      type:
      - boolean
- uid: excel.Excel.Worksheet.getPreviousOrNullObject
  summary: >-
    <span data-ttu-id="7693e-p114">Возвращает предыдущий лист. Если предыдущего листа нет, этот метод возвращает объект null.</span><span class="sxs-lookup"><span data-stu-id="7693e-p114">Gets the worksheet that precedes this one. If there are no previous worksheets, this method will return a null objet.</span></span>


    <span data-ttu-id="7693e-153">\[[Набор API-Интерфейсов: ExcelApi 1,5](/javascript/office/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="7693e-153">\[ [API set: ExcelApi 1.5](/javascript/office/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getPreviousOrNullObject(visibleOnly)
  fullName: excel.Excel.Worksheet.getPreviousOrNullObject
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getPreviousOrNullObject(visibleOnly?: boolean): Excel.Worksheet;'
    return:
      type:
      - excel.Excel.Worksheet
      description: ''
    parameters:
    - id: visibleOnly
      description: <span data-ttu-id="7693e-p115">Необязательный. Если указано значение true, учитываются только видимые листы (скрытые пропускаются).</span><span class="sxs-lookup"><span data-stu-id="7693e-p115">Optional. If true, considers only visible worksheets, skipping over any hidden ones.</span></span>
      type:
      - boolean
- uid: excel.Excel.Worksheet.getRange
  summary: >-
    <span data-ttu-id="7693e-156">Получает объект range, представляющий один прямоугольный блок ячеек, указан адрес или имя.</span><span class="sxs-lookup"><span data-stu-id="7693e-156">Gets the range object, representing a single rectangular block of cells, specified by the address or name.</span></span>


    <span data-ttu-id="7693e-157">\[[Набор API-Интерфейсов: ExcelApi 1.1](/javascript/office/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="7693e-157">\[ [API set: ExcelApi 1.1](/javascript/office/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getRange(address)
  fullName: excel.Excel.Worksheet.getRange
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getRange(address?: string): Excel.Range;'
    return:
      type:
      - excel.Excel.Range
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"7693e-158\">Примеры</span><span class=\"sxs-lookup\"><span data-stu-id=\"7693e-158\">Examples</span></span>\n\n```javascript\n// Below example uses range address to get the range object.\nExcel.run(function (ctx) { \n    var sheetName = \"Sheet1\";\n    var rangeAddress = \"A1:F8\";\n    var worksheet = ctx.workbook.worksheets.getItem(sheetName);\n    var range = worksheet.getRange(rangeAddress);\n    range.load('cellCount');\n    return ctx.sync().then(function() {\n        console.log(range.cellCount);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```\n```javascript\n// Below example uses a named-range to get the range object.\nExcel.run(function (ctx) { \n    var sheetName = \"Sheet1\";\n    var rangeName = 'MyRange';\n    var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeName);\n    range.load('address');\n    return ctx.sync().then(function() {\n        console.log(range.address);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
    parameters:
    - id: address
      description: '<span data-ttu-id="7693e-159">Необязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="7693e-159">Optional.</span></span> <span data-ttu-id="7693e-160">Строка, представляющая адрес или имя диапазона.</span><span class="sxs-lookup"><span data-stu-id="7693e-160">The string representing the address or name of the range.</span></span> <span data-ttu-id="7693e-161">Например «a1: B2».</span><span class="sxs-lookup"><span data-stu-id="7693e-161">For example, "A1:B2".</span></span> <span data-ttu-id="7693e-162">Если не указан, возвращается диапазон всего рабочего листа.</span><span class="sxs-lookup"><span data-stu-id="7693e-162">If not specified, the entire worksheet range is returned.</span></span>'
      type:
      - string
- uid: excel.Excel.Worksheet.getRangeByIndexes
  summary: >-
    <span data-ttu-id="7693e-163">Метод  возвращает объект диапазона, начинающегося с определенных строки и столбца и занимающего определенное количество строк и столбцов.</span><span class="sxs-lookup"><span data-stu-id="7693e-163">Gets the range object beginning at a particular row index and column index, and spanning a certain number of rows and columns.</span></span>


    <span data-ttu-id="7693e-164">\[[Набор API-Интерфейсов: ExcelApi 1.7](/javascript/office/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="7693e-164">\[ [API set: ExcelApi 1.7](/javascript/office/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getRangeByIndexes(startRow, startColumn, rowCount, columnCount)
  fullName: excel.Excel.Worksheet.getRangeByIndexes
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getRangeByIndexes(startRow: number, startColumn: number, rowCount: number, columnCount: number): Excel.Range;'
    return:
      type:
      - excel.Excel.Range
      description: ''
    parameters:
    - id: startRow
      description: <span data-ttu-id="7693e-165">Начало строки (индексируются нулю).</span><span class="sxs-lookup"><span data-stu-id="7693e-165">Start row (zero-indexed).</span></span>
      type:
      - number
    - id: startColumn
      description: <span data-ttu-id="7693e-166">Запустите столбца (индексируются нулю).</span><span class="sxs-lookup"><span data-stu-id="7693e-166">Start column (zero-indexed).</span></span>
      type:
      - number
    - id: rowCount
      description: <span data-ttu-id="7693e-167">Количество строк, включаемых в диапазоне.</span><span class="sxs-lookup"><span data-stu-id="7693e-167">Number of rows to include in the range.</span></span>
      type:
      - number
    - id: columnCount
      description: <span data-ttu-id="7693e-168">Число столбцов для включения в диапазоне.</span><span class="sxs-lookup"><span data-stu-id="7693e-168">Number of columns to include in the range.</span></span>
      type:
      - number
- uid: excel.Excel.Worksheet.getUsedRange
  summary: >-
    <span data-ttu-id="7693e-169">Используемые значения — от наименьшего диапазона, который содержит все ячейки, которые имеют значение или форматирования назначенные им.</span><span class="sxs-lookup"><span data-stu-id="7693e-169">The used range is the smallest range that encompasses any cells that have a value or formatting assigned to them.</span></span> <span data-ttu-id="7693e-170">Если весь лист не задан, эта функция возвращает верхней левой ячейки (то есть он будет *не* порождает произошла ошибка).</span><span class="sxs-lookup"><span data-stu-id="7693e-170">If the entire worksheet is blank, this function will return the top left cell (i.e. it will *not* throw an error).</span></span>


    <span data-ttu-id="7693e-171">\[[Набор API-Интерфейсов: ExcelApi 1.1](/javascript/office/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="7693e-171">\[ [API set: ExcelApi 1.1](/javascript/office/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getUsedRange(valuesOnly)
  fullName: excel.Excel.Worksheet.getUsedRange
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getUsedRange(valuesOnly?: boolean): Excel.Range;'
    return:
      type:
      - excel.Excel.Range
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"7693e-172\">Примеры</span><span class=\"sxs-lookup\"><span data-stu-id=\"7693e-172\">Examples</span></span>\n\n```javascript\nExcel.run(function (ctx) { \n    var wSheetName = 'Sheet1';\n    var worksheet = ctx.workbook.worksheets.getItem(wSheetName);\n    var usedRange = worksheet.getUsedRange();\n    usedRange.load('address');\n    return ctx.sync().then(function() {\n            console.log(usedRange.address);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
    parameters:
    - id: valuesOnly
      description: '<span data-ttu-id="7693e-173">Необязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="7693e-173">Optional.</span></span> <span data-ttu-id="7693e-174">Если значение true, рассматривает только ячейки со значениями как используемые ячеек (без учета форматирования).</span><span class="sxs-lookup"><span data-stu-id="7693e-174">If true, considers only cells with values as used cells (ignoring formatting).</span></span> <span data-ttu-id="7693e-175">\[Набор API-интерфейсов: ExcelApi 1.2 (en)\]</span><span class="sxs-lookup"><span data-stu-id="7693e-175">\[Api set: ExcelApi 1.2\]</span></span>'
      type:
      - boolean
- uid: excel.Excel.Worksheet.getUsedRangeOrNullObject
  summary: >-
    <span data-ttu-id="7693e-p119">Используемый диапазон — это наименьший диапазон, включающий в себя все ячейки, которые содержат значение или форматирование. Если весь лист пустой, эта функция возвращает пустой объект.</span><span class="sxs-lookup"><span data-stu-id="7693e-p119">The used range is the smallest range that encompasses any cells that have a value or formatting assigned to them. If the entire worksheet is blank, this function will return a null object.</span></span>


    <span data-ttu-id="7693e-178">\[[Набор API-Интерфейсов: ExcelApi 1.4](/javascript/office/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="7693e-178">\[ [API set: ExcelApi 1.4](/javascript/office/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getUsedRangeOrNullObject(valuesOnly)
  fullName: excel.Excel.Worksheet.getUsedRangeOrNullObject
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getUsedRangeOrNullObject(valuesOnly?: boolean): Excel.Range;'
    return:
      type:
      - excel.Excel.Range
      description: ''
    parameters:
    - id: valuesOnly
      description: <span data-ttu-id="7693e-p120">Необязательный. Учитывает только ячейки со значениями.</span><span class="sxs-lookup"><span data-stu-id="7693e-p120">Optional. Considers only cells with values as used cells.</span></span>
      type:
      - boolean
- uid: excel.Excel.Worksheet.id
  summary: >-
    <span data-ttu-id="7693e-p121">Возвращает значение, однозначно идентифицирующее лист в данной книге. Значение идентификатора остается прежним, даже если переименовать или переместить лист. Только для чтения.</span><span class="sxs-lookup"><span data-stu-id="7693e-p121">Returns a value that uniquely identifies the worksheet in a given workbook. The value of the identifier remains the same even when the worksheet is renamed or moved. Read-only.</span></span>


    <span data-ttu-id="7693e-184">\[[Набор API-Интерфейсов: ExcelApi 1.1](/javascript/office/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="7693e-184">\[ [API set: ExcelApi 1.1](/javascript/office/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: id
  fullName: excel.Excel.Worksheet.id
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly id: string;'
    return:
      type:
      - string
- uid: excel.Excel.Worksheet.load
  summary: <span data-ttu-id="7693e-185">Очереди команды для загрузки указанного свойства объекта.</span><span class="sxs-lookup"><span data-stu-id="7693e-185">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="7693e-186">Перед чтением свойства необходимо вызвать «context.sync()».</span><span class="sxs-lookup"><span data-stu-id="7693e-186">You must call "context.sync()" before reading the properties.</span></span>
  remarks: "<span data-ttu-id=\"7693e-187\">В дополнение к подписи этот метод имеет следующие цифровые подписи.</span><span class=\"sxs-lookup\"><span data-stu-id=\"7693e-187\">In addition to this signature, this method has the following signatures:</span></span>\n\n<span data-ttu-id=\"7693e-188\">`load(option?: { select?: string; expand?: string; }): Excel.Worksheet`-Option.select — это разделенный запятыми строка, указывающая свойства для загрузки, куда options.expand — это разделенный запятыми строка, указывающая свойства навигации для загрузки.</span><span class=\"sxs-lookup\"><span data-stu-id=\"7693e-188\">`load(option?: { select?: string; expand?: string; }): Excel.Worksheet` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.</span></span>\n\n<span data-ttu-id=\"7693e-189\">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.Worksheet`-Доступно только на коллекцию типов.</span><span class=\"sxs-lookup\"><span data-stu-id=\"7693e-189\">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.Worksheet` - Only available on collection types.</span></span> <span data-ttu-id=\"7693e-190\">Это похоже на предыдущую.</span><span class=\"sxs-lookup\"><span data-stu-id=\"7693e-190\">It is similar to the preceding signature.</span></span> <span data-ttu-id=\"7693e-191\">Option.Top указывает максимальное число элементов коллекции, которые можно включить в результат.</span><span class=\"sxs-lookup\"><span data-stu-id=\"7693e-191\">Option.top specifies the maximum number of collection items that can be included in the result.</span></span> <span data-ttu-id=\"7693e-192\">Option.Skip указывает количество элементов, которые пропускаются и не включенный в результате.</span><span class=\"sxs-lookup\"><span data-stu-id=\"7693e-192\">Option.skip specifies the number of items that are to be skipped and not included in the result.</span></span> <span data-ttu-id=\"7693e-193\">Если option.top указан, результирующий набор будет запущен процесс после пропускает указанное число элементов.</span><span class=\"sxs-lookup\"><span data-stu-id=\"7693e-193\">If option.top is specified, the result set will start after skipping the specified number of items.</span></span>\n#### <a name=\"examples\"></a><span data-ttu-id=\"7693e-194\">Примеры</span><span class=\"sxs-lookup\"><span data-stu-id=\"7693e-194\">Examples</span></span>\n\n```javascript\n// Get worksheet properties based on sheet name.\nExcel.run(function (ctx) { \n    var wSheetName = 'Sheet1';\n    var worksheet = ctx.workbook.worksheets.getItem(wSheetName);\n    worksheet.load('position')\n    return ctx.sync().then(function() {\n            console.log(worksheet.position);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```\n```javascript\n// Set worksheet position. \nExcel.run(function (ctx) { \n    var wSheetName = 'Sheet1';\n    var worksheet = ctx.workbook.worksheets.getItem(wSheetName);\n    worksheet.position = 2;\n    return ctx.sync(); \n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
  name: load(option)
  fullName: excel.Excel.Worksheet.load
  langs:
  - typeScript
  type: method
  syntax:
    content: 'load(option?: string | string[]): Excel.Worksheet;'
    return:
      type:
      - excel.Excel.Worksheet
      description: ''
    parameters:
    - id: option
      description: <span data-ttu-id="7693e-195">Строка, разделенных запятыми или массив строк, задающих свойства для загрузки.</span><span class="sxs-lookup"><span data-stu-id="7693e-195">A comma-delimited string or an array of strings that specify the properties to load.</span></span>
      type:
      - string | string[]
- uid: excel.Excel.Worksheet.name
  summary: >-
    <span data-ttu-id="7693e-196">Отображаемое имя листа.</span><span class="sxs-lookup"><span data-stu-id="7693e-196">The display name of the worksheet.</span></span>


    <span data-ttu-id="7693e-197">\[[Набор API-Интерфейсов: ExcelApi 1.1](/javascript/office/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="7693e-197">\[ [API set: ExcelApi 1.1](/javascript/office/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: name
  fullName: excel.Excel.Worksheet.name
  langs:
  - typeScript
  type: property
  syntax:
    content: 'name: string;'
    return:
      type:
      - string
- uid: excel.Excel.Worksheet.names
  summary: >-
    <span data-ttu-id="7693e-p124">Коллекция имен, относящих к текущему листу. Только для чтения.</span><span class="sxs-lookup"><span data-stu-id="7693e-p124">Collection of names scoped to the current worksheet. Read-only.</span></span>


    <span data-ttu-id="7693e-200">\[[Набор API-Интерфейсов: ExcelApi 1.4](/javascript/office/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="7693e-200">\[ [API set: ExcelApi 1.4](/javascript/office/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: names
  fullName: excel.Excel.Worksheet.names
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly names: Excel.NamedItemCollection;'
    return:
      type:
      - excel.Excel.NamedItemCollection
- uid: excel.Excel.Worksheet.onActivated
  summary: >-
    <span data-ttu-id="7693e-201">Происходит при активации рабочего листа.</span><span class="sxs-lookup"><span data-stu-id="7693e-201">Occurs when the worksheet is activated.</span></span>


    <span data-ttu-id="7693e-202">\[[Набор API-Интерфейсов: ExcelApi 1.7](/javascript/office/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="7693e-202">\[ [API set: ExcelApi 1.7](/javascript/office/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: onActivated
  fullName: excel.Excel.Worksheet.onActivated
  langs:
  - typeScript
  type: event
  syntax:
    content: 'readonly onActivated: OfficeExtension.EventHandlers<Excel.WorksheetActivatedEventArgs>;'
    return:
      type:
      - OfficeExtension.EventHandlers<Excel.WorksheetActivatedEventArgs>
- uid: excel.Excel.Worksheet.onCalculated
  summary: >-
    <span data-ttu-id="7693e-203">Происходит, когда рассчитывается рабочего листа.</span><span class="sxs-lookup"><span data-stu-id="7693e-203">Occurs when the worksheet is calculated.</span></span>


    <span data-ttu-id="7693e-204">\[[Набор API-Интерфейсов: ExcelApi 1,8](/javascript/office/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="7693e-204">\[ [API set: ExcelApi 1.8](/javascript/office/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: onCalculated
  fullName: excel.Excel.Worksheet.onCalculated
  langs:
  - typeScript
  type: event
  syntax:
    content: 'readonly onCalculated: OfficeExtension.EventHandlers<Excel.WorksheetCalculatedEventArgs>;'
    return:
      type:
      - OfficeExtension.EventHandlers<Excel.WorksheetCalculatedEventArgs>
- uid: excel.Excel.Worksheet.onChanged
  summary: >-
    <span data-ttu-id="7693e-205">Происходит при изменении данных на конкретный лист.</span><span class="sxs-lookup"><span data-stu-id="7693e-205">Occurs when data changed on a specific worksheet.</span></span>


    <span data-ttu-id="7693e-206">\[[Набор API-Интерфейсов: ExcelApi 1.7](/javascript/office/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="7693e-206">\[ [API set: ExcelApi 1.7](/javascript/office/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: onChanged
  fullName: excel.Excel.Worksheet.onChanged
  langs:
  - typeScript
  type: event
  syntax:
    content: 'readonly onChanged: OfficeExtension.EventHandlers<Excel.WorksheetChangedEventArgs>;'
    return:
      type:
      - OfficeExtension.EventHandlers<Excel.WorksheetChangedEventArgs>
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"7693e-207\">Примеры</span><span class=\"sxs-lookup\"><span data-stu-id=\"7693e-207\">Examples</span></span>\n\n```typescript\nawait Excel.run(async (context) => {\n    let sheet = context.workbook.worksheets.getItem(\"Sample\");\n    sheet.onChanged.add(onChange);\n\n    await context.sync();\n\n    OfficeHelpers.UI.notify(\"A handler has been registered for the onChanged event.\");\n});\n```"
- uid: excel.Excel.Worksheet.onDeactivated
  summary: >-
    <span data-ttu-id="7693e-208">Происходит при отключении рабочего листа.</span><span class="sxs-lookup"><span data-stu-id="7693e-208">Occurs when the worksheet is deactivated.</span></span>


    <span data-ttu-id="7693e-209">\[[Набор API-Интерфейсов: ExcelApi 1.7](/javascript/office/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="7693e-209">\[ [API set: ExcelApi 1.7](/javascript/office/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: onDeactivated
  fullName: excel.Excel.Worksheet.onDeactivated
  langs:
  - typeScript
  type: event
  syntax:
    content: 'readonly onDeactivated: OfficeExtension.EventHandlers<Excel.WorksheetDeactivatedEventArgs>;'
    return:
      type:
      - OfficeExtension.EventHandlers<Excel.WorksheetDeactivatedEventArgs>
- uid: excel.Excel.Worksheet.onSelectionChanged
  summary: >-
    <span data-ttu-id="7693e-210">Возникает при изменении выбора на конкретный лист.</span><span class="sxs-lookup"><span data-stu-id="7693e-210">Occurs when the selection changes on a specific worksheet.</span></span>


    <span data-ttu-id="7693e-211">\[[Набор API-Интерфейсов: ExcelApi 1.7](/javascript/office/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="7693e-211">\[ [API set: ExcelApi 1.7](/javascript/office/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: onSelectionChanged
  fullName: excel.Excel.Worksheet.onSelectionChanged
  langs:
  - typeScript
  type: event
  syntax:
    content: 'readonly onSelectionChanged: OfficeExtension.EventHandlers<Excel.WorksheetSelectionChangedEventArgs>;'
    return:
      type:
      - OfficeExtension.EventHandlers<Excel.WorksheetSelectionChangedEventArgs>
- uid: excel.Excel.Worksheet.pivotTables
  summary: >-
    <span data-ttu-id="7693e-p125">Коллекция сводных таблиц на листе. Только для чтения.</span><span class="sxs-lookup"><span data-stu-id="7693e-p125">Collection of PivotTables that are part of the worksheet. Read-only.</span></span>


    <span data-ttu-id="7693e-214">\[[Набор API-Интерфейсов: ExcelApi 1.3](/javascript/office/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="7693e-214">\[ [API set: ExcelApi 1.3](/javascript/office/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: pivotTables
  fullName: excel.Excel.Worksheet.pivotTables
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly pivotTables: Excel.PivotTableCollection;'
    return:
      type:
      - excel.Excel.PivotTableCollection
- uid: excel.Excel.Worksheet.position
  summary: >-
    <span data-ttu-id="7693e-215">Положение листа (начиная с нуля) в книге.</span><span class="sxs-lookup"><span data-stu-id="7693e-215">The zero-based position of the worksheet within the workbook.</span></span>


    <span data-ttu-id="7693e-216">\[[Набор API-Интерфейсов: ExcelApi 1.1](/javascript/office/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="7693e-216">\[ [API set: ExcelApi 1.1](/javascript/office/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: position
  fullName: excel.Excel.Worksheet.position
  langs:
  - typeScript
  type: property
  syntax:
    content: 'position: number;'
    return:
      type:
      - number
- uid: excel.Excel.Worksheet.protection
  summary: >-
    <span data-ttu-id="7693e-p126">Возвращает объект защиты листа. Только для чтения.</span><span class="sxs-lookup"><span data-stu-id="7693e-p126">Returns sheet protection object for a worksheet. Read-only.</span></span>


    <span data-ttu-id="7693e-219">\[[Набор API-Интерфейсов: ExcelApi 1.2](/javascript/office/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="7693e-219">\[ [API set: ExcelApi 1.2](/javascript/office/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: protection
  fullName: excel.Excel.Worksheet.protection
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly protection: Excel.WorksheetProtection;'
    return:
      type:
      - excel.Excel.WorksheetProtection
- uid: excel.Excel.Worksheet.showGridlines
  summary: >-
    <span data-ttu-id="7693e-220">Получает или задает флаг линии сетки рабочего листа.</span><span class="sxs-lookup"><span data-stu-id="7693e-220">Gets or sets the worksheet's gridlines flag.</span></span> <span data-ttu-id="7693e-221">Этот флаг определяет, будет ли линии сетки являются видимыми для пользователя.</span><span class="sxs-lookup"><span data-stu-id="7693e-221">This flag determines whether gridlines are visible to the user.</span></span>


    <span data-ttu-id="7693e-222">\[[Набор API-Интерфейсов: ExcelApi 1,8](/javascript/office/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="7693e-222">\[ [API set: ExcelApi 1.8](/javascript/office/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: showGridlines
  fullName: excel.Excel.Worksheet.showGridlines
  langs:
  - typeScript
  type: property
  syntax:
    content: 'showGridlines: boolean;'
    return:
      type:
      - boolean
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"7693e-223\">Примеры</span><span class=\"sxs-lookup\"><span data-stu-id=\"7693e-223\">Examples</span></span>\n\n```typescript\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getActiveWorksheet();\n    sheet.showGridlines = true;\n\n    await context.sync();\n});\n```"
- uid: excel.Excel.Worksheet.showHeadings
  summary: >-
    <span data-ttu-id="7693e-224">Получает или задает заголовки флаг рабочего листа.</span><span class="sxs-lookup"><span data-stu-id="7693e-224">Gets or sets the worksheet's headings flag.</span></span> <span data-ttu-id="7693e-225">Этот флаг определяет, будет ли заголовки являются видимыми для пользователя.</span><span class="sxs-lookup"><span data-stu-id="7693e-225">This flag determines whether headings are visible to the user.</span></span>


    <span data-ttu-id="7693e-226">\[[Набор API-Интерфейсов: ExcelApi 1,8](/javascript/office/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="7693e-226">\[ [API set: ExcelApi 1.8](/javascript/office/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: showHeadings
  fullName: excel.Excel.Worksheet.showHeadings
  langs:
  - typeScript
  type: property
  syntax:
    content: 'showHeadings: boolean;'
    return:
      type:
      - boolean
- uid: excel.Excel.Worksheet.standardHeight
  summary: >-
    <span data-ttu-id="7693e-227">Возвращает высоту по умолчанию все строки в рабочем листе в пунктах.</span><span class="sxs-lookup"><span data-stu-id="7693e-227">Returns the standard (default) height of all the rows in the worksheet, in points.</span></span> <span data-ttu-id="7693e-228">Только для чтения.</span><span class="sxs-lookup"><span data-stu-id="7693e-228">Read-only.</span></span>


    <span data-ttu-id="7693e-229">\[[Набор API-Интерфейсов: ExcelApi 1.7](/javascript/office/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="7693e-229">\[ [API set: ExcelApi 1.7](/javascript/office/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: standardHeight
  fullName: excel.Excel.Worksheet.standardHeight
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly standardHeight: number;'
    return:
      type:
      - number
- uid: excel.Excel.Worksheet.standardWidth
  summary: >-
    <span data-ttu-id="7693e-230">Возвращает или задает ширину standard (по умолчанию) всех столбцов на листе.</span><span class="sxs-lookup"><span data-stu-id="7693e-230">Returns or sets the standard (default) width of all the columns in the worksheet.</span></span> <span data-ttu-id="7693e-231">Единицы ширины столбца равна ширине одного знака в обычный стиль.</span><span class="sxs-lookup"><span data-stu-id="7693e-231">One unit of column width is equal to the width of one character in the Normal style.</span></span> <span data-ttu-id="7693e-232">Для пропорциональных шрифтов используется ширина символа 0 (ноль).</span><span class="sxs-lookup"><span data-stu-id="7693e-232">For proportional fonts, the width of the character 0 (zero) is used.</span></span>


    <span data-ttu-id="7693e-233">\[[Набор API-Интерфейсов: ExcelApi 1.7](/javascript/office/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="7693e-233">\[ [API set: ExcelApi 1.7](/javascript/office/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: standardWidth
  fullName: excel.Excel.Worksheet.standardWidth
  langs:
  - typeScript
  type: property
  syntax:
    content: 'standardWidth: number;'
    return:
      type:
      - number
- uid: excel.Excel.Worksheet.tabColor
  summary: >-
    <span data-ttu-id="7693e-234">Получает или задает цвет ярлычка листа.</span><span class="sxs-lookup"><span data-stu-id="7693e-234">Gets or sets the worksheet tab color.</span></span> <span data-ttu-id="7693e-235">При получении Цвет ярлычка, если лист невидимой, будет иметь значение null.</span><span class="sxs-lookup"><span data-stu-id="7693e-235">When retrieving the tab color, if the worksheet is invisible, the value will be null.</span></span> <span data-ttu-id="7693e-236">Если лист будет отображаться, но Цвет ярлычка задано значение auto, будут возвращены пустую строку.</span><span class="sxs-lookup"><span data-stu-id="7693e-236">If the worksheet is visible but the tab color is set to auto, an empty string will be returned.</span></span> <span data-ttu-id="7693e-237">В противном случае свойство будет иметь значение цвета, в виде "\#123456" при задании цвет, используйте пустой строки для задания «Автоматическая» цветовая или реальных цвета в противном случае.</span><span class="sxs-lookup"><span data-stu-id="7693e-237">Otherwise, the property will be set to a color, in the form "\#123456" When setting the color, use an empty-string to set an "auto" color, or a real color otherwise.</span></span>


    <span data-ttu-id="7693e-238">\[[Набор API-Интерфейсов: ExcelApi 1.7](/javascript/office/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="7693e-238">\[ [API set: ExcelApi 1.7](/javascript/office/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: tabColor
  fullName: excel.Excel.Worksheet.tabColor
  langs:
  - typeScript
  type: property
  syntax:
    content: 'tabColor: string;'
    return:
      type:
      - string
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"7693e-239\">Примеры</span><span class=\"sxs-lookup\"><span data-stu-id=\"7693e-239\">Examples</span></span>\n\n```typescript\nawait Excel.run(async (context) => {\n    const activeSheet = context.workbook.worksheets.getActiveWorksheet();\n    activeSheet.tabColor = \"#FF0000\";\n\n    await context.sync();\n});\n```"
- uid: excel.Excel.Worksheet.tables
  summary: >-
    <span data-ttu-id="7693e-p132">Коллекция таблиц, имеющихся на листе. Только для чтения.</span><span class="sxs-lookup"><span data-stu-id="7693e-p132">Collection of tables that are part of the worksheet. Read-only.</span></span>


    <span data-ttu-id="7693e-242">\[[Набор API-Интерфейсов: ExcelApi 1.1](/javascript/office/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="7693e-242">\[ [API set: ExcelApi 1.1](/javascript/office/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: tables
  fullName: excel.Excel.Worksheet.tables
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly tables: Excel.TableCollection;'
    return:
      type:
      - excel.Excel.TableCollection
- uid: excel.Excel.Worksheet.toJSON
  name: toJSON()
  fullName: excel.Excel.Worksheet.toJSON
  langs:
  - typeScript
  type: method
  syntax:
    content: 'toJSON(): Excel.Interfaces.WorksheetData;'
    return:
      type:
      - excel.Excel.Interfaces.WorksheetData
      description: ''
- uid: excel.Excel.Worksheet.visibility
  summary: >-
    <span data-ttu-id="7693e-243">Видимость рабочего листа.</span><span class="sxs-lookup"><span data-stu-id="7693e-243">The Visibility of the worksheet.</span></span>


    <span data-ttu-id="7693e-244">\[[Набор API-Интерфейсов: ExcelApi 1.1 для чтения видимости; 1.2 для задания его](/javascript/office/requirement-sets/excel-api-requirement-sets)</span><span class="sxs-lookup"><span data-stu-id="7693e-244">\[ [API set: ExcelApi 1.1 for reading visibility; 1.2 for setting it.](/javascript/office/requirement-sets/excel-api-requirement-sets)</span></span> <span data-ttu-id="7693e-245">\]</span><span class="sxs-lookup"><span data-stu-id="7693e-245"></span></span>
  name: visibility
  fullName: excel.Excel.Worksheet.visibility
  langs:
  - typeScript
  type: property
  syntax:
    content: 'visibility: Excel.SheetVisibility | "Visible" | "Hidden" | "VeryHidden";'
    return:
      type:
      - Excel.SheetVisibility | "Visible" | "Hidden" | "VeryHidden"
