### YamlMime:UniversalReference
items:
  - uid: 'excel!Excel.Worksheet:class'
    summary: |-
      <span data-ttu-id="d191b-101">Лист Excel представляет собой сетку ячеек.</span><span class="sxs-lookup"><span data-stu-id="d191b-101">An Excel worksheet is a grid of cells.</span></span> <span data-ttu-id="d191b-102">Она может содержать данные, таблицы, диаграммы и т. д. Чтобы узнать больше об объектной модели листа, прочтите [Работа с листами с помощью API JavaScript для Excel](https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-worksheets)</span><span class="sxs-lookup"><span data-stu-id="d191b-102">It can contain data, tables, charts, etc. To learn more about the worksheet object model, read [Work with worksheets using the Excel JavaScript API](https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-worksheets)</span></span><!-- --><span data-ttu-id="d191b-103">.</span><span class="sxs-lookup"><span data-stu-id="d191b-103"></span></span>

      <span data-ttu-id="d191b-104">\[[Набор API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d191b-104">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: Excel.Worksheet
    fullName: Excel.Worksheet
    langs:
      - typeScript
    type: class
    extends:
      - 'excel!OfficeExtension.ClientObject:class'
    package: excel!
    children:
      - 'excel!Excel.Worksheet#activate:member(1)'
      - 'excel!Excel.Worksheet#autoFilter:member'
      - 'excel!Excel.Worksheet#calculate:member(1)'
      - 'excel!Excel.Worksheet#charts:member'
      - 'excel!Excel.Worksheet#comments:member'
      - 'excel!Excel.Worksheet#context:member'
      - 'excel!Excel.Worksheet#copy:member(1)'
      - 'excel!Excel.Worksheet#copy:member(2)'
      - 'excel!Excel.Worksheet#delete:member(1)'
      - 'excel!Excel.Worksheet#enableCalculation:member'
      - 'excel!Excel.Worksheet#findAll:member(1)'
      - 'excel!Excel.Worksheet#findAllOrNullObject:member(1)'
      - 'excel!Excel.Worksheet#freezePanes:member'
      - 'excel!Excel.Worksheet#getCell:member(1)'
      - 'excel!Excel.Worksheet#getNext:member(1)'
      - 'excel!Excel.Worksheet#getNextOrNullObject:member(1)'
      - 'excel!Excel.Worksheet#getPrevious:member(1)'
      - 'excel!Excel.Worksheet#getPreviousOrNullObject:member(1)'
      - 'excel!Excel.Worksheet#getRange:member(1)'
      - 'excel!Excel.Worksheet#getRangeByIndexes:member(1)'
      - 'excel!Excel.Worksheet#getRanges:member(1)'
      - 'excel!Excel.Worksheet#getUsedRange:member(1)'
      - 'excel!Excel.Worksheet#getUsedRangeOrNullObject:member(1)'
      - 'excel!Excel.Worksheet#horizontalPageBreaks:member'
      - 'excel!Excel.Worksheet#id:member'
      - 'excel!Excel.Worksheet#load:member(1)'
      - 'excel!Excel.Worksheet#load:member(2)'
      - 'excel!Excel.Worksheet#load:member(3)'
      - 'excel!Excel.Worksheet#name:member'
      - 'excel!Excel.Worksheet#names:member'
      - 'excel!Excel.Worksheet#onActivated:member'
      - 'excel!Excel.Worksheet#onCalculated:member'
      - 'excel!Excel.Worksheet#onChanged:member'
      - 'excel!Excel.Worksheet#onColumnSorted:member'
      - 'excel!Excel.Worksheet#onDeactivated:member'
      - 'excel!Excel.Worksheet#onFiltered:member'
      - 'excel!Excel.Worksheet#onFormatChanged:member'
      - 'excel!Excel.Worksheet#onRowHiddenChanged:member'
      - 'excel!Excel.Worksheet#onRowSorted:member'
      - 'excel!Excel.Worksheet#onSelectionChanged:member'
      - 'excel!Excel.Worksheet#onSingleClicked:member'
      - 'excel!Excel.Worksheet#pageLayout:member'
      - 'excel!Excel.Worksheet#pivotTables:member'
      - 'excel!Excel.Worksheet#position:member'
      - 'excel!Excel.Worksheet#protection:member'
      - 'excel!Excel.Worksheet#replaceAll:member(1)'
      - 'excel!Excel.Worksheet#set:member(1)'
      - 'excel!Excel.Worksheet#set:member(2)'
      - 'excel!Excel.Worksheet#shapes:member'
      - 'excel!Excel.Worksheet#showGridlines:member'
      - 'excel!Excel.Worksheet#showHeadings:member'
      - 'excel!Excel.Worksheet#showOutlineLevels:member(1)'
      - 'excel!Excel.Worksheet#slicers:member'
      - 'excel!Excel.Worksheet#standardHeight:member'
      - 'excel!Excel.Worksheet#standardWidth:member'
      - 'excel!Excel.Worksheet#tabColor:member'
      - 'excel!Excel.Worksheet#tables:member'
      - 'excel!Excel.Worksheet#toJSON:member(1)'
      - 'excel!Excel.Worksheet#verticalPageBreaks:member'
      - 'excel!Excel.Worksheet#visibility:member'
  - uid: 'excel!Excel.Worksheet#activate:member(1)'
    summary: |-
      <span data-ttu-id="d191b-105">Активация листа в пользовательском интерфейсе Excel.</span><span class="sxs-lookup"><span data-stu-id="d191b-105">Activate the worksheet in the Excel UI.</span></span>

      <span data-ttu-id="d191b-106">\[[Набор API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d191b-106">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: activate()
    fullName: activate()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'activate(): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a><span data-ttu-id="d191b-107">Примеры</span><span class="sxs-lookup"><span data-stu-id="d191b-107">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var wSheetName = 'Sheet1';
              var worksheet = ctx.workbook.worksheets.getItem(wSheetName);
              worksheet.activate();
              return ctx.sync(); 
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: 'excel!Excel.Worksheet#autoFilter:member'
    summary: |-
      <span data-ttu-id="d191b-108">Представляет объект AutoFilter листа.</span><span class="sxs-lookup"><span data-stu-id="d191b-108">Represents the AutoFilter object of the worksheet.</span></span> <span data-ttu-id="d191b-109">Только для чтения.</span><span class="sxs-lookup"><span data-stu-id="d191b-109">Read-Only.</span></span>

      <span data-ttu-id="d191b-110">\[[Набор API: ExcelApi 1,9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d191b-110">\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: autoFilter
    fullName: autoFilter
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly autoFilter: Excel.AutoFilter;'
      return:
        type:
          - 'excel!Excel.AutoFilter:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="d191b-111">Примеры</span><span class="sxs-lookup"><span data-stu-id="d191b-111">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getActiveWorksheet();
              const farmData = sheet.getUsedRange();

              // This filter will only show the rows with the top 25% of values in column 3.
              sheet.autoFilter.apply(farmData, 3, { criterion1: "25", filterOn: Excel.FilterOn.topPercent });
              await context.sync();
          });
          ```
  - uid: 'excel!Excel.Worksheet#calculate:member(1)'
    summary: |-
      <span data-ttu-id="d191b-112">Вычисляет все ячейки на листе.</span><span class="sxs-lookup"><span data-stu-id="d191b-112">Calculates all cells on a worksheet.</span></span>

      <span data-ttu-id="d191b-113">\[[Набор API: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d191b-113">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: calculate(markAllDirty)
    fullName: calculate(markAllDirty)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'calculate(markAllDirty: boolean): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: markAllDirty
          description: '<span data-ttu-id="d191b-114">Значение true, чтобы пометить все как "грязный".</span><span class="sxs-lookup"><span data-stu-id="d191b-114">True, to mark all as dirty.</span></span>'
          type:
            - boolean
  - uid: 'excel!Excel.Worksheet#charts:member'
    summary: |-
      <span data-ttu-id="d191b-115">Возвращает коллекцию диаграмм, имеющихся на листе.</span><span class="sxs-lookup"><span data-stu-id="d191b-115">Returns collection of charts that are part of the worksheet.</span></span> <span data-ttu-id="d191b-116">Только для чтения.</span><span class="sxs-lookup"><span data-stu-id="d191b-116">Read-only.</span></span>

      <span data-ttu-id="d191b-117">\[[Набор API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d191b-117">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: charts
    fullName: charts
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly charts: Excel.ChartCollection;'
      return:
        type:
          - 'excel!Excel.ChartCollection:class'
  - uid: 'excel!Excel.Worksheet#comments:member'
    summary: |-
      <span data-ttu-id="d191b-118">Возвращает коллекцию всех объектов Comments на листе.</span><span class="sxs-lookup"><span data-stu-id="d191b-118">Returns a collection of all the Comments objects on the worksheet.</span></span> <span data-ttu-id="d191b-119">Только для чтения.</span><span class="sxs-lookup"><span data-stu-id="d191b-119">Read-only.</span></span>

      <span data-ttu-id="d191b-120">\[[Набор API: EXCELAPI Beta (только ознакомительная версия)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d191b-120">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    isPreview: true
    name: comments
    fullName: comments
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly comments: Excel.CommentCollection;'
      return:
        type:
          - 'excel!Excel.CommentCollection:class'
  - uid: 'excel!Excel.Worksheet#context:member'
    summary: '<span data-ttu-id="d191b-121">Контекст запроса, связанный с объектом.</span><span class="sxs-lookup"><span data-stu-id="d191b-121">The request context associated with the object.</span></span> <span data-ttu-id="d191b-122">Это подсоединяет процесс надстройки к процессу ведущего приложения Office.</span><span class="sxs-lookup"><span data-stu-id="d191b-122">This connects the add-in''s process to the Office host application''s process.</span></span>'
    name: context
    fullName: context
    langs:
      - typeScript
    type: property
    syntax:
      content: 'context: RequestContext;'
      return:
        type:
          - 'excel!Excel.RequestContext:class'
  - uid: 'excel!Excel.Worksheet#copy:member(1)'
    summary: |-
      <span data-ttu-id="d191b-123">Копирует лист и размещает его в указанном положении.</span><span class="sxs-lookup"><span data-stu-id="d191b-123">Copy a worksheet and place it at the specified position.</span></span> <span data-ttu-id="d191b-124">Возвращает скопированный лист.</span><span class="sxs-lookup"><span data-stu-id="d191b-124">Return the copied worksheet.</span></span>

      <span data-ttu-id="d191b-125">\[[Набор API: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d191b-125">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: 'copy(positionType, relativeTo)'
    fullName: 'copy(positionType, relativeTo)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'copy(positionType?: Excel.WorksheetPositionType, relativeTo?: Excel.Worksheet): Excel.Worksheet;'
      return:
        type:
          - 'excel!Excel.Worksheet:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="d191b-126">Примеры</span><span class="sxs-lookup"><span data-stu-id="d191b-126">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {

              let myWorkbook = context.workbook;
              let sampleSheet = myWorkbook.worksheets.getActiveWorksheet();
              let copiedSheet = sampleSheet.copy("End")

              sampleSheet.load("name");
              copiedSheet.load("name");

              await context.sync();

              console.log("'" + sampleSheet.name + "' was copied to '" + copiedSheet.name + "'")
          });
          ```
      parameters:
        - id: positionType
          description: <span data-ttu-id="d191b-127">Необязательный.</span><span class="sxs-lookup"><span data-stu-id="d191b-127">Optional.</span></span>
          type:
            - 'excel!Excel.WorksheetPositionType:enum'
        - id: relativeTo
          description: <span data-ttu-id="d191b-128">Необязательный.</span><span class="sxs-lookup"><span data-stu-id="d191b-128">Optional.</span></span>
          type:
            - 'excel!Excel.Worksheet:class'
  - uid: 'excel!Excel.Worksheet#copy:member(2)'
    summary: |-
      <span data-ttu-id="d191b-129">Копирует лист и размещает его в указанном положении.</span><span class="sxs-lookup"><span data-stu-id="d191b-129">Copy a worksheet and place it at the specified position.</span></span> <span data-ttu-id="d191b-130">Возвращает скопированный лист.</span><span class="sxs-lookup"><span data-stu-id="d191b-130">Return the copied worksheet.</span></span>

      <span data-ttu-id="d191b-131">\[[Набор API: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d191b-131">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: 'copy(positionTypeString, relativeTo)'
    fullName: 'copy(positionTypeString, relativeTo)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'copy(positionTypeString?: "None" | "Before" | "After" | "Beginning" | "End", relativeTo?: Excel.Worksheet): Excel.Worksheet;'
      return:
        type:
          - 'excel!Excel.Worksheet:class'
        description: ''
      parameters:
        - id: positionTypeString
          description: <span data-ttu-id="d191b-132">Необязательный.</span><span class="sxs-lookup"><span data-stu-id="d191b-132">Optional.</span></span>
          type:
            - '"None" | "Before" | "After" | "Beginning" | "End"'
        - id: relativeTo
          description: <span data-ttu-id="d191b-133">Необязательный.</span><span class="sxs-lookup"><span data-stu-id="d191b-133">Optional.</span></span>
          type:
            - 'excel!Excel.Worksheet:class'
  - uid: 'excel!Excel.Worksheet#delete:member(1)'
    summary: |-
      <span data-ttu-id="d191b-134">Удаляет лист из книги.</span><span class="sxs-lookup"><span data-stu-id="d191b-134">Deletes the worksheet from the workbook.</span></span> <span data-ttu-id="d191b-135">Обратите внимание, что если для отображения листа задано значение "Верихидден", операция удаления завершится с `InvalidOperation` исключением.</span><span class="sxs-lookup"><span data-stu-id="d191b-135">Note that if the worksheet's visibility is set to "VeryHidden", the delete operation will fail with an `InvalidOperation` exception.</span></span> <span data-ttu-id="d191b-136">Прежде чем удалять его, необходимо сначала изменить его видимость на скрытую или видимую.</span><span class="sxs-lookup"><span data-stu-id="d191b-136">You should first change its visibility to hidden or visible before deleting it.</span></span>

      <span data-ttu-id="d191b-137">\[[Набор API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d191b-137">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: delete()
    fullName: delete()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'delete(): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a><span data-ttu-id="d191b-138">Примеры</span><span class="sxs-lookup"><span data-stu-id="d191b-138">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var wSheetName = 'Sheet1';
              var worksheet = ctx.workbook.worksheets.getItem(wSheetName);
              worksheet.delete();
              return ctx.sync(); 
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: 'excel!Excel.Worksheet#enableCalculation:member'
    summary: |-
      <span data-ttu-id="d191b-139">Получает или задает свойство enableCalculation для листа.</span><span class="sxs-lookup"><span data-stu-id="d191b-139">Gets or sets the enableCalculation property of the worksheet.</span></span> <span data-ttu-id="d191b-140">Имеет значение true, если Excel пересчитывает лист при необходимости.</span><span class="sxs-lookup"><span data-stu-id="d191b-140">True if Excel recalculates the worksheet when necessary.</span></span> <span data-ttu-id="d191b-141">False, если Excel не пересчитывает лист.</span><span class="sxs-lookup"><span data-stu-id="d191b-141">False if Excel doesn't recalculate the sheet.</span></span>

      <span data-ttu-id="d191b-142">\[[Набор API: ExcelApi 1,9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d191b-142">\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: enableCalculation
    fullName: enableCalculation
    langs:
      - typeScript
    type: property
    syntax:
      content: 'enableCalculation: boolean;'
      return:
        type:
          - boolean
  - uid: 'excel!Excel.Worksheet#findAll:member(1)'
    summary: |-
      <span data-ttu-id="d191b-143">Находит все вхождения определенной строки на основе указанных условий и возвращает их в виде объекта RangeAreas, состоящего из одного или нескольких прямоугольных диапазонов.</span><span class="sxs-lookup"><span data-stu-id="d191b-143">Finds all occurrences of the given string based on the criteria specified and returns them as a RangeAreas object, comprising one or more rectangular ranges.</span></span>

      <span data-ttu-id="d191b-144">\[[Набор API: ExcelApi 1,9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d191b-144">\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: 'findAll(text, criteria)'
    fullName: 'findAll(text, criteria)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'findAll(text: string, criteria: Excel.WorksheetSearchCriteria): Excel.RangeAreas;'
      return:
        type:
          - 'excel!Excel.RangeAreas:class'
        description: '<span data-ttu-id="d191b-145">Объект Ранжеареа, состоящий из одного или нескольких прямоугольных диапазонов, которые соответствуют условиям поиска.</span><span class="sxs-lookup"><span data-stu-id="d191b-145">A RangeArea object, comprising one or more rectangular ranges, that matches the search criteria.</span></span> <span data-ttu-id="d191b-146">Если ни одна ячейка не соответствует этим условиям, будет выдано сообщение об ошибке ItemNotFound.</span><span class="sxs-lookup"><span data-stu-id="d191b-146">If no cells meet this criteria, an ItemNotFound error will be thrown.</span></span>'
      parameters:
        - id: text
          description: <span data-ttu-id="d191b-147">Строка для поиска.</span><span class="sxs-lookup"><span data-stu-id="d191b-147">The string to find.</span></span>
          type:
            - string
        - id: criteria
          description: '<span data-ttu-id="d191b-148">Дополнительные условия поиска, в том числе поиск соответствия требованиям к ячейкам целиком или с учетом регистра.</span><span class="sxs-lookup"><span data-stu-id="d191b-148">Additional search criteria, including whether the search needs to match the entire cell or be case sensitive.</span></span>'
          type:
            - 'excel!Excel.WorksheetSearchCriteria:interface'
  - uid: 'excel!Excel.Worksheet#findAllOrNullObject:member(1)'
    summary: |-
      <span data-ttu-id="d191b-149">Находит все вхождения определенной строки на основе указанных условий и возвращает их в виде объекта RangeAreas, состоящего из одного или нескольких прямоугольных диапазонов.</span><span class="sxs-lookup"><span data-stu-id="d191b-149">Finds all occurrences of the given string based on the criteria specified and returns them as a RangeAreas object, comprising one or more rectangular ranges.</span></span>

      <span data-ttu-id="d191b-150">\[[Набор API: ExcelApi 1,9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d191b-150">\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: 'findAllOrNullObject(text, criteria)'
    fullName: 'findAllOrNullObject(text, criteria)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'findAllOrNullObject(text: string, criteria: Excel.WorksheetSearchCriteria): Excel.RangeAreas;'
      return:
        type:
          - 'excel!Excel.RangeAreas:class'
        description: |-
          <span data-ttu-id="d191b-151">Объект Ранжеареа, состоящий из одного или нескольких прямоугольных диапазонов, которые соответствуют условиям поиска.</span><span class="sxs-lookup"><span data-stu-id="d191b-151">A RangeArea object, comprising one or more rectangular ranges, that matches the search criteria.</span></span> <span data-ttu-id="d191b-152">Если совпадений нет, эта функция возвращает пустой объект.</span><span class="sxs-lookup"><span data-stu-id="d191b-152">If there are no matches, this function will return a null object.</span></span>

          #### <a name="examples"></a><span data-ttu-id="d191b-153">Примеры</span><span class="sxs-lookup"><span data-stu-id="d191b-153">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Sample");
              const foundRanges = sheet.findAllOrNullObject("Complete", {
                  completeMatch: true,
                  matchCase: false
              });

              await context.sync();

              if (foundRanges.isNullObject) {
                  console.log("No complete projects");
              } else {
                  foundRanges.format.fill.color = "green"
              }
          });
          ```
      parameters:
        - id: text
          description: <span data-ttu-id="d191b-154">Строка для поиска.</span><span class="sxs-lookup"><span data-stu-id="d191b-154">The string to find.</span></span>
          type:
            - string
        - id: criteria
          description: '<span data-ttu-id="d191b-155">Дополнительные условия поиска, в том числе поиск соответствия требованиям к ячейкам целиком или с учетом регистра.</span><span class="sxs-lookup"><span data-stu-id="d191b-155">Additional search criteria, including whether the search needs to match the entire cell or be case sensitive.</span></span>'
          type:
            - 'excel!Excel.WorksheetSearchCriteria:interface'
  - uid: 'excel!Excel.Worksheet#freezePanes:member'
    summary: |-
      <span data-ttu-id="d191b-156">Получает объект, который можно использовать для работы с замороженными областями на листе.</span><span class="sxs-lookup"><span data-stu-id="d191b-156">Gets an object that can be used to manipulate frozen panes on the worksheet.</span></span> <span data-ttu-id="d191b-157">Только для чтения.</span><span class="sxs-lookup"><span data-stu-id="d191b-157">Read-only.</span></span>

      <span data-ttu-id="d191b-158">\[[Набор API: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d191b-158">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: freezePanes
    fullName: freezePanes
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly freezePanes: Excel.WorksheetFreezePanes;'
      return:
        type:
          - 'excel!Excel.WorksheetFreezePanes:class'
  - uid: 'excel!Excel.Worksheet#getCell:member(1)'
    summary: |-
      <span data-ttu-id="d191b-159">Получает объект диапазона, содержащий одну ячейку, по номеру строки и столбца.</span><span class="sxs-lookup"><span data-stu-id="d191b-159">Gets the range object containing the single cell based on row and column numbers.</span></span> <span data-ttu-id="d191b-160">Ячейка может находиться вне границ родительского диапазона, пока она остается в сетке листа.</span><span class="sxs-lookup"><span data-stu-id="d191b-160">The cell can be outside the bounds of its parent range, so long as it stays within the worksheet grid.</span></span>

      <span data-ttu-id="d191b-161">\[[Набор API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d191b-161">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: 'getCell(row, column)'
    fullName: 'getCell(row, column)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getCell(row: number, column: number): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="d191b-162">Примеры</span><span class="sxs-lookup"><span data-stu-id="d191b-162">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "A1:F8";
              var worksheet = ctx.workbook.worksheets.getItem(sheetName);
              var cell = worksheet.getCell(0,0);
              cell.load('address');
              return ctx.sync().then(function() {
                  console.log(cell.address);
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: row
          description: '<span data-ttu-id="d191b-163">Номер строки ячейки, которую требуется извлечь.</span><span class="sxs-lookup"><span data-stu-id="d191b-163">The row number of the cell to be retrieved.</span></span> <span data-ttu-id="d191b-164">Используется нулевой индекс.</span><span class="sxs-lookup"><span data-stu-id="d191b-164">Zero-indexed.</span></span>'
          type:
            - number
        - id: column
          description: '<span data-ttu-id="d191b-165">Номер столбца ячейки, которую требуется извлечь.</span><span class="sxs-lookup"><span data-stu-id="d191b-165">the column number of the cell to be retrieved.</span></span> <span data-ttu-id="d191b-166">Используется нулевой индекс.</span><span class="sxs-lookup"><span data-stu-id="d191b-166">Zero-indexed.</span></span>'
          type:
            - number
  - uid: 'excel!Excel.Worksheet#getNext:member(1)'
    summary: |-
      <span data-ttu-id="d191b-167">Получает лист, следующий по отношению к элементу.</span><span class="sxs-lookup"><span data-stu-id="d191b-167">Gets the worksheet that follows this one.</span></span> <span data-ttu-id="d191b-168">При отсутствии листов, указанных ниже, этот метод вызовет ошибку.</span><span class="sxs-lookup"><span data-stu-id="d191b-168">If there are no worksheets following this one, this method will throw an error.</span></span>

      <span data-ttu-id="d191b-169">\[[Набор API: ExcelApi 1,5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d191b-169">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getNext(visibleOnly)
    fullName: getNext(visibleOnly)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getNext(visibleOnly?: boolean): Excel.Worksheet;'
      return:
        type:
          - 'excel!Excel.Worksheet:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="d191b-170">Примеры</span><span class="sxs-lookup"><span data-stu-id="d191b-170">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheets = context.workbook.worksheets;

              // We don't want to include the default worksheet that was created
              // when the workbook was created, so our "firstSheet" will be the one
              // after the literal first. Note chaining of navigation methods.
              const firstSheet = sheets.getFirst().getNext();
              const lastSheet = sheets.getLast();
              const firstTaxRateRange = firstSheet.getRange("B2");
              const lastTaxRateRange = lastSheet.getRange("B2");

              firstSheet.load("name");
              lastSheet.load("name");
              firstTaxRateRange.load("text");
              lastTaxRateRange.load("text");

              await context.sync();

              let firstYear = firstSheet.name.substr(5, 4);
              let lastYear = lastSheet.name.substr(5, 4);
              console.log(`Tax Rate change from ${firstYear} to ${lastYear}`, `Tax rate for ${firstYear}: ${firstTaxRateRange.text[0][0]}\nTax rate for ${lastYear}: ${lastTaxRateRange.text[0][0]}`)

              await context.sync();
          });
          ```
      parameters:
        - id: visibleOnly
          description: '<span data-ttu-id="d191b-171">Необязательно.</span><span class="sxs-lookup"><span data-stu-id="d191b-171">Optional.</span></span> <span data-ttu-id="d191b-172">Если задано значение true, учитываются только видимые листы, пропуская все скрытые.</span><span class="sxs-lookup"><span data-stu-id="d191b-172">If true, considers only visible worksheets, skipping over any hidden ones.</span></span>'
          type:
            - boolean
  - uid: 'excel!Excel.Worksheet#getNextOrNullObject:member(1)'
    summary: |-
      <span data-ttu-id="d191b-173">Получает лист, следующий по отношению к элементу.</span><span class="sxs-lookup"><span data-stu-id="d191b-173">Gets the worksheet that follows this one.</span></span> <span data-ttu-id="d191b-174">Если после этого листа нет ни одного листа, этот метод возвратит нулевой объект.</span><span class="sxs-lookup"><span data-stu-id="d191b-174">If there are no worksheets following this one, this method will return a null object.</span></span>

      <span data-ttu-id="d191b-175">\[[Набор API: ExcelApi 1,5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d191b-175">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getNextOrNullObject(visibleOnly)
    fullName: getNextOrNullObject(visibleOnly)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getNextOrNullObject(visibleOnly?: boolean): Excel.Worksheet;'
      return:
        type:
          - 'excel!Excel.Worksheet:class'
        description: ''
      parameters:
        - id: visibleOnly
          description: '<span data-ttu-id="d191b-176">Необязательно.</span><span class="sxs-lookup"><span data-stu-id="d191b-176">Optional.</span></span> <span data-ttu-id="d191b-177">Если задано значение true, учитываются только видимые листы, пропуская все скрытые.</span><span class="sxs-lookup"><span data-stu-id="d191b-177">If true, considers only visible worksheets, skipping over any hidden ones.</span></span>'
          type:
            - boolean
  - uid: 'excel!Excel.Worksheet#getPrevious:member(1)'
    summary: |-
      <span data-ttu-id="d191b-178">Получает лист, который предшествует этому.</span><span class="sxs-lookup"><span data-stu-id="d191b-178">Gets the worksheet that precedes this one.</span></span> <span data-ttu-id="d191b-179">Если нет предыдущих листов, этот метод выдаст ошибку.</span><span class="sxs-lookup"><span data-stu-id="d191b-179">If there are no previous worksheets, this method will throw an error.</span></span>

      <span data-ttu-id="d191b-180">\[[Набор API: ExcelApi 1,5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d191b-180">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getPrevious(visibleOnly)
    fullName: getPrevious(visibleOnly)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getPrevious(visibleOnly?: boolean): Excel.Worksheet;'
      return:
        type:
          - 'excel!Excel.Worksheet:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="d191b-181">Примеры</span><span class="sxs-lookup"><span data-stu-id="d191b-181">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheets = context.workbook.worksheets;
              const currentSheet = sheets.getActiveWorksheet();
              const previousYearSheet = currentSheet.getPrevious();
              const currentTaxDueRange = currentSheet.getRange("C2");
              const previousTaxDueRange = previousYearSheet.getRange("C2");

              currentSheet.load("name");
              previousYearSheet.load("name");
              currentTaxDueRange.load("text");
              previousTaxDueRange.load("text");

              await context.sync();

              let currentYear = currentSheet.name.substr(5, 4);
              let previousYear = previousYearSheet.name.substr(5, 4);
              console.log("Two Year Tax Due Comparison", `Tax due for ${currentYear} was ${currentTaxDueRange.text[0][0]}\nTax due for ${previousYear} was ${previousTaxDueRange.text[0][0]}`)

              await context.sync();
          });
          ```
      parameters:
        - id: visibleOnly
          description: '<span data-ttu-id="d191b-182">Необязательно.</span><span class="sxs-lookup"><span data-stu-id="d191b-182">Optional.</span></span> <span data-ttu-id="d191b-183">Если задано значение true, учитываются только видимые листы, пропуская все скрытые.</span><span class="sxs-lookup"><span data-stu-id="d191b-183">If true, considers only visible worksheets, skipping over any hidden ones.</span></span>'
          type:
            - boolean
  - uid: 'excel!Excel.Worksheet#getPreviousOrNullObject:member(1)'
    summary: |-
      <span data-ttu-id="d191b-184">Получает лист, который предшествует этому.</span><span class="sxs-lookup"><span data-stu-id="d191b-184">Gets the worksheet that precedes this one.</span></span> <span data-ttu-id="d191b-185">Если нет предыдущих листов, этот метод возвратит значение NULL обжет.</span><span class="sxs-lookup"><span data-stu-id="d191b-185">If there are no previous worksheets, this method will return a null objet.</span></span>

      <span data-ttu-id="d191b-186">\[[Набор API: ExcelApi 1,5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d191b-186">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getPreviousOrNullObject(visibleOnly)
    fullName: getPreviousOrNullObject(visibleOnly)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getPreviousOrNullObject(visibleOnly?: boolean): Excel.Worksheet;'
      return:
        type:
          - 'excel!Excel.Worksheet:class'
        description: ''
      parameters:
        - id: visibleOnly
          description: '<span data-ttu-id="d191b-187">Необязательно.</span><span class="sxs-lookup"><span data-stu-id="d191b-187">Optional.</span></span> <span data-ttu-id="d191b-188">Если задано значение true, учитываются только видимые листы, пропуская все скрытые.</span><span class="sxs-lookup"><span data-stu-id="d191b-188">If true, considers only visible worksheets, skipping over any hidden ones.</span></span>'
          type:
            - boolean
  - uid: 'excel!Excel.Worksheet#getRange:member(1)'
    summary: |-
      <span data-ttu-id="d191b-189">Получает объект Range, представляющий отдельный прямоугольный блок ячеек, заданный по адресу или имени.</span><span class="sxs-lookup"><span data-stu-id="d191b-189">Gets the range object, representing a single rectangular block of cells, specified by the address or name.</span></span>

      <span data-ttu-id="d191b-190">\[[Набор API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d191b-190">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getRange(address)
    fullName: getRange(address)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getRange(address?: string): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="d191b-191">Примеры</span><span class="sxs-lookup"><span data-stu-id="d191b-191">Examples</span></span>

          ```javascript
          // Below example uses range address to get the range object.
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "A1:F8";
              var worksheet = ctx.workbook.worksheets.getItem(sheetName);
              var range = worksheet.getRange(rangeAddress);
              range.load('cellCount');
              return ctx.sync().then(function() {
                  console.log(range.cellCount);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
          ```javascript
          // Below example uses a named-range to get the range object.
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeName = 'MyRange';
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeName);
              range.load('address');
              return ctx.sync().then(function() {
                  console.log(range.address);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: address
          description: '<span data-ttu-id="d191b-192">Необязательно.</span><span class="sxs-lookup"><span data-stu-id="d191b-192">Optional.</span></span> <span data-ttu-id="d191b-193">Строка, представляющая адрес или имя диапазона.</span><span class="sxs-lookup"><span data-stu-id="d191b-193">The string representing the address or name of the range.</span></span> <span data-ttu-id="d191b-194">Например, "a1: B2".</span><span class="sxs-lookup"><span data-stu-id="d191b-194">For example, "A1:B2".</span></span> <span data-ttu-id="d191b-195">Если аргумент не указан, возвращается весь диапазон листа.</span><span class="sxs-lookup"><span data-stu-id="d191b-195">If not specified, the entire worksheet range is returned.</span></span>'
          type:
            - string
  - uid: 'excel!Excel.Worksheet#getRangeByIndexes:member(1)'
    summary: |-
      <span data-ttu-id="d191b-196">Получает объект диапазона, начинающегося с определенных строки и столбца и занимающего определенное количество строк и столбцов.</span><span class="sxs-lookup"><span data-stu-id="d191b-196">Gets the range object beginning at a particular row index and column index, and spanning a certain number of rows and columns.</span></span>

      <span data-ttu-id="d191b-197">\[[Набор API: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d191b-197">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: 'getRangeByIndexes(startRow, startColumn, rowCount, columnCount)'
    fullName: 'getRangeByIndexes(startRow, startColumn, rowCount, columnCount)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getRangeByIndexes(startRow: number, startColumn: number, rowCount: number, columnCount: number): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: ''
      parameters:
        - id: startRow
          description: <span data-ttu-id="d191b-198">Строка начала (с нулевым индексированием).</span><span class="sxs-lookup"><span data-stu-id="d191b-198">Start row (zero-indexed).</span></span>
          type:
            - number
        - id: startColumn
          description: <span data-ttu-id="d191b-199">Столбец "начало" (с нулевым индексом).</span><span class="sxs-lookup"><span data-stu-id="d191b-199">Start column (zero-indexed).</span></span>
          type:
            - number
        - id: rowCount
          description: '<span data-ttu-id="d191b-200">Количество строк, включаемых в диапазон.</span><span class="sxs-lookup"><span data-stu-id="d191b-200">Number of rows to include in the range.</span></span>'
          type:
            - number
        - id: columnCount
          description: '<span data-ttu-id="d191b-201">Число столбцов, включаемых в диапазон.</span><span class="sxs-lookup"><span data-stu-id="d191b-201">Number of columns to include in the range.</span></span>'
          type:
            - number
  - uid: 'excel!Excel.Worksheet#getRanges:member(1)'
    summary: |-
      <span data-ttu-id="d191b-202">Получает объект RangeAreas, представляющий один или несколько блоков прямоугольных диапазонов, указанных по адресу или имени.</span><span class="sxs-lookup"><span data-stu-id="d191b-202">Gets the RangeAreas object, representing one or more blocks of rectangular ranges, specified by the address or name.</span></span>

      <span data-ttu-id="d191b-203">\[[Набор API: ExcelApi 1,9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d191b-203">\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getRanges(address)
    fullName: getRanges(address)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getRanges(address?: string): Excel.RangeAreas;'
      return:
        type:
          - 'excel!Excel.RangeAreas:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="d191b-204">Примеры</span><span class="sxs-lookup"><span data-stu-id="d191b-204">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {

              const sheet = context.workbook.worksheets.getActiveWorksheet();
              const specifiedRanges = sheet.getRanges("D3:D5, G3:G5");
              specifiedRanges.format.fill.color = "pink";

              await context.sync();
          })
          ```
      parameters:
        - id: address
          description: '<span data-ttu-id="d191b-205">Необязательно.</span><span class="sxs-lookup"><span data-stu-id="d191b-205">Optional.</span></span> <span data-ttu-id="d191b-206">Строка, содержащая разделенные запятыми адреса или имена отдельных диапазонов.</span><span class="sxs-lookup"><span data-stu-id="d191b-206">A string containing the comma-separated addresses or names of the individual ranges.</span></span> <span data-ttu-id="d191b-207">Например, "a1: B2, A5: B5".</span><span class="sxs-lookup"><span data-stu-id="d191b-207">For example, "A1:B2, A5:B5".</span></span> <span data-ttu-id="d191b-208">Если этот параметр не указан, возвращается объект Ранжеареа для всего листа.</span><span class="sxs-lookup"><span data-stu-id="d191b-208">If not specified, an RangeArea object for the entire worksheet is returned.</span></span>'
          type:
            - string
  - uid: 'excel!Excel.Worksheet#getUsedRange:member(1)'
    summary: |-
      <span data-ttu-id="d191b-209">Используемый диапазон — это наименьший диапазон, включающий в себя все ячейки с определенным значением или форматированием.</span><span class="sxs-lookup"><span data-stu-id="d191b-209">The used range is the smallest range that encompasses any cells that have a value or formatting assigned to them.</span></span> <span data-ttu-id="d191b-210">Если лист пуст, эта функция возвратит верхнюю левую ячейку (то есть *не* выдает ошибку).</span><span class="sxs-lookup"><span data-stu-id="d191b-210">If the entire worksheet is blank, this function will return the top left cell (i.e. it will *not* throw an error).</span></span>

      <span data-ttu-id="d191b-211">\[[Набор API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d191b-211">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getUsedRange(valuesOnly)
    fullName: getUsedRange(valuesOnly)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getUsedRange(valuesOnly?: boolean): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="d191b-212">Примеры</span><span class="sxs-lookup"><span data-stu-id="d191b-212">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var wSheetName = 'Sheet1';
              var worksheet = ctx.workbook.worksheets.getItem(wSheetName);
              var usedRange = worksheet.getUsedRange();
              usedRange.load('address');
              return ctx.sync().then(function() {
                      console.log(usedRange.address);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: valuesOnly
          description: '<span data-ttu-id="d191b-213">Необязательно.</span><span class="sxs-lookup"><span data-stu-id="d191b-213">Optional.</span></span> <span data-ttu-id="d191b-214">Если этот параметр имеет значение true, учитываются только ячейки со значениями в качестве используемых ячеек (игнорируя форматирование).</span><span class="sxs-lookup"><span data-stu-id="d191b-214">If true, considers only cells with values as used cells (ignoring formatting).</span></span> <span data-ttu-id="d191b-215">\[Набор API: ExcelApi 1,2\]</span><span class="sxs-lookup"><span data-stu-id="d191b-215">\[Api set: ExcelApi 1.2\]</span></span>'
          type:
            - boolean
  - uid: 'excel!Excel.Worksheet#getUsedRangeOrNullObject:member(1)'
    summary: "<span data-ttu-id=\"d191b-p128\">Используемый диапазон\_— это наименьший диапазон, включающий в себя все ячейки, которые содержат значение или форматирование. Если весь лист пустой, эта функция возвращает пустой объект.</span><span class=\"sxs-lookup\"><span data-stu-id=\"d191b-p128\">The used range is the smallest range that encompasses any cells that have a value or formatting assigned to them. If the entire worksheet is blank, this function will return a null object.</span></span>\n\n<span data-ttu-id=\"d191b-218\">\\[[Набор API: ExcelApi 1,4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\\]</span><span class=\"sxs-lookup\"><span data-stu-id=\"d191b-218\">\\[ [API set: ExcelApi 1.4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \\]</span></span>"
    name: getUsedRangeOrNullObject(valuesOnly)
    fullName: getUsedRangeOrNullObject(valuesOnly)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getUsedRangeOrNullObject(valuesOnly?: boolean): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: ''
      parameters:
        - id: valuesOnly
          description: <span data-ttu-id="d191b-219">Необязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="d191b-219">Optional.</span></span> <span data-ttu-id="d191b-220">Учитывает только ячейки со значениями.</span><span class="sxs-lookup"><span data-stu-id="d191b-220">Considers only cells with values as used cells.</span></span>
          type:
            - boolean
  - uid: 'excel!Excel.Worksheet#horizontalPageBreaks:member'
    summary: |-
      <span data-ttu-id="d191b-221">Получает коллекцию горизонтальных разрывов страницы для листа.</span><span class="sxs-lookup"><span data-stu-id="d191b-221">Gets the horizontal page break collection for the worksheet.</span></span> <span data-ttu-id="d191b-222">Эта коллекция содержит только добавленные вручную разрывы страниц.</span><span class="sxs-lookup"><span data-stu-id="d191b-222">This collection only contains manual page breaks.</span></span>

      <span data-ttu-id="d191b-223">\[[Набор API: ExcelApi 1,9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d191b-223">\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: horizontalPageBreaks
    fullName: horizontalPageBreaks
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly horizontalPageBreaks: Excel.PageBreakCollection;'
      return:
        type:
          - 'excel!Excel.PageBreakCollection:class'
  - uid: 'excel!Excel.Worksheet#id:member'
    summary: |-
      <span data-ttu-id="d191b-p131">Возвращает значение, однозначно идентифицирующее лист в данной книге. Значение идентификатора остается прежним, даже если переименовать или переместить лист. Только для чтения.</span><span class="sxs-lookup"><span data-stu-id="d191b-p131">Returns a value that uniquely identifies the worksheet in a given workbook. The value of the identifier remains the same even when the worksheet is renamed or moved. Read-only.</span></span>

      <span data-ttu-id="d191b-227">\[[Набор API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d191b-227">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: id
    fullName: id
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly id: string;'
      return:
        type:
          - string
  - uid: 'excel!Excel.Worksheet#load:member(1)'
    summary: <span data-ttu-id="d191b-228">Добавляет в очередь команду для загрузки указанных свойств объекта.</span><span class="sxs-lookup"><span data-stu-id="d191b-228">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="d191b-229">Перед чтением свойств необходимо вызвать метод context.sync().</span><span class="sxs-lookup"><span data-stu-id="d191b-229">You must call "context.sync()" before reading the properties.</span></span>
    remarks: |-
      <span data-ttu-id="d191b-230">В дополнение к этой подписи этот метод имеет следующие подписи:</span><span class="sxs-lookup"><span data-stu-id="d191b-230">In addition to this signature, this method has the following signatures:</span></span>

      <span data-ttu-id="d191b-231">`load(option?: string | string[]): Excel.Worksheet`-WHERE — это строка с разделителями-запятыми или массив строк, указывающий свойства для загрузки.</span><span class="sxs-lookup"><span data-stu-id="d191b-231">`load(option?: string | string[]): Excel.Worksheet` - Where option is a comma-delimited string or an array of strings that specify the properties to load.</span></span>

      <span data-ttu-id="d191b-232">`load(option?: { select?: string; expand?: string; }): Excel.Worksheet`-WHERE. Select — это строка с разделителями-запятыми, указывающая свойства для загрузки и параметры. Expand — это строка с разделителями-запятыми, указывающая свойства навигации для загрузки.</span><span class="sxs-lookup"><span data-stu-id="d191b-232">`load(option?: { select?: string; expand?: string; }): Excel.Worksheet` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.</span></span>

      <span data-ttu-id="d191b-233">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.Worksheet`— Доступно только для типов коллекций.</span><span class="sxs-lookup"><span data-stu-id="d191b-233">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.Worksheet` - Only available on collection types.</span></span> <span data-ttu-id="d191b-234">Он аналогичен предыдущей подписи.</span><span class="sxs-lookup"><span data-stu-id="d191b-234">It is similar to the preceding signature.</span></span> <span data-ttu-id="d191b-235">Option. Top указывает максимальное количество элементов коллекции, которые можно включить в результат.</span><span class="sxs-lookup"><span data-stu-id="d191b-235">Option.top specifies the maximum number of collection items that can be included in the result.</span></span> <span data-ttu-id="d191b-236">Option. skip указывает количество элементов, которые будут пропущены и не включены в результат.</span><span class="sxs-lookup"><span data-stu-id="d191b-236">Option.skip specifies the number of items that are to be skipped and not included in the result.</span></span> <span data-ttu-id="d191b-237">Если указан параметр Option. Top, результирующий набор начнется после пропуска указанного числа элементов.</span><span class="sxs-lookup"><span data-stu-id="d191b-237">If option.top is specified, the result set will start after skipping the specified number of items.</span></span>
    name: load(option)
    fullName: load(option)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(option?: Excel.Interfaces.WorksheetLoadOptions): Excel.Worksheet;'
      return:
        type:
          - 'excel!Excel.Worksheet:class'
        description: ''
      parameters:
        - id: option
          description: ''
          type:
            - 'excel!Excel.Interfaces.WorksheetLoadOptions:interface'
  - uid: 'excel!Excel.Worksheet#load:member(2)'
    summary: <span data-ttu-id="d191b-238">Добавляет в очередь команду для загрузки указанных свойств объекта.</span><span class="sxs-lookup"><span data-stu-id="d191b-238">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="d191b-239">Перед чтением свойств `context.sync()` необходимо вызвать метод.</span><span class="sxs-lookup"><span data-stu-id="d191b-239">You must call `context.sync()` before reading the properties.</span></span>
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): Excel.Worksheet;'
      return:
        type:
          - 'excel!Excel.Worksheet:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="d191b-240">Примеры</span><span class="sxs-lookup"><span data-stu-id="d191b-240">Examples</span></span>

          ```javascript
          // Get worksheet properties based on sheet name.
          Excel.run(function (ctx) { 
              var wSheetName = 'Sheet1';
              var worksheet = ctx.workbook.worksheets.getItem(wSheetName);
              worksheet.load('position')
              return ctx.sync().then(function() {
                      console.log(worksheet.position);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
          ```javascript
          // Set worksheet position. 
          Excel.run(function (ctx) { 
              var wSheetName = 'Sheet1';
              var worksheet = ctx.workbook.worksheets.getItem(wSheetName);
              worksheet.position = 2;
              return ctx.sync(); 
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: propertyNames
          description: '<span data-ttu-id="d191b-241">Строка, разделенная запятыми, или массив строк, указывающий свойства для загрузки.</span><span class="sxs-lookup"><span data-stu-id="d191b-241">A comma-delimited string or an array of strings that specify the properties to load.</span></span>'
          type:
            - 'string | string[]'
  - uid: 'excel!Excel.Worksheet#load:member(3)'
    summary: <span data-ttu-id="d191b-242">Добавляет в очередь команду для загрузки указанных свойств объекта.</span><span class="sxs-lookup"><span data-stu-id="d191b-242">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="d191b-243">Перед чтением свойств `context.sync()` необходимо вызвать метод.</span><span class="sxs-lookup"><span data-stu-id="d191b-243">You must call `context.sync()` before reading the properties.</span></span>
    name: load(propertyNamesAndPaths)
    fullName: load(propertyNamesAndPaths)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNamesAndPaths?: { select?: string; expand?: string; }): Excel.Worksheet;'
      return:
        type:
          - 'excel!Excel.Worksheet:class'
        description: ''
      parameters:
        - id: propertyNamesAndPaths
          description: '<span data-ttu-id="d191b-244">Где Пропертинамесандпасс. Select — это строка с разделителями-запятыми, задающая свойства для загрузки, и Пропертинамесандпасс. Expand — это строка с разделителями-запятыми, указывающая свойства навигации для загрузки.</span><span class="sxs-lookup"><span data-stu-id="d191b-244">Where propertyNamesAndPaths.select is a comma-delimited string that specifies the properties to load, and propertyNamesAndPaths.expand is a comma-delimited string that specifies the navigation properties to load.</span></span>'
          type:
            - '{ select?: string; expand?: string; }'
  - uid: 'excel!Excel.Worksheet#name:member'
    summary: |-
      <span data-ttu-id="d191b-245">Отображаемое имя листа.</span><span class="sxs-lookup"><span data-stu-id="d191b-245">The display name of the worksheet.</span></span>

      <span data-ttu-id="d191b-246">\[[Набор API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d191b-246">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: name
    fullName: name
    langs:
      - typeScript
    type: property
    syntax:
      content: 'name: string;'
      return:
        type:
          - string
  - uid: 'excel!Excel.Worksheet#names:member'
    summary: |-
      <span data-ttu-id="d191b-247">Коллекция имен, относящих к текущему листу.</span><span class="sxs-lookup"><span data-stu-id="d191b-247">Collection of names scoped to the current worksheet.</span></span> <span data-ttu-id="d191b-248">Только для чтения.</span><span class="sxs-lookup"><span data-stu-id="d191b-248">Read-only.</span></span>

      <span data-ttu-id="d191b-249">\[[Набор API: ExcelApi 1,4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d191b-249">\[ [API set: ExcelApi 1.4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: names
    fullName: names
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly names: Excel.NamedItemCollection;'
      return:
        type:
          - 'excel!Excel.NamedItemCollection:class'
  - uid: 'excel!Excel.Worksheet#onActivated:member'
    summary: |-
      <span data-ttu-id="d191b-250">Возникает при активации листа.</span><span class="sxs-lookup"><span data-stu-id="d191b-250">Occurs when the worksheet is activated.</span></span>

      <span data-ttu-id="d191b-251">\[[Набор API: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d191b-251">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: onActivated
    fullName: onActivated
    langs:
      - typeScript
    type: event
    syntax:
      content: 'readonly onActivated: OfficeExtension.EventHandlers<Excel.WorksheetActivatedEventArgs>;'
      return:
        type:
          - 'excel!Excel.Worksheet#onActivated~0:complex'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="d191b-252">Примеры</span><span class="sxs-lookup"><span data-stu-id="d191b-252">Examples</span></span>

          ```javascript
          Excel.run(function (context) {
              var sheet = context.workbook.worksheets.getItem("Sample");
              sheet.onActivated.add(function (event) {
                  return Excel.run((context) => {
                      console.log("The activated worksheet ID is: " + event.worksheetId);
                      return context.sync();
                  });
              });
              return context.sync();
          });
          ```
  - uid: 'excel!Excel.Worksheet#onCalculated:member'
    summary: |-
      <span data-ttu-id="d191b-253">Возникает при вычислении листа.</span><span class="sxs-lookup"><span data-stu-id="d191b-253">Occurs when the worksheet is calculated.</span></span>

      <span data-ttu-id="d191b-254">\[[Набор API: ExcelApi 1,8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d191b-254">\[ [API set: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: onCalculated
    fullName: onCalculated
    langs:
      - typeScript
    type: event
    syntax:
      content: 'readonly onCalculated: OfficeExtension.EventHandlers<Excel.WorksheetCalculatedEventArgs>;'
      return:
        type:
          - 'excel!Excel.Worksheet#onCalculated~0:complex'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="d191b-255">Примеры</span><span class="sxs-lookup"><span data-stu-id="d191b-255">Examples</span></span>

          ```javascript
          Excel.run(function (context) {
              var sheet = context.workbook.worksheets.getItem("Sample");
              sheet.onCalculated.add(function (event) {
                  return Excel.run((context) => {
                      console.log("The worksheet has recalculated.");
                      return context.sync();
                  });
              });
              return context.sync();
          });
          ```
  - uid: 'excel!Excel.Worksheet#onChanged:member'
    summary: |-
      <span data-ttu-id="d191b-256">Происходит при изменении данных на конкретном листе.</span><span class="sxs-lookup"><span data-stu-id="d191b-256">Occurs when data changed on a specific worksheet.</span></span>

      <span data-ttu-id="d191b-257">\[[Набор API: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d191b-257">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: onChanged
    fullName: onChanged
    langs:
      - typeScript
    type: event
    syntax:
      content: 'readonly onChanged: OfficeExtension.EventHandlers<Excel.WorksheetChangedEventArgs>;'
      return:
        type:
          - 'excel!Excel.Worksheet#onChanged~0:complex'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="d191b-258">Примеры</span><span class="sxs-lookup"><span data-stu-id="d191b-258">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              let sheet = context.workbook.worksheets.getItem("Sample");
              sheet.onChanged.add(onChange);

              await context.sync();
              console.log("A handler has been registered for the onChanged event.");
          });
          ```
  - uid: 'excel!Excel.Worksheet#onColumnSorted:member'
    summary: |-
      <span data-ttu-id="d191b-259">Возникает при сортировке по столбцам.</span><span class="sxs-lookup"><span data-stu-id="d191b-259">Occurs when sorting on columns.</span></span>

      <span data-ttu-id="d191b-260">\[[Набор API: EXCELAPI Beta (только ознакомительная версия)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d191b-260">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    isPreview: true
    name: onColumnSorted
    fullName: onColumnSorted
    langs:
      - typeScript
    type: event
    syntax:
      content: 'readonly onColumnSorted: OfficeExtension.EventHandlers<Excel.WorksheetColumnSortedEventArgs>;'
      return:
        type:
          - 'excel!Excel.Worksheet#onColumnSorted~0:complex'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="d191b-261">Примеры</span><span class="sxs-lookup"><span data-stu-id="d191b-261">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              console.log("Adding column handler");
              const sheet = context.workbook.worksheets.getActiveWorksheet();

              // This will fire whenever a column has been moved as the result of a sort action.
              sheet.onColumnSorted.add((event) => {
                  return Excel.run((context) => {
                      console.log("Column sorted: " + event.address);
                      const sheet = context.workbook.worksheets.getActiveWorksheet();

                      // Clear formatting for section, then highlight the sorted area.
                      sheet.getRange("A1:E5").format.fill.clear();
                      if (event.address !== "") {
                          sheet.getRanges(event.address).format.fill.color = "yellow";
                      }

                      return context.sync();
                  });
              });
          });
          ```
  - uid: 'excel!Excel.Worksheet#onDeactivated:member'
    summary: |-
      <span data-ttu-id="d191b-262">Возникает при отключении рабочего листа.</span><span class="sxs-lookup"><span data-stu-id="d191b-262">Occurs when the worksheet is deactivated.</span></span>

      <span data-ttu-id="d191b-263">\[[Набор API: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d191b-263">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: onDeactivated
    fullName: onDeactivated
    langs:
      - typeScript
    type: event
    syntax:
      content: 'readonly onDeactivated: OfficeExtension.EventHandlers<Excel.WorksheetDeactivatedEventArgs>;'
      return:
        type:
          - 'excel!Excel.Worksheet#onDeactivated~0:complex'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="d191b-264">Примеры</span><span class="sxs-lookup"><span data-stu-id="d191b-264">Examples</span></span>

          ```javascript
          Excel.run(function (context) {
              var sheet = context.workbook.worksheets.getItem("Sample");
              sheet.onDeactivated.add(function (event) {
                  return Excel.run((context) => {
                      console.log("The deactivated worksheet is: " + event.worksheetId);
                      return context.sync();
                  });
              });
              return context.sync();
          });
          ```
  - uid: 'excel!Excel.Worksheet#onFiltered:member'
    summary: |-
      <span data-ttu-id="d191b-265">Возникает, если применен фильтр к указанному листу.</span><span class="sxs-lookup"><span data-stu-id="d191b-265">Occurs when filter is applied on a specific worksheet.</span></span>

      <span data-ttu-id="d191b-266">\[[Набор API: EXCELAPI Beta (только ознакомительная версия)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d191b-266">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    isPreview: true
    name: onFiltered
    fullName: onFiltered
    langs:
      - typeScript
    type: event
    syntax:
      content: 'readonly onFiltered: OfficeExtension.EventHandlers<Excel.WorksheetFilteredEventArgs>;'
      return:
        type:
          - 'excel!Excel.Worksheet#onFiltered~0:complex'
  - uid: 'excel!Excel.Worksheet#onFormatChanged:member'
    summary: |-
      <span data-ttu-id="d191b-267">Возникает, если изменен формат указанного листа.</span><span class="sxs-lookup"><span data-stu-id="d191b-267">Occurs when format changed on a specific worksheet.</span></span>

      <span data-ttu-id="d191b-268">\[[Набор API: ExcelApi 1,9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d191b-268">\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: onFormatChanged
    fullName: onFormatChanged
    langs:
      - typeScript
    type: event
    syntax:
      content: 'readonly onFormatChanged: OfficeExtension.EventHandlers<Excel.WorksheetFormatChangedEventArgs>;'
      return:
        type:
          - 'excel!Excel.Worksheet#onFormatChanged~0:complex'
  - uid: 'excel!Excel.Worksheet#onRowHiddenChanged:member'
    summary: |-
      <span data-ttu-id="d191b-269">Возникает при изменении скрытого состояния строки на определенном листе.</span><span class="sxs-lookup"><span data-stu-id="d191b-269">Occurs when row hidden state changed on a specific worksheet.</span></span>

      <span data-ttu-id="d191b-270">\[[Набор API: EXCELAPI Beta (только ознакомительная версия)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d191b-270">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    isPreview: true
    name: onRowHiddenChanged
    fullName: onRowHiddenChanged
    langs:
      - typeScript
    type: event
    syntax:
      content: 'readonly onRowHiddenChanged: OfficeExtension.EventHandlers<Excel.WorksheetRowHiddenChangedEventArgs>;'
      return:
        type:
          - 'excel!Excel.Worksheet#onRowHiddenChanged~0:complex'
  - uid: 'excel!Excel.Worksheet#onRowSorted:member'
    summary: |-
      <span data-ttu-id="d191b-271">Возникает при сортировке по строкам.</span><span class="sxs-lookup"><span data-stu-id="d191b-271">Occurs when sorting on rows.</span></span>

      <span data-ttu-id="d191b-272">\[[Набор API: EXCELAPI Beta (только ознакомительная версия)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d191b-272">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    isPreview: true
    name: onRowSorted
    fullName: onRowSorted
    langs:
      - typeScript
    type: event
    syntax:
      content: 'readonly onRowSorted: OfficeExtension.EventHandlers<Excel.WorksheetRowSortedEventArgs>;'
      return:
        type:
          - 'excel!Excel.Worksheet#onRowSorted~0:complex'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="d191b-273">Примеры</span><span class="sxs-lookup"><span data-stu-id="d191b-273">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              console.log("Adding row handler");
              const sheet = context.workbook.worksheets.getActiveWorksheet();

              // This will fire whenever a row has been moved as the result of a sort action.
              sheet.onRowSorted.add((event) => {
                  return Excel.run((context) => {
                      console.log("Row sorted: " + event.address);
                      const sheet = context.workbook.worksheets.getActiveWorksheet();

                      // Clear formatting for section, then highlight the sorted area.
                      sheet.getRange("A1:E5").format.fill.clear();
                      if (event.address !== "") {
                          sheet.getRanges(event.address).format.fill.color = "yellow";
                      }

                      return context.sync();
                  });
              });
          });
          ```
  - uid: 'excel!Excel.Worksheet#onSelectionChanged:member'
    summary: |-
      <span data-ttu-id="d191b-274">Возникает при изменении выделенного фрагмента на определенном листе.</span><span class="sxs-lookup"><span data-stu-id="d191b-274">Occurs when the selection changes on a specific worksheet.</span></span>

      <span data-ttu-id="d191b-275">\[[Набор API: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d191b-275">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: onSelectionChanged
    fullName: onSelectionChanged
    langs:
      - typeScript
    type: event
    syntax:
      content: 'readonly onSelectionChanged: OfficeExtension.EventHandlers<Excel.WorksheetSelectionChangedEventArgs>;'
      return:
        type:
          - 'excel!Excel.Worksheet#onSelectionChanged~0:complex'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="d191b-276">Примеры</span><span class="sxs-lookup"><span data-stu-id="d191b-276">Examples</span></span>

          ```javascript
          Excel.run(function (context) {
              var sheet = context.workbook.worksheets.getItem("Sample");
              sheet.onSelectionChanged.add(function (event) {
                  return Excel.run((context) => {
                      console.log("The selected range has changed to: " + event.address);
                      return context.sync();
                  });
              });
              return context.sync();
          });
          ```
  - uid: 'excel!Excel.Worksheet#onSingleClicked:member'
    summary: |-
      <span data-ttu-id="d191b-277">Возникает, когда происходит щелчок левой кнопкой мыши или нажатие на листе.</span><span class="sxs-lookup"><span data-stu-id="d191b-277">Occurs when left-clicked/tapped operation happens in the worksheet.</span></span> <span data-ttu-id="d191b-278">Это событие не будет инициировано при нажатии следующих условий:</span><span class="sxs-lookup"><span data-stu-id="d191b-278">This event will not be fired when clicking in the following cases:</span></span>

      - <span data-ttu-id="d191b-279">Пользователь перетаскивает мышь для выбора нескольких элементов.</span><span class="sxs-lookup"><span data-stu-id="d191b-279">The user drags the mouse for multi-selection.</span></span>

      - <span data-ttu-id="d191b-280">Пользователь выбирает ячейку в режиме, когда аргументы ячейки выбраны для ссылок на формулы.</span><span class="sxs-lookup"><span data-stu-id="d191b-280">The user selects a cell in the mode when cell arguments are selected for formula references.</span></span>

      <span data-ttu-id="d191b-281">\[[Набор API: EXCELAPI Beta (только ознакомительная версия)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d191b-281">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    isPreview: true
    name: onSingleClicked
    fullName: onSingleClicked
    langs:
      - typeScript
    type: event
    syntax:
      content: 'readonly onSingleClicked: OfficeExtension.EventHandlers<Excel.WorksheetSingleClickedEventArgs>;'
      return:
        type:
          - 'excel!Excel.Worksheet#onSingleClicked~0:complex'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="d191b-282">Примеры</span><span class="sxs-lookup"><span data-stu-id="d191b-282">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getActiveWorksheet();
              sheet.onSingleClicked.add((event) => {
                  return Excel.run((context) => {
                      console.log(`Click detected at ${event.address} (pixel offset from upper-left cell corner: ${event.offsetX}, ${event.offsetY})`);
                      return context.sync();
                  });
              });

              console.log("The worksheet click handler is registered.");

              await context.sync();
          });
          ```
  - uid: 'excel!Excel.Worksheet#pageLayout:member'
    summary: |-
      <span data-ttu-id="d191b-283">Получает объект PageLayout листа.</span><span class="sxs-lookup"><span data-stu-id="d191b-283">Gets the PageLayout object of the worksheet.</span></span>

      <span data-ttu-id="d191b-284">\[[Набор API: ExcelApi 1,9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d191b-284">\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: pageLayout
    fullName: pageLayout
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly pageLayout: Excel.PageLayout;'
      return:
        type:
          - 'excel!Excel.PageLayout:class'
  - uid: 'excel!Excel.Worksheet#pivotTables:member'
    summary: |-
      <span data-ttu-id="d191b-285">Коллекция сводных таблиц на листе.</span><span class="sxs-lookup"><span data-stu-id="d191b-285">Collection of PivotTables that are part of the worksheet.</span></span> <span data-ttu-id="d191b-286">Только для чтения.</span><span class="sxs-lookup"><span data-stu-id="d191b-286">Read-only.</span></span>

      <span data-ttu-id="d191b-287">\[[Набор API: ExcelApi 1,3](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d191b-287">\[ [API set: ExcelApi 1.3](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: pivotTables
    fullName: pivotTables
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly pivotTables: Excel.PivotTableCollection;'
      return:
        type:
          - 'excel!Excel.PivotTableCollection:class'
  - uid: 'excel!Excel.Worksheet#position:member'
    summary: |-
      <span data-ttu-id="d191b-288">Положение листа (начиная с нуля) в книге.</span><span class="sxs-lookup"><span data-stu-id="d191b-288">The zero-based position of the worksheet within the workbook.</span></span>

      <span data-ttu-id="d191b-289">\[[Набор API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d191b-289">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: position
    fullName: position
    langs:
      - typeScript
    type: property
    syntax:
      content: 'position: number;'
      return:
        type:
          - number
  - uid: 'excel!Excel.Worksheet#protection:member'
    summary: |-
      <span data-ttu-id="d191b-290">Возвращает объект защиты листа.</span><span class="sxs-lookup"><span data-stu-id="d191b-290">Returns sheet protection object for a worksheet.</span></span> <span data-ttu-id="d191b-291">Только для чтения.</span><span class="sxs-lookup"><span data-stu-id="d191b-291">Read-only.</span></span>

      <span data-ttu-id="d191b-292">\[[Набор API: ExcelApi 1,2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d191b-292">\[ [API set: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: protection
    fullName: protection
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly protection: Excel.WorksheetProtection;'
      return:
        type:
          - 'excel!Excel.WorksheetProtection:class'
  - uid: 'excel!Excel.Worksheet#replaceAll:member(1)'
    summary: |-
      <span data-ttu-id="d191b-293">Находит и заменяет определенную строку на основе условий, указанных в текущем листе.</span><span class="sxs-lookup"><span data-stu-id="d191b-293">Finds and replaces the given string based on the criteria specified within the current worksheet.</span></span>

      <span data-ttu-id="d191b-294">\[[Набор API: ExcelApi 1,9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d191b-294">\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: 'replaceAll(text, replacement, criteria)'
    fullName: 'replaceAll(text, replacement, criteria)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'replaceAll(text: string, replacement: string, criteria: Excel.ReplaceCriteria): OfficeExtension.ClientResult<number>;'
      return:
        type:
          - 'excel!Excel.Worksheet#replaceAll~0:complex'
        description: <span data-ttu-id="d191b-295">Количество выполненных замен.</span><span class="sxs-lookup"><span data-stu-id="d191b-295">The number of replacements performed.</span></span>
      parameters:
        - id: text
          description: <span data-ttu-id="d191b-296">Строка для поиска.</span><span class="sxs-lookup"><span data-stu-id="d191b-296">String to find.</span></span>
          type:
            - string
        - id: replacement
          description: <span data-ttu-id="d191b-297">Строка для замены оригинала на.</span><span class="sxs-lookup"><span data-stu-id="d191b-297">String to replace the original with.</span></span>
          type:
            - string
        - id: criteria
          description: <span data-ttu-id="d191b-298">Дополнительные условия замены.</span><span class="sxs-lookup"><span data-stu-id="d191b-298">Additional Replace Criteria.</span></span>
          type:
            - 'excel!Excel.ReplaceCriteria:interface'
  - uid: 'excel!Excel.Worksheet#set:member(1)'
    summary: '<span data-ttu-id="d191b-299">Задает одновременно несколько свойств объекта.</span><span class="sxs-lookup"><span data-stu-id="d191b-299">Sets multiple properties of an object at the same time.</span></span> <span data-ttu-id="d191b-300">Можно передать либо простой объект с соответствующими свойствами, либо другой объект API того же типа.</span><span class="sxs-lookup"><span data-stu-id="d191b-300">You can pass either a plain object with the appropriate properties, or another API object of the same type.</span></span>'
    remarks: |-
      <span data-ttu-id="d191b-301">Этот метод имеет следующую дополнительную подпись:</span><span class="sxs-lookup"><span data-stu-id="d191b-301">This method has the following additional signature:</span></span>

      `set(properties: Excel.Worksheet): void`
    name: 'set(properties, options)'
    fullName: 'set(properties, options)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'set(properties: Interfaces.WorksheetUpdateData, options?: OfficeExtension.UpdateOptions): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: properties
          description: '<span data-ttu-id="d191b-302">Объект JavaScript со свойствами, которые структурированы исоморфикалли к свойствам объекта, для которого вызывается метод.</span><span class="sxs-lookup"><span data-stu-id="d191b-302">A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.</span></span>'
          type:
            - 'excel!Excel.Interfaces.WorksheetUpdateData:interface'
        - id: options
          description: '<span data-ttu-id="d191b-303">Предоставляет возможность подавлять ошибки, если объект Properties пытается задать любые свойства, предназначенные только для чтения.</span><span class="sxs-lookup"><span data-stu-id="d191b-303">Provides an option to suppress errors if the properties object tries to set any read-only properties.</span></span>'
          type:
            - 'excel!OfficeExtension.UpdateOptions:interface'
  - uid: 'excel!Excel.Worksheet#set:member(2)'
    summary: '<span data-ttu-id="d191b-304">Задает одновременно несколько свойств объекта на основе существующего загруженного объекта.</span><span class="sxs-lookup"><span data-stu-id="d191b-304">Sets multiple properties on the object at the same time, based on an existing loaded object.</span></span>'
    name: set(properties)
    fullName: set(properties)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'set(properties: Excel.Worksheet): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: properties
          description: ''
          type:
            - 'excel!Excel.Worksheet:class'
  - uid: 'excel!Excel.Worksheet#shapes:member'
    summary: |-
      <span data-ttu-id="d191b-305">Возвращает коллекцию всех объектов Shape на листе.</span><span class="sxs-lookup"><span data-stu-id="d191b-305">Returns the collection of all the Shape objects on the worksheet.</span></span> <span data-ttu-id="d191b-306">Только для чтения.</span><span class="sxs-lookup"><span data-stu-id="d191b-306">Read-only.</span></span>

      <span data-ttu-id="d191b-307">\[[Набор API: ExcelApi 1,9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d191b-307">\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: shapes
    fullName: shapes
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly shapes: Excel.ShapeCollection;'
      return:
        type:
          - 'excel!Excel.ShapeCollection:class'
  - uid: 'excel!Excel.Worksheet#showGridlines:member'
    summary: |-
      <span data-ttu-id="d191b-308">Получает или задает флаг линий сетки листа.</span><span class="sxs-lookup"><span data-stu-id="d191b-308">Gets or sets the worksheet's gridlines flag.</span></span> <span data-ttu-id="d191b-309">Этот флаг определяет, отображаются ли линии сетки для пользователя.</span><span class="sxs-lookup"><span data-stu-id="d191b-309">This flag determines whether gridlines are visible to the user.</span></span>

      <span data-ttu-id="d191b-310">\[[Набор API: ExcelApi 1,8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d191b-310">\[ [API set: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: showGridlines
    fullName: showGridlines
    langs:
      - typeScript
    type: property
    syntax:
      content: 'showGridlines: boolean;'
      return:
        type:
          - boolean
        description: |-


          #### <a name="examples"></a><span data-ttu-id="d191b-311">Примеры</span><span class="sxs-lookup"><span data-stu-id="d191b-311">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getActiveWorksheet();
              sheet.showGridlines = true;

              await context.sync();
          });
          ```
  - uid: 'excel!Excel.Worksheet#showHeadings:member'
    summary: |-
      <span data-ttu-id="d191b-312">Получает или задает флаг заголовков листа.</span><span class="sxs-lookup"><span data-stu-id="d191b-312">Gets or sets the worksheet's headings flag.</span></span> <span data-ttu-id="d191b-313">Этот флаг определяет, отображаются ли заголовки для пользователя.</span><span class="sxs-lookup"><span data-stu-id="d191b-313">This flag determines whether headings are visible to the user.</span></span>

      <span data-ttu-id="d191b-314">\[[Набор API: ExcelApi 1,8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d191b-314">\[ [API set: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: showHeadings
    fullName: showHeadings
    langs:
      - typeScript
    type: property
    syntax:
      content: 'showHeadings: boolean;'
      return:
        type:
          - boolean
  - uid: 'excel!Excel.Worksheet#showOutlineLevels:member(1)'
    summary: |-
      <span data-ttu-id="d191b-315">Отображает группы строк или столбцов по их уровням структуры.</span><span class="sxs-lookup"><span data-stu-id="d191b-315">Shows row or column groups by their outline levels.</span></span> <span data-ttu-id="d191b-316">Группирование и суммирование списка данных на листе.</span><span class="sxs-lookup"><span data-stu-id="d191b-316">Outlines group and summarize a list of data in the worksheet.</span></span> <span data-ttu-id="d191b-317">Параметры `rowLevels` и `columnLevels` определяют, сколько уровней структуры будет отображаться.</span><span class="sxs-lookup"><span data-stu-id="d191b-317">The `rowLevels` and `columnLevels` parameters specify how many levels of the outline will be displayed.</span></span> <span data-ttu-id="d191b-318">Допустимый диапазон аргументов находится в пределах от 0 до 8.</span><span class="sxs-lookup"><span data-stu-id="d191b-318">The acceptable argument range is between 0 and 8.</span></span> <span data-ttu-id="d191b-319">Значение 0 не изменяет текущее отображение.</span><span class="sxs-lookup"><span data-stu-id="d191b-319">A value of 0 does not change the current display.</span></span> <span data-ttu-id="d191b-320">Значение, превышающее текущее число уровней, отображает все уровни.</span><span class="sxs-lookup"><span data-stu-id="d191b-320">A value greater than the current number of levels displays all the levels.</span></span>

      <span data-ttu-id="d191b-321">\[[Набор API: EXCELAPI Beta (только ознакомительная версия)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d191b-321">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    isPreview: true
    name: 'showOutlineLevels(rowLevels, columnLevels)'
    fullName: 'showOutlineLevels(rowLevels, columnLevels)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'showOutlineLevels(rowLevels: number, columnLevels: number): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: rowLevels
          description: <span data-ttu-id="d191b-322">Количество отображаемых уровней строк в структуре.</span><span class="sxs-lookup"><span data-stu-id="d191b-322">The number of row levels of an outline to display.</span></span>
          type:
            - number
        - id: columnLevels
          description: <span data-ttu-id="d191b-323">Число уровней столбцов структуры для отображения.</span><span class="sxs-lookup"><span data-stu-id="d191b-323">The number of column levels of an outline to display.</span></span>
          type:
            - number
  - uid: 'excel!Excel.Worksheet#slicers:member'
    summary: |-
      <span data-ttu-id="d191b-324">Возвращает коллекцию срезов, имеющихся на листе.</span><span class="sxs-lookup"><span data-stu-id="d191b-324">Returns collection of slicers that are part of the worksheet.</span></span> <span data-ttu-id="d191b-325">Только для чтения.</span><span class="sxs-lookup"><span data-stu-id="d191b-325">Read-only.</span></span>

      <span data-ttu-id="d191b-326">\[[Набор API: EXCELAPI Beta (только ознакомительная версия)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d191b-326">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    isPreview: true
    name: slicers
    fullName: slicers
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly slicers: Excel.SlicerCollection;'
      return:
        type:
          - 'excel!Excel.SlicerCollection:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="d191b-327">Примеры</span><span class="sxs-lookup"><span data-stu-id="d191b-327">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Pivot");
              const slicer = sheet.slicers.add(
                  "Farm Sales", /* The slicer data source. For PivotTables, this can be the PivotTable object reference or name. */
                  "Type" /* The field in the data source to filter by. For PivotTables, this can be a PivotField object reference or ID. */
              );
              slicer.name = "Fruit Slicer";
              await context.sync();
          });
          ```
  - uid: 'excel!Excel.Worksheet#standardHeight:member'
    summary: |-
      <span data-ttu-id="d191b-328">Возвращает стандартную (по умолчанию) высоту всех строк на листе (в пунктах).</span><span class="sxs-lookup"><span data-stu-id="d191b-328">Returns the standard (default) height of all the rows in the worksheet, in points.</span></span> <span data-ttu-id="d191b-329">Только для чтения.</span><span class="sxs-lookup"><span data-stu-id="d191b-329">Read-only.</span></span>

      <span data-ttu-id="d191b-330">\[[Набор API: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d191b-330">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: standardHeight
    fullName: standardHeight
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly standardHeight: number;'
      return:
        type:
          - number
  - uid: 'excel!Excel.Worksheet#standardWidth:member'
    summary: |-
      <span data-ttu-id="d191b-331">Возвращает или задает стандартную (по умолчанию) ширину всех столбцов на листе.</span><span class="sxs-lookup"><span data-stu-id="d191b-331">Returns or sets the standard (default) width of all the columns in the worksheet.</span></span> <span data-ttu-id="d191b-332">Одна единица измерения ширины столбца равна ширине одного символа в стиле Normal.</span><span class="sxs-lookup"><span data-stu-id="d191b-332">One unit of column width is equal to the width of one character in the Normal style.</span></span> <span data-ttu-id="d191b-333">Для пропорциональных шрифтов используется ширина знака 0 (ноль).</span><span class="sxs-lookup"><span data-stu-id="d191b-333">For proportional fonts, the width of the character 0 (zero) is used.</span></span>

      <span data-ttu-id="d191b-334">\[[Набор API: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d191b-334">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: standardWidth
    fullName: standardWidth
    langs:
      - typeScript
    type: property
    syntax:
      content: 'standardWidth: number;'
      return:
        type:
          - number
  - uid: 'excel!Excel.Worksheet#tabColor:member'
    summary: |-
      <span data-ttu-id="d191b-335">Получает или задает цвет вкладки листа.</span><span class="sxs-lookup"><span data-stu-id="d191b-335">Gets or sets the worksheet tab color.</span></span> <span data-ttu-id="d191b-336">При получении цвета вкладки, если лист невидим, значение будет равно null.</span><span class="sxs-lookup"><span data-stu-id="d191b-336">When retrieving the tab color, if the worksheet is invisible, the value will be null.</span></span> <span data-ttu-id="d191b-337">Если лист является видимым, но для цвета вкладки задано значение Авто, возвращается пустая строка.</span><span class="sxs-lookup"><span data-stu-id="d191b-337">If the worksheet is visible but the tab color is set to auto, an empty string will be returned.</span></span> <span data-ttu-id="d191b-338">В противном случае для свойства задается цвет, в виде "\#123456" при задании цвета используйте пустую строку для установки "Авто" или "реальный цвет" в противном случае.</span><span class="sxs-lookup"><span data-stu-id="d191b-338">Otherwise, the property will be set to a color, in the form "\#123456" When setting the color, use an empty-string to set an "auto" color, or a real color otherwise.</span></span>

      <span data-ttu-id="d191b-339">\[[Набор API: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d191b-339">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: tabColor
    fullName: tabColor
    langs:
      - typeScript
    type: property
    syntax:
      content: 'tabColor: string;'
      return:
        type:
          - string
        description: |-


          #### <a name="examples"></a><span data-ttu-id="d191b-340">Примеры</span><span class="sxs-lookup"><span data-stu-id="d191b-340">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const activeSheet = context.workbook.worksheets.getActiveWorksheet();
              activeSheet.tabColor = "#FF0000";

              await context.sync();
          });
          ```
  - uid: 'excel!Excel.Worksheet#tables:member'
    summary: |-
      <span data-ttu-id="d191b-341">Коллекция таблиц, имеющихся на листе.</span><span class="sxs-lookup"><span data-stu-id="d191b-341">Collection of tables that are part of the worksheet.</span></span> <span data-ttu-id="d191b-342">Только для чтения.</span><span class="sxs-lookup"><span data-stu-id="d191b-342">Read-only.</span></span>

      <span data-ttu-id="d191b-343">\[[Набор API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d191b-343">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: tables
    fullName: tables
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly tables: Excel.TableCollection;'
      return:
        type:
          - 'excel!Excel.TableCollection:class'
  - uid: 'excel!Excel.Worksheet#toJSON:member(1)'
    summary: '<span data-ttu-id="d191b-344">Переопределяет метод `toJSON()` JavaScript для предоставления более удобного вывода при передаче объекта API`JSON.stringify()`</span><span class="sxs-lookup"><span data-stu-id="d191b-344">Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`</span></span><!-- --><span data-ttu-id="d191b-345">.</span><span class="sxs-lookup"><span data-stu-id="d191b-345"></span></span> <span data-ttu-id="d191b-346">(`JSON.stringify`</span><span class="sxs-lookup"><span data-stu-id="d191b-346"></span></span><!-- --><span data-ttu-id="d191b-347">, в свою очередь, вызывает `toJSON` метод объекта, который передается ему.) В то время как исходный объект Excel. лист является объектом API, `toJSON` метод возвращает простой объект JavaScript (тип`Excel.Interfaces.WorksheetData`</span><span class="sxs-lookup"><span data-stu-id="d191b-347">, in turn, calls the `toJSON` method of the object that is passed to it.) Whereas the original Excel.Worksheet object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.WorksheetData`</span></span><!-- --><span data-ttu-id="d191b-348">), который содержит неполные копии загруженных дочерних свойств из исходного объекта.</span><span class="sxs-lookup"><span data-stu-id="d191b-348">) that contains shallow copies of any loaded child properties from the original object.</span></span>'
    name: toJSON()
    fullName: toJSON()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON(): Excel.Interfaces.WorksheetData;'
      return:
        type:
          - 'excel!Excel.Interfaces.WorksheetData:interface'
        description: ''
  - uid: 'excel!Excel.Worksheet#verticalPageBreaks:member'
    summary: |-
      <span data-ttu-id="d191b-349">Получает коллекцию вертикальных разрывов страницы для листа.</span><span class="sxs-lookup"><span data-stu-id="d191b-349">Gets the vertical page break collection for the worksheet.</span></span> <span data-ttu-id="d191b-350">Эта коллекция содержит только добавленные вручную разрывы страниц.</span><span class="sxs-lookup"><span data-stu-id="d191b-350">This collection only contains manual page breaks.</span></span>

      <span data-ttu-id="d191b-351">\[[Набор API: ExcelApi 1,9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d191b-351">\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: verticalPageBreaks
    fullName: verticalPageBreaks
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly verticalPageBreaks: Excel.PageBreakCollection;'
      return:
        type:
          - 'excel!Excel.PageBreakCollection:class'
  - uid: 'excel!Excel.Worksheet#visibility:member'
    summary: |-
      <span data-ttu-id="d191b-352">Видимость листа.</span><span class="sxs-lookup"><span data-stu-id="d191b-352">The Visibility of the worksheet.</span></span>

      <span data-ttu-id="d191b-353">\[[Набор API: ExcelApi 1,1 для чтения видимости; 1,2 — для его установки.](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)</span><span class="sxs-lookup"><span data-stu-id="d191b-353">\[ [API set: ExcelApi 1.1 for reading visibility; 1.2 for setting it.](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)</span></span> <span data-ttu-id="d191b-354">\]</span><span class="sxs-lookup"><span data-stu-id="d191b-354"></span></span>
    name: visibility
    fullName: visibility
    langs:
      - typeScript
    type: property
    syntax:
      content: 'visibility: Excel.SheetVisibility | "Visible" | "Hidden" | "VeryHidden";'
      return:
        type:
          - 'excel!Excel.Worksheet#visibility~0:complex'
references:
  - uid: 'excel!OfficeExtension.ClientObject:class'
    name: OfficeExtension.ClientObject
  - uid: 'excel!Excel.AutoFilter:class'
    name: Excel.AutoFilter
  - uid: 'excel!Excel.ChartCollection:class'
    name: Excel.ChartCollection
  - uid: 'excel!Excel.CommentCollection:class'
    name: Excel.CommentCollection
  - uid: 'excel!Excel.RequestContext:class'
    name: RequestContext
  - uid: 'excel!Excel.Worksheet:class'
    name: Excel.Worksheet
  - uid: 'excel!Excel.WorksheetPositionType:enum'
    name: Excel.WorksheetPositionType
  - uid: 'excel!Excel.RangeAreas:class'
    name: Excel.RangeAreas
  - uid: 'excel!Excel.WorksheetSearchCriteria:interface'
    name: Excel.WorksheetSearchCriteria
  - uid: 'excel!Excel.WorksheetFreezePanes:class'
    name: Excel.WorksheetFreezePanes
  - uid: 'excel!Excel.Range:class'
    name: Excel.Range
  - uid: 'excel!Excel.PageBreakCollection:class'
    name: Excel.PageBreakCollection
  - uid: 'excel!Excel.Interfaces.WorksheetLoadOptions:interface'
    name: Excel.Interfaces.WorksheetLoadOptions
  - uid: 'excel!Excel.NamedItemCollection:class'
    name: Excel.NamedItemCollection
  - uid: 'excel!Excel.Worksheet#onActivated~0:complex'
    name: OfficeExtension.EventHandlers<Excel.WorksheetActivatedEventArgs>
    fullName: OfficeExtension.EventHandlers<Excel.WorksheetActivatedEventArgs>
    spec.typeScript:
      - uid: 'excel!OfficeExtension.EventHandlers:class'
        name: OfficeExtension.EventHandlers
        fullName: OfficeExtension.EventHandlers
      - name: <
        fullName: <
      - uid: 'excel!Excel.WorksheetActivatedEventArgs:interface'
        name: Excel.WorksheetActivatedEventArgs
        fullName: Excel.WorksheetActivatedEventArgs
      - name: '>'
        fullName: '>'
  - uid: 'excel!Excel.Worksheet#onCalculated~0:complex'
    name: OfficeExtension.EventHandlers<Excel.WorksheetCalculatedEventArgs>
    fullName: OfficeExtension.EventHandlers<Excel.WorksheetCalculatedEventArgs>
    spec.typeScript:
      - uid: 'excel!OfficeExtension.EventHandlers:class'
        name: OfficeExtension.EventHandlers
        fullName: OfficeExtension.EventHandlers
      - name: <
        fullName: <
      - uid: 'excel!Excel.WorksheetCalculatedEventArgs:interface'
        name: Excel.WorksheetCalculatedEventArgs
        fullName: Excel.WorksheetCalculatedEventArgs
      - name: '>'
        fullName: '>'
  - uid: 'excel!Excel.Worksheet#onChanged~0:complex'
    name: OfficeExtension.EventHandlers<Excel.WorksheetChangedEventArgs>
    fullName: OfficeExtension.EventHandlers<Excel.WorksheetChangedEventArgs>
    spec.typeScript:
      - uid: 'excel!OfficeExtension.EventHandlers:class'
        name: OfficeExtension.EventHandlers
        fullName: OfficeExtension.EventHandlers
      - name: <
        fullName: <
      - uid: 'excel!Excel.WorksheetChangedEventArgs:interface'
        name: Excel.WorksheetChangedEventArgs
        fullName: Excel.WorksheetChangedEventArgs
      - name: '>'
        fullName: '>'
  - uid: 'excel!Excel.Worksheet#onColumnSorted~0:complex'
    name: OfficeExtension.EventHandlers<Excel.WorksheetColumnSortedEventArgs>
    fullName: OfficeExtension.EventHandlers<Excel.WorksheetColumnSortedEventArgs>
    spec.typeScript:
      - uid: 'excel!OfficeExtension.EventHandlers:class'
        name: OfficeExtension.EventHandlers
        fullName: OfficeExtension.EventHandlers
      - name: <
        fullName: <
      - uid: 'excel!Excel.WorksheetColumnSortedEventArgs:interface'
        name: Excel.WorksheetColumnSortedEventArgs
        fullName: Excel.WorksheetColumnSortedEventArgs
      - name: '>'
        fullName: '>'
  - uid: 'excel!Excel.Worksheet#onDeactivated~0:complex'
    name: OfficeExtension.EventHandlers<Excel.WorksheetDeactivatedEventArgs>
    fullName: OfficeExtension.EventHandlers<Excel.WorksheetDeactivatedEventArgs>
    spec.typeScript:
      - uid: 'excel!OfficeExtension.EventHandlers:class'
        name: OfficeExtension.EventHandlers
        fullName: OfficeExtension.EventHandlers
      - name: <
        fullName: <
      - uid: 'excel!Excel.WorksheetDeactivatedEventArgs:interface'
        name: Excel.WorksheetDeactivatedEventArgs
        fullName: Excel.WorksheetDeactivatedEventArgs
      - name: '>'
        fullName: '>'
  - uid: 'excel!Excel.Worksheet#onFiltered~0:complex'
    name: OfficeExtension.EventHandlers<Excel.WorksheetFilteredEventArgs>
    fullName: OfficeExtension.EventHandlers<Excel.WorksheetFilteredEventArgs>
    spec.typeScript:
      - uid: 'excel!OfficeExtension.EventHandlers:class'
        name: OfficeExtension.EventHandlers
        fullName: OfficeExtension.EventHandlers
      - name: <
        fullName: <
      - uid: 'excel!Excel.WorksheetFilteredEventArgs:interface'
        name: Excel.WorksheetFilteredEventArgs
        fullName: Excel.WorksheetFilteredEventArgs
      - name: '>'
        fullName: '>'
  - uid: 'excel!Excel.Worksheet#onFormatChanged~0:complex'
    name: OfficeExtension.EventHandlers<Excel.WorksheetFormatChangedEventArgs>
    fullName: OfficeExtension.EventHandlers<Excel.WorksheetFormatChangedEventArgs>
    spec.typeScript:
      - uid: 'excel!OfficeExtension.EventHandlers:class'
        name: OfficeExtension.EventHandlers
        fullName: OfficeExtension.EventHandlers
      - name: <
        fullName: <
      - uid: 'excel!Excel.WorksheetFormatChangedEventArgs:interface'
        name: Excel.WorksheetFormatChangedEventArgs
        fullName: Excel.WorksheetFormatChangedEventArgs
      - name: '>'
        fullName: '>'
  - uid: 'excel!Excel.Worksheet#onRowHiddenChanged~0:complex'
    name: OfficeExtension.EventHandlers<Excel.WorksheetRowHiddenChangedEventArgs>
    fullName: OfficeExtension.EventHandlers<Excel.WorksheetRowHiddenChangedEventArgs>
    spec.typeScript:
      - uid: 'excel!OfficeExtension.EventHandlers:class'
        name: OfficeExtension.EventHandlers
        fullName: OfficeExtension.EventHandlers
      - name: <
        fullName: <
      - uid: 'excel!Excel.WorksheetRowHiddenChangedEventArgs:interface'
        name: Excel.WorksheetRowHiddenChangedEventArgs
        fullName: Excel.WorksheetRowHiddenChangedEventArgs
      - name: '>'
        fullName: '>'
  - uid: 'excel!Excel.Worksheet#onRowSorted~0:complex'
    name: OfficeExtension.EventHandlers<Excel.WorksheetRowSortedEventArgs>
    fullName: OfficeExtension.EventHandlers<Excel.WorksheetRowSortedEventArgs>
    spec.typeScript:
      - uid: 'excel!OfficeExtension.EventHandlers:class'
        name: OfficeExtension.EventHandlers
        fullName: OfficeExtension.EventHandlers
      - name: <
        fullName: <
      - uid: 'excel!Excel.WorksheetRowSortedEventArgs:interface'
        name: Excel.WorksheetRowSortedEventArgs
        fullName: Excel.WorksheetRowSortedEventArgs
      - name: '>'
        fullName: '>'
  - uid: 'excel!Excel.Worksheet#onSelectionChanged~0:complex'
    name: OfficeExtension.EventHandlers<Excel.WorksheetSelectionChangedEventArgs>
    fullName: OfficeExtension.EventHandlers<Excel.WorksheetSelectionChangedEventArgs>
    spec.typeScript:
      - uid: 'excel!OfficeExtension.EventHandlers:class'
        name: OfficeExtension.EventHandlers
        fullName: OfficeExtension.EventHandlers
      - name: <
        fullName: <
      - uid: 'excel!Excel.WorksheetSelectionChangedEventArgs:interface'
        name: Excel.WorksheetSelectionChangedEventArgs
        fullName: Excel.WorksheetSelectionChangedEventArgs
      - name: '>'
        fullName: '>'
  - uid: 'excel!Excel.Worksheet#onSingleClicked~0:complex'
    name: OfficeExtension.EventHandlers<Excel.WorksheetSingleClickedEventArgs>
    fullName: OfficeExtension.EventHandlers<Excel.WorksheetSingleClickedEventArgs>
    spec.typeScript:
      - uid: 'excel!OfficeExtension.EventHandlers:class'
        name: OfficeExtension.EventHandlers
        fullName: OfficeExtension.EventHandlers
      - name: <
        fullName: <
      - uid: 'excel!Excel.WorksheetSingleClickedEventArgs:interface'
        name: Excel.WorksheetSingleClickedEventArgs
        fullName: Excel.WorksheetSingleClickedEventArgs
      - name: '>'
        fullName: '>'
  - uid: 'excel!Excel.PageLayout:class'
    name: Excel.PageLayout
  - uid: 'excel!Excel.PivotTableCollection:class'
    name: Excel.PivotTableCollection
  - uid: 'excel!Excel.WorksheetProtection:class'
    name: Excel.WorksheetProtection
  - uid: 'excel!Excel.Worksheet#replaceAll~0:complex'
    name: OfficeExtension.ClientResult<number>
    fullName: OfficeExtension.ClientResult<number>
    spec.typeScript:
      - uid: 'excel!OfficeExtension.ClientResult:class'
        name: OfficeExtension.ClientResult
        fullName: OfficeExtension.ClientResult
      - name: <number>
        fullName: <number>
  - uid: 'excel!Excel.ReplaceCriteria:interface'
    name: Excel.ReplaceCriteria
  - uid: 'excel!Excel.Interfaces.WorksheetUpdateData:interface'
    name: Interfaces.WorksheetUpdateData
  - uid: 'excel!OfficeExtension.UpdateOptions:interface'
    name: OfficeExtension.UpdateOptions
  - uid: 'excel!Excel.ShapeCollection:class'
    name: Excel.ShapeCollection
  - uid: 'excel!Excel.SlicerCollection:class'
    name: Excel.SlicerCollection
  - uid: 'excel!Excel.TableCollection:class'
    name: Excel.TableCollection
  - uid: 'excel!Excel.Interfaces.WorksheetData:interface'
    name: Excel.Interfaces.WorksheetData
  - uid: 'excel!Excel.Worksheet#visibility~0:complex'
    name: Excel.SheetVisibility | "Visible" | "Hidden" | "VeryHidden"
    fullName: Excel.SheetVisibility | "Visible" | "Hidden" | "VeryHidden"
    spec.typeScript:
      - uid: 'excel!Excel.SheetVisibility:enum'
        name: Excel.SheetVisibility
        fullName: Excel.SheetVisibility
      - name: ' | "Visible" | "Hidden" | "VeryHidden"'
        fullName: ' | "Visible" | "Hidden" | "VeryHidden"'