### YamlMime:UniversalReference
items:
  - uid: 'excel!Excel.CustomXmlPartScopedCollection:class'
    summary: |-
      <span data-ttu-id="0ad03-101">Набор настраиваемых XML-частей с ограниченной областью действия.</span><span class="sxs-lookup"><span data-stu-id="0ad03-101">A scoped collection of custom XML parts.</span></span> <span data-ttu-id="0ad03-102">Набор с ограниченной областью является результатом некоторой операции, например фильтрации по пространству имен.</span><span class="sxs-lookup"><span data-stu-id="0ad03-102">A scoped collection is the result of some operation, e.g. filtering by namespace.</span></span> <span data-ttu-id="0ad03-103">Коллекция с ограниченной областью действия не может быть задана.</span><span class="sxs-lookup"><span data-stu-id="0ad03-103">A scoped collection cannot be scoped any further.</span></span>

      <span data-ttu-id="0ad03-104">\[[Набор API: ExcelApi 1,5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="0ad03-104">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: Excel.CustomXmlPartScopedCollection
    fullName: Excel.CustomXmlPartScopedCollection
    langs:
      - typeScript
    type: class
    extends:
      - 'excel!OfficeExtension.ClientObject:class'
    package: excel!
    children:
      - 'excel!Excel.CustomXmlPartScopedCollection#context:member'
      - 'excel!Excel.CustomXmlPartScopedCollection#getCount:member(1)'
      - 'excel!Excel.CustomXmlPartScopedCollection#getItem:member(1)'
      - 'excel!Excel.CustomXmlPartScopedCollection#getItemOrNullObject:member(1)'
      - 'excel!Excel.CustomXmlPartScopedCollection#getOnlyItem:member(1)'
      - 'excel!Excel.CustomXmlPartScopedCollection#getOnlyItemOrNullObject:member(1)'
      - 'excel!Excel.CustomXmlPartScopedCollection#items:member'
      - 'excel!Excel.CustomXmlPartScopedCollection#load:member(1)'
      - 'excel!Excel.CustomXmlPartScopedCollection#load:member(2)'
      - 'excel!Excel.CustomXmlPartScopedCollection#load:member(3)'
      - 'excel!Excel.CustomXmlPartScopedCollection#toJSON:member(1)'
  - uid: 'excel!Excel.CustomXmlPartScopedCollection#context:member'
    summary: '<span data-ttu-id="0ad03-105">Контекст запроса, связанный с объектом.</span><span class="sxs-lookup"><span data-stu-id="0ad03-105">The request context associated with the object.</span></span> <span data-ttu-id="0ad03-106">Это подсоединяет процесс надстройки к процессу ведущего приложения Office.</span><span class="sxs-lookup"><span data-stu-id="0ad03-106">This connects the add-in''s process to the Office host application''s process.</span></span>'
    name: context
    fullName: context
    langs:
      - typeScript
    type: property
    syntax:
      content: 'context: RequestContext;'
      return:
        type:
          - 'excel!Excel.RequestContext:class'
  - uid: 'excel!Excel.CustomXmlPartScopedCollection#getCount:member(1)'
    summary: |-
      <span data-ttu-id="0ad03-107">Получает количество частей CustomXML в этой коллекции.</span><span class="sxs-lookup"><span data-stu-id="0ad03-107">Gets the number of CustomXML parts in this collection.</span></span>

      <span data-ttu-id="0ad03-108">\[[Набор API: ExcelApi 1,5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="0ad03-108">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getCount()
    fullName: getCount()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getCount(): OfficeExtension.ClientResult<number>;'
      return:
        type:
          - 'excel!Excel.CustomXmlPartScopedCollection#getCount~0:complex'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="0ad03-109">Примеры</span><span class="sxs-lookup"><span data-stu-id="0ad03-109">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              $("#display-xml").text("");
              const contosoNamespace = "http://schemas.contoso.com/review/1.0";
              const customXmlParts = context.workbook.customXmlParts;
              const filteredXmlParts = customXmlParts.getByNamespace(contosoNamespace);
              const numberOfPartsInNamespace = filteredXmlParts.getCount();

              await context.sync();

              if (numberOfPartsInNamespace.value == 1) {
                  const onlyXmlPartInNamespace = filteredXmlParts.getOnlyItem();
                  const xmlBlob = onlyXmlPartInNamespace.getXml();

                  await context.sync();

                  // Make it a bit more readable.
                  const readableXml = xmlBlob.value.replace(/></g, ">\n<");

                  $("#display-xml").text(`The only XML part in the namespace ${contosoNamespace} is:
                      ${readableXml}`);

              } else {
                  console.log(`There are ${numberOfPartsInNamespace.value} XML parts with namespace ${contosoNamespace}. There should be exactly 1.`);
              }        

              await context.sync();
          });
          ```
  - uid: 'excel!Excel.CustomXmlPartScopedCollection#getItem:member(1)'
    summary: |-
      <span data-ttu-id="0ad03-110">Получает пользовательскую XML-часть по идентификатору.</span><span class="sxs-lookup"><span data-stu-id="0ad03-110">Gets a custom XML part based on its ID.</span></span>

      <span data-ttu-id="0ad03-111">\[[Набор API: ExcelApi 1,5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="0ad03-111">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getItem(id)
    fullName: getItem(id)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getItem(id: string): Excel.CustomXmlPart;'
      return:
        type:
          - 'excel!Excel.CustomXmlPart:class'
        description: ''
      parameters:
        - id: id
          description: <span data-ttu-id="0ad03-112">ИДЕНТИФИКАТОР получаемого объекта.</span><span class="sxs-lookup"><span data-stu-id="0ad03-112">ID of the object to be retrieved.</span></span>
          type:
            - string
  - uid: 'excel!Excel.CustomXmlPartScopedCollection#getItemOrNullObject:member(1)'
    summary: |-
      <span data-ttu-id="0ad03-113">Получает пользовательскую XML-часть по идентификатору.</span><span class="sxs-lookup"><span data-stu-id="0ad03-113">Gets a custom XML part based on its ID.</span></span> <span data-ttu-id="0ad03-114">Если CustomXmlPart не существует, свойство isNull возвращаемого объекта будет иметь значение true.</span><span class="sxs-lookup"><span data-stu-id="0ad03-114">If the CustomXmlPart does not exist, the return object's isNull property will be true.</span></span>

      <span data-ttu-id="0ad03-115">\[[Набор API: ExcelApi 1,5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="0ad03-115">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getItemOrNullObject(id)
    fullName: getItemOrNullObject(id)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getItemOrNullObject(id: string): Excel.CustomXmlPart;'
      return:
        type:
          - 'excel!Excel.CustomXmlPart:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="0ad03-116">Примеры</span><span class="sxs-lookup"><span data-stu-id="0ad03-116">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const settings = context.workbook.settings;
              const xmlPartIDSetting = settings.getItemOrNullObject("ContosoReviewXmlPartId").load("value");
              await context.sync();

              if (xmlPartIDSetting.value) {   
                  let customXmlPart = context.workbook.customXmlParts.getItem(xmlPartIDSetting.value);
                  const xmlBlob = customXmlPart.getXml();
                  customXmlPart.delete();
                  customXmlPart = context.workbook.customXmlParts.getItemOrNullObject(xmlPartIDSetting.value);

                  await context.sync();

                  if (customXmlPart.isNullObject) {
                      $("#display-xml").text(`The XML part with the id ${xmlPartIDSetting.value} has been deleted.`);

                      // Delete the unneeded setting too.
                      xmlPartIDSetting.delete();            
                  } else {
                      const readableXml = addLineBreaksToXML(xmlBlob.value);
                      const strangeMessage = `This is strange. The XML part with the id ${xmlPartIDSetting.value} has not been deleted:\n${readableXml}`
                      $("#display-xml").text(strangeMessage);
                  }

                  await context.sync();
              }
          });
          ```
      parameters:
        - id: id
          description: <span data-ttu-id="0ad03-117">ИДЕНТИФИКАТОР получаемого объекта.</span><span class="sxs-lookup"><span data-stu-id="0ad03-117">ID of the object to be retrieved.</span></span>
          type:
            - string
  - uid: 'excel!Excel.CustomXmlPartScopedCollection#getOnlyItem:member(1)'
    summary: |-
      <span data-ttu-id="0ad03-118">Если коллекция содержит ровно один элемент, этот метод возвращает его.</span><span class="sxs-lookup"><span data-stu-id="0ad03-118">If the collection contains exactly one item, this method returns it.</span></span> <span data-ttu-id="0ad03-119">В противном случае этот метод выдает ошибку.</span><span class="sxs-lookup"><span data-stu-id="0ad03-119">Otherwise, this method produces an error.</span></span>

      <span data-ttu-id="0ad03-120">\[[Набор API: ExcelApi 1,5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="0ad03-120">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getOnlyItem()
    fullName: getOnlyItem()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getOnlyItem(): Excel.CustomXmlPart;'
      return:
        type:
          - 'excel!Excel.CustomXmlPart:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="0ad03-121">Примеры</span><span class="sxs-lookup"><span data-stu-id="0ad03-121">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              $("#display-xml").text("");
              const contosoNamespace = "http://schemas.contoso.com/review/1.0";
              const customXmlParts = context.workbook.customXmlParts;
              const filteredXmlParts = customXmlParts.getByNamespace(contosoNamespace);
              const numberOfPartsInNamespace = filteredXmlParts.getCount();

              await context.sync();

              if (numberOfPartsInNamespace.value == 1) {
                  const onlyXmlPartInNamespace = filteredXmlParts.getOnlyItem();
                  const xmlBlob = onlyXmlPartInNamespace.getXml();

                  await context.sync();

                  // Make it a bit more readable.
                  const readableXml = xmlBlob.value.replace(/></g, ">\n<");

                  $("#display-xml").text(`The only XML part in the namespace ${contosoNamespace} is:
                      ${readableXml}`);

              } else {
                  console.log(`There are ${numberOfPartsInNamespace.value} XML parts with namespace ${contosoNamespace}. There should be exactly 1.`);
              }        

              await context.sync();
          });
          ```
  - uid: 'excel!Excel.CustomXmlPartScopedCollection#getOnlyItemOrNullObject:member(1)'
    summary: |-
      <span data-ttu-id="0ad03-122">Если коллекция содержит ровно один элемент, этот метод возвращает его.</span><span class="sxs-lookup"><span data-stu-id="0ad03-122">If the collection contains exactly one item, this method returns it.</span></span> <span data-ttu-id="0ad03-123">В противном случае этот метод возвращает значение null.</span><span class="sxs-lookup"><span data-stu-id="0ad03-123">Otherwise, this method returns Null.</span></span>

      <span data-ttu-id="0ad03-124">\[[Набор API: ExcelApi 1,5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="0ad03-124">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getOnlyItemOrNullObject()
    fullName: getOnlyItemOrNullObject()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getOnlyItemOrNullObject(): Excel.CustomXmlPart;'
      return:
        type:
          - 'excel!Excel.CustomXmlPart:class'
        description: ''
  - uid: 'excel!Excel.CustomXmlPartScopedCollection#items:member'
    summary: <span data-ttu-id="0ad03-125">Получает загруженные дочерние элементы в этой коллекции.</span><span class="sxs-lookup"><span data-stu-id="0ad03-125">Gets the loaded child items in this collection.</span></span>
    name: items
    fullName: items
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly items: Excel.CustomXmlPart[];'
      return:
        type:
          - 'excel!Excel.CustomXmlPartScopedCollection#items~0:complex'
  - uid: 'excel!Excel.CustomXmlPartScopedCollection#load:member(1)'
    summary: <span data-ttu-id="0ad03-126">Добавляет в очередь команду для загрузки указанных свойств объекта.</span><span class="sxs-lookup"><span data-stu-id="0ad03-126">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="0ad03-127">Перед чтением свойств `context.sync()` необходимо вызвать метод.</span><span class="sxs-lookup"><span data-stu-id="0ad03-127">You must call `context.sync()` before reading the properties.</span></span>
    name: load(options)
    fullName: load(options)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(options?: Excel.Interfaces.CustomXmlPartScopedCollectionLoadOptions & Excel.Interfaces.CollectionLoadOptions): Excel.CustomXmlPartScopedCollection;'
      return:
        type:
          - 'excel!Excel.CustomXmlPartScopedCollection:class'
        description: ''
      parameters:
        - id: options
          description: '<span data-ttu-id="0ad03-128">Предоставляет параметры, для которых загружается свойства объекта.</span><span class="sxs-lookup"><span data-stu-id="0ad03-128">Provides options for which properties of the object to load.</span></span>'
          type:
            - 'excel!Excel.CustomXmlPartScopedCollection#load~0:complex'
  - uid: 'excel!Excel.CustomXmlPartScopedCollection#load:member(2)'
    summary: <span data-ttu-id="0ad03-129">Добавляет в очередь команду для загрузки указанных свойств объекта.</span><span class="sxs-lookup"><span data-stu-id="0ad03-129">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="0ad03-130">Перед чтением свойств `context.sync()` необходимо вызвать метод.</span><span class="sxs-lookup"><span data-stu-id="0ad03-130">You must call `context.sync()` before reading the properties.</span></span>
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): Excel.CustomXmlPartScopedCollection;'
      return:
        type:
          - 'excel!Excel.CustomXmlPartScopedCollection:class'
        description: ''
      parameters:
        - id: propertyNames
          description: '<span data-ttu-id="0ad03-131">Строка, разделенная запятыми, или массив строк, указывающий свойства для загрузки.</span><span class="sxs-lookup"><span data-stu-id="0ad03-131">A comma-delimited string or an array of strings that specify the properties to load.</span></span>'
          type:
            - 'string | string[]'
  - uid: 'excel!Excel.CustomXmlPartScopedCollection#load:member(3)'
    summary: <span data-ttu-id="0ad03-132">Добавляет в очередь команду для загрузки указанных свойств объекта.</span><span class="sxs-lookup"><span data-stu-id="0ad03-132">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="0ad03-133">Перед чтением свойств `context.sync()` необходимо вызвать метод.</span><span class="sxs-lookup"><span data-stu-id="0ad03-133">You must call `context.sync()` before reading the properties.</span></span>
    name: load(propertyNamesAndPaths)
    fullName: load(propertyNamesAndPaths)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNamesAndPaths?: OfficeExtension.LoadOption): Excel.CustomXmlPartScopedCollection;'
      return:
        type:
          - 'excel!Excel.CustomXmlPartScopedCollection:class'
        description: ''
      parameters:
        - id: propertyNamesAndPaths
          description: '<span data-ttu-id="0ad03-134">`propertyNamesAndPaths.select`— Это строка с разделителями-запятыми, задающая свойства для `propertyNamesAndPaths.expand` загрузки и которая представляет собой строку с разделителями-запятыми, указывающую свойства навигации для загрузки.</span><span class="sxs-lookup"><span data-stu-id="0ad03-134">`propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.</span></span>'
          type:
            - 'excel!OfficeExtension.LoadOption:interface'
  - uid: 'excel!Excel.CustomXmlPartScopedCollection#toJSON:member(1)'
    summary: '<span data-ttu-id="0ad03-135">Переопределяет метод `toJSON()` JavaScript для предоставления более удобного вывода при передаче объекта API`JSON.stringify()`</span><span class="sxs-lookup"><span data-stu-id="0ad03-135">Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`</span></span><!-- --><span data-ttu-id="0ad03-136">.</span><span class="sxs-lookup"><span data-stu-id="0ad03-136"></span></span> <span data-ttu-id="0ad03-137">(`JSON.stringify`</span><span class="sxs-lookup"><span data-stu-id="0ad03-137"></span></span><!-- --><span data-ttu-id="0ad03-138">, в свою очередь, вызывает `toJSON` метод объекта, который передается ему.) В то время как `Excel.CustomXmlPartScopedCollection` исходный объект является объектом API, `toJSON` метод возвращает простой объект JavaScript (тип`Excel.Interfaces.CustomXmlPartScopedCollectionData`</span><span class="sxs-lookup"><span data-stu-id="0ad03-138">, in turn, calls the `toJSON` method of the object that is passed to it.) Whereas the original `Excel.CustomXmlPartScopedCollection` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.CustomXmlPartScopedCollectionData`</span></span><!-- --><span data-ttu-id="0ad03-139">), содержащий массив "Items" с неполноми копиями загруженных свойств из элементов коллекции.</span><span class="sxs-lookup"><span data-stu-id="0ad03-139">) that contains an "items" array with shallow copies of any loaded properties from the collection''s items.</span></span>'
    name: toJSON()
    fullName: toJSON()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON(): Excel.Interfaces.CustomXmlPartScopedCollectionData;'
      return:
        type:
          - 'excel!Excel.Interfaces.CustomXmlPartScopedCollectionData:interface'
        description: ''
references:
  - uid: 'excel!OfficeExtension.ClientObject:class'
    name: OfficeExtension.ClientObject
  - uid: 'excel!Excel.RequestContext:class'
    name: RequestContext
  - uid: 'excel!Excel.CustomXmlPartScopedCollection#getCount~0:complex'
    name: OfficeExtension.ClientResult<number>
    fullName: OfficeExtension.ClientResult<number>
    spec.typeScript:
      - uid: 'excel!OfficeExtension.ClientResult:class'
        name: OfficeExtension.ClientResult
        fullName: OfficeExtension.ClientResult
      - name: <number>
        fullName: <number>
  - uid: 'excel!Excel.CustomXmlPart:class'
    name: Excel.CustomXmlPart
  - uid: 'excel!Excel.CustomXmlPartScopedCollection#items~0:complex'
    name: 'Excel.CustomXmlPart[]'
    fullName: 'Excel.CustomXmlPart[]'
    spec.typeScript:
      - uid: 'excel!Excel.CustomXmlPart:class'
        name: Excel.CustomXmlPart
        fullName: Excel.CustomXmlPart
      - name: '[]'
        fullName: '[]'
  - uid: 'excel!Excel.CustomXmlPartScopedCollection:class'
    name: Excel.CustomXmlPartScopedCollection
  - uid: 'excel!Excel.CustomXmlPartScopedCollection#load~0:complex'
    name: Excel.Interfaces.CustomXmlPartScopedCollectionLoadOptions & Excel.Interfaces.CollectionLoadOptions
    fullName: Excel.Interfaces.CustomXmlPartScopedCollectionLoadOptions & Excel.Interfaces.CollectionLoadOptions
    spec.typeScript:
      - uid: 'excel!Excel.Interfaces.CustomXmlPartScopedCollectionLoadOptions:interface'
        name: Excel.Interfaces.CustomXmlPartScopedCollectionLoadOptions
        fullName: Excel.Interfaces.CustomXmlPartScopedCollectionLoadOptions
      - name: ' & '
        fullName: ' & '
      - uid: 'excel!Excel.Interfaces.CollectionLoadOptions:interface'
        name: Excel.Interfaces.CollectionLoadOptions
        fullName: Excel.Interfaces.CollectionLoadOptions
  - uid: 'excel!OfficeExtension.LoadOption:interface'
    name: OfficeExtension.LoadOption
  - uid: 'excel!Excel.Interfaces.CustomXmlPartScopedCollectionData:interface'
    name: Excel.Interfaces.CustomXmlPartScopedCollectionData