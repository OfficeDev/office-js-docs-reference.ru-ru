### YamlMime:UniversalReference
items:
  - uid: 'excel!Excel.SlicerCollection:class'
    summary: |-
      <span data-ttu-id="1d332-101">Представляет коллекцию всех объектов срезов в книге или листе.</span><span class="sxs-lookup"><span data-stu-id="1d332-101">Represents a collection of all the slicer objects on the workbook or a worksheet.</span></span>

      <span data-ttu-id="1d332-102">\[[Набор API: EXCELAPI Beta (только ознакомительная версия)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="1d332-102">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    isPreview: true
    name: Excel.SlicerCollection
    fullName: Excel.SlicerCollection
    langs:
      - typeScript
    type: class
    extends:
      - 'excel!OfficeExtension.ClientObject:class'
    package: excel!
    children:
      - 'excel!Excel.SlicerCollection#add:member(1)'
      - 'excel!Excel.SlicerCollection#context:member'
      - 'excel!Excel.SlicerCollection#getCount:member(1)'
      - 'excel!Excel.SlicerCollection#getItem:member(1)'
      - 'excel!Excel.SlicerCollection#getItemAt:member(1)'
      - 'excel!Excel.SlicerCollection#getItemOrNullObject:member(1)'
      - 'excel!Excel.SlicerCollection#items:member'
      - 'excel!Excel.SlicerCollection#load:member(1)'
      - 'excel!Excel.SlicerCollection#load:member(2)'
      - 'excel!Excel.SlicerCollection#load:member(3)'
      - 'excel!Excel.SlicerCollection#toJSON:member(1)'
  - uid: 'excel!Excel.SlicerCollection#add:member(1)'
    summary: |-
      <span data-ttu-id="1d332-103">Добавляет новый срез в книгу.</span><span class="sxs-lookup"><span data-stu-id="1d332-103">Adds a new slicer to the workbook.</span></span>

      <span data-ttu-id="1d332-104">\[[Набор API: EXCELAPI Beta (только ознакомительная версия)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="1d332-104">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    isPreview: true
    name: 'add(slicerSource, sourceField, slicerDestination)'
    fullName: 'add(slicerSource, sourceField, slicerDestination)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'add(slicerSource: string | PivotTable | Table, sourceField: string | PivotField | number | TableColumn, slicerDestination?: string | Worksheet): Excel.Slicer;'
      return:
        type:
          - 'excel!Excel.Slicer:class'
        description: |-
          <span data-ttu-id="1d332-105">Новый срез.</span><span class="sxs-lookup"><span data-stu-id="1d332-105">The new slicer.</span></span>

          #### <a name="examples"></a><span data-ttu-id="1d332-106">Примеры</span><span class="sxs-lookup"><span data-stu-id="1d332-106">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Pivot");
              const slicer = sheet.slicers.add(
                  "Farm Sales", /* The slicer data source. For PivotTables, this can be the PivotTable object reference or name. */
                  "Type" /* The field in the data source to filter by. For PivotTables, this can be a PivotField object reference or ID. */
              );
              slicer.name = "Fruit Slicer";
              await context.sync();
          });
          ```
      parameters:
        - id: slicerSource
          description: '<span data-ttu-id="1d332-107">Источник данных, на котором будет основан новый срез.</span><span class="sxs-lookup"><span data-stu-id="1d332-107">The data source that the new slicer will be based on.</span></span> <span data-ttu-id="1d332-108">Это может быть объект PivotTable, объект Table или строка.</span><span class="sxs-lookup"><span data-stu-id="1d332-108">It can be a PivotTable object, a Table object or a string.</span></span> <span data-ttu-id="1d332-109">Когда объект сводной таблицы передается, источником данных является источник объекта сводной таблицы.</span><span class="sxs-lookup"><span data-stu-id="1d332-109">When a PivotTable object is passed, the data source is the source of the PivotTable object.</span></span> <span data-ttu-id="1d332-110">Когда передается объект Table, источником данных является объект Table.</span><span class="sxs-lookup"><span data-stu-id="1d332-110">When a Table object is passed, the data source is the Table object.</span></span> <span data-ttu-id="1d332-111">Когда строка передается, она интерпретируется как имя/идентификатор сводной таблицы или таблицы.</span><span class="sxs-lookup"><span data-stu-id="1d332-111">When a string is passed, it is interpreted as the name/id of a PivotTable/Table.</span></span>'
          type:
            - 'excel!Excel.SlicerCollection#add~0:complex'
        - id: sourceField
          description: '<span data-ttu-id="1d332-112">Поле в источнике данных, по которому выполняется фильтрация.</span><span class="sxs-lookup"><span data-stu-id="1d332-112">The field in the data source to filter by.</span></span> <span data-ttu-id="1d332-113">Это может быть объект PivotField, объект TableColumn, идентификатор PivotField или идентификатор и имя TableColumn.</span><span class="sxs-lookup"><span data-stu-id="1d332-113">It can be a PivotField object, a TableColumn object, the id of a PivotField or the id/name of TableColumn.</span></span>'
          type:
            - 'excel!Excel.SlicerCollection#add~1:complex'
        - id: slicerDestination
          description: '<span data-ttu-id="1d332-114">Необязательно.</span><span class="sxs-lookup"><span data-stu-id="1d332-114">Optional.</span></span> <span data-ttu-id="1d332-115">Лист, в котором будет создан новый срез.</span><span class="sxs-lookup"><span data-stu-id="1d332-115">The worksheet where the new slicer will be created in.</span></span> <span data-ttu-id="1d332-116">Это может быть объект листа или имя или идентификатор листа.</span><span class="sxs-lookup"><span data-stu-id="1d332-116">It can be a Worksheet object or the name/id of a worksheet.</span></span> <span data-ttu-id="1d332-117">Этот параметр можно опустить, если коллекция срезов извлекается из листа.</span><span class="sxs-lookup"><span data-stu-id="1d332-117">This parameter can be omitted if the slicer collection is retrieved from worksheet.</span></span>'
          type:
            - 'excel!Excel.SlicerCollection#add~2:complex'
  - uid: 'excel!Excel.SlicerCollection#context:member'
    summary: '<span data-ttu-id="1d332-118">Контекст запроса, связанный с объектом.</span><span class="sxs-lookup"><span data-stu-id="1d332-118">The request context associated with the object.</span></span> <span data-ttu-id="1d332-119">Это подсоединяет процесс надстройки к процессу ведущего приложения Office.</span><span class="sxs-lookup"><span data-stu-id="1d332-119">This connects the add-in''s process to the Office host application''s process.</span></span>'
    isPreview: true
    name: context
    fullName: context
    langs:
      - typeScript
    type: property
    syntax:
      content: 'context: RequestContext;'
      return:
        type:
          - 'excel!Excel.RequestContext:class'
  - uid: 'excel!Excel.SlicerCollection#getCount:member(1)'
    summary: |-
      <span data-ttu-id="1d332-120">Возвращает количество срезов в коллекции.</span><span class="sxs-lookup"><span data-stu-id="1d332-120">Returns the number of slicers in the collection.</span></span>

      <span data-ttu-id="1d332-121">\[[Набор API: EXCELAPI Beta (только ознакомительная версия)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="1d332-121">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    isPreview: true
    name: getCount()
    fullName: getCount()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getCount(): OfficeExtension.ClientResult<number>;'
      return:
        type:
          - 'excel!Excel.SlicerCollection#getCount~0:complex'
        description: ''
  - uid: 'excel!Excel.SlicerCollection#getItem:member(1)'
    summary: |-
      <span data-ttu-id="1d332-122">Получает объект slicer по его имени или ИД.</span><span class="sxs-lookup"><span data-stu-id="1d332-122">Gets a slicer object using its name or id.</span></span>

      <span data-ttu-id="1d332-123">\[[Набор API: EXCELAPI Beta (только ознакомительная версия)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="1d332-123">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    isPreview: true
    name: getItem(key)
    fullName: getItem(key)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getItem(key: string): Excel.Slicer;'
      return:
        type:
          - 'excel!Excel.Slicer:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="1d332-124">Примеры</span><span class="sxs-lookup"><span data-stu-id="1d332-124">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const slicer = context.workbook.slicers.getItem("Fruit Slicer");
              slicer.caption = "Fruit Types";
              slicer.left = 395;
              slicer.top = 15;
              slicer.height = 135;
              slicer.width = 150;
              await context.sync();
          });
          ```
      parameters:
        - id: key
          description: <span data-ttu-id="1d332-125">Имя или идентификатор среза.</span><span class="sxs-lookup"><span data-stu-id="1d332-125">The name or id of the slicer.</span></span>
          type:
            - string
  - uid: 'excel!Excel.SlicerCollection#getItemAt:member(1)'
    summary: |-
      <span data-ttu-id="1d332-126">Получает срез на основе его позиции в коллекции.</span><span class="sxs-lookup"><span data-stu-id="1d332-126">Gets a slicer based on its position in the collection.</span></span>

      <span data-ttu-id="1d332-127">\[[Набор API: EXCELAPI Beta (только ознакомительная версия)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="1d332-127">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    isPreview: true
    name: getItemAt(index)
    fullName: getItemAt(index)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getItemAt(index: number): Excel.Slicer;'
      return:
        type:
          - 'excel!Excel.Slicer:class'
        description: ''
      parameters:
        - id: index
          description: <span data-ttu-id="1d332-128">Значение индекса получаемого объекта.</span><span class="sxs-lookup"><span data-stu-id="1d332-128">Index value of the object to be retrieved.</span></span> <span data-ttu-id="1d332-129">Используется нулевой индекс.</span><span class="sxs-lookup"><span data-stu-id="1d332-129">Zero-indexed.</span></span>
          type:
            - number
  - uid: 'excel!Excel.SlicerCollection#getItemOrNullObject:member(1)'
    summary: |-
      <span data-ttu-id="1d332-130">Получает срез по его имени или ИД. Если срез не существует, возвращает пустой объект.</span><span class="sxs-lookup"><span data-stu-id="1d332-130">Gets a slicer using its name or id. If the slicer does not exist, will return a null object.</span></span>

      <span data-ttu-id="1d332-131">\[[Набор API: EXCELAPI Beta (только ознакомительная версия)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="1d332-131">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    isPreview: true
    name: getItemOrNullObject(key)
    fullName: getItemOrNullObject(key)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getItemOrNullObject(key: string): Excel.Slicer;'
      return:
        type:
          - 'excel!Excel.Slicer:class'
        description: ''
      parameters:
        - id: key
          description: '<span data-ttu-id="1d332-132">Имя или идентификатор среза, который требуется получить.</span><span class="sxs-lookup"><span data-stu-id="1d332-132">Name or Id of the slicer to be retrieved.</span></span>'
          type:
            - string
  - uid: 'excel!Excel.SlicerCollection#items:member'
    summary: <span data-ttu-id="1d332-133">Получает загруженные дочерние элементы в этой коллекции.</span><span class="sxs-lookup"><span data-stu-id="1d332-133">Gets the loaded child items in this collection.</span></span>
    isPreview: true
    name: items
    fullName: items
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly items: Excel.Slicer[];'
      return:
        type:
          - 'excel!Excel.SlicerCollection#items~0:complex'
  - uid: 'excel!Excel.SlicerCollection#load:member(1)'
    summary: <span data-ttu-id="1d332-134">Добавляет в очередь команду для загрузки указанных свойств объекта.</span><span class="sxs-lookup"><span data-stu-id="1d332-134">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="1d332-135">Перед чтением свойств `context.sync()` необходимо вызвать метод.</span><span class="sxs-lookup"><span data-stu-id="1d332-135">You must call `context.sync()` before reading the properties.</span></span>
    isPreview: true
    name: load(options)
    fullName: load(options)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(options?: Excel.Interfaces.SlicerCollectionLoadOptions & Excel.Interfaces.CollectionLoadOptions): Excel.SlicerCollection;'
      return:
        type:
          - 'excel!Excel.SlicerCollection:class'
        description: ''
      parameters:
        - id: options
          description: '<span data-ttu-id="1d332-136">Предоставляет параметры, для которых загружается свойства объекта.</span><span class="sxs-lookup"><span data-stu-id="1d332-136">Provides options for which properties of the object to load.</span></span>'
          type:
            - 'excel!Excel.SlicerCollection#load~0:complex'
  - uid: 'excel!Excel.SlicerCollection#load:member(2)'
    summary: <span data-ttu-id="1d332-137">Добавляет в очередь команду для загрузки указанных свойств объекта.</span><span class="sxs-lookup"><span data-stu-id="1d332-137">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="1d332-138">Перед чтением свойств `context.sync()` необходимо вызвать метод.</span><span class="sxs-lookup"><span data-stu-id="1d332-138">You must call `context.sync()` before reading the properties.</span></span>
    isPreview: true
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): Excel.SlicerCollection;'
      return:
        type:
          - 'excel!Excel.SlicerCollection:class'
        description: ''
      parameters:
        - id: propertyNames
          description: '<span data-ttu-id="1d332-139">Строка, разделенная запятыми, или массив строк, указывающий свойства для загрузки.</span><span class="sxs-lookup"><span data-stu-id="1d332-139">A comma-delimited string or an array of strings that specify the properties to load.</span></span>'
          type:
            - 'string | string[]'
  - uid: 'excel!Excel.SlicerCollection#load:member(3)'
    summary: <span data-ttu-id="1d332-140">Добавляет в очередь команду для загрузки указанных свойств объекта.</span><span class="sxs-lookup"><span data-stu-id="1d332-140">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="1d332-141">Перед чтением свойств `context.sync()` необходимо вызвать метод.</span><span class="sxs-lookup"><span data-stu-id="1d332-141">You must call `context.sync()` before reading the properties.</span></span>
    isPreview: true
    name: load(propertyNamesAndPaths)
    fullName: load(propertyNamesAndPaths)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNamesAndPaths?: OfficeExtension.LoadOption): Excel.SlicerCollection;'
      return:
        type:
          - 'excel!Excel.SlicerCollection:class'
        description: ''
      parameters:
        - id: propertyNamesAndPaths
          description: '<span data-ttu-id="1d332-142">`propertyNamesAndPaths.select`— Это строка с разделителями-запятыми, задающая свойства для `propertyNamesAndPaths.expand` загрузки и которая представляет собой строку с разделителями-запятыми, указывающую свойства навигации для загрузки.</span><span class="sxs-lookup"><span data-stu-id="1d332-142">`propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.</span></span>'
          type:
            - 'excel!OfficeExtension.LoadOption:interface'
  - uid: 'excel!Excel.SlicerCollection#toJSON:member(1)'
    summary: '<span data-ttu-id="1d332-143">Переопределяет метод `toJSON()` JavaScript для предоставления более удобного вывода при передаче объекта API`JSON.stringify()`</span><span class="sxs-lookup"><span data-stu-id="1d332-143">Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`</span></span><!-- --><span data-ttu-id="1d332-144">.</span><span class="sxs-lookup"><span data-stu-id="1d332-144"></span></span> <span data-ttu-id="1d332-145">(`JSON.stringify`</span><span class="sxs-lookup"><span data-stu-id="1d332-145"></span></span><!-- --><span data-ttu-id="1d332-146">, в свою очередь, вызывает `toJSON` метод объекта, который передается ему.) В то время как `Excel.SlicerCollection` исходный объект является объектом API, `toJSON` метод возвращает простой объект JavaScript (тип`Excel.Interfaces.SlicerCollectionData`</span><span class="sxs-lookup"><span data-stu-id="1d332-146">, in turn, calls the `toJSON` method of the object that is passed to it.) Whereas the original `Excel.SlicerCollection` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.SlicerCollectionData`</span></span><!-- --><span data-ttu-id="1d332-147">), содержащий массив "Items" с неполноми копиями загруженных свойств из элементов коллекции.</span><span class="sxs-lookup"><span data-stu-id="1d332-147">) that contains an "items" array with shallow copies of any loaded properties from the collection''s items.</span></span>'
    isPreview: true
    name: toJSON()
    fullName: toJSON()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON(): Excel.Interfaces.SlicerCollectionData;'
      return:
        type:
          - 'excel!Excel.Interfaces.SlicerCollectionData:interface'
        description: ''
references:
  - uid: 'excel!OfficeExtension.ClientObject:class'
    name: OfficeExtension.ClientObject
  - uid: 'excel!Excel.Slicer:class'
    name: Excel.Slicer
  - uid: 'excel!Excel.SlicerCollection#add~0:complex'
    name: string | PivotTable | Table
    fullName: string | Excel.PivotTable | Excel.Table
    spec.typeScript:
      - name: 'string | '
        fullName: 'string | '
      - uid: 'excel!Excel.PivotTable:class'
        name: PivotTable
        fullName: Excel.PivotTable
      - name: ' | '
        fullName: ' | '
      - uid: 'excel!Excel.Table:class'
        name: Table
        fullName: Excel.Table
  - uid: 'excel!Excel.SlicerCollection#add~1:complex'
    name: string | PivotField | number | TableColumn
    fullName: string | Excel.PivotField | number | Excel.TableColumn
    spec.typeScript:
      - name: 'string | '
        fullName: 'string | '
      - uid: 'excel!Excel.PivotField:class'
        name: PivotField
        fullName: Excel.PivotField
      - name: ' | number | '
        fullName: ' | number | '
      - uid: 'excel!Excel.TableColumn:class'
        name: TableColumn
        fullName: Excel.TableColumn
  - uid: 'excel!Excel.SlicerCollection#add~2:complex'
    name: string | Worksheet
    fullName: string | Excel.Worksheet
    spec.typeScript:
      - name: 'string | '
        fullName: 'string | '
      - uid: 'excel!Excel.Worksheet:class'
        name: Worksheet
        fullName: Excel.Worksheet
  - uid: 'excel!Excel.RequestContext:class'
    name: RequestContext
  - uid: 'excel!Excel.SlicerCollection#getCount~0:complex'
    name: OfficeExtension.ClientResult<number>
    fullName: OfficeExtension.ClientResult<number>
    spec.typeScript:
      - uid: 'excel!OfficeExtension.ClientResult:class'
        name: OfficeExtension.ClientResult
        fullName: OfficeExtension.ClientResult
      - name: <number>
        fullName: <number>
  - uid: 'excel!Excel.SlicerCollection#items~0:complex'
    name: 'Excel.Slicer[]'
    fullName: 'Excel.Slicer[]'
    spec.typeScript:
      - uid: 'excel!Excel.Slicer:class'
        name: Excel.Slicer
        fullName: Excel.Slicer
      - name: '[]'
        fullName: '[]'
  - uid: 'excel!Excel.SlicerCollection:class'
    name: Excel.SlicerCollection
  - uid: 'excel!Excel.SlicerCollection#load~0:complex'
    name: Excel.Interfaces.SlicerCollectionLoadOptions & Excel.Interfaces.CollectionLoadOptions
    fullName: Excel.Interfaces.SlicerCollectionLoadOptions & Excel.Interfaces.CollectionLoadOptions
    spec.typeScript:
      - uid: 'excel!Excel.Interfaces.SlicerCollectionLoadOptions:interface'
        name: Excel.Interfaces.SlicerCollectionLoadOptions
        fullName: Excel.Interfaces.SlicerCollectionLoadOptions
      - name: ' & '
        fullName: ' & '
      - uid: 'excel!Excel.Interfaces.CollectionLoadOptions:interface'
        name: Excel.Interfaces.CollectionLoadOptions
        fullName: Excel.Interfaces.CollectionLoadOptions
  - uid: 'excel!OfficeExtension.LoadOption:interface'
    name: OfficeExtension.LoadOption
  - uid: 'excel!Excel.Interfaces.SlicerCollectionData:interface'
    name: Excel.Interfaces.SlicerCollectionData