### YamlMime:UniversalReference
ms.openlocfilehash: 76b1a31c920babfd2c2fd2bf8b69a5de07144824
ms.sourcegitcommit: 06eebee5e68d349f78e6bc3bb0ef099fe063cf04
ms.translationtype: MT
ms.contentlocale: ru-RU
ms.lasthandoff: 01/17/2019
ms.locfileid: "28724992"
items:
- uid: excel.Excel.CustomXmlPart
  summary: >-
    <span data-ttu-id="788e3-101">Представляет объект пользовательской XML-части в книге.</span><span class="sxs-lookup"><span data-stu-id="788e3-101">Represents a custom XML part object in a workbook.</span></span>


    <span data-ttu-id="788e3-102">\[[Набор API-Интерфейсов: ExcelApi 1,5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="788e3-102">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: Excel.CustomXmlPart
  fullName: Excel.CustomXmlPart
  langs:
  - typeScript
  type: class
  extends:
  - office.OfficeExtension.ClientObject
  package: excel
  children:
  - excel.Excel.CustomXmlPart.context
  - excel.Excel.CustomXmlPart.delete
  - excel.Excel.CustomXmlPart.getXml
  - excel.Excel.CustomXmlPart.id
  - excel.Excel.CustomXmlPart.load
  - excel.Excel.CustomXmlPart.namespaceUri
  - excel.Excel.CustomXmlPart.setXml
  - excel.Excel.CustomXmlPart.toJSON
- uid: excel.Excel.CustomXmlPart.context
  summary: <span data-ttu-id="788e3-103">Контекста запроса, связанного с объектом.</span><span class="sxs-lookup"><span data-stu-id="788e3-103">The request context associated with the object.</span></span> <span data-ttu-id="788e3-104">Это необходимо добавить в процесс для процесса ведущего приложения Office.</span><span class="sxs-lookup"><span data-stu-id="788e3-104">This connects the add-in's process to the Office host application's process.</span></span>
  name: context
  fullName: context
  langs:
  - typeScript
  type: property
  syntax:
    content: 'context: RequestContext;'
    return:
      type:
      - RequestContext
- uid: excel.Excel.CustomXmlPart.delete
  summary: >-
    <span data-ttu-id="788e3-105">Удаляет пользовательскую XML-часть.</span><span class="sxs-lookup"><span data-stu-id="788e3-105">Deletes the custom XML part.</span></span>


    <span data-ttu-id="788e3-106">\[[Набор API-Интерфейсов: ExcelApi 1,5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="788e3-106">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: delete()
  fullName: delete
  langs:
  - typeScript
  type: method
  syntax:
    content: 'delete(): void;'
    return:
      type:
      - void
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"788e3-107\">Примеры</span><span class=\"sxs-lookup\"><span data-stu-id=\"788e3-107\">Examples</span></span>\n\n```typescript\nawait Excel.run(async (context) => {\n    const settings = context.workbook.settings;\n    const xmlPartIDSetting = settings.getItemOrNullObject(\"ContosoReviewXmlPartId\").load(\"value\");\n    await context.sync();\n\n    if (xmlPartIDSetting.value) {   \n        let customXmlPart = context.workbook.customXmlParts.getItem(xmlPartIDSetting.value);\n        const xmlBlob = customXmlPart.getXml();\n        customXmlPart.delete();\n        customXmlPart = context.workbook.customXmlParts.getItemOrNullObject(xmlPartIDSetting.value);\n\n        await context.sync();\n\n        if (customXmlPart.isNullObject) {\n            $(\"#display-xml\").text(`The XML part with the id ${xmlPartIDSetting.value} has been deleted.`);\n\n            // Delete the unneeded setting too.\n            xmlPartIDSetting.delete();            \n        } else {\n            const readableXml = addLineBreaksToXML(xmlBlob.value);\n            const strangeMessage = `This is strange. The XML part with the id ${xmlPartIDSetting.value} has not been deleted:\\n${readableXml}`\n            $(\"#display-xml\").text(strangeMessage);\n        }\n\n        await context.sync();\n    }\n});\n```"
- uid: excel.Excel.CustomXmlPart.getXml
  summary: >-
    <span data-ttu-id="788e3-108">Получает полное содержимое пользовательской XML-части.</span><span class="sxs-lookup"><span data-stu-id="788e3-108">Gets the custom XML part's full XML content.</span></span>


    <span data-ttu-id="788e3-109">\[[Набор API-Интерфейсов: ExcelApi 1,5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="788e3-109">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getXml()
  fullName: getXml
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getXml(): OfficeExtension.ClientResult<string>;'
    return:
      type:
      - OfficeExtension.ClientResult<string>
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"788e3-110\">Примеры</span><span class=\"sxs-lookup\"><span data-stu-id=\"788e3-110\">Examples</span></span>\n\n```typescript\nawait Excel.run(async (context) => {\n    // You must have the xmlns attribute to populate the \n    // CustomXml.namespaceUri property.\n    const originalXml = \"<Reviewers xmlns='http://schemas.contoso.com/review/1.0'><Reviewer>Juan</Reviewer><Reviewer>Hong</Reviewer><Reviewer>Sally</Reviewer></Reviewers>\";\n    const customXmlPart = context.workbook.customXmlParts.add(originalXml);\n    customXmlPart.load(\"id\");\n    const xmlBlob = customXmlPart.getXml();\n\n    await context.sync();\n\n    const readableXml = addLineBreaksToXML(xmlBlob.value);\n    $(\"#display-xml\").text(readableXml);\n\n    // Store the XML part's ID in a setting.\n    const settings = context.workbook.settings;\n    settings.add(\"ContosoReviewXmlPartId\", customXmlPart.id);\n\n    await context.sync();\n});\n```"
- uid: excel.Excel.CustomXmlPart.id
  summary: >-
    <span data-ttu-id="788e3-p102">Идентификатор пользовательской XML-части. Только для чтения.</span><span class="sxs-lookup"><span data-stu-id="788e3-p102">The custom XML part's ID. Read-only.</span></span>


    <span data-ttu-id="788e3-113">\[[Набор API-Интерфейсов: ExcelApi 1,5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="788e3-113">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: id
  fullName: id
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly id: string;'
    return:
      type:
      - string
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"788e3-114\">Примеры</span><span class=\"sxs-lookup\"><span data-stu-id=\"788e3-114\">Examples</span></span>\n\n```typescript\nawait Excel.run(async (context) => {\n    // You must have the xmlns attribute to populate the \n    // CustomXml.namespaceUri property.\n    const originalXml = \"<Reviewers xmlns='http://schemas.contoso.com/review/1.0'><Reviewer>Juan</Reviewer><Reviewer>Hong</Reviewer><Reviewer>Sally</Reviewer></Reviewers>\";\n    const customXmlPart = context.workbook.customXmlParts.add(originalXml);\n    customXmlPart.load(\"id\");\n    const xmlBlob = customXmlPart.getXml();\n\n    await context.sync();\n\n    const readableXml = addLineBreaksToXML(xmlBlob.value);\n    $(\"#display-xml\").text(readableXml);\n\n    // Store the XML part's ID in a setting.\n    const settings = context.workbook.settings;\n    settings.add(\"ContosoReviewXmlPartId\", customXmlPart.id);\n\n    await context.sync();\n});\n```"
- uid: excel.Excel.CustomXmlPart.load
  summary: <span data-ttu-id="788e3-115">Очереди команды для загрузки указанного свойства объекта.</span><span class="sxs-lookup"><span data-stu-id="788e3-115">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="788e3-116">Перед чтением свойства необходимо вызвать «context.sync()».</span><span class="sxs-lookup"><span data-stu-id="788e3-116">You must call "context.sync()" before reading the properties.</span></span>
  remarks: >-
    <span data-ttu-id="788e3-117">В дополнение к подписи этот метод имеет следующие цифровые подписи.</span><span class="sxs-lookup"><span data-stu-id="788e3-117">In addition to this signature, this method has the following signatures:</span></span>


    <span data-ttu-id="788e3-118">`load(option?: { select?: string; expand?: string; }): Excel.CustomXmlPart`-Option.select — это разделенный запятыми строка, указывающая свойства для загрузки, куда options.expand — это разделенный запятыми строка, указывающая свойства навигации для загрузки.</span><span class="sxs-lookup"><span data-stu-id="788e3-118">`load(option?: { select?: string; expand?: string; }): Excel.CustomXmlPart` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.</span></span>


    <span data-ttu-id="788e3-119">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.CustomXmlPart`-Доступно только на коллекцию типов.</span><span class="sxs-lookup"><span data-stu-id="788e3-119">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.CustomXmlPart` - Only available on collection types.</span></span> <span data-ttu-id="788e3-120">Это похоже на предыдущую.</span><span class="sxs-lookup"><span data-stu-id="788e3-120">It is similar to the preceding signature.</span></span> <span data-ttu-id="788e3-121">Option.Top указывает максимальное число элементов коллекции, которые можно включить в результат.</span><span class="sxs-lookup"><span data-stu-id="788e3-121">Option.top specifies the maximum number of collection items that can be included in the result.</span></span> <span data-ttu-id="788e3-122">Option.Skip указывает количество элементов, которые пропускаются и не включенный в результате.</span><span class="sxs-lookup"><span data-stu-id="788e3-122">Option.skip specifies the number of items that are to be skipped and not included in the result.</span></span> <span data-ttu-id="788e3-123">Если option.top указан, результирующий набор будет запущен процесс после пропускает указанное число элементов.</span><span class="sxs-lookup"><span data-stu-id="788e3-123">If option.top is specified, the result set will start after skipping the specified number of items.</span></span>
  name: load(option)
  fullName: load
  langs:
  - typeScript
  type: method
  syntax:
    content: 'load(option?: string | string[]): Excel.CustomXmlPart;'
    return:
      type:
      - excel.Excel.CustomXmlPart
      description: ''
    parameters:
    - id: option
      description: <span data-ttu-id="788e3-124">Строка, разделенных запятыми или массив строк, задающих свойства для загрузки.</span><span class="sxs-lookup"><span data-stu-id="788e3-124">A comma-delimited string or an array of strings that specify the properties to load.</span></span>
      type:
      - string | string[]
- uid: excel.Excel.CustomXmlPart.namespaceUri
  summary: >-
    <span data-ttu-id="788e3-p105">URI пространства имен пользовательской XML-части. Только для чтения.</span><span class="sxs-lookup"><span data-stu-id="788e3-p105">The custom XML part's namespace URI. Read-only.</span></span>


    <span data-ttu-id="788e3-127">\[[Набор API-Интерфейсов: ExcelApi 1,5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="788e3-127">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: namespaceUri
  fullName: namespaceUri
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly namespaceUri: string;'
    return:
      type:
      - string
- uid: excel.Excel.CustomXmlPart.setXml
  summary: >-
    <span data-ttu-id="788e3-128">Задает полное содержимое пользовательской XML-части.</span><span class="sxs-lookup"><span data-stu-id="788e3-128">Sets the custom XML part's full XML content.</span></span>


    <span data-ttu-id="788e3-129">\[[Набор API-Интерфейсов: ExcelApi 1,5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="788e3-129">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: setXml(xml)
  fullName: setXml
  langs:
  - typeScript
  type: method
  syntax:
    content: 'setXml(xml: string): void;'
    return:
      type:
      - void
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"788e3-130\">Примеры</span><span class=\"sxs-lookup\"><span data-stu-id=\"788e3-130\">Examples</span></span>\n\n```typescript\nawait Excel.run(async (context) => {\n    const settings = context.workbook.settings;\n    const xmlPartIDSetting = settings.getItemOrNullObject(\"ContosoReviewXmlPartId\").load(\"value\");\n    await context.sync();\n\n    if (xmlPartIDSetting.value) {   \n        const customXmlPart = context.workbook.customXmlParts.getItem(xmlPartIDSetting.value);\n\n        // The setXml method does a whole-for-whole replacement \n        // of the entire XML.\n        customXmlPart.setXml(\"<Reviewers xmlns='http://schemas.contoso.com/review/1.0'><Reviewer>John</Reviewer><Reviewer>Hitomi</Reviewer></Reviewers>\");\n        const xmlBlob = customXmlPart.getXml();\n        await context.sync();\n\n        const readableXml = addLineBreaksToXML(xmlBlob.value);\n        $(\"#display-xml\").text(readableXml);\n        await context.sync();\n    }\n});\n```"
    parameters:
    - id: xml
      description: <span data-ttu-id="788e3-131">XML-содержимое части.</span><span class="sxs-lookup"><span data-stu-id="788e3-131">XML content for the part.</span></span>
      type:
      - string
- uid: excel.Excel.CustomXmlPart.toJSON
  summary: <span data-ttu-id="788e3-132">Переопределяет JavaScript `toJSON()` метод, чтобы обеспечить более необходимых результатов при передаче объекта API для `JSON.stringify()` <!-- -->.</span><span class="sxs-lookup"><span data-stu-id="788e3-132">Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`<!-- -->.</span></span> <span data-ttu-id="788e3-133">(`JSON.stringify`<!-- -->, в свою очередь, вызывает `toJSON` метод объекта, который передается в нее.) В то время как исходный объект Excel.CustomXmlPart является объектом API `toJSON` метод возвращает обычный объектов JavaScript (тип `Excel.Interfaces.CustomXmlPartData` <!-- -->), который содержит неполные копии всех загруженных дочерних свойств из исходного объекта.</span><span class="sxs-lookup"><span data-stu-id="788e3-133">(`JSON.stringify`<!-- -->, in turn, calls the `toJSON` method of the object that is passed to it.) Whereas the original Excel.CustomXmlPart object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.CustomXmlPartData`<!-- -->) that contains shallow copies of any loaded child properties from the original object.</span></span>
  name: toJSON()
  fullName: toJSON
  langs:
  - typeScript
  type: method
  syntax:
    content: 'toJSON(): Excel.Interfaces.CustomXmlPartData;'
    return:
      type:
      - excel.Excel.Interfaces.CustomXmlPartData
      description: ''
