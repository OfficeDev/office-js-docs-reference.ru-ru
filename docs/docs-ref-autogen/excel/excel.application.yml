### YamlMime:UniversalReference
ms.openlocfilehash: b3d7ec8e103580a051d09634b95218a93c966bc6
ms.sourcegitcommit: c1149d24b38f20daf9ce690cd0761ec1ceb7333d
ms.translationtype: MT
ms.contentlocale: ru-RU
ms.lasthandoff: 10/17/2018
ms.locfileid: "25583226"
items:
- uid: excel.Excel.Application
  summary: >-
    <span data-ttu-id="b7b8b-101">Представляет приложение Excel, которое управляет книгой.</span><span class="sxs-lookup"><span data-stu-id="b7b8b-101">Represents the Excel application that manages the workbook.</span></span>


    <span data-ttu-id="b7b8b-102">\[[Набор API-Интерфейсов: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="b7b8b-102">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: Excel.Application
  fullName: excel.Excel.Application
  langs:
  - typeScript
  type: class
  extends:
  - OfficeExtension.ClientObject
  package: excel
  children:
  - excel.Excel.Application.calculate
  - excel.Excel.Application.calculationMode
  - excel.Excel.Application.load
  - excel.Excel.Application.suspendApiCalculationUntilNextSync
  - excel.Excel.Application.toJSON
- uid: excel.Excel.Application.calculate
  summary: >-
    <span data-ttu-id="b7b8b-103">Пересчитывает данные во всех открытых в текущий момент книгах Excel.</span><span class="sxs-lookup"><span data-stu-id="b7b8b-103">Recalculate all currently opened workbooks in Excel.</span></span>


    <span data-ttu-id="b7b8b-104">\[[Набор API-Интерфейсов: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="b7b8b-104">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: calculate(calculationType)
  fullName: excel.Excel.Application.calculate
  langs:
  - typeScript
  type: method
  syntax:
    content: 'calculate(calculationType: Excel.CalculationType): void;'
    return:
      type:
      - void
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"b7b8b-105\">Примеры</span><span class=\"sxs-lookup\"><span data-stu-id=\"b7b8b-105\">Examples</span></span>\n\n```javascript\nExcel.run(function (ctx) {\n    ctx.workbook.application.calculate('Full');\n    return ctx.sync();\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
    parameters:
    - id: calculationType
      description: <span data-ttu-id="b7b8b-106">Указывает тип вычислений для использования.</span><span class="sxs-lookup"><span data-stu-id="b7b8b-106">Specifies the calculation type to use.</span></span> <span data-ttu-id="b7b8b-107">Для получения дополнительных сведений в разделе Excel.CalculationType.</span><span class="sxs-lookup"><span data-stu-id="b7b8b-107">See Excel.CalculationType for details.</span></span>
      type:
      - excel.Excel.CalculationType
- uid: excel.Excel.Application.calculationMode
  summary: >-
    <span data-ttu-id="b7b8b-108">Возвращает режим вычисления, используемый в книге, константы в Excel.CalculationMode.</span><span class="sxs-lookup"><span data-stu-id="b7b8b-108">Returns the calculation mode used in the workbook, as defined by the constants in Excel.CalculationMode.</span></span> <span data-ttu-id="b7b8b-109">Возможные значения: `Automatic` <!-- -->, где Excel управляет пересчета; `AutomaticExceptTables` <!-- -->, в котором элементы управления Пересчет в Excel, но не обрабатывает изменения в таблицах; `Manual` <!-- -->, где выполняется расчет запросу пользователя.</span><span class="sxs-lookup"><span data-stu-id="b7b8b-109">Possible values are: `Automatic`<!-- -->, where Excel controls recalculation; `AutomaticExceptTables`<!-- -->, where Excel controls recalculation but ignores changes in tables; `Manual`<!-- -->, where calculation is done when the user requests it.</span></span>


    <span data-ttu-id="b7b8b-110">\[[Набор API-Интерфейсов: ExcelApi 1.1 для get, 1,8 для набора](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="b7b8b-110">\[ [API set: ExcelApi 1.1 for get, 1.8 for set](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: calculationMode
  fullName: excel.Excel.Application.calculationMode
  langs:
  - typeScript
  type: property
  syntax:
    content: 'calculationMode: Excel.CalculationMode | "Automatic" | "AutomaticExceptTables" | "Manual";'
    return:
      type:
      - Excel.CalculationMode | "Automatic" | "AutomaticExceptTables" | "Manual"
- uid: excel.Excel.Application.load
  summary: <span data-ttu-id="b7b8b-111">Очереди команды для загрузки указанного свойства объекта.</span><span class="sxs-lookup"><span data-stu-id="b7b8b-111">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="b7b8b-112">Перед чтением свойства необходимо вызвать «context.sync()».</span><span class="sxs-lookup"><span data-stu-id="b7b8b-112">You must call "context.sync()" before reading the properties.</span></span>
  remarks: >-
    <span data-ttu-id="b7b8b-113">В дополнение к подписи этот метод имеет следующие цифровые подписи.</span><span class="sxs-lookup"><span data-stu-id="b7b8b-113">In addition to this signature, this method has the following signatures:</span></span>


    <span data-ttu-id="b7b8b-114">`load(option?: { select?: string; expand?: string; }): Excel.Application`-Option.select — это разделенный запятыми строка, указывающая свойства для загрузки, куда options.expand — это разделенный запятыми строка, указывающая свойства навигации для загрузки.</span><span class="sxs-lookup"><span data-stu-id="b7b8b-114">`load(option?: { select?: string; expand?: string; }): Excel.Application` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.</span></span>


    <span data-ttu-id="b7b8b-115">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.Application`-Доступно только на коллекцию типов.</span><span class="sxs-lookup"><span data-stu-id="b7b8b-115">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.Application` - Only available on collection types.</span></span> <span data-ttu-id="b7b8b-116">Это похоже на предыдущую.</span><span class="sxs-lookup"><span data-stu-id="b7b8b-116">It is similar to the preceding signature.</span></span> <span data-ttu-id="b7b8b-117">Option.Top указывает максимальное число элементов коллекции, которые можно включить в результат.</span><span class="sxs-lookup"><span data-stu-id="b7b8b-117">Option.top specifies the maximum number of collection items that can be included in the result.</span></span> <span data-ttu-id="b7b8b-118">Option.Skip указывает количество элементов, которые пропускаются и не включенный в результате.</span><span class="sxs-lookup"><span data-stu-id="b7b8b-118">Option.skip specifies the number of items that are to be skipped and not included in the result.</span></span> <span data-ttu-id="b7b8b-119">Если option.top указан, результирующий набор будет запущен процесс после пропускает указанное число элементов.</span><span class="sxs-lookup"><span data-stu-id="b7b8b-119">If option.top is specified, the result set will start after skipping the specified number of items.</span></span>

    #### <a name="examples"></a><span data-ttu-id="b7b8b-120">Примеры</span><span class="sxs-lookup"><span data-stu-id="b7b8b-120">Examples</span></span>


    ```javascript

    Excel.run(function (ctx) {
        var application = ctx.workbook.application;
        application.load('calculationMode');
        return ctx.sync().then(function() {
            console.log(application.calculationMode);
        });
    }).catch(function(error) {
        console.log("Error: " + error);
        if (error instanceof OfficeExtension.Error) {
            console.log("Debug info: " + JSON.stringify(error.debugInfo));
        }
    });

    ```
  name: load(option)
  fullName: excel.Excel.Application.load
  langs:
  - typeScript
  type: method
  syntax:
    content: 'load(option?: string | string[]): Excel.Application;'
    return:
      type:
      - excel.Excel.Application
      description: ''
    parameters:
    - id: option
      description: <span data-ttu-id="b7b8b-121">Строка, разделенных запятыми или массив строк, задающих свойства для загрузки.</span><span class="sxs-lookup"><span data-stu-id="b7b8b-121">A comma-delimited string or an array of strings that specify the properties to load.</span></span>
      type:
      - string | string[]
- uid: excel.Excel.Application.suspendApiCalculationUntilNextSync
  summary: >-
    <span data-ttu-id="b7b8b-p105">Приостанавливает вычисление до вызова следующего "context.sync()". После этого за пересчет книги и распространение всех зависимостей несет ответственность разработчик.</span><span class="sxs-lookup"><span data-stu-id="b7b8b-p105">Suspends calculation until the next "context.sync()" is called. Once set, it is the developer's responsibility to re-calc the workbook, to ensure that any dependencies are propagated.</span></span>


    <span data-ttu-id="b7b8b-124">\[[Набор API-Интерфейсов: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="b7b8b-124">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: suspendApiCalculationUntilNextSync()
  fullName: excel.Excel.Application.suspendApiCalculationUntilNextSync
  langs:
  - typeScript
  type: method
  syntax:
    content: 'suspendApiCalculationUntilNextSync(): void;'
    return:
      type:
      - void
      description: ''
- uid: excel.Excel.Application.toJSON
  name: toJSON()
  fullName: excel.Excel.Application.toJSON
  langs:
  - typeScript
  type: method
  syntax:
    content: 'toJSON(): Excel.Interfaces.ApplicationData;'
    return:
      type:
      - excel.Excel.Interfaces.ApplicationData
      description: ''
