### YamlMime:UniversalReference
ms.openlocfilehash: 8b50189ca68ea14ba53d8ab0f6fd5e62348aefb9
ms.sourcegitcommit: 262b7c417245b7b61a57d53eee33a477a722ca6e
ms.translationtype: MT
ms.contentlocale: ru-RU
ms.lasthandoff: 09/28/2018
ms.locfileid: "24050593"
items:
- uid: excel.Excel.TableCollection
  summary: >-
    <span data-ttu-id="d917d-101">Представляет коллекцию всех таблиц, входящих в состав книги или листа, в зависимости от способа доступа.</span><span class="sxs-lookup"><span data-stu-id="d917d-101">Represents a collection of all the tables that are part of the workbook or worksheet, depending on how it was reached.</span></span>


    <span data-ttu-id="d917d-102">\[[Набор API-Интерфейсов: ExcelApi 1.1](/javascript/office/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d917d-102">\[ [API set: ExcelApi 1.1](/javascript/office/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: Excel.TableCollection
  fullName: excel.Excel.TableCollection
  langs:
  - typeScript
  type: class
  extends:
  - OfficeExtension.ClientObject
  package: excel
  children:
  - excel.Excel.TableCollection.add
  - excel.Excel.TableCollection.count
  - excel.Excel.TableCollection.getCount
  - excel.Excel.TableCollection.getItem
  - excel.Excel.TableCollection.getItemAt
  - excel.Excel.TableCollection.getItemOrNullObject
  - excel.Excel.TableCollection.items
  - excel.Excel.TableCollection.load
  - excel.Excel.TableCollection.onChanged
  - excel.Excel.TableCollection.toJSON
- uid: excel.Excel.TableCollection.add
  summary: >-
    <span data-ttu-id="d917d-p101">Создание таблицы. Объект или исходный адрес диапазона определяет лист, на который будет добавлена таблица. Если добавить таблицу не удается (например, если адрес недействителен или одна таблица будет перекрываться другой), выводится сообщение об ошибке.</span><span class="sxs-lookup"><span data-stu-id="d917d-p101">Create a new table. The range object or source address determines the worksheet under which the table will be added. If the table cannot be added (e.g., because the address is invalid, or the table would overlap with another table), an error will be thrown.</span></span>


    <span data-ttu-id="d917d-106">\[[Набор API-Интерфейсов: ExcelApi 1.1](/javascript/office/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d917d-106">\[ [API set: ExcelApi 1.1](/javascript/office/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: add(address, hasHeaders)
  fullName: excel.Excel.TableCollection.add
  langs:
  - typeScript
  type: method
  syntax:
    content: 'add(address: Range | string, hasHeaders: boolean): Excel.Table;'
    return:
      type:
      - excel.Excel.Table
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"d917d-107\">Примеры</span><span class=\"sxs-lookup\"><span data-stu-id=\"d917d-107\">Examples</span></span>\n\n```javascript\nExcel.run(function (ctx) { \n    var table = ctx.workbook.tables.add('Sheet1!A1:E7', true);\n    table.load('name');\n    return ctx.sync().then(function() {\n        console.log(table.name);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
    parameters:
    - id: address
      description: '<span data-ttu-id="d917d-108">Объект Range или строка адрес или имя диапазона, представляющий источник данных.</span><span class="sxs-lookup"><span data-stu-id="d917d-108">A Range object, or a string address or name of the range representing the data source.</span></span> <span data-ttu-id="d917d-109">Если адрес не содержит имя листа, используется в текущий момент активный лист.</span><span class="sxs-lookup"><span data-stu-id="d917d-109">If the address does not contain a sheet name, the currently-active sheet is used.</span></span> <span data-ttu-id="d917d-110">\[Набор API-интерфейсов: ExcelApi 1.1 / 1,3.</span><span class="sxs-lookup"><span data-stu-id="d917d-110">\[Api set: ExcelApi 1.1 / 1.3.</span></span> <span data-ttu-id="d917d-111">До 1,3 ExcelApi этот параметр должен быть строкой.</span><span class="sxs-lookup"><span data-stu-id="d917d-111">Prior to ExcelApi 1.3, this parameter must be a string.</span></span> <span data-ttu-id="d917d-112">Начиная с версии Excel Api 1.3, этот параметр может быть объект Range или строку.\]</span><span class="sxs-lookup"><span data-stu-id="d917d-112">Starting with Excel Api 1.3, this parameter may be a Range object or a string.\]</span></span>'
      type:
      - Range | string
    - id: hasHeaders
      description: <span data-ttu-id="d917d-p103">Логическое значение, указывающее, имеют ли импортируемые данные метки столбцов. Если источник не содержит заголовков (например, если этому свойству присвоено значение false), Excel автоматически создаст заголовок и сдвинет данные на одну строку вниз.</span><span class="sxs-lookup"><span data-stu-id="d917d-p103">Boolean value that indicates whether the data being imported has column labels. If the source does not contain headers (i.e,. when this property set to false), Excel will automatically generate header shifting the data down by one row.</span></span>
      type:
      - boolean
- uid: excel.Excel.TableCollection.count
  summary: >-
    <span data-ttu-id="d917d-p104">Возвращает количество таблиц в книге. Только для чтения.</span><span class="sxs-lookup"><span data-stu-id="d917d-p104">Returns the number of tables in the workbook. Read-only.</span></span>


    <span data-ttu-id="d917d-118">\[[Набор API-Интерфейсов: ExcelApi 1.1](/javascript/office/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d917d-118">\[ [API set: ExcelApi 1.1](/javascript/office/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: count
  fullName: excel.Excel.TableCollection.count
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly count: number;'
    return:
      type:
      - number
- uid: excel.Excel.TableCollection.getCount
  summary: >-
    <span data-ttu-id="d917d-119">Получает количество таблиц в коллекции.</span><span class="sxs-lookup"><span data-stu-id="d917d-119">Gets the number of tables in the collection.</span></span>


    <span data-ttu-id="d917d-120">\[[Набор API-Интерфейсов: ExcelApi 1.4](/javascript/office/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d917d-120">\[ [API set: ExcelApi 1.4](/javascript/office/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getCount()
  fullName: excel.Excel.TableCollection.getCount
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getCount(): OfficeExtension.ClientResult<number>;'
    return:
      type:
      - OfficeExtension.ClientResult<number>
      description: ''
- uid: excel.Excel.TableCollection.getItem
  summary: >-
    <span data-ttu-id="d917d-121">Получает таблицу по имени или ИД.</span><span class="sxs-lookup"><span data-stu-id="d917d-121">Gets a table by Name or ID.</span></span>


    <span data-ttu-id="d917d-122">\[[Набор API-Интерфейсов: ExcelApi 1.1](/javascript/office/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d917d-122">\[ [API set: ExcelApi 1.1](/javascript/office/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getItem(key)
  fullName: excel.Excel.TableCollection.getItem
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getItem(key: string): Excel.Table;'
    return:
      type:
      - excel.Excel.Table
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"d917d-123\">Примеры</span><span class=\"sxs-lookup\"><span data-stu-id=\"d917d-123\">Examples</span></span>\n\n```javascript\nExcel.run(function (ctx) { \n    var tableName = 'Table1';\n    var table = ctx.workbook.tables.getItem(tableName);\n    table.load('name');\n    return ctx.sync().then(function() {\n            console.log(table.name);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```\n```javascript\nExcel.run(function (ctx) { \n    var table = ctx.workbook.tables.getItemAt(0);\n    table.load('name');\n    return ctx.sync().then(function() {\n            console.log(table.name);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
    parameters:
    - id: key
      description: <span data-ttu-id="d917d-124">Имя или ИД получаемой таблицы.</span><span class="sxs-lookup"><span data-stu-id="d917d-124">Name or ID of the table to be retrieved.</span></span>
      type:
      - string
- uid: excel.Excel.TableCollection.getItemAt
  summary: >-
    <span data-ttu-id="d917d-125">Получает таблицу на основании ее позиции в коллекции.</span><span class="sxs-lookup"><span data-stu-id="d917d-125">Gets a table based on its position in the collection.</span></span>


    <span data-ttu-id="d917d-126">\[[Набор API-Интерфейсов: ExcelApi 1.1](/javascript/office/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d917d-126">\[ [API set: ExcelApi 1.1](/javascript/office/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getItemAt(index)
  fullName: excel.Excel.TableCollection.getItemAt
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getItemAt(index: number): Excel.Table;'
    return:
      type:
      - excel.Excel.Table
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"d917d-127\">Примеры</span><span class=\"sxs-lookup\"><span data-stu-id=\"d917d-127\">Examples</span></span>\n\n```javascript\nExcel.run(function (ctx) { \n    var table = ctx.workbook.tables.getItemAt(0);\n    table.load('name');\n    return ctx.sync().then(function() {\n            console.log(table.name);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
    parameters:
    - id: index
      description: <span data-ttu-id="d917d-p105">Значение индекса получаемого объекта. Используется нулевой индекс.</span><span class="sxs-lookup"><span data-stu-id="d917d-p105">Index value of the object to be retrieved. Zero-indexed.</span></span>
      type:
      - number
- uid: excel.Excel.TableCollection.getItemOrNullObject
  summary: >-
    <span data-ttu-id="d917d-p106">Получает таблицу по имени или ИД. Если таблица не существует, возвращает пустой объект.</span><span class="sxs-lookup"><span data-stu-id="d917d-p106">Gets a table by Name or ID. If the table does not exist, will return a null object.</span></span>


    <span data-ttu-id="d917d-132">\[[Набор API-Интерфейсов: ExcelApi 1.4](/javascript/office/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d917d-132">\[ [API set: ExcelApi 1.4](/javascript/office/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getItemOrNullObject(key)
  fullName: excel.Excel.TableCollection.getItemOrNullObject
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getItemOrNullObject(key: string): Excel.Table;'
    return:
      type:
      - excel.Excel.Table
      description: ''
    parameters:
    - id: key
      description: <span data-ttu-id="d917d-133">Имя или ИД получаемой таблицы.</span><span class="sxs-lookup"><span data-stu-id="d917d-133">Name or ID of the table to be retrieved.</span></span>
      type:
      - string
- uid: excel.Excel.TableCollection.items
  summary: <span data-ttu-id="d917d-134">Получает загруженных дочерних элементов в этом семействе.</span><span class="sxs-lookup"><span data-stu-id="d917d-134">Gets the loaded child items in this collection.</span></span>
  name: items
  fullName: excel.Excel.TableCollection.items
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly items: Excel.Table[];'
    return:
      type:
      - Excel.Table[]
- uid: excel.Excel.TableCollection.load
  summary: <span data-ttu-id="d917d-135">Очереди команды для загрузки указанного свойства объекта.</span><span class="sxs-lookup"><span data-stu-id="d917d-135">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="d917d-136">Перед чтением свойства необходимо вызвать «context.sync()».</span><span class="sxs-lookup"><span data-stu-id="d917d-136">You must call "context.sync()" before reading the properties.</span></span>
  remarks: "<span data-ttu-id=\"d917d-137\">В дополнение к подписи этот метод имеет следующие цифровые подписи.</span><span class=\"sxs-lookup\"><span data-stu-id=\"d917d-137\">In addition to this signature, this method has the following signatures:</span></span>\n\n<span data-ttu-id=\"d917d-138\">`load(option?: { select?: string; expand?: string; }): Excel.TableCollection`-Option.select — это разделенный запятыми строка, указывающая свойства для загрузки, куда options.expand — это разделенный запятыми строка, указывающая свойства навигации для загрузки.</span><span class=\"sxs-lookup\"><span data-stu-id=\"d917d-138\">`load(option?: { select?: string; expand?: string; }): Excel.TableCollection` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.</span></span>\n\n<span data-ttu-id=\"d917d-139\">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.TableCollection`-Доступно только на коллекцию типов.</span><span class=\"sxs-lookup\"><span data-stu-id=\"d917d-139\">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.TableCollection` - Only available on collection types.</span></span> <span data-ttu-id=\"d917d-140\">Это похоже на предыдущую.</span><span class=\"sxs-lookup\"><span data-stu-id=\"d917d-140\">It is similar to the preceding signature.</span></span> <span data-ttu-id=\"d917d-141\">Option.Top указывает максимальное число элементов коллекции, которые можно включить в результат.</span><span class=\"sxs-lookup\"><span data-stu-id=\"d917d-141\">Option.top specifies the maximum number of collection items that can be included in the result.</span></span> <span data-ttu-id=\"d917d-142\">Option.Skip указывает количество элементов, которые пропускаются и не включенный в результате.</span><span class=\"sxs-lookup\"><span data-stu-id=\"d917d-142\">Option.skip specifies the number of items that are to be skipped and not included in the result.</span></span> <span data-ttu-id=\"d917d-143\">Если option.top указан, результирующий набор будет запущен процесс после пропускает указанное число элементов.</span><span class=\"sxs-lookup\"><span data-stu-id=\"d917d-143\">If option.top is specified, the result set will start after skipping the specified number of items.</span></span>\n#### <a name=\"examples\"></a><span data-ttu-id=\"d917d-144\">Примеры</span><span class=\"sxs-lookup\"><span data-stu-id=\"d917d-144\">Examples</span></span>\n\n```javascript\nExcel.run(function (ctx) { \n    var tables = ctx.workbook.tables;\n    tables.load();\n    return ctx.sync().then(function() {\n        console.log(\"tables Count: \" + tables.count);\n        for (var i = 0; i < tables.items.length; i++)\n        {\n            console.log(tables.items[i].name);\n        }\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```\n```javascript\n// Get the number of tables\nExcel.run(function (ctx) { \n    var tables = ctx.workbook.tables;\n    tables.load('count');\n    return ctx.sync().then(function() {\n        console.log(tables.count);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
  name: load(option)
  fullName: excel.Excel.TableCollection.load
  langs:
  - typeScript
  type: method
  syntax:
    content: 'load(option?: string | string[]): Excel.TableCollection;'
    return:
      type:
      - excel.Excel.TableCollection
      description: ''
    parameters:
    - id: option
      description: <span data-ttu-id="d917d-145">Строка, разделенных запятыми или массив строк, задающих свойства для загрузки.</span><span class="sxs-lookup"><span data-stu-id="d917d-145">A comma-delimited string or an array of strings that specify the properties to load.</span></span>
      type:
      - string | string[]
- uid: excel.Excel.TableCollection.onChanged
  summary: >-
    <span data-ttu-id="d917d-146">Возникает при изменении данных на любой из таблиц книги или листа.</span><span class="sxs-lookup"><span data-stu-id="d917d-146">Occurs when data changes on any table in a workbook, or a worksheet.</span></span>


    <span data-ttu-id="d917d-147">\[[Набор API-Интерфейсов: ExcelApi 1.7](/javascript/office/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d917d-147">\[ [API set: ExcelApi 1.7](/javascript/office/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: onChanged
  fullName: excel.Excel.TableCollection.onChanged
  langs:
  - typeScript
  type: event
  syntax:
    content: 'readonly onChanged: OfficeExtension.EventHandlers<Excel.TableChangedEventArgs>;'
    return:
      type:
      - OfficeExtension.EventHandlers<Excel.TableChangedEventArgs>
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"d917d-148\">Примеры</span><span class=\"sxs-lookup\"><span data-stu-id=\"d917d-148\">Examples</span></span>\n\n```typescript\nawait Excel.run(async (context) => {\n    let tables = context.workbook.tables;\n    tables.onChanged.add(onChange);\n\n    await context.sync();\n\n    OfficeHelpers.UI.notify(\"A handler has been registered for the table collection onChanged event\",\n        \"Try changing cell values in the tables, and watch the console output.\");\n});\n```"
- uid: excel.Excel.TableCollection.toJSON
  name: toJSON()
  fullName: excel.Excel.TableCollection.toJSON
  langs:
  - typeScript
  type: method
  syntax:
    content: 'toJSON(): Excel.Interfaces.TableCollectionData;'
    return:
      type:
      - excel.Excel.Interfaces.TableCollectionData
      description: ''
