### YamlMime:UniversalReference
ms.openlocfilehash: 8b50189ca68ea14ba53d8ab0f6fd5e62348aefb9
ms.sourcegitcommit: 262b7c417245b7b61a57d53eee33a477a722ca6e
ms.translationtype: MT
ms.contentlocale: ru-RU
ms.lasthandoff: 09/28/2018
ms.locfileid: "24050593"
items:
- uid: excel.Excel.TableCollection
  summary: >-
    Представляет коллекцию всех таблиц, входящих в состав книги или листа, в зависимости от способа доступа.


    \[[Набор API-Интерфейсов: ExcelApi 1.1](/javascript/office/requirement-sets/excel-api-requirement-sets)\]
  name: Excel.TableCollection
  fullName: excel.Excel.TableCollection
  langs:
  - typeScript
  type: class
  extends:
  - OfficeExtension.ClientObject
  package: excel
  children:
  - excel.Excel.TableCollection.add
  - excel.Excel.TableCollection.count
  - excel.Excel.TableCollection.getCount
  - excel.Excel.TableCollection.getItem
  - excel.Excel.TableCollection.getItemAt
  - excel.Excel.TableCollection.getItemOrNullObject
  - excel.Excel.TableCollection.items
  - excel.Excel.TableCollection.load
  - excel.Excel.TableCollection.onChanged
  - excel.Excel.TableCollection.toJSON
- uid: excel.Excel.TableCollection.add
  summary: >-
    Создание таблицы. Объект или исходный адрес диапазона определяет лист, на который будет добавлена таблица. Если добавить таблицу не удается (например, если адрес недействителен или одна таблица будет перекрываться другой), выводится сообщение об ошибке.


    \[[Набор API-Интерфейсов: ExcelApi 1.1](/javascript/office/requirement-sets/excel-api-requirement-sets)\]
  name: add(address, hasHeaders)
  fullName: excel.Excel.TableCollection.add
  langs:
  - typeScript
  type: method
  syntax:
    content: 'add(address: Range | string, hasHeaders: boolean): Excel.Table;'
    return:
      type:
      - excel.Excel.Table
      description: "\n#### <a name=\"examples\"></a>Примеры\n\n```javascript\nExcel.run(function (ctx) { \n    var table = ctx.workbook.tables.add('Sheet1!A1:E7', true);\n    table.load('name');\n    return ctx.sync().then(function() {\n        console.log(table.name);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
    parameters:
    - id: address
      description: 'Объект Range или строка адрес или имя диапазона, представляющий источник данных. Если адрес не содержит имя листа, используется в текущий момент активный лист. \[Набор API-интерфейсов: ExcelApi 1.1 / 1,3. До 1,3 ExcelApi этот параметр должен быть строкой. Начиная с версии Excel Api 1.3, этот параметр может быть объект Range или строку.\]'
      type:
      - Range | string
    - id: hasHeaders
      description: Логическое значение, указывающее, имеют ли импортируемые данные метки столбцов. Если источник не содержит заголовков (например, если этому свойству присвоено значение false), Excel автоматически создаст заголовок и сдвинет данные на одну строку вниз.
      type:
      - boolean
- uid: excel.Excel.TableCollection.count
  summary: >-
    Возвращает количество таблиц в книге. Только для чтения.


    \[[Набор API-Интерфейсов: ExcelApi 1.1](/javascript/office/requirement-sets/excel-api-requirement-sets)\]
  name: count
  fullName: excel.Excel.TableCollection.count
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly count: number;'
    return:
      type:
      - number
- uid: excel.Excel.TableCollection.getCount
  summary: >-
    Получает количество таблиц в коллекции.


    \[[Набор API-Интерфейсов: ExcelApi 1.4](/javascript/office/requirement-sets/excel-api-requirement-sets)\]
  name: getCount()
  fullName: excel.Excel.TableCollection.getCount
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getCount(): OfficeExtension.ClientResult<number>;'
    return:
      type:
      - OfficeExtension.ClientResult<number>
      description: ''
- uid: excel.Excel.TableCollection.getItem
  summary: >-
    Получает таблицу по имени или ИД.


    \[[Набор API-Интерфейсов: ExcelApi 1.1](/javascript/office/requirement-sets/excel-api-requirement-sets)\]
  name: getItem(key)
  fullName: excel.Excel.TableCollection.getItem
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getItem(key: string): Excel.Table;'
    return:
      type:
      - excel.Excel.Table
      description: "\n#### <a name=\"examples\"></a>Примеры\n\n```javascript\nExcel.run(function (ctx) { \n    var tableName = 'Table1';\n    var table = ctx.workbook.tables.getItem(tableName);\n    table.load('name');\n    return ctx.sync().then(function() {\n            console.log(table.name);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```\n```javascript\nExcel.run(function (ctx) { \n    var table = ctx.workbook.tables.getItemAt(0);\n    table.load('name');\n    return ctx.sync().then(function() {\n            console.log(table.name);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
    parameters:
    - id: key
      description: Имя или ИД получаемой таблицы.
      type:
      - string
- uid: excel.Excel.TableCollection.getItemAt
  summary: >-
    Получает таблицу на основании ее позиции в коллекции.


    \[[Набор API-Интерфейсов: ExcelApi 1.1](/javascript/office/requirement-sets/excel-api-requirement-sets)\]
  name: getItemAt(index)
  fullName: excel.Excel.TableCollection.getItemAt
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getItemAt(index: number): Excel.Table;'
    return:
      type:
      - excel.Excel.Table
      description: "\n#### <a name=\"examples\"></a>Примеры\n\n```javascript\nExcel.run(function (ctx) { \n    var table = ctx.workbook.tables.getItemAt(0);\n    table.load('name');\n    return ctx.sync().then(function() {\n            console.log(table.name);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
    parameters:
    - id: index
      description: Значение индекса получаемого объекта. Используется нулевой индекс.
      type:
      - number
- uid: excel.Excel.TableCollection.getItemOrNullObject
  summary: >-
    Получает таблицу по имени или ИД. Если таблица не существует, возвращает пустой объект.


    \[[Набор API-Интерфейсов: ExcelApi 1.4](/javascript/office/requirement-sets/excel-api-requirement-sets)\]
  name: getItemOrNullObject(key)
  fullName: excel.Excel.TableCollection.getItemOrNullObject
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getItemOrNullObject(key: string): Excel.Table;'
    return:
      type:
      - excel.Excel.Table
      description: ''
    parameters:
    - id: key
      description: Имя или ИД получаемой таблицы.
      type:
      - string
- uid: excel.Excel.TableCollection.items
  summary: Получает загруженных дочерних элементов в этом семействе.
  name: items
  fullName: excel.Excel.TableCollection.items
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly items: Excel.Table[];'
    return:
      type:
      - Excel.Table[]
- uid: excel.Excel.TableCollection.load
  summary: Очереди команды для загрузки указанного свойства объекта. Перед чтением свойства необходимо вызвать «context.sync()».
  remarks: "В дополнение к подписи этот метод имеет следующие цифровые подписи.\n\n`load(option?: { select?: string; expand?: string; }): Excel.TableCollection`-Option.select — это разделенный запятыми строка, указывающая свойства для загрузки, куда options.expand — это разделенный запятыми строка, указывающая свойства навигации для загрузки.\n\n`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.TableCollection`-Доступно только на коллекцию типов. Это похоже на предыдущую. Option.Top указывает максимальное число элементов коллекции, которые можно включить в результат. Option.Skip указывает количество элементов, которые пропускаются и не включенный в результате. Если option.top указан, результирующий набор будет запущен процесс после пропускает указанное число элементов.\n#### <a name=\"examples\"></a>Примеры\n\n```javascript\nExcel.run(function (ctx) { \n    var tables = ctx.workbook.tables;\n    tables.load();\n    return ctx.sync().then(function() {\n        console.log(\"tables Count: \" + tables.count);\n        for (var i = 0; i < tables.items.length; i++)\n        {\n            console.log(tables.items[i].name);\n        }\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```\n```javascript\n// Get the number of tables\nExcel.run(function (ctx) { \n    var tables = ctx.workbook.tables;\n    tables.load('count');\n    return ctx.sync().then(function() {\n        console.log(tables.count);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
  name: load(option)
  fullName: excel.Excel.TableCollection.load
  langs:
  - typeScript
  type: method
  syntax:
    content: 'load(option?: string | string[]): Excel.TableCollection;'
    return:
      type:
      - excel.Excel.TableCollection
      description: ''
    parameters:
    - id: option
      description: Строка, разделенных запятыми или массив строк, задающих свойства для загрузки.
      type:
      - string | string[]
- uid: excel.Excel.TableCollection.onChanged
  summary: >-
    Возникает при изменении данных на любой из таблиц книги или листа.


    \[[Набор API-Интерфейсов: ExcelApi 1.7](/javascript/office/requirement-sets/excel-api-requirement-sets)\]
  name: onChanged
  fullName: excel.Excel.TableCollection.onChanged
  langs:
  - typeScript
  type: event
  syntax:
    content: 'readonly onChanged: OfficeExtension.EventHandlers<Excel.TableChangedEventArgs>;'
    return:
      type:
      - OfficeExtension.EventHandlers<Excel.TableChangedEventArgs>
      description: "\n#### <a name=\"examples\"></a>Примеры\n\n```typescript\nawait Excel.run(async (context) => {\n    let tables = context.workbook.tables;\n    tables.onChanged.add(onChange);\n\n    await context.sync();\n\n    OfficeHelpers.UI.notify(\"A handler has been registered for the table collection onChanged event\",\n        \"Try changing cell values in the tables, and watch the console output.\");\n});\n```"
- uid: excel.Excel.TableCollection.toJSON
  name: toJSON()
  fullName: excel.Excel.TableCollection.toJSON
  langs:
  - typeScript
  type: method
  syntax:
    content: 'toJSON(): Excel.Interfaces.TableCollectionData;'
    return:
      type:
      - excel.Excel.Interfaces.TableCollectionData
      description: ''
