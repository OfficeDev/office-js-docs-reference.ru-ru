### YamlMime:UniversalReference
ms.openlocfilehash: 29f893e7a9d9910ad5ca771d0c02fa3a9ced72a3
ms.sourcegitcommit: 31847d2ea6be78b8f473dfbfb0a575fdecd877be
ms.translationtype: MT
ms.contentlocale: ru-RU
ms.lasthandoff: 11/13/2018
ms.locfileid: "26298206"
items:
- uid: outlook.Office.NotificationMessages
  summary: >-
    Объект NotificationMessages возвращается в качестве свойства notificationMessages элемента.


    \[[Набор API-Интерфейсов: почтовый ящик 1.3](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    <table><tr><td>[Минимальный уровень разрешений](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadItem</td></tr>


    <tr><td>[Применимый режим Outlook](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Создание или чтение</td></tr></table>
  name: Office.NotificationMessages
  fullName: Office.NotificationMessages
  langs:
  - typeScript
  type: interface
  package: outlook
  children:
  - outlook.Office.NotificationMessages.addAsync
  - outlook.Office.NotificationMessages.getAllAsync
  - outlook.Office.NotificationMessages.removeAsync
  - outlook.Office.NotificationMessages.replaceAsync
- uid: outlook.Office.NotificationMessages.addAsync
  summary: >-
    Добавляет уведомление к элементу.


    Для каждого сообщения можно задать не более 5 уведомлений. Если задать больше, будет возвращена ошибка NumberOfNotificationMessagesExceeded.
  remarks: >-
    <table><tr><td>[Минимальный уровень разрешений](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadItem</td></tr>


    <tr><td>[Применимый режим Outlook](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Создание или чтение</td></tr></table>


    В дополнение к подписи этот метод также содержит следующие подписи:


    `addAsync(key: string, JSONmessage: NotificationMessageDetails): void;`


    `addAsync(key: string, JSONmessage: NotificationMessageDetails, options: Office.AsyncContextOptions): void;`


    `addAsync(key: string, JSONmessage: NotificationMessageDetails, callback: (result: AsyncResult<void>) => void): void;`

    #### <a name="examples"></a>Примеры


    ```javascript

    // Create three notifications, each with a different key

    Office.context.mailbox.item.notificationMessages.addAsync("progress", {
        type: "progressIndicator",
        message : "An add-in is processing this message."
    });

    Office.context.mailbox.item.notificationMessages.addAsync("information", {
        type: "informationalMessage",
        message : "The add-in processed this message.",
        icon : "iconid",
        persistent: false
    });

    Office.context.mailbox.item.notificationMessages.addAsync("error", {
        type: "errorMessage",
        message : "The add-in failed to process this message."
    });

    ```
  name: addAsync(key, JSONmessage, options, callback)
  fullName: addAsync
  langs:
  - typeScript
  type: method
  syntax:
    content: 'addAsync(key: string, JSONmessage: NotificationMessageDetails, options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<void>) => void): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: key
      description: Указанный разработчиком ключ, используемый для ссылки на это сообщение уведомления. Разработчики могут использовать его для изменения этого сообщения в дальнейшем. Его длина не должна превышать 32 символа.
      type:
      - string
    - id: JSONmessage
      description: Объект JSON, который содержит сообщение уведомления, добавляемого к элементу. Содержит объект NotificationMessageDetails.
      type:
      - NotificationMessageDetails
    - id: options
      description: 'Необязательно указывать. Объектный литерал, содержащий одно или несколько из указанных ниже свойств. asyncContext: разработчики могут предоставлять любого объекта, их необходимо получить доступ в метод обратного вызова.'
      type:
      - office.Office.AsyncContextOptions
    - id: callback
      description: >-
        Необязательно указывать. После завершения работы метода, функции, переданной в параметре обратного вызова вызывается с один параметр типа Office.AsyncResult.


        \[Набор API-интерфейсов: почтовый ящик 1.3\]
      type:
      - '(result: AsyncResult<void>) => void'
- uid: outlook.Office.NotificationMessages.getAllAsync
  summary: >-
    Возвращает все ключи и сообщения для элемента.


    \[[Набор API-Интерфейсов: почтовый ящик 1.3](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    <table><tr><td>[Минимальный уровень разрешений](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadItem</td></tr>


    <tr><td>[Применимый режим Outlook](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Создание или чтение</td></tr></table>


    В дополнение к подписи этот метод также имеет следующую подпись:


    `getAllAsync(callback: (result: AsyncResult<Office.NotificationMessageDetails[]>) => void): void;`

    #### <a name="examples"></a>Примеры


    ```javascript

    // Get all notifications

    Office.context.mailbox.item.notificationMessages.getAllAsync(function (asyncResult) {
        if (asyncResult.status != "failed") {
            Office.context.mailbox.item.notificationMessages.replaceAsync( "notifications", {
                type: "informationalMessage",
                message : "Found " + asyncResult.value.length + " notifications.",
                icon : "iconid",
                persistent: false
            });
        }
    });

    ```
  name: getAllAsync(options, callback)
  fullName: getAllAsync
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getAllAsync(options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<Office.NotificationMessageDetails[]>) => void): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: options
      description: 'Необязательно указывать. Объектный литерал, содержащий одно или несколько из указанных ниже свойств. asyncContext: разработчики могут предоставлять любого объекта, их необходимо получить доступ в метод обратного вызова.'
      type:
      - office.Office.AsyncContextOptions
    - id: callback
      description: Необязательно указывать. После завершения работы метода, функции, переданной в параметре обратного вызова вызывается с один параметр типа Office.AsyncResult. `value` Свойства результата — это массив объектов NotificationMessageDetails.
      type:
      - '(result: AsyncResult<Office.NotificationMessageDetails[]>) => void'
- uid: outlook.Office.NotificationMessages.removeAsync
  summary: >-
    Удаляет сообщение уведомления для элемента.


    \[[Набор API-Интерфейсов: почтовый ящик 1.3](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    <table><tr><td>[Минимальный уровень разрешений](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadItem</td></tr>


    <tr><td>[Применимый режим Outlook](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Создание или чтение</td></tr></table>


    В дополнение к подписи этот метод также имеет следующие цифровые подписи.


    `removeAsync(key: string): void;`


    `removeAsync(key: string, options: Office.AsyncContextOptions): void;`


    `removeAsync(key: string, callback: (result: AsyncResult<void>) => void): void;`

    #### <a name="examples"></a>Примеры


    ```javascript

    // Remove a notification

    Office.context.mailbox.item.notificationMessages.removeAsync("progress");

    ```
  name: removeAsync(key, options, callback)
  fullName: removeAsync
  langs:
  - typeScript
  type: method
  syntax:
    content: 'removeAsync(key: string, options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<void>) => void): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: key
      description: Ключ для удаления сообщения уведомления.
      type:
      - string
    - id: options
      description: 'Необязательно указывать. Объектный литерал, содержащий одно или несколько из указанных ниже свойств. asyncContext: разработчики могут предоставлять любого объекта, их необходимо получить доступ в метод обратного вызова.'
      type:
      - office.Office.AsyncContextOptions
    - id: callback
      description: Необязательно указывать. После завершения работы метода, функции, переданной в параметре обратного вызова вызывается с один параметр типа Office.AsyncResult.
      type:
      - '(result: AsyncResult<void>) => void'
- uid: outlook.Office.NotificationMessages.replaceAsync
  summary: >-
    Заменяет сообщение уведомления с заданным ключом на другое сообщение.


    Если сообщение уведомления с указанным ключом не существует, replaceAsync добавит уведомление.


    \[[Набор API-Интерфейсов: почтовый ящик 1.3](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    <table><tr><td>[Минимальный уровень разрешений](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadItem</td></tr>


    <tr><td>[Применимый режим Outlook](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Создание или чтение</td></tr></table>


    В дополнение к подписи этот метод также имеет следующие цифровые подписи.


    `replaceAsync(key: string, JSONmessage: NotificationMessageDetails): void;`


    `replaceAsync(key: string, JSONmessage: NotificationMessageDetails, options: Office.AsyncContextOptions): void;`


    `replaceAsync(key: string, JSONmessage: NotificationMessageDetails, callback: (result: AsyncResult<void>) => void): void;`

    #### <a name="examples"></a>Примеры


    ```javascript

    // Replace a notification with an informational notification

    Office.context.mailbox.item.notificationMessages.replaceAsync("progress", {
        type: "informationalMessage",
        message : "The message was processed successfully.",
        icon : "iconid",
        persistent: false
    });

    ```
  name: replaceAsync(key, JSONmessage, options, callback)
  fullName: replaceAsync
  langs:
  - typeScript
  type: method
  syntax:
    content: 'replaceAsync(key: string, JSONmessage: NotificationMessageDetails, options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<void>) => void): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: key
      description: Ключ для заменяемого сообщения уведомления. Максимальная длина — 32 символа.
      type:
      - string
    - id: JSONmessage
      description: Объект JSON, который содержит новое сообщение уведомления для замены существующей сообщения. Содержит объект NotificationMessageDetails.
      type:
      - NotificationMessageDetails
    - id: options
      description: 'Необязательно указывать. Объектный литерал, содержащий одно или несколько из указанных ниже свойств. asyncContext: разработчики могут предоставлять любого объекта, их необходимо получить доступ в метод обратного вызова.'
      type:
      - office.Office.AsyncContextOptions
    - id: callback
      description: Необязательно указывать. После завершения работы метода, функции, переданной в параметре обратного вызова вызывается с один параметр типа Office.AsyncResult.
      type:
      - '(result: AsyncResult<void>) => void'
