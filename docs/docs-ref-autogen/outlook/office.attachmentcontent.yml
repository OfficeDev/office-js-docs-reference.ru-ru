### YamlMime:UniversalReference
items:
  - uid: outlook.Office.AttachmentContent
    summary: |-
      <span data-ttu-id="592ea-101">Представляет содержимое вложения для элемента сообщения или встречи.</span><span class="sxs-lookup"><span data-stu-id="592ea-101">Represents the content of an attachment on a message or appointment item.</span></span>

      <span data-ttu-id="592ea-102">\[[Набор API: предварительный просмотр почтового ящика](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="592ea-102">\[ [API set: Mailbox Preview](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets) \]</span></span>
    remarks: |-
      <span data-ttu-id="592ea-103">\*\* [Минимальный уровень](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->разрешений\*\*: ReadItem</span><span class="sxs-lookup"><span data-stu-id="592ea-103">**[Minimum permission level](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->**: ReadItem</span></span>

      <span data-ttu-id="592ea-104">\*\* [Соответствующий режим](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->Outlook\*\*: "создание" или "чтение"</span><span class="sxs-lookup"><span data-stu-id="592ea-104">**[Applicable Outlook mode](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->**: Compose or Read</span></span>
    isPreview: true
    name: Office.AttachmentContent
    fullName: Office.AttachmentContent
    langs:
      - typeScript
    type: interface
    package: outlook
    children:
      - outlook.Office.AttachmentContent.content
      - outlook.Office.AttachmentContent.format
  - uid: outlook.Office.AttachmentContent.content
    summary: <span data-ttu-id="592ea-105">Содержимое вложения в виде строки.</span><span class="sxs-lookup"><span data-stu-id="592ea-105">The content of an attachment as a string.</span></span>
    isPreview: true
    name: content
    fullName: content
    langs:
      - typeScript
    type: property
    syntax:
      content: 'content: string;'
      return:
        type:
          - string
  - uid: outlook.Office.AttachmentContent.format
    summary: |-
      <span data-ttu-id="592ea-106">Формат строки, используемый для содержимого вложения.</span><span class="sxs-lookup"><span data-stu-id="592ea-106">The string format to use for an attachment's content.</span></span>

      <span data-ttu-id="592ea-107">Для вложений файлов форматирование представляет собой строку в кодировке Base64.</span><span class="sxs-lookup"><span data-stu-id="592ea-107">For file attachments, the formatting is a base64-encoded string.</span></span>

      <span data-ttu-id="592ea-108">Для вложений элементов, представляющих сообщения, форматирование представляет собой строку, представляющую форматированный EML-файл.</span><span class="sxs-lookup"><span data-stu-id="592ea-108">For item attachments that represent messages, the formatting is a string representing an .eml formatted file.</span></span>

      <span data-ttu-id="592ea-109">Для вложений элементов, представляющих элементы календаря, форматирование представляет собой строку, представляющую файл iCalendar.</span><span class="sxs-lookup"><span data-stu-id="592ea-109">For item attachments that represent calendar items, the formatting is a string representing an .icalendar file.</span></span>

      <span data-ttu-id="592ea-110">Для облачных вложений форматирование является строкой URL-адреса.</span><span class="sxs-lookup"><span data-stu-id="592ea-110">For cloud attachments, the formatting is a URL string.</span></span>
    isPreview: true
    name: format
    fullName: format
    langs:
      - typeScript
    type: property
    syntax:
      content: 'format: MailboxEnums.AttachmentContentFormat | string;'
      return:
        type:
          - MailboxEnums.AttachmentContentFormat | string
        description: |-


          #### <a name="examples"></a><span data-ttu-id="592ea-111">Примеры</span><span class="sxs-lookup"><span data-stu-id="592ea-111">Examples</span></span>

          ```javascript
          var item = Office.context.mailbox.item;
          var listOfAttachments = [];
          item.getAttachmentsAsync(callback);

          function callback(result) {
              if (result.value.length > 0) {
                  for (i = 0 ; i < result.value.length ; i++) {
                      var options = {asyncContext: {type: result.value[i].attachmentType}};
                      getAttachmentContentAsync(result.value[i].id, options, handleAttachmentsCallback);
                  }
              }
          }

          function handleAttachmentsCallback(result) {
              // Parse string to be a url, an .eml file, a base64-encoded string, or an .icalendar file.
              if (result.format === Office.MailboxEnums.AttachmentContentFormat.Base64) {
                  // Handle file attachment.
              } else if (result.format === Office.MailboxEnums.AttachmentContentFormat.Eml) {
                  // Handle email item attachment.
              } else if (result.format === Office.MailboxEnums.AttachmentContentFormat.ICalendar) {
                  // Handle .icalender attachment.
              } else if (result.format === Office.MailboxEnums.AttachmentContentFormat.Url) {
                  // Handle cloud attachment.
              } else {
                  // Handle attachment formats that are not supported.
              }
          }
          ```