### YamlMime:UniversalReference
items:
  - uid: 'outlook!Office.MessageCompose:interface'
    summary: |-
      Режим создания сообщения для [Office. Context. Mailbox. Item](xref:outlook!Office.Item:interface)<!-- -->.

      **Важно!** это внутренний объект Outlook, который не предоставляется напрямую через существующие интерфейсы. Вы должны рассматривать этот режим как`Office.context.mailbox.item`<!-- -->. Для получения дополнительных сведений обратитесь к странице [объектной модели](https://docs.microsoft.com/office/dev/add-ins/reference/objectmodel/preview-requirement-set/office.context.mailbox.item) .

      Родительские интерфейсы:

      - [итемкомпосе](xref:outlook!Office.ItemCompose:interface)

      - [Сообщение](xref:outlook!Office.Message:interface)
    name: Office.MessageCompose
    fullName: Office.MessageCompose
    langs:
      - typeScript
    type: interface
    extends:
      - 'outlook!Office.Message:interface'
      - 'outlook!Office.ItemCompose:interface'
    package: outlook!
    children:
      - 'outlook!Office.MessageCompose#addFileAttachmentAsync:member(1)'
      - 'outlook!Office.MessageCompose#addFileAttachmentAsync:member(2)'
      - 'outlook!Office.MessageCompose#addFileAttachmentFromBase64Async:member(1)'
      - 'outlook!Office.MessageCompose#addFileAttachmentFromBase64Async:member(2)'
      - 'outlook!Office.MessageCompose#addHandlerAsync:member(1)'
      - 'outlook!Office.MessageCompose#addHandlerAsync:member(2)'
      - 'outlook!Office.MessageCompose#addItemAttachmentAsync:member(1)'
      - 'outlook!Office.MessageCompose#addItemAttachmentAsync:member(2)'
      - 'outlook!Office.MessageCompose#bcc:member'
      - 'outlook!Office.MessageCompose#body:member'
      - 'outlook!Office.MessageCompose#categories:member'
      - 'outlook!Office.MessageCompose#cc:member'
      - 'outlook!Office.MessageCompose#close:member(1)'
      - 'outlook!Office.MessageCompose#conversationId:member'
      - 'outlook!Office.MessageCompose#disableClientSignatureAsync:member(1)'
      - 'outlook!Office.MessageCompose#disableClientSignatureAsync:member(2)'
      - 'outlook!Office.MessageCompose#from:member'
      - 'outlook!Office.MessageCompose#getAttachmentContentAsync:member(1)'
      - 'outlook!Office.MessageCompose#getAttachmentContentAsync:member(2)'
      - 'outlook!Office.MessageCompose#getAttachmentsAsync:member(1)'
      - 'outlook!Office.MessageCompose#getAttachmentsAsync:member(2)'
      - 'outlook!Office.MessageCompose#getComposeTypeAsync:member(1)'
      - 'outlook!Office.MessageCompose#getComposeTypeAsync:member(2)'
      - 'outlook!Office.MessageCompose#getInitializationContextAsync:member(1)'
      - 'outlook!Office.MessageCompose#getInitializationContextAsync:member(2)'
      - 'outlook!Office.MessageCompose#getItemIdAsync:member(1)'
      - 'outlook!Office.MessageCompose#getItemIdAsync:member(2)'
      - 'outlook!Office.MessageCompose#getSelectedDataAsync:member(1)'
      - 'outlook!Office.MessageCompose#getSelectedDataAsync:member(2)'
      - 'outlook!Office.MessageCompose#getSharedPropertiesAsync:member(1)'
      - 'outlook!Office.MessageCompose#getSharedPropertiesAsync:member(2)'
      - 'outlook!Office.MessageCompose#internetHeaders:member'
      - 'outlook!Office.MessageCompose#isClientSignatureEnabledAsync:member(1)'
      - 'outlook!Office.MessageCompose#isClientSignatureEnabledAsync:member(2)'
      - 'outlook!Office.MessageCompose#itemType:member'
      - 'outlook!Office.MessageCompose#loadCustomPropertiesAsync:member(1)'
      - 'outlook!Office.MessageCompose#notificationMessages:member'
      - 'outlook!Office.MessageCompose#removeAttachmentAsync:member(1)'
      - 'outlook!Office.MessageCompose#removeAttachmentAsync:member(2)'
      - 'outlook!Office.MessageCompose#removeHandlerAsync:member(1)'
      - 'outlook!Office.MessageCompose#removeHandlerAsync:member(2)'
      - 'outlook!Office.MessageCompose#saveAsync:member(1)'
      - 'outlook!Office.MessageCompose#saveAsync:member(2)'
      - 'outlook!Office.MessageCompose#seriesId:member'
      - 'outlook!Office.MessageCompose#setSelectedDataAsync:member(1)'
      - 'outlook!Office.MessageCompose#setSelectedDataAsync:member(2)'
      - 'outlook!Office.MessageCompose#subject:member'
      - 'outlook!Office.MessageCompose#to:member'
  - uid: 'outlook!Office.MessageCompose#addFileAttachmentAsync:member(1)'
    summary: |-
      Добавляет файл в сообщение или встречу в качестве вложения.

      Метод `addFileAttachmentAsync` передает файл по указанному универсальному коду ресурса (URI) и вкладывает его в элемент в форме создания.

      Идентификатор можно использовать с методом `removeAttachmentAsync`, чтобы удалить вложение, добавленное во время текущего сеанса.

      **Важно!** в последних сборках Outlook в Windows возникла ошибка, которая ошибочно добавляет `Authorization: Bearer` заголовок к этому действию (независимо от того, используется ли этот API или пользовательский интерфейс Outlook). Чтобы обойти эту проблему, вы можете попробовать использовать API, который `addFileAttachmentFromBase64` появился в наборе требований 1,8.

      \[[Набор API: Mailbox 1,1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      ** [Минимальный уровень](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- --> разрешений**:`ReadWriteItem`

      ** [Соответствующий режим](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- --> Outlook**: создание сообщения

      **Ошибки**:

      - `AttachmentSizeExceeded`<!-- -->: Вложение больше, чем разрешено.

      - `FileTypeNotSupported`<!-- -->: Вложение имеет недопустимое расширение.

      - `NumberOfAttachmentsExceeded`<!-- -->: Сообщение или встреча содержит слишком много вложений.

      #### <a name="examples"></a>Примеры

      ```javascript
      function callback(result) {
          if (result.error) {
              console.log(result.error);
          } else {
              console.log("Attachment added");
          }
      }

      function addAttachment() {
          // The values in asyncContext can be accessed in the callback.
          var options = { 'asyncContext': { var1: 1, var2: 2 } };

          var attachmentURL = "https://contoso.com/rtm/icon.png";
          Office.context.mailbox.item.addFileAttachmentAsync(attachmentURL, attachmentURL, options, callback);
      }
      ```
      ```javascript
      // The following example adds an image file as an inline attachment and
      // references the attachment in the message body.
      Office.context.mailbox.item.addFileAttachmentAsync(
          "http://i.imgur.com/WJXklif.png",
          "cute_bird.png",
          {
              isInline: true
          },
          function (asyncResult) {
              Office.context.mailbox.item.body.setAsync(
                  "<p>Here's a cute bird!</p><img src='cid:cute_bird.png'>",
                  {
                      "coercionType": "html"
                  },
                  function (asyncResult) {
                      // Do something here.
                  });
          });
      ```
      ```javascript
      // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/40-attachments/attachments-compose.yaml
      var attachmentUrl = $("#attachmentUrl").val();
      Office.context.mailbox.item.addFileAttachmentAsync(
          attachmentUrl,
          getFileName(attachmentUrl),
          { "asyncContext" : { var1: 1, var2: true } },
          function(result) { console.log(result); });
      ```
    name: 'addFileAttachmentAsync(uri, attachmentName, options, callback)'
    fullName: 'addFileAttachmentAsync(uri, attachmentName, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addFileAttachmentAsync(uri: string, attachmentName: string, options?: Office.AsyncContextOptions & { isInline: boolean }, callback?: (asyncResult: Office.AsyncResult<string>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: uri
          description: "Универсальный код ресурса (URI), представляющий расположение файла, который нужно вложить в сообщение или встречу. Максимальная длина\_— 2048 символов."
          type:
            - string
        - id: attachmentName
          description: "Имя вложения, которое отображается при передаче вложения. Максимальная длина\_— 255 символов."
          type:
            - string
        - id: options
          description: 'Необязательное. Объектный литерал, содержащий одно или несколько из указанных ниже свойств. `asyncContext`<!-- -->: Разработчики могут предоставить любой объект, к которому необходимо получить доступ, в методе обратного вызова. `isInline`<!-- -->: При значении true указывает, что вложение будет отображаться встроенным в тексте сообщения и не должно отображаться в списке вложений.'
          type:
            - 'outlook!Office.MessageCompose#addFileAttachmentAsync~0:complex'
        - id: callback
          description: 'Необязательное. После выполнения метода функция, переданная в `callback` параметре, вызывается с помощью одного параметра типа`Office.AsyncResult`<!-- -->. После успешного выполнения идентификатор вложения будет представлен в свойстве `asyncResult.value`. Если добавить вложение не удастся, объект `asyncResult` будет содержать объект `Error` с описанием ошибки.'
          type:
            - 'outlook!Office.MessageCompose#addFileAttachmentAsync~1:complex'
  - uid: 'outlook!Office.MessageCompose#addFileAttachmentAsync:member(2)'
    summary: |-
      Добавляет файл в сообщение или встречу в качестве вложения.

      Метод `addFileAttachmentAsync` передает файл по указанному универсальному коду ресурса (URI) и вкладывает его в элемент в форме создания.

      Идентификатор можно использовать с методом `removeAttachmentAsync`, чтобы удалить вложение, добавленное во время текущего сеанса.

      **Важно!** в последних сборках Outlook в Windows возникла ошибка, которая ошибочно добавляет `Authorization: Bearer` заголовок к этому действию (независимо от того, используется ли этот API или пользовательский интерфейс Outlook). Чтобы обойти эту проблему, вы можете попробовать использовать API, который `addFileAttachmentFromBase64` появился в наборе требований 1,8.

      \[[Набор API: Mailbox 1,1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      ** [Минимальный уровень](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- --> разрешений**:`ReadWriteItem`

      ** [Соответствующий режим](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- --> Outlook**: создание сообщения

      **Ошибки**:

      - `AttachmentSizeExceeded`<!-- -->: Вложение больше, чем разрешено.

      - `FileTypeNotSupported`<!-- -->: Вложение имеет недопустимое расширение.

      - `NumberOfAttachmentsExceeded`<!-- -->: Сообщение или встреча содержит слишком много вложений.
    name: 'addFileAttachmentAsync(uri, attachmentName, callback)'
    fullName: 'addFileAttachmentAsync(uri, attachmentName, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addFileAttachmentAsync(uri: string, attachmentName: string, callback?: (asyncResult: Office.AsyncResult<string>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: uri
          description: "Универсальный код ресурса (URI), представляющий расположение файла, который нужно вложить в сообщение или встречу. Максимальная длина\_— 2048 символов."
          type:
            - string
        - id: attachmentName
          description: "Имя вложения, которое отображается при передаче вложения. Максимальная длина\_— 255 символов."
          type:
            - string
        - id: callback
          description: 'Необязательное. После выполнения метода функция, переданная в параметре callback, вызывается с помощью одного параметра типа`Office.AsyncResult`<!-- -->. После успешного выполнения идентификатор вложения будет представлен в свойстве `asyncResult.value`. Если добавить вложение не удастся, объект `asyncResult` будет содержать объект `Error` с описанием ошибки.'
          type:
            - 'outlook!Office.MessageCompose#addFileAttachmentAsync~2:complex'
  - uid: 'outlook!Office.MessageCompose#addFileAttachmentFromBase64Async:member(1)'
    summary: |-
      Добавляет файл в сообщение или встречу в качестве вложения.

      `addFileAttachmentFromBase64Async`Метод передает файл из кодировки Base64 и вкладывает его в элемент в форме создания. Этот метод возвращает идентификатор вложения в `asyncResult.value` объекте.

      Идентификатор можно использовать с методом `removeAttachmentAsync`, чтобы удалить вложение, добавленное во время текущего сеанса.

      **Note**: Если вы используете API URL-адресов данных (например,`readAsDataURL`<!-- -->) необходимо удалить префикс URL-адреса данных, а затем отправить остальную строку в этот API. Например, если полная строка представлена`data:image/svg+xml;base64,<rest of base64 string>`<!-- -->, Remove`data:image/svg+xml;base64,`<!-- -->.

      \[[Набор API: Mailbox 1,8](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      ** [Минимальный уровень](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- --> разрешений**:`ReadWriteItem`

      ** [Соответствующий режим](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- --> Outlook**: создание сообщения

      **Ошибки**:

      - `AttachmentSizeExceeded`<!-- -->: Вложение больше, чем разрешено.

      - `FileTypeNotSupported`<!-- -->: Вложение имеет недопустимое расширение.

      - `NumberOfAttachmentsExceeded`<!-- -->: Сообщение или встреча содержит слишком много вложений.

      #### <a name="examples"></a>Примеры

      ```javascript
      // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/40-attachments/attachments-compose.yaml
      base64String = "iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAACXBIWXMAAAsSAAALEgHS3X78AAACRUlEQVRYw82XzXHbMBCFP2F8tzsQc8Ixyh0zoiuIXIGdCsxUYKqC0B04FdiuwMoM7mGOOIXqQGoAymXhgSX+itJM9kIRFLAP+3YXD5Pdbscx5oxaAIW8Ztr6l2PWmQwF4IyaieP53qdfAqQ8CwBn1JU4vpWhrbxXQA5MZfynANmcDIAzKgcy4FKGXsVJFf3nLgKyBQptfT4KQMRz2N0fcbxqmRMDWXflx0VPnrdArq0vekQ1Dv0UeHZGNebHhwjU8AzwKM43RyZnbAf58Q6ghudeWd0Aus0+5EcMIIRi3beua0D3Nm39BEAx3i7HTK4DEBJn5YxKOnaRA5+ErpMBWMpzDvx1RuXCcxOISlufAjfC7zgAsqsvUvMAD0ApPaEtGi9AIlUzKgJo60tt/SyKRkzLrAXERluf7W1gOICWaMyB386oooOWsIHvXbSoHuUSFovtHqicUVnH3EJoeT0aQEf5/XBGlc6otIOWBXAtPeZkAIJ9Bt6cUU9tZautX2nrk3MACHYr1ZKProKRtDw4o8pzAPjWo+NtpXTTvoteDDg8noDAcwbcRedAkGdFXyk2GEDcegVAFp2gyVDHjRQ4o6q2smoqtR5Hd+qMqtoALCWUUymr1m43QMZfOaMK4C0SrMsDANJ2E5FNcbdbjHC+ENl+H0myJFbLtaq4Rt8dyPBYRQV1E40nMv9rl7xrOw3DGb+Whcqu3i/OM6CUOWvgRlufNmnLYy4m77uJI7AXtdNcTDrU71LEyv7v01/N/ovL6bmu5/8A1tNWZldH0W4AAAAASUVORK5CYII=";
      Office.context.mailbox.item.addFileAttachmentFromBase64Async(
          base64String,
          "logo.png",
          { isInline: false },
          function(result) { console.log(result); });
      ```
      ```javascript
      // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/99-preview-apis/work-with-client-signatures.yaml
      // Set the signature for the current item with inline image.
      var modIcon1Base64 = "iVBORw0KGgoAAAANSUhEUgAAABwAAAAcCAYAAAByDd+UAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAA2ZpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADw/eHBhY2tldCBiZWdpbj0i77u/IiBpZD0iVzVNME1wQ2VoaUh6cmVTek5UY3prYzlkIj8+IDx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IkFkb2JlIFhNUCBDb3JlIDUuMC1jMDYxIDY0LjE0MDk0OSwgMjAxMC8xMi8wNy0xMDo1NzowMSAgICAgICAgIj4gPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4gPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIgeG1sbnM6eG1wTU09Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9tbS8iIHhtbG5zOnN0UmVmPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvc1R5cGUvUmVzb3VyY2VSZWYjIiB4bWxuczp4bXA9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC8iIHhtcE1NOk9yaWdpbmFsRG9jdW1lbnRJRD0ieG1wLmRpZDpDRDMxMDg1MjBCNDZFMTExODE2MkM1RUI2M0M4MDYxRCIgeG1wTU06RG9jdW1lbnRJRD0ieG1wLmRpZDpFMTUxQjgyRjQ2MEQxMUUxODlFMkQwNTYzQ0YwMTUxMiIgeG1wTU06SW5zdGFuY2VJRD0ieG1wLmlpZDpFMTUxQjgyRTQ2MEQxMUUxODlFMkQwNTYzQ0YwMTUxMiIgeG1wOkNyZWF0b3JUb29sPSJBZG9iZSBQaG90b3Nob3AgQ1M1LjEgV2luZG93cyI+IDx4bXBNTTpEZXJpdmVkRnJvbSBzdFJlZjppbnN0YW5jZUlEPSJ4bXAuaWlkOkQxMzEwODUyMEI0NkUxMTE4MTYyQzVFQjYzQzgwNjFEIiBzdFJlZjpkb2N1bWVudElEPSJ4bXAuZGlkOkNEMzEwODUyMEI0NkUxMTE4MTYyQzVFQjYzQzgwNjFEIi8+IDwvcmRmOkRlc2NyaXB0aW9uPiA8L3JkZjpSREY+IDwveDp4bXBtZXRhPiA8P3hwYWNrZXQgZW5kPSJyIj8+uC/WfAAAAehJREFUeNpilCzfwEAEkAbiECA2A2J1IOaHin8E4ptAfBaIVwLxU0IGMRKw0B6IW4DYhoE4cASIK6E0VsCEQ1wUiNcB8QESLGOAqj0MxBuhZhBloS4QnwHiQAbygR/UDF1CFupCXSjHQDmQg5qli8tCUBBsQUoQ1AD8UDNFsVk4n0o+w+bT+egWglKjNymmeGhLkqLcG2oHAwtUoIuQDj5OVgZPLUmwRe5aEmAxqYqNpFgKssOcCeplM0KqdST5GfpDDRm0JfkYrj3/SE7QguyQY4ImYYLgCtAS10kHGMw6dzNsv/qC7OwCClJXYlR++v6b4er3j5QmIFcmaNlIL6AOslCIjhYKMTHQGTBBqxh6gXcgC6/R0cKbIAv30dHCfaAKGJTxHxJSqS3Fz9DkowNmywpyMcgA8fF7b8D8VWcfM6w8+4gYC+VB+RCk8hSh0gaUD4/dewvlvUWRe/z+GzGWgex4BGtiOAHxXhoHpzMoSGHZAhSPW2lo2VZYWkHOh4nEtLrIAE+hZmNUwK+B2BOIv1PRsu9QM1/jatNcBtVZ0IREKXgENesyoVYbzNIdFFi2A5tl+NqlL6BB4QBNzsSCU1A9nlAzMAALAQMOQl0qB23qWwKxIlIrDBQ394H4OBCvISYqAAIMACVibHDqsO7zAAAAAElFTkSuQmCC";
      Office.context.mailbox.item.addFileAttachmentFromBase64Async(
        modIcon1Base64,
        "myImage.png",
        { isInline: true },
        function(result) {
          if (result.status == Office.AsyncResultStatus.Succeeded) {
            var signature = $("#signature").val() + "<img src='cid:myImage.png'>";
            console.log(`Setting signature to "${signature}".`);
            // Important: setSignatureAsync is currently in preview.
            Office.context.mailbox.item.body.setSignatureAsync(
              signature,
              { coercionType: "html" },
              function(asyncResult) {
                console.log(`setSignatureAsync: ${asyncResult.status}`);
              }
            );
          } else {
            console.error(`addFileAttachmentFromBase64Async: ${result.error}`);
          }
        }
      );
      ```
    name: 'addFileAttachmentFromBase64Async(base64File, attachmentName, options, callback)'
    fullName: 'addFileAttachmentFromBase64Async(base64File, attachmentName, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addFileAttachmentFromBase64Async(base64File: string, attachmentName: string, options?: Office.AsyncContextOptions & { isInline: boolean }, callback?: (asyncResult: Office.AsyncResult<string>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: base64File
          description: 'Содержимое изображения или файла в кодировке Base64, которое добавляется в сообщение электронной почты или событие.'
          type:
            - string
        - id: attachmentName
          description: "Имя вложения, которое отображается при передаче вложения. Максимальная длина\_— 255 символов."
          type:
            - string
        - id: options
          description: 'Необязательное. Объектный литерал, содержащий одно или несколько из указанных ниже свойств. `asyncContext`<!-- -->: Разработчики могут предоставить любой объект, к которому необходимо получить доступ, в методе обратного вызова. `isInline`<!-- -->: Если значение равно true, то вложение будет отображаться встроенным в текст сообщения и не должно отображаться в списке вложений.'
          type:
            - 'outlook!Office.MessageCompose#addFileAttachmentFromBase64Async~0:complex'
        - id: callback
          description: 'Необязательное. После выполнения метода функция, переданная в `callback` параметре, вызывается с помощью одного параметра типа Office. asyncResult. После успешного выполнения идентификатор вложения будет представлен в свойстве `asyncResult.value`. Если добавить вложение не удастся, объект `asyncResult` будет содержать объект `Error` с описанием ошибки.'
          type:
            - 'outlook!Office.MessageCompose#addFileAttachmentFromBase64Async~1:complex'
  - uid: 'outlook!Office.MessageCompose#addFileAttachmentFromBase64Async:member(2)'
    summary: |-
      Добавляет файл в сообщение или встречу в качестве вложения.

      `addFileAttachmentFromBase64Async`Метод передает файл из кодировки Base64 и вкладывает его в элемент в форме создания. Этот метод возвращает идентификатор вложения в `asyncResult.value` объекте.

      Идентификатор можно использовать с методом `removeAttachmentAsync`, чтобы удалить вложение, добавленное во время текущего сеанса.

      **Note**: Если вы используете API URL-адресов данных (например,`readAsDataURL`<!-- -->) необходимо удалить префикс URL-адреса данных, а затем отправить остальную строку в этот API. Например, если полная строка представлена`data:image/svg+xml;base64,<rest of base64 string>`<!-- -->, Remove`data:image/svg+xml;base64,`<!-- -->.

      \[[Набор API: Mailbox 1,8](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      ** [Минимальный уровень](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- --> разрешений**:`ReadWriteItem`

      ** [Соответствующий режим](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- --> Outlook**: создание сообщения

      **Ошибки**:

      - `AttachmentSizeExceeded`<!-- -->: Вложение больше, чем разрешено.

      - `FileTypeNotSupported`<!-- -->: Вложение имеет недопустимое расширение.

      - `NumberOfAttachmentsExceeded`<!-- -->: Сообщение или встреча содержит слишком много вложений.
    name: 'addFileAttachmentFromBase64Async(base64File, attachmentName, callback)'
    fullName: 'addFileAttachmentFromBase64Async(base64File, attachmentName, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addFileAttachmentFromBase64Async(base64File: string, attachmentName: string, callback?: (asyncResult: Office.AsyncResult<string>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: base64File
          description: 'Содержимое изображения или файла в кодировке Base64, которое добавляется в сообщение электронной почты или событие.'
          type:
            - string
        - id: attachmentName
          description: "Имя вложения, которое отображается при передаче вложения. Максимальная длина\_— 255 символов."
          type:
            - string
        - id: callback
          description: 'Необязательное. После выполнения метода функция, переданная в `callback` параметре, вызывается с помощью одного параметра типа Office. asyncResult. После успешного выполнения идентификатор вложения будет представлен в свойстве `asyncResult.value`. Если добавить вложение не удастся, объект `asyncResult` будет содержать объект `Error` с описанием ошибки.'
          type:
            - 'outlook!Office.MessageCompose#addFileAttachmentFromBase64Async~2:complex'
  - uid: 'outlook!Office.MessageCompose#addHandlerAsync:member(1)'
    summary: |-
      Добавляет обработчик для поддерживаемого события. **Note**: события доступны только в области задач.

      Обратитесь к [разделу события](https://docs.microsoft.com/office/dev/add-ins/reference/objectmodel/preview-requirement-set/office.context.mailbox.item#events) объектной модели элемента для поддерживаемых событий.

      \[[Набор API: Mailbox 1,7](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      ** [Минимальный уровень](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- --> разрешений**:`ReadItem`

      ** [Соответствующий режим](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- --> Outlook**: создание сообщения
    name: 'addHandlerAsync(eventType, handler, options, callback)'
    fullName: 'addHandlerAsync(eventType, handler, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addHandlerAsync(eventType: Office.EventType | string, handler: any, options?: Office.AsyncContextOptions, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: eventType
          description: 'Событие, которое должно вызвать обработчик.'
          type:
            - 'outlook!Office.MessageCompose#addHandlerAsync~0:complex'
        - id: handler
          description: 'Функция для обработки события. Функция должна принимать один параметр, представляющий собой объектный литерал. Свойство Type для параметра будет сопоставляться `eventType` с параметром, переданным`addHandlerAsync`<!-- -->.'
          type:
            - any
        - id: options
          description: 'Необязательное. Объектный литерал, содержащий одно или несколько из указанных ниже свойств. `asyncContext`<!-- -->: Разработчики могут предоставить любой объект, к которому необходимо получить доступ, в методе обратного вызова.'
          type:
            - 'office!Office.AsyncContextOptions:interface'
        - id: callback
          description: 'Необязательное. После выполнения метода функция, переданная в `callback` параметр, вызывается с помощью одного параметра,`asyncResult`<!-- -->, представляющий собой `Office.AsyncResult` объект.'
          type:
            - 'outlook!Office.MessageCompose#addHandlerAsync~1:complex'
  - uid: 'outlook!Office.MessageCompose#addHandlerAsync:member(2)'
    summary: |-
      Добавляет обработчик для поддерживаемого события. **Note**: события доступны только в области задач.

      Обратитесь к [разделу события](https://docs.microsoft.com/office/dev/add-ins/reference/objectmodel/preview-requirement-set/office.context.mailbox.item#events) объектной модели элемента для поддерживаемых событий.

      \[[Набор API: Mailbox 1,7](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      ** [Минимальный уровень](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- --> разрешений**:`ReadItem`

      ** [Соответствующий режим](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- --> Outlook**: создание сообщения

      #### <a name="examples"></a>Примеры

      ```javascript
      function myHandlerFunction(eventarg) {
          if (eventarg.attachmentStatus === Office.MailboxEnums.AttachmentStatus.Added) {
              var attachment = eventarg.attachmentDetails;
              console.log("Event Fired and Attachment Added!");
              getAttachmentContentAsync(attachment.id, options, callback);
          }
      }

      Office.context.mailbox.item.addHandlerAsync(Office.EventType.AttachmentsChanged, myHandlerFunction, myCallback);
      ```
    name: 'addHandlerAsync(eventType, handler, callback)'
    fullName: 'addHandlerAsync(eventType, handler, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addHandlerAsync(eventType: Office.EventType | string, handler: any, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: eventType
          description: 'Событие, которое должно вызвать обработчик.'
          type:
            - 'outlook!Office.MessageCompose#addHandlerAsync~2:complex'
        - id: handler
          description: 'Функция для обработки события. Функция должна принимать один параметр, представляющий собой объектный литерал. Свойство Type для параметра будет сопоставляться `eventType` с параметром, переданным`addHandlerAsync`<!-- -->.'
          type:
            - any
        - id: callback
          description: 'Необязательное. После выполнения метода функция, переданная в `callback` параметр, вызывается с помощью одного параметра,`asyncResult`<!-- -->, представляющий собой `Office.AsyncResult` объект.'
          type:
            - 'outlook!Office.MessageCompose#addHandlerAsync~3:complex'
  - uid: 'outlook!Office.MessageCompose#addItemAttachmentAsync:member(1)'
    summary: |-
      Добавляет к сообщению элемент Exchange, например сообщение, в виде вложения.

      С помощью метода `addItemAttachmentAsync` можно в элемент формы создания вложить элемент с указанным идентификатором Exchange. Если указан метод обратного вызова, метод вызывается с помощью одного параметра,`asyncResult`<!-- -->, который содержит либо идентификатор вложения, либо код, указывающий на ошибки, возникшие при присоединении элемента. При необходимости можно использовать параметр options для передачи сведений о состоянии в метод обратного вызова.

      Идентификатор можно использовать с методом `removeAttachmentAsync`, чтобы удалить вложение, добавленное во время текущего сеанса.

      Если ваша надстройка Office выполняется в Outlook в Интернете, метод `addItemAttachmentAsync` обеспечивает вложение элементов в элементы, отличные от редактируемого. Однако это действие не рекомендуется выполнять, так как оно не поддерживается.

      \[[Набор API: Mailbox 1,1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      ** [Минимальный уровень](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- --> разрешений**:`ReadWriteItem`

      ** [Соответствующий режим](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- --> Outlook**: создание сообщения

      **Ошибки**:

      - `NumberOfAttachmentsExceeded`<!-- -->: Сообщение или встреча содержит слишком много вложений.

      #### <a name="examples"></a>Примеры

      ```javascript
      // The following example adds an existing Outlook item as an attachment
      // with the name `My Attachment`.
      function callback(result) {
          if (result.error) {
              console.log(result.error);
          } else {
              console.log("Attachment added");
          }
      }

      function addAttachment() {
          // EWS ID of item to attach (shortened for readability).
          var itemId = "AAMkADI1...AAA=";

          // The values in asyncContext can be accessed in the callback.
          var options = { 'asyncContext': { var1: 1, var2: 2 } };

          Office.context.mailbox.item.addItemAttachmentAsync(itemId, "My Attachment", options, callback);
      }
      ```
      ```javascript
      // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/40-attachments/attachments-compose.yaml
      var attachmentItemId = $("#attachmentItemId").val();
      Office.context.mailbox.item.addItemAttachmentAsync(
          attachmentItemId,
          "My attachment",
          { "asyncContext" : { var3: 3, var4: false } },
          function(result) { console.log(result); });
      ```
    name: 'addItemAttachmentAsync(itemId, attachmentName, options, callback)'
    fullName: 'addItemAttachmentAsync(itemId, attachmentName, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addItemAttachmentAsync(itemId: any, attachmentName: string, options?: Office.AsyncContextOptions, callback?: (asyncResult: Office.AsyncResult<string>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: itemId
          description: "Идентификатор Exchange для вкладываемого элемента. Максимальная длина\_— 100 символов."
          type:
            - any
        - id: attachmentName
          description: "Имя вложения, которое отображается при передаче вложения. Максимальная длина\_— 255 символов."
          type:
            - string
        - id: options
          description: 'Необязательное. Объектный литерал, содержащий одно или несколько из указанных ниже свойств. `asyncContext`<!-- -->: Разработчики могут предоставить любой объект, к которому необходимо получить доступ, в методе обратного вызова.'
          type:
            - 'office!Office.AsyncContextOptions:interface'
        - id: callback
          description: 'Необязательное. После выполнения метода функция, переданная в `callback` параметре, вызывается с помощью одного параметра типа`Office.AsyncResult`<!-- -->. После успешного выполнения идентификатор вложения будет представлен в свойстве `asyncResult.value`. Если добавить вложение не удастся, объект `asyncResult` будет содержать объект `Error` с описанием ошибки.'
          type:
            - 'outlook!Office.MessageCompose#addItemAttachmentAsync~0:complex'
  - uid: 'outlook!Office.MessageCompose#addItemAttachmentAsync:member(2)'
    summary: |-
      Добавляет к сообщению элемент Exchange, например сообщение, в виде вложения.

      С помощью метода `addItemAttachmentAsync` можно в элемент формы создания вложить элемент с указанным идентификатором Exchange. Если указан метод обратного вызова, метод вызывается с помощью одного параметра,`asyncResult`<!-- -->, который содержит либо идентификатор вложения, либо код, указывающий на ошибки, возникшие при присоединении элемента. При необходимости можно использовать параметр options для передачи сведений о состоянии в метод обратного вызова.

      Идентификатор можно использовать с методом `removeAttachmentAsync`, чтобы удалить вложение, добавленное во время текущего сеанса.

      Если ваша надстройка Office выполняется в Outlook в Интернете, метод `addItemAttachmentAsync` обеспечивает вложение элементов в элементы, отличные от редактируемого. Однако это действие не рекомендуется выполнять, так как оно не поддерживается.

      \[[Набор API: Mailbox 1,1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      ** [Минимальный уровень](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- --> разрешений**:`ReadWriteItem`

      ** [Соответствующий режим](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- --> Outlook**: создание сообщения

      **Ошибки**:

      - `NumberOfAttachmentsExceeded`<!-- -->: Сообщение или встреча содержит слишком много вложений.
    name: 'addItemAttachmentAsync(itemId, attachmentName, callback)'
    fullName: 'addItemAttachmentAsync(itemId, attachmentName, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addItemAttachmentAsync(itemId: any, attachmentName: string, callback?: (asyncResult: Office.AsyncResult<string>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: itemId
          description: "Идентификатор Exchange для вкладываемого элемента. Максимальная длина\_— 100 символов."
          type:
            - any
        - id: attachmentName
          description: "Имя вложения, которое отображается при передаче вложения. Максимальная длина\_— 255 символов."
          type:
            - string
        - id: callback
          description: 'Необязательное. После выполнения метода функция, переданная в `callback` параметре, вызывается с помощью одного параметра типа`Office.AsyncResult`<!-- -->. После успешного выполнения идентификатор вложения будет представлен в свойстве `asyncResult.value`. Если добавить вложение не удастся, объект `asyncResult` будет содержать объект `Error` с описанием ошибки.'
          type:
            - 'outlook!Office.MessageCompose#addItemAttachmentAsync~1:complex'
  - uid: 'outlook!Office.MessageCompose#bcc:member'
    summary: "Получает объект, который предоставляет методы для получения или обновления получателей скрытой копии сообщения.\n\nКоллекция может включать не более 100 элементов по умолчанию. Однако в Outlook в Интернете, Windows и Mac применяются следующие пределы.\n\n- Максимальное количество элементов — 500.\n\n- Установить ограничение количества элементов на вызов\_— не более 100, общего количества\_— не более 500.\n\n\\[[Набор API: Mailbox 1,1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\\]"
    remarks: |-
      ** [Минимальный уровень](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- --> разрешений**:`ReadItem`

      ** [Соответствующий режим](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- --> Outlook**: создание сообщения

      #### <a name="examples"></a>Примеры

      ```javascript
      Office.context.mailbox.item.bcc.setAsync( ['alice@contoso.com', 'bob@contoso.com'] );
      Office.context.mailbox.item.bcc.addAsync( ['jason@contoso.com'] );
      Office.context.mailbox.item.bcc.getAsync(callback);

      function callback(asyncResult) {
          var arrayOfBccRecipients = asyncResult.value;
      }
      ```
      ```javascript
      // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/30-recipients-and-attendees/get-set-bcc-message-compose.yaml
      Office.context.mailbox.item.bcc.getAsync(function(asyncResult) {
        if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
          var msgBcc = asyncResult.value;
          console.log("Message being blind-copied to:");
          for (var i = 0; i < msgBcc.length; i++) {
            console.log(msgBcc[i].displayName + " (" + msgBcc[i].emailAddress + ")");
          }
        } else {
          console.error(asyncResult.error);
        }
      });
      ```
      ```javascript
      // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/30-recipients-and-attendees/get-set-bcc-message-compose.yaml
      var email = $("#emailBcc")
        .val()
        .toString();
      var emailArray = [email];
      Office.context.mailbox.item.bcc.setAsync(emailArray, function(asyncResult) {
        if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
          console.log("Succeeded in setting Bcc field.");
        } else {
          console.error(asyncResult.error);
        }
      });
      ```
    name: bcc
    fullName: bcc
    langs:
      - typeScript
    type: property
    syntax:
      content: 'bcc: Recipients;'
      return:
        type:
          - 'outlook!Office.Recipients:interface'
  - uid: 'outlook!Office.MessageCompose#body:member'
    summary: |-
      Получает объект, предоставляющий методы для работы с основным текстом элемента.

      \[[Набор API: Mailbox 1,1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      ** [Минимальный уровень](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- --> разрешений**:`ReadItem`

      ** [Соответствующий режим](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- --> Outlook**: создание сообщения

      #### <a name="examples"></a>Примеры

      ```javascript
      // This example gets the body of the item as plain text.
      Office.context.mailbox.item.body.getAsync(
          "text",
          { asyncContext: "This is passed to the callback" },
          function callback(result) {
              // Do something with the result.
          });

      // The following is an example of the result parameter passed to the callback function.
      {
          "value": "TEXT of whole body (including threads below)",
          "status": "succeeded",
          "asyncContext": "This is passed to the callback"
      }
      ```
    name: body
    fullName: body
    langs:
      - typeScript
    type: property
    syntax:
      content: 'body: Body;'
      return:
        type:
          - 'outlook!Office.Body:interface'
  - uid: 'outlook!Office.MessageCompose#categories:member'
    summary: |-
      Получает объект, предоставляющий методы для управления категориями элемента.

      **Важно!** в Outlook в Интернете вы не можете использовать API для управления категориями сообщений в режиме создания.

      \[[Набор API: Mailbox 1,8](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      ** [Минимальный уровень](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- --> разрешений**:`ReadItem`

      ** [Соответствующий режим](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- --> Outlook**: создание сообщения

      #### <a name="examples"></a>Примеры

      ```javascript
      // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/45-categories/work-with-categories.yaml
      Office.context.mailbox.item.categories.getAsync(function(asyncResult) {
        if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
          var categories = asyncResult.value;
          if (categories && categories.length > 0) {
            console.log("Categories assigned to this item:");
            console.log(JSON.stringify(categories));
          } else {
            console.log("There are no categories assigned to this item.");
          }
        } else {
          console.error(asyncResult.error);
        }
      });
      ```
      ```javascript
      // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/45-categories/work-with-categories.yaml
      // Note: In order for you to successfully add a category,
      // it must be in the mailbox categories master list.

      Office.context.mailbox.masterCategories.getAsync(function(asyncResult) {
        if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
          var masterCategories = asyncResult.value;
          if (masterCategories && masterCategories.length > 0) {
            // Grab the first category from the master list.
            var categoryToAdd = [masterCategories[0].displayName];
            Office.context.mailbox.item.categories.addAsync(categoryToAdd, function(asyncResult) {
              if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
                console.log(`Successfully assigned category '${categoryToAdd}' to item.`);
              } else {
                console.log("categories.addAsync call failed with error: " + asyncResult.error.message);
              }
            });
          } else {
            console.log("There are no categories in the master list on this mailbox. You can add categories using Office.context.mailbox.masterCategories.addAsync.");
          }
        } else {
          console.error(asyncResult.error);
        }
      });
      ```
      ```javascript
      // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/45-categories/work-with-categories.yaml
      Office.context.mailbox.item.categories.getAsync(function(asyncResult) {
        if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
          var categories = asyncResult.value;
          if (categories && categories.length > 0) {
            // Grab the first category assigned to this item.
            var categoryToRemove = [categories[0].displayName];
            Office.context.mailbox.item.categories.removeAsync(categoryToRemove, function(asyncResult) {
              if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
                console.log(`Successfully unassigned category '${categoryToRemove}' from this item.`);
              } else {
                console.log("categories.removeAsync call failed with error: " + asyncResult.error.message);
              }
            });
          } else {
            console.log("There are no categories assigned to this item.");
          }
        } else {
          console.error(asyncResult.error);
        }
      });
      ```
    name: categories
    fullName: categories
    langs:
      - typeScript
    type: property
    syntax:
      content: 'categories: Categories;'
      return:
        type:
          - 'outlook!Office.Categories:interface'
  - uid: 'outlook!Office.MessageCompose#cc:member'
    summary: "Предоставляет доступ к получателям копии сообщения. Тип объекта и уровень доступа зависят от режима текущего элемента.\n\n`cc`Свойство возвращает объект [Recipients](xref:outlook!Office.Recipients:interface) , который предоставляет методы для получения или обновления получателей в строке **\"копия\"** сообщения. Коллекция может включать не более 100 элементов по умолчанию. Однако в Outlook в Интернете, Windows и Mac применяются следующие пределы.\n\n- Максимальное количество элементов — 500.\n\n- Установить ограничение количества элементов на вызов\_— не более 100, общего количества\_— не более 500."
    remarks: |-
      ** [Минимальный уровень](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- --> разрешений**:`ReadItem`

      ** [Соответствующий режим](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- --> Outlook**: создание сообщения

      #### <a name="examples"></a>Примеры

      ```javascript
      Office.context.mailbox.item.cc.setAsync( ['alice@contoso.com', 'bob@contoso.com'] );
      Office.context.mailbox.item.cc.addAsync( ['jason@contoso.com'] );
      Office.context.mailbox.item.cc.getAsync(callback);

      function callback(asyncResult) {
          var arrayOfCcRecipients = asyncResult.value;
      }
      ```
      ```javascript
      // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/30-recipients-and-attendees/get-set-cc-message-compose.yaml
      Office.context.mailbox.item.cc.getAsync(function(asyncResult) {
        if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
          var msgCc = asyncResult.value;
          console.log("Message being copied to:");
          for (var i = 0; i < msgCc.length; i++) {
            console.log(msgCc[i].displayName + " (" + msgCc[i].emailAddress + ")");
          }
        } else {
          console.error(asyncResult.error);
        }
      });
      ```
      ```javascript
      // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/30-recipients-and-attendees/get-set-cc-message-compose.yaml
      var email = $("#emailCc")
        .val()
        .toString();
      var emailArray = [email];
      Office.context.mailbox.item.cc.setAsync(emailArray, function(asyncResult) {
        if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
          console.log("Succeeded in setting Cc field.");
        } else {
          console.error(asyncResult.error);
        }
      });
      ```
    name: cc
    fullName: cc
    langs:
      - typeScript
    type: property
    syntax:
      content: 'cc: Recipients;'
      return:
        type:
          - 'outlook!Office.Recipients:interface'
  - uid: 'outlook!Office.MessageCompose#close:member(1)'
    summary: |-
      Закрывает текущий элемент, который составляется

      Поведение метода Close зависит от текущего состояния составного элемента. Если элемент содержит несохраненные изменения, клиент предлагает пользователю сохранить, удалить или закрыть действие.

      В клиенте Outlook для настольных ПК, если сообщение является встроенным ответом, метод Close не оказывает никакого действия.

      **Примечание**: в Outlook в Интернете, если элемент является встречей и ранее был сохранен с помощью`saveAsync`<!-- -->, пользователю предлагается сохранить, удалить или отменить, даже если после последнего сохранения элемента не было внесено никаких изменений.

      \[[Набор API: Mailbox 1,3](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      ** [Минимальный уровень](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- --> разрешений**:`Restricted`

      ** [Соответствующий режим](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- --> Outlook**: создание сообщения

      #### <a name="examples"></a>Примеры

      ```javascript
      // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/25-item-save-and-close/close.yaml
      Office.context.mailbox.item.close();
      ```
    name: close()
    fullName: close()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'close(): void;'
      return:
        type:
          - void
        description: ''
  - uid: 'outlook!Office.MessageCompose#conversationId:member'
    summary: |-
      Получает идентификатор разговора по электронной почте, содержащего конкретное сообщение.

      Вы можете получить целочисленное значение этого свойства, если ваше почтовое приложение активируется в формах просмотра или формах создания ответов. Если пользователь изменит тему ответа, после его отправки идентификатор беседы будет изменен, и полученное ранее значение будет недействительным.

      Это свойство имеет значение NULL для нового элемента в форме создания. Свойство `conversationId` вернет значение, если пользователь задаст тему и сохранит элемент.
    remarks: |-
      ** [Минимальный уровень](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- --> разрешений**:`ReadItem`

      ** [Соответствующий режим](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- --> Outlook**: создание сообщения

      #### <a name="examples"></a>Примеры

      ```javascript
      // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/90-other-item-apis/get-conversation-id-message.yaml
      console.log(`Conversation ID: ${Office.context.mailbox.item.conversationId}`);
      ```
    name: conversationId
    fullName: conversationId
    langs:
      - typeScript
    type: property
    syntax:
      content: 'conversationId: string;'
      return:
        type:
          - string
  - uid: 'outlook!Office.MessageCompose#disableClientSignatureAsync:member(1)'
    summary: |-
      Отключает подпись клиента Outlook.

      Для многофункциональных клиентов Windows и Mac Этот API задает подпись в разделах "создать сообщение" и "ответы на пересылку" для учетной записи отправки в "(нет)", эффективно отключая подпись. Для Outlook в Интернете API должен отключить функцию подписи для новых сообщений, ответов и пересылок. Если выбрана подпись, этот вызов API должен отключить его.

      \[[Набор API: предварительный просмотр почтового ящика](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      ** [Минимальный уровень](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- --> разрешений**:`ReadWriteItem`

      ** [Соответствующий режим](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- --> Outlook**: создание сообщения
    isPreview: true
    name: 'disableClientSignatureAsync(options, callback)'
    fullName: 'disableClientSignatureAsync(options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'disableClientSignatureAsync(options?: Office.AsyncContextOptions, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: options
          description: 'Необязательное. Объектный литерал, содержащий одно или несколько из указанных ниже свойств. `asyncContext`<!-- -->: Разработчики могут предоставить любой объект, к которому необходимо получить доступ, в методе обратного вызова.'
          type:
            - 'office!Office.AsyncContextOptions:interface'
        - id: callback
          description: 'Необязательное. После выполнения метода функция, переданная в параметре callback, вызывается с помощью одного параметра,`asyncResult`<!-- -->, представляющий собой `Office.AsyncResult` объект.'
          type:
            - 'outlook!Office.MessageCompose#disableClientSignatureAsync~0:complex'
  - uid: 'outlook!Office.MessageCompose#disableClientSignatureAsync:member(2)'
    summary: |-
      Отключает подпись клиента Outlook.

      Для многофункциональных клиентов Windows и Mac Этот API задает подпись в разделах "создать сообщение" и "ответы на пересылку" для учетной записи отправки в "(нет)", эффективно отключая подпись. Для Outlook в Интернете API должен отключить функцию подписи для новых сообщений, ответов и пересылок. Если выбрана подпись, этот вызов API должен отключить его.

      \[[Набор API: предварительный просмотр почтового ящика](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      ** [Минимальный уровень](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- --> разрешений**:`ReadWriteItem`

      ** [Соответствующий режим](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- --> Outlook**: создание сообщения

      #### <a name="examples"></a>Примеры

      ```javascript
      // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/99-preview-apis/work-with-client-signatures.yaml
      // Disable the client signature.
      Office.context.mailbox.item.disableClientSignatureAsync(function(asyncResult) {
        if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
          console.log("disableClientSignatureAsync succeeded");
        } else {
          console.error(asyncResult.error);
        }
      });
      ```
    isPreview: true
    name: disableClientSignatureAsync(callback)
    fullName: disableClientSignatureAsync(callback)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'disableClientSignatureAsync(callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: callback
          description: 'Необязательное. После выполнения метода функция, переданная в параметре callback, вызывается с помощью одного параметра,`asyncResult`<!-- -->, представляющий собой `Office.AsyncResult` объект.'
          type:
            - 'outlook!Office.MessageCompose#disableClientSignatureAsync~1:complex'
  - uid: 'outlook!Office.MessageCompose#from:member'
    summary: |-
      Получает электронный адрес отправителя сообщения.

      Свойства `from` и `sender` представляют одно лицо, если сообщение не отправлено представителем. В этом случае `from` свойство представляет владельца, а `sender` свойство представляет делегат.

      `from`Свойство возвращает `From` объект, который предоставляет метод для получения значения From.

      \[[Набор API: Mailbox 1,7](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      ** [Минимальный уровень](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- --> разрешений**:`ReadItem`

      ** [Соответствующий режим](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- --> Outlook**: создание сообщения

      #### <a name="examples"></a>Примеры

      ```javascript
      // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/30-recipients-and-attendees/get-from-message-compose.yaml
      Office.context.mailbox.item.from.getAsync(function(asyncResult) {
        if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
          var msgFrom = asyncResult.value;
          console.log("Message from: " + msgFrom.displayName + " (" + msgFrom.emailAddress + ")");
        } else {
          console.error(asyncResult.error);
        }
      });
      ```
    name: from
    fullName: from
    langs:
      - typeScript
    type: property
    syntax:
      content: 'from: From;'
      return:
        type:
          - 'outlook!Office.From:interface'
  - uid: 'outlook!Office.MessageCompose#getAttachmentContentAsync:member(1)'
    summary: |-
      Получает вложение из сообщения или встречи и возвращает его в виде `AttachmentContent` объекта.

      `getAttachmentContentAsync`Метод получает вложение с указанным идентификатором из элемента. Рекомендуется использовать идентификатор для получения вложения в том же сеансе, когда идентификаторы вложений были получены с помощью `getAttachmentsAsync` `item.attachments` вызова or. В Outlook в Интернете и на мобильных устройствах идентификатор вложения действителен только в течение одного сеанса. Сеанс переходит к моменту, когда пользователь закрывает приложение, или если пользователь начинает создание встроенной формы, затем извлекает форму, чтобы продолжить работу в отдельном окне.

      \[[Набор API: Mailbox 1,8](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      ** [Минимальный уровень](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- --> разрешений**:`ReadItem`

      ** [Соответствующий режим](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- --> Outlook**: создание сообщения

      **Ошибки**:

      - `AttachmentTypeNotSupported`<!-- -->: Тип вложения не поддерживается. Неподдерживаемые типы включают в себя внедренные изображения в формате RTF или типы вложений элементов, отличные от сообщений электронной почты или элементов календаря (например, контакт или элемент задачи).

      - `InvalidAttachmentId`<!-- -->: Идентификатор вложения не существует.

      #### <a name="examples"></a>Примеры

      ```javascript
      // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/40-attachments/get-attachment-content.yaml
      var item = Office.context.mailbox.item;
      var options = {asyncContext: {currentItem: item}};
      item.getAttachmentsAsync(options, callback);

      function callback(result) {
          if (result.value.length > 0) {
              for (i = 0 ; i < result.value.length ; i++) {
                  result.asyncContext.currentItem.getAttachmentContentAsync(result.value[i].id, handleAttachmentsCallback);
              }
          }
      }

      function handleAttachmentsCallback(result) {
          // Parse string to be a url, an .eml file, a base64-encoded string, or an .icalendar file.
          switch (result.value.format) {
              case Office.MailboxEnums.AttachmentContentFormat.Base64:
                  // Handle file attachment.
                  console.log(result.value.content);
                  break;
              case Office.MailboxEnums.AttachmentContentFormat.Eml:
                  // Handle email item attachment.
                  console.log("Attachment is a message.");
                  break;
              case Office.MailboxEnums.AttachmentContentFormat.ICalendar:
                  // Handle .icalender attachment.
                  console.log("Attachment is a calendar item.");
                  break;
              case Office.MailboxEnums.AttachmentContentFormat.Url:
                  // Handle cloud attachment.
                  console.log("Attachment is a cloud attachment.");
                  break;
              default:
                  // Handle attachment formats that are not supported.
          }
      }
      ```
    name: 'getAttachmentContentAsync(attachmentId, options, callback)'
    fullName: 'getAttachmentContentAsync(attachmentId, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getAttachmentContentAsync(attachmentId: string, options?: Office.AsyncContextOptions, callback?: (asyncResult: Office.AsyncResult<AttachmentContent>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: attachmentId
          description: 'Идентификатор вложения, которое требуется получить.'
          type:
            - string
        - id: options
          description: 'Необязательное. Объектный литерал, содержащий одно или несколько из указанных ниже свойств. `asyncContext`<!-- -->: Разработчики могут предоставить любой объект, к которому необходимо получить доступ, в методе обратного вызова.'
          type:
            - 'office!Office.AsyncContextOptions:interface'
        - id: callback
          description: 'Необязательное. После выполнения метода функция, переданная в `callback` параметр, вызывается с помощью одного параметра,`asyncResult`<!-- -->, представляющий собой `Office.AsyncResult` объект. Если происходит сбой вызова, `asyncResult.error` свойство будет содержать код ошибки с причиной сбоя.'
          type:
            - 'outlook!Office.MessageCompose#getAttachmentContentAsync~0:complex'
  - uid: 'outlook!Office.MessageCompose#getAttachmentContentAsync:member(2)'
    summary: |-
      Получает вложение из сообщения или встречи и возвращает его в виде `AttachmentContent` объекта.

      `getAttachmentContentAsync`Метод получает вложение с указанным идентификатором из элемента. Рекомендуется использовать идентификатор для получения вложения в том же сеансе, когда идентификаторы вложений были получены с помощью `getAttachmentsAsync` `item.attachments` вызова or. В Outlook в Интернете и на мобильных устройствах идентификатор вложения действителен только в течение одного сеанса. Сеанс переходит к моменту, когда пользователь закрывает приложение, или если пользователь начинает создание встроенной формы, затем извлекает форму, чтобы продолжить работу в отдельном окне.

      \[[Набор API: Mailbox 1,8](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      ** [Минимальный уровень](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- --> разрешений**:`ReadItem`

      ** [Соответствующий режим](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- --> Outlook**: создание сообщения

      **Ошибки**:

      - `AttachmentTypeNotSupported`<!-- -->: Тип вложения не поддерживается. Неподдерживаемые типы включают в себя внедренные изображения в формате RTF или типы вложений элементов, отличные от сообщений электронной почты или элементов календаря (например, контакт или элемент задачи).

      - `InvalidAttachmentId`<!-- -->: Идентификатор вложения не существует.
    name: 'getAttachmentContentAsync(attachmentId, callback)'
    fullName: 'getAttachmentContentAsync(attachmentId, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getAttachmentContentAsync(attachmentId: string, callback?: (asyncResult: Office.AsyncResult<AttachmentContent>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: attachmentId
          description: 'Идентификатор вложения, которое требуется получить.'
          type:
            - string
        - id: callback
          description: 'Необязательное. После выполнения метода функция, переданная в `callback` параметр, вызывается с помощью одного параметра,`asyncResult`<!-- -->, представляющий собой `Office.AsyncResult` объект. Если происходит сбой вызова, `asyncResult.error` свойство будет содержать код ошибки с причиной сбоя.'
          type:
            - 'outlook!Office.MessageCompose#getAttachmentContentAsync~1:complex'
  - uid: 'outlook!Office.MessageCompose#getAttachmentsAsync:member(1)'
    summary: |-
      Получает вложения элемента в виде массива.

      \[[Набор API: Mailbox 1,8](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      ** [Минимальный уровень](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- --> разрешений**:`ReadItem`

      ** [Соответствующий режим](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- --> Outlook**: создание сообщения
    name: 'getAttachmentsAsync(options, callback)'
    fullName: 'getAttachmentsAsync(options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getAttachmentsAsync(options?: Office.AsyncContextOptions, callback?: (asyncResult: Office.AsyncResult<AttachmentDetailsCompose[]>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: options
          description: 'Необязательное. Объектный литерал, содержащий одно или несколько из указанных ниже свойств. `asyncContext`<!-- -->: Разработчики могут предоставить любой объект, к которому необходимо получить доступ, в методе обратного вызова.'
          type:
            - 'office!Office.AsyncContextOptions:interface'
        - id: callback
          description: 'Необязательное. После выполнения метода функция, переданная в `callback` параметре, вызывается с помощью одного параметра типа`Office.AsyncResult`<!-- -->. Если происходит сбой вызова, `asyncResult.error` свойство будет содержать код ошибки с причиной сбоя.'
          type:
            - 'outlook!Office.MessageCompose#getAttachmentsAsync~0:complex'
  - uid: 'outlook!Office.MessageCompose#getAttachmentsAsync:member(2)'
    summary: |-
      Получает вложения элемента в виде массива.

      \[[Набор API: Mailbox 1,8](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      ** [Минимальный уровень](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- --> разрешений**:`ReadItem`

      ** [Соответствующий режим](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- --> Outlook**: создание сообщения

      #### <a name="examples"></a>Примеры

      ```javascript
      // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/40-attachments/attachments-compose.yaml
      Office.context.mailbox.item.getAttachmentsAsync(function (result) {
          if (result.status !== Office.AsyncResultStatus.Succeeded) {
              console.error(result.error.message);
          } else {
              if (result.value.length > 0) {
                  for (var i = 0; i < result.value.length; i++) {
                      var attachment = result.value[i];
                      console.log(`${attachment.id}. Name: ${attachment.name}, size: ${attachment.size}, isInline: ${attachment.isInline}`);
                  }
              }
              else {
                  console.log("No attachments on this message.");
              }
          }
      });
      ```
    name: getAttachmentsAsync(callback)
    fullName: getAttachmentsAsync(callback)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getAttachmentsAsync(callback?: (asyncResult: Office.AsyncResult<AttachmentDetailsCompose[]>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: callback
          description: 'Необязательное. После выполнения метода функция, переданная в параметре callback, вызывается с помощью одного параметра типа`Office.AsyncResult`<!-- -->. Если происходит сбой вызова, `asyncResult.error` свойство будет содержать код ошибки с причиной сбоя.'
          type:
            - 'outlook!Office.MessageCompose#getAttachmentsAsync~1:complex'
  - uid: 'outlook!Office.MessageCompose#getComposeTypeAsync:member(1)'
    summary: |-
      Указывает тип создания сообщения и его тип приведения. Сообщение может быть новым или откликом или пересылаемым. Типом приведения может быть HTML или обычный текст.

      \[[Набор API: предварительный просмотр почтового ящика](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      ** [Минимальный уровень](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- --> разрешений**:`ReadItem`

      ** [Соответствующий режим](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- --> Outlook**: создание сообщения
    isPreview: true
    name: 'getComposeTypeAsync(options, callback)'
    fullName: 'getComposeTypeAsync(options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getComposeTypeAsync(options: Office.AsyncContextOptions, callback: (asyncResult: Office.AsyncResult<any>) => void): void;'
      return:
        type:
          - void
        description: Объект со `ComposeType` значениями и `CoercionType` перечислением для элемента сообщения.
      parameters:
        - id: options
          description: 'Объектный литерал, содержащий одно или несколько из указанных ниже свойств. `asyncContext`<!-- -->: Разработчики могут предоставить любой объект, к которому необходимо получить доступ, в методе обратного вызова.'
          type:
            - 'office!Office.AsyncContextOptions:interface'
        - id: callback
          description: 'После выполнения метода функция, переданная в `callback` параметре, вызывается с помощью одного параметра типа`Office.AsyncResult`<!-- -->. В случае успешного выполнения `asyncResult.value` свойство содержит объект с типом создания элемента и типом приведения.'
          type:
            - 'outlook!Office.MessageCompose#getComposeTypeAsync~0:complex'
  - uid: 'outlook!Office.MessageCompose#getComposeTypeAsync:member(2)'
    summary: |-
      Указывает тип создания сообщения и его тип приведения. Сообщение может быть новым или откликом или пересылаемым. Типом приведения может быть HTML или обычный текст.

      \[[Набор API: предварительный просмотр почтового ящика](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      ** [Минимальный уровень](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- --> разрешений**:`ReadItem`

      ** [Соответствующий режим](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- --> Outlook**: создание сообщения

      #### <a name="examples"></a>Примеры

      ```javascript
      // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/99-preview-apis/work-with-client-signatures.yaml
      // Get the compose type of the current item (mail only).
      Office.context.mailbox.item.getComposeTypeAsync(function(asyncResult) {
        if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
          console.log(
            "getComposeTypeAsync succeeded with composeType: " +
              asyncResult.value.composeType +
              " and coercionType: " +
              asyncResult.value.coercionType
          );
        } else {
          console.error(asyncResult.error);
        }
      });
      ```
    isPreview: true
    name: getComposeTypeAsync(callback)
    fullName: getComposeTypeAsync(callback)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getComposeTypeAsync(callback: (asyncResult: Office.AsyncResult<any>) => void): void;'
      return:
        type:
          - void
        description: Объект со `ComposeType` значениями и `CoercionType` перечислением для элемента сообщения.
      parameters:
        - id: callback
          description: 'После выполнения метода функция, переданная в `callback` параметре, вызывается с помощью одного параметра типа`Office.AsyncResult`<!-- -->. В случае успешного выполнения `asyncResult.value` свойство содержит объект с типом создания элемента и типом приведения.'
          type:
            - 'outlook!Office.MessageCompose#getComposeTypeAsync~1:complex'
  - uid: 'outlook!Office.MessageCompose#getInitializationContextAsync:member(1)'
    summary: |-
      Получает данные инициализации, передаваемые при активации надстройки сообщением с действиями.

      **Примечание**: Этот метод поддерживается только Outlook 2016 или более поздней версии в Windows ("нажми и работай" версий больше 16.0.8413.1000) и Outlook в Интернете для Office 365.

      \[[Набор API: предварительный просмотр почтового ящика](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      ** [Минимальный уровень](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- --> разрешений**:`ReadItem`

      ** [Соответствующий режим](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- --> Outlook**: создание сообщения

      Дополнительные сведения о [сообщениях с действиями](https://docs.microsoft.com/outlook/actionable-messages/invoke-add-in-from-actionable-message)<!-- -->.
    isPreview: true
    name: 'getInitializationContextAsync(options, callback)'
    fullName: 'getInitializationContextAsync(options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getInitializationContextAsync(options?: Office.AsyncContextOptions, callback?: (asyncResult: Office.AsyncResult<string>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: options
          description: 'Необязательное. Объектный литерал, содержащий одно или несколько из указанных ниже свойств. `asyncContext`<!-- -->: Разработчики могут предоставить любой объект, к которому необходимо получить доступ, в методе обратного вызова.'
          type:
            - 'office!Office.AsyncContextOptions:interface'
        - id: callback
          description: 'Необязательное. После выполнения метода функция, переданная в `callback` параметре, вызывается с помощью одного параметра типа`Office.AsyncResult`<!-- -->. При успешном выполнении данные инициализации предоставляются в `asyncResult.value` свойстве в виде строки. Если контекст инициализации отсутствует, `asyncResult` объект будет содержать `Error` объект со `code` свойством, равным 9020, а `name` свойству задано значение`GenericResponseError`<!-- -->.'
          type:
            - 'outlook!Office.MessageCompose#getInitializationContextAsync~0:complex'
  - uid: 'outlook!Office.MessageCompose#getInitializationContextAsync:member(2)'
    summary: |-
      Получает данные инициализации, передаваемые при активации надстройки сообщением с действиями.

      **Примечание**: Этот метод поддерживается только Outlook 2016 или более поздней версии в Windows ("нажми и работай" версий больше 16.0.8413.1000) и Outlook в Интернете для Office 365.

      \[[Набор API: предварительный просмотр почтового ящика](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      ** [Минимальный уровень](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- --> разрешений**:`ReadItem`

      ** [Соответствующий режим](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- --> Outlook**: создание сообщения

      Дополнительные сведения о [сообщениях с действиями](https://docs.microsoft.com/outlook/actionable-messages/invoke-add-in-from-actionable-message)<!-- -->.

      #### <a name="examples"></a>Примеры

      ```javascript
      // Get the initialization context (if present).
      Office.context.mailbox.item.getInitializationContextAsync(
          function(asyncResult) {
              if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
                  if (asyncResult.value != null && asyncResult.value.length > 0) {
                      // The value is a string, parse to an object.
                      var context = JSON.parse(asyncResult.value);
                      // Do something with context.
                  } else {
                      // Empty context, treat as no context.
                  }
              } else {
                  if (asyncResult.error.code == 9020) {
                      // GenericResponseError returned when there is no context.
                      // Treat as no context.
                  } else {
                      // Handle the error.
                  }
              }
          }
      );
      ```
    isPreview: true
    name: getInitializationContextAsync(callback)
    fullName: getInitializationContextAsync(callback)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getInitializationContextAsync(callback?: (asyncResult: Office.AsyncResult<string>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: callback
          description: 'Необязательное. После выполнения метода функция, переданная в `callback` параметре, вызывается с помощью одного параметра типа`Office.AsyncResult`<!-- -->. При успешном выполнении данные инициализации предоставляются в `asyncResult.value` свойстве в виде строки. Если контекст инициализации отсутствует, `asyncResult` объект будет содержать `Error` объект со `code` свойством, равным 9020, а `name` свойству задано значение`GenericResponseError`<!-- -->.'
          type:
            - 'outlook!Office.MessageCompose#getInitializationContextAsync~1:complex'
  - uid: 'outlook!Office.MessageCompose#getItemIdAsync:member(1)'
    summary: |-
      Асинхронно получает идентификатор сохраненного элемента.

      При вызове этот метод возвращает идентификатор элемента с помощью метода обратного вызова.

      **Note**: Если надстройка вызывает `getItemIdAsync` элемент в режиме создания (например, для получения `itemId` помощи с помощью EWS или REST API), имейте в виду, что в режиме кэширования Outlook может занять некоторое время, прежде чем элемент будет синхронизирован с сервером. Пока элемент не будет синхронизирован, он `itemId` не распознается и не будет использоваться, возвращается сообщение об ошибке.

      \[[Набор API: Mailbox 1,8](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      ** [Минимальный уровень](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- --> разрешений**:`ReadItem`

      ** [Соответствующий режим](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- --> Outlook**: создание сообщения

      **Ошибки**:

      - `ItemNotSaved`<!-- -->: Идентификатор невозможно извлечь, пока не будет сохранен элемент.
    name: 'getItemIdAsync(options, callback)'
    fullName: 'getItemIdAsync(options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getItemIdAsync(options: Office.AsyncContextOptions, callback: (asyncResult: Office.AsyncResult<string>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: options
          description: 'Объектный литерал, содержащий одно или несколько из указанных ниже свойств. `asyncContext`<!-- -->: Разработчики могут предоставить любой объект, к которому необходимо получить доступ, в методе обратного вызова.'
          type:
            - 'office!Office.AsyncContextOptions:interface'
        - id: callback
          description: 'После выполнения метода функция, переданная в `callback` параметре, вызывается с помощью одного параметра типа`Office.AsyncResult`<!-- -->.'
          type:
            - 'outlook!Office.MessageCompose#getItemIdAsync~0:complex'
  - uid: 'outlook!Office.MessageCompose#getItemIdAsync:member(2)'
    summary: |-
      Асинхронно получает идентификатор сохраненного элемента.

      При вызове этот метод возвращает идентификатор элемента с помощью метода обратного вызова.

      **Note**: Если надстройка вызывает `getItemIdAsync` элемент в режиме создания (например, для получения `itemId` помощи с помощью EWS или REST API), имейте в виду, что в режиме кэширования Outlook может занять некоторое время, прежде чем элемент будет синхронизирован с сервером. Пока элемент не будет синхронизирован, он `itemId` не распознается и не будет использоваться, возвращается сообщение об ошибке.

      \[[Набор API: Mailbox 1,8](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      ** [Минимальный уровень](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- --> разрешений**:`ReadItem`

      ** [Соответствующий режим](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- --> Outlook**: создание сообщения

      **Ошибки**:

      - `ItemNotSaved`<!-- -->: Идентификатор невозможно извлечь, пока не будет сохранен элемент.

      #### <a name="examples"></a>Примеры

      ```javascript
      // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/85-tokens-and-service-calls/item-id-compose.yaml
      Office.context.mailbox.item.getItemIdAsync(function (result) {
          if (result.status !== Office.AsyncResultStatus.Succeeded) {
              console.error(`getItemIdAsync failed with message: ${result.error.message}`);
          } else {
              console.log(result.value);
          }
      });
      ```
    name: getItemIdAsync(callback)
    fullName: getItemIdAsync(callback)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getItemIdAsync(callback: (asyncResult: Office.AsyncResult<string>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: callback
          description: 'После выполнения метода функция, переданная в `callback` параметре, вызывается с помощью одного параметра типа`Office.AsyncResult`<!-- -->.'
          type:
            - 'outlook!Office.MessageCompose#getItemIdAsync~1:complex'
  - uid: 'outlook!Office.MessageCompose#getSelectedDataAsync:member(1)'
    summary: |-
      Асинхронно возвращает данные, выбранные в теме или тексте сообщения.

      Если выделенный фрагмент отсутствует, но курсор находится в тексте или теме, метод возвращает пустую строку для выбранных данных. Если выбраны не текст и не тема, метод возвращает ошибку `InvalidSelection`.

      Чтобы получить доступ к выбранным данным из метода обратного вызова, вызовите метод`asyncResult.value.data`<!-- -->. Чтобы получить доступ к исходному свойству, из которого берется объект, вызовите метод`asyncResult.value.sourceProperty`<!-- -->, который может иметь значение `body` или`subject`<!-- -->.

      \[[Набор API: Mailbox 1,2](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      ** [Минимальный уровень](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- --> разрешений**:`ReadItem`

      ** [Соответствующий режим](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- --> Outlook**: создание сообщения

      #### <a name="examples"></a>Примеры

      ```javascript
      // Get selected data.
      Office.initialize = function () {
          Office.context.mailbox.item.getSelectedDataAsync(Office.CoercionType.Text, {}, getCallback);
      };

      function getCallback(asyncResult) {
          var text = asyncResult.value.data;
          var prop = asyncResult.value.sourceProperty;

          console.log("Selected text in " + prop + ": " + text);
      }
      ```
    name: 'getSelectedDataAsync(coercionType, options, callback)'
    fullName: 'getSelectedDataAsync(coercionType, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getSelectedDataAsync(coercionType: Office.CoercionType | string, options: Office.AsyncContextOptions, callback: (asyncResult: Office.AsyncResult<any>) => void): void;'
      return:
        type:
          - void
        description: 'Выбранные данные в виде строки с форматом, определенным`coercionType`<!-- -->.'
      parameters:
        - id: coercionType
          description: 'Запрашивает формат данных. Что`Text`<!-- -->метод возвращает обычный текст в виде строки, удаляя все присутствующие HTML-теги. Что`Html`<!-- -->метод возвращает выделенный текст, если он является обычным текстом или HTML-кодом.'
          type:
            - 'outlook!Office.MessageCompose#getSelectedDataAsync~0:complex'
        - id: options
          description: 'Объектный литерал, содержащий одно или несколько из указанных ниже свойств. `asyncContext`<!-- -->: Разработчики могут предоставить любой объект, к которому необходимо получить доступ, в методе обратного вызова.'
          type:
            - 'office!Office.AsyncContextOptions:interface'
        - id: callback
          description: 'После выполнения метода функция, переданная в `callback` параметре, вызывается с помощью одного параметра типа`Office.AsyncResult`<!-- -->.'
          type:
            - 'outlook!Office.MessageCompose#getSelectedDataAsync~1:complex'
  - uid: 'outlook!Office.MessageCompose#getSelectedDataAsync:member(2)'
    summary: |-
      Асинхронно возвращает данные, выбранные в теме или тексте сообщения.

      Если выделенный фрагмент отсутствует, но курсор находится в тексте или теме, метод возвращает пустую строку для выбранных данных. Если выбраны не текст и не тема, метод возвращает ошибку `InvalidSelection`.

      Чтобы получить доступ к выбранным данным из метода обратного вызова, вызовите метод`asyncResult.value.data`<!-- -->. Чтобы получить доступ к исходному свойству, из которого берется объект, вызовите метод`asyncResult.value.sourceProperty`<!-- -->, который может иметь значение `body` или`subject`<!-- -->.

      \[[Набор API: Mailbox 1,2](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      ** [Минимальный уровень](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- --> разрешений**:`ReadItem`

      ** [Соответствующий режим](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- --> Outlook**: создание сообщения

      #### <a name="examples"></a>Примеры

      ```javascript
      // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/20-item-body/get-selected-data.yaml
      Office.context.mailbox.item.getSelectedDataAsync(Office.CoercionType.Text, function(asyncResult) {
        if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
          var text = asyncResult.value.data;
          var prop = asyncResult.value.sourceProperty;
          console.log("Selected text in " + prop + ": " + text);
        } else {
          console.error(asyncResult.error);
        }
      });
      ```
    name: 'getSelectedDataAsync(coercionType, callback)'
    fullName: 'getSelectedDataAsync(coercionType, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getSelectedDataAsync(coercionType: Office.CoercionType | string, callback: (asyncResult: Office.AsyncResult<any>) => void): void;'
      return:
        type:
          - void
        description: 'Выбранные данные в виде строки с форматом, определенным`coercionType`<!-- -->.'
      parameters:
        - id: coercionType
          description: 'Запрашивает формат данных. Что`Text`<!-- -->метод возвращает обычный текст в виде строки, удаляя все присутствующие HTML-теги. Что`Html`<!-- -->метод возвращает выделенный текст, если он является обычным текстом или HTML-кодом.'
          type:
            - 'outlook!Office.MessageCompose#getSelectedDataAsync~2:complex'
        - id: callback
          description: 'После выполнения метода функция, переданная в `callback` параметре, вызывается с помощью одного параметра типа`Office.AsyncResult`<!-- -->.'
          type:
            - 'outlook!Office.MessageCompose#getSelectedDataAsync~3:complex'
  - uid: 'outlook!Office.MessageCompose#getSharedPropertiesAsync:member(1)'
    summary: |-
      Получает свойства встречи или сообщения в общей папке, календаре или почтовом ящике.

      **Note**: Этот метод не поддерживается в Outlook для Mac, iOS и Android.

      \[[Набор API: Mailbox 1,8](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      ** [Минимальный уровень](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- --> разрешений**:`ReadItem`

      ** [Соответствующий режим](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- --> Outlook**: создание сообщения

      #### <a name="examples"></a>Примеры

      ```javascript
      // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/65-delegates-and-shared-folders/get-shared-properties.yaml
      if (!Office.context.mailbox.item.getSharedPropertiesAsync) {
        console.error("Try this sample on a message from a shared folder.");
        return;
      }

      Office.context.mailbox.getCallbackTokenAsync({ isRest: true }, function(result) {
        if (result.status === Office.AsyncResultStatus.Succeeded && result.value !== "") {
          Office.context.mailbox.item.getSharedPropertiesAsync(
            {
              // Pass auth token along.
              asyncContext: result.value
            },
            function(result2) {
              let sharedProperties = result2.value;
              let delegatePermissions = sharedProperties.delegatePermissions;

              // Determine if user can do the expected operation, e.g., do they have Write permission?
              if ((delegatePermissions & Office.MailboxEnums.DelegatePermissions.Read) != 0) {
                var ewsId = Office.context.mailbox.item.itemId;
                var restId = Office.context.mailbox.convertToRestId(ewsId, Office.MailboxEnums.RestVersion.v2_0);
                let rest_url =
                  sharedProperties.targetRestUrl + "/v2.0/users/" + sharedProperties.targetMailbox + "/messages/" + restId;

                $.ajax({
                  url: rest_url,
                  dataType: "json",
                  headers: { Authorization: "Bearer " + result2.asyncContext }
                })
                  .done(function(response) {
                    console.log(response);
                  })
                  .fail(function(error) {
                    console.error(error);
                  });
              }
            }
          );
        }
      });
      ```
    name: 'getSharedPropertiesAsync(options, callback)'
    fullName: 'getSharedPropertiesAsync(options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getSharedPropertiesAsync(options: Office.AsyncContextOptions, callback: (asyncResult: Office.AsyncResult<SharedProperties>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: options
          description: 'Объектный литерал, содержащий одно или несколько из указанных ниже свойств. `asyncContext`<!-- -->: Разработчики могут предоставить любой объект, к которому необходимо получить доступ, в методе обратного вызова.'
          type:
            - 'office!Office.AsyncContextOptions:interface'
        - id: callback
          description: 'После выполнения метода функция, переданная в `callback` параметре, вызывается с помощью одного параметра типа`Office.AsyncResult`<!-- -->. `value`Свойство Result получает свойства общего элемента.'
          type:
            - 'outlook!Office.MessageCompose#getSharedPropertiesAsync~0:complex'
  - uid: 'outlook!Office.MessageCompose#getSharedPropertiesAsync:member(2)'
    summary: |-
      Получает свойства встречи или сообщения в общей папке, календаре или почтовом ящике.

      **Note**: Этот метод не поддерживается в Outlook для Mac, iOS и Android.

      \[[Набор API: Mailbox 1,8](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      ** [Минимальный уровень](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- --> разрешений**:`ReadItem`

      ** [Соответствующий режим](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- --> Outlook**: создание сообщения

      #### <a name="examples"></a>Примеры

      ```javascript
      // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/65-delegates-and-shared-folders/get-shared-properties.yaml
      if (!Office.context.mailbox.item.getSharedPropertiesAsync) {
        console.error("Try this sample on a message from a shared folder.");
        return;
      }

      Office.context.mailbox.item.getSharedPropertiesAsync(function(result) {
        console.log(result.value);
      });
      ```
    name: getSharedPropertiesAsync(callback)
    fullName: getSharedPropertiesAsync(callback)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getSharedPropertiesAsync(callback: (asyncResult: Office.AsyncResult<SharedProperties>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: callback
          description: 'После выполнения метода функция, переданная в `callback` параметре, вызывается с помощью одного параметра типа`Office.AsyncResult`<!-- -->. `value`Свойство Result получает свойства общего элемента.'
          type:
            - 'outlook!Office.MessageCompose#getSharedPropertiesAsync~1:complex'
  - uid: 'outlook!Office.MessageCompose#internetHeaders:member'
    summary: |-
      Получает или задает настраиваемые заголовки Интернета для сообщения.

      `internetHeaders`Свойство возвращает `InternetHeaders` объект, который предоставляет методы для управления заголовками Интернета в сообщении.

      \[[Набор API: Mailbox 1,8](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      ** [Минимальный уровень](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- --> разрешений**:`ReadItem`

      ** [Соответствующий режим](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- --> Outlook**: создание сообщения

      #### <a name="examples"></a>Примеры

      ```javascript
      Office.context.mailbox.item.internetHeaders.getAsync(["header1", "header2"], callback);

      function callback(asyncResult) {
          var dictionary = asyncResult.value;
          var header1_value = dictionary["header1"];
      }
      ```
    name: internetHeaders
    fullName: internetHeaders
    langs:
      - typeScript
    type: property
    syntax:
      content: 'internetHeaders: InternetHeaders;'
      return:
        type:
          - 'outlook!Office.InternetHeaders:interface'
  - uid: 'outlook!Office.MessageCompose#isClientSignatureEnabledAsync:member(1)'
    summary: |-
      Получает значение, которое указывает, включена ли подпись клиента.

      Для полнофункциональных клиентов Windows и Mac вызов API должен возвратить, `true` Если для новых сообщений, ответов или пересылаемых сообщений по умолчанию задается шаблон для отправляющей учетной записи Outlook. Для Outlook в Интернете вызов API должен возвратить, `true` Если подпись включена для типов создания`newMail`<!-- -->, `reply`<!-- -->, или`forward`<!-- -->. Если для параметров задано значение "(нет)" в разделе Mac или расширенные клиенты Windows или отключено в Outlook в Интернете, вызов API должен возвратить`false`<!-- -->.

      \[[Набор API: предварительный просмотр почтового ящика](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      ** [Минимальный уровень](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- --> разрешений**:`ReadItem`

      ** [Соответствующий режим](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- --> Outlook**: создание сообщения
    isPreview: true
    name: 'isClientSignatureEnabledAsync(options, callback)'
    fullName: 'isClientSignatureEnabledAsync(options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'isClientSignatureEnabledAsync(options: Office.AsyncContextOptions, callback: (asyncResult: Office.AsyncResult<boolean>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: options
          description: 'Объектный литерал, содержащий одно или несколько из указанных ниже свойств. `asyncContext`<!-- -->: Разработчики могут предоставить любой объект, к которому необходимо получить доступ, в методе обратного вызова.'
          type:
            - 'office!Office.AsyncContextOptions:interface'
        - id: callback
          description: 'После выполнения метода функция, переданная в `callback` параметре, вызывается с помощью одного параметра типа`Office.AsyncResult`<!-- -->.'
          type:
            - 'outlook!Office.MessageCompose#isClientSignatureEnabledAsync~0:complex'
  - uid: 'outlook!Office.MessageCompose#isClientSignatureEnabledAsync:member(2)'
    summary: |-
      Получает значение, которое указывает, включена ли подпись клиента.

      Для полнофункциональных клиентов Windows и Mac вызов API должен возвратить, `true` Если для новых сообщений, ответов или пересылаемых сообщений по умолчанию задается шаблон для отправляющей учетной записи Outlook. Для Outlook в Интернете вызов API должен возвратить, `true` Если подпись включена для типов создания`newMail`<!-- -->, `reply`<!-- -->, или`forward`<!-- -->. Если для параметров задано значение "(нет)" в разделе Mac или расширенные клиенты Windows или отключено в Outlook в Интернете, вызов API должен возвратить`false`<!-- -->.

      \[[Набор API: предварительный просмотр почтового ящика](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      ** [Минимальный уровень](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- --> разрешений**:`ReadItem`

      ** [Соответствующий режим](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- --> Outlook**: создание сообщения

      #### <a name="examples"></a>Примеры

      ```javascript
      // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/99-preview-apis/work-with-client-signatures.yaml
      // Check if the client signature is currently enabled.
      Office.context.mailbox.item.isClientSignatureEnabledAsync(function(asyncResult) {
        if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
          console.log("isClientSignatureEnabledAsync succeeded with result: " + asyncResult.value);
        } else {
          console.error(asyncResult.error);
        }
      });
      ```
    isPreview: true
    name: isClientSignatureEnabledAsync(callback)
    fullName: isClientSignatureEnabledAsync(callback)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'isClientSignatureEnabledAsync(callback: (asyncResult: Office.AsyncResult<boolean>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: callback
          description: 'После выполнения метода функция, переданная в `callback` параметре, вызывается с помощью одного параметра типа`Office.AsyncResult`<!-- -->.'
          type:
            - 'outlook!Office.MessageCompose#isClientSignatureEnabledAsync~1:complex'
  - uid: 'outlook!Office.MessageCompose#itemType:member'
    summary: |-
      Получает тип элемента, который представляет экземпляр.

      `itemType`Свойство возвращает одно из `ItemType` значений перечисления, которое указывает, является ли экземпляр объекта Item сообщением или встречей.
    remarks: |-
      ** [Минимальный уровень](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- --> разрешений**:`ReadItem`

      ** [Соответствующий режим](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- --> Outlook**: создание сообщения

      #### <a name="examples"></a>Примеры

      ```javascript
      // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/90-other-item-apis/get-item-type.yaml
      console.log(`Item type: ${Office.context.mailbox.item.itemType}`);
      ```
    name: itemType
    fullName: itemType
    langs:
      - typeScript
    type: property
    syntax:
      content: 'itemType: MailboxEnums.ItemType | string;'
      return:
        type:
          - 'outlook!Office.MessageCompose#itemType~0:complex'
  - uid: 'outlook!Office.MessageCompose#loadCustomPropertiesAsync:member(1)'
    summary: |-
      Асинхронно загружает настраиваемые свойства для надстройки для выбранного элемента.

      Настраиваемые свойства сохраняются в виде пар "ключ-значение" для каждого приложения и каждого элемента. Этот метод возвращает объект `CustomProperties` при обратном вызове, который предоставляет методы для доступа к настраиваемым свойствам, характерным для текущего элемента и текущей надстройки. Настраиваемые свойства не шифруются для элемента, поэтому этот способ хранения не является безопасным.

      Настраиваемые свойства предоставляются в виде объекта `CustomProperties` в свойстве `asyncResult.value`. Этот объект позволяет получить, задать и удалить настраиваемые свойства для элемента, а также сохранить изменения, внесенные в набор настраиваемых свойств, на сервере.
    remarks: |-
      ** [Минимальный уровень](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- --> разрешений**:`ReadItem`

      ** [Соответствующий режим](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- --> Outlook**: создание сообщения

      #### <a name="examples"></a>Примеры

      ```javascript
      // The following example shows how to use the loadCustomPropertiesAsync method
      // to asynchronously load custom properties that are specific to the current item.
      // The example also shows how to use the saveAsync method to save these properties
      // back to the server. After loading the custom properties, the example uses the
      // get method to read the custom property myProp, the set method to write the
      // custom property otherProp, and then finally calls the saveAsync method to save
      // the custom properties.
      Office.initialize = function () {
          // Checks for the DOM to load using the jQuery ready function.
          $(document).ready(function () {
              // After the DOM is loaded, add-in-specific code can run.
              var mailbox = Office.context.mailbox;
              mailbox.item.loadCustomPropertiesAsync(customPropsCallback);
          });
      };

      function customPropsCallback(asyncResult) {
          var customProps = asyncResult.value;
          var myProp = customProps.get("myProp");

          customProps.set("otherProp", "value");
          customProps.saveAsync(saveCallback);
      }

      function saveCallback(asyncResult) {
      }
      ```
      ```javascript
      // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/15-item-custom-properties/load-set-get-save.yaml
      Office.context.mailbox.item.loadCustomPropertiesAsync(function (result) {
        if (result.status === Office.AsyncResultStatus.Succeeded) {
          console.log("Loaded following custom properties:");
          customProps = result.value;
          var dataKey = Object.keys(customProps)[0];
          var data = customProps[dataKey];
          for (var propertyName in data)
          {
            var propertyValue = data[propertyName];
            console.log(`${propertyName}: ${propertyValue}`);
          }              
        }
        else {
          console.error(`loadCustomPropertiesAsync failed with message ${result.error.message}`);
        }
      });
      ```
    name: 'loadCustomPropertiesAsync(callback, userContext)'
    fullName: 'loadCustomPropertiesAsync(callback, userContext)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'loadCustomPropertiesAsync(callback: (asyncResult: Office.AsyncResult<CustomProperties>) => void, userContext?: any): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: callback
          description: 'После выполнения метода функция, переданная в `callback` параметре, вызывается с помощью одного параметра типа`Office.AsyncResult`<!-- -->.'
          type:
            - 'outlook!Office.MessageCompose#loadCustomPropertiesAsync~0:complex'
        - id: userContext
          description: 'Необязательное. Разработчики могут указать любой объект, к которому необходимо получить доступ, в функции обратного вызова. Доступ к этому объекту можно получить с помощью свойства `asyncResult.asyncContext` в функции обратного вызова.'
          type:
            - any
  - uid: 'outlook!Office.MessageCompose#notificationMessages:member'
    summary: |-
      Получает сообщения уведомления для элемента.

      \[[Набор API: Mailbox 1,3](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      ** [Минимальный уровень](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- --> разрешений**:`ReadItem`

      ** [Соответствующий режим](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- --> Outlook**: создание сообщения

      #### <a name="examples"></a>Примеры

      ```javascript
      // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/35-notifications/add-getall-remove.yaml
      var id = $("#notificationId").val();
      var details =
        {
          type: "progressIndicator",
          message: "Progress indicator with id = " + id
        };
      Office.context.mailbox.item.notificationMessages.addAsync(id, details, handleResult);
      ```
      ```javascript
      // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/35-notifications/add-getall-remove.yaml
      var id = $("#notificationId").val();
      var details =
        {
          type: "informationalMessage",
          message: "Non-persistent informational notification message with id = " + id,
          icon: "icon1",
          persistent: false
        };
      Office.context.mailbox.item.notificationMessages.addAsync(id, details, handleResult);
      ```
      ```javascript
      // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/35-notifications/add-getall-remove.yaml
      var id = $("#notificationId").val();
      var details =
        {
          type: "informationalMessage",
          message: "Persistent informational notification message with id = " + id,
          icon: "icon1",
          persistent: true
        };
      Office.context.mailbox.item.notificationMessages.addAsync(id, details, handleResult);
      ```
      ```javascript
      // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/35-notifications/add-getall-remove.yaml
      Office.context.mailbox.item.notificationMessages.getAllAsync(handleResult);          
      ```
      ```javascript
      // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/35-notifications/add-getall-remove.yaml
      var id = $("#notificationId").val();
      Office.context.mailbox.item.notificationMessages.replaceAsync(
        id,
        {
          type: "informationalMessage",
          message: "Notification message with id = " + id + " has been replaced with an informational message.",
          icon: "icon2",
          persistent: false
        },
        handleResult);
      ```
      ```javascript
      // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/35-notifications/add-getall-remove.yaml
      var id = $("#notificationId").val();
      Office.context.mailbox.item.notificationMessages.removeAsync(id, handleResult);
      ```
    name: notificationMessages
    fullName: notificationMessages
    langs:
      - typeScript
    type: property
    syntax:
      content: 'notificationMessages: NotificationMessages;'
      return:
        type:
          - 'outlook!Office.NotificationMessages:interface'
  - uid: 'outlook!Office.MessageCompose#removeAttachmentAsync:member(1)'
    summary: |-
      Удаляет вложение из сообщения или встречи.

      Метод `removeAttachmentAsync` удаляет из элемента вложение с указанным идентификатором. Идентификатор вложения рекомендуется использовать для удаления вложения, только если оно добавлено тем же почтовым приложением в ходе текущего сеанса. В Outlook в Интернете и на мобильных устройствах идентификатор вложения действителен только в течение одного сеанса. Сеанс переходит к моменту, когда пользователь закрывает приложение, или если пользователь начинает создание встроенной формы, затем извлекает форму, чтобы продолжить работу в отдельном окне.

      \[[Набор API: Mailbox 1,1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      ** [Минимальный уровень](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- --> разрешений**:`ReadWriteItem`

      ** [Соответствующий режим](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- --> Outlook**: создание сообщения

      **Ошибки**:

      - `InvalidAttachmentId`<!-- -->: Идентификатор вложения не существует.

      #### <a name="examples"></a>Примеры

      ```javascript
      // The following code removes an attachment with an identifier of '0'.
      Office.context.mailbox.item.removeAttachmentAsync(
          '0',
          { asyncContext : null },
          function (asyncResult)
          {
              console.log(asyncResult.status);
          }
      );
      ```
      ```javascript
      // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/40-attachments/attachments-compose.yaml
      Office.context.mailbox.item.removeAttachmentAsync(
          $("#attachmentId").val(),
          { asyncContext : null },
          function(result)
          {
              if (result.status !== Office.AsyncResultStatus.Succeeded) {
                  console.error(`${result.error.message}`);
              } else {
                  console.log(`Attachment removed successfully.`);
              }
          }
      );
      ```
    name: 'removeAttachmentAsync(attachmentId, options, callback)'
    fullName: 'removeAttachmentAsync(attachmentId, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'removeAttachmentAsync(attachmentId: string, options?: Office.AsyncContextOptions, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: attachmentId
          description: Идентификатор удаляемого вложения.
          type:
            - string
        - id: options
          description: 'Необязательное. Объектный литерал, содержащий одно или несколько из указанных ниже свойств. `asyncContext`<!-- -->: Разработчики могут предоставить любой объект, к которому необходимо получить доступ, в методе обратного вызова.'
          type:
            - 'office!Office.AsyncContextOptions:interface'
        - id: callback
          description: 'Необязательное. После выполнения метода функция, переданная в `callback` параметре, вызывается с помощью одного параметра типа`Office.AsyncResult`<!-- -->. Если удалить вложение не удается, свойство `asyncResult.error` содержит код ошибки с указанием ее причины.'
          type:
            - 'outlook!Office.MessageCompose#removeAttachmentAsync~0:complex'
  - uid: 'outlook!Office.MessageCompose#removeAttachmentAsync:member(2)'
    summary: |-
      Удаляет вложение из сообщения или встречи.

      Метод `removeAttachmentAsync` удаляет из элемента вложение с указанным идентификатором. Идентификатор вложения рекомендуется использовать для удаления вложения, только если оно добавлено тем же почтовым приложением в ходе текущего сеанса. В Outlook в Интернете и на мобильных устройствах идентификатор вложения действителен только в течение одного сеанса. Сеанс переходит к моменту, когда пользователь закрывает приложение, или если пользователь начинает создание встроенной формы, затем извлекает форму, чтобы продолжить работу в отдельном окне.

      \[[Набор API: Mailbox 1,1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      ** [Минимальный уровень](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- --> разрешений**:`ReadWriteItem`

      ** [Соответствующий режим](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- --> Outlook**: создание сообщения

      **Ошибки**:

      - `InvalidAttachmentId`<!-- -->: Идентификатор вложения не существует.
    name: 'removeAttachmentAsync(attachmentId, callback)'
    fullName: 'removeAttachmentAsync(attachmentId, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'removeAttachmentAsync(attachmentId: string, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: attachmentId
          description: Идентификатор удаляемого вложения.
          type:
            - string
        - id: callback
          description: 'Необязательное. После выполнения метода функция, переданная в `callback` параметре, вызывается с помощью одного параметра типа`Office.AsyncResult`<!-- -->. Если удалить вложение не удается, свойство `asyncResult.error` содержит код ошибки с указанием ее причины.'
          type:
            - 'outlook!Office.MessageCompose#removeAttachmentAsync~1:complex'
  - uid: 'outlook!Office.MessageCompose#removeHandlerAsync:member(1)'
    summary: |-
      Удаляет обработчиков для поддерживаемого типа события. **Note**: события доступны только в области задач.

      Обратитесь к [разделу события](https://docs.microsoft.com/office/dev/add-ins/reference/objectmodel/preview-requirement-set/office.context.mailbox.item#events) объектной модели элемента для поддерживаемых событий.

      \[[Набор API: Mailbox 1,7](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      ** [Минимальный уровень](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- --> разрешений**:`ReadItem`

      ** [Соответствующий режим](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- --> Outlook**: создание сообщения
    name: 'removeHandlerAsync(eventType, options, callback)'
    fullName: 'removeHandlerAsync(eventType, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'removeHandlerAsync(eventType: Office.EventType | string, options?: Office.AsyncContextOptions, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: eventType
          description: 'Событие, которое должно отменить обработчик.'
          type:
            - 'outlook!Office.MessageCompose#removeHandlerAsync~0:complex'
        - id: options
          description: 'Необязательное. Объектный литерал, содержащий одно или несколько из указанных ниже свойств. `asyncContext`<!-- -->: Разработчики могут предоставить любой объект, к которому необходимо получить доступ, в методе обратного вызова.'
          type:
            - 'office!Office.AsyncContextOptions:interface'
        - id: callback
          description: 'Необязательное. После выполнения метода функция, переданная в `callback` параметр, вызывается с помощью одного параметра,`asyncResult`<!-- -->, представляющий собой `Office.AsyncResult` объект.'
          type:
            - 'outlook!Office.MessageCompose#removeHandlerAsync~1:complex'
  - uid: 'outlook!Office.MessageCompose#removeHandlerAsync:member(2)'
    summary: |-
      Удаляет обработчиков для поддерживаемого типа события. **Note**: события доступны только в области задач.

      Обратитесь к [разделу события](https://docs.microsoft.com/office/dev/add-ins/reference/objectmodel/preview-requirement-set/office.context.mailbox.item#events) объектной модели элемента для поддерживаемых событий.

      \[[Набор API: Mailbox 1,7](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      ** [Минимальный уровень](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- --> разрешений**:`ReadItem`

      ** [Соответствующий режим](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- --> Outlook**: создание сообщения
    name: 'removeHandlerAsync(eventType, callback)'
    fullName: 'removeHandlerAsync(eventType, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'removeHandlerAsync(eventType: Office.EventType | string, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: eventType
          description: 'Событие, которое должно отменить обработчик.'
          type:
            - 'outlook!Office.MessageCompose#removeHandlerAsync~2:complex'
        - id: callback
          description: 'Необязательное. После выполнения метода функция, переданная в `callback` параметр, вызывается с помощью одного параметра,`asyncResult`<!-- -->, представляющий собой `Office.AsyncResult` объект.'
          type:
            - 'outlook!Office.MessageCompose#removeHandlerAsync~3:complex'
  - uid: 'outlook!Office.MessageCompose#saveAsync:member(1)'
    summary: |-
      Асинхронно сохраняет элемент.

      При вызове этот метод сохраняет текущее сообщение в виде черновика и возвращает идентификатор элемента с помощью метода обратного вызова. В Outlook в Интернете или интерактивном режиме Outlook этот элемент сохраняется на сервере. В Outlook в режиме кэширования этот элемент сохраняется в локальном кэше.

      Если метод `saveAsync` вызывается для встречи в режиме создания, она сохраняется как обычная встреча в календаре пользователя, а не как черновик. При сохранении новой встречи приглашения не отправляются. При сохранении существующей встречи уведомления отправляются добавленным или удаленным участникам.

      **Note**: Если надстройка вызывает `saveAsync` элемент в режиме создания, чтобы получить идентификатор элемента для использования с EWS или REST API, следует помнить, что в режиме кэширования может потребоваться некоторое время, прежде чем элемент будет фактически синхронизирован с сервером. Пока элемент не будет синхронизирован, использование itemId возвратит ошибку.

      \[[Набор API: Mailbox 1,3](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      ** [Минимальный уровень](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- --> разрешений**:`ReadWriteItem`

      ** [Соответствующий режим](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- --> Outlook**: создание сообщения

      **Ошибки**:

      - `InvalidAttachmentId`<!-- -->: Идентификатор вложения не существует.
    name: 'saveAsync(options, callback)'
    fullName: 'saveAsync(options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'saveAsync(options: Office.AsyncContextOptions, callback: (asyncResult: Office.AsyncResult<string>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: options
          description: 'Объектный литерал, содержащий одно или несколько из указанных ниже свойств. `asyncContext`<!-- -->: Разработчики могут предоставить любой объект, к которому необходимо получить доступ, в методе обратного вызова.'
          type:
            - 'office!Office.AsyncContextOptions:interface'
        - id: callback
          description: 'После выполнения метода функция, переданная в `callback` параметре, вызывается с помощью одного параметра типа`Office.AsyncResult`<!-- -->.'
          type:
            - 'outlook!Office.MessageCompose#saveAsync~0:complex'
  - uid: 'outlook!Office.MessageCompose#saveAsync:member(2)'
    summary: |-
      Асинхронно сохраняет элемент.

      При вызове этот метод сохраняет текущее сообщение в виде черновика и возвращает идентификатор элемента с помощью метода обратного вызова. В Outlook в Интернете или интерактивном режиме Outlook этот элемент сохраняется на сервере. В Outlook в режиме кэширования этот элемент сохраняется в локальном кэше.

      Если метод `saveAsync` вызывается для встречи в режиме создания, она сохраняется как обычная встреча в календаре пользователя, а не как черновик. При сохранении новой встречи приглашения не отправляются. При сохранении существующей встречи уведомления отправляются добавленным или удаленным участникам.

      **Note**: Если надстройка вызывает `saveAsync` элемент в режиме создания, чтобы получить идентификатор элемента для использования с EWS или REST API, следует помнить, что в режиме кэширования может потребоваться некоторое время, прежде чем элемент будет фактически синхронизирован с сервером. До окончания синхронизации элемента применение параметра `itemId` будет приводить к ошибке.

      \[[Набор API: Mailbox 1,3](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      ** [Минимальный уровень](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- --> разрешений**:`ReadWriteItem`

      ** [Соответствующий режим](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- --> Outlook**: создание сообщения

      **Ошибки**:

      - `InvalidAttachmentId`<!-- -->: Идентификатор вложения не существует.

      #### <a name="examples"></a>Примеры

      ```javascript
      Office.context.mailbox.item.saveAsync(
          function callback(result) {
              // Process the result.
          });

      // The following is an example of the
      // `result` parameter passed to the
      // callback function. The `value`
      // property contains the item ID of
      // the item.
      {
          "value": "AAMkADI5...AAA=",
          "status": "succeeded"
      }
      ```
    name: saveAsync(callback)
    fullName: saveAsync(callback)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'saveAsync(callback: (asyncResult: Office.AsyncResult<string>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: callback
          description: 'После выполнения метода функция, переданная в `callback` параметре, вызывается с помощью одного параметра типа`Office.AsyncResult`<!-- -->.'
          type:
            - 'outlook!Office.MessageCompose#saveAsync~1:complex'
  - uid: 'outlook!Office.MessageCompose#seriesId:member'
    summary: |-
      Получает идентификатор ряда, к которому принадлежит экземпляр.

      В Outlook в Интернете и на настольных клиентах `seriesId` возвращается идентификатор веб-служб Exchange (EWS) родительского элемента (ряда), к которому принадлежит этот элемент. Однако в iOS и Android seriesId возвращает идентификатор REST родительского элемента.

      **Note**: идентификатор, возвращаемый `seriesId` свойством, совпадает с идентификатором элемента веб-служб Exchange. `seriesId`Свойство не совпадает с идентификаторами Outlook, используемыми в REST API Outlook. Перед выполнением вызовов API REST, использующих это значение, его необходимо преобразовать с помощью метода`Office.context.mailbox.convertToRestId`<!-- -->. Дополнительные сведения см. в статье [Использование REST API Outlook из надстройки Outlook](https://docs.microsoft.com/office/dev/add-ins/outlook/use-rest-api)<!-- -->.

      `seriesId`Свойство возвращает `null` элементы, у которых нет родительских элементов, таких как одиночные встречи, элементы ряда или приглашения на собрание, и возвращаемые `undefined` для других элементов, не являющиеся приглашениями на собрания.

      \[[Набор API: Mailbox 1,7](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      ** [Минимальный уровень](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- --> разрешений**:`ReadItem`

      ** [Соответствующий режим](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- --> Outlook**: создание сообщения

      #### <a name="examples"></a>Примеры

      ```javascript
      // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/50-recurrence/get-series-id.yaml
      var seriesId = Office.context.mailbox.item.seriesId;

      if (seriesId === undefined) {
        console.log("This is a message that's not a meeting request.");
      } else if (seriesId === null) {
        console.log("This is a single appointment, a parent series, or a meeting request for a series or single meeting.");
      } else {
        console.log("This is an instance belonging to series with ID " + seriesId);
      }
      ```
    name: seriesId
    fullName: seriesId
    langs:
      - typeScript
    type: property
    syntax:
      content: 'seriesId: string;'
      return:
        type:
          - string
  - uid: 'outlook!Office.MessageCompose#setSelectedDataAsync:member(1)'
    summary: |-
      Асинхронно вставляет данные в текст или тему сообщения.

      Метод `setSelectedDataAsync` вставляет указанную строку в местоположение курсора в теме или тексте элемента либо, если текст выделен в редакторе, он заменяет выделенный текст. Если курсор находится вне текста или темы элемента, возвращается ошибка. После вставки курсор помещается в конец вставленного содержимого.

      \[[Набор API: Mailbox 1,2](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      ** [Минимальный уровень](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- --> разрешений**:`ReadWriteItem`

      ** [Соответствующий режим](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- --> Outlook**: создание сообщения

      **Ошибки**:

      - `InvalidAttachmentId`<!-- -->: Идентификатор вложения не существует.

      #### <a name="examples"></a>Примеры

      ```javascript
      Office.context.mailbox.item.setSelectedDataAsync("<b>Hello World!</b>", { coercionType : "html" });
      ```
    name: 'setSelectedDataAsync(data, options, callback)'
    fullName: 'setSelectedDataAsync(data, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setSelectedDataAsync(data: string, options?: Office.AsyncContextOptions & CoercionTypeOptions, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: data
          description: "Вставляемые данные. Объем данных не должен превышать 1\_000\_000 символов. Если передано больше 1\_000\_000 символов, возвращается исключение `ArgumentOutOfRange`."
          type:
            - string
        - id: options
          description: 'Необязательное. Объектный литерал, содержащий одно или несколько из указанных ниже свойств. `asyncContext`<!-- -->: Разработчики могут предоставить любой объект, к которому необходимо получить доступ, в методе обратного вызова. `coercionType`<!-- -->: Если текст, текущий стиль применяется в Outlook в Интернете и на настольных клиентах. Если поле представляет собой редактор HTML, вставляются только текстовые данные, даже если они имеют формат HTML. Если HTML и поле поддерживает HTML (тема не используется), текущий стиль применяется в Outlook в Интернете, а в Outlook для настольных компьютеров применяется стиль по умолчанию. Если поле является текстовым, возвращается ошибка `InvalidDataFormat`. Если свойство `coercionType` не задано, результат зависит от поля: если поле имеет формат HTML, используется текст в формате HTML, а если поле текстовое, применяется обычный текст.'
          type:
            - 'outlook!Office.MessageCompose#setSelectedDataAsync~0:complex'
        - id: callback
          description: 'Необязательное. После выполнения метода функция, переданная в `callback` параметре, вызывается с помощью одного параметра типа`Office.AsyncResult`<!-- -->.'
          type:
            - 'outlook!Office.MessageCompose#setSelectedDataAsync~1:complex'
  - uid: 'outlook!Office.MessageCompose#setSelectedDataAsync:member(2)'
    summary: |-
      Асинхронно вставляет данные в текст или тему сообщения.

      Метод `setSelectedDataAsync` вставляет указанную строку в местоположение курсора в теме или тексте элемента либо, если текст выделен в редакторе, он заменяет выделенный текст. Если курсор находится вне текста или темы элемента, возвращается ошибка. После вставки курсор помещается в конец вставленного содержимого.

      \[[Набор API: Mailbox 1,2](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      ** [Минимальный уровень](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- --> разрешений**:`ReadWriteItem`

      ** [Соответствующий режим](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- --> Outlook**: создание сообщения

      **Ошибки**:

      - `InvalidAttachmentId`<!-- -->: Идентификатор вложения не существует.

      #### <a name="examples"></a>Примеры

      ```javascript
      Office.context.mailbox.item.setSelectedDataAsync("Hello World!");
      ```
      ```javascript
      // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/20-item-body/set-selected-data.yaml
      Office.context.mailbox.item.setSelectedDataAsync("Replaced", function(asyncResult) {
        if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
          console.log("Selected text has been updated successfully.");
        } else {
          console.error(asyncResult.error);
        }
      });
      ```
    name: 'setSelectedDataAsync(data, callback)'
    fullName: 'setSelectedDataAsync(data, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setSelectedDataAsync(data: string, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: data
          description: "Вставляемые данные. Объем данных не должен превышать 1\_000\_000 символов. Если передано больше 1\_000\_000 символов, возвращается исключение `ArgumentOutOfRange`."
          type:
            - string
        - id: callback
          description: 'Необязательное. После выполнения метода функция, переданная в `callback` параметре, вызывается с помощью одного параметра типа`Office.AsyncResult`<!-- -->.'
          type:
            - 'outlook!Office.MessageCompose#setSelectedDataAsync~2:complex'
  - uid: 'outlook!Office.MessageCompose#subject:member'
    summary: |-
      Получает или задает описание, которое отображается в поле темы элемента.

      Свойство `subject` получает или задает всю тему элемента для отправки с почтового сервера.

      Свойство `subject` возвращает объект `Subject`, который предоставляет методы для получения и задания темы.
    remarks: |-
      ** [Минимальный уровень](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- --> разрешений**:`ReadItem`

      ** [Соответствующий режим](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- --> Outlook**: создание сообщения

      #### <a name="examples"></a>Примеры

      ```javascript
      // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/90-other-item-apis/get-set-subject-compose.yaml
      Office.context.mailbox.item.subject.getAsync((result) => {
        if (result.status !== Office.AsyncResultStatus.Succeeded) {
          console.error(`Action failed with message ${result.error.message}`);
          return;
        }
        console.log(`Subject: ${result.value}`);
      });
      ```
      ```javascript
      // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/90-other-item-apis/get-set-subject-compose.yaml
      let subject = "Hello World!";
      Office.context.mailbox.item.subject.setAsync(subject, (result) => {
        if (result.status !== Office.AsyncResultStatus.Succeeded) {
          console.error(`Action failed with message ${result.error.message}`);
          return;
        }
        console.log(`Successfully set subject to ${subject}`);
      });
      ```
    name: subject
    fullName: subject
    langs:
      - typeScript
    type: property
    syntax:
      content: 'subject: Subject;'
      return:
        type:
          - 'outlook!Office.Subject:interface'
  - uid: 'outlook!Office.MessageCompose#to:member'
    summary: "Предоставляет доступ к получателям, указанным в строке Кому сообщения. Тип объекта и уровень доступа зависят от режима текущего элемента.\n\n`to`Свойство возвращает объект [Recipients](xref:outlook!Office.Recipients:interface) , который предоставляет методы для получения или обновления получателей в строке \" **Кому** \" сообщения. Коллекция может включать не более 100 элементов по умолчанию. Однако в Outlook в Интернете, Windows и Mac применяются следующие пределы.\n\n- Максимальное количество элементов — 500.\n\n- Установить ограничение количества элементов на вызов\_— не более 100, общего количества\_— не более 500."
    remarks: |-
      ** [Минимальный уровень](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- --> разрешений**:`ReadItem`

      ** [Соответствующий режим](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- --> Outlook**: создание сообщения

      #### <a name="examples"></a>Примеры

      ```javascript
      Office.context.mailbox.item.to.setAsync( ['alice@contoso.com', 'bob@contoso.com'] );
      Office.context.mailbox.item.to.addAsync( ['jason@contoso.com'] );
      Office.context.mailbox.item.to.getAsync(callback);

      function callback(asyncResult) {
          var arrayOfToRecipients = asyncResult.value;
      }
      ```
      ```javascript
      // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/30-recipients-and-attendees/get-set-to-message-compose.yaml
      Office.context.mailbox.item.to.getAsync(function(asyncResult) {
        if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
          var msgTo = asyncResult.value;
          console.log("Message being sent to:");
          for (var i = 0; i < msgTo.length; i++) {
            console.log(msgTo[i].displayName + " (" + msgTo[i].emailAddress + ")");
          }
        } else {
          console.error(asyncResult.error);
        }
      });
      ```
      ```javascript
      // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/30-recipients-and-attendees/get-set-to-message-compose.yaml
      var email = $("#emailTo")
        .val()
        .toString();
      var emailArray = [email];
      Office.context.mailbox.item.to.setAsync(emailArray, function(asyncResult) {
        if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
          console.log("Succeeded in setting To field.");
        } else {
          console.error(asyncResult.error);
        }
      });
      ```
    name: to
    fullName: to
    langs:
      - typeScript
    type: property
    syntax:
      content: 'to: Recipients;'
      return:
        type:
          - 'outlook!Office.Recipients:interface'
references:
  - uid: 'outlook!Office.Message:interface'
    name: Message
  - uid: 'outlook!Office.ItemCompose:interface'
    name: ItemCompose
  - uid: 'outlook!Office.MessageCompose#addFileAttachmentAsync~0:complex'
    name: 'Office.AsyncContextOptions & { isInline: boolean }'
    fullName: 'Office.AsyncContextOptions & { isInline: boolean }'
    spec.typeScript:
      - uid: 'office!Office.AsyncContextOptions:interface'
        name: Office.AsyncContextOptions
        fullName: Office.AsyncContextOptions
      - name: ' & { isInline: boolean }'
        fullName: ' & { isInline: boolean }'
  - uid: 'outlook!Office.MessageCompose#addFileAttachmentAsync~1:complex'
    name: '(asyncResult: Office.AsyncResult<string>) => void'
    fullName: '(asyncResult: Office.AsyncResult<string>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'office!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <string>) => void
        fullName: <string>) => void
  - uid: 'outlook!Office.MessageCompose#addFileAttachmentAsync~2:complex'
    name: '(asyncResult: Office.AsyncResult<string>) => void'
    fullName: '(asyncResult: Office.AsyncResult<string>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'office!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <string>) => void
        fullName: <string>) => void
  - uid: 'outlook!Office.MessageCompose#addFileAttachmentFromBase64Async~0:complex'
    name: 'Office.AsyncContextOptions & { isInline: boolean }'
    fullName: 'Office.AsyncContextOptions & { isInline: boolean }'
    spec.typeScript:
      - uid: 'office!Office.AsyncContextOptions:interface'
        name: Office.AsyncContextOptions
        fullName: Office.AsyncContextOptions
      - name: ' & { isInline: boolean }'
        fullName: ' & { isInline: boolean }'
  - uid: 'outlook!Office.MessageCompose#addFileAttachmentFromBase64Async~1:complex'
    name: '(asyncResult: Office.AsyncResult<string>) => void'
    fullName: '(asyncResult: Office.AsyncResult<string>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'office!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <string>) => void
        fullName: <string>) => void
  - uid: 'outlook!Office.MessageCompose#addFileAttachmentFromBase64Async~2:complex'
    name: '(asyncResult: Office.AsyncResult<string>) => void'
    fullName: '(asyncResult: Office.AsyncResult<string>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'office!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <string>) => void
        fullName: <string>) => void
  - uid: 'outlook!Office.MessageCompose#addHandlerAsync~0:complex'
    name: Office.EventType | string
    fullName: Office.EventType | string
    spec.typeScript:
      - uid: 'office!Office.EventType:enum'
        name: Office.EventType
        fullName: Office.EventType
      - name: ' | string'
        fullName: ' | string'
  - uid: 'office!Office.AsyncContextOptions:interface'
    name: Office.AsyncContextOptions
  - uid: 'outlook!Office.MessageCompose#addHandlerAsync~1:complex'
    name: '(asyncResult: Office.AsyncResult<void>) => void'
    fullName: '(asyncResult: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'office!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void
  - uid: 'outlook!Office.MessageCompose#addHandlerAsync~2:complex'
    name: Office.EventType | string
    fullName: Office.EventType | string
    spec.typeScript:
      - uid: 'office!Office.EventType:enum'
        name: Office.EventType
        fullName: Office.EventType
      - name: ' | string'
        fullName: ' | string'
  - uid: 'outlook!Office.MessageCompose#addHandlerAsync~3:complex'
    name: '(asyncResult: Office.AsyncResult<void>) => void'
    fullName: '(asyncResult: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'office!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void
  - uid: 'outlook!Office.MessageCompose#addItemAttachmentAsync~0:complex'
    name: '(asyncResult: Office.AsyncResult<string>) => void'
    fullName: '(asyncResult: Office.AsyncResult<string>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'office!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <string>) => void
        fullName: <string>) => void
  - uid: 'outlook!Office.MessageCompose#addItemAttachmentAsync~1:complex'
    name: '(asyncResult: Office.AsyncResult<string>) => void'
    fullName: '(asyncResult: Office.AsyncResult<string>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'office!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <string>) => void
        fullName: <string>) => void
  - uid: 'outlook!Office.Recipients:interface'
    name: Recipients
  - uid: 'outlook!Office.Body:interface'
    name: Body
  - uid: 'outlook!Office.Categories:interface'
    name: Categories
  - uid: 'outlook!Office.MessageCompose#disableClientSignatureAsync~0:complex'
    name: '(asyncResult: Office.AsyncResult<void>) => void'
    fullName: '(asyncResult: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'office!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void
  - uid: 'outlook!Office.MessageCompose#disableClientSignatureAsync~1:complex'
    name: '(asyncResult: Office.AsyncResult<void>) => void'
    fullName: '(asyncResult: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'office!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void
  - uid: 'outlook!Office.From:interface'
    name: From
  - uid: 'outlook!Office.MessageCompose#getAttachmentContentAsync~0:complex'
    name: '(asyncResult: Office.AsyncResult<AttachmentContent>) => void'
    fullName: '(asyncResult: Office.AsyncResult<Office.AttachmentContent>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'office!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <
        fullName: <
      - uid: 'outlook!Office.AttachmentContent:interface'
        name: AttachmentContent
        fullName: Office.AttachmentContent
      - name: '>) => void'
        fullName: '>) => void'
  - uid: 'outlook!Office.MessageCompose#getAttachmentContentAsync~1:complex'
    name: '(asyncResult: Office.AsyncResult<AttachmentContent>) => void'
    fullName: '(asyncResult: Office.AsyncResult<Office.AttachmentContent>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'office!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <
        fullName: <
      - uid: 'outlook!Office.AttachmentContent:interface'
        name: AttachmentContent
        fullName: Office.AttachmentContent
      - name: '>) => void'
        fullName: '>) => void'
  - uid: 'outlook!Office.MessageCompose#getAttachmentsAsync~0:complex'
    name: '(asyncResult: Office.AsyncResult<AttachmentDetailsCompose[]>) => void'
    fullName: '(asyncResult: Office.AsyncResult<Office.AttachmentDetailsCompose[]>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'office!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <
        fullName: <
      - uid: 'outlook!Office.AttachmentDetailsCompose:interface'
        name: AttachmentDetailsCompose
        fullName: Office.AttachmentDetailsCompose
      - name: '[]>) => void'
        fullName: '[]>) => void'
  - uid: 'outlook!Office.MessageCompose#getAttachmentsAsync~1:complex'
    name: '(asyncResult: Office.AsyncResult<AttachmentDetailsCompose[]>) => void'
    fullName: '(asyncResult: Office.AsyncResult<Office.AttachmentDetailsCompose[]>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'office!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <
        fullName: <
      - uid: 'outlook!Office.AttachmentDetailsCompose:interface'
        name: AttachmentDetailsCompose
        fullName: Office.AttachmentDetailsCompose
      - name: '[]>) => void'
        fullName: '[]>) => void'
  - uid: 'outlook!Office.MessageCompose#getComposeTypeAsync~0:complex'
    name: '(asyncResult: Office.AsyncResult<any>) => void'
    fullName: '(asyncResult: Office.AsyncResult<any>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'office!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <any>) => void
        fullName: <any>) => void
  - uid: 'outlook!Office.MessageCompose#getComposeTypeAsync~1:complex'
    name: '(asyncResult: Office.AsyncResult<any>) => void'
    fullName: '(asyncResult: Office.AsyncResult<any>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'office!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <any>) => void
        fullName: <any>) => void
  - uid: 'outlook!Office.MessageCompose#getInitializationContextAsync~0:complex'
    name: '(asyncResult: Office.AsyncResult<string>) => void'
    fullName: '(asyncResult: Office.AsyncResult<string>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'office!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <string>) => void
        fullName: <string>) => void
  - uid: 'outlook!Office.MessageCompose#getInitializationContextAsync~1:complex'
    name: '(asyncResult: Office.AsyncResult<string>) => void'
    fullName: '(asyncResult: Office.AsyncResult<string>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'office!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <string>) => void
        fullName: <string>) => void
  - uid: 'outlook!Office.MessageCompose#getItemIdAsync~0:complex'
    name: '(asyncResult: Office.AsyncResult<string>) => void'
    fullName: '(asyncResult: Office.AsyncResult<string>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'office!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <string>) => void
        fullName: <string>) => void
  - uid: 'outlook!Office.MessageCompose#getItemIdAsync~1:complex'
    name: '(asyncResult: Office.AsyncResult<string>) => void'
    fullName: '(asyncResult: Office.AsyncResult<string>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'office!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <string>) => void
        fullName: <string>) => void
  - uid: 'outlook!Office.MessageCompose#getSelectedDataAsync~0:complex'
    name: Office.CoercionType | string
    fullName: Office.CoercionType | string
    spec.typeScript:
      - uid: 'office!Office.CoercionType:enum'
        name: Office.CoercionType
        fullName: Office.CoercionType
      - name: ' | string'
        fullName: ' | string'
  - uid: 'outlook!Office.MessageCompose#getSelectedDataAsync~1:complex'
    name: '(asyncResult: Office.AsyncResult<any>) => void'
    fullName: '(asyncResult: Office.AsyncResult<any>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'office!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <any>) => void
        fullName: <any>) => void
  - uid: 'outlook!Office.MessageCompose#getSelectedDataAsync~2:complex'
    name: Office.CoercionType | string
    fullName: Office.CoercionType | string
    spec.typeScript:
      - uid: 'office!Office.CoercionType:enum'
        name: Office.CoercionType
        fullName: Office.CoercionType
      - name: ' | string'
        fullName: ' | string'
  - uid: 'outlook!Office.MessageCompose#getSelectedDataAsync~3:complex'
    name: '(asyncResult: Office.AsyncResult<any>) => void'
    fullName: '(asyncResult: Office.AsyncResult<any>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'office!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <any>) => void
        fullName: <any>) => void
  - uid: 'outlook!Office.MessageCompose#getSharedPropertiesAsync~0:complex'
    name: '(asyncResult: Office.AsyncResult<SharedProperties>) => void'
    fullName: '(asyncResult: Office.AsyncResult<Office.SharedProperties>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'office!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <
        fullName: <
      - uid: 'outlook!Office.SharedProperties:interface'
        name: SharedProperties
        fullName: Office.SharedProperties
      - name: '>) => void'
        fullName: '>) => void'
  - uid: 'outlook!Office.MessageCompose#getSharedPropertiesAsync~1:complex'
    name: '(asyncResult: Office.AsyncResult<SharedProperties>) => void'
    fullName: '(asyncResult: Office.AsyncResult<Office.SharedProperties>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'office!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <
        fullName: <
      - uid: 'outlook!Office.SharedProperties:interface'
        name: SharedProperties
        fullName: Office.SharedProperties
      - name: '>) => void'
        fullName: '>) => void'
  - uid: 'outlook!Office.InternetHeaders:interface'
    name: InternetHeaders
  - uid: 'outlook!Office.MessageCompose#isClientSignatureEnabledAsync~0:complex'
    name: '(asyncResult: Office.AsyncResult<boolean>) => void'
    fullName: '(asyncResult: Office.AsyncResult<boolean>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'office!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <boolean>) => void
        fullName: <boolean>) => void
  - uid: 'outlook!Office.MessageCompose#isClientSignatureEnabledAsync~1:complex'
    name: '(asyncResult: Office.AsyncResult<boolean>) => void'
    fullName: '(asyncResult: Office.AsyncResult<boolean>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'office!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <boolean>) => void
        fullName: <boolean>) => void
  - uid: 'outlook!Office.MessageCompose#itemType~0:complex'
    name: MailboxEnums.ItemType | string
    fullName: Office.MailboxEnums.ItemType | string
    spec.typeScript:
      - uid: 'outlook!Office.MailboxEnums.ItemType:enum'
        name: MailboxEnums.ItemType
        fullName: Office.MailboxEnums.ItemType
      - name: ' | string'
        fullName: ' | string'
  - uid: 'outlook!Office.MessageCompose#loadCustomPropertiesAsync~0:complex'
    name: '(asyncResult: Office.AsyncResult<CustomProperties>) => void'
    fullName: '(asyncResult: Office.AsyncResult<Office.CustomProperties>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'office!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <
        fullName: <
      - uid: 'outlook!Office.CustomProperties:interface'
        name: CustomProperties
        fullName: Office.CustomProperties
      - name: '>) => void'
        fullName: '>) => void'
  - uid: 'outlook!Office.NotificationMessages:interface'
    name: NotificationMessages
  - uid: 'outlook!Office.MessageCompose#removeAttachmentAsync~0:complex'
    name: '(asyncResult: Office.AsyncResult<void>) => void'
    fullName: '(asyncResult: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'office!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void
  - uid: 'outlook!Office.MessageCompose#removeAttachmentAsync~1:complex'
    name: '(asyncResult: Office.AsyncResult<void>) => void'
    fullName: '(asyncResult: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'office!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void
  - uid: 'outlook!Office.MessageCompose#removeHandlerAsync~0:complex'
    name: Office.EventType | string
    fullName: Office.EventType | string
    spec.typeScript:
      - uid: 'office!Office.EventType:enum'
        name: Office.EventType
        fullName: Office.EventType
      - name: ' | string'
        fullName: ' | string'
  - uid: 'outlook!Office.MessageCompose#removeHandlerAsync~1:complex'
    name: '(asyncResult: Office.AsyncResult<void>) => void'
    fullName: '(asyncResult: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'office!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void
  - uid: 'outlook!Office.MessageCompose#removeHandlerAsync~2:complex'
    name: Office.EventType | string
    fullName: Office.EventType | string
    spec.typeScript:
      - uid: 'office!Office.EventType:enum'
        name: Office.EventType
        fullName: Office.EventType
      - name: ' | string'
        fullName: ' | string'
  - uid: 'outlook!Office.MessageCompose#removeHandlerAsync~3:complex'
    name: '(asyncResult: Office.AsyncResult<void>) => void'
    fullName: '(asyncResult: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'office!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void
  - uid: 'outlook!Office.MessageCompose#saveAsync~0:complex'
    name: '(asyncResult: Office.AsyncResult<string>) => void'
    fullName: '(asyncResult: Office.AsyncResult<string>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'office!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <string>) => void
        fullName: <string>) => void
  - uid: 'outlook!Office.MessageCompose#saveAsync~1:complex'
    name: '(asyncResult: Office.AsyncResult<string>) => void'
    fullName: '(asyncResult: Office.AsyncResult<string>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'office!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <string>) => void
        fullName: <string>) => void
  - uid: 'outlook!Office.MessageCompose#setSelectedDataAsync~0:complex'
    name: Office.AsyncContextOptions & CoercionTypeOptions
    fullName: Office.AsyncContextOptions & Office.CoercionTypeOptions
    spec.typeScript:
      - uid: 'office!Office.AsyncContextOptions:interface'
        name: Office.AsyncContextOptions
        fullName: Office.AsyncContextOptions
      - name: ' & '
        fullName: ' & '
      - uid: 'outlook!Office.CoercionTypeOptions:interface'
        name: CoercionTypeOptions
        fullName: Office.CoercionTypeOptions
  - uid: 'outlook!Office.MessageCompose#setSelectedDataAsync~1:complex'
    name: '(asyncResult: Office.AsyncResult<void>) => void'
    fullName: '(asyncResult: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'office!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void
  - uid: 'outlook!Office.MessageCompose#setSelectedDataAsync~2:complex'
    name: '(asyncResult: Office.AsyncResult<void>) => void'
    fullName: '(asyncResult: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'office!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void
  - uid: 'outlook!Office.Subject:interface'
    name: Subject