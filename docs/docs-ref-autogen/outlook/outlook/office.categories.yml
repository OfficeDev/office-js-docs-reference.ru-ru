### YamlMime:UniversalReference
items:
  - uid: outlook.Office.Categories
    summary: |-
      Представляет категории элемента.

      В Outlook пользователь может группировать сообщения и встречи, используя категории для выделения их цветом. Пользователь определяет [категории в основном списке](xref:outlook.Office.MasterCategories) на своем почтовом ящике. Затем он может применить одну или несколько категорий к элементу.

      \[[Набор API: предварительный просмотр почтового ящика](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      ** [Минимальный уровень](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->разрешений**: ReadItem

      ** [Соответствующий режим](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->Outlook**: "создание" или "чтение"
    isPreview: true
    name: Office.Categories
    fullName: Office.Categories
    langs:
      - typeScript
    type: interface
    package: outlook
    children:
      - outlook.Office.Categories.addAsync
      - outlook.Office.Categories.addAsync_1
      - outlook.Office.Categories.getAsync
      - outlook.Office.Categories.getAsync_1
      - outlook.Office.Categories.removeAsync
      - outlook.Office.Categories.removeAsync_1
  - uid: outlook.Office.Categories.addAsync
    summary: 'Добавляет категории к элементу. Каждая категория должна быть указана в главном списке категории в этом почтовом ящике и иметь уникальное имя, но несколько категорий могут использовать один и тот же цвет.'
    remarks: |-
      ** [Минимальный уровень](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->разрешений**: ReadWriteItem

      ** [Соответствующий режим](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->Outlook**: "создание" или "чтение"

      **Ошибки**:

      - Инвалидкатегори: предоставлены недопустимые категории.
    isPreview: true
    name: 'addAsync(categories, options, callback)'
    fullName: 'addAsync(categories, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addAsync(categories: string[], options?: Office.AsyncContextOptions, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: categories
          description: 'Категории, добавляемые к элементу.'
          type:
            - 'string[]'
        - id: options
          description: 'Необязательно. Объектный литерал, содержащий одно или несколько из указанных ниже свойств. asyncContext: разработчики могут предоставить любой объект, к которому необходимо получить доступ, в методе обратного вызова.'
          type:
            - Office.AsyncContextOptions
        - id: callback
          description: |-
            Необязательно. После выполнения метода функция, переданная в параметре callback, вызывается с помощью одного параметра типа Office. AsyncResult.

            \[Набор API: предварительный просмотр почтового ящика\]
          type:
            - '(asyncResult: Office.AsyncResult<void>) => void'
  - uid: outlook.Office.Categories.addAsync_1
    summary: 'Добавляет категории к элементу. Каждая категория должна быть указана в главном списке категории в этом почтовом ящике и иметь уникальное имя, но несколько категорий могут использовать один и тот же цвет.'
    remarks: |-
      ** [Минимальный уровень](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->разрешений**: ReadWriteItem

      ** [Соответствующий режим](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->Outlook**: "создание" или "чтение"

      **Ошибки**:

      - Инвалидкатегори: предоставлены недопустимые категории.

      #### <a name="examples"></a>Примеры

      ```javascript
      // Note: In order for you to successfully add a category,
      // it must be in the mailbox categories master list.

      var categoriesToAdd = ["Urgent!"];

      Office.context.mailbox.item.categories.addAsync(categoriesToAdd, function (asyncResult) {
          if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
              console.log("Successfully added categories");
          } else {
              console.log("categories.addAsync call failed with error: " + asyncResult.error.message);
          }
      });
      ```
    isPreview: true
    name: 'addAsync(categories, callback)'
    fullName: 'addAsync(categories, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addAsync(categories: string[], callback: (asyncResult: Office.AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: categories
          description: 'Категории, добавляемые к элементу.'
          type:
            - 'string[]'
        - id: callback
          description: |-
            После выполнения метода функция, переданная в параметре callback, вызывается с помощью одного параметра типа Office. AsyncResult. Если добавление категорий завершается неудачей, свойство asyncResult. Error будет содержать код ошибки.

            \[Набор API: предварительный просмотр почтового ящика\]
          type:
            - '(asyncResult: Office.AsyncResult<void>) => void'
  - uid: outlook.Office.Categories.getAsync
    summary: Возвращает категории элемента.
    remarks: |-
      ** [Минимальный уровень](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->разрешений**: ReadItem

      ** [Соответствующий режим](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->Outlook**: "создание" или "чтение"
    isPreview: true
    name: 'getAsync(options, callback)'
    fullName: 'getAsync(options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getAsync(options: Office.AsyncContextOptions, callback: (asyncResult: Office.AsyncResult<CategoryDetails[]>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: options
          description: 'Объектный литерал, содержащий одно или несколько из указанных ниже свойств. asyncContext: разработчики могут предоставить любой объект, к которому необходимо получить доступ, в методе обратного вызова.'
          type:
            - Office.AsyncContextOptions
        - id: callback
          description: |-
            После выполнения метода функция, переданная в параметре callback, вызывается с помощью одного параметра типа Office. AsyncResult. Если добавление категорий завершается неудачей, свойство asyncResult. Error будет содержать код ошибки.

            \[Набор API: предварительный просмотр почтового ящика\]
          type:
            - '(asyncResult: Office.AsyncResult<CategoryDetails[]>) => void'
  - uid: outlook.Office.Categories.getAsync_1
    summary: Возвращает категории элемента.
    remarks: |-
      ** [Минимальный уровень](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->разрешений**: ReadItem

      ** [Соответствующий режим](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->Outlook**: "создание" или "чтение"

      #### <a name="examples"></a>Примеры

      ```javascript
      Office.context.mailbox.item.categories.getAsync(function (asyncResult) {
          if (asyncResult.status === Office.AsyncResultStatus.Failed) {
              console.log("Action failed with error: " + asyncResult.error.message);
          } else {
              var categories = asyncResult.value;
              console.log("Categories:");
              categories.forEach(function (item) {
                  console.log("-- " + JSON.stringify(item));
              });
          }
      });
      ```
    isPreview: true
    name: getAsync(callback)
    fullName: getAsync(callback)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getAsync(callback: (asyncResult: Office.AsyncResult<CategoryDetails[]>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: callback
          description: |-
            После выполнения метода функция, переданная в параметре callback, вызывается с помощью одного параметра типа Office. AsyncResult.

            \[Набор API: предварительный просмотр почтового ящика\]
          type:
            - '(asyncResult: Office.AsyncResult<CategoryDetails[]>) => void'
  - uid: outlook.Office.Categories.removeAsync
    summary: Удаляет категории из элемента.
    remarks: |-
      ** [Минимальный уровень](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->разрешений**: ReadWriteItem

      ** [Соответствующий режим](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->Outlook**: "создание" или "чтение"
    isPreview: true
    name: 'removeAsync(categories, options, callback)'
    fullName: 'removeAsync(categories, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'removeAsync(categories: string[], options?: Office.AsyncContextOptions, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: categories
          description: 'Категории, которые необходимо удалить из элемента.'
          type:
            - 'string[]'
        - id: options
          description: 'Необязательно. Объектный литерал, содержащий одно или несколько из указанных ниже свойств. asyncContext: разработчики могут предоставить любой объект, к которому необходимо получить доступ, в методе обратного вызова.'
          type:
            - Office.AsyncContextOptions
        - id: callback
          description: |-
            Необязательно. После выполнения метода функция, переданная в параметре callback, вызывается с помощью одного параметра типа Office. AsyncResult. Если не удается удалить категории, свойство asyncResult. Error будет содержать код ошибки.

            \[Набор API: предварительный просмотр почтового ящика\]
          type:
            - '(asyncResult: Office.AsyncResult<void>) => void'
  - uid: outlook.Office.Categories.removeAsync_1
    summary: Удаляет категории из элемента.
    remarks: |-
      ** [Минимальный уровень](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->разрешений**: ReadWriteItem

      ** [Соответствующий режим](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->Outlook**: "создание" или "чтение"

      #### <a name="examples"></a>Примеры

      ```javascript
      var categoriesToRemove = ["Urgent!"];

      Office.context.mailbox.item.categories.removeAsync(categoriesToRemove, function (asyncResult) {
          if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
              console.log("Successfully removed categories");
          } else {
              console.log("categories.removeAsync call failed with error: " + asyncResult.error.message);
          }
      });
      ```
    isPreview: true
    name: 'removeAsync(categories, callback)'
    fullName: 'removeAsync(categories, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'removeAsync(categories: string[], callback: (asyncResult: Office.AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: categories
          description: 'Категории, которые необходимо удалить из элемента.'
          type:
            - 'string[]'
        - id: callback
          description: |-
            После выполнения метода функция, переданная в параметре callback, вызывается с помощью одного параметра типа Office. AsyncResult. Если не удается удалить категории, свойство asyncResult. Error будет содержать код ошибки.

            \[Набор API: предварительный просмотр почтового ящика\]
          type:
            - '(asyncResult: Office.AsyncResult<void>) => void'