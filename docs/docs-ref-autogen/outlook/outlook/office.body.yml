### YamlMime:UniversalReference
items:
  - uid: 'outlook!Office.Body:interface'
    summary: |-
      Объект Body предоставляет методы для добавления и обновления содержимого сообщения или встречи. Он возвращается в свойстве body выбранного элемента.

      \[[Набор API: Mailbox 1,1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      ** [Минимальный уровень](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- --> разрешений**:`ReadItem`

      ** [Соответствующий режим](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- --> Outlook**: "создание" или "чтение"
    name: Office.Body
    fullName: Office.Body
    langs:
      - typeScript
    type: interface
    package: outlook!
    children:
      - 'outlook!Office.Body#appendOnSendAsync:member(1)'
      - 'outlook!Office.Body#appendOnSendAsync:member(2)'
      - 'outlook!Office.Body#getAsync:member(1)'
      - 'outlook!Office.Body#getAsync:member(2)'
      - 'outlook!Office.Body#getTypeAsync:member(1)'
      - 'outlook!Office.Body#getTypeAsync:member(2)'
      - 'outlook!Office.Body#prependAsync:member(1)'
      - 'outlook!Office.Body#prependAsync:member(2)'
      - 'outlook!Office.Body#setAsync:member(1)'
      - 'outlook!Office.Body#setAsync:member(2)'
      - 'outlook!Office.Body#setSelectedDataAsync:member(1)'
      - 'outlook!Office.Body#setSelectedDataAsync:member(2)'
      - 'outlook!Office.Body#setSignatureAsync:member(1)'
      - 'outlook!Office.Body#setSignatureAsync:member(2)'
  - uid: 'outlook!Office.Body#appendOnSendAsync:member(1)'
    summary: |-
      Добавляется к отправке указанного содержимого в конец тела элемента после любой подписи.

      Если пользователь запускает надстройки, реализующие [функцию on-Send, с помощью \` ItemSend \` в манифесте](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-on-send-addins?tabs=windows)<!-- -->, дополните присоединение при отправке перед функцией on – Send.

      **Важно!** если надстройка реализует функцию on-Send и вызывается `appendOnSendAsync` в `ItemSend` обработчике, `appendOnSendAsync` вызов возвращает ошибку, так как этот сценарий не поддерживается.

      **Важно!** для использования `appendOnSendAsync`<!-- -->`ExtendedPermissions`узел манифеста должен включать `AppendOnSend` расширенное разрешение.

      **Note**: чтобы очистить данные из предыдущего `appendOnSendAsync` вызова, можно снова вызвать его, указав `data` для параметра значение `null`<!-- -->.

      \[[Набор API: предварительный просмотр почтового ящика](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      ** [Минимальный уровень](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- --> разрешений**:`ReadWriteItem`

      ** [Соответствующий режим](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- --> Outlook**: создание

      **Ошибки**:

      - `DataExceedsMaximumSize`<!-- -->: `data` Длина параметра превышает 5 000 символов.

      - `InvalidFormatError`<!-- -->: `options.coercionType` Для параметра задано значение, `Office.CoercionType.Html` но текст сообщения отображается в виде обычного текста.

      #### <a name="examples"></a>Примеры

      ```javascript
      Office.context.mailbox.item.body.appendOnSendAsync(
          "P.S. This text was appended on send.",
          {coercionType: Office.CoercionType.Html},
          function (asyncResult) {
              if (asyncResult.status === Office.AsyncResultStatus.Failed) {
                  console.log("Action failed with error: " + asyncResult.error.message);
              }
          }
      );
      ```
    isPreview: true
    name: 'appendOnSendAsync(data, options, callback)'
    fullName: 'appendOnSendAsync(data, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'appendOnSendAsync(data: string, options?: Office.AsyncContextOptions & CoercionTypeOptions, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: data
          description: 'Строка, которую необходимо добавить в конец тела. Длина строки ограничена 5 000 символами.'
          type:
            - string
        - id: options
          description: 'Необязательное свойство. Объектный литерал, содержащий одно или несколько из указанных ниже свойств. `asyncContext`<!-- -->: Разработчики могут предоставить любой объект, к которому необходимо получить доступ, в методе обратного вызова. `coercionType`<!-- -->: Требуемый формат для добавляемых данных. Строка в параметре `data` будет преобразована в этот формат.'
          type:
            - 'outlook!Office.Body#appendOnSendAsync~0:complex'
        - id: callback
          description: 'Необязательное свойство. После выполнения метода функция, переданная в `callback` параметре, вызывается с помощью одного параметра типа `Office.AsyncResult`<!-- -->. Все обнаруженные ошибки будут указаны в свойстве `asyncResult.error`.'
          type:
            - 'outlook!Office.Body#appendOnSendAsync~1:complex'
  - uid: 'outlook!Office.Body#appendOnSendAsync:member(2)'
    summary: |-
      Добавляется к отправке указанного содержимого в конец тела элемента после любой подписи.

      Если пользователь запускает надстройки, реализующие [функцию on-Send, с помощью \` ItemSend \` в манифесте](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-on-send-addins?tabs=windows)<!-- -->, дополните присоединение при отправке перед функцией on – Send.

      **Важно!** если надстройка реализует функцию on-Send и вызывается `appendOnSendAsync` в `ItemSend` обработчике, `appendOnSendAsync` вызов возвращает ошибку, так как этот сценарий не поддерживается.

      **Важно!** для использования `appendOnSendAsync`<!-- -->`ExtendedPermissions`узел манифеста должен включать `AppendOnSend` расширенное разрешение.

      **Note**: чтобы очистить данные из предыдущего `appendOnSendAsync` вызова, можно снова вызвать его, указав `data` для параметра значение `null`<!-- -->.

      \[[Набор API: предварительный просмотр почтового ящика](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      ** [Минимальный уровень](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- --> разрешений**:`ReadWriteItem`

      ** [Соответствующий режим](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- --> Outlook**: создание

      **Ошибки**:

      - `DataExceedsMaximumSize`<!-- -->: `data` Длина параметра превышает 5 000 символов.

      - `InvalidFormatError`<!-- -->: `options.coercionType` Для параметра задано значение, `Office.CoercionType.Html` но текст сообщения отображается в виде обычного текста.
    isPreview: true
    name: 'appendOnSendAsync(data, callback)'
    fullName: 'appendOnSendAsync(data, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'appendOnSendAsync(data: string, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: data
          description: 'Строка, которую необходимо добавить в конец тела. Длина строки ограничена 5 000 символами.'
          type:
            - string
        - id: callback
          description: 'Необязательное свойство. После выполнения метода функция, переданная в `callback` параметре, вызывается с помощью одного параметра типа `Office.AsyncResult`<!-- -->. Все обнаруженные ошибки будут указаны в свойстве `asyncResult.error`.'
          type:
            - 'outlook!Office.Body#appendOnSendAsync~2:complex'
  - uid: 'outlook!Office.Body#getAsync:member(1)'
    summary: |-
      Возвращает текущий текст в указанном формате.

      Этот метод возвращает весь текущий текст в формате, заданном параметром `coercionType`<!-- -->.

      При работе с текстом в формате HTML важно отметить, что `Body.getAsync` `Body.setAsync` методы и не идемпотентного. Значение, возвращаемое `getAsync` методом, не обязательно должно совпадать со значением, переданным в `setAsync` методе ранее. Клиент может изменить значение, передаваемое, чтобы `setAsync` обеспечить эффективное отображение его обработчиком визуализации.

      \[[Набор API: Mailbox 1,3](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      ** [Минимальный уровень](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- --> разрешений**:`ReadItem`

      ** [Соответствующий режим](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- --> Outlook**: "создание" или "чтение"

      #### <a name="examples"></a>Примеры

      ```javascript
      // This example gets the body of the item as plain text.
      Office.context.mailbox.item.body.getAsync(
          "text",
          { asyncContext: "This is passed to the callback" },
          function callback(result) {
              // Do something with the result.
          });

      // The following is an example of the result parameter passed to the callback function.
      {
          "value": "TEXT of whole body (including threads below)",
          "status": "succeeded",
          "asyncContext": "This is passed to the callback"
      }
      ```
    name: 'getAsync(coercionType, options, callback)'
    fullName: 'getAsync(coercionType, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getAsync(coercionType: Office.CoercionType | string, options?: Office.AsyncContextOptions, callback?: (asyncResult: Office.AsyncResult<string>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: coercionType
          description: Формат возвращаемого текста.
          type:
            - 'outlook!Office.Body#getAsync~0:complex'
        - id: options
          description: 'Необязательное свойство. Литерал объекта, содержащий одно или несколько из следующих свойств: `asyncContext`<!-- -->: Разработчики могут предоставить любой объект, к которому необходимо получить доступ, в методе обратного вызова.'
          type:
            - 'office!Office.AsyncContextOptions:interface'
        - id: callback
          description: 'Необязательное свойство. После выполнения метода функция, переданная в `callback` параметре, вызывается с помощью одного параметра типа Office. asyncResult. Текст предоставляется в запрошенном формате в `asyncResult.value` свойстве.'
          type:
            - 'outlook!Office.Body#getAsync~1:complex'
  - uid: 'outlook!Office.Body#getAsync:member(2)'
    summary: |-
      Возвращает текущий текст в указанном формате.

      Этот метод возвращает весь текущий текст в формате, заданном параметром `coercionType`<!-- -->.

      При работе с текстом в формате HTML важно отметить, что `Body.getAsync` `Body.setAsync` методы и не идемпотентного. Значение, возвращаемое `getAsync` методом, не обязательно должно совпадать со значением, переданным в `setAsync` методе ранее. Клиент может изменить значение, передаваемое, чтобы `setAsync` обеспечить эффективное отображение его обработчиком визуализации.

      \[[Набор API: Mailbox 1,3](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      ** [Минимальный уровень](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- --> разрешений**:`ReadItem`

      ** [Соответствующий режим](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- --> Outlook**: "создание" или "чтение"
    name: 'getAsync(coercionType, callback)'
    fullName: 'getAsync(coercionType, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getAsync(coercionType: Office.CoercionType | string, callback?: (asyncResult: Office.AsyncResult<string>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: coercionType
          description: Формат возвращаемого текста.
          type:
            - 'outlook!Office.Body#getAsync~2:complex'
        - id: callback
          description: 'Необязательное свойство. После выполнения метода функция, переданная в `callback` параметре, вызывается с помощью одного параметра типа Office. asyncResult. Текст предоставляется в запрошенном формате в `asyncResult.value` свойстве.'
          type:
            - 'outlook!Office.Body#getAsync~3:complex'
  - uid: 'outlook!Office.Body#getTypeAsync:member(1)'
    summary: |-
      Получает значение, указывающее формат содержимого: HTML или текст.

      \[[Набор API: Mailbox 1,1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      ** [Минимальный уровень](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- --> разрешений**:`ReadItem`

      ** [Соответствующий режим](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- --> Outlook**: создание
    name: 'getTypeAsync(options, callback)'
    fullName: 'getTypeAsync(options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getTypeAsync(options?: Office.AsyncContextOptions, callback?: (asyncResult: Office.AsyncResult<Office.CoercionType>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: options
          description: 'Необязательное свойство. Объектный литерал, содержащий одно или несколько из указанных ниже свойств. `asyncContext`<!-- -->: Разработчики могут предоставить любой объект, к которому необходимо получить доступ, в методе обратного вызова.'
          type:
            - 'office!Office.AsyncContextOptions:interface'
        - id: callback
          description: 'Необязательное свойство. После выполнения метода функция, переданная в `callback` параметре, вызывается с помощью одного параметра типа `Office.AsyncResult`<!-- -->. Тип контента возвращается в виде одного из `CoercionType` значений в `asyncResult.value` свойстве.'
          type:
            - 'outlook!Office.Body#getTypeAsync~0:complex'
  - uid: 'outlook!Office.Body#getTypeAsync:member(2)'
    summary: |-
      Получает значение, указывающее формат содержимого: HTML или текст.

      \[[Набор API: Mailbox 1,1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      ** [Минимальный уровень](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- --> разрешений**:`ReadItem`

      ** [Соответствующий режим](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- --> Outlook**: создание

      #### <a name="examples"></a>Примеры

      ```javascript
      Office.context.mailbox.item.body.getTypeAsync(function (asyncResult) {
          if (asyncResult.status === "failed") {
              console.log("Action failed with error: " + asyncResult.error.message);
          } else {
              console.log("Body type: " + asyncResult.value);
          }
      });
      ```
    name: getTypeAsync(callback)
    fullName: getTypeAsync(callback)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getTypeAsync(callback?: (asyncResult: Office.AsyncResult<Office.CoercionType>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: callback
          description: 'Необязательное свойство. После выполнения метода функция, переданная в `callback` параметре, вызывается с помощью одного параметра типа `Office.AsyncResult`<!-- -->. Тип контента возвращается в виде одного из `CoercionType` значений в `asyncResult.value` свойстве.'
          type:
            - 'outlook!Office.Body#getTypeAsync~1:complex'
  - uid: 'outlook!Office.Body#prependAsync:member(1)'
    summary: |-
      Добавляет указанное содержимое в начало текста элемента.

      Метод `prependAsync` вставляет указанную строку в начало текста элемента. После вставки курсор возвращается в исходное место относительно вставленного содержимого.

      Когда вы включаете ссылки в разметку HTML, вы можете отключить предварительный просмотр ссылок в Интернете, задав `id` атрибут для привязки (<!-- -->&lt;<!-- -->a<!-- -->&gt;<!-- -->) до "Лпнолп" (пример в разделе " **примеры** ").

      \[[Набор API: Mailbox 1,1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      ** [Минимальный уровень](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- --> разрешений**:`ReadWriteItem`

      ** [Соответствующий режим](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- --> Outlook**: создание

      **Ошибки**:

      - `DataExceedsMaximumSize`<!-- -->: Параметр data имеет более 1 000 000 символов.

      #### <a name="examples"></a>Примеры

      ```javascript
      // When including links in HTML markup, you can disable online link preview
      // by setting the id attribute on the anchor (<a>) to "LPNoLP".
      Office.context.mailbox.item.body.prependAsync(
          '<a id="LPNoLP" href="http://www.contoso.com">Click here!</a>',
          {coercionType: Office.CoercionType.Html},
          callback);
      ```
    name: 'prependAsync(data, options, callback)'
    fullName: 'prependAsync(data, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'prependAsync(data: string, options?: Office.AsyncContextOptions & CoercionTypeOptions, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: data
          description: 'Строка, добавляемая в начало основного текста. Максимальная длина — 1 000 000 символов.'
          type:
            - string
        - id: options
          description: 'Необязательное свойство. Объектный литерал, содержащий одно или несколько из указанных ниже свойств. `asyncContext`<!-- -->: Разработчики могут предоставить любой объект, к которому необходимо получить доступ, в методе обратного вызова. `coercionType`<!-- -->: Требуемый формат основного текста. Строка в параметре `data` будет преобразована в этот формат.'
          type:
            - 'outlook!Office.Body#prependAsync~0:complex'
        - id: callback
          description: 'Необязательное свойство. После выполнения метода функция, переданная в `callback` параметре, вызывается с помощью одного параметра типа `Office.AsyncResult`<!-- -->. Все обнаруженные ошибки будут указаны в свойстве `asyncResult.error`.'
          type:
            - 'outlook!Office.Body#prependAsync~1:complex'
  - uid: 'outlook!Office.Body#prependAsync:member(2)'
    summary: |-
      Добавляет указанное содержимое в начало текста элемента.

      Метод `prependAsync` вставляет указанную строку в начало текста элемента. После вставки курсор возвращается в исходное место относительно вставленного содержимого.

      Когда вы включаете ссылки в разметку HTML, вы можете отключить предварительный просмотр ссылок в Интернете, задав `id` атрибут для привязки (<!-- -->&lt;<!-- -->a<!-- -->&gt;<!-- -->) до "Лпнолп" (пример в разделе " **примеры** ").

      \[[Набор API: Mailbox 1,1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      ** [Минимальный уровень](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- --> разрешений**:`ReadWriteItem`

      ** [Соответствующий режим](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- --> Outlook**: создание

      **Ошибки**:

      - `DataExceedsMaximumSize`<!-- -->: Параметр data имеет более 1 000 000 символов.
    name: 'prependAsync(data, callback)'
    fullName: 'prependAsync(data, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'prependAsync(data: string, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: data
          description: 'Строка, добавляемая в начало основного текста. Максимальная длина — 1 000 000 символов.'
          type:
            - string
        - id: callback
          description: 'Необязательное свойство. После выполнения метода функция, переданная в `callback` параметре, вызывается с помощью одного параметра типа `Office.AsyncResult`<!-- -->. Все обнаруженные ошибки будут указаны в свойстве `asyncResult.error`.'
          type:
            - 'outlook!Office.Body#prependAsync~2:complex'
  - uid: 'outlook!Office.Body#setAsync:member(1)'
    summary: |-
      Заменяет весь текст указанным текстом.

      При работе с текстом в формате HTML важно отметить, что `Body.getAsync` `Body.setAsync` методы и не идемпотентного. Значение, возвращаемое `getAsync` методом, не обязательно должно совпадать со значением, переданным в `setAsync` методе ранее. Клиент может изменить значение, передаваемое, чтобы `setAsync` обеспечить эффективное отображение его обработчиком визуализации.

      Когда вы включаете ссылки в разметку HTML, вы можете отключить предварительный просмотр ссылок в Интернете, задав `id` атрибут для привязки (<!-- -->&lt;<!-- -->a<!-- -->&gt;<!-- -->) до "Лпнолп" (пример в разделе " **примеры** ").

      \[[Набор API: Mailbox 1,3](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      ** [Минимальный уровень](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- --> разрешений**:`ReadWriteItem`

      ** [Соответствующий режим](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- --> Outlook**: создание

      **Ошибки**:

      - `DataExceedsMaximumSize`<!-- -->: Параметр data имеет более 1 000 000 символов.

      - `InvalidFormatError`<!-- -->: `options.coercionType` Для параметра задано значение `Office.CoercionType.Html` , а текст сообщения отображается в виде обычного текста.

      #### <a name="examples"></a>Примеры

      ```javascript
      // When including links in HTML markup, you can disable online link preview
      // by setting the id attribute on the anchor (<a>) to "LPNoLP".
      Office.context.mailbox.item.body.setAsync(
          '<a id="LPNoLP" href="http://www.contoso.com">Click here!</a>',
          {coercionType: Office.CoercionType.Html},
          callback);
      Office.context.mailbox.item.body.setAsync(
          "<b>(replaces all body, including threads you are replying to that may be on the bottom)</b>",
          { coercionType: "html", asyncContext: "This is passed to the callback" },
          function callback(result) {
              // Process the result.
      });

      // The following is an example of the result parameter passed to the callback function.
      {
          "value":null,
          "status": "succeeded",
          "asyncContext": "This is passed to the callback"
      }
      ```
    name: 'setAsync(data, options, callback)'
    fullName: 'setAsync(data, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setAsync(data: string, options?: Office.AsyncContextOptions & CoercionTypeOptions, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: data
          description: 'Строка, которая заменяет существующий текст. Максимальная длина — 1 000 000 символов.'
          type:
            - string
        - id: options
          description: 'Необязательное свойство. Объектный литерал, содержащий одно или несколько из указанных ниже свойств. `asyncContext`<!-- -->: Разработчики могут предоставить любой объект, к которому необходимо получить доступ, в методе обратного вызова. `coercionType`<!-- -->: Требуемый формат основного текста. Строка в параметре `data` будет преобразована в этот формат.'
          type:
            - 'outlook!Office.Body#setAsync~0:complex'
        - id: callback
          description: 'Необязательное свойство. После выполнения метода функция, переданная в `callback` параметре, вызывается с помощью одного параметра типа Office. asyncResult. Все обнаруженные ошибки будут указаны в свойстве `asyncResult.error`.'
          type:
            - 'outlook!Office.Body#setAsync~1:complex'
  - uid: 'outlook!Office.Body#setAsync:member(2)'
    summary: |-
      Заменяет весь текст указанным текстом.

      При работе с текстом в формате HTML важно отметить, что `Body.getAsync` `Body.setAsync` методы и не идемпотентного. Значение, возвращаемое `getAsync` методом, не обязательно должно совпадать со значением, переданным в `setAsync` методе ранее. Клиент может изменить значение, передаваемое, чтобы `setAsync` обеспечить эффективное отображение его обработчиком визуализации.

      Когда вы включаете ссылки в разметку HTML, вы можете отключить предварительный просмотр ссылок в Интернете, задав атрибут ID для привязки (<!-- -->&lt;<!-- -->a<!-- -->&gt;<!-- -->) до "Лпнолп" (пример в разделе " **примеры** ").

      \[[Набор API: Mailbox 1,3](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      ** [Минимальный уровень](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- --> разрешений**:`ReadWriteItem`

      ** [Соответствующий режим](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- --> Outlook**: создание

      **Ошибки**:

      - `DataExceedsMaximumSize`<!-- -->: `data` Длина параметра превышает 1 000 000 символов.

      - `InvalidFormatError`<!-- -->: `options.coercionType` Для параметра задано значение `Office.CoercionType.Html` , а текст сообщения отображается в виде обычного текста.
    name: 'setAsync(data, callback)'
    fullName: 'setAsync(data, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setAsync(data: string, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: data
          description: 'Строка, которая заменяет существующий текст. Максимальная длина — 1 000 000 символов.'
          type:
            - string
        - id: callback
          description: 'Необязательное свойство. После выполнения метода функция, переданная в `callback` параметре, вызывается с помощью одного параметра типа `Office.AsyncResult`<!-- -->. Все обнаруженные ошибки будут указаны в свойстве `asyncResult.error`.'
          type:
            - 'outlook!Office.Body#setAsync~2:complex'
  - uid: 'outlook!Office.Body#setSelectedDataAsync:member(1)'
    summary: |-
      Заменяет выделенный фрагмент в основном тексте на заданный текст.

      `setSelectedDataAsync`Метод вставляет указанную строку в позицию курсора в тексте элемента, или, если текст выбран в редакторе, он заменяет выделенный текст. Если указатель не появлялся в основном тексте элемента, или элемент потерял фокус в интерфейсе, строка вставляется в начало основного текста. После вставки курсор помещается в конец вставленного содержимого.

      Когда вы включаете ссылки в разметку HTML, вы можете отключить предварительный просмотр ссылок в Интернете, задав атрибут ID для привязки (<!-- -->&lt;<!-- -->a<!-- -->&gt;<!-- -->) до "Лпнолп" (пример в разделе " **примеры** ").

      \[[Набор API: Mailbox 1,1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      ** [Минимальный уровень](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- --> разрешений**:`ReadWriteItem`

      ** [Соответствующий режим](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- --> Outlook**: создание

      **Ошибки**:

      - `DataExceedsMaximumSize`<!-- -->: `data` Длина параметра превышает 1 000 000 символов.

      - `InvalidFormatError`<!-- -->: `options.coercionType` Для параметра задано значение `Office.CoercionType.Html` , а текст сообщения отображается в виде обычного текста.

      #### <a name="examples"></a>Примеры

      ```javascript
      // When including links in HTML markup, you can disable online link preview
      // by setting the id attribute on the anchor (<a>) to "LPNoLP".
      Office.context.mailbox.item.body.setSelectedDataAsync(
          '<a id="LPNoLP" href="http://www.contoso.com">Click here!</a>',
          {coercionType: Office.CoercionType.Html},
          callback);
      ```
    name: 'setSelectedDataAsync(data, options, callback)'
    fullName: 'setSelectedDataAsync(data, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setSelectedDataAsync(data: string, options?: Office.AsyncContextOptions & CoercionTypeOptions, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: data
          description: 'Строка, которая заменяет существующий текст. Максимальная длина — 1 000 000 символов.'
          type:
            - string
        - id: options
          description: 'Необязательное свойство. Объектный литерал, содержащий одно или несколько из указанных ниже свойств. `asyncContext`<!-- -->: Разработчики могут предоставить любой объект, к которому необходимо получить доступ, в методе обратного вызова. `coercionType`<!-- -->: Требуемый формат основного текста. Строка в параметре `data` будет преобразована в этот формат.'
          type:
            - 'outlook!Office.Body#setSelectedDataAsync~0:complex'
        - id: callback
          description: 'Необязательное свойство. После выполнения метода функция, переданная в `callback` параметре, вызывается с помощью одного параметра типа `Office.AsyncResult`<!-- -->. Все обнаруженные ошибки будут указаны в свойстве `asyncResult.error`.'
          type:
            - 'outlook!Office.Body#setSelectedDataAsync~1:complex'
  - uid: 'outlook!Office.Body#setSelectedDataAsync:member(2)'
    summary: |-
      Заменяет выделенный фрагмент в основном тексте на заданный текст.

      `setSelectedDataAsync`Метод вставляет указанную строку в позицию курсора в тексте элемента, или, если текст выбран в редакторе, он заменяет выделенный текст. Если указатель не появлялся в основном тексте элемента, или элемент потерял фокус в интерфейсе, строка вставляется в начало основного текста. После вставки курсор помещается в конец вставленного содержимого.

      Когда вы включаете ссылки в разметку HTML, вы можете отключить предварительный просмотр ссылок в Интернете, задав `id` атрибут для привязки (<!-- -->&lt;<!-- -->a<!-- -->&gt;<!-- -->) до "Лпнолп" (пример в разделе " **примеры** ").

      \[[Набор API: Mailbox 1,1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      ** [Минимальный уровень](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- --> разрешений**:`ReadWriteItem`

      ** [Соответствующий режим](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- --> Outlook**: создание

      **Ошибки**:

      - `DataExceedsMaximumSize`<!-- -->: `data` Длина параметра превышает 1 000 000 символов.

      - `InvalidFormatError`<!-- -->: `options.coercionType` Для параметра задано значение `Office.CoercionType.Html` , а текст сообщения отображается в виде обычного текста.
    name: 'setSelectedDataAsync(data, callback)'
    fullName: 'setSelectedDataAsync(data, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setSelectedDataAsync(data: string, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: data
          description: 'Строка, которая заменяет существующий текст. Максимальная длина — 1 000 000 символов.'
          type:
            - string
        - id: callback
          description: 'Необязательное свойство. После выполнения метода функция, переданная в `callback` параметре, вызывается с помощью одного параметра типа `Office.AsyncResult`<!-- -->. Все обнаруженные ошибки будут указаны в свойстве `asyncResult.error`.'
          type:
            - 'outlook!Office.Body#setSelectedDataAsync~2:complex'
  - uid: 'outlook!Office.Body#setSignatureAsync:member(1)'
    summary: |-
      Добавляет или заменяет подпись тела элемента.

      **Важно!** в Outlook в Интернете `setSignatureAsync` работает только с сообщениями.

      **Важно!** если надстройка реализует [функцию активации на основе событий с помощью \` лаунчевент \` в манифесте](https://docs.microsoft.com/office/dev/add-ins/outlook/autolaunch)<!-- -->, а также вызовы `setSignatureAsync` в обработчике событий применяются следующие правила.

      - Когда пользователь создает новый элемент (в том числе ответить или переслать), подпись задается, но не изменяет форму. Это означает, что если пользователь закрывает форму без внесения других изменений, он не будет предлагать сохранить изменения.

      \[[Набор API: предварительный просмотр почтового ящика](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      ** [Минимальный уровень](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- --> разрешений**:`ReadWriteItem`

      ** [Соответствующий режим](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- --> Outlook**: создание

      **Ошибки**:

      - `DataExceedsMaximumSize`<!-- -->: `data` Длина параметра превышает 30 000 символов.

      - `InvalidFormatError`<!-- -->: `options.coercionType` Для параметра задано значение `Office.CoercionType.Html` , а текст сообщения отображается в виде обычного текста.

      #### <a name="examples"></a>Примеры

      ```javascript
      // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/99-preview-apis/work-with-client-signatures.yaml
      // Set the signature for the current item with inline image.
      var modIcon1Base64 = "iVBORw0KGgoAAAANSUhEUgAAABwAAAAcCAYAAAByDd+UAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAA2ZpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADw/eHBhY2tldCBiZWdpbj0i77u/IiBpZD0iVzVNME1wQ2VoaUh6cmVTek5UY3prYzlkIj8+IDx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IkFkb2JlIFhNUCBDb3JlIDUuMC1jMDYxIDY0LjE0MDk0OSwgMjAxMC8xMi8wNy0xMDo1NzowMSAgICAgICAgIj4gPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4gPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIgeG1sbnM6eG1wTU09Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9tbS8iIHhtbG5zOnN0UmVmPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvc1R5cGUvUmVzb3VyY2VSZWYjIiB4bWxuczp4bXA9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC8iIHhtcE1NOk9yaWdpbmFsRG9jdW1lbnRJRD0ieG1wLmRpZDpDRDMxMDg1MjBCNDZFMTExODE2MkM1RUI2M0M4MDYxRCIgeG1wTU06RG9jdW1lbnRJRD0ieG1wLmRpZDpFMTUxQjgyRjQ2MEQxMUUxODlFMkQwNTYzQ0YwMTUxMiIgeG1wTU06SW5zdGFuY2VJRD0ieG1wLmlpZDpFMTUxQjgyRTQ2MEQxMUUxODlFMkQwNTYzQ0YwMTUxMiIgeG1wOkNyZWF0b3JUb29sPSJBZG9iZSBQaG90b3Nob3AgQ1M1LjEgV2luZG93cyI+IDx4bXBNTTpEZXJpdmVkRnJvbSBzdFJlZjppbnN0YW5jZUlEPSJ4bXAuaWlkOkQxMzEwODUyMEI0NkUxMTE4MTYyQzVFQjYzQzgwNjFEIiBzdFJlZjpkb2N1bWVudElEPSJ4bXAuZGlkOkNEMzEwODUyMEI0NkUxMTE4MTYyQzVFQjYzQzgwNjFEIi8+IDwvcmRmOkRlc2NyaXB0aW9uPiA8L3JkZjpSREY+IDwveDp4bXBtZXRhPiA8P3hwYWNrZXQgZW5kPSJyIj8+uC/WfAAAAehJREFUeNpilCzfwEAEkAbiECA2A2J1IOaHin8E4ptAfBaIVwLxU0IGMRKw0B6IW4DYhoE4cASIK6E0VsCEQ1wUiNcB8QESLGOAqj0MxBuhZhBloS4QnwHiQAbygR/UDF1CFupCXSjHQDmQg5qli8tCUBBsQUoQ1AD8UDNFsVk4n0o+w+bT+egWglKjNymmeGhLkqLcG2oHAwtUoIuQDj5OVgZPLUmwRe5aEmAxqYqNpFgKssOcCeplM0KqdST5GfpDDRm0JfkYrj3/SE7QguyQY4ImYYLgCtAS10kHGMw6dzNsv/qC7OwCClJXYlR++v6b4er3j5QmIFcmaNlIL6AOslCIjhYKMTHQGTBBqxh6gXcgC6/R0cKbIAv30dHCfaAKGJTxHxJSqS3Fz9DkowNmywpyMcgA8fF7b8D8VWcfM6w8+4gYC+VB+RCk8hSh0gaUD4/dewvlvUWRe/z+GzGWgex4BGtiOAHxXhoHpzMoSGHZAhSPW2lo2VZYWkHOh4nEtLrIAE+hZmNUwK+B2BOIv1PRsu9QM1/jatNcBtVZ0IREKXgENesyoVYbzNIdFFi2A5tl+NqlL6BB4QBNzsSCU1A9nlAzMAALAQMOQl0qB23qWwKxIlIrDBQ394H4OBCvISYqAAIMACVibHDqsO7zAAAAAElFTkSuQmCC";
      Office.context.mailbox.item.addFileAttachmentFromBase64Async(
        modIcon1Base64,
        "myImage.png",
        { isInline: true },
        function(result) {
          if (result.status == Office.AsyncResultStatus.Succeeded) {
            var signature = $("#signature").val() + "<img src='cid:myImage.png'>";
            console.log(`Setting signature to "${signature}".`);
            // Important: setSignatureAsync is currently in preview.
            Office.context.mailbox.item.body.setSignatureAsync(
              signature,
              { coercionType: "html" },
              function(asyncResult) {
                console.log(`setSignatureAsync: ${asyncResult.status}`);
              }
            );
          } else {
            console.error(`addFileAttachmentFromBase64Async: ${result.error}`);
          }
        }
      );
      ```
    isPreview: true
    name: 'setSignatureAsync(data, options, callback)'
    fullName: 'setSignatureAsync(data, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setSignatureAsync(data: string, options?: Office.AsyncContextOptions & CoercionTypeOptions, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: data
          description: 'Строка, представляющая подпись, которая задается в тексте сообщения. Эта строка ограничена 30 000 символами.'
          type:
            - string
        - id: options
          description: 'Необязательное свойство. Объектный литерал, содержащий одно или несколько из указанных ниже свойств. `asyncContext`<!-- -->: Разработчики могут предоставить любой объект, к которому необходимо получить доступ, в методе обратного вызова. `coercionType`<!-- -->: Формат, в котором должна быть задана подпись. Если текст, метод задает для подписи обычный текст, удаляя все присутствующие теги HTML. При наличии HTML-кода метод задает для подписи значение HTML.'
          type:
            - 'outlook!Office.Body#setSignatureAsync~0:complex'
        - id: callback
          description: 'Необязательное свойство. После выполнения метода функция, переданная в `callback` параметре, вызывается с помощью одного параметра типа `Office.AsyncResult`<!-- -->.'
          type:
            - 'outlook!Office.Body#setSignatureAsync~1:complex'
  - uid: 'outlook!Office.Body#setSignatureAsync:member(2)'
    summary: |-
      Добавляет или заменяет подпись тела элемента.

      **Важно!** в Outlook в Интернете `setSignatureAsync` работает только с сообщениями.

      **Важно!** если надстройка реализует [функцию активации на основе событий с помощью \` лаунчевент \` в манифесте](https://docs.microsoft.com/office/dev/add-ins/outlook/autolaunch)<!-- -->, а также вызовы `setSignatureAsync` в обработчике событий применяются следующие правила.

      - Когда пользователь создает новый элемент (в том числе ответить или переслать), подпись задается, но не изменяет форму. Это означает, что если пользователь закрывает форму без внесения других изменений, он не будет предлагать сохранить изменения.

      \[[Набор API: предварительный просмотр почтового ящика](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      ** [Минимальный уровень](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- --> разрешений**:`ReadWriteItem`

      ** [Соответствующий режим](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- --> Outlook**: создание

      **Ошибки**:

      - `DataExceedsMaximumSize`<!-- -->: `data` Длина параметра превышает 30 000 символов.

      - `InvalidFormatError`<!-- -->: `options.coercionType` Для параметра задано значение `Office.CoercionType.Html` , а текст сообщения отображается в виде обычного текста.

      #### <a name="examples"></a>Примеры

      ```javascript
      // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/99-preview-apis/work-with-client-signatures.yaml
      // Set the signature for the current item.
      var signature = $("#signature").val();
      console.log(`Setting signature to "${signature}".`);
      Office.context.mailbox.item.body.setSignatureAsync(signature, function(asyncResult) {
        if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
          console.log("setSignatureAsync succeeded");
        } else {
          console.error(asyncResult.error);
        }
      });
      ```
    isPreview: true
    name: 'setSignatureAsync(data, callback)'
    fullName: 'setSignatureAsync(data, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setSignatureAsync(data: string, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: data
          description: 'Строка, представляющая подпись, которая задается в тексте сообщения. Эта строка ограничена 30 000 символами.'
          type:
            - string
        - id: callback
          description: 'Необязательное свойство. После выполнения метода функция, переданная в `callback` параметре, вызывается с помощью одного параметра типа `Office.AsyncResult`<!-- -->.'
          type:
            - 'outlook!Office.Body#setSignatureAsync~2:complex'
references:
  - uid: 'outlook!Office.Body#appendOnSendAsync~0:complex'
    name: Office.AsyncContextOptions & CoercionTypeOptions
    fullName: Office.AsyncContextOptions & Office.CoercionTypeOptions
    spec.typeScript:
      - uid: 'office!Office.AsyncContextOptions:interface'
        name: Office.AsyncContextOptions
        fullName: Office.AsyncContextOptions
      - name: ' & '
        fullName: ' & '
      - uid: 'outlook!Office.CoercionTypeOptions:interface'
        name: CoercionTypeOptions
        fullName: Office.CoercionTypeOptions
  - uid: 'outlook!Office.Body#appendOnSendAsync~1:complex'
    name: '(asyncResult: Office.AsyncResult<void>) => void'
    fullName: '(asyncResult: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'office!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void
  - uid: 'outlook!Office.Body#appendOnSendAsync~2:complex'
    name: '(asyncResult: Office.AsyncResult<void>) => void'
    fullName: '(asyncResult: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'office!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void
  - uid: 'outlook!Office.Body#getAsync~0:complex'
    name: Office.CoercionType | string
    fullName: Office.CoercionType | string
    spec.typeScript:
      - uid: 'office!Office.CoercionType:enum'
        name: Office.CoercionType
        fullName: Office.CoercionType
      - name: ' | string'
        fullName: ' | string'
  - uid: 'office!Office.AsyncContextOptions:interface'
    name: Office.AsyncContextOptions
  - uid: 'outlook!Office.Body#getAsync~1:complex'
    name: '(asyncResult: Office.AsyncResult<string>) => void'
    fullName: '(asyncResult: Office.AsyncResult<string>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'office!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <string>) => void
        fullName: <string>) => void
  - uid: 'outlook!Office.Body#getAsync~2:complex'
    name: Office.CoercionType | string
    fullName: Office.CoercionType | string
    spec.typeScript:
      - uid: 'office!Office.CoercionType:enum'
        name: Office.CoercionType
        fullName: Office.CoercionType
      - name: ' | string'
        fullName: ' | string'
  - uid: 'outlook!Office.Body#getAsync~3:complex'
    name: '(asyncResult: Office.AsyncResult<string>) => void'
    fullName: '(asyncResult: Office.AsyncResult<string>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'office!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <string>) => void
        fullName: <string>) => void
  - uid: 'outlook!Office.Body#getTypeAsync~0:complex'
    name: '(asyncResult: Office.AsyncResult<Office.CoercionType>) => void'
    fullName: '(asyncResult: Office.AsyncResult<Office.CoercionType>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'office!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <
        fullName: <
      - uid: 'office!Office.CoercionType:enum'
        name: Office.CoercionType
        fullName: Office.CoercionType
      - name: '>) => void'
        fullName: '>) => void'
  - uid: 'outlook!Office.Body#getTypeAsync~1:complex'
    name: '(asyncResult: Office.AsyncResult<Office.CoercionType>) => void'
    fullName: '(asyncResult: Office.AsyncResult<Office.CoercionType>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'office!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <
        fullName: <
      - uid: 'office!Office.CoercionType:enum'
        name: Office.CoercionType
        fullName: Office.CoercionType
      - name: '>) => void'
        fullName: '>) => void'
  - uid: 'outlook!Office.Body#prependAsync~0:complex'
    name: Office.AsyncContextOptions & CoercionTypeOptions
    fullName: Office.AsyncContextOptions & Office.CoercionTypeOptions
    spec.typeScript:
      - uid: 'office!Office.AsyncContextOptions:interface'
        name: Office.AsyncContextOptions
        fullName: Office.AsyncContextOptions
      - name: ' & '
        fullName: ' & '
      - uid: 'outlook!Office.CoercionTypeOptions:interface'
        name: CoercionTypeOptions
        fullName: Office.CoercionTypeOptions
  - uid: 'outlook!Office.Body#prependAsync~1:complex'
    name: '(asyncResult: Office.AsyncResult<void>) => void'
    fullName: '(asyncResult: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'office!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void
  - uid: 'outlook!Office.Body#prependAsync~2:complex'
    name: '(asyncResult: Office.AsyncResult<void>) => void'
    fullName: '(asyncResult: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'office!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void
  - uid: 'outlook!Office.Body#setAsync~0:complex'
    name: Office.AsyncContextOptions & CoercionTypeOptions
    fullName: Office.AsyncContextOptions & Office.CoercionTypeOptions
    spec.typeScript:
      - uid: 'office!Office.AsyncContextOptions:interface'
        name: Office.AsyncContextOptions
        fullName: Office.AsyncContextOptions
      - name: ' & '
        fullName: ' & '
      - uid: 'outlook!Office.CoercionTypeOptions:interface'
        name: CoercionTypeOptions
        fullName: Office.CoercionTypeOptions
  - uid: 'outlook!Office.Body#setAsync~1:complex'
    name: '(asyncResult: Office.AsyncResult<void>) => void'
    fullName: '(asyncResult: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'office!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void
  - uid: 'outlook!Office.Body#setAsync~2:complex'
    name: '(asyncResult: Office.AsyncResult<void>) => void'
    fullName: '(asyncResult: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'office!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void
  - uid: 'outlook!Office.Body#setSelectedDataAsync~0:complex'
    name: Office.AsyncContextOptions & CoercionTypeOptions
    fullName: Office.AsyncContextOptions & Office.CoercionTypeOptions
    spec.typeScript:
      - uid: 'office!Office.AsyncContextOptions:interface'
        name: Office.AsyncContextOptions
        fullName: Office.AsyncContextOptions
      - name: ' & '
        fullName: ' & '
      - uid: 'outlook!Office.CoercionTypeOptions:interface'
        name: CoercionTypeOptions
        fullName: Office.CoercionTypeOptions
  - uid: 'outlook!Office.Body#setSelectedDataAsync~1:complex'
    name: '(asyncResult: Office.AsyncResult<void>) => void'
    fullName: '(asyncResult: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'office!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void
  - uid: 'outlook!Office.Body#setSelectedDataAsync~2:complex'
    name: '(asyncResult: Office.AsyncResult<void>) => void'
    fullName: '(asyncResult: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'office!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void
  - uid: 'outlook!Office.Body#setSignatureAsync~0:complex'
    name: Office.AsyncContextOptions & CoercionTypeOptions
    fullName: Office.AsyncContextOptions & Office.CoercionTypeOptions
    spec.typeScript:
      - uid: 'office!Office.AsyncContextOptions:interface'
        name: Office.AsyncContextOptions
        fullName: Office.AsyncContextOptions
      - name: ' & '
        fullName: ' & '
      - uid: 'outlook!Office.CoercionTypeOptions:interface'
        name: CoercionTypeOptions
        fullName: Office.CoercionTypeOptions
  - uid: 'outlook!Office.Body#setSignatureAsync~1:complex'
    name: '(asyncResult: Office.AsyncResult<void>) => void'
    fullName: '(asyncResult: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'office!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void
  - uid: 'outlook!Office.Body#setSignatureAsync~2:complex'
    name: '(asyncResult: Office.AsyncResult<void>) => void'
    fullName: '(asyncResult: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'office!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void