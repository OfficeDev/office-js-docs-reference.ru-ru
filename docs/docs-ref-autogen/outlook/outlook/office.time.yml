### YamlMime:TSType
name: Office.Time
uid: outlook!Office.Time:interface
package: outlook!
fullName: Office.Time
summary: >-
  Объект возвращается как начните или завершите свойство встречи `Time` в режиме составить.


  \[[Набор API: почтовый ящик 1.1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
remarks: >-
  **[Минимальный уровень разрешений:](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**`ReadItem`


  **[Применимый режим](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- --> Outlook:** Compose
isPreview: false
isDeprecated: false
type: interface
methods:
- name: getAsync(options, callback)
  uid: outlook!Office.Time#getAsync:member(1)
  package: outlook!
  fullName: getAsync(options, callback)
  summary: >-
    Получает время начала или окончания встречи.


    Дата и время предоставляются в качестве `Date` объекта `asyncResult.value` в свойстве. Значение приводится в формате UTC. С помощью метода можно преобразовать время UTC в локальное время `convertToLocalClientTime` клиента.


    \[[Набор API: почтовый ящик 1.1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **[Минимальный уровень разрешений:](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**`ReadItem`


    **[Применимый режим](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- --> Outlook:** Compose
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getAsync(options: Office.AsyncContextOptions, callback: (asyncResult: Office.AsyncResult<Date>) => void): void;'
    parameters:
    - id: options
      description: 'Объектный литерал, содержащий одно или несколько из указанных ниже свойств. `asyncContext`<!-- -->: Разработчики могут предоставить любой объект, к который они хотят получить доступ в методе вызова.'
      type: <xref uid="office!Office.AsyncContextOptions:interface" />
    - id: callback
      description: По завершению метода функция, переданная в параметре, называется `callback` с одним параметром типа `Office.AsyncResult`<!-- -->. Свойством `value` результата является `Date` объект.
      type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;Date&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: getAsync(callback)
  uid: outlook!Office.Time#getAsync:member(2)
  package: outlook!
  fullName: getAsync(callback)
  summary: >-
    Получает время начала или окончания встречи.


    Дата и время предоставляются в качестве `Date` объекта `asyncResult.value` в свойстве. Значение приводится в формате UTC. С помощью метода можно преобразовать время UTC в локальное время `convertToLocalClientTime` клиента.


    \[[Набор API: почтовый ящик 1.1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **[Минимальный уровень разрешений:](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**`ReadItem`


    **[Применимый режим](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- --> Outlook:** Compose


    #### <a name="examples"></a>Примеры


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/90-other-item-apis/get-set-start-appointment-organizer.yaml

    Office.context.mailbox.item.start.getAsync((result) => {
      if (result.status !== Office.AsyncResultStatus.Succeeded) {
        console.error(`Action failed with message ${result.error.message}`);
        return;
      }
      console.log(`Appointment starts: ${result.value}`);
    });

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getAsync(callback: (asyncResult: Office.AsyncResult<Date>) => void): void;'
    parameters:
    - id: callback
      description: По завершению метода функция, переданная в параметре callback, называется с одним параметром типа `Office.AsyncResult`<!-- -->. Свойством `value` результата является `Date` объект.
      type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;Date&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: setAsync(dateTime, options, callback)
  uid: outlook!Office.Time#setAsync:member(1)
  package: outlook!
  fullName: setAsync(dateTime, options, callback)
  summary: >-
    Задает время начала или окончания встречи.


    Если метод вызван в свойстве запуска, свойство будет корректироваться для поддержания продолжительности `setAsync` `end` встречи, как было установлено ранее. Если для свойства `setAsync` вызывается метод `end`, продолжительность встречи будет расширена до нового времени окончания.


    Время необходимо указать в формате UTC. Правильное время в формате UTC можно получить с помощью метода `convertToUtcClientTime`.


    **Важно.** В клиенте Windows эту функцию нельзя использовать для обновления начала или окончания повторения.


    \[[Набор API: почтовый ящик 1.1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **[Минимальный уровень разрешений:](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**`ReadWriteItem`


    **[Применимый режим](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- --> Outlook:** Compose


    **Ошибки:**


    - `InvalidEndTime`<!-- -->. Время окончания встречи до начала встречи.


    #### <a name="examples"></a>Примеры


    ```javascript

    var startTime = new Date("3/14/2015");

    var options = {
        // Pass information that can be used in the callback.
        asyncContext: {verb: "Set"}
    };

    Office.context.mailbox.item.start.setAsync(startTime, options, function(result) {
        if (result.error) {
            console.debug(result.error);
        } else {
            // Access the asyncContext that was passed to the setAsync function.
            console.debug("Start Time " + result.asyncContext.verb);
        }
    });

    ```

    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/90-other-item-apis/get-set-start-appointment-organizer.yaml

    var start = new Date(); // Represents current date and time.

    start.setDate(start.getDate() + 2); // Add 2 days to current date.

    Office.context.mailbox.item.start.setAsync(start, (result) => {
      if (result.status !== Office.AsyncResultStatus.Succeeded) {
        console.error(`Action failed with message ${result.error.message}`);
        return;
      }
      console.log(`Successfully set start date and time to ${start}`);
    });

    ```

    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/90-other-item-apis/get-set-end-appointment-organizer.yaml

    Office.context.mailbox.item.start.getAsync((result) => {
      if (result.status !== Office.AsyncResultStatus.Succeeded) {
        console.error(`Get start date failed with message ${result.error.message}`);
        return;
      }

      var end = result.value; // Set end to current start date and time.
      end.setDate(end.getDate() + 1); // Set end as 1 day later than start date.
      Office.context.mailbox.item.end.setAsync(end, (result) => {
        if (result.status !== Office.AsyncResultStatus.Succeeded) {
          console.error(`Set end date failed with message ${result.error.message}`);
          return;
        }
        console.log(`Successfully set end date and time to ${end}`);
      });
    });

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'setAsync(dateTime: Date, options: Office.AsyncContextOptions, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
    parameters:
    - id: dateTime
      description: Объект даты и времени в формате UTC.
      type: Date
    - id: options
      description: 'Объектный литерал, содержащий одно или несколько из указанных ниже свойств. `asyncContext`<!-- -->: Разработчики могут предоставить любой объект, к который они хотят получить доступ в методе вызова.'
      type: <xref uid="office!Office.AsyncContextOptions:interface" />
    - id: callback
      description: Необязательно. По завершению метода функция, переданная в параметре, называется `callback` с одним параметром типа `Office.AsyncResult`<!-- -->. Если не удается задать дату и время, свойство `asyncResult.error` будет содержать код ошибки.
      type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;void&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: setAsync(dateTime, callback)
  uid: outlook!Office.Time#setAsync:member(2)
  package: outlook!
  fullName: setAsync(dateTime, callback)
  summary: >-
    Задает время начала или окончания встречи.


    Если метод вызван в свойстве запуска, свойство будет корректироваться для поддержания продолжительности `setAsync` `end` встречи, как было установлено ранее. Если для свойства `setAsync` вызывается метод `end`, продолжительность встречи будет расширена до нового времени окончания.


    Время необходимо указать в формате UTC. Правильное время в формате UTC можно получить с помощью метода `convertToUtcClientTime`.


    **Важно.** В клиенте Windows эту функцию нельзя использовать для обновления начала или окончания повторения.


    \[[Набор API: почтовый ящик 1.1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **[Минимальный уровень разрешений:](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**`ReadWriteItem`


    **[Применимый режим](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- --> Outlook:** Compose


    **Ошибки:**


    - `InvalidEndTime`<!-- -->. Время окончания встречи до начала встречи.
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'setAsync(dateTime: Date, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
    parameters:
    - id: dateTime
      description: Объект даты и времени в формате UTC.
      type: Date
    - id: callback
      description: Необязательно. По завершению метода функция, переданная в параметре, называется `callback` с одним параметром типа `Office.AsyncResult`<!-- -->. Если не удается задать дату и время, свойство `asyncResult.error` будет содержать код ошибки.
      type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;void&gt;) =&gt; void'
    return:
      type: void
      description: ''
metadata:
  ms.openlocfilehash: 5e283e8dabe220dacaeebb63e68fe9ecc627f27a
  ms.sourcegitcommit: d0f7e3d564e90cdff464157440c36ad19fa526f0
  ms.translationtype: MT
  ms.contentlocale: ru-RU
  ms.lasthandoff: 04/09/2021
  ms.locfileid: "51659989"
