### YamlMime:UniversalReference
ms.openlocfilehash: 55b41282cddc2c8116360804dfc9d4294db4b8c7
ms.sourcegitcommit: d356f1545c328d4b59ce814fcab8191e4231f1dc
ms.translationtype: MT
ms.contentlocale: ru-RU
ms.lasthandoff: 02/13/2019
ms.locfileid: "29979171"
items:
- uid: Outlook_1_1.Office.MessageRead
  summary: >-
    Сообщение в режиме [Office.context.mailbox.item](xref:Outlook_1_1.Office.Item)чтения<!-- -->.


    **Важно**: это внутренний объект Outlook, непосредственно не предоставляется через существующие интерфейсы. Вам следует рассматривать как режим Office.context.mailbox.item. Обратитесь к странице [Объектной модели](https://docs.microsoft.com/office/dev/add-ins/reference/objectmodel/requirement-set-1.1/office.context.mailbox.item) для получения дополнительных сведений.
  name: Office.MessageRead
  fullName: Office.MessageRead
  langs:
  - typeScript
  type: interface
  extends:
  - Message
  - 'ItemRead '
  package: Outlook_1_1
  children:
  - Outlook_1_1.Office.MessageRead.displayReplyAllForm
  - Outlook_1_1.Office.MessageRead.displayReplyForm
  - Outlook_1_1.Office.MessageRead.getEntities
  - Outlook_1_1.Office.MessageRead.getEntitiesByType
  - Outlook_1_1.Office.MessageRead.getFilteredEntitiesByName
  - Outlook_1_1.Office.MessageRead.getRegExMatches
  - Outlook_1_1.Office.MessageRead.getRegExMatchesByName
  - Outlook_1_1.Office.MessageRead.loadCustomPropertiesAsync
  - Outlook_1_1.Office.MessageRead.attachments
  - Outlook_1_1.Office.MessageRead.body
  - Outlook_1_1.Office.MessageRead.cc
  - Outlook_1_1.Office.MessageRead.conversationId
  - Outlook_1_1.Office.MessageRead.dateTimeCreated
  - Outlook_1_1.Office.MessageRead.dateTimeModified
  - Outlook_1_1.Office.MessageRead.from
  - Outlook_1_1.Office.MessageRead.internetMessageId
  - Outlook_1_1.Office.MessageRead.itemClass
  - Outlook_1_1.Office.MessageRead.itemId
  - Outlook_1_1.Office.MessageRead.itemType
  - Outlook_1_1.Office.MessageRead.normalizedSubject
  - Outlook_1_1.Office.MessageRead.sender
  - Outlook_1_1.Office.MessageRead.subject
  - Outlook_1_1.Office.MessageRead.to
- uid: Outlook_1_1.Office.MessageRead.displayReplyAllForm
  summary: >-
    Отображает форму ответа, включающую отправителя и всех получателей выбранного сообщения или организатора и всех участников выбранной встречи.


    В Outlook Web App форма ответа отображается в виде всплывающей формы в представлении с 3 либо 1 или 2 колонками.


    Если любой строковый параметр превышает указанные для него ограничения, displayReplyAllForm возвращает исключение.


    Если в параметре formData.attachments указаны вложения, Outlook и Outlook Web App пытаются скачать все вложения и вложить их в форму ответа. Если не удается добавить какие-либо вложения, в форме пользовательского интерфейса отображается сообщение об ошибке. Если сообщения об ошибках не предусмотрены, то они не отображаются.


    **Примечание**: этот метод не поддерживается в Outlook для операций ввода-вывода или Outlook для Android.


    \[[Набор API-Интерфейсов: почтовый ящик 1.0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    <table><tr><td>[Минимальный уровень разрешений](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadItem</td></tr>


    <tr><td>[Применимый режим Outlook](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Чтение сообщения</td></tr></table>

    ####Примеры


    ```javascript

    // The following code passes a string to the `displayReplyAllForm` function.

    Office.context.mailbox.item.displayReplyAllForm('hello there');

    Office.context.mailbox.item.displayReplyAllForm('<b>hello there</b>');


    // Reply with an empty body.

    Office.context.mailbox.item.displayReplyAllForm({});


    // Reply with just a body.

    Office.context.mailbox.item.displayReplyAllForm(

    {

    'htmlBody' : 'hi'

    });


    // Reply with a body and a file attachment.

    Office.context.mailbox.item.displayReplyAllForm(

    {
        'htmlBody' : 'hi',
        'attachments' :
        [
            {
            'type' : Office.MailboxEnums.AttachmentType.File,
            'name' : 'squirrel.png',
            'url' : 'http://i.imgur.com/sRgTlGR.jpg'
            }
        ]
    });


    // Reply with a body and an item attachment.

    Office.context.mailbox.item.displayReplyAllForm(

    {
        'htmlBody' : 'hi',
        'attachments' :
        [
            {
            'type' : 'item',
            'name' : 'rand',
            'itemId' : Office.context.mailbox.item.itemId
            }
        ]
    });


    // Reply with a body, file attachment, item attachment, and a callback.

    Office.context.mailbox.item.displayReplyAllForm(

    {
        'htmlBody' : 'hi',
        'attachments' :
        [
            {
                'type' : Office.MailboxEnums.AttachmentType.File,
                'name' : 'squirrel.png',
                'url' : 'http://i.imgur.com/sRgTlGR.jpg'
            },
            {
                'type' : 'item',
                'name' : 'rand',
                'itemId' : Office.context.mailbox.item.itemId
            }
        ],
        'callback' : function(asyncResult)
        {
            console.log(asyncResult.value);
        }
    });

    ```
  name: displayReplyAllForm(formData)
  fullName: displayReplyAllForm(formData)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'displayReplyAllForm(formData: string | ReplyFormData): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: formData
      description: Строка, содержащая текст и HTML-код, представляющие собой основной текст формы ответа. Строка ограничена 32 КБ или объект [Office.ReplyFormData](xref:Outlook_1_1.Office.ReplyFormData) , который содержит текст или вложения данных и функции обратного вызова
      type:
      - string | ReplyFormData
- uid: Outlook_1_1.Office.MessageRead.displayReplyForm
  summary: >-
    Отображает форму ответа, включающую только отправителя выбранного сообщения или организатора выбранной встречи.


    В Outlook Web App форма ответа отображается в виде всплывающей формы в представлении с 3 либо 1 или 2 колонками.


    Если любой строковый параметр превышает указанные для него ограничения, displayReplyForm возвращает исключение.


    Если в параметре formData.attachments указаны вложения, Outlook и Outlook Web App пытаются скачать все вложения и вложить их в форму ответа. Если не удается добавить какие-либо вложения, в форме пользовательского интерфейса отображается сообщение об ошибке. Если сообщения об ошибках не предусмотрены, то они не отображаются.


    **Примечание**: этот метод не поддерживается в Outlook для операций ввода-вывода или Outlook для Android.


    \[[Набор API-Интерфейсов: почтовый ящик 1.0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    <table><tr><td>[Минимальный уровень разрешений](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadItem</td></tr>


    <tr><td>[Применимый режим Outlook](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Чтение сообщения</td></tr></table>

    ####Примеры


    ```javascript

    // The following code passes a string to the `displayReplyForm` function.

    Office.context.mailbox.item.displayReplyForm('hello there');

    Office.context.mailbox.item.displayReplyForm('<b>hello there</b>');


    // Reply with an empty body.

    Office.context.mailbox.item.displayReplyForm({});


    // Reply with just a body.

    Office.context.mailbox.item.displayReplyForm(

    {
        'htmlBody' : 'hi'
    });


    // Reply with a body and a file attachment.

    Office.context.mailbox.item.displayReplyForm(

    {
        'htmlBody' : 'hi',
        'attachments' :
        [
            {
                'type' : Office.MailboxEnums.AttachmentType.File,
                'name' : 'squirrel.png',
                'url' : 'http://i.imgur.com/sRgTlGR.jpg'
            }
        ]
    });


    // Reply with a body and an item attachment.

    Office.context.mailbox.item.displayReplyForm(

    {
        'htmlBody' : 'hi',
        'attachments' :
        [
            {
                'type' : 'item',
                'name' : 'rand',
                'itemId' : Office.context.mailbox.item.itemId
            }
        ]
    });


    // Reply with a body, file attachment, item attachment, and a callback.

    Office.context.mailbox.item.displayReplyForm(

    {
        'htmlBody' : 'hi',
        'attachments' :
        [
            {
                'type' : Office.MailboxEnums.AttachmentType.File,
                'name' : 'squirrel.png',
                'url' : 'http://i.imgur.com/sRgTlGR.jpg'
            },
            {
                'type' : 'item',
                'name' : 'rand',
                'itemId' : Office.context.mailbox.item.itemId
            }
        ],
        'callback' : function(asyncResult)
        {
            console.log(asyncResult.value);
        }
    });

    ```
  name: displayReplyForm(formData)
  fullName: displayReplyForm(formData)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'displayReplyForm(formData: string | ReplyFormData): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: formData
      description: Строка, содержащая текст и HTML-код, представляющие собой основной текст формы ответа. Длина строки ограничена 32 символами. ИЛИ объект [Office.ReplyFormData](xref:Outlook_1_1.Office.ReplyFormData) , который содержит текст или вложения данных и функции обратного вызова.
      type:
      - string | ReplyFormData
- uid: Outlook_1_1.Office.MessageRead.getEntities
  summary: >-
    Получает сущности, обнаруженные в теле выбранного элемента.


    **Примечание**: этот метод не поддерживается в Outlook для операций ввода-вывода или Outlook для Android.


    \[[Набор API-Интерфейсов: почтовый ящик 1.0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    <table><tr><td>[Минимальный уровень разрешений](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadItem</td></tr>


    <tr><td>[Применимый режим Outlook](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Чтение сообщения</td></tr></table>
  name: getEntities()
  fullName: getEntities()
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getEntities(): Entities;'
    return:
      type:
      - Entities
      description: ''
- uid: Outlook_1_1.Office.MessageRead.getEntitiesByType
  summary: >-
    Получает массив всех сущностей указанного типа, обнаруженных в теле выбранного элемента.


    **Примечание**: этот метод не поддерживается в Outlook для операций ввода-вывода или Outlook для Android.


    \[[Набор API-Интерфейсов: почтовый ящик 1.0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    <table><tr><td>[Минимальный уровень разрешений](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>Restricted</td></tr>


    <tr><td>[Применимый режим Outlook](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Чтение</td></tr></table>


    Хотя минимальный уровень разрешений для использования этого метода — Restricted, для некоторых типов сущностей требуется доступ на уровне ReadItem, как указано в приведенной ниже таблице.


    <table> <tr> <th>Значение параметра entityType</th> <th>Тип объектов в возвращаемом массиве</th> <th>Уровень необходимых разрешений</th> </tr> <tr> <td>Address</td> <td>Строка</td> <td>Restricted</td> </tr> <tr> <td>Контакт</td> <td>Контакт</td> <td>ReadItem</td> </tr> <tr> <td>EmailAddress</td> <td>String</td> <td>ReadItem</td> </tr> <tr> <td>MeetingSuggestion</td> <td>MeetingSuggestion</td> <td>ReadItem</td> </tr> <tr> <td>PhoneNumber</td> <td>PhoneNumber</td> <td>Restricted</td> </tr> <tr> <td>TaskSuggestion</td> <td>TaskSuggestion</td> <td>ReadItem</td> </tr> <tr> <td>URL</td> <td>Строка</td> <td>Ограниченный доступ</td> </tr> </table>

    #### Примеры


    ```javascript

    // The following example shows how to access an array of strings that represent postal addresses

    // in the current item's body.


    // The initialize function is required for all apps.

    Office.initialize = function () {
        // Checks for the DOM to load using the jQuery ready function.
        $(document).ready(function () {
            // After the DOM is loaded, app-specific code can run.
            var item = Office.context.mailbox.item;
            // Get an array of strings that represent postal addresses in the current item's body.
            var addresses = item.getEntitiesByType(Office.MailboxEnums.EntityType.Address);
            // Continue processing the array of addresses.
        });
    };

    ```
  name: getEntitiesByType(entityType)
  fullName: getEntitiesByType(entityType)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getEntitiesByType(entityType: MailboxEnums.EntityType): (string | Contact | MeetingSuggestion | PhoneNumber | TaskSuggestion)[];'
    return:
      type:
      - (string | Contact | MeetingSuggestion | PhoneNumber | TaskSuggestion)[]
      description: Если значение, переданное в entityType не является допустимым член перечисления EntityType, метод возвращает значение null. Если в теле элемента отсутствуют сущности указанного типа, метод возвращает пустой массив. В противном случае — тип объектов в возвращаемый массив зависит от типа сущности запроса с помощью параметра entityType.
    parameters:
    - id: entityType
      description: Одно из значений перечисления EntityType.
      type:
      - MailboxEnums.EntityType
- uid: Outlook_1_1.Office.MessageRead.getFilteredEntitiesByName
  summary: >-
    Возвращает известные сущности в выбранном элементе, которые проходят через именованный фильтр, определяемый в XML-файле манифеста.


    Метод getFilteredEntitiesByName возвращает сущности, соответствующие регулярному выражению, которое определяется в элементе правила ItemHasKnownEntity в XML-файле манифеста, с использованием указанного значения элемента FilterName.


    **Примечание**: этот метод не поддерживается в Outlook для операций ввода-вывода или Outlook для Android.


    \[[Набор API-Интерфейсов: почтовый ящик 1.0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    <table><tr><td>[Минимальный уровень разрешений](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadItem</td></tr>


    <tr><td>[Применимый режим Outlook](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Чтение сообщения</td></tr></table>
  name: getFilteredEntitiesByName(name)
  fullName: getFilteredEntitiesByName(name)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getFilteredEntitiesByName(name: string): (string | Contact | MeetingSuggestion | PhoneNumber | TaskSuggestion)[];'
    return:
      type:
      - (string | Contact | MeetingSuggestion | PhoneNumber | TaskSuggestion)[]
      description: Если в манифесте нет элемента ItemHasKnownEntity со значением FilterName, соответствующим параметру name, метод возвращает null. Если параметр name не соответствует элементу ItemHasKnownEntity в манифесте, но при этом в текущем элементе нет соответствующих сущностей, метод возвращает пустой массив.
    parameters:
    - id: name
      description: Имя элемента правила ItemHasKnownEntity, определяющее соответствующий фильтр.
      type:
      - string
- uid: Outlook_1_1.Office.MessageRead.getRegExMatches
  summary: >-
    Возвращает строковые значения в выбранном элементе, которые соответствуют регулярным выражениям, определенным в XML-файле манифеста.


    Метод getRegExMatches возвращает строки, которые соответствуют регулярным выражениям, определенным в каждом элементе правила ItemHasRegularExpressionMatch или ItemHasKnownEntity в XML-файле манифеста. Для правила ItemHasRegularExpressionMatch соответствующая строка должна содержаться в свойстве элемента, указанного этим правилом. Простой тип PropertyName определяет поддерживаемые свойства.


    Если вы указываете правило ItemHasRegularExpressionMatch для свойства текста элемента, регулярное выражение должно дальше фильтровать текст, а не пытаться вернуть весь текст элемента. Использование регулярного выражения типа .* для получения всего текста элемента не всегда приносит ожидаемые результаты. Вместо него используйте метод Body.getAsync, чтобы извлечь весь текст.


    **Примечание**: этот метод не поддерживается в Outlook для операций ввода-вывода или Outlook для Android.


    \[[Набор API-Интерфейсов: почтовый ящик 1.0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    <table><tr><td>[Минимальный уровень разрешений](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadItem</td></tr>


    <tr><td>[Применимый режим Outlook](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Чтение сообщения</td></tr></table>

    ####Примеры


    ```javascript

    // The following example shows how to access the array of

    // matches for the regular expression rule elements `fruits`

    // and `veggies`, which are specified in the manifest.

    var allMatches = Office.context.mailbox.item.getRegExMatches();

    var fruits = allMatches.fruits;

    var veges = allMatches.veggies;

    ```
  name: getRegExMatches()
  fullName: getRegExMatches()
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getRegExMatches(): any;'
    return:
      type:
      - any
      description: Объект, содержащий массив строк, которые соответствуют регулярным выражениям, определяемым в XML-файле манифеста. Имя каждого массива равно соответствующему значению атрибута RegExName подходящего правила ItemHasRegularExpressionMatch или атрибута FilterName соответствующего правила ItemHasKnownEntity.
- uid: Outlook_1_1.Office.MessageRead.getRegExMatchesByName
  summary: >-
    Возвращает строковые значения в выбранном элементе, которые соответствуют именованному регулярному выражению, определенному в XML-файле манифеста.


    Метод getRegExMatchesByName возвращает строки, соответствующие регулярному выражению, которое определяется в элементе правила ItemHasRegularExpressionMatch в XML-файле манифеста, с использованием указанного значения элемента RegExName.


    Если вы указываете правило ItemHasRegularExpressionMatch для свойства текста элемента, регулярное выражение должно дальше фильтровать текст, а не пытаться вернуть весь текст элемента. Использование регулярного выражения типа .* для получения всего текста элемента не всегда приносит ожидаемые результаты.


    **Примечание**: этот метод не поддерживается в Outlook для операций ввода-вывода или Outlook для Android.


    \[[Набор API-Интерфейсов: почтовый ящик 1.0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    <table><tr><td>[Минимальный уровень разрешений](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadItem</td></tr>


    <tr><td>[Применимый режим Outlook](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Чтение сообщения</td></tr></table>

    ####Примеры


    ```javascript

    var fruits = Office.context.mailbox.item.getRegExMatchesByName("fruits");

    var veggies = Office.context.mailbox.item.getRegExMatchesByName("veggies");

    ```
  name: getRegExMatchesByName(name)
  fullName: getRegExMatchesByName(name)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getRegExMatchesByName(name: string): string[];'
    return:
      type:
      - string[]
      description: Массив строк, соответствующих регулярному выражению, определяемому в XML-файле манифеста.
    parameters:
    - id: name
      description: Имя элемента правила ItemHasRegularExpressionMatch, определяющее соответствующий фильтр.
      type:
      - string
- uid: Outlook_1_1.Office.MessageRead.loadCustomPropertiesAsync
  summary: >-
    Асинхронно загружает настраиваемые свойства для надстройки для выбранного элемента.


    Настраиваемые свойства сохраняются в виде пар "ключ-значение" для каждого приложения и каждого элемента. Этот метод возвращает объект CustomProperties при обратном вызове, который предоставляет методы для доступа к настраиваемым свойствам, характерным для текущего элемента и текущей надстройки. Настраиваемые свойства не шифруются для элемента, поэтому этот способ хранения не является безопасным.


    Настраиваемые свойства предоставляются в виде объекта CustomProperties в свойстве asyncResult.value. Этот объект позволяет получить, задать и удалить настраиваемые свойства из элемента, а также сохранить изменения, внесенные в настраиваемое свойство, на сервере.


    \[[Набор API-Интерфейсов: почтовый ящик 1.0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    <table><tr><td>[Минимальный уровень разрешений](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadItem</td></tr>


    <tr><td>[Применимый режим Outlook](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Чтение сообщения</td></tr></table>
  name: loadCustomPropertiesAsync(callback, userContext)
  fullName: loadCustomPropertiesAsync(callback, userContext)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'loadCustomPropertiesAsync(callback: (result: Office.AsyncResult<CustomProperties>) => void, userContext?: any): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: callback
      description: После завершения работы метода, функции, переданной в параметре обратного вызова вызывается с один параметр типа Office.AsyncResult.
      type:
      - '(result: Office.AsyncResult<CustomProperties>) => void'
    - id: userContext
      description: Необязательное свойство. Разработчики могут указать любой объект, к которому необходимо получить доступ, в функции обратного вызова. Этот объект можно получать свойство asyncResult.asyncContext в функции обратного вызова.
      type:
      - any
- uid: Outlook_1_1.Office.MessageRead.attachments
  summary: >-
    Получает вложения элемента в качестве массива.


    \[[Набор API-Интерфейсов: почтовый ящик 1.0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    <table><tr><td>[Минимальный уровень разрешений](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadItem</td></tr>


    <tr><td>[Применимый режим Outlook](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Чтение сообщения</td></tr></table>


    **Примечание**: определенных типов файлов, блокируемых в Outlook из-за потенциальных проблем безопасности и таким образом не возвращаются. Для получения дополнительных сведений см [Блокировка вложений в Outlook](https://support.office.com/article/Blocked-attachments-in-Outlook-434752E1-02D3-4E90-9124-8B81E49A8519)<!-- -->.

    #### <a name="examples"></a>Примеры


    ```javascript

    // The following code builds an HTML string with details of all attachments on the current item.

    var item = Office.context.mailbox.item;

    var outputString = "";


    if (item.attachments.length > 0) {
        for (i = 0 ; i < item.attachments.length ; i++) {
            var attachment = item.attachments[i];
            outputString += "<BR>" + i + ". Name: ";
            outputString += attachment.name;
            outputString += "<BR>ID: " + attachment.id;
            outputString += "<BR>contentType: " + attachment.contentType;
            outputString += "<BR>size: " + attachment.size;
            outputString += "<BR>attachmentType: " + attachment.attachmentType;
            outputString += "<BR>isInline: " + attachment.isInline;
        }
    }


    console.log(outputString);

    ```
  name: attachments
  fullName: attachments
  langs:
  - typeScript
  type: property
  syntax:
    content: 'attachments: AttachmentDetails[];'
    return:
      type:
      - AttachmentDetails[]
- uid: Outlook_1_1.Office.MessageRead.body
  summary: >-
    Получает объект, предоставляющий методы для работы с основным текстом элемента.


    \[[Набор API-Интерфейсов: почтовый ящик 1.1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    <table><tr><td>[Минимальный уровень разрешений](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadItem</td></tr>


    <tr><td>[Применимый режим Outlook](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Чтение сообщения</td></tr></table>

    ####Примеры


    ```javascript

    // This example gets the body of the message in plain text.

    Office.context.mailbox.item.body.getAsync(
        "text",
        { asyncContext: "This is passed to the callback" },
        function callback(result) {
            // Do something with the result
        });

    // The following is an example of the result parameter passed to the callback function.

    {
        "value": "TEXT of whole body (including threads below)",
        "status": "succeeded",
        "asyncContext": "This is passed to the callback"
    }

    ```
  name: body
  fullName: body
  langs:
  - typeScript
  type: property
  syntax:
    content: 'body: Body;'
    return:
      type:
      - Body
- uid: Outlook_1_1.Office.MessageRead.cc
  summary: >-
    Предоставляет доступ к получателям копии сообщения. Тип объекта и уровень доступа зависят от режима текущего элемента.


    Свойство cc возвращает массив, содержащий объект EmailAddressDetails для каждого получателя в строке Копии сообщения. Коллекция может включать не более 100 элементов.


    \[[Набор API-Интерфейсов: почтовый ящик 1.0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    <table><tr><td>[Минимальный уровень разрешений](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadItem</td></tr>


    <tr><td>[Применимый режим Outlook](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Чтение сообщения</td></tr></table>

    ####Примеры


    ```javascript

    console.log(JSON.stringify(Office.context.mailbox.item.cc));

    ```
  name: cc
  fullName: cc
  langs:
  - typeScript
  type: property
  syntax:
    content: 'cc: EmailAddressDetails[];'
    return:
      type:
      - EmailAddressDetails[]
- uid: Outlook_1_1.Office.MessageRead.conversationId
  summary: >-
    Получает идентификатор разговора по электронной почте, содержащего конкретное сообщение.


    Вы можете получить целочисленное значение этого свойства, если ваше почтовое приложение активируется в формах просмотра или формах создания ответов. Если пользователь изменит тему ответа, после его отправки идентификатор беседы будет изменен, и полученное ранее значение будет недействительным.


    Это свойство имеет значение NULL для нового элемента в форме создания. Если пользователь задаст тему и сохранит элемент, свойство conversationId вернет значение.


    \[[Набор API-Интерфейсов: почтовый ящик 1.0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    <table><tr><td>[Минимальный уровень разрешений](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadItem</td></tr>


    <tr><td>[Применимый режим Outlook](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Чтение сообщения</td></tr></table>

    ####Примеры


    ```javascript

    var conversationId = Office.context.mailbox.item.conversationId;

    console.log("conversationId: " + conversationId);

    ```
  name: conversationId
  fullName: conversationId
  langs:
  - typeScript
  type: property
  syntax:
    content: 'conversationId: string;'
    return:
      type:
      - string
- uid: Outlook_1_1.Office.MessageRead.dateTimeCreated
  summary: >-
    Получает дату и время создания элемента.


    \[[Набор API-Интерфейсов: почтовый ящик 1.0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    <table><tr><td>[Минимальный уровень разрешений](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadItem</td></tr>


    <tr><td>[Применимый режим Outlook](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Чтение сообщения</td></tr></table>

    ####Примеры


    ```javascript

    var dateTimeCreated = Office.context.mailbox.item.dateTimeCreated;

    console.log("Date and time created: " + dateTimeCreated);

    ```
  name: dateTimeCreated
  fullName: dateTimeCreated
  langs:
  - typeScript
  type: property
  syntax:
    content: 'dateTimeCreated: Date;'
    return:
      type:
      - Date
- uid: Outlook_1_1.Office.MessageRead.dateTimeModified
  summary: >-
    Получает дату и время последнего изменения элемента.


    \[[Набор API-Интерфейсов: почтовый ящик 1.0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    <table><tr><td>[Минимальный уровень разрешений](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadItem</td></tr>


    <tr><td>[Применимый режим Outlook](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Чтение сообщения</td></tr></table>


    **Примечание**: этот член не поддерживается в Outlook для операций ввода-вывода или Outlook для Android.

    #### <a name="examples"></a>Примеры


    ```javascript

    var dateTimeModified = Office.context.mailbox.item.dateTimeModified;

    console.log("Date and time modified: " + dateTimeModified);

    ```
  name: dateTimeModified
  fullName: dateTimeModified
  langs:
  - typeScript
  type: property
  syntax:
    content: 'dateTimeModified: Date;'
    return:
      type:
      - Date
- uid: Outlook_1_1.Office.MessageRead.from
  summary: >-
    Получает адрес электронной почты отправителя сообщения.


    Свойства from и sender представляют одно лицо, если сообщение не отправлено делегатом. Если сообщение отправлено делегатом, то свойство from представляет делегирующее лицо, а свойство sender представляет делегата.


    **Примечание**: свойство recipientType объекта EmailAddressDetails в из свойства не определено.


    Возвращает объект EmailAddressDetails, из свойства.


    \[[Набор API-Интерфейсов: почтовый ящик 1.0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    <table><tr><td>[Минимальный уровень разрешений](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadItem</td></tr>


    <tr><td>[Применимый режим Outlook](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Чтение сообщения</td></tr></table>

    ####Примеры


    ```javascript

    var from = Office.context.mailbox.item.from;

    console.log("From " + from);

    ```
  name: from
  fullName: from
  langs:
  - typeScript
  type: property
  syntax:
    content: 'from: EmailAddressDetails;'
    return:
      type:
      - EmailAddressDetails
- uid: Outlook_1_1.Office.MessageRead.internetMessageId
  summary: >-
    Получает идентификатор интернет-сообщения для сообщения электронной почты.


    \[[Набор API-Интерфейсов: почтовый ящик 1.0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    <table><tr><td>[Минимальный уровень разрешений](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadItem</td></tr>


    <tr><td>[Применимый режим Outlook](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Чтение сообщения</td></tr></table>

    ####Примеры


    ```javascript

    var internetMessageId = Office.context.mailbox.item.internetMessageId;

    console.log("internetMessageId: " + internetMessageId);

    ```
  name: internetMessageId
  fullName: internetMessageId
  langs:
  - typeScript
  type: property
  syntax:
    content: 'internetMessageId: string;'
    return:
      type:
      - string
- uid: Outlook_1_1.Office.MessageRead.itemClass
  summary: >-
    Получает класс элемента веб-служб Exchange для выбранного элемента.


    Можно создавать настраиваемые классы сообщения, расширяющие класс сообщения по умолчанию, например, настраиваемый класс сообщения о встрече IPM.Appointment.Contoso.


    \[[Набор API-Интерфейсов: почтовый ящик 1.0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    <table><tr><td>[Минимальный уровень разрешений](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadItem</td></tr>


    <tr><td>[Применимый режим Outlook](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Чтение сообщения</td></tr></table>


    Свойство itemClass указывает класс сообщения выбранного элемента. Далее приводятся классы сообщения по умолчанию для элемента сообщения или встречи.


    <table> <tr> <th>Тип</th> <th>Описание</th> <th>Класс элемента</th> </tr> <tr> <td>Элементы встречи</td> <td>Это элементы календаря класса элемента IPM. Встречи или IPM. Appointment.Occurrence.</td> <td>IPM. Встречи, IPM. Appointment.Occurrence</td> </tr> <tr> <td>Элементы сообщения</td> <td>Сюда входят сообщения электронной почты с классом сообщения по умолчанию IPM.Note, а также приглашения на собрания, ответы на приглашения и отмены собраний, использующие IPM.Schedule.Meeting в качестве базового класса сообщения.</td> <td>IPM. Примечание IPM. Schedule.Meeting.Request,IPM. Schedule.Meeting.Neg,IPM. Schedule.Meeting.Pos,IPM. Schedule.Meeting.Tent,IPM. Schedule.Meeting.Canceled</td> </tr> </table>

    #### Примеры


    ```javascript

    var itemClass = Office.context.mailbox.item.itemClass;

    console.log("Item class: " + itemClass);

    ```
  name: itemClass
  fullName: itemClass
  langs:
  - typeScript
  type: property
  syntax:
    content: 'itemClass: string;'
    return:
      type:
      - string
- uid: Outlook_1_1.Office.MessageRead.itemId
  summary: >-
    Получает идентификатор элемента веб-служб Exchange для текущего элемента.


    Свойство itemId недоступен в режиме создания. Если требуется идентификатор элемента, метод saveAsync можно использовать для сохранения элемента в хранилище, которое возвращает идентификатор элемента с помощью параметра asyncResult.value в функции обратного вызова.


    **Примечание**: идентификатор, возвращенный свойством itemId — это то же, что идентификатор элемента веб-служб Exchange. Свойство itemId не совпадать с Идентификатором, используемым API-Интерфейс REST Outlook или идентификатор записи Outlook. Прежде чем совершать вызовы REST API, используя это значение, его необходимо преобразовать с помощью Office.context.mailbox.convertToRestId. Для получения дополнительных сведений показано [Использование API REST Outlook из надстройки Outlook](https://docs.microsoft.com/outlook/add-ins/use-rest-api#get-the-item-id)<!-- -->.


    \[[Набор API-Интерфейсов: почтовый ящик 1.0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    <table><tr><td>[Минимальный уровень разрешений](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadItem</td></tr>


    <tr><td>[Применимый режим Outlook](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Чтение сообщения</td></tr></table>

    ####Примеры


    ```javascript

    // The following code checks for the presence of an item

    // identifier. If the `itemId` property returns `null` or

    // `undefined`, it saves the item to the store and gets the

    // item identifier from the asynchronous result.

    var itemId = Office.context.mailbox.item.itemId;

    if (itemId === null || itemId == undefined) {
        Office.context.mailbox.item.saveAsync(function(result) {
            itemId = result.value;
        });
    }

    ```
  name: itemId
  fullName: itemId
  langs:
  - typeScript
  type: property
  syntax:
    content: 'itemId: string;'
    return:
      type:
      - string
- uid: Outlook_1_1.Office.MessageRead.itemType
  summary: >-
    Получает тип элемента, который представляет экземпляр.


    Свойство itemType возвращает одно из значений перечисления ItemType, которое указывает, является ли экземпляр объекта item сообщением или собранием.


    \[[Набор API-Интерфейсов: почтовый ящик 1.0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    <table><tr><td>[Минимальный уровень разрешений](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadItem</td></tr>


    <tr><td>[Применимый режим Outlook](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Чтение сообщения</td></tr></table>

    ####Примеры


    ```javascript

    if (Office.context.mailbox.item.itemType === Office.MailboxEnums.ItemType.Message) {
        // do something
    } else {
        // do something else
    }

    ```
  name: itemType
  fullName: itemType
  langs:
  - typeScript
  type: property
  syntax:
    content: 'itemType: MailboxEnums.ItemType;'
    return:
      type:
      - MailboxEnums.ItemType
- uid: Outlook_1_1.Office.MessageRead.normalizedSubject
  summary: >-
    Получает тему элемента, в которой удалены все префиксы (включая RE: и FWD:).


    Свойство normalizedSubject получает тему элемента со стандартными префиксами (такими как RE: и FW:), добавляемыми почтовыми программами. Для получения темы элемента с префиксами используйте свойство subject.


    \[[Набор API-Интерфейсов: почтовый ящик 1.0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    <table><tr><td>[Минимальный уровень разрешений](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadItem</td></tr>


    <tr><td>[Применимый режим Outlook](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Чтение сообщения</td></tr></table>

    ####Примеры


    ```javascript

    var normalizedSubject = Office.context.mailbox.item.normalizedSubject;

    console.log("Normalized subject: " + normalizedSubject);

    ```
  name: normalizedSubject
  fullName: normalizedSubject
  langs:
  - typeScript
  type: property
  syntax:
    content: 'normalizedSubject: string;'
    return:
      type:
      - string
- uid: Outlook_1_1.Office.MessageRead.sender
  summary: >-
    Получает адрес электронной почты отправителя сообщения.


    Свойства from и sender представляют одно лицо, если сообщение не отправлено делегатом. Если сообщение отправлено делегатом, то свойство from представляет делегирующее лицо, а свойство sender представляет делегата.


    **Примечание**: свойство recipientType объекта EmailAddressDetails в свойстве отправителя не определено.


    \[[Набор API-Интерфейсов: почтовый ящик 1.0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    <table><tr><td>[Минимальный уровень разрешений](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadItem</td></tr>


    <tr><td>[Применимый режим Outlook](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Чтение сообщения</td></tr></table>

    ####Примеры


    ```javascript

    var senderName = Office.context.mailbox.item.sender.displayName;

    var senderAddress = Office.context.mailbox.item.sender.emailAddress;

    console.log("Sender: " + senderName + " (" + senderAddress + ")");

    ```
  name: sender
  fullName: sender
  langs:
  - typeScript
  type: property
  syntax:
    content: 'sender: EmailAddressDetails;'
    return:
      type:
      - EmailAddressDetails
- uid: Outlook_1_1.Office.MessageRead.subject
  summary: >-
    Получает описание, которое отображается в поле Тема элемента.


    Свойство subject получает или задает всю тему элемента для отправки с почтового сервера.


    Свойство subject возвращает строку. Свойство normalizedSubject позволяет получить тему без начальных префиксов, таких как RE: и FW:.


    \[[Набор API-Интерфейсов: почтовый ящик 1.0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    <table><tr><td>[Минимальный уровень разрешений](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadItem</td></tr>


    <tr><td>[Применимый режим Outlook](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Чтение сообщения</td></tr></table>

    ####Примеры


    ```javascript

    // The following JavaScript code example shows how to access the

    // `subject` property of the current item in Outlook.


    // The initialize function is required for all apps.

    Office.initialize = function () {
        // Checks for the DOM to load using the jQuery ready function.
        $(document).ready(function () {
            // After the DOM is loaded, app-specific code can run.
            var item = Office.context.mailbox.item;
            var subject = item.subject;
            // Continue with processing the subject of the current item,
            // which can be a message or appointment.
        });
    };

    ```
  name: subject
  fullName: subject
  langs:
  - typeScript
  type: property
  syntax:
    content: 'subject: string;'
    return:
      type:
      - string
- uid: Outlook_1_1.Office.MessageRead.to
  summary: >-
    Предоставляет доступ к получателям, указанным в строке Кому сообщения. Тип объекта и уровень доступа зависят от режима текущего элемента.


    Свойство to возвращает массив, содержащий объект EmailAddressDetails для каждого получателя в строке Кому сообщения. Коллекция может включать не более 100 элементов.


    \[[Набор API-Интерфейсов: почтовый ящик 1.0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    <table><tr><td>[Минимальный уровень разрешений](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadItem</td></tr>


    <tr><td>[Применимый режим Outlook](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Чтение сообщения</td></tr></table>

    ####Примеры


    ```javascript

    console.log(JSON.stringify(Office.context.mailbox.item.to));

    ```
  name: to
  fullName: to
  langs:
  - typeScript
  type: property
  syntax:
    content: 'to: EmailAddressDetails[];'
    return:
      type:
      - EmailAddressDetails[]
